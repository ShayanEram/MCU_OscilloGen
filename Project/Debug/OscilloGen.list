
OscilloGen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016050  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013d90  08016320  08016320  00017320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802a0b0  0802a0b0  0002b0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0802a0b8  0802a0b8  0002b0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0802a0c0  0802a0c0  0002b0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000160  24000000  0802a0c4  0002c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004910  24000160  0802a224  0002c160  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004a70  0802a224  0002ca70  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002c160  2**0
                  CONTENTS, READONLY
 10 .debug_info   00068f75  00000000  00000000  0002c18e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000a555  00000000  00000000  00095103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002a70  00000000  00000000  0009f658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001fae  00000000  00000000  000a20c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000484e7  00000000  00000000  000a4076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004a3a9  00000000  00000000  000ec55d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018266a  00000000  00000000  00136906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b3  00000000  00000000  002b8f70  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b904  00000000  00000000  002b9024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  002c4928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00003267  00000000  00000000  002c498d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000070  00000000  00000000  002c7bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000160 	.word	0x24000160
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08016308 	.word	0x08016308

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000164 	.word	0x24000164
 800030c:	08016308 	.word	0x08016308

08000310 <arm_bitreversal_32>:
 8000310:	1c4b      	adds	r3, r1, #1
 8000312:	2b01      	cmp	r3, #1
 8000314:	bf98      	it	ls
 8000316:	4770      	bxls	lr
 8000318:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800031c:	1c91      	adds	r1, r2, #2
 800031e:	089b      	lsrs	r3, r3, #2

08000320 <arm_bitreversal_32_0>:
 8000320:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000324:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000328:	880a      	ldrh	r2, [r1, #0]
 800032a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800032e:	4480      	add	r8, r0
 8000330:	4481      	add	r9, r0
 8000332:	4402      	add	r2, r0
 8000334:	4484      	add	ip, r0
 8000336:	f8d9 7000 	ldr.w	r7, [r9]
 800033a:	f8d8 6000 	ldr.w	r6, [r8]
 800033e:	6815      	ldr	r5, [r2, #0]
 8000340:	f8dc 4000 	ldr.w	r4, [ip]
 8000344:	f8c9 6000 	str.w	r6, [r9]
 8000348:	f8c8 7000 	str.w	r7, [r8]
 800034c:	f8cc 5000 	str.w	r5, [ip]
 8000350:	6014      	str	r4, [r2, #0]
 8000352:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000356:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800035a:	6855      	ldr	r5, [r2, #4]
 800035c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000360:	f8c9 6004 	str.w	r6, [r9, #4]
 8000364:	f8c8 7004 	str.w	r7, [r8, #4]
 8000368:	f8cc 5004 	str.w	r5, [ip, #4]
 800036c:	6054      	str	r4, [r2, #4]
 800036e:	3108      	adds	r1, #8
 8000370:	3b01      	subs	r3, #1
 8000372:	d1d5      	bne.n	8000320 <arm_bitreversal_32_0>
 8000374:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000378:	4770      	bx	lr

0800037a <arm_bitreversal_16>:
 800037a:	1c4b      	adds	r3, r1, #1
 800037c:	2b01      	cmp	r3, #1
 800037e:	bf98      	it	ls
 8000380:	4770      	bxls	lr
 8000382:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000386:	1c91      	adds	r1, r2, #2
 8000388:	089b      	lsrs	r3, r3, #2

0800038a <arm_bitreversal_16_0>:
 800038a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800038e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000392:	880a      	ldrh	r2, [r1, #0]
 8000394:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000398:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800039c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80003a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80003a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80003a8:	f8d9 7000 	ldr.w	r7, [r9]
 80003ac:	f8d8 6000 	ldr.w	r6, [r8]
 80003b0:	6815      	ldr	r5, [r2, #0]
 80003b2:	f8dc 4000 	ldr.w	r4, [ip]
 80003b6:	f8c9 6000 	str.w	r6, [r9]
 80003ba:	f8c8 7000 	str.w	r7, [r8]
 80003be:	f8cc 5000 	str.w	r5, [ip]
 80003c2:	6014      	str	r4, [r2, #0]
 80003c4:	3108      	adds	r1, #8
 80003c6:	3b01      	subs	r3, #1
 80003c8:	d1df      	bne.n	800038a <arm_bitreversal_16_0>
 80003ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80003ce:	4770      	bx	lr

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <memchr>:
 80003e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80003e4:	2a10      	cmp	r2, #16
 80003e6:	db2b      	blt.n	8000440 <memchr+0x60>
 80003e8:	f010 0f07 	tst.w	r0, #7
 80003ec:	d008      	beq.n	8000400 <memchr+0x20>
 80003ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003f2:	3a01      	subs	r2, #1
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d02d      	beq.n	8000454 <memchr+0x74>
 80003f8:	f010 0f07 	tst.w	r0, #7
 80003fc:	b342      	cbz	r2, 8000450 <memchr+0x70>
 80003fe:	d1f6      	bne.n	80003ee <memchr+0xe>
 8000400:	b4f0      	push	{r4, r5, r6, r7}
 8000402:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000406:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800040a:	f022 0407 	bic.w	r4, r2, #7
 800040e:	f07f 0700 	mvns.w	r7, #0
 8000412:	2300      	movs	r3, #0
 8000414:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000418:	3c08      	subs	r4, #8
 800041a:	ea85 0501 	eor.w	r5, r5, r1
 800041e:	ea86 0601 	eor.w	r6, r6, r1
 8000422:	fa85 f547 	uadd8	r5, r5, r7
 8000426:	faa3 f587 	sel	r5, r3, r7
 800042a:	fa86 f647 	uadd8	r6, r6, r7
 800042e:	faa5 f687 	sel	r6, r5, r7
 8000432:	b98e      	cbnz	r6, 8000458 <memchr+0x78>
 8000434:	d1ee      	bne.n	8000414 <memchr+0x34>
 8000436:	bcf0      	pop	{r4, r5, r6, r7}
 8000438:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800043c:	f002 0207 	and.w	r2, r2, #7
 8000440:	b132      	cbz	r2, 8000450 <memchr+0x70>
 8000442:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000446:	3a01      	subs	r2, #1
 8000448:	ea83 0301 	eor.w	r3, r3, r1
 800044c:	b113      	cbz	r3, 8000454 <memchr+0x74>
 800044e:	d1f8      	bne.n	8000442 <memchr+0x62>
 8000450:	2000      	movs	r0, #0
 8000452:	4770      	bx	lr
 8000454:	3801      	subs	r0, #1
 8000456:	4770      	bx	lr
 8000458:	2d00      	cmp	r5, #0
 800045a:	bf06      	itte	eq
 800045c:	4635      	moveq	r5, r6
 800045e:	3803      	subeq	r0, #3
 8000460:	3807      	subne	r0, #7
 8000462:	f015 0f01 	tst.w	r5, #1
 8000466:	d107      	bne.n	8000478 <memchr+0x98>
 8000468:	3001      	adds	r0, #1
 800046a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800046e:	bf02      	ittt	eq
 8000470:	3001      	addeq	r0, #1
 8000472:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000476:	3001      	addeq	r0, #1
 8000478:	bcf0      	pop	{r4, r5, r6, r7}
 800047a:	3801      	subs	r0, #1
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <__aeabi_uldivmod>:
 8000480:	b953      	cbnz	r3, 8000498 <__aeabi_uldivmod+0x18>
 8000482:	b94a      	cbnz	r2, 8000498 <__aeabi_uldivmod+0x18>
 8000484:	2900      	cmp	r1, #0
 8000486:	bf08      	it	eq
 8000488:	2800      	cmpeq	r0, #0
 800048a:	bf1c      	itt	ne
 800048c:	f04f 31ff 	movne.w	r1, #4294967295
 8000490:	f04f 30ff 	movne.w	r0, #4294967295
 8000494:	f000 b988 	b.w	80007a8 <__aeabi_idiv0>
 8000498:	f1ad 0c08 	sub.w	ip, sp, #8
 800049c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004a0:	f000 f806 	bl	80004b0 <__udivmoddi4>
 80004a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004ac:	b004      	add	sp, #16
 80004ae:	4770      	bx	lr

080004b0 <__udivmoddi4>:
 80004b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004b4:	9d08      	ldr	r5, [sp, #32]
 80004b6:	468e      	mov	lr, r1
 80004b8:	4604      	mov	r4, r0
 80004ba:	4688      	mov	r8, r1
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d14a      	bne.n	8000556 <__udivmoddi4+0xa6>
 80004c0:	428a      	cmp	r2, r1
 80004c2:	4617      	mov	r7, r2
 80004c4:	d962      	bls.n	800058c <__udivmoddi4+0xdc>
 80004c6:	fab2 f682 	clz	r6, r2
 80004ca:	b14e      	cbz	r6, 80004e0 <__udivmoddi4+0x30>
 80004cc:	f1c6 0320 	rsb	r3, r6, #32
 80004d0:	fa01 f806 	lsl.w	r8, r1, r6
 80004d4:	fa20 f303 	lsr.w	r3, r0, r3
 80004d8:	40b7      	lsls	r7, r6
 80004da:	ea43 0808 	orr.w	r8, r3, r8
 80004de:	40b4      	lsls	r4, r6
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	fa1f fc87 	uxth.w	ip, r7
 80004e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80004f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004f6:	fb01 f20c 	mul.w	r2, r1, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d909      	bls.n	8000512 <__udivmoddi4+0x62>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f101 30ff 	add.w	r0, r1, #4294967295
 8000504:	f080 80ea 	bcs.w	80006dc <__udivmoddi4+0x22c>
 8000508:	429a      	cmp	r2, r3
 800050a:	f240 80e7 	bls.w	80006dc <__udivmoddi4+0x22c>
 800050e:	3902      	subs	r1, #2
 8000510:	443b      	add	r3, r7
 8000512:	1a9a      	subs	r2, r3, r2
 8000514:	b2a3      	uxth	r3, r4
 8000516:	fbb2 f0fe 	udiv	r0, r2, lr
 800051a:	fb0e 2210 	mls	r2, lr, r0, r2
 800051e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000522:	fb00 fc0c 	mul.w	ip, r0, ip
 8000526:	459c      	cmp	ip, r3
 8000528:	d909      	bls.n	800053e <__udivmoddi4+0x8e>
 800052a:	18fb      	adds	r3, r7, r3
 800052c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000530:	f080 80d6 	bcs.w	80006e0 <__udivmoddi4+0x230>
 8000534:	459c      	cmp	ip, r3
 8000536:	f240 80d3 	bls.w	80006e0 <__udivmoddi4+0x230>
 800053a:	443b      	add	r3, r7
 800053c:	3802      	subs	r0, #2
 800053e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000542:	eba3 030c 	sub.w	r3, r3, ip
 8000546:	2100      	movs	r1, #0
 8000548:	b11d      	cbz	r5, 8000552 <__udivmoddi4+0xa2>
 800054a:	40f3      	lsrs	r3, r6
 800054c:	2200      	movs	r2, #0
 800054e:	e9c5 3200 	strd	r3, r2, [r5]
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	428b      	cmp	r3, r1
 8000558:	d905      	bls.n	8000566 <__udivmoddi4+0xb6>
 800055a:	b10d      	cbz	r5, 8000560 <__udivmoddi4+0xb0>
 800055c:	e9c5 0100 	strd	r0, r1, [r5]
 8000560:	2100      	movs	r1, #0
 8000562:	4608      	mov	r0, r1
 8000564:	e7f5      	b.n	8000552 <__udivmoddi4+0xa2>
 8000566:	fab3 f183 	clz	r1, r3
 800056a:	2900      	cmp	r1, #0
 800056c:	d146      	bne.n	80005fc <__udivmoddi4+0x14c>
 800056e:	4573      	cmp	r3, lr
 8000570:	d302      	bcc.n	8000578 <__udivmoddi4+0xc8>
 8000572:	4282      	cmp	r2, r0
 8000574:	f200 8105 	bhi.w	8000782 <__udivmoddi4+0x2d2>
 8000578:	1a84      	subs	r4, r0, r2
 800057a:	eb6e 0203 	sbc.w	r2, lr, r3
 800057e:	2001      	movs	r0, #1
 8000580:	4690      	mov	r8, r2
 8000582:	2d00      	cmp	r5, #0
 8000584:	d0e5      	beq.n	8000552 <__udivmoddi4+0xa2>
 8000586:	e9c5 4800 	strd	r4, r8, [r5]
 800058a:	e7e2      	b.n	8000552 <__udivmoddi4+0xa2>
 800058c:	2a00      	cmp	r2, #0
 800058e:	f000 8090 	beq.w	80006b2 <__udivmoddi4+0x202>
 8000592:	fab2 f682 	clz	r6, r2
 8000596:	2e00      	cmp	r6, #0
 8000598:	f040 80a4 	bne.w	80006e4 <__udivmoddi4+0x234>
 800059c:	1a8a      	subs	r2, r1, r2
 800059e:	0c03      	lsrs	r3, r0, #16
 80005a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005a4:	b280      	uxth	r0, r0
 80005a6:	b2bc      	uxth	r4, r7
 80005a8:	2101      	movs	r1, #1
 80005aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80005ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80005b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80005b6:	fb04 f20c 	mul.w	r2, r4, ip
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d907      	bls.n	80005ce <__udivmoddi4+0x11e>
 80005be:	18fb      	adds	r3, r7, r3
 80005c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80005c4:	d202      	bcs.n	80005cc <__udivmoddi4+0x11c>
 80005c6:	429a      	cmp	r2, r3
 80005c8:	f200 80e0 	bhi.w	800078c <__udivmoddi4+0x2dc>
 80005cc:	46c4      	mov	ip, r8
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80005d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80005d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80005dc:	fb02 f404 	mul.w	r4, r2, r4
 80005e0:	429c      	cmp	r4, r3
 80005e2:	d907      	bls.n	80005f4 <__udivmoddi4+0x144>
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80005ea:	d202      	bcs.n	80005f2 <__udivmoddi4+0x142>
 80005ec:	429c      	cmp	r4, r3
 80005ee:	f200 80ca 	bhi.w	8000786 <__udivmoddi4+0x2d6>
 80005f2:	4602      	mov	r2, r0
 80005f4:	1b1b      	subs	r3, r3, r4
 80005f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80005fa:	e7a5      	b.n	8000548 <__udivmoddi4+0x98>
 80005fc:	f1c1 0620 	rsb	r6, r1, #32
 8000600:	408b      	lsls	r3, r1
 8000602:	fa22 f706 	lsr.w	r7, r2, r6
 8000606:	431f      	orrs	r7, r3
 8000608:	fa0e f401 	lsl.w	r4, lr, r1
 800060c:	fa20 f306 	lsr.w	r3, r0, r6
 8000610:	fa2e fe06 	lsr.w	lr, lr, r6
 8000614:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000618:	4323      	orrs	r3, r4
 800061a:	fa00 f801 	lsl.w	r8, r0, r1
 800061e:	fa1f fc87 	uxth.w	ip, r7
 8000622:	fbbe f0f9 	udiv	r0, lr, r9
 8000626:	0c1c      	lsrs	r4, r3, #16
 8000628:	fb09 ee10 	mls	lr, r9, r0, lr
 800062c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000630:	fb00 fe0c 	mul.w	lr, r0, ip
 8000634:	45a6      	cmp	lr, r4
 8000636:	fa02 f201 	lsl.w	r2, r2, r1
 800063a:	d909      	bls.n	8000650 <__udivmoddi4+0x1a0>
 800063c:	193c      	adds	r4, r7, r4
 800063e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000642:	f080 809c 	bcs.w	800077e <__udivmoddi4+0x2ce>
 8000646:	45a6      	cmp	lr, r4
 8000648:	f240 8099 	bls.w	800077e <__udivmoddi4+0x2ce>
 800064c:	3802      	subs	r0, #2
 800064e:	443c      	add	r4, r7
 8000650:	eba4 040e 	sub.w	r4, r4, lr
 8000654:	fa1f fe83 	uxth.w	lr, r3
 8000658:	fbb4 f3f9 	udiv	r3, r4, r9
 800065c:	fb09 4413 	mls	r4, r9, r3, r4
 8000660:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000664:	fb03 fc0c 	mul.w	ip, r3, ip
 8000668:	45a4      	cmp	ip, r4
 800066a:	d908      	bls.n	800067e <__udivmoddi4+0x1ce>
 800066c:	193c      	adds	r4, r7, r4
 800066e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000672:	f080 8082 	bcs.w	800077a <__udivmoddi4+0x2ca>
 8000676:	45a4      	cmp	ip, r4
 8000678:	d97f      	bls.n	800077a <__udivmoddi4+0x2ca>
 800067a:	3b02      	subs	r3, #2
 800067c:	443c      	add	r4, r7
 800067e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000682:	eba4 040c 	sub.w	r4, r4, ip
 8000686:	fba0 ec02 	umull	lr, ip, r0, r2
 800068a:	4564      	cmp	r4, ip
 800068c:	4673      	mov	r3, lr
 800068e:	46e1      	mov	r9, ip
 8000690:	d362      	bcc.n	8000758 <__udivmoddi4+0x2a8>
 8000692:	d05f      	beq.n	8000754 <__udivmoddi4+0x2a4>
 8000694:	b15d      	cbz	r5, 80006ae <__udivmoddi4+0x1fe>
 8000696:	ebb8 0203 	subs.w	r2, r8, r3
 800069a:	eb64 0409 	sbc.w	r4, r4, r9
 800069e:	fa04 f606 	lsl.w	r6, r4, r6
 80006a2:	fa22 f301 	lsr.w	r3, r2, r1
 80006a6:	431e      	orrs	r6, r3
 80006a8:	40cc      	lsrs	r4, r1
 80006aa:	e9c5 6400 	strd	r6, r4, [r5]
 80006ae:	2100      	movs	r1, #0
 80006b0:	e74f      	b.n	8000552 <__udivmoddi4+0xa2>
 80006b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80006b6:	0c01      	lsrs	r1, r0, #16
 80006b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80006bc:	b280      	uxth	r0, r0
 80006be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80006c2:	463b      	mov	r3, r7
 80006c4:	4638      	mov	r0, r7
 80006c6:	463c      	mov	r4, r7
 80006c8:	46b8      	mov	r8, r7
 80006ca:	46be      	mov	lr, r7
 80006cc:	2620      	movs	r6, #32
 80006ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80006d2:	eba2 0208 	sub.w	r2, r2, r8
 80006d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80006da:	e766      	b.n	80005aa <__udivmoddi4+0xfa>
 80006dc:	4601      	mov	r1, r0
 80006de:	e718      	b.n	8000512 <__udivmoddi4+0x62>
 80006e0:	4610      	mov	r0, r2
 80006e2:	e72c      	b.n	800053e <__udivmoddi4+0x8e>
 80006e4:	f1c6 0220 	rsb	r2, r6, #32
 80006e8:	fa2e f302 	lsr.w	r3, lr, r2
 80006ec:	40b7      	lsls	r7, r6
 80006ee:	40b1      	lsls	r1, r6
 80006f0:	fa20 f202 	lsr.w	r2, r0, r2
 80006f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006f8:	430a      	orrs	r2, r1
 80006fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80006fe:	b2bc      	uxth	r4, r7
 8000700:	fb0e 3318 	mls	r3, lr, r8, r3
 8000704:	0c11      	lsrs	r1, r2, #16
 8000706:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800070a:	fb08 f904 	mul.w	r9, r8, r4
 800070e:	40b0      	lsls	r0, r6
 8000710:	4589      	cmp	r9, r1
 8000712:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000716:	b280      	uxth	r0, r0
 8000718:	d93e      	bls.n	8000798 <__udivmoddi4+0x2e8>
 800071a:	1879      	adds	r1, r7, r1
 800071c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000720:	d201      	bcs.n	8000726 <__udivmoddi4+0x276>
 8000722:	4589      	cmp	r9, r1
 8000724:	d81f      	bhi.n	8000766 <__udivmoddi4+0x2b6>
 8000726:	eba1 0109 	sub.w	r1, r1, r9
 800072a:	fbb1 f9fe 	udiv	r9, r1, lr
 800072e:	fb09 f804 	mul.w	r8, r9, r4
 8000732:	fb0e 1119 	mls	r1, lr, r9, r1
 8000736:	b292      	uxth	r2, r2
 8000738:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800073c:	4542      	cmp	r2, r8
 800073e:	d229      	bcs.n	8000794 <__udivmoddi4+0x2e4>
 8000740:	18ba      	adds	r2, r7, r2
 8000742:	f109 31ff 	add.w	r1, r9, #4294967295
 8000746:	d2c4      	bcs.n	80006d2 <__udivmoddi4+0x222>
 8000748:	4542      	cmp	r2, r8
 800074a:	d2c2      	bcs.n	80006d2 <__udivmoddi4+0x222>
 800074c:	f1a9 0102 	sub.w	r1, r9, #2
 8000750:	443a      	add	r2, r7
 8000752:	e7be      	b.n	80006d2 <__udivmoddi4+0x222>
 8000754:	45f0      	cmp	r8, lr
 8000756:	d29d      	bcs.n	8000694 <__udivmoddi4+0x1e4>
 8000758:	ebbe 0302 	subs.w	r3, lr, r2
 800075c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000760:	3801      	subs	r0, #1
 8000762:	46e1      	mov	r9, ip
 8000764:	e796      	b.n	8000694 <__udivmoddi4+0x1e4>
 8000766:	eba7 0909 	sub.w	r9, r7, r9
 800076a:	4449      	add	r1, r9
 800076c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000770:	fbb1 f9fe 	udiv	r9, r1, lr
 8000774:	fb09 f804 	mul.w	r8, r9, r4
 8000778:	e7db      	b.n	8000732 <__udivmoddi4+0x282>
 800077a:	4673      	mov	r3, lr
 800077c:	e77f      	b.n	800067e <__udivmoddi4+0x1ce>
 800077e:	4650      	mov	r0, sl
 8000780:	e766      	b.n	8000650 <__udivmoddi4+0x1a0>
 8000782:	4608      	mov	r0, r1
 8000784:	e6fd      	b.n	8000582 <__udivmoddi4+0xd2>
 8000786:	443b      	add	r3, r7
 8000788:	3a02      	subs	r2, #2
 800078a:	e733      	b.n	80005f4 <__udivmoddi4+0x144>
 800078c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000790:	443b      	add	r3, r7
 8000792:	e71c      	b.n	80005ce <__udivmoddi4+0x11e>
 8000794:	4649      	mov	r1, r9
 8000796:	e79c      	b.n	80006d2 <__udivmoddi4+0x222>
 8000798:	eba1 0109 	sub.w	r1, r1, r9
 800079c:	46c4      	mov	ip, r8
 800079e:	fbb1 f9fe 	udiv	r9, r1, lr
 80007a2:	fb09 f804 	mul.w	r8, r9, r4
 80007a6:	e7c4      	b.n	8000732 <__udivmoddi4+0x282>

080007a8 <__aeabi_idiv0>:
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop

080007ac <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	@ 0x30
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2224      	movs	r2, #36	@ 0x24
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f014 ffc3 	bl	8015750 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ca:	4b32      	ldr	r3, [pc, #200]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007cc:	4a32      	ldr	r2, [pc, #200]	@ (8000898 <MX_ADC1_Init+0xec>)
 80007ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007d0:	4b30      	ldr	r3, [pc, #192]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007e4:	2204      	movs	r2, #4
 80007e6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007ee:	4b29      	ldr	r3, [pc, #164]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007f4:	4b27      	ldr	r3, [pc, #156]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fa:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000802:	4b24      	ldr	r3, [pc, #144]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000804:	2200      	movs	r2, #0
 8000806:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000808:	4b22      	ldr	r3, [pc, #136]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800080a:	2200      	movs	r2, #0
 800080c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800080e:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000810:	2203      	movs	r2, #3
 8000812:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000814:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000816:	2200      	movs	r2, #0
 8000818:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800081a:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800081c:	2200      	movs	r2, #0
 800081e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000820:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000828:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800082a:	2201      	movs	r2, #1
 800082c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082e:	4819      	ldr	r0, [pc, #100]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000830:	f002 fe20 	bl	8003474 <HAL_ADC_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800083a:	f000 fd29 	bl	8001290 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000842:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000846:	4619      	mov	r1, r3
 8000848:	4812      	ldr	r0, [pc, #72]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800084a:	f004 f88d 	bl	8004968 <HAL_ADCEx_MultiModeConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000854:	f000 fd1c 	bl	8001290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000858:	4b10      	ldr	r3, [pc, #64]	@ (800089c <MX_ADC1_Init+0xf0>)
 800085a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085c:	2306      	movs	r3, #6
 800085e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000864:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000868:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800086a:	2304      	movs	r3, #4
 800086c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800087e:	f003 fa59 	bl	8003d34 <HAL_ADC_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000888:	f000 fd02 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	3730      	adds	r7, #48	@ 0x30
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2400017c 	.word	0x2400017c
 8000898:	40022000 	.word	0x40022000
 800089c:	0c900008 	.word	0x0c900008

080008a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b0b8      	sub	sp, #224	@ 0xe0
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	22b8      	movs	r2, #184	@ 0xb8
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f014 ff45 	bl	8015750 <memset>
  if(adcHandle->Instance==ADC1)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a48      	ldr	r2, [pc, #288]	@ (80009ec <HAL_ADC_MspInit+0x14c>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	f040 8088 	bne.w	80009e2 <HAL_ADC_MspInit+0x142>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008d2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80008d6:	f04f 0300 	mov.w	r3, #0
 80008da:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80008de:	2304      	movs	r3, #4
 80008e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 80008e2:	230c      	movs	r3, #12
 80008e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80008f2:	23c0      	movs	r3, #192	@ 0xc0
 80008f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008fe:	2300      	movs	r3, #0
 8000900:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4618      	mov	r0, r3
 800090a:	f009 fc73 	bl	800a1f4 <HAL_RCCEx_PeriphCLKConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000914:	f000 fcbc 	bl	8001290 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000918:	4b35      	ldr	r3, [pc, #212]	@ (80009f0 <HAL_ADC_MspInit+0x150>)
 800091a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800091e:	4a34      	ldr	r2, [pc, #208]	@ (80009f0 <HAL_ADC_MspInit+0x150>)
 8000920:	f043 0320 	orr.w	r3, r3, #32
 8000924:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000928:	4b31      	ldr	r3, [pc, #196]	@ (80009f0 <HAL_ADC_MspInit+0x150>)
 800092a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800092e:	f003 0320 	and.w	r3, r3, #32
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b2e      	ldr	r3, [pc, #184]	@ (80009f0 <HAL_ADC_MspInit+0x150>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093c:	4a2c      	ldr	r2, [pc, #176]	@ (80009f0 <HAL_ADC_MspInit+0x150>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000946:	4b2a      	ldr	r3, [pc, #168]	@ (80009f0 <HAL_ADC_MspInit+0x150>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000954:	2340      	movs	r3, #64	@ 0x40
 8000956:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095a:	2303      	movs	r3, #3
 800095c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800096a:	4619      	mov	r1, r3
 800096c:	4821      	ldr	r0, [pc, #132]	@ (80009f4 <HAL_ADC_MspInit+0x154>)
 800096e:	f006 fec5 	bl	80076fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8000972:	4b21      	ldr	r3, [pc, #132]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 8000974:	4a21      	ldr	r2, [pc, #132]	@ (80009fc <HAL_ADC_MspInit+0x15c>)
 8000976:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000978:	4b1f      	ldr	r3, [pc, #124]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 800097a:	2209      	movs	r2, #9
 800097c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800097e:	4b1e      	ldr	r3, [pc, #120]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000984:	4b1c      	ldr	r3, [pc, #112]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800098a:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 800098c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000990:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000992:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 8000994:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000998:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800099a:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 800099c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009a2:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 80009a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80009aa:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009b0:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009b6:	4810      	ldr	r0, [pc, #64]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 80009b8:	f004 fc7e 	bl	80052b8 <HAL_DMA_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_ADC_MspInit+0x126>
    {
      Error_Handler();
 80009c2:	f000 fc65 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a0b      	ldr	r2, [pc, #44]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 80009ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80009cc:	4a0a      	ldr	r2, [pc, #40]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	2012      	movs	r0, #18
 80009d8:	f004 fa59 	bl	8004e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009dc:	2012      	movs	r0, #18
 80009de:	f004 fa70 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80009e2:	bf00      	nop
 80009e4:	37e0      	adds	r7, #224	@ 0xe0
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40022000 	.word	0x40022000
 80009f0:	58024400 	.word	0x58024400
 80009f4:	58020000 	.word	0x58020000
 80009f8:	240001ec 	.word	0x240001ec
 80009fc:	40020088 	.word	0x40020088

08000a00 <MX_CORDIC_Init>:
DMA_HandleTypeDef hdma_cordic_rd;
DMA_HandleTypeDef hdma_cordic_wr;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_CORDIC_Init+0x20>)
 8000a06:	4a07      	ldr	r2, [pc, #28]	@ (8000a24 <MX_CORDIC_Init+0x24>)
 8000a08:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <MX_CORDIC_Init+0x20>)
 8000a0c:	f004 f88e 	bl	8004b2c <HAL_CORDIC_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8000a16:	f000 fc3b 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	24000264 	.word	0x24000264
 8000a24:	48024400 	.word	0x48024400

08000a28 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a3c      	ldr	r2, [pc, #240]	@ (8000b28 <HAL_CORDIC_MspInit+0x100>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d172      	bne.n	8000b20 <HAL_CORDIC_MspInit+0xf8>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000a3a:	4b3c      	ldr	r3, [pc, #240]	@ (8000b2c <HAL_CORDIC_MspInit+0x104>)
 8000a3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000a40:	4a3a      	ldr	r2, [pc, #232]	@ (8000b2c <HAL_CORDIC_MspInit+0x104>)
 8000a42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a46:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000a4a:	4b38      	ldr	r3, [pc, #224]	@ (8000b2c <HAL_CORDIC_MspInit+0x104>)
 8000a4c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]

    /* CORDIC DMA Init */
    /* CORDIC_RD Init */
    hdma_cordic_rd.Instance = DMA1_Stream7;
 8000a58:	4b35      	ldr	r3, [pc, #212]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000a5a:	4a36      	ldr	r2, [pc, #216]	@ (8000b34 <HAL_CORDIC_MspInit+0x10c>)
 8000a5c:	601a      	str	r2, [r3, #0]
    hdma_cordic_rd.Init.Request = DMA_REQUEST_CORDIC_READ;
 8000a5e:	4b34      	ldr	r3, [pc, #208]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000a60:	227a      	movs	r2, #122	@ 0x7a
 8000a62:	605a      	str	r2, [r3, #4]
    hdma_cordic_rd.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a64:	4b32      	ldr	r3, [pc, #200]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
    hdma_cordic_rd.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a6a:	4b31      	ldr	r3, [pc, #196]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
    hdma_cordic_rd.Init.MemInc = DMA_MINC_ENABLE;
 8000a70:	4b2f      	ldr	r3, [pc, #188]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000a72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a76:	611a      	str	r2, [r3, #16]
    hdma_cordic_rd.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a78:	4b2d      	ldr	r3, [pc, #180]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
    hdma_cordic_rd.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a7e:	4b2c      	ldr	r3, [pc, #176]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
    hdma_cordic_rd.Init.Mode = DMA_CIRCULAR;
 8000a84:	4b2a      	ldr	r3, [pc, #168]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000a86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a8a:	61da      	str	r2, [r3, #28]
    hdma_cordic_rd.Init.Priority = DMA_PRIORITY_LOW;
 8000a8c:	4b28      	ldr	r3, [pc, #160]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	621a      	str	r2, [r3, #32]
    hdma_cordic_rd.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a92:	4b27      	ldr	r3, [pc, #156]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_cordic_rd) != HAL_OK)
 8000a98:	4825      	ldr	r0, [pc, #148]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000a9a:	f004 fc0d 	bl	80052b8 <HAL_DMA_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <HAL_CORDIC_MspInit+0x80>
    {
      Error_Handler();
 8000aa4:	f000 fbf4 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaIn,hdma_cordic_rd);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a21      	ldr	r2, [pc, #132]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000aac:	619a      	str	r2, [r3, #24]
 8000aae:	4a20      	ldr	r2, [pc, #128]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* CORDIC_WR Init */
    hdma_cordic_wr.Instance = DMA2_Stream0;
 8000ab4:	4b20      	ldr	r3, [pc, #128]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000ab6:	4a21      	ldr	r2, [pc, #132]	@ (8000b3c <HAL_CORDIC_MspInit+0x114>)
 8000ab8:	601a      	str	r2, [r3, #0]
    hdma_cordic_wr.Init.Request = DMA_REQUEST_CORDIC_WRITE;
 8000aba:	4b1f      	ldr	r3, [pc, #124]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000abc:	227b      	movs	r2, #123	@ 0x7b
 8000abe:	605a      	str	r2, [r3, #4]
    hdma_cordic_wr.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000ac2:	2240      	movs	r2, #64	@ 0x40
 8000ac4:	609a      	str	r2, [r3, #8]
    hdma_cordic_wr.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
    hdma_cordic_wr.Init.MemInc = DMA_MINC_ENABLE;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000ace:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ad2:	611a      	str	r2, [r3, #16]
    hdma_cordic_wr.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
    hdma_cordic_wr.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ada:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
    hdma_cordic_wr.Init.Mode = DMA_CIRCULAR;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000ae2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ae6:	61da      	str	r2, [r3, #28]
    hdma_cordic_wr.Init.Priority = DMA_PRIORITY_LOW;
 8000ae8:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	621a      	str	r2, [r3, #32]
    hdma_cordic_wr.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aee:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_cordic_wr) != HAL_OK)
 8000af4:	4810      	ldr	r0, [pc, #64]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000af6:	f004 fbdf 	bl	80052b8 <HAL_DMA_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <HAL_CORDIC_MspInit+0xdc>
    {
      Error_Handler();
 8000b00:	f000 fbc6 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaOut,hdma_cordic_wr);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a0c      	ldr	r2, [pc, #48]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000b08:	61da      	str	r2, [r3, #28]
 8000b0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* CORDIC interrupt Init */
    HAL_NVIC_SetPriority(CORDIC_IRQn, 0, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	209a      	movs	r0, #154	@ 0x9a
 8000b16:	f004 f9ba 	bl	8004e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CORDIC_IRQn);
 8000b1a:	209a      	movs	r0, #154	@ 0x9a
 8000b1c:	f004 f9d1 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	48024400 	.word	0x48024400
 8000b2c:	58024400 	.word	0x58024400
 8000b30:	2400028c 	.word	0x2400028c
 8000b34:	400200b8 	.word	0x400200b8
 8000b38:	24000304 	.word	0x24000304
 8000b3c:	40020410 	.word	0x40020410

08000b40 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	@ 0x28
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2224      	movs	r2, #36	@ 0x24
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f014 fdff 	bl	8015750 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b52:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <MX_DAC1_Init+0x5c>)
 8000b54:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <MX_DAC1_Init+0x60>)
 8000b56:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b58:	4810      	ldr	r0, [pc, #64]	@ (8000b9c <MX_DAC1_Init+0x5c>)
 8000b5a:	f004 fa45 	bl	8004fe8 <HAL_DAC_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b64:	f000 fb94 	bl	8001290 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000b6c:	230a      	movs	r3, #10
 8000b6e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000b74:	2301      	movs	r3, #1
 8000b76:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	4619      	mov	r1, r3
 8000b82:	4806      	ldr	r0, [pc, #24]	@ (8000b9c <MX_DAC1_Init+0x5c>)
 8000b84:	f004 fa52 	bl	800502c <HAL_DAC_ConfigChannel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b8e:	f000 fb7f 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	@ 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2400037c 	.word	0x2400037c
 8000ba0:	40007400 	.word	0x40007400

08000ba4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	@ 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a30      	ldr	r2, [pc, #192]	@ (8000c84 <HAL_DAC_MspInit+0xe0>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d159      	bne.n	8000c7a <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000bc6:	4b30      	ldr	r3, [pc, #192]	@ (8000c88 <HAL_DAC_MspInit+0xe4>)
 8000bc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8000c88 <HAL_DAC_MspInit+0xe4>)
 8000bce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000bd2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8000c88 <HAL_DAC_MspInit+0xe4>)
 8000bd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	4b28      	ldr	r3, [pc, #160]	@ (8000c88 <HAL_DAC_MspInit+0xe4>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bea:	4a27      	ldr	r2, [pc, #156]	@ (8000c88 <HAL_DAC_MspInit+0xe4>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf4:	4b24      	ldr	r3, [pc, #144]	@ (8000c88 <HAL_DAC_MspInit+0xe4>)
 8000bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c02:	2310      	movs	r3, #16
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c06:	2303      	movs	r3, #3
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	481d      	ldr	r0, [pc, #116]	@ (8000c8c <HAL_DAC_MspInit+0xe8>)
 8000c16:	f006 fd71 	bl	80076fc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream6;
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000c94 <HAL_DAC_MspInit+0xf0>)
 8000c1e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c22:	2243      	movs	r2, #67	@ 0x43
 8000c24:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c28:	2240      	movs	r2, #64	@ 0x40
 8000c2a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c32:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c38:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c3c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c40:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c42:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c44:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c48:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c50:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c52:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c58:	4b0d      	ldr	r3, [pc, #52]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c5e:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c60:	f004 fb2a 	bl	80052b8 <HAL_DMA_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000c6a:	f000 fb11 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a07      	ldr	r2, [pc, #28]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	4a06      	ldr	r2, [pc, #24]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	@ 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40007400 	.word	0x40007400
 8000c88:	58024400 	.word	0x58024400
 8000c8c:	58020000 	.word	0x58020000
 8000c90:	24000390 	.word	0x24000390
 8000c94:	400200a0 	.word	0x400200a0

08000c98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c9e:	4b35      	ldr	r3, [pc, #212]	@ (8000d74 <MX_DMA_Init+0xdc>)
 8000ca0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ca4:	4a33      	ldr	r2, [pc, #204]	@ (8000d74 <MX_DMA_Init+0xdc>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000cae:	4b31      	ldr	r3, [pc, #196]	@ (8000d74 <MX_DMA_Init+0xdc>)
 8000cb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8000d74 <MX_DMA_Init+0xdc>)
 8000cbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8000d74 <MX_DMA_Init+0xdc>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ccc:	4b29      	ldr	r3, [pc, #164]	@ (8000d74 <MX_DMA_Init+0xdc>)
 8000cce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	200b      	movs	r0, #11
 8000ce0:	f004 f8d5 	bl	8004e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ce4:	200b      	movs	r0, #11
 8000ce6:	f004 f8ec 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	200c      	movs	r0, #12
 8000cf0:	f004 f8cd 	bl	8004e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000cf4:	200c      	movs	r0, #12
 8000cf6:	f004 f8e4 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	200d      	movs	r0, #13
 8000d00:	f004 f8c5 	bl	8004e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d04:	200d      	movs	r0, #13
 8000d06:	f004 f8dc 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	200e      	movs	r0, #14
 8000d10:	f004 f8bd 	bl	8004e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d14:	200e      	movs	r0, #14
 8000d16:	f004 f8d4 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	200f      	movs	r0, #15
 8000d20:	f004 f8b5 	bl	8004e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d24:	200f      	movs	r0, #15
 8000d26:	f004 f8cc 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2010      	movs	r0, #16
 8000d30:	f004 f8ad 	bl	8004e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d34:	2010      	movs	r0, #16
 8000d36:	f004 f8c4 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2011      	movs	r0, #17
 8000d40:	f004 f8a5 	bl	8004e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d44:	2011      	movs	r0, #17
 8000d46:	f004 f8bc 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	202f      	movs	r0, #47	@ 0x2f
 8000d50:	f004 f89d 	bl	8004e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d54:	202f      	movs	r0, #47	@ 0x2f
 8000d56:	f004 f8b4 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2038      	movs	r0, #56	@ 0x38
 8000d60:	f004 f895 	bl	8004e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d64:	2038      	movs	r0, #56	@ 0x38
 8000d66:	f004 f8ac 	bl	8004ec2 <HAL_NVIC_EnableIRQ>

}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	58024400 	.word	0x58024400

08000d78 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08e      	sub	sp, #56	@ 0x38
 8000d7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d8e:	4b71      	ldr	r3, [pc, #452]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d94:	4a6f      	ldr	r2, [pc, #444]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000d96:	f043 0310 	orr.w	r3, r3, #16
 8000d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d9e:	4b6d      	ldr	r3, [pc, #436]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da4:	f003 0310 	and.w	r3, r3, #16
 8000da8:	623b      	str	r3, [r7, #32]
 8000daa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dac:	4b69      	ldr	r3, [pc, #420]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db2:	4a68      	ldr	r2, [pc, #416]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dbc:	4b65      	ldr	r3, [pc, #404]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	61fb      	str	r3, [r7, #28]
 8000dc8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dca:	4b62      	ldr	r3, [pc, #392]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd0:	4a60      	ldr	r2, [pc, #384]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000dd2:	f043 0320 	orr.w	r3, r3, #32
 8000dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dda:	4b5e      	ldr	r3, [pc, #376]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de0:	f003 0320 	and.w	r3, r3, #32
 8000de4:	61bb      	str	r3, [r7, #24]
 8000de6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000de8:	4b5a      	ldr	r3, [pc, #360]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dee:	4a59      	ldr	r2, [pc, #356]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000df0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000df4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df8:	4b56      	ldr	r3, [pc, #344]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b53      	ldr	r3, [pc, #332]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0c:	4a51      	ldr	r2, [pc, #324]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e16:	4b4f      	ldr	r3, [pc, #316]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	4b4b      	ldr	r3, [pc, #300]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2a:	4a4a      	ldr	r2, [pc, #296]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e34:	4b47      	ldr	r3, [pc, #284]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e42:	4b44      	ldr	r3, [pc, #272]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e48:	4a42      	ldr	r2, [pc, #264]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e52:	4b40      	ldr	r3, [pc, #256]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e60:	4b3c      	ldr	r3, [pc, #240]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e66:	4a3b      	ldr	r2, [pc, #236]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e68:	f043 0308 	orr.w	r3, r3, #8
 8000e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e70:	4b38      	ldr	r3, [pc, #224]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE10
                           PE11 PE12 PE13 PE14
                           PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000e7e:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e84:	2303      	movs	r3, #3
 8000e86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e90:	4619      	mov	r1, r3
 8000e92:	4831      	ldr	r0, [pc, #196]	@ (8000f58 <MX_GPIO_Init+0x1e0>)
 8000e94:	f006 fc32 	bl	80076fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8000e98:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8000e9c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eaa:	4619      	mov	r1, r3
 8000eac:	482b      	ldr	r0, [pc, #172]	@ (8000f5c <MX_GPIO_Init+0x1e4>)
 8000eae:	f006 fc25 	bl	80076fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000eb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4826      	ldr	r0, [pc, #152]	@ (8000f60 <MX_GPIO_Init+0x1e8>)
 8000ec8:	f006 fc18 	bl	80076fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	4821      	ldr	r0, [pc, #132]	@ (8000f64 <MX_GPIO_Init+0x1ec>)
 8000ee0:	f006 fc0c 	bl	80076fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_10;
 8000ee4:	f240 5303 	movw	r3, #1283	@ 0x503
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eea:	2303      	movs	r3, #3
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	481b      	ldr	r0, [pc, #108]	@ (8000f68 <MX_GPIO_Init+0x1f0>)
 8000efa:	f006 fbff 	bl	80076fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000efe:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f04:	2303      	movs	r3, #3
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f10:	4619      	mov	r1, r3
 8000f12:	4816      	ldr	r0, [pc, #88]	@ (8000f6c <MX_GPIO_Init+0x1f4>)
 8000f14:	f006 fbf2 	bl	80076fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG8 PG10 PG11 PG12
                           PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f18:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4810      	ldr	r0, [pc, #64]	@ (8000f70 <MX_GPIO_Init+0x1f8>)
 8000f2e:	f006 fbe5 	bl	80076fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f36:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f44:	4619      	mov	r1, r3
 8000f46:	480b      	ldr	r0, [pc, #44]	@ (8000f74 <MX_GPIO_Init+0x1fc>)
 8000f48:	f006 fbd8 	bl	80076fc <HAL_GPIO_Init>

}
 8000f4c:	bf00      	nop
 8000f4e:	3738      	adds	r7, #56	@ 0x38
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	58024400 	.word	0x58024400
 8000f58:	58021000 	.word	0x58021000
 8000f5c:	58020800 	.word	0x58020800
 8000f60:	58021400 	.word	0x58021400
 8000f64:	58021c00 	.word	0x58021c00
 8000f68:	58020000 	.word	0x58020000
 8000f6c:	58020400 	.word	0x58020400
 8000f70:	58021800 	.word	0x58021800
 8000f74:	58020c00 	.word	0x58020c00

08000f78 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff0 <MX_I2C1_Init+0x78>)
 8000f80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0BBFF;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000f84:	4a1b      	ldr	r2, [pc, #108]	@ (8000ff4 <MX_I2C1_Init+0x7c>)
 8000f86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f88:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f8e:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f94:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fb2:	480e      	ldr	r0, [pc, #56]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000fb4:	f006 fd4a 	bl	8007a4c <HAL_I2C_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fbe:	f000 f967 	bl	8001290 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4809      	ldr	r0, [pc, #36]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000fc6:	f006 fddd 	bl	8007b84 <HAL_I2CEx_ConfigAnalogFilter>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fd0:	f000 f95e 	bl	8001290 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4805      	ldr	r0, [pc, #20]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000fd8:	f006 fe1f 	bl	8007c1a <HAL_I2CEx_ConfigDigitalFilter>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fe2:	f000 f955 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	24000408 	.word	0x24000408
 8000ff0:	40005400 	.word	0x40005400
 8000ff4:	20b0bbff 	.word	0x20b0bbff

08000ff8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b0b8      	sub	sp, #224	@ 0xe0
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001010:	f107 0310 	add.w	r3, r7, #16
 8001014:	22b8      	movs	r2, #184	@ 0xb8
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f014 fb99 	bl	8015750 <memset>
  if(i2cHandle->Instance==I2C1)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a26      	ldr	r2, [pc, #152]	@ (80010bc <HAL_I2C_MspInit+0xc4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d145      	bne.n	80010b4 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001028:	f04f 0208 	mov.w	r2, #8
 800102c:	f04f 0300 	mov.w	r3, #0
 8001030:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001034:	2300      	movs	r3, #0
 8001036:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800103a:	f107 0310 	add.w	r3, r7, #16
 800103e:	4618      	mov	r0, r3
 8001040:	f009 f8d8 	bl	800a1f4 <HAL_RCCEx_PeriphCLKConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800104a:	f000 f921 	bl	8001290 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b1c      	ldr	r3, [pc, #112]	@ (80010c0 <HAL_I2C_MspInit+0xc8>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001054:	4a1a      	ldr	r2, [pc, #104]	@ (80010c0 <HAL_I2C_MspInit+0xc8>)
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800105e:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <HAL_I2C_MspInit+0xc8>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800106c:	23c0      	movs	r3, #192	@ 0xc0
 800106e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001072:	2312      	movs	r3, #18
 8001074:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001084:	2304      	movs	r3, #4
 8001086:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800108e:	4619      	mov	r1, r3
 8001090:	480c      	ldr	r0, [pc, #48]	@ (80010c4 <HAL_I2C_MspInit+0xcc>)
 8001092:	f006 fb33 	bl	80076fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <HAL_I2C_MspInit+0xc8>)
 8001098:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800109c:	4a08      	ldr	r2, [pc, #32]	@ (80010c0 <HAL_I2C_MspInit+0xc8>)
 800109e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_I2C_MspInit+0xc8>)
 80010a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010b4:	bf00      	nop
 80010b6:	37e0      	adds	r7, #224	@ 0xe0
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40005400 	.word	0x40005400
 80010c0:	58024400 	.word	0x58024400
 80010c4:	58020400 	.word	0x58020400

080010c8 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 80010cc:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <MX_IWDG1_Init+0x34>)
 80010ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001100 <MX_IWDG1_Init+0x38>)
 80010d0:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 80010d2:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <MX_IWDG1_Init+0x34>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 200;
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <MX_IWDG1_Init+0x34>)
 80010da:	22c8      	movs	r2, #200	@ 0xc8
 80010dc:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 420;
 80010de:	4b07      	ldr	r3, [pc, #28]	@ (80010fc <MX_IWDG1_Init+0x34>)
 80010e0:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 80010e4:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	@ (80010fc <MX_IWDG1_Init+0x34>)
 80010e8:	f006 fde3 	bl	8007cb2 <HAL_IWDG_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_IWDG1_Init+0x2e>
  {
    Error_Handler();
 80010f2:	f000 f8cd 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2400045c 	.word	0x2400045c
 8001100:	58004800 	.word	0x58004800

08001104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001108:	f000 f896 	bl	8001238 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110c:	f001 fe3a 	bl	8002d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001110:	f000 f81e 	bl	8001150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001114:	f7ff fe30 	bl	8000d78 <MX_GPIO_Init>
  MX_DMA_Init();
 8001118:	f7ff fdbe 	bl	8000c98 <MX_DMA_Init>
  MX_TIM1_Init();
 800111c:	f000 fc20 	bl	8001960 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001120:	f000 fdc4 	bl	8001cac <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001124:	f000 f8ba 	bl	800129c <MX_SPI1_Init>
  MX_I2C1_Init();
 8001128:	f7ff ff26 	bl	8000f78 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800112c:	f012 fb28 	bl	8013780 <MX_USB_DEVICE_Init>
  MX_IWDG1_Init();
 8001130:	f7ff ffca 	bl	80010c8 <MX_IWDG1_Init>
  MX_ADC1_Init();
 8001134:	f7ff fb3a 	bl	80007ac <MX_ADC1_Init>
  MX_DAC1_Init();
 8001138:	f7ff fd02 	bl	8000b40 <MX_DAC1_Init>
  MX_TIM2_Init();
 800113c:	f000 fcbc 	bl	8001ab8 <MX_TIM2_Init>
  MX_CORDIC_Init();
 8001140:	f7ff fc5e 	bl	8000a00 <MX_CORDIC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MainCpp();
 8001144:	f001 faaa 	bl	800269c <MainCpp>
 8001148:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800114a:	4618      	mov	r0, r3
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b09c      	sub	sp, #112	@ 0x70
 8001154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001156:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800115a:	224c      	movs	r2, #76	@ 0x4c
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f014 faf6 	bl	8015750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2220      	movs	r2, #32
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f014 faf0 	bl	8015750 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001170:	2002      	movs	r0, #2
 8001172:	f008 f88f 	bl	8009294 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	4b2e      	ldr	r3, [pc, #184]	@ (8001234 <SystemClock_Config+0xe4>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	4a2d      	ldr	r2, [pc, #180]	@ (8001234 <SystemClock_Config+0xe4>)
 8001180:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001184:	6193      	str	r3, [r2, #24]
 8001186:	4b2b      	ldr	r3, [pc, #172]	@ (8001234 <SystemClock_Config+0xe4>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001192:	bf00      	nop
 8001194:	4b27      	ldr	r3, [pc, #156]	@ (8001234 <SystemClock_Config+0xe4>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800119c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011a0:	d1f8      	bne.n	8001194 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80011a2:	232a      	movs	r3, #42	@ 0x2a
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80011aa:	2340      	movs	r3, #64	@ 0x40
 80011ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011ae:	2301      	movs	r3, #1
 80011b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011b2:	2301      	movs	r3, #1
 80011b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b6:	2302      	movs	r3, #2
 80011b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ba:	2300      	movs	r3, #0
 80011bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011be:	2304      	movs	r3, #4
 80011c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 33;
 80011c2:	2321      	movs	r3, #33	@ 0x21
 80011c4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80011c6:	2301      	movs	r3, #1
 80011c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80011ca:	2303      	movs	r3, #3
 80011cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011d2:	230c      	movs	r3, #12
 80011d4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80011da:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80011de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e4:	4618      	mov	r0, r3
 80011e6:	f008 f89f 	bl	8009328 <HAL_RCC_OscConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80011f0:	f000 f84e 	bl	8001290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f4:	233f      	movs	r3, #63	@ 0x3f
 80011f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f8:	2303      	movs	r3, #3
 80011fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001200:	2308      	movs	r3, #8
 8001202:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001204:	2340      	movs	r3, #64	@ 0x40
 8001206:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001208:	2340      	movs	r3, #64	@ 0x40
 800120a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800120c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001210:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001212:	2340      	movs	r3, #64	@ 0x40
 8001214:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2103      	movs	r1, #3
 800121a:	4618      	mov	r0, r3
 800121c:	f008 fc5e 	bl	8009adc <HAL_RCC_ClockConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001226:	f000 f833 	bl	8001290 <Error_Handler>
  }
}
 800122a:	bf00      	nop
 800122c:	3770      	adds	r7, #112	@ 0x70
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	58024800 	.word	0x58024800

08001238 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800123e:	463b      	mov	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800124a:	f003 fe55 	bl	8004ef8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800124e:	2301      	movs	r3, #1
 8001250:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001252:	2300      	movs	r3, #0
 8001254:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800125a:	231f      	movs	r3, #31
 800125c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800125e:	2387      	movs	r3, #135	@ 0x87
 8001260:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001262:	2300      	movs	r3, #0
 8001264:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001266:	2300      	movs	r3, #0
 8001268:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800126a:	2301      	movs	r3, #1
 800126c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800126e:	2301      	movs	r3, #1
 8001270:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800127a:	463b      	mov	r3, r7
 800127c:	4618      	mov	r0, r3
 800127e:	f003 fe73 	bl	8004f68 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001282:	2004      	movs	r0, #4
 8001284:	f003 fe50 	bl	8004f28 <HAL_MPU_Enable>

}
 8001288:	bf00      	nop
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
}
 8001296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <Error_Handler+0x8>

0800129c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012a0:	4b27      	ldr	r3, [pc, #156]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012a2:	4a28      	ldr	r2, [pc, #160]	@ (8001344 <MX_SPI1_Init+0xa8>)
 80012a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012a6:	4b26      	ldr	r3, [pc, #152]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012a8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80012ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012ae:	4b24      	ldr	r3, [pc, #144]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_32BIT;
 80012b4:	4b22      	ldr	r3, [pc, #136]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012b6:	221f      	movs	r2, #31
 80012b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ba:	4b21      	ldr	r3, [pc, #132]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012c8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80012cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012da:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e0:	4b17      	ldr	r3, [pc, #92]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80012e6:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012ec:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001300:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <MX_SPI1_Init+0xa4>)
 8001302:	2200      	movs	r2, #0
 8001304:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <MX_SPI1_Init+0xa4>)
 8001308:	2200      	movs	r2, #0
 800130a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <MX_SPI1_Init+0xa4>)
 800130e:	2200      	movs	r2, #0
 8001310:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001312:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <MX_SPI1_Init+0xa4>)
 8001314:	2200      	movs	r2, #0
 8001316:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <MX_SPI1_Init+0xa4>)
 800131a:	2200      	movs	r2, #0
 800131c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <MX_SPI1_Init+0xa4>)
 8001320:	2200      	movs	r2, #0
 8001322:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <MX_SPI1_Init+0xa4>)
 8001326:	2200      	movs	r2, #0
 8001328:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	@ (8001340 <MX_SPI1_Init+0xa4>)
 800132c:	f00b fb48 	bl	800c9c0 <HAL_SPI_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001336:	f7ff ffab 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2400046c 	.word	0x2400046c
 8001344:	40013000 	.word	0x40013000

08001348 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b0ba      	sub	sp, #232	@ 0xe8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001360:	f107 0318 	add.w	r3, r7, #24
 8001364:	22b8      	movs	r2, #184	@ 0xb8
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f014 f9f1 	bl	8015750 <memset>
  if(spiHandle->Instance==SPI1)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a6b      	ldr	r2, [pc, #428]	@ (8001520 <HAL_SPI_MspInit+0x1d8>)
 8001374:	4293      	cmp	r3, r2
 8001376:	f040 80cf 	bne.w	8001518 <HAL_SPI_MspInit+0x1d0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800137a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001386:	2300      	movs	r3, #0
 8001388:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138a:	f107 0318 	add.w	r3, r7, #24
 800138e:	4618      	mov	r0, r3
 8001390:	f008 ff30 	bl	800a1f4 <HAL_RCCEx_PeriphCLKConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800139a:	f7ff ff79 	bl	8001290 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800139e:	4b61      	ldr	r3, [pc, #388]	@ (8001524 <HAL_SPI_MspInit+0x1dc>)
 80013a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013a4:	4a5f      	ldr	r2, [pc, #380]	@ (8001524 <HAL_SPI_MspInit+0x1dc>)
 80013a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80013ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001524 <HAL_SPI_MspInit+0x1dc>)
 80013b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b59      	ldr	r3, [pc, #356]	@ (8001524 <HAL_SPI_MspInit+0x1dc>)
 80013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c2:	4a58      	ldr	r2, [pc, #352]	@ (8001524 <HAL_SPI_MspInit+0x1dc>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013cc:	4b55      	ldr	r3, [pc, #340]	@ (8001524 <HAL_SPI_MspInit+0x1dc>)
 80013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013da:	4b52      	ldr	r3, [pc, #328]	@ (8001524 <HAL_SPI_MspInit+0x1dc>)
 80013dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e0:	4a50      	ldr	r2, [pc, #320]	@ (8001524 <HAL_SPI_MspInit+0x1dc>)
 80013e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001524 <HAL_SPI_MspInit+0x1dc>)
 80013ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15(JTDI)     ------> SPI1_NSS
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15;
 80013f8:	f248 03a0 	movw	r3, #32928	@ 0x80a0
 80013fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001412:	2305      	movs	r3, #5
 8001414:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001418:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800141c:	4619      	mov	r1, r3
 800141e:	4842      	ldr	r0, [pc, #264]	@ (8001528 <HAL_SPI_MspInit+0x1e0>)
 8001420:	f006 f96c 	bl	80076fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001424:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001428:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800143e:	2305      	movs	r3, #5
 8001440:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001444:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001448:	4619      	mov	r1, r3
 800144a:	4838      	ldr	r0, [pc, #224]	@ (800152c <HAL_SPI_MspInit+0x1e4>)
 800144c:	f006 f956 	bl	80076fc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream3;
 8001450:	4b37      	ldr	r3, [pc, #220]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 8001452:	4a38      	ldr	r2, [pc, #224]	@ (8001534 <HAL_SPI_MspInit+0x1ec>)
 8001454:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001456:	4b36      	ldr	r3, [pc, #216]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 8001458:	2226      	movs	r2, #38	@ 0x26
 800145a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800145c:	4b34      	ldr	r3, [pc, #208]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 800145e:	2240      	movs	r2, #64	@ 0x40
 8001460:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001462:	4b33      	ldr	r3, [pc, #204]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 8001464:	2200      	movs	r2, #0
 8001466:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001468:	4b31      	ldr	r3, [pc, #196]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 800146a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800146e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001470:	4b2f      	ldr	r3, [pc, #188]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 8001472:	2200      	movs	r2, #0
 8001474:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001476:	4b2e      	ldr	r3, [pc, #184]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800147c:	4b2c      	ldr	r3, [pc, #176]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001482:	4b2b      	ldr	r3, [pc, #172]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 8001484:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001488:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800148a:	4b29      	ldr	r3, [pc, #164]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 800148c:	2200      	movs	r2, #0
 800148e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001490:	4827      	ldr	r0, [pc, #156]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 8001492:	f003 ff11 	bl	80052b8 <HAL_DMA_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 800149c:	f7ff fef8 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a23      	ldr	r2, [pc, #140]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 80014a4:	679a      	str	r2, [r3, #120]	@ 0x78
 80014a6:	4a22      	ldr	r2, [pc, #136]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 80014ac:	4b22      	ldr	r3, [pc, #136]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 80014ae:	4a23      	ldr	r2, [pc, #140]	@ (800153c <HAL_SPI_MspInit+0x1f4>)
 80014b0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80014b2:	4b21      	ldr	r3, [pc, #132]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 80014b4:	2225      	movs	r2, #37	@ 0x25
 80014b6:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014be:	4b1e      	ldr	r3, [pc, #120]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 80014c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014ca:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014d2:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80014d8:	4b17      	ldr	r3, [pc, #92]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80014de:	4b16      	ldr	r3, [pc, #88]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 80014e0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014e4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014e6:	4b14      	ldr	r3, [pc, #80]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80014ec:	4812      	ldr	r0, [pc, #72]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 80014ee:	f003 fee3 	bl	80052b8 <HAL_DMA_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_SPI_MspInit+0x1b4>
    {
      Error_Handler();
 80014f8:	f7ff feca 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 8001500:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001502:	4a0d      	ldr	r2, [pc, #52]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001508:	2200      	movs	r2, #0
 800150a:	2100      	movs	r1, #0
 800150c:	2023      	movs	r0, #35	@ 0x23
 800150e:	f003 fcbe 	bl	8004e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001512:	2023      	movs	r0, #35	@ 0x23
 8001514:	f003 fcd5 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001518:	bf00      	nop
 800151a:	37e8      	adds	r7, #232	@ 0xe8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40013000 	.word	0x40013000
 8001524:	58024400 	.word	0x58024400
 8001528:	58020000 	.word	0x58020000
 800152c:	58021800 	.word	0x58021800
 8001530:	240004f4 	.word	0x240004f4
 8001534:	40020058 	.word	0x40020058
 8001538:	2400056c 	.word	0x2400056c
 800153c:	40020070 	.word	0x40020070

08001540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	4b0a      	ldr	r3, [pc, #40]	@ (8001570 <HAL_MspInit+0x30>)
 8001548:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800154c:	4a08      	ldr	r2, [pc, #32]	@ (8001570 <HAL_MspInit+0x30>)
 800154e:	f043 0302 	orr.w	r3, r3, #2
 8001552:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <HAL_MspInit+0x30>)
 8001558:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	58024400 	.word	0x58024400

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <NMI_Handler+0x4>

0800157c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <HardFault_Handler+0x4>

08001584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <MemManage_Handler+0x4>

0800158c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <BusFault_Handler+0x4>

08001594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <UsageFault_Handler+0x4>

0800159c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ca:	f001 fc4d 	bl	8002e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80015d8:	4802      	ldr	r0, [pc, #8]	@ (80015e4 <DMA1_Stream0_IRQHandler+0x10>)
 80015da:	f004 ff29 	bl	8006430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	24000680 	.word	0x24000680

080015e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80015ec:	4802      	ldr	r0, [pc, #8]	@ (80015f8 <DMA1_Stream1_IRQHandler+0x10>)
 80015ee:	f004 ff1f 	bl	8006430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	2400078c 	.word	0x2400078c

080015fc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001600:	4802      	ldr	r0, [pc, #8]	@ (800160c <DMA1_Stream2_IRQHandler+0x10>)
 8001602:	f004 ff15 	bl	8006430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	24000804 	.word	0x24000804

08001610 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001614:	4802      	ldr	r0, [pc, #8]	@ (8001620 <DMA1_Stream3_IRQHandler+0x10>)
 8001616:	f004 ff0b 	bl	8006430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	240004f4 	.word	0x240004f4

08001624 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001628:	4802      	ldr	r0, [pc, #8]	@ (8001634 <DMA1_Stream4_IRQHandler+0x10>)
 800162a:	f004 ff01 	bl	8006430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2400056c 	.word	0x2400056c

08001638 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <DMA1_Stream5_IRQHandler+0x10>)
 800163e:	f004 fef7 	bl	8006430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	240001ec 	.word	0x240001ec

0800164c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001650:	4802      	ldr	r0, [pc, #8]	@ (800165c <DMA1_Stream6_IRQHandler+0x10>)
 8001652:	f004 feed 	bl	8006430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	24000390 	.word	0x24000390

08001660 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001664:	4802      	ldr	r0, [pc, #8]	@ (8001670 <ADC_IRQHandler+0x10>)
 8001666:	f002 f90d 	bl	8003884 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2400017c 	.word	0x2400017c

08001674 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <TIM2_IRQHandler+0x10>)
 800167a:	f00b fe52 	bl	800d322 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	24000634 	.word	0x24000634

08001688 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800168c:	4802      	ldr	r0, [pc, #8]	@ (8001698 <SPI1_IRQHandler+0x10>)
 800168e:	f00b fabb 	bl	800cc08 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	2400046c 	.word	0x2400046c

0800169c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016a0:	4802      	ldr	r0, [pc, #8]	@ (80016ac <USART2_IRQHandler+0x10>)
 80016a2:	f00c ff39 	bl	800e518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	240006f8 	.word	0x240006f8

080016b0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_rd);
 80016b4:	4802      	ldr	r0, [pc, #8]	@ (80016c0 <DMA1_Stream7_IRQHandler+0x10>)
 80016b6:	f004 febb 	bl	8006430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	2400028c 	.word	0x2400028c

080016c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_wr);
 80016c8:	4802      	ldr	r0, [pc, #8]	@ (80016d4 <DMA2_Stream0_IRQHandler+0x10>)
 80016ca:	f004 feb1 	bl	8006430 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	24000304 	.word	0x24000304

080016d8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80016dc:	4802      	ldr	r0, [pc, #8]	@ (80016e8 <OTG_HS_IRQHandler+0x10>)
 80016de:	f006 fc7a 	bl	8007fd6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	24004220 	.word	0x24004220

080016ec <CORDIC_IRQHandler>:

/**
  * @brief This function handles CORDIC interrupt.
  */
void CORDIC_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CORDIC_IRQn 0 */

  /* USER CODE END CORDIC_IRQn 0 */
  HAL_CORDIC_IRQHandler(&hcordic);
 80016f0:	4802      	ldr	r0, [pc, #8]	@ (80016fc <CORDIC_IRQHandler+0x10>)
 80016f2:	f003 fa56 	bl	8004ba2 <HAL_CORDIC_IRQHandler>
  /* USER CODE BEGIN CORDIC_IRQn 1 */

  /* USER CODE END CORDIC_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	24000264 	.word	0x24000264

08001700 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	e00a      	b.n	8001728 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001712:	f3af 8000 	nop.w
 8001716:	4601      	mov	r1, r0
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	60ba      	str	r2, [r7, #8]
 800171e:	b2ca      	uxtb	r2, r1
 8001720:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	429a      	cmp	r2, r3
 800172e:	dbf0      	blt.n	8001712 <_read+0x12>
  }

  return len;
 8001730:	687b      	ldr	r3, [r7, #4]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <_close>:
  }
  return len;
}

int _close(int file)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001762:	605a      	str	r2, [r3, #4]
  return 0;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <_isatty>:

int _isatty(int file)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800177a:	2301      	movs	r3, #1
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ac:	4a14      	ldr	r2, [pc, #80]	@ (8001800 <_sbrk+0x5c>)
 80017ae:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <_sbrk+0x60>)
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b8:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c0:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <_sbrk+0x64>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	@ (800180c <_sbrk+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d4:	f014 f80a 	bl	80157ec <__errno>
 80017d8:	4603      	mov	r3, r0
 80017da:	220c      	movs	r2, #12
 80017dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	e009      	b.n	80017f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ea:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <_sbrk+0x64>)
 80017f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	24050000 	.word	0x24050000
 8001804:	00000400 	.word	0x00000400
 8001808:	240005e4 	.word	0x240005e4
 800180c:	24004a70 	.word	0x24004a70

08001810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001814:	4b3e      	ldr	r3, [pc, #248]	@ (8001910 <SystemInit+0x100>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800181a:	4a3d      	ldr	r2, [pc, #244]	@ (8001910 <SystemInit+0x100>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001824:	4b3b      	ldr	r3, [pc, #236]	@ (8001914 <SystemInit+0x104>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 030f 	and.w	r3, r3, #15
 800182c:	2b06      	cmp	r3, #6
 800182e:	d807      	bhi.n	8001840 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001830:	4b38      	ldr	r3, [pc, #224]	@ (8001914 <SystemInit+0x104>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f023 030f 	bic.w	r3, r3, #15
 8001838:	4a36      	ldr	r2, [pc, #216]	@ (8001914 <SystemInit+0x104>)
 800183a:	f043 0307 	orr.w	r3, r3, #7
 800183e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001840:	4b35      	ldr	r3, [pc, #212]	@ (8001918 <SystemInit+0x108>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a34      	ldr	r2, [pc, #208]	@ (8001918 <SystemInit+0x108>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800184c:	4b32      	ldr	r3, [pc, #200]	@ (8001918 <SystemInit+0x108>)
 800184e:	2200      	movs	r2, #0
 8001850:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001852:	4b31      	ldr	r3, [pc, #196]	@ (8001918 <SystemInit+0x108>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	4930      	ldr	r1, [pc, #192]	@ (8001918 <SystemInit+0x108>)
 8001858:	4b30      	ldr	r3, [pc, #192]	@ (800191c <SystemInit+0x10c>)
 800185a:	4013      	ands	r3, r2
 800185c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800185e:	4b2d      	ldr	r3, [pc, #180]	@ (8001914 <SystemInit+0x104>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d007      	beq.n	800187a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800186a:	4b2a      	ldr	r3, [pc, #168]	@ (8001914 <SystemInit+0x104>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 030f 	bic.w	r3, r3, #15
 8001872:	4a28      	ldr	r2, [pc, #160]	@ (8001914 <SystemInit+0x104>)
 8001874:	f043 0307 	orr.w	r3, r3, #7
 8001878:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800187a:	4b27      	ldr	r3, [pc, #156]	@ (8001918 <SystemInit+0x108>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001880:	4b25      	ldr	r3, [pc, #148]	@ (8001918 <SystemInit+0x108>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001886:	4b24      	ldr	r3, [pc, #144]	@ (8001918 <SystemInit+0x108>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800188c:	4b22      	ldr	r3, [pc, #136]	@ (8001918 <SystemInit+0x108>)
 800188e:	4a24      	ldr	r2, [pc, #144]	@ (8001920 <SystemInit+0x110>)
 8001890:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001892:	4b21      	ldr	r3, [pc, #132]	@ (8001918 <SystemInit+0x108>)
 8001894:	4a23      	ldr	r2, [pc, #140]	@ (8001924 <SystemInit+0x114>)
 8001896:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001898:	4b1f      	ldr	r3, [pc, #124]	@ (8001918 <SystemInit+0x108>)
 800189a:	4a23      	ldr	r2, [pc, #140]	@ (8001928 <SystemInit+0x118>)
 800189c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800189e:	4b1e      	ldr	r3, [pc, #120]	@ (8001918 <SystemInit+0x108>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80018a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001918 <SystemInit+0x108>)
 80018a6:	4a20      	ldr	r2, [pc, #128]	@ (8001928 <SystemInit+0x118>)
 80018a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80018aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001918 <SystemInit+0x108>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80018b0:	4b19      	ldr	r3, [pc, #100]	@ (8001918 <SystemInit+0x108>)
 80018b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001928 <SystemInit+0x118>)
 80018b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80018b6:	4b18      	ldr	r3, [pc, #96]	@ (8001918 <SystemInit+0x108>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018bc:	4b16      	ldr	r3, [pc, #88]	@ (8001918 <SystemInit+0x108>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a15      	ldr	r2, [pc, #84]	@ (8001918 <SystemInit+0x108>)
 80018c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018c8:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <SystemInit+0x108>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80018ce:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <SystemInit+0x108>)
 80018d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d113      	bne.n	8001904 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80018dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <SystemInit+0x108>)
 80018de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001918 <SystemInit+0x108>)
 80018e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018e8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <SystemInit+0x11c>)
 80018ee:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80018f2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80018f4:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <SystemInit+0x108>)
 80018f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018fa:	4a07      	ldr	r2, [pc, #28]	@ (8001918 <SystemInit+0x108>)
 80018fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001900:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00
 8001914:	52002000 	.word	0x52002000
 8001918:	58024400 	.word	0x58024400
 800191c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001920:	02020200 	.word	0x02020200
 8001924:	01ff0000 	.word	0x01ff0000
 8001928:	01010280 	.word	0x01010280
 800192c:	52004000 	.word	0x52004000

08001930 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001934:	4b09      	ldr	r3, [pc, #36]	@ (800195c <ExitRun0Mode+0x2c>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4a08      	ldr	r2, [pc, #32]	@ (800195c <ExitRun0Mode+0x2c>)
 800193a:	f043 0302 	orr.w	r3, r3, #2
 800193e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001940:	bf00      	nop
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <ExitRun0Mode+0x2c>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f9      	beq.n	8001942 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800194e:	bf00      	nop
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	58024800 	.word	0x58024800

08001960 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b09c      	sub	sp, #112	@ 0x70
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001966:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001974:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001980:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
 8001990:	615a      	str	r2, [r3, #20]
 8001992:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	2234      	movs	r2, #52	@ 0x34
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f013 fed8 	bl	8015750 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019a0:	4b43      	ldr	r3, [pc, #268]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 80019a2:	4a44      	ldr	r2, [pc, #272]	@ (8001ab4 <MX_TIM1_Init+0x154>)
 80019a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1020-1;
 80019a6:	4b42      	ldr	r3, [pc, #264]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 80019a8:	f240 32fb 	movw	r2, #1019	@ 0x3fb
 80019ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ae:	4b40      	ldr	r3, [pc, #256]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 80019b4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 80019b6:	2209      	movs	r2, #9
 80019b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ba:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019c0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019cc:	4838      	ldr	r0, [pc, #224]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 80019ce:	f00b fbf0 	bl	800d1b2 <HAL_TIM_Base_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80019d8:	f7ff fc5a 	bl	8001290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019e0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80019e6:	4619      	mov	r1, r3
 80019e8:	4831      	ldr	r0, [pc, #196]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 80019ea:	f00b feb5 	bl	800d758 <HAL_TIM_ConfigClockSource>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80019f4:	f7ff fc4c 	bl	8001290 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019f8:	482d      	ldr	r0, [pc, #180]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 80019fa:	f00b fc31 	bl	800d260 <HAL_TIM_PWM_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001a04:	f7ff fc44 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a14:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4825      	ldr	r0, [pc, #148]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 8001a1c:	f00c fbe6 	bl	800e1ec <HAL_TIMEx_MasterConfigSynchronization>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001a26:	f7ff fc33 	bl	8001290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a2a:	2360      	movs	r3, #96	@ 0x60
 8001a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a32:	2300      	movs	r3, #0
 8001a34:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a36:	2300      	movs	r3, #0
 8001a38:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a46:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4818      	ldr	r0, [pc, #96]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 8001a50:	f00b fd6e 	bl	800d530 <HAL_TIM_PWM_ConfigChannel>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001a5a:	f7ff fc19 	bl	8001290 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a76:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4807      	ldr	r0, [pc, #28]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 8001a94:	f00c fc46 	bl	800e324 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001a9e:	f7ff fbf7 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001aa2:	4803      	ldr	r0, [pc, #12]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 8001aa4:	f000 f8c6 	bl	8001c34 <HAL_TIM_MspPostInit>

}
 8001aa8:	bf00      	nop
 8001aaa:	3770      	adds	r7, #112	@ 0x70
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	240005e8 	.word	0x240005e8
 8001ab4:	40010000 	.word	0x40010000

08001ab8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001abe:	f107 0310 	add.w	r3, r7, #16
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b50 <MX_TIM2_Init+0x98>)
 8001ad8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001adc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 270-1;
 8001ade:	4b1c      	ldr	r3, [pc, #112]	@ (8001b50 <MX_TIM2_Init+0x98>)
 8001ae0:	f240 120d 	movw	r2, #269	@ 0x10d
 8001ae4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b50 <MX_TIM2_Init+0x98>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001aec:	4b18      	ldr	r3, [pc, #96]	@ (8001b50 <MX_TIM2_Init+0x98>)
 8001aee:	2263      	movs	r2, #99	@ 0x63
 8001af0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af2:	4b17      	ldr	r3, [pc, #92]	@ (8001b50 <MX_TIM2_Init+0x98>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af8:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <MX_TIM2_Init+0x98>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001afe:	4814      	ldr	r0, [pc, #80]	@ (8001b50 <MX_TIM2_Init+0x98>)
 8001b00:	f00b fb57 	bl	800d1b2 <HAL_TIM_Base_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b0a:	f7ff fbc1 	bl	8001290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	4619      	mov	r1, r3
 8001b1a:	480d      	ldr	r0, [pc, #52]	@ (8001b50 <MX_TIM2_Init+0x98>)
 8001b1c:	f00b fe1c 	bl	800d758 <HAL_TIM_ConfigClockSource>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b26:	f7ff fbb3 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b2a:	2320      	movs	r3, #32
 8001b2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	4619      	mov	r1, r3
 8001b36:	4806      	ldr	r0, [pc, #24]	@ (8001b50 <MX_TIM2_Init+0x98>)
 8001b38:	f00c fb58 	bl	800e1ec <HAL_TIMEx_MasterConfigSynchronization>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b42:	f7ff fba5 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	3720      	adds	r7, #32
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	24000634 	.word	0x24000634

08001b54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a30      	ldr	r2, [pc, #192]	@ (8001c24 <HAL_TIM_Base_MspInit+0xd0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d13e      	bne.n	8001be4 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b66:	4b30      	ldr	r3, [pc, #192]	@ (8001c28 <HAL_TIM_Base_MspInit+0xd4>)
 8001b68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b6c:	4a2e      	ldr	r2, [pc, #184]	@ (8001c28 <HAL_TIM_Base_MspInit+0xd4>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b76:	4b2c      	ldr	r3, [pc, #176]	@ (8001c28 <HAL_TIM_Base_MspInit+0xd4>)
 8001b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream0;
 8001b84:	4b29      	ldr	r3, [pc, #164]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001b86:	4a2a      	ldr	r2, [pc, #168]	@ (8001c30 <HAL_TIM_Base_MspInit+0xdc>)
 8001b88:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8001b8a:	4b28      	ldr	r3, [pc, #160]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001b8c:	220b      	movs	r2, #11
 8001b8e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b90:	4b26      	ldr	r3, [pc, #152]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001b92:	2240      	movs	r2, #64	@ 0x40
 8001b94:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b96:	4b25      	ldr	r3, [pc, #148]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001b9c:	4b23      	ldr	r3, [pc, #140]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001b9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ba2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ba4:	4b21      	ldr	r3, [pc, #132]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001ba6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001baa:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bac:	4b1f      	ldr	r3, [pc, #124]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001bae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bb2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001bba:	4b1c      	ldr	r3, [pc, #112]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001bc6:	4819      	ldr	r0, [pc, #100]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001bc8:	f003 fb76 	bl	80052b8 <HAL_DMA_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001bd2:	f7ff fb5d 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a14      	ldr	r2, [pc, #80]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001bda:	625a      	str	r2, [r3, #36]	@ 0x24
 8001bdc:	4a13      	ldr	r2, [pc, #76]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001be2:	e01b      	b.n	8001c1c <HAL_TIM_Base_MspInit+0xc8>
  else if(tim_baseHandle->Instance==TIM2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bec:	d116      	bne.n	8001c1c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bee:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <HAL_TIM_Base_MspInit+0xd4>)
 8001bf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bf4:	4a0c      	ldr	r2, [pc, #48]	@ (8001c28 <HAL_TIM_Base_MspInit+0xd4>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <HAL_TIM_Base_MspInit+0xd4>)
 8001c00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2100      	movs	r1, #0
 8001c10:	201c      	movs	r0, #28
 8001c12:	f003 f93c 	bl	8004e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c16:	201c      	movs	r0, #28
 8001c18:	f003 f953 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
}
 8001c1c:	bf00      	nop
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40010000 	.word	0x40010000
 8001c28:	58024400 	.word	0x58024400
 8001c2c:	24000680 	.word	0x24000680
 8001c30:	40020010 	.word	0x40020010

08001c34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a13      	ldr	r2, [pc, #76]	@ (8001ca0 <HAL_TIM_MspPostInit+0x6c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d11f      	bne.n	8001c96 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c56:	4b13      	ldr	r3, [pc, #76]	@ (8001ca4 <HAL_TIM_MspPostInit+0x70>)
 8001c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c5c:	4a11      	ldr	r2, [pc, #68]	@ (8001ca4 <HAL_TIM_MspPostInit+0x70>)
 8001c5e:	f043 0310 	orr.w	r3, r3, #16
 8001c62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c66:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca4 <HAL_TIM_MspPostInit+0x70>)
 8001c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c86:	2301      	movs	r3, #1
 8001c88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c8a:	f107 030c 	add.w	r3, r7, #12
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4805      	ldr	r0, [pc, #20]	@ (8001ca8 <HAL_TIM_MspPostInit+0x74>)
 8001c92:	f005 fd33 	bl	80076fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c96:	bf00      	nop
 8001c98:	3720      	adds	r7, #32
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40010000 	.word	0x40010000
 8001ca4:	58024400 	.word	0x58024400
 8001ca8:	58021000 	.word	0x58021000

08001cac <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cb0:	4b22      	ldr	r3, [pc, #136]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cb2:	4a23      	ldr	r2, [pc, #140]	@ (8001d40 <MX_USART2_UART_Init+0x94>)
 8001cb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cb6:	4b21      	ldr	r3, [pc, #132]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cca:	4b1c      	ldr	r3, [pc, #112]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd6:	4b19      	ldr	r3, [pc, #100]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cdc:	4b17      	ldr	r3, [pc, #92]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ce2:	4b16      	ldr	r3, [pc, #88]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ce8:	4b14      	ldr	r3, [pc, #80]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cee:	4b13      	ldr	r3, [pc, #76]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cf4:	4811      	ldr	r0, [pc, #68]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cf6:	f00c fbbf 	bl	800e478 <HAL_UART_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001d00:	f7ff fac6 	bl	8001290 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d04:	2100      	movs	r1, #0
 8001d06:	480d      	ldr	r0, [pc, #52]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001d08:	f00e f91c 	bl	800ff44 <HAL_UARTEx_SetTxFifoThreshold>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001d12:	f7ff fabd 	bl	8001290 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d16:	2100      	movs	r1, #0
 8001d18:	4808      	ldr	r0, [pc, #32]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001d1a:	f00e f951 	bl	800ffc0 <HAL_UARTEx_SetRxFifoThreshold>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001d24:	f7ff fab4 	bl	8001290 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d28:	4804      	ldr	r0, [pc, #16]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001d2a:	f00e f8d2 	bl	800fed2 <HAL_UARTEx_DisableFifoMode>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001d34:	f7ff faac 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	240006f8 	.word	0x240006f8
 8001d40:	40004400 	.word	0x40004400

08001d44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b0b8      	sub	sp, #224	@ 0xe0
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d5c:	f107 0310 	add.w	r3, r7, #16
 8001d60:	22b8      	movs	r2, #184	@ 0xb8
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f013 fcf3 	bl	8015750 <memset>
  if(uartHandle->Instance==USART2)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a59      	ldr	r2, [pc, #356]	@ (8001ed4 <HAL_UART_MspInit+0x190>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	f040 80ab 	bne.w	8001ecc <HAL_UART_MspInit+0x188>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d76:	f04f 0202 	mov.w	r2, #2
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f008 fa31 	bl	800a1f4 <HAL_RCCEx_PeriphCLKConfig>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001d98:	f7ff fa7a 	bl	8001290 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d9c:	4b4e      	ldr	r3, [pc, #312]	@ (8001ed8 <HAL_UART_MspInit+0x194>)
 8001d9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001da2:	4a4d      	ldr	r2, [pc, #308]	@ (8001ed8 <HAL_UART_MspInit+0x194>)
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001da8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001dac:	4b4a      	ldr	r3, [pc, #296]	@ (8001ed8 <HAL_UART_MspInit+0x194>)
 8001dae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	4b47      	ldr	r3, [pc, #284]	@ (8001ed8 <HAL_UART_MspInit+0x194>)
 8001dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dc0:	4a45      	ldr	r2, [pc, #276]	@ (8001ed8 <HAL_UART_MspInit+0x194>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dca:	4b43      	ldr	r3, [pc, #268]	@ (8001ed8 <HAL_UART_MspInit+0x194>)
 8001dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dd8:	230c      	movs	r3, #12
 8001dda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001df0:	2307      	movs	r3, #7
 8001df2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4837      	ldr	r0, [pc, #220]	@ (8001edc <HAL_UART_MspInit+0x198>)
 8001dfe:	f005 fc7d 	bl	80076fc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream1;
 8001e02:	4b37      	ldr	r3, [pc, #220]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e04:	4a37      	ldr	r2, [pc, #220]	@ (8001ee4 <HAL_UART_MspInit+0x1a0>)
 8001e06:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001e08:	4b35      	ldr	r3, [pc, #212]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e0a:	222c      	movs	r2, #44	@ 0x2c
 8001e0c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e10:	2240      	movs	r2, #64	@ 0x40
 8001e12:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e14:	4b32      	ldr	r3, [pc, #200]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e1a:	4b31      	ldr	r3, [pc, #196]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e20:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e22:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e28:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e34:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e36:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e42:	4827      	ldr	r0, [pc, #156]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e44:	f003 fa38 	bl	80052b8 <HAL_DMA_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001e4e:	f7ff fa1f 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a22      	ldr	r2, [pc, #136]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e56:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001e58:	4a21      	ldr	r2, [pc, #132]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream2;
 8001e5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001e60:	4a22      	ldr	r2, [pc, #136]	@ (8001eec <HAL_UART_MspInit+0x1a8>)
 8001e62:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001e64:	4b20      	ldr	r3, [pc, #128]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001e66:	222b      	movs	r2, #43	@ 0x2b
 8001e68:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001e78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e7c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e84:	4b18      	ldr	r3, [pc, #96]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001e8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001e8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e90:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e92:	4b15      	ldr	r3, [pc, #84]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e98:	4b13      	ldr	r3, [pc, #76]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e9e:	4812      	ldr	r0, [pc, #72]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001ea0:	f003 fa0a 	bl	80052b8 <HAL_DMA_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8001eaa:	f7ff f9f1 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001eb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	2026      	movs	r0, #38	@ 0x26
 8001ec2:	f002 ffe4 	bl	8004e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ec6:	2026      	movs	r0, #38	@ 0x26
 8001ec8:	f002 fffb 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ecc:	bf00      	nop
 8001ece:	37e0      	adds	r7, #224	@ 0xe0
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40004400 	.word	0x40004400
 8001ed8:	58024400 	.word	0x58024400
 8001edc:	58020000 	.word	0x58020000
 8001ee0:	2400078c 	.word	0x2400078c
 8001ee4:	40020028 	.word	0x40020028
 8001ee8:	24000804 	.word	0x24000804
 8001eec:	40020040 	.word	0x40020040

08001ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ef0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001f2c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001ef4:	f7ff fd1c 	bl	8001930 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ef8:	f7ff fc8a 	bl	8001810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001efc:	480c      	ldr	r0, [pc, #48]	@ (8001f30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001efe:	490d      	ldr	r1, [pc, #52]	@ (8001f34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f00:	4a0d      	ldr	r2, [pc, #52]	@ (8001f38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f04:	e002      	b.n	8001f0c <LoopCopyDataInit>

08001f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0a:	3304      	adds	r3, #4

08001f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f10:	d3f9      	bcc.n	8001f06 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f12:	4a0a      	ldr	r2, [pc, #40]	@ (8001f3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f14:	4c0a      	ldr	r4, [pc, #40]	@ (8001f40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f18:	e001      	b.n	8001f1e <LoopFillZerobss>

08001f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f1c:	3204      	adds	r2, #4

08001f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f20:	d3fb      	bcc.n	8001f1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f22:	f013 fc69 	bl	80157f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f26:	f7ff f8ed 	bl	8001104 <main>
  bx  lr
 8001f2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f2c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001f30:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f34:	24000160 	.word	0x24000160
  ldr r2, =_sidata
 8001f38:	0802a0c4 	.word	0x0802a0c4
  ldr r2, =_sbss
 8001f3c:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 8001f40:	24004a70 	.word	0x24004a70

08001f44 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f44:	e7fe      	b.n	8001f44 <ADC3_IRQHandler>

08001f46 <_ZN3Bsp11usbTransmitEPht>:
	return convertHALStatus(halStatus);
}

//USB-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Status Bsp::usbTransmit(uint8_t* Buf, uint16_t Len)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	4613      	mov	r3, r2
 8001f52:	80fb      	strh	r3, [r7, #6]
	uint8_t result = CDC_Transmit_HS(Buf, Len);
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	4619      	mov	r1, r3
 8001f58:	68b8      	ldr	r0, [r7, #8]
 8001f5a:	f011 fcd9 	bl	8013910 <CDC_Transmit_HS>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	75fb      	strb	r3, [r7, #23]

	if (result != USBD_OK )
 8001f62:	7dfb      	ldrb	r3, [r7, #23]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <_ZN3Bsp11usbTransmitEPht+0x26>
		return Status::ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <_ZN3Bsp11usbTransmitEPht+0x28>

	return Status::OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <_ZN3Bsp5delayEm>:
	return convertHALStatus(halStatus);
}

//Extra-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Bsp::delay(uint32_t Delay)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	6039      	str	r1, [r7, #0]
	HAL_Delay(Delay);
 8001f80:	6838      	ldr	r0, [r7, #0]
 8001f82:	f000 ff91 	bl	8002ea8 <HAL_Delay>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <_write>:

/**
 * Use printf/std::cout to send usb data
 * */
extern "C" int _write(int file, char *ptr, int len)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
	static uint8_t rc = USBD_OK;

	do
	{
		rc = CDC_Transmit_HS((uint8_t*) ptr, len);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	68b8      	ldr	r0, [r7, #8]
 8001fa4:	f011 fcb4 	bl	8013910 <CDC_Transmit_HS>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	461a      	mov	r2, r3
 8001fac:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <_write+0x40>)
 8001fae:	701a      	strb	r2, [r3, #0]
	}
	while (USBD_BUSY == rc);
 8001fb0:	4b07      	ldr	r3, [pc, #28]	@ (8001fd0 <_write+0x40>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d0f1      	beq.n	8001f9c <_write+0xc>

	if (USBD_FAIL == rc) {
 8001fb8:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <_write+0x40>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d101      	bne.n	8001fc4 <_write+0x34>
		return 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e000      	b.n	8001fc6 <_write+0x36>
	}
	return len;
 8001fc4:	687b      	ldr	r3, [r7, #4]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2400087c 	.word	0x2400087c

08001fd4 <_ZN11AnalyzerExtC1ER3Bsp>:
 *      Author: shaya
 */

#include "AnalyzerExtern.hpp"

AnalyzerExt::AnalyzerExt(Bsp& bsp): _bsp(bsp){}
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <_ZN11AnalyzerExt11sendCommandEh>:

void AnalyzerExt::sendCommand(uint8_t command)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	70fb      	strb	r3, [r7, #3]
	//_bsp.uartTransmit_DMA(&huart, &command, 1);
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <_ZN11AnalyzerExt11receiveDataEv>:

uint8_t AnalyzerExt::receiveData()
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	deff      	udf	#255	@ 0xff

08002014 <_ZN11AnalyzerExt10requestFFTEv>:
	uint8_t data;
	//_bsp.uartReceive_DMA(&huart, &data, 1);
}

uint8_t AnalyzerExt::requestFFT()
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	sendCommand(CMD_FFT);
 800201c:	2101      	movs	r1, #1
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ffe7 	bl	8001ff2 <_ZN11AnalyzerExt11sendCommandEh>
	return receiveData();
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff fff0 	bl	800200a <_ZN11AnalyzerExt11receiveDataEv>
 800202a:	4603      	mov	r3, r0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <_ZN3DacC1ER3Bsp>:
 */

#include "DacExtern.hpp"
#include "arm_math.h"

Dac::Dac(Bsp& bsp): _bsp(bsp){}
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <_ZN3Dac11sendDataSPIEm>:

Status Dac::sendDataSPI(uint32_t data)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]
//	if(_bsp.spiTransmit_IT(_hspi, (uint8_t*)&data, 1) != Status::OK){
//        return Status::ERROR;
//    }

    return Status::OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <_ZN3Dac13voltageToCodeEfff>:

	return data;
}

uint16_t Dac::voltageToCode(float voltage_decimal, float min_voltage, float max_voltage)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	@ 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	ed87 0a02 	vstr	s0, [r7, #8]
 8002078:	edc7 0a01 	vstr	s1, [r7, #4]
 800207c:	ed87 1a00 	vstr	s2, [r7]
    if (voltage_decimal > max_voltage) {
 8002080:	ed97 7a02 	vldr	s14, [r7, #8]
 8002084:	edd7 7a00 	vldr	s15, [r7]
 8002088:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800208c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002090:	dd02      	ble.n	8002098 <_ZN3Dac13voltageToCodeEfff+0x2c>
        voltage_decimal = max_voltage;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	e00a      	b.n	80020ae <_ZN3Dac13voltageToCodeEfff+0x42>
    } else if (voltage_decimal < min_voltage) {
 8002098:	ed97 7a02 	vldr	s14, [r7, #8]
 800209c:	edd7 7a01 	vldr	s15, [r7, #4]
 80020a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a8:	d501      	bpl.n	80020ae <_ZN3Dac13voltageToCodeEfff+0x42>
        voltage_decimal = min_voltage;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	60bb      	str	r3, [r7, #8]
    }

    int32_t range_span = max_voltage - min_voltage;
 80020ae:	ed97 7a00 	vldr	s14, [r7]
 80020b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80020b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020be:	ee17 3a90 	vmov	r3, s15
 80020c2:	61fb      	str	r3, [r7, #28]
    float normalized_voltage = (float)(voltage_decimal - min_voltage) / range_span;
 80020c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80020c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80020cc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020de:	edc7 7a06 	vstr	s15, [r7, #24]
    uint16_t code = (uint16_t)(normalized_voltage * 65535);
 80020e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80020e6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002108 <_ZN3Dac13voltageToCodeEfff+0x9c>
 80020ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020f2:	ee17 3a90 	vmov	r3, s15
 80020f6:	82fb      	strh	r3, [r7, #22]

    return code;
 80020f8:	8afb      	ldrh	r3, [r7, #22]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3724      	adds	r7, #36	@ 0x24
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	477fff00 	.word	0x477fff00

0800210c <_ZN3Dac11noOperationEv>:

    return Status::OK;
}

Status Dac::noOperation()
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
	uint32_t txData;

    txData = NO_OPERATION_DAC;
 8002114:	f04f 33ff 	mov.w	r3, #4294967295
 8002118:	60fb      	str	r3, [r7, #12]
    if(sendDataSPI(txData) != Status::OK){
 800211a:	68f9      	ldr	r1, [r7, #12]
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff ff98 	bl	8002052 <_ZN3Dac11sendDataSPIEm>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	bf14      	ite	ne
 8002128:	2301      	movne	r3, #1
 800212a:	2300      	moveq	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <_ZN3Dac11noOperationEv+0x2a>
        return Status::ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <_ZN3Dac11noOperationEv+0x2c>
    }

    return Status::OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <_ZN12FuncAnalyzerC1ER3Bsp>:
 *      Author: shaya
 */

#include <FuncAnalyzer.hpp>

FuncAnalyzer::FuncAnalyzer(Bsp& bsp) : _bsp(bsp) {}
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <_ZN12FuncAnalyzer14startAnalysingEv>:

void FuncAnalyzer::startAnalysing()
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
	//_bsp.adcStart_DMA(&hadc, reinterpret_cast<uint32_t*>(adc_buffer.data()), ADC_BUF_SIZE);
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <_ZN12FuncAnalyzer13stopAnalyzingEv>:

void FuncAnalyzer::stopAnalyzing()
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
	//_bsp.adcStopDMA(hadc);
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <_ZN12FuncAnalyzer10computeFFTEPf>:
    arm_max_q15(reinterpret_cast<int16_t*>(adc_buffer.data()), ADC_BUF_SIZE, NULL, &risingEdge);
    arm_min_q15(reinterpret_cast<int16_t*>(adc_buffer.data()), ADC_BUF_SIZE, NULL, &fallingEdge);
    return ((float)risingEdge / (risingEdge + fallingEdge)) * 100.0f;
}

void FuncAnalyzer::computeFFT(float32_t* fftOutput) {
 8002186:	b580      	push	{r7, lr}
 8002188:	b08a      	sub	sp, #40	@ 0x28
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
    arm_rfft_fast_instance_f32 fftInstance;
    arm_rfft_fast_init_f32(&fftInstance, ADC_BUF_SIZE);
 8002190:	f107 030c 	add.w	r3, r7, #12
 8002194:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002198:	4618      	mov	r0, r3
 800219a:	f012 f855 	bl	8014248 <arm_rfft_fast_init_f32>
    arm_rfft_fast_f32(&fftInstance, reinterpret_cast<float32_t*>(adc_buffer.data()), fftOutput, 0);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3304      	adds	r3, #4
 80021a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      [[__nodiscard__, __gnu__::__const__, __gnu__::__always_inline__]]
      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return static_cast<pointer>(_M_elems); }
 80021a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021a6:	f107 000c 	add.w	r0, r7, #12
 80021aa:	2300      	movs	r3, #0
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	f012 f8fd 	bl	80143ac <arm_rfft_fast_f32>
}
 80021b2:	bf00      	nop
 80021b4:	3728      	adds	r7, #40	@ 0x28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	ed87 0a01 	vstr	s0, [r7, #4]
 80021c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80021c8:	eef0 7ae7 	vabs.f32	s15, s15
 80021cc:	eeb0 0a67 	vmov.f32	s0, s15
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <_ZN13FuncGeneratorC1ER3Bsp>:
 *      Author: shaya
 */

#include <FuncGenerator.hpp>

FuncGenerator::FuncGenerator(Bsp& bsp) : _bsp(bsp)
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	6039      	str	r1, [r7, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f8c3 2488 	str.w	r2, [r3, #1160]	@ 0x488
{
	generateWaveforms();
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f80c 	bl	8002218 <_ZN13FuncGenerator17generateWaveformsEv>
	activeWaveform = sineWave.data();
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3384      	adds	r3, #132	@ 0x84
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f8c3 2488 	str.w	r2, [r3, #1160]	@ 0x488
}
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <_ZN13FuncGenerator17generateWaveformsEv>:

void FuncGenerator::generateWaveforms()
{
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < SAMPLE_COUNT; i++) {
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	e08a      	b.n	800233c <_ZN13FuncGenerator17generateWaveformsEv+0x124>
        float angle = 2.0f * PI * i / SAMPLE_COUNT;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	ee07 3a90 	vmov	s15, r3
 800222c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002230:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002350 <_ZN13FuncGenerator17generateWaveformsEv+0x138>
 8002234:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002238:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002354 <_ZN13FuncGenerator17generateWaveformsEv+0x13c>
 800223c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002240:	edc7 7a02 	vstr	s15, [r7, #8]

        // Generate Sine Wave
        sineWave[i] = static_cast<uint16_t>(MAX_AMPLITUDE * (0.5f + 0.5f * arm_sin_f32(angle)));
 8002244:	ed97 0a02 	vldr	s0, [r7, #8]
 8002248:	f012 fd16 	bl	8014c78 <arm_sin_f32>
 800224c:	eef0 7a40 	vmov.f32	s15, s0
 8002250:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002254:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002258:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800225c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002260:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8002358 <_ZN13FuncGenerator17generateWaveformsEv+0x140>
 8002264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800226c:	ee17 3a90 	vmov	r3, s15
 8002270:	b29c      	uxth	r4, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3384      	adds	r3, #132	@ 0x84
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4611      	mov	r1, r2
 800227a:	4618      	mov	r0, r3
 800227c:	f000 f93c 	bl	80024f8 <_ZNSt5arrayItLj128EEixEj>
 8002280:	4603      	mov	r3, r0
 8002282:	4622      	mov	r2, r4
 8002284:	801a      	strh	r2, [r3, #0]

        // Generate Square Wave
        squareWave[i] = (i < SAMPLE_COUNT / 2) ? MAX_AMPLITUDE : 0;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b3f      	cmp	r3, #63	@ 0x3f
 800228a:	dc02      	bgt.n	8002292 <_ZN13FuncGenerator17generateWaveformsEv+0x7a>
 800228c:	f640 74ff 	movw	r4, #4095	@ 0xfff
 8002290:	e000      	b.n	8002294 <_ZN13FuncGenerator17generateWaveformsEv+0x7c>
 8002292:	2400      	movs	r4, #0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f92a 	bl	80024f8 <_ZNSt5arrayItLj128EEixEj>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4622      	mov	r2, r4
 80022a8:	801a      	strh	r2, [r3, #0]

        // Generate Triangle Wave
        triangleWave[i] = static_cast<uint16_t>(MAX_AMPLITUDE * fabs((2.0f * i / SAMPLE_COUNT) - 1.0f));
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	ee07 3a90 	vmov	s15, r3
 80022b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80022b8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002354 <_ZN13FuncGenerator17generateWaveformsEv+0x13c>
 80022bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80022c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022c8:	eeb0 0a67 	vmov.f32	s0, s15
 80022cc:	f7ff ff75 	bl	80021ba <_ZSt4fabsf>
 80022d0:	eef0 7a40 	vmov.f32	s15, s0
 80022d4:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002358 <_ZN13FuncGenerator17generateWaveformsEv+0x140>
 80022d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022e0:	ee17 3a90 	vmov	r3, s15
 80022e4:	b29c      	uxth	r4, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 f901 	bl	80024f8 <_ZNSt5arrayItLj128EEixEj>
 80022f6:	4603      	mov	r3, r0
 80022f8:	4622      	mov	r2, r4
 80022fa:	801a      	strh	r2, [r3, #0]

        // Generate Sawtooth Wave
        sawtoothWave[i] = static_cast<uint16_t>(MAX_AMPLITUDE * (i / static_cast<float>(SAMPLE_COUNT)));
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	ee07 3a90 	vmov	s15, r3
 8002302:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002306:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8002354 <_ZN13FuncGenerator17generateWaveformsEv+0x13c>
 800230a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800230e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002358 <_ZN13FuncGenerator17generateWaveformsEv+0x140>
 8002312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800231a:	ee17 3a90 	vmov	r3, s15
 800231e:	b29c      	uxth	r4, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f8e4 	bl	80024f8 <_ZNSt5arrayItLj128EEixEj>
 8002330:	4603      	mov	r3, r0
 8002332:	4622      	mov	r2, r4
 8002334:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < SAMPLE_COUNT; i++) {
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	3301      	adds	r3, #1
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002340:	f77f af71 	ble.w	8002226 <_ZN13FuncGenerator17generateWaveformsEv+0xe>
    }
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bd90      	pop	{r4, r7, pc}
 800234e:	bf00      	nop
 8002350:	40c90fdb 	.word	0x40c90fdb
 8002354:	43000000 	.word	0x43000000
 8002358:	457ff000 	.word	0x457ff000

0800235c <_ZN13FuncGenerator12setFrequencyEm>:

void FuncGenerator::setFrequency(uint32_t frequency)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
    //uint32_t timerPeriod = HAL_RCC_GetPCLK1Freq() / (frequency * SAMPLE_COUNT);
    //__HAL_TIM_SET_AUTORELOAD(&_htim, timerPeriod);
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <_ZN13FuncGenerator12setAmplitudeEf>:

void FuncGenerator::setAmplitude(float amplitude)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b086      	sub	sp, #24
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	ed87 0a00 	vstr	s0, [r7]
    updateWaveform(sineWave.data(), amplitude);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3384      	adds	r3, #132	@ 0x84
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	ed97 0a00 	vldr	s0, [r7]
 800238a:	4619      	mov	r1, r3
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f825 	bl	80023dc <_ZN13FuncGenerator14updateWaveformEPtf>
    updateWaveform(squareWave.data(), amplitude);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	ed97 0a00 	vldr	s0, [r7]
 80023a0:	4619      	mov	r1, r3
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f81a 	bl	80023dc <_ZN13FuncGenerator14updateWaveformEPtf>
    updateWaveform(triangleWave.data(), amplitude);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	ed97 0a00 	vldr	s0, [r7]
 80023b6:	4619      	mov	r1, r3
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f80f 	bl	80023dc <_ZN13FuncGenerator14updateWaveformEPtf>
    updateWaveform(sawtoothWave.data(), amplitude);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	ed97 0a00 	vldr	s0, [r7]
 80023cc:	4619      	mov	r1, r3
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f804 	bl	80023dc <_ZN13FuncGenerator14updateWaveformEPtf>
}
 80023d4:	bf00      	nop
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_ZN13FuncGenerator14updateWaveformEPtf>:

void FuncGenerator::updateWaveform(uint16_t* waveform, float amplitude)
{
 80023dc:	b480      	push	{r7}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	ed87 0a01 	vstr	s0, [r7, #4]
    for (int i = 0; i < SAMPLE_COUNT; i++) {
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	e021      	b.n	8002434 <_ZN13FuncGenerator14updateWaveformEPtf+0x58>
        waveform[i] = static_cast<uint16_t>(MAX_AMPLITUDE * amplitude * waveform[i] / MAX_AMPLITUDE);
 80023f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80023f4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002448 <_ZN13FuncGenerator14updateWaveformEPtf+0x6c>
 80023f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	4413      	add	r3, r2
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	ee07 3a90 	vmov	s15, r3
 800240a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800240e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002412:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8002448 <_ZN13FuncGenerator14updateWaveformEPtf+0x6c>
 8002416:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	4413      	add	r3, r2
 8002422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002426:	ee17 2a90 	vmov	r2, s15
 800242a:	b292      	uxth	r2, r2
 800242c:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < SAMPLE_COUNT; i++) {
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	3301      	adds	r3, #1
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2b7f      	cmp	r3, #127	@ 0x7f
 8002438:	ddda      	ble.n	80023f0 <_ZN13FuncGenerator14updateWaveformEPtf+0x14>
    }
}
 800243a:	bf00      	nop
 800243c:	bf00      	nop
 800243e:	371c      	adds	r7, #28
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	457ff000 	.word	0x457ff000

0800244c <_ZN13FuncGenerator14selectWaveformEh>:

void FuncGenerator::selectWaveform(uint8_t type)
{
 800244c:	b480      	push	{r7}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	70fb      	strb	r3, [r7, #3]
    currentWaveform = type;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
    switch (type) {
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	2b03      	cmp	r3, #3
 8002464:	d82d      	bhi.n	80024c2 <_ZN13FuncGenerator14selectWaveformEh+0x76>
 8002466:	a201      	add	r2, pc, #4	@ (adr r2, 800246c <_ZN13FuncGenerator14selectWaveformEh+0x20>)
 8002468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246c:	0800247d 	.word	0x0800247d
 8002470:	0800248d 	.word	0x0800248d
 8002474:	0800249f 	.word	0x0800249f
 8002478:	080024b1 	.word	0x080024b1
        case SINE:
            activeWaveform = sineWave.data();
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3384      	adds	r3, #132	@ 0x84
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8c3 2488 	str.w	r2, [r3, #1160]	@ 0x488
            break;
 800248a:	e01a      	b.n	80024c2 <_ZN13FuncGenerator14selectWaveformEh+0x76>
        case SQUARE:
            activeWaveform = squareWave.data();
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f8c3 2488 	str.w	r2, [r3, #1160]	@ 0x488
            break;
 800249c:	e011      	b.n	80024c2 <_ZN13FuncGenerator14selectWaveformEh+0x76>
        case TRIANGLE:
            activeWaveform = triangleWave.data();
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f8c3 2488 	str.w	r2, [r3, #1160]	@ 0x488
            break;
 80024ae:	e008      	b.n	80024c2 <_ZN13FuncGenerator14selectWaveformEh+0x76>
        case SAWTOOTH:
            activeWaveform = sawtoothWave.data();
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f8c3 2488 	str.w	r2, [r3, #1160]	@ 0x488
            break;
 80024c0:	bf00      	nop
    }
}
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop

080024d0 <_ZN13FuncGenerator19startWaveformOutputEv>:

void FuncGenerator::startWaveformOutput()
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
    //_bsp.dacStart_DMA(&_hdac, DAC_CHANNEL_1, reinterpret_cast<uint32_t*>(activeWaveform), SAMPLE_COUNT, DAC_ALIGN_12B_R);
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <_ZN13FuncGenerator18stopWaveformOutputEv>:

void FuncGenerator::stopWaveformOutput()
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
    //_bsp.adcStopDMA(hadc;)
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <_ZNSt5arrayItLj128EEixEj>:
      operator[](size_type __n) noexcept
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
	return _M_elems[__n];
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	4413      	add	r3, r2
      }
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <_ZN3LcdC1ER3Bsph>:
 */

#include "Lcd.hpp"


Lcd::Lcd(Bsp& bsp, uint8_t address) : _bsp(bsp), _address(address) {}
 8002516:	b480      	push	{r7}
 8002518:	b085      	sub	sp, #20
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	4613      	mov	r3, r2
 8002522:	71fb      	strb	r3, [r7, #7]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	79fa      	ldrb	r2, [r7, #7]
 800252e:	711a      	strb	r2, [r3, #4]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <_ZN3Lcd11sendCommandEh>:

void Lcd::sendCommand(uint8_t cmd) {
 800253e:	b480      	push	{r7}
 8002540:	b085      	sub	sp, #20
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
 8002546:	460b      	mov	r3, r1
 8002548:	70fb      	strb	r3, [r7, #3]
    uint8_t upperNibble = cmd & 0xF0;
 800254a:	78fb      	ldrb	r3, [r7, #3]
 800254c:	f023 030f 	bic.w	r3, r3, #15
 8002550:	73fb      	strb	r3, [r7, #15]
    uint8_t lowerNibble = (cmd << 4) & 0xF0;
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	73bb      	strb	r3, [r7, #14]

    uint8_t dataT[4] = {
        upperNibble | LCD_ENABLE_BIT | LCD_RS_COMMAND,
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	f043 0304 	orr.w	r3, r3, #4
 800255e:	b2db      	uxtb	r3, r3
        upperNibble | LCD_RS_COMMAND,
        lowerNibble | LCD_ENABLE_BIT | LCD_RS_COMMAND,
        lowerNibble | LCD_RS_COMMAND
    };
 8002560:	723b      	strb	r3, [r7, #8]
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	727b      	strb	r3, [r7, #9]
        lowerNibble | LCD_ENABLE_BIT | LCD_RS_COMMAND,
 8002566:	7bbb      	ldrb	r3, [r7, #14]
 8002568:	f043 0304 	orr.w	r3, r3, #4
 800256c:	b2db      	uxtb	r3, r3
    };
 800256e:	72bb      	strb	r3, [r7, #10]
 8002570:	7bbb      	ldrb	r3, [r7, #14]
 8002572:	72fb      	strb	r3, [r7, #11]

    //_bsp.i2cTransmit_Master_IT(hi2c, _address, dataT, 4);
}
 8002574:	bf00      	nop
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <_ZN3Lcd8sendDataEh>:

void Lcd::sendData(uint8_t data) {
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	70fb      	strb	r3, [r7, #3]
    uint8_t upperNibble = data & 0xF0;
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	f023 030f 	bic.w	r3, r3, #15
 8002592:	73fb      	strb	r3, [r7, #15]
    uint8_t lowerNibble = (data << 4) & 0xF0;
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	73bb      	strb	r3, [r7, #14]

    uint8_t dataT[4] = {
        upperNibble | LCD_ENABLE_BIT | LCD_RS_DATA,
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	f043 0305 	orr.w	r3, r3, #5
 80025a0:	b2db      	uxtb	r3, r3
        upperNibble | LCD_RS_DATA,
        lowerNibble | LCD_ENABLE_BIT | LCD_RS_DATA,
        lowerNibble | LCD_RS_DATA
    };
 80025a2:	723b      	strb	r3, [r7, #8]
        upperNibble | LCD_RS_DATA,
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	b2db      	uxtb	r3, r3
    };
 80025ac:	727b      	strb	r3, [r7, #9]
        lowerNibble | LCD_ENABLE_BIT | LCD_RS_DATA,
 80025ae:	7bbb      	ldrb	r3, [r7, #14]
 80025b0:	f043 0305 	orr.w	r3, r3, #5
 80025b4:	b2db      	uxtb	r3, r3
    };
 80025b6:	72bb      	strb	r3, [r7, #10]
        lowerNibble | LCD_RS_DATA
 80025b8:	7bbb      	ldrb	r3, [r7, #14]
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	b2db      	uxtb	r3, r3
    };
 80025c0:	72fb      	strb	r3, [r7, #11]

    //_bsp.i2cTransmit_Master_IT(hi2c, _address, dataT, 4);
}
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <_ZN3Lcd4initEv>:

void Lcd::init() {
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
    _bsp.delay(50);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2132      	movs	r1, #50	@ 0x32
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fcca 	bl	8001f76 <_ZN3Bsp5delayEm>
    sendCommand(0x30);
 80025e2:	2130      	movs	r1, #48	@ 0x30
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff ffaa 	bl	800253e <_ZN3Lcd11sendCommandEh>
    _bsp.delay(5);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2105      	movs	r1, #5
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fcc0 	bl	8001f76 <_ZN3Bsp5delayEm>
    sendCommand(0x30);
 80025f6:	2130      	movs	r1, #48	@ 0x30
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff ffa0 	bl	800253e <_ZN3Lcd11sendCommandEh>
    _bsp.delay(1);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2101      	movs	r1, #1
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fcb6 	bl	8001f76 <_ZN3Bsp5delayEm>
    sendCommand(0x30);
 800260a:	2130      	movs	r1, #48	@ 0x30
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff ff96 	bl	800253e <_ZN3Lcd11sendCommandEh>
    _bsp.delay(10);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	210a      	movs	r1, #10
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fcac 	bl	8001f76 <_ZN3Bsp5delayEm>
    sendCommand(0x20);
 800261e:	2120      	movs	r1, #32
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ff8c 	bl	800253e <_ZN3Lcd11sendCommandEh>
    _bsp.delay(10);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	210a      	movs	r1, #10
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fca2 	bl	8001f76 <_ZN3Bsp5delayEm>

    sendCommand(LCD_CMD_FUNCTION_SET);
 8002632:	2128      	movs	r1, #40	@ 0x28
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff ff82 	bl	800253e <_ZN3Lcd11sendCommandEh>
    sendCommand(LCD_CMD_DISPLAY_OFF);
 800263a:	2108      	movs	r1, #8
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ff7e 	bl	800253e <_ZN3Lcd11sendCommandEh>
    sendCommand(LCD_CMD_CLEAR_DISPLAY);
 8002642:	2101      	movs	r1, #1
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ff7a 	bl	800253e <_ZN3Lcd11sendCommandEh>
    _bsp.delay(2);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2102      	movs	r1, #2
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fc90 	bl	8001f76 <_ZN3Bsp5delayEm>
    sendCommand(LCD_CMD_ENTRY_MODE_SET);
 8002656:	2106      	movs	r1, #6
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff ff70 	bl	800253e <_ZN3Lcd11sendCommandEh>
    sendCommand(LCD_CMD_DISPLAY_ON);
 800265e:	210c      	movs	r1, #12
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ff6c 	bl	800253e <_ZN3Lcd11sendCommandEh>
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <_ZN3Lcd10sendStringEPKc>:
        default: return;
    }
    sendCommand(address);
}

void Lcd::sendString(const char* str) {
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	6039      	str	r1, [r7, #0]
    while (*str) sendData(*str++);
 8002678:	e007      	b.n	800268a <_ZN3Lcd10sendStringEPKc+0x1c>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	603a      	str	r2, [r7, #0]
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	4619      	mov	r1, r3
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ff7b 	bl	8002580 <_ZN3Lcd8sendDataEh>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f3      	bne.n	800267a <_ZN3Lcd10sendStringEPKc+0xc>
}
 8002692:	bf00      	nop
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <MainCpp>:
Dac exDac(bsp);
#endif


__attribute__((noreturn)) void MainCpp()
{
 800269c:	b590      	push	{r4, r7, lr}
 800269e:	b08d      	sub	sp, #52	@ 0x34
 80026a0:	af00      	add	r7, sp, #0
	ReceivedData data;
 80026a2:	2300      	movs	r3, #0
 80026a4:	753b      	strb	r3, [r7, #20]
 80026a6:	2301      	movs	r3, #1
 80026a8:	757b      	strb	r3, [r7, #21]
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	f8c7 3016 	str.w	r3, [r7, #22]
 80026b2:	f04f 0300 	mov.w	r3, #0
 80026b6:	f8c7 301a 	str.w	r3, [r7, #26]
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	f8c7 301e 	str.w	r3, [r7, #30]
 80026c2:	2300      	movs	r3, #0
 80026c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80026c8:	2300      	movs	r3, #0
 80026ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	bool dataReceived{false};
 80026ce:	2300      	movs	r3, #0
 80026d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	float32_t fftOutput;
	const uint32_t DELAY = 1000;
 80026d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026d8:	62bb      	str	r3, [r7, #40]	@ 0x28


	bool interface{false};
 80026da:	2300      	movs	r3, #0
 80026dc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	do
	{
		Status status = connection.interfaceHandshake(Major_Version, Minor_Version);
 80026e0:	2200      	movs	r2, #0
 80026e2:	2101      	movs	r1, #1
 80026e4:	4857      	ldr	r0, [pc, #348]	@ (8002844 <MainCpp+0x1a8>)
 80026e6:	f000 f91b 	bl	8002920 <_ZN9SerialCtn18interfaceHandshakeEhh>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (status == Status::OK) {
 80026f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d102      	bne.n	80026fe <MainCpp+0x62>
			interface = true;
 80026f8:	2301      	movs	r3, #1
 80026fa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		}
		bsp.delay(DELAY);
 80026fe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002702:	4851      	ldr	r0, [pc, #324]	@ (8002848 <MainCpp+0x1ac>)
 8002704:	f7ff fc37 	bl	8001f76 <_ZN3Bsp5delayEm>

	} while (!interface);
 8002708:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800270c:	f083 0301 	eor.w	r3, r3, #1
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1e4      	bne.n	80026e0 <MainCpp+0x44>


	lcd.init();
 8002716:	484d      	ldr	r0, [pc, #308]	@ (800284c <MainCpp+0x1b0>)
 8002718:	f7ff ff59 	bl	80025ce <_ZN3Lcd4initEv>
	lcd.sendString("LCD Online");
 800271c:	494c      	ldr	r1, [pc, #304]	@ (8002850 <MainCpp+0x1b4>)
 800271e:	484b      	ldr	r0, [pc, #300]	@ (800284c <MainCpp+0x1b0>)
 8002720:	f7ff ffa5 	bl	800266e <_ZN3Lcd10sendStringEPKc>

	//bsp.watchdogStart(hiwdg);

	while(true)
	{
		if(usbReceivedFlag)
 8002724:	4b4b      	ldr	r3, [pc, #300]	@ (8002854 <MainCpp+0x1b8>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d051      	beq.n	80027d2 <MainCpp+0x136>
		{
			data = connection.processReceivedData();
 800272e:	463b      	mov	r3, r7
 8002730:	4944      	ldr	r1, [pc, #272]	@ (8002844 <MainCpp+0x1a8>)
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f96a 	bl	8002a0c <_ZN9SerialCtn19processReceivedDataEv>
 8002738:	f107 0414 	add.w	r4, r7, #20
 800273c:	463b      	mov	r3, r7
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	6859      	ldr	r1, [r3, #4]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			usbReceivedFlag = false;
 8002748:	4b42      	ldr	r3, [pc, #264]	@ (8002854 <MainCpp+0x1b8>)
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
			dataReceived = true;
 800274e:	2301      	movs	r3, #1
 8002750:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

			if(data.mode == FUNCTION_GENERATOR_MODE)
 8002754:	7d3b      	ldrb	r3, [r7, #20]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d11d      	bne.n	8002796 <MainCpp+0xfa>
			{
				generate.selectWaveform(data.generate.signalType);
 800275a:	7d7b      	ldrb	r3, [r7, #21]
 800275c:	4619      	mov	r1, r3
 800275e:	483e      	ldr	r0, [pc, #248]	@ (8002858 <MainCpp+0x1bc>)
 8002760:	f7ff fe74 	bl	800244c <_ZN13FuncGenerator14selectWaveformEh>
				generate.setAmplitude(data.generate.amplitude);
 8002764:	f8d7 301a 	ldr.w	r3, [r7, #26]
 8002768:	ee00 3a10 	vmov	s0, r3
 800276c:	483a      	ldr	r0, [pc, #232]	@ (8002858 <MainCpp+0x1bc>)
 800276e:	f7ff fe00 	bl	8002372 <_ZN13FuncGenerator12setAmplitudeEf>
				generate.setFrequency(data.generate.amplitude);
 8002772:	f8d7 301a 	ldr.w	r3, [r7, #26]
 8002776:	ee07 3a90 	vmov	s15, r3
 800277a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800277e:	ee17 1a90 	vmov	r1, s15
 8002782:	4835      	ldr	r0, [pc, #212]	@ (8002858 <MainCpp+0x1bc>)
 8002784:	f7ff fdea 	bl	800235c <_ZN13FuncGenerator12setFrequencyEm>
				generate.generateWaveforms();
 8002788:	4833      	ldr	r0, [pc, #204]	@ (8002858 <MainCpp+0x1bc>)
 800278a:	f7ff fd45 	bl	8002218 <_ZN13FuncGenerator17generateWaveformsEv>
				generate.startWaveformOutput();
 800278e:	4832      	ldr	r0, [pc, #200]	@ (8002858 <MainCpp+0x1bc>)
 8002790:	f7ff fe9e 	bl	80024d0 <_ZN13FuncGenerator19startWaveformOutputEv>
 8002794:	e7c6      	b.n	8002724 <MainCpp+0x88>
			}
			else if(data.mode == OSCILLOSCOPE_MODE)
 8002796:	7d3b      	ldrb	r3, [r7, #20]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d109      	bne.n	80027b0 <MainCpp+0x114>
			{
				generate.stopWaveformOutput();
 800279c:	482e      	ldr	r0, [pc, #184]	@ (8002858 <MainCpp+0x1bc>)
 800279e:	f7ff fea1 	bl	80024e4 <_ZN13FuncGenerator18stopWaveformOutputEv>

				#ifdef USE_EXTERN_DAC
				exDac.noOperation();
 80027a2:	482e      	ldr	r0, [pc, #184]	@ (800285c <MainCpp+0x1c0>)
 80027a4:	f7ff fcb2 	bl	800210c <_ZN3Dac11noOperationEv>
				#endif

				analyze.startAnalysing();
 80027a8:	482d      	ldr	r0, [pc, #180]	@ (8002860 <MainCpp+0x1c4>)
 80027aa:	f7ff fcd8 	bl	800215e <_ZN12FuncAnalyzer14startAnalysingEv>
 80027ae:	e7b9      	b.n	8002724 <MainCpp+0x88>
			}
			else if(data.mode == UPDATE_MODE)
 80027b0:	7d3b      	ldrb	r3, [r7, #20]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d106      	bne.n	80027c4 <MainCpp+0x128>
			{
				printf("DEV_ERROR: UPDATE Mode not implemented!\n");
 80027b6:	482b      	ldr	r0, [pc, #172]	@ (8002864 <MainCpp+0x1c8>)
 80027b8:	f012 fe9a 	bl	80154f0 <puts>
				dataReceived = false;
 80027bc:	2300      	movs	r3, #0
 80027be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80027c2:	e7af      	b.n	8002724 <MainCpp+0x88>
			}
			else
			{
				printf("DEV_ERROR: Incorrect mode selected!\n");
 80027c4:	4828      	ldr	r0, [pc, #160]	@ (8002868 <MainCpp+0x1cc>)
 80027c6:	f012 fe93 	bl	80154f0 <puts>
				dataReceived = false;
 80027ca:	2300      	movs	r3, #0
 80027cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80027d0:	e7a8      	b.n	8002724 <MainCpp+0x88>
			}
		}
		else if(dataReceived)
 80027d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0a4      	beq.n	8002724 <MainCpp+0x88>
		{
			if(data.mode == FUNCTION_GENERATOR_MODE)
 80027da:	7d3b      	ldrb	r3, [r7, #20]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10c      	bne.n	80027fa <MainCpp+0x15e>
			{
				generate.startWaveformOutput();
 80027e0:	481d      	ldr	r0, [pc, #116]	@ (8002858 <MainCpp+0x1bc>)
 80027e2:	f7ff fe75 	bl	80024d0 <_ZN13FuncGenerator19startWaveformOutputEv>

				#ifdef USE_EXTERN_DAC
				exDac.voltageToCode(3.3, -6, 6);
 80027e6:	eeb1 1a08 	vmov.f32	s2, #24	@ 0x40c00000  6.0
 80027ea:	eef9 0a08 	vmov.f32	s1, #152	@ 0xc0c00000 -6.0
 80027ee:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800286c <MainCpp+0x1d0>
 80027f2:	481a      	ldr	r0, [pc, #104]	@ (800285c <MainCpp+0x1c0>)
 80027f4:	f7ff fc3a 	bl	800206c <_ZN3Dac13voltageToCodeEfff>
 80027f8:	e794      	b.n	8002724 <MainCpp+0x88>
				#endif
			}
			else if(data.mode == OSCILLOSCOPE_MODE)
 80027fa:	7d3b      	ldrb	r3, [r7, #20]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d115      	bne.n	800282c <MainCpp+0x190>
			{
				if(data.analyze.stop)
 8002800:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <MainCpp+0x174>
				{
					analyze.stopAnalyzing();
 8002808:	4815      	ldr	r0, [pc, #84]	@ (8002860 <MainCpp+0x1c4>)
 800280a:	f7ff fcb2 	bl	8002172 <_ZN12FuncAnalyzer13stopAnalyzingEv>
 800280e:	e789      	b.n	8002724 <MainCpp+0x88>
				}
				else if(data.analyze.fft)
 8002810:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002814:	2b00      	cmp	r3, #0
 8002816:	d085      	beq.n	8002724 <MainCpp+0x88>
				{
					analyze.computeFFT(&fftOutput);
 8002818:	f107 0310 	add.w	r3, r7, #16
 800281c:	4619      	mov	r1, r3
 800281e:	4810      	ldr	r0, [pc, #64]	@ (8002860 <MainCpp+0x1c4>)
 8002820:	f7ff fcb1 	bl	8002186 <_ZN12FuncAnalyzer10computeFFTEPf>

					#ifdef USE_EXTERN_ADC
					exAnalyze.requestFFT();
 8002824:	4812      	ldr	r0, [pc, #72]	@ (8002870 <MainCpp+0x1d4>)
 8002826:	f7ff fbf5 	bl	8002014 <_ZN11AnalyzerExt10requestFFTEv>
 800282a:	e77b      	b.n	8002724 <MainCpp+0x88>
					#endif
				}
			}
			else if(data.mode == UPDATE_MODE)
 800282c:	7d3b      	ldrb	r3, [r7, #20]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d103      	bne.n	800283a <MainCpp+0x19e>
			{
				printf("DEV_ERROR: UPDATE Mode not implemented!\n");
 8002832:	480c      	ldr	r0, [pc, #48]	@ (8002864 <MainCpp+0x1c8>)
 8002834:	f012 fe5c 	bl	80154f0 <puts>
 8002838:	e774      	b.n	8002724 <MainCpp+0x88>
			}
			else
			{
				printf("DEV_ERROR: Incorrect mode selected!\n");
 800283a:	480b      	ldr	r0, [pc, #44]	@ (8002868 <MainCpp+0x1cc>)
 800283c:	f012 fe58 	bl	80154f0 <puts>
		if(usbReceivedFlag)
 8002840:	e770      	b.n	8002724 <MainCpp+0x88>
 8002842:	bf00      	nop
 8002844:	24002d1c 	.word	0x24002d1c
 8002848:	24000880 	.word	0x24000880
 800284c:	24002d14 	.word	0x24002d14
 8002850:	08016320 	.word	0x08016320
 8002854:	2400301c 	.word	0x2400301c
 8002858:	24002888 	.word	0x24002888
 800285c:	24002d24 	.word	0x24002d24
 8002860:	24000884 	.word	0x24000884
 8002864:	0801632c 	.word	0x0801632c
 8002868:	08016354 	.word	0x08016354
 800286c:	40533333 	.word	0x40533333
 8002870:	24002d20 	.word	0x24002d20

08002874 <_Z41__static_initialization_and_destruction_0v>:
			}
		}

		//bsp.watchdogRefresh(hiwdg);
	}
}
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
FuncAnalyzer analyze(bsp);
 8002878:	490d      	ldr	r1, [pc, #52]	@ (80028b0 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800287a:	480e      	ldr	r0, [pc, #56]	@ (80028b4 <_Z41__static_initialization_and_destruction_0v+0x40>)
 800287c:	f7ff fc60 	bl	8002140 <_ZN12FuncAnalyzerC1ER3Bsp>
FuncGenerator generate(bsp);
 8002880:	490b      	ldr	r1, [pc, #44]	@ (80028b0 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8002882:	480d      	ldr	r0, [pc, #52]	@ (80028b8 <_Z41__static_initialization_and_destruction_0v+0x44>)
 8002884:	f7ff fca9 	bl	80021da <_ZN13FuncGeneratorC1ER3Bsp>
Lcd lcd(bsp, SLAVE_ADDRESS);
 8002888:	224e      	movs	r2, #78	@ 0x4e
 800288a:	4909      	ldr	r1, [pc, #36]	@ (80028b0 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800288c:	480b      	ldr	r0, [pc, #44]	@ (80028bc <_Z41__static_initialization_and_destruction_0v+0x48>)
 800288e:	f7ff fe42 	bl	8002516 <_ZN3LcdC1ER3Bsph>
SerialCtn connection(bsp);
 8002892:	4907      	ldr	r1, [pc, #28]	@ (80028b0 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8002894:	480a      	ldr	r0, [pc, #40]	@ (80028c0 <_Z41__static_initialization_and_destruction_0v+0x4c>)
 8002896:	f000 f826 	bl	80028e6 <_ZN9SerialCtnC1ER3Bsp>
AnalyzerExt exAnalyze(bsp);
 800289a:	4905      	ldr	r1, [pc, #20]	@ (80028b0 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800289c:	4809      	ldr	r0, [pc, #36]	@ (80028c4 <_Z41__static_initialization_and_destruction_0v+0x50>)
 800289e:	f7ff fb99 	bl	8001fd4 <_ZN11AnalyzerExtC1ER3Bsp>
Dac exDac(bsp);
 80028a2:	4903      	ldr	r1, [pc, #12]	@ (80028b0 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 80028a4:	4808      	ldr	r0, [pc, #32]	@ (80028c8 <_Z41__static_initialization_and_destruction_0v+0x54>)
 80028a6:	f7ff fbc5 	bl	8002034 <_ZN3DacC1ER3Bsp>
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	24000880 	.word	0x24000880
 80028b4:	24000884 	.word	0x24000884
 80028b8:	24002888 	.word	0x24002888
 80028bc:	24002d14 	.word	0x24002d14
 80028c0:	24002d1c 	.word	0x24002d1c
 80028c4:	24002d20 	.word	0x24002d20
 80028c8:	24002d24 	.word	0x24002d24

080028cc <_GLOBAL__sub_I_bsp>:
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	f7ff ffd0 	bl	8002874 <_Z41__static_initialization_and_destruction_0v>
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <_ZSt21is_constant_evaluatedv>:

  /// Returns true only when called during constant evaluation.
  /// @since C++20
  constexpr inline bool
  is_constant_evaluated() noexcept
  {
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
    if consteval { return true; } else { return false; }
#else
    return __builtin_is_constant_evaluated();
 80028da:	2300      	movs	r3, #0
#endif
  }
 80028dc:	4618      	mov	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <_ZN9SerialCtnC1ER3Bsp>:
#include <algorithm>


uint8_t UsbRxDataBuffer[USB_RX_BUFF_SIZE];

SerialCtn::SerialCtn(Bsp& bsp): _bsp(bsp){}
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	6039      	str	r1, [r7, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <_ZNSt5arrayIhLj15EEixEj>:
      operator[](size_type __n) noexcept
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
	return _M_elems[__n];
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	4413      	add	r3, r2
      }
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <_ZN9SerialCtn18interfaceHandshakeEhh>:

Status SerialCtn::interfaceHandshake(uint8_t major, uint8_t minor)
{
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b08f      	sub	sp, #60	@ 0x3c
 8002924:	af02      	add	r7, sp, #8
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	70fb      	strb	r3, [r7, #3]
 800292c:	4613      	mov	r3, r2
 800292e:	70bb      	strb	r3, [r7, #2]
	char versionStr[18];
	snprintf(versionStr, sizeof(versionStr), "Version: %d.%d", major, minor);
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	78bb      	ldrb	r3, [r7, #2]
 8002934:	f107 001c 	add.w	r0, r7, #28
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	4613      	mov	r3, r2
 800293c:	4a21      	ldr	r2, [pc, #132]	@ (80029c4 <_ZN9SerialCtn18interfaceHandshakeEhh+0xa4>)
 800293e:	2112      	movs	r1, #18
 8002940:	f012 fdde 	bl	8015500 <sniprintf>
	_bsp.usbTransmit(reinterpret_cast<uint8_t*>(versionStr), strlen(versionStr));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681c      	ldr	r4, [r3, #0]
 8002948:	f107 031c 	add.w	r3, r7, #28
 800294c:	4618      	mov	r0, r3
 800294e:	f7fd fd3f 	bl	80003d0 <strlen>
 8002952:	4603      	mov	r3, r0
 8002954:	b29a      	uxth	r2, r3
 8002956:	f107 031c 	add.w	r3, r7, #28
 800295a:	4619      	mov	r1, r3
 800295c:	4620      	mov	r0, r4
 800295e:	f7ff faf2 	bl	8001f46 <_ZN3Bsp11usbTransmitEPht>


	UsbArray dataReceived = receiveData();
 8002962:	f107 030c 	add.w	r3, r7, #12
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4618      	mov	r0, r3
 800296a:	f000 f82d 	bl	80029c8 <_ZN9SerialCtn11receiveDataEv>

	if(dataReceived[0] != 0xFF && dataReceived[1] != 0xAA && dataReceived[2] != 0xFF)
 800296e:	f107 030c 	add.w	r3, r7, #12
 8002972:	2100      	movs	r1, #0
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ffc5 	bl	8002904 <_ZNSt5arrayIhLj15EEixEj>
 800297a:	4603      	mov	r3, r0
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2bff      	cmp	r3, #255	@ 0xff
 8002980:	d015      	beq.n	80029ae <_ZN9SerialCtn18interfaceHandshakeEhh+0x8e>
 8002982:	f107 030c 	add.w	r3, r7, #12
 8002986:	2101      	movs	r1, #1
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ffbb 	bl	8002904 <_ZNSt5arrayIhLj15EEixEj>
 800298e:	4603      	mov	r3, r0
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2baa      	cmp	r3, #170	@ 0xaa
 8002994:	d00b      	beq.n	80029ae <_ZN9SerialCtn18interfaceHandshakeEhh+0x8e>
 8002996:	f107 030c 	add.w	r3, r7, #12
 800299a:	2102      	movs	r1, #2
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ffb1 	bl	8002904 <_ZNSt5arrayIhLj15EEixEj>
 80029a2:	4603      	mov	r3, r0
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2bff      	cmp	r3, #255	@ 0xff
 80029a8:	d001      	beq.n	80029ae <_ZN9SerialCtn18interfaceHandshakeEhh+0x8e>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <_ZN9SerialCtn18interfaceHandshakeEhh+0x90>
 80029ae:	2300      	movs	r3, #0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <_ZN9SerialCtn18interfaceHandshakeEhh+0x98>
		return Status::ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <_ZN9SerialCtn18interfaceHandshakeEhh+0x9a>

	return Status::OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3734      	adds	r7, #52	@ 0x34
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd90      	pop	{r4, r7, pc}
 80029c2:	bf00      	nop
 80029c4:	08016378 	.word	0x08016378

080029c8 <_ZN9SerialCtn11receiveDataEv>:

UsbArray SerialCtn::receiveData()
{
 80029c8:	b5b0      	push	{r4, r5, r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
	// C array into C++ array!
	UsbArray dataReceived = {};
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	461a      	mov	r2, r3
 80029d6:	2300      	movs	r3, #0
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	6053      	str	r3, [r2, #4]
 80029dc:	6093      	str	r3, [r2, #8]
 80029de:	f8c2 300b 	str.w	r3, [r2, #11]
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
    { return __arr; }
 80029e2:	4c08      	ldr	r4, [pc, #32]	@ (8002a04 <_ZN9SerialCtn11receiveDataEv+0x3c>)
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
    { return __arr + _Nm; }
 80029e4:	4d08      	ldr	r5, [pc, #32]	@ (8002a08 <_ZN9SerialCtn11receiveDataEv+0x40>)
	std::copy(std::begin(UsbRxDataBuffer), std::end(UsbRxDataBuffer), dataReceived.begin());
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f8dc 	bl	8002ba4 <_ZNSt5arrayIhLj15EE5beginEv>
 80029ec:	4603      	mov	r3, r0
 80029ee:	461a      	mov	r2, r3
 80029f0:	4629      	mov	r1, r5
 80029f2:	4620      	mov	r0, r4
 80029f4:	f000 f8e3 	bl	8002bbe <_ZSt4copyIPhS0_ET0_T_S2_S1_>
	return dataReceived;
 80029f8:	bf00      	nop
}
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bdb0      	pop	{r4, r5, r7, pc}
 8002a02:	bf00      	nop
 8002a04:	24002d28 	.word	0x24002d28
 8002a08:	24002d37 	.word	0x24002d37

08002a0c <_ZN9SerialCtn19processReceivedDataEv>:

ReceivedData SerialCtn::processReceivedData()
{
 8002a0c:	b5b0      	push	{r4, r5, r7, lr}
 8002a0e:	b08a      	sub	sp, #40	@ 0x28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
	ReceivedData data = {};
 8002a16:	2300      	movs	r3, #0
 8002a18:	763b      	strb	r3, [r7, #24]
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	767b      	strb	r3, [r7, #25]
 8002a1e:	f04f 0300 	mov.w	r3, #0
 8002a22:	f8c7 301a 	str.w	r3, [r7, #26]
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	f8c7 301e 	str.w	r3, [r7, #30]
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	f8c7 3022 	str.w	r3, [r7, #34]	@ 0x22
 8002a36:	2300      	movs	r3, #0
 8002a38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	UsbArray dataReceived = receiveData();
 8002a42:	f107 0308 	add.w	r3, r7, #8
 8002a46:	6839      	ldr	r1, [r7, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ffbd 	bl	80029c8 <_ZN9SerialCtn11receiveDataEv>

	// Oscilloscope
	if(dataReceived[0] != 0x00 && dataReceived[3] != 0x00 && dataReceived[6] != 0x00 && dataReceived[9] != 0x00 && dataReceived[13] != 0x00)
 8002a4e:	f107 0308 	add.w	r3, r7, #8
 8002a52:	2100      	movs	r1, #0
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff55 	bl	8002904 <_ZNSt5arrayIhLj15EEixEj>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d029      	beq.n	8002ab6 <_ZN9SerialCtn19processReceivedDataEv+0xaa>
 8002a62:	f107 0308 	add.w	r3, r7, #8
 8002a66:	2103      	movs	r1, #3
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff ff4b 	bl	8002904 <_ZNSt5arrayIhLj15EEixEj>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d01f      	beq.n	8002ab6 <_ZN9SerialCtn19processReceivedDataEv+0xaa>
 8002a76:	f107 0308 	add.w	r3, r7, #8
 8002a7a:	2106      	movs	r1, #6
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff ff41 	bl	8002904 <_ZNSt5arrayIhLj15EEixEj>
 8002a82:	4603      	mov	r3, r0
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d015      	beq.n	8002ab6 <_ZN9SerialCtn19processReceivedDataEv+0xaa>
 8002a8a:	f107 0308 	add.w	r3, r7, #8
 8002a8e:	2109      	movs	r1, #9
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff37 	bl	8002904 <_ZNSt5arrayIhLj15EEixEj>
 8002a96:	4603      	mov	r3, r0
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00b      	beq.n	8002ab6 <_ZN9SerialCtn19processReceivedDataEv+0xaa>
 8002a9e:	f107 0308 	add.w	r3, r7, #8
 8002aa2:	210d      	movs	r1, #13
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ff2d 	bl	8002904 <_ZNSt5arrayIhLj15EEixEj>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <_ZN9SerialCtn19processReceivedDataEv+0xaa>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <_ZN9SerialCtn19processReceivedDataEv+0xac>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d009      	beq.n	8002ad0 <_ZN9SerialCtn19processReceivedDataEv+0xc4>
	{
		//data.stop = true;
		return data;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	461d      	mov	r5, r3
 8002ac0:	f107 0418 	add.w	r4, r7, #24
 8002ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac6:	6028      	str	r0, [r5, #0]
 8002ac8:	6069      	str	r1, [r5, #4]
 8002aca:	60aa      	str	r2, [r5, #8]
 8002acc:	60eb      	str	r3, [r5, #12]
 8002ace:	e062      	b.n	8002b96 <_ZN9SerialCtn19processReceivedDataEv+0x18a>
	}
	// Func generator
	else if (dataReceived[0] != 0x01 || dataReceived[0] != 0x02 || dataReceived[0] != 0x03 || dataReceived[0] != 0x04 || dataReceived[0] != 0x05)
 8002ad0:	f107 0308 	add.w	r3, r7, #8
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ff14 	bl	8002904 <_ZNSt5arrayIhLj15EEixEj>
 8002adc:	4603      	mov	r3, r0
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d127      	bne.n	8002b34 <_ZN9SerialCtn19processReceivedDataEv+0x128>
 8002ae4:	f107 0308 	add.w	r3, r7, #8
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff ff0a 	bl	8002904 <_ZNSt5arrayIhLj15EEixEj>
 8002af0:	4603      	mov	r3, r0
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d11d      	bne.n	8002b34 <_ZN9SerialCtn19processReceivedDataEv+0x128>
 8002af8:	f107 0308 	add.w	r3, r7, #8
 8002afc:	2100      	movs	r1, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff ff00 	bl	8002904 <_ZNSt5arrayIhLj15EEixEj>
 8002b04:	4603      	mov	r3, r0
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d113      	bne.n	8002b34 <_ZN9SerialCtn19processReceivedDataEv+0x128>
 8002b0c:	f107 0308 	add.w	r3, r7, #8
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff fef6 	bl	8002904 <_ZNSt5arrayIhLj15EEixEj>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d109      	bne.n	8002b34 <_ZN9SerialCtn19processReceivedDataEv+0x128>
 8002b20:	f107 0308 	add.w	r3, r7, #8
 8002b24:	2100      	movs	r1, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff feec 	bl	8002904 <_ZNSt5arrayIhLj15EEixEj>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b05      	cmp	r3, #5
 8002b32:	d001      	beq.n	8002b38 <_ZN9SerialCtn19processReceivedDataEv+0x12c>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <_ZN9SerialCtn19processReceivedDataEv+0x12e>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d022      	beq.n	8002b84 <_ZN9SerialCtn19processReceivedDataEv+0x178>
	{
		_bsp.usbTransmit((uint8_t*)"Invalid data\n", 15);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	220f      	movs	r2, #15
 8002b44:	4916      	ldr	r1, [pc, #88]	@ (8002ba0 <_ZN9SerialCtn19processReceivedDataEv+0x194>)
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff f9fd 	bl	8001f46 <_ZN3Bsp11usbTransmitEPht>
		return {};
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	705a      	strb	r2, [r3, #1]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3306      	adds	r3, #6
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	330a      	adds	r3, #10
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	739a      	strb	r2, [r3, #14]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	73da      	strb	r2, [r3, #15]
 8002b82:	e008      	b.n	8002b96 <_ZN9SerialCtn19processReceivedDataEv+0x18a>
//		std::memcpy(&data.amplitude, &dataReceived[5], sizeof(float));
//		std::memcpy(&data.offset, &dataReceived[9], sizeof(float));
//		data.stop = false;
	}

	return data;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	461d      	mov	r5, r3
 8002b88:	f107 0418 	add.w	r4, r7, #24
 8002b8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b8e:	6028      	str	r0, [r5, #0]
 8002b90:	6069      	str	r1, [r5, #4]
 8002b92:	60aa      	str	r2, [r5, #8]
 8002b94:	60eb      	str	r3, [r5, #12]
}
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	3728      	adds	r7, #40	@ 0x28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	08016388 	.word	0x08016388

08002ba4 <_ZNSt5arrayIhLj15EE5beginEv>:
      begin() noexcept
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	60fb      	str	r3, [r7, #12]
      { return static_cast<pointer>(_M_elems); }
 8002bb0:	68fb      	ldr	r3, [r7, #12]
      { return iterator(data()); }
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8002bbe:	b590      	push	{r4, r7, lr}
 8002bc0:	b085      	sub	sp, #20
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 f80f 	bl	8002bee <_ZSt12__miter_baseIPhET_S1_>
 8002bd0:	4604      	mov	r4, r0
 8002bd2:	68b8      	ldr	r0, [r7, #8]
 8002bd4:	f000 f80b 	bl	8002bee <_ZSt12__miter_baseIPhET_S1_>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4620      	mov	r0, r4
 8002be0:	f000 f810 	bl	8002c04 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 8002be4:	4603      	mov	r3, r0
    }
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd90      	pop	{r4, r7, pc}

08002bee <_ZSt12__miter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002c04:	b5b0      	push	{r4, r5, r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 f81a 	bl	8002c4a <_ZSt12__niter_baseIPhET_S1_>
 8002c16:	4604      	mov	r4, r0
 8002c18:	68b8      	ldr	r0, [r7, #8]
 8002c1a:	f000 f816 	bl	8002c4a <_ZSt12__niter_baseIPhET_S1_>
 8002c1e:	4605      	mov	r5, r0
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 f811 	bl	8002c4a <_ZSt12__niter_baseIPhET_S1_>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f000 f816 	bl	8002c60 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 8002c34:	4602      	mov	r2, r0
 8002c36:	1d3b      	adds	r3, r7, #4
 8002c38:	4611      	mov	r1, r2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 f820 	bl	8002c80 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8002c40:	4603      	mov	r3, r0
    }
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bdb0      	pop	{r4, r5, r7, pc}

08002c4a <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f811 	bl	8002c98 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 8002c76:	4603      	mov	r3, r0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
    { return __res; }
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8002ca4:	f7ff fe17 	bl	80028d6 <_ZSt21is_constant_evaluatedv>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d006      	beq.n	8002cbc <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f80d 	bl	8002cd2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPhS3_EET0_T_S5_S4_>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	e006      	b.n	8002cca <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f828 	bl	8002d16 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	bf00      	nop
    }
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPhS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8002cd2:	b480      	push	{r7}
 8002cd4:	b087      	sub	sp, #28
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	60f8      	str	r0, [r7, #12]
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	e00c      	b.n	8002d02 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPhS3_EET0_T_S5_S4_+0x30>
	      *__result = *__first;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	781a      	ldrb	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	701a      	strb	r2, [r3, #0]
	      ++__first;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	dcef      	bgt.n	8002ce8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPhS3_EET0_T_S5_S4_+0x16>
	  return __result;
 8002d08:	687b      	ldr	r3, [r7, #4]
	}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_>:
	__copy_m(_Tp* __first, _Tp* __last, _Up* __result)
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b086      	sub	sp, #24
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	617b      	str	r3, [r7, #20]
	  if (__builtin_expect(_Num > 1, true))
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	bfcc      	ite	gt
 8002d30:	2301      	movgt	r3, #1
 8002d32:	2300      	movle	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d006      	beq.n	8002d48 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_+0x32>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	68f9      	ldr	r1, [r7, #12]
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f012 fceb 	bl	801571c <memmove>
 8002d46:	e006      	b.n	8002d56 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_+0x40>
	  else if (_Num == 1)
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d103      	bne.n	8002d56 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_+0x40>
	      __assign_one(__result, __first);
 8002d4e:	68f9      	ldr	r1, [r7, #12]
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f807 	bl	8002d64 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE12__assign_oneIhhEEvPT_PT0_>
	  return __result + _Num;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	4413      	add	r3, r2
	}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE12__assign_oneIhhEEvPT_PT0_>:
	__assign_one(_Tp* __to, _Up* __from)
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
	{ *__to = *__from; }
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	781a      	ldrb	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	701a      	strb	r2, [r3, #0]
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d8a:	2003      	movs	r0, #3
 8002d8c:	f002 f874 	bl	8004e78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d90:	f007 f85a 	bl	8009e48 <HAL_RCC_GetSysClockFreq>
 8002d94:	4602      	mov	r2, r0
 8002d96:	4b15      	ldr	r3, [pc, #84]	@ (8002dec <HAL_Init+0x68>)
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	0a1b      	lsrs	r3, r3, #8
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	4913      	ldr	r1, [pc, #76]	@ (8002df0 <HAL_Init+0x6c>)
 8002da2:	5ccb      	ldrb	r3, [r1, r3]
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dae:	4b0f      	ldr	r3, [pc, #60]	@ (8002dec <HAL_Init+0x68>)
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	4a0e      	ldr	r2, [pc, #56]	@ (8002df0 <HAL_Init+0x6c>)
 8002db8:	5cd3      	ldrb	r3, [r2, r3]
 8002dba:	f003 031f 	and.w	r3, r3, #31
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc4:	4a0b      	ldr	r2, [pc, #44]	@ (8002df4 <HAL_Init+0x70>)
 8002dc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8002df8 <HAL_Init+0x74>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f000 f814 	bl	8002dfc <HAL_InitTick>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e002      	b.n	8002de4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002dde:	f7fe fbaf 	bl	8001540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	58024400 	.word	0x58024400
 8002df0:	080163e0 	.word	0x080163e0
 8002df4:	24000004 	.word	0x24000004
 8002df8:	24000000 	.word	0x24000000

08002dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002e04:	4b15      	ldr	r3, [pc, #84]	@ (8002e5c <HAL_InitTick+0x60>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e021      	b.n	8002e54 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002e10:	4b13      	ldr	r3, [pc, #76]	@ (8002e60 <HAL_InitTick+0x64>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4b11      	ldr	r3, [pc, #68]	@ (8002e5c <HAL_InitTick+0x60>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e26:	4618      	mov	r0, r3
 8002e28:	f002 f859 	bl	8004ede <HAL_SYSTICK_Config>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e00e      	b.n	8002e54 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b0f      	cmp	r3, #15
 8002e3a:	d80a      	bhi.n	8002e52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	f04f 30ff 	mov.w	r0, #4294967295
 8002e44:	f002 f823 	bl	8004e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e48:	4a06      	ldr	r2, [pc, #24]	@ (8002e64 <HAL_InitTick+0x68>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e000      	b.n	8002e54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	2400000c 	.word	0x2400000c
 8002e60:	24000000 	.word	0x24000000
 8002e64:	24000008 	.word	0x24000008

08002e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e6c:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <HAL_IncTick+0x20>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	4b06      	ldr	r3, [pc, #24]	@ (8002e8c <HAL_IncTick+0x24>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4413      	add	r3, r2
 8002e78:	4a04      	ldr	r2, [pc, #16]	@ (8002e8c <HAL_IncTick+0x24>)
 8002e7a:	6013      	str	r3, [r2, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	2400000c 	.word	0x2400000c
 8002e8c:	24002d38 	.word	0x24002d38

08002e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return uwTick;
 8002e94:	4b03      	ldr	r3, [pc, #12]	@ (8002ea4 <HAL_GetTick+0x14>)
 8002e96:	681b      	ldr	r3, [r3, #0]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	24002d38 	.word	0x24002d38

08002ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eb0:	f7ff ffee 	bl	8002e90 <HAL_GetTick>
 8002eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec0:	d005      	beq.n	8002ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8002eec <HAL_Delay+0x44>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4413      	add	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ece:	bf00      	nop
 8002ed0:	f7ff ffde 	bl	8002e90 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d8f7      	bhi.n	8002ed0 <HAL_Delay+0x28>
  {
  }
}
 8002ee0:	bf00      	nop
 8002ee2:	bf00      	nop
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	2400000c 	.word	0x2400000c

08002ef0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	609a      	str	r2, [r3, #8]
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a18      	ldr	r2, [pc, #96]	@ (8002fc8 <LL_ADC_SetChannelPreselection+0x70>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d027      	beq.n	8002fba <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d107      	bne.n	8002f84 <LL_ADC_SetChannelPreselection+0x2c>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	0e9b      	lsrs	r3, r3, #26
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	e015      	b.n	8002fb0 <LL_ADC_SetChannelPreselection+0x58>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	fa93 f3a3 	rbit	r3, r3
 8002f8e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8002f9a:	2320      	movs	r3, #32
 8002f9c:	e003      	b.n	8002fa6 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	fab3 f383 	clz	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	2201      	movs	r2, #1
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	69d2      	ldr	r2, [r2, #28]
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8002fba:	bf00      	nop
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	58026000 	.word	0x58026000

08002fcc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	3360      	adds	r3, #96	@ 0x60
 8002fde:	461a      	mov	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4a10      	ldr	r2, [pc, #64]	@ (800302c <LL_ADC_SetOffset+0x60>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d10b      	bne.n	8003008 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003006:	e00b      	b.n	8003020 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	430b      	orrs	r3, r1
 800301a:	431a      	orrs	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	601a      	str	r2, [r3, #0]
}
 8003020:	bf00      	nop
 8003022:	371c      	adds	r7, #28
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	58026000 	.word	0x58026000

08003030 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3360      	adds	r3, #96	@ 0x60
 800303e:	461a      	mov	r2, r3
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f003 031f 	and.w	r3, r3, #31
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	431a      	orrs	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	611a      	str	r2, [r3, #16]
}
 8003082:	bf00      	nop
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
	...

08003090 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4a0c      	ldr	r2, [pc, #48]	@ (80030d0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d00e      	beq.n	80030c2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	3360      	adds	r3, #96	@ 0x60
 80030a8:	461a      	mov	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	431a      	orrs	r2, r3
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	601a      	str	r2, [r3, #0]
  }
}
 80030c2:	bf00      	nop
 80030c4:	371c      	adds	r7, #28
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	58026000 	.word	0x58026000

080030d4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003114 <LL_ADC_SetOffsetSaturation+0x40>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d10e      	bne.n	8003106 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	3360      	adds	r3, #96	@ 0x60
 80030ec:	461a      	mov	r2, r3
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	431a      	orrs	r2, r3
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003106:	bf00      	nop
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	58026000 	.word	0x58026000

08003118 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4a0c      	ldr	r2, [pc, #48]	@ (8003158 <LL_ADC_SetOffsetSign+0x40>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d10e      	bne.n	800314a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3360      	adds	r3, #96	@ 0x60
 8003130:	461a      	mov	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	431a      	orrs	r2, r3
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800314a:	bf00      	nop
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	58026000 	.word	0x58026000

0800315c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	3360      	adds	r3, #96	@ 0x60
 800316c:	461a      	mov	r2, r3
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4a0c      	ldr	r2, [pc, #48]	@ (80031ac <LL_ADC_SetOffsetState+0x50>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d108      	bne.n	8003190 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	431a      	orrs	r2, r3
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800318e:	e007      	b.n	80031a0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	431a      	orrs	r2, r3
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	601a      	str	r2, [r3, #0]
}
 80031a0:	bf00      	nop
 80031a2:	371c      	adds	r7, #28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	58026000 	.word	0x58026000

080031b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b087      	sub	sp, #28
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	3330      	adds	r3, #48	@ 0x30
 80031e6:	461a      	mov	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	0a1b      	lsrs	r3, r3, #8
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	4413      	add	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	211f      	movs	r1, #31
 8003202:	fa01 f303 	lsl.w	r3, r1, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	401a      	ands	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	0e9b      	lsrs	r3, r3, #26
 800320e:	f003 011f 	and.w	r1, r3, #31
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f003 031f 	and.w	r3, r3, #31
 8003218:	fa01 f303 	lsl.w	r3, r1, r3
 800321c:	431a      	orrs	r2, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800323a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	3314      	adds	r3, #20
 8003264:	461a      	mov	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	0e5b      	lsrs	r3, r3, #25
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	4413      	add	r3, r2
 8003272:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	0d1b      	lsrs	r3, r3, #20
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	2107      	movs	r1, #7
 8003282:	fa01 f303 	lsl.w	r3, r1, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	401a      	ands	r2, r3
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	0d1b      	lsrs	r3, r3, #20
 800328e:	f003 031f 	and.w	r3, r3, #31
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	fa01 f303 	lsl.w	r3, r1, r3
 8003298:	431a      	orrs	r2, r3
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800329e:	bf00      	nop
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4a1a      	ldr	r2, [pc, #104]	@ (8003324 <LL_ADC_SetChannelSingleDiff+0x78>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d115      	bne.n	80032ec <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032cc:	43db      	mvns	r3, r3
 80032ce:	401a      	ands	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f003 0318 	and.w	r3, r3, #24
 80032d6:	4914      	ldr	r1, [pc, #80]	@ (8003328 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80032d8:	40d9      	lsrs	r1, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	400b      	ands	r3, r1
 80032de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032e2:	431a      	orrs	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80032ea:	e014      	b.n	8003316 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032f8:	43db      	mvns	r3, r3
 80032fa:	401a      	ands	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f003 0318 	and.w	r3, r3, #24
 8003302:	4909      	ldr	r1, [pc, #36]	@ (8003328 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003304:	40d9      	lsrs	r1, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	400b      	ands	r3, r1
 800330a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800330e:	431a      	orrs	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	58026000 	.word	0x58026000
 8003328:	000fffff 	.word	0x000fffff

0800332c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 031f 	and.w	r3, r3, #31
}
 800333c:	4618      	mov	r0, r3
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003358:	4618      	mov	r0, r3
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	4b04      	ldr	r3, [pc, #16]	@ (8003384 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003372:	4013      	ands	r3, r2
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6093      	str	r3, [r2, #8]
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	5fffffc0 	.word	0x5fffffc0

08003388 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003398:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800339c:	d101      	bne.n	80033a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	4b05      	ldr	r3, [pc, #20]	@ (80033d4 <LL_ADC_EnableInternalRegulator+0x24>)
 80033be:	4013      	ands	r3, r2
 80033c0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	6fffffc0 	.word	0x6fffffc0

080033d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033ec:	d101      	bne.n	80033f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <LL_ADC_IsEnabled+0x18>
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <LL_ADC_IsEnabled+0x1a>
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b04      	cmp	r3, #4
 8003438:	d101      	bne.n	800343e <LL_ADC_REG_IsConversionOngoing+0x18>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b08      	cmp	r3, #8
 800345e:	d101      	bne.n	8003464 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003474:	b590      	push	{r4, r7, lr}
 8003476:	b089      	sub	sp, #36	@ 0x24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003480:	2300      	movs	r3, #0
 8003482:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e1ee      	b.n	800386c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003498:	2b00      	cmp	r3, #0
 800349a:	d109      	bne.n	80034b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7fd f9ff 	bl	80008a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff ff67 	bl	8003388 <LL_ADC_IsDeepPowerDownEnabled>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d004      	beq.n	80034ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff ff4d 	bl	8003364 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff ff82 	bl	80033d8 <LL_ADC_IsInternalRegulatorEnabled>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d114      	bne.n	8003504 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff ff66 	bl	80033b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034e4:	4b8e      	ldr	r3, [pc, #568]	@ (8003720 <HAL_ADC_Init+0x2ac>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	099b      	lsrs	r3, r3, #6
 80034ea:	4a8e      	ldr	r2, [pc, #568]	@ (8003724 <HAL_ADC_Init+0x2b0>)
 80034ec:	fba2 2303 	umull	r2, r3, r2, r3
 80034f0:	099b      	lsrs	r3, r3, #6
 80034f2:	3301      	adds	r3, #1
 80034f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034f6:	e002      	b.n	80034fe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1f9      	bne.n	80034f8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff ff65 	bl	80033d8 <LL_ADC_IsInternalRegulatorEnabled>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10d      	bne.n	8003530 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003518:	f043 0210 	orr.w	r2, r3, #16
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003524:	f043 0201 	orr.w	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff ff76 	bl	8003426 <LL_ADC_REG_IsConversionOngoing>
 800353a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b00      	cmp	r3, #0
 8003546:	f040 8188 	bne.w	800385a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2b00      	cmp	r3, #0
 800354e:	f040 8184 	bne.w	800385a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003556:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800355a:	f043 0202 	orr.w	r2, r3, #2
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff ff4a 	bl	8003400 <LL_ADC_IsEnabled>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d136      	bne.n	80035e0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a6c      	ldr	r2, [pc, #432]	@ (8003728 <HAL_ADC_Init+0x2b4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d004      	beq.n	8003586 <HAL_ADC_Init+0x112>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a6a      	ldr	r2, [pc, #424]	@ (800372c <HAL_ADC_Init+0x2b8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d10e      	bne.n	80035a4 <HAL_ADC_Init+0x130>
 8003586:	4868      	ldr	r0, [pc, #416]	@ (8003728 <HAL_ADC_Init+0x2b4>)
 8003588:	f7ff ff3a 	bl	8003400 <LL_ADC_IsEnabled>
 800358c:	4604      	mov	r4, r0
 800358e:	4867      	ldr	r0, [pc, #412]	@ (800372c <HAL_ADC_Init+0x2b8>)
 8003590:	f7ff ff36 	bl	8003400 <LL_ADC_IsEnabled>
 8003594:	4603      	mov	r3, r0
 8003596:	4323      	orrs	r3, r4
 8003598:	2b00      	cmp	r3, #0
 800359a:	bf0c      	ite	eq
 800359c:	2301      	moveq	r3, #1
 800359e:	2300      	movne	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	e008      	b.n	80035b6 <HAL_ADC_Init+0x142>
 80035a4:	4862      	ldr	r0, [pc, #392]	@ (8003730 <HAL_ADC_Init+0x2bc>)
 80035a6:	f7ff ff2b 	bl	8003400 <LL_ADC_IsEnabled>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bf0c      	ite	eq
 80035b0:	2301      	moveq	r3, #1
 80035b2:	2300      	movne	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d012      	beq.n	80035e0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a5a      	ldr	r2, [pc, #360]	@ (8003728 <HAL_ADC_Init+0x2b4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d004      	beq.n	80035ce <HAL_ADC_Init+0x15a>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a58      	ldr	r2, [pc, #352]	@ (800372c <HAL_ADC_Init+0x2b8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d101      	bne.n	80035d2 <HAL_ADC_Init+0x15e>
 80035ce:	4a59      	ldr	r2, [pc, #356]	@ (8003734 <HAL_ADC_Init+0x2c0>)
 80035d0:	e000      	b.n	80035d4 <HAL_ADC_Init+0x160>
 80035d2:	4a59      	ldr	r2, [pc, #356]	@ (8003738 <HAL_ADC_Init+0x2c4>)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	4619      	mov	r1, r3
 80035da:	4610      	mov	r0, r2
 80035dc:	f7ff fc88 	bl	8002ef0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a52      	ldr	r2, [pc, #328]	@ (8003730 <HAL_ADC_Init+0x2bc>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d129      	bne.n	800363e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	7e5b      	ldrb	r3, [r3, #25]
 80035ee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80035f4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80035fa:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b08      	cmp	r3, #8
 8003602:	d013      	beq.n	800362c <HAL_ADC_Init+0x1b8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b0c      	cmp	r3, #12
 800360a:	d00d      	beq.n	8003628 <HAL_ADC_Init+0x1b4>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	2b1c      	cmp	r3, #28
 8003612:	d007      	beq.n	8003624 <HAL_ADC_Init+0x1b0>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2b18      	cmp	r3, #24
 800361a:	d101      	bne.n	8003620 <HAL_ADC_Init+0x1ac>
 800361c:	2318      	movs	r3, #24
 800361e:	e006      	b.n	800362e <HAL_ADC_Init+0x1ba>
 8003620:	2300      	movs	r3, #0
 8003622:	e004      	b.n	800362e <HAL_ADC_Init+0x1ba>
 8003624:	2310      	movs	r3, #16
 8003626:	e002      	b.n	800362e <HAL_ADC_Init+0x1ba>
 8003628:	2308      	movs	r3, #8
 800362a:	e000      	b.n	800362e <HAL_ADC_Init+0x1ba>
 800362c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800362e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003636:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003638:	4313      	orrs	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
 800363c:	e00e      	b.n	800365c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	7e5b      	ldrb	r3, [r3, #25]
 8003642:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003648:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800364e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003656:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d106      	bne.n	8003674 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366a:	3b01      	subs	r3, #1
 800366c:	045b      	lsls	r3, r3, #17
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003678:	2b00      	cmp	r3, #0
 800367a:	d009      	beq.n	8003690 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003680:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003688:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a26      	ldr	r2, [pc, #152]	@ (8003730 <HAL_ADC_Init+0x2bc>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d115      	bne.n	80036c6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	4b26      	ldr	r3, [pc, #152]	@ (800373c <HAL_ADC_Init+0x2c8>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	69b9      	ldr	r1, [r7, #24]
 80036aa:	430b      	orrs	r3, r1
 80036ac:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	611a      	str	r2, [r3, #16]
 80036c4:	e009      	b.n	80036da <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	4b1c      	ldr	r3, [pc, #112]	@ (8003740 <HAL_ADC_Init+0x2cc>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	69b9      	ldr	r1, [r7, #24]
 80036d6:	430b      	orrs	r3, r1
 80036d8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff fea1 	bl	8003426 <LL_ADC_REG_IsConversionOngoing>
 80036e4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff feae 	bl	800344c <LL_ADC_INJ_IsConversionOngoing>
 80036f0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f040 808e 	bne.w	8003816 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f040 808a 	bne.w	8003816 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a0a      	ldr	r2, [pc, #40]	@ (8003730 <HAL_ADC_Init+0x2bc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d11b      	bne.n	8003744 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	7e1b      	ldrb	r3, [r3, #24]
 8003710:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003718:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	e018      	b.n	8003752 <HAL_ADC_Init+0x2de>
 8003720:	24000000 	.word	0x24000000
 8003724:	053e2d63 	.word	0x053e2d63
 8003728:	40022000 	.word	0x40022000
 800372c:	40022100 	.word	0x40022100
 8003730:	58026000 	.word	0x58026000
 8003734:	40022300 	.word	0x40022300
 8003738:	58026300 	.word	0x58026300
 800373c:	fff04007 	.word	0xfff04007
 8003740:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	7e1b      	ldrb	r3, [r3, #24]
 8003748:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 800374e:	4313      	orrs	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	4b46      	ldr	r3, [pc, #280]	@ (8003874 <HAL_ADC_Init+0x400>)
 800375a:	4013      	ands	r3, r2
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	69b9      	ldr	r1, [r7, #24]
 8003762:	430b      	orrs	r3, r1
 8003764:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800376c:	2b01      	cmp	r3, #1
 800376e:	d137      	bne.n	80037e0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003774:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a3f      	ldr	r2, [pc, #252]	@ (8003878 <HAL_ADC_Init+0x404>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d116      	bne.n	80037ae <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	4b3d      	ldr	r3, [pc, #244]	@ (800387c <HAL_ADC_Init+0x408>)
 8003788:	4013      	ands	r3, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003792:	4311      	orrs	r1, r2
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003798:	4311      	orrs	r1, r2
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800379e:	430a      	orrs	r2, r1
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	611a      	str	r2, [r3, #16]
 80037ac:	e020      	b.n	80037f0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	4b32      	ldr	r3, [pc, #200]	@ (8003880 <HAL_ADC_Init+0x40c>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80037bc:	3a01      	subs	r2, #1
 80037be:	0411      	lsls	r1, r2, #16
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80037c4:	4311      	orrs	r1, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80037ca:	4311      	orrs	r1, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80037d0:	430a      	orrs	r2, r1
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0201 	orr.w	r2, r2, #1
 80037dc:	611a      	str	r2, [r3, #16]
 80037de:	e007      	b.n	80037f0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1b      	ldr	r2, [pc, #108]	@ (8003878 <HAL_ADC_Init+0x404>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d002      	beq.n	8003816 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 ff63 	bl	80046dc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d10c      	bne.n	8003838 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	f023 010f 	bic.w	r1, r3, #15
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	1e5a      	subs	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	631a      	str	r2, [r3, #48]	@ 0x30
 8003836:	e007      	b.n	8003848 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 020f 	bic.w	r2, r2, #15
 8003846:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384c:	f023 0303 	bic.w	r3, r3, #3
 8003850:	f043 0201 	orr.w	r2, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	661a      	str	r2, [r3, #96]	@ 0x60
 8003858:	e007      	b.n	800386a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800385e:	f043 0210 	orr.w	r2, r3, #16
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800386a:	7ffb      	ldrb	r3, [r7, #31]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3724      	adds	r7, #36	@ 0x24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd90      	pop	{r4, r7, pc}
 8003874:	ffffbffc 	.word	0xffffbffc
 8003878:	58026000 	.word	0x58026000
 800387c:	fc00f81f 	.word	0xfc00f81f
 8003880:	fc00f81e 	.word	0xfc00f81e

08003884 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08a      	sub	sp, #40	@ 0x28
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800388c:	2300      	movs	r3, #0
 800388e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a87      	ldr	r2, [pc, #540]	@ (8003ac4 <HAL_ADC_IRQHandler+0x240>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d004      	beq.n	80038b4 <HAL_ADC_IRQHandler+0x30>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a86      	ldr	r2, [pc, #536]	@ (8003ac8 <HAL_ADC_IRQHandler+0x244>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d101      	bne.n	80038b8 <HAL_ADC_IRQHandler+0x34>
 80038b4:	4b85      	ldr	r3, [pc, #532]	@ (8003acc <HAL_ADC_IRQHandler+0x248>)
 80038b6:	e000      	b.n	80038ba <HAL_ADC_IRQHandler+0x36>
 80038b8:	4b85      	ldr	r3, [pc, #532]	@ (8003ad0 <HAL_ADC_IRQHandler+0x24c>)
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff fd36 	bl	800332c <LL_ADC_GetMultimode>
 80038c0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d017      	beq.n	80038fc <HAL_ADC_IRQHandler+0x78>
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d012      	beq.n	80038fc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038da:	f003 0310 	and.w	r3, r3, #16
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d105      	bne.n	80038ee <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f001 f830 	bl	8004954 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2202      	movs	r2, #2
 80038fa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b00      	cmp	r3, #0
 8003904:	d004      	beq.n	8003910 <HAL_ADC_IRQHandler+0x8c>
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10a      	bne.n	8003926 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 8083 	beq.w	8003a22 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d07d      	beq.n	8003a22 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b00      	cmp	r3, #0
 8003930:	d105      	bne.n	800393e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003936:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff fc34 	bl	80031b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d062      	beq.n	8003a14 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a5d      	ldr	r2, [pc, #372]	@ (8003ac8 <HAL_ADC_IRQHandler+0x244>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d002      	beq.n	800395e <HAL_ADC_IRQHandler+0xda>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	e000      	b.n	8003960 <HAL_ADC_IRQHandler+0xdc>
 800395e:	4b59      	ldr	r3, [pc, #356]	@ (8003ac4 <HAL_ADC_IRQHandler+0x240>)
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	4293      	cmp	r3, r2
 8003966:	d008      	beq.n	800397a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2b05      	cmp	r3, #5
 8003972:	d002      	beq.n	800397a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2b09      	cmp	r3, #9
 8003978:	d104      	bne.n	8003984 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	623b      	str	r3, [r7, #32]
 8003982:	e00c      	b.n	800399e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a4f      	ldr	r2, [pc, #316]	@ (8003ac8 <HAL_ADC_IRQHandler+0x244>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d002      	beq.n	8003994 <HAL_ADC_IRQHandler+0x110>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	e000      	b.n	8003996 <HAL_ADC_IRQHandler+0x112>
 8003994:	4b4b      	ldr	r3, [pc, #300]	@ (8003ac4 <HAL_ADC_IRQHandler+0x240>)
 8003996:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d135      	bne.n	8003a14 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d12e      	bne.n	8003a14 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff fd33 	bl	8003426 <LL_ADC_REG_IsConversionOngoing>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d11a      	bne.n	80039fc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 020c 	bic.w	r2, r2, #12
 80039d4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d112      	bne.n	8003a14 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f2:	f043 0201 	orr.w	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	661a      	str	r2, [r3, #96]	@ 0x60
 80039fa:	e00b      	b.n	8003a14 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a00:	f043 0210 	orr.w	r2, r3, #16
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a0c:	f043 0201 	orr.w	r2, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f96f 	bl	8003cf8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	220c      	movs	r2, #12
 8003a20:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d004      	beq.n	8003a36 <HAL_ADC_IRQHandler+0x1b2>
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10b      	bne.n	8003a4e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 80a0 	beq.w	8003b82 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 809a 	beq.w	8003b82 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a52:	f003 0310 	and.w	r3, r3, #16
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d105      	bne.n	8003a66 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a5e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fbdf 	bl	800322e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003a70:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff fb9a 	bl	80031b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a7c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a11      	ldr	r2, [pc, #68]	@ (8003ac8 <HAL_ADC_IRQHandler+0x244>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d002      	beq.n	8003a8e <HAL_ADC_IRQHandler+0x20a>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	e000      	b.n	8003a90 <HAL_ADC_IRQHandler+0x20c>
 8003a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac4 <HAL_ADC_IRQHandler+0x240>)
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d008      	beq.n	8003aaa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d005      	beq.n	8003aaa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2b06      	cmp	r3, #6
 8003aa2:	d002      	beq.n	8003aaa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	2b07      	cmp	r3, #7
 8003aa8:	d104      	bne.n	8003ab4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	623b      	str	r3, [r7, #32]
 8003ab2:	e014      	b.n	8003ade <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a03      	ldr	r2, [pc, #12]	@ (8003ac8 <HAL_ADC_IRQHandler+0x244>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00a      	beq.n	8003ad4 <HAL_ADC_IRQHandler+0x250>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	e008      	b.n	8003ad6 <HAL_ADC_IRQHandler+0x252>
 8003ac4:	40022000 	.word	0x40022000
 8003ac8:	40022100 	.word	0x40022100
 8003acc:	40022300 	.word	0x40022300
 8003ad0:	58026300 	.word	0x58026300
 8003ad4:	4b84      	ldr	r3, [pc, #528]	@ (8003ce8 <HAL_ADC_IRQHandler+0x464>)
 8003ad6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d047      	beq.n	8003b74 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d007      	beq.n	8003afe <HAL_ADC_IRQHandler+0x27a>
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d03f      	beq.n	8003b74 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d13a      	bne.n	8003b74 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b08:	2b40      	cmp	r3, #64	@ 0x40
 8003b0a:	d133      	bne.n	8003b74 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d12e      	bne.n	8003b74 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff fc96 	bl	800344c <LL_ADC_INJ_IsConversionOngoing>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d11a      	bne.n	8003b5c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b34:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d112      	bne.n	8003b74 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b52:	f043 0201 	orr.w	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	661a      	str	r2, [r3, #96]	@ 0x60
 8003b5a:	e00b      	b.n	8003b74 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b60:	f043 0210 	orr.w	r2, r3, #16
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b6c:	f043 0201 	orr.w	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fec5 	bl	8004904 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2260      	movs	r2, #96	@ 0x60
 8003b80:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d011      	beq.n	8003bb0 <HAL_ADC_IRQHandler+0x32c>
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00c      	beq.n	8003bb0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f8b2 	bl	8003d0c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2280      	movs	r2, #128	@ 0x80
 8003bae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d012      	beq.n	8003be0 <HAL_ADC_IRQHandler+0x35c>
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00d      	beq.n	8003be0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 feab 	bl	800492c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003bde:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d012      	beq.n	8003c10 <HAL_ADC_IRQHandler+0x38c>
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00d      	beq.n	8003c10 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bf8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 fe9d 	bl	8004940 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c0e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f003 0310 	and.w	r3, r3, #16
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d043      	beq.n	8003ca2 <HAL_ADC_IRQHandler+0x41e>
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d03e      	beq.n	8003ca2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c30:	e021      	b.n	8003c76 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d015      	beq.n	8003c64 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ce8 <HAL_ADC_IRQHandler+0x464>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d004      	beq.n	8003c4c <HAL_ADC_IRQHandler+0x3c8>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a29      	ldr	r2, [pc, #164]	@ (8003cec <HAL_ADC_IRQHandler+0x468>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d101      	bne.n	8003c50 <HAL_ADC_IRQHandler+0x3cc>
 8003c4c:	4b28      	ldr	r3, [pc, #160]	@ (8003cf0 <HAL_ADC_IRQHandler+0x46c>)
 8003c4e:	e000      	b.n	8003c52 <HAL_ADC_IRQHandler+0x3ce>
 8003c50:	4b28      	ldr	r3, [pc, #160]	@ (8003cf4 <HAL_ADC_IRQHandler+0x470>)
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff fb78 	bl	8003348 <LL_ADC_GetMultiDMATransfer>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00b      	beq.n	8003c76 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c62:	e008      	b.n	8003c76 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003c72:	2301      	movs	r3, #1
 8003c74:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d10e      	bne.n	8003c9a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c80:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c8c:	f043 0202 	orr.w	r2, r3, #2
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f843 	bl	8003d20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2210      	movs	r2, #16
 8003ca0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d018      	beq.n	8003cde <HAL_ADC_IRQHandler+0x45a>
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d013      	beq.n	8003cde <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cba:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cc6:	f043 0208 	orr.w	r2, r3, #8
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cd6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 fe1d 	bl	8004918 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003cde:	bf00      	nop
 8003ce0:	3728      	adds	r7, #40	@ 0x28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40022000 	.word	0x40022000
 8003cec:	40022100 	.word	0x40022100
 8003cf0:	40022300 	.word	0x40022300
 8003cf4:	58026300 	.word	0x58026300

08003cf8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d34:	b590      	push	{r4, r7, lr}
 8003d36:	b0a5      	sub	sp, #148	@ 0x94
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d4e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4aa4      	ldr	r2, [pc, #656]	@ (8003fe8 <HAL_ADC_ConfigChannel+0x2b4>)
 8003d56:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d102      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x34>
 8003d62:	2302      	movs	r3, #2
 8003d64:	f000 bca2 	b.w	80046ac <HAL_ADC_ConfigChannel+0x978>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff fb56 	bl	8003426 <LL_ADC_REG_IsConversionOngoing>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f040 8486 	bne.w	800468e <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	db31      	blt.n	8003dee <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a97      	ldr	r2, [pc, #604]	@ (8003fec <HAL_ADC_ConfigChannel+0x2b8>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d02c      	beq.n	8003dee <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d108      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x7e>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	0e9b      	lsrs	r3, r3, #26
 8003da6:	f003 031f 	and.w	r3, r3, #31
 8003daa:	2201      	movs	r2, #1
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	e016      	b.n	8003de0 <HAL_ADC_ConfigChannel+0xac>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dba:	fa93 f3a3 	rbit	r3, r3
 8003dbe:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003dc0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dc2:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003dc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8003dca:	2320      	movs	r3, #32
 8003dcc:	e003      	b.n	8003dd6 <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8003dce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dd0:	fab3 f383 	clz	r3, r3
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	2201      	movs	r2, #1
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	69d1      	ldr	r1, [r2, #28]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6812      	ldr	r2, [r2, #0]
 8003dea:	430b      	orrs	r3, r1
 8003dec:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6859      	ldr	r1, [r3, #4]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	f7ff f9eb 	bl	80031d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff fb0e 	bl	8003426 <LL_ADC_REG_IsConversionOngoing>
 8003e0a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff fb1a 	bl	800344c <LL_ADC_INJ_IsConversionOngoing>
 8003e18:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f040 824a 	bne.w	80042ba <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e26:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f040 8245 	bne.w	80042ba <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	6819      	ldr	r1, [r3, #0]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f7ff fa09 	bl	8003254 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a69      	ldr	r2, [pc, #420]	@ (8003fec <HAL_ADC_ConfigChannel+0x2b8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d10d      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	695a      	ldr	r2, [r3, #20]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	08db      	lsrs	r3, r3, #3
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e66:	e032      	b.n	8003ece <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e68:	4b61      	ldr	r3, [pc, #388]	@ (8003ff0 <HAL_ADC_ConfigChannel+0x2bc>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003e70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e74:	d10b      	bne.n	8003e8e <HAL_ADC_ConfigChannel+0x15a>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	695a      	ldr	r2, [r3, #20]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	089b      	lsrs	r3, r3, #2
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	e01d      	b.n	8003eca <HAL_ADC_ConfigChannel+0x196>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10b      	bne.n	8003eb4 <HAL_ADC_ConfigChannel+0x180>
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	089b      	lsrs	r3, r3, #2
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	e00a      	b.n	8003eca <HAL_ADC_ConfigChannel+0x196>
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	695a      	ldr	r2, [r3, #20]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	089b      	lsrs	r3, r3, #2
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d048      	beq.n	8003f68 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	6919      	ldr	r1, [r3, #16]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ee6:	f7ff f871 	bl	8002fcc <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a3f      	ldr	r2, [pc, #252]	@ (8003fec <HAL_ADC_ConfigChannel+0x2b8>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d119      	bne.n	8003f28 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6818      	ldr	r0, [r3, #0]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	6919      	ldr	r1, [r3, #16]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	461a      	mov	r2, r3
 8003f02:	f7ff f909 	bl	8003118 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	6919      	ldr	r1, [r3, #16]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d102      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x1ea>
 8003f18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f1c:	e000      	b.n	8003f20 <HAL_ADC_ConfigChannel+0x1ec>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	461a      	mov	r2, r3
 8003f22:	f7ff f8d7 	bl	80030d4 <LL_ADC_SetOffsetSaturation>
 8003f26:	e1c8      	b.n	80042ba <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	6919      	ldr	r1, [r3, #16]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d102      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x20c>
 8003f3a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003f3e:	e000      	b.n	8003f42 <HAL_ADC_ConfigChannel+0x20e>
 8003f40:	2300      	movs	r3, #0
 8003f42:	461a      	mov	r2, r3
 8003f44:	f7ff f8a4 	bl	8003090 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6818      	ldr	r0, [r3, #0]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	6919      	ldr	r1, [r3, #16]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	7e1b      	ldrb	r3, [r3, #24]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d102      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x22a>
 8003f58:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f5c:	e000      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x22c>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	461a      	mov	r2, r3
 8003f62:	f7ff f87b 	bl	800305c <LL_ADC_SetDataRightShift>
 8003f66:	e1a8      	b.n	80042ba <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003fec <HAL_ADC_ConfigChannel+0x2b8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	f040 815b 	bne.w	800422a <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2100      	movs	r1, #0
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff f858 	bl	8003030 <LL_ADC_GetOffsetChannel>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x26c>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff f84d 	bl	8003030 <LL_ADC_GetOffsetChannel>
 8003f96:	4603      	mov	r3, r0
 8003f98:	0e9b      	lsrs	r3, r3, #26
 8003f9a:	f003 021f 	and.w	r2, r3, #31
 8003f9e:	e017      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x29c>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff f842 	bl	8003030 <LL_ADC_GetOffsetChannel>
 8003fac:	4603      	mov	r3, r0
 8003fae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fb2:	fa93 f3a3 	rbit	r3, r3
 8003fb6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003fb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003fc2:	2320      	movs	r3, #32
 8003fc4:	e003      	b.n	8003fce <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8003fc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fc8:	fab3 f383 	clz	r3, r3
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10b      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x2c0>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	0e9b      	lsrs	r3, r3, #26
 8003fe2:	f003 031f 	and.w	r3, r3, #31
 8003fe6:	e017      	b.n	8004018 <HAL_ADC_ConfigChannel+0x2e4>
 8003fe8:	47ff0000 	.word	0x47ff0000
 8003fec:	58026000 	.word	0x58026000
 8003ff0:	5c001000 	.word	0x5c001000
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ffc:	fa93 f3a3 	rbit	r3, r3
 8004000:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004002:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004004:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004006:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800400c:	2320      	movs	r3, #32
 800400e:	e003      	b.n	8004018 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8004010:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	429a      	cmp	r2, r3
 800401a:	d106      	bne.n	800402a <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2200      	movs	r2, #0
 8004022:	2100      	movs	r1, #0
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff f899 	bl	800315c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2101      	movs	r1, #1
 8004030:	4618      	mov	r0, r3
 8004032:	f7fe fffd 	bl	8003030 <LL_ADC_GetOffsetChannel>
 8004036:	4603      	mov	r3, r0
 8004038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <HAL_ADC_ConfigChannel+0x322>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2101      	movs	r1, #1
 8004046:	4618      	mov	r0, r3
 8004048:	f7fe fff2 	bl	8003030 <LL_ADC_GetOffsetChannel>
 800404c:	4603      	mov	r3, r0
 800404e:	0e9b      	lsrs	r3, r3, #26
 8004050:	f003 021f 	and.w	r2, r3, #31
 8004054:	e017      	b.n	8004086 <HAL_ADC_ConfigChannel+0x352>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2101      	movs	r1, #1
 800405c:	4618      	mov	r0, r3
 800405e:	f7fe ffe7 	bl	8003030 <LL_ADC_GetOffsetChannel>
 8004062:	4603      	mov	r3, r0
 8004064:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004068:	fa93 f3a3 	rbit	r3, r3
 800406c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800406e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004070:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8004078:	2320      	movs	r3, #32
 800407a:	e003      	b.n	8004084 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 800407c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800407e:	fab3 f383 	clz	r3, r3
 8004082:	b2db      	uxtb	r3, r3
 8004084:	461a      	mov	r2, r3
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800408e:	2b00      	cmp	r3, #0
 8004090:	d105      	bne.n	800409e <HAL_ADC_ConfigChannel+0x36a>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	0e9b      	lsrs	r3, r3, #26
 8004098:	f003 031f 	and.w	r3, r3, #31
 800409c:	e011      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x38e>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040a6:	fa93 f3a3 	rbit	r3, r3
 80040aa:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80040ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80040b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80040b6:	2320      	movs	r3, #32
 80040b8:	e003      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80040ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040bc:	fab3 f383 	clz	r3, r3
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d106      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2200      	movs	r2, #0
 80040cc:	2101      	movs	r1, #1
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff f844 	bl	800315c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2102      	movs	r1, #2
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fe ffa8 	bl	8003030 <LL_ADC_GetOffsetChannel>
 80040e0:	4603      	mov	r3, r0
 80040e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10a      	bne.n	8004100 <HAL_ADC_ConfigChannel+0x3cc>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2102      	movs	r1, #2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fe ff9d 	bl	8003030 <LL_ADC_GetOffsetChannel>
 80040f6:	4603      	mov	r3, r0
 80040f8:	0e9b      	lsrs	r3, r3, #26
 80040fa:	f003 021f 	and.w	r2, r3, #31
 80040fe:	e017      	b.n	8004130 <HAL_ADC_ConfigChannel+0x3fc>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2102      	movs	r1, #2
 8004106:	4618      	mov	r0, r3
 8004108:	f7fe ff92 	bl	8003030 <LL_ADC_GetOffsetChannel>
 800410c:	4603      	mov	r3, r0
 800410e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004112:	fa93 f3a3 	rbit	r3, r3
 8004116:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800411a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800411c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8004122:	2320      	movs	r3, #32
 8004124:	e003      	b.n	800412e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8004126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004128:	fab3 f383 	clz	r3, r3
 800412c:	b2db      	uxtb	r3, r3
 800412e:	461a      	mov	r2, r3
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004138:	2b00      	cmp	r3, #0
 800413a:	d105      	bne.n	8004148 <HAL_ADC_ConfigChannel+0x414>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	0e9b      	lsrs	r3, r3, #26
 8004142:	f003 031f 	and.w	r3, r3, #31
 8004146:	e011      	b.n	800416c <HAL_ADC_ConfigChannel+0x438>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004150:	fa93 f3a3 	rbit	r3, r3
 8004154:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004158:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800415a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8004160:	2320      	movs	r3, #32
 8004162:	e003      	b.n	800416c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8004164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004166:	fab3 f383 	clz	r3, r3
 800416a:	b2db      	uxtb	r3, r3
 800416c:	429a      	cmp	r2, r3
 800416e:	d106      	bne.n	800417e <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2200      	movs	r2, #0
 8004176:	2102      	movs	r1, #2
 8004178:	4618      	mov	r0, r3
 800417a:	f7fe ffef 	bl	800315c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2103      	movs	r1, #3
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe ff53 	bl	8003030 <LL_ADC_GetOffsetChannel>
 800418a:	4603      	mov	r3, r0
 800418c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <HAL_ADC_ConfigChannel+0x476>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2103      	movs	r1, #3
 800419a:	4618      	mov	r0, r3
 800419c:	f7fe ff48 	bl	8003030 <LL_ADC_GetOffsetChannel>
 80041a0:	4603      	mov	r3, r0
 80041a2:	0e9b      	lsrs	r3, r3, #26
 80041a4:	f003 021f 	and.w	r2, r3, #31
 80041a8:	e017      	b.n	80041da <HAL_ADC_ConfigChannel+0x4a6>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2103      	movs	r1, #3
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fe ff3d 	bl	8003030 <LL_ADC_GetOffsetChannel>
 80041b6:	4603      	mov	r3, r0
 80041b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	fa93 f3a3 	rbit	r3, r3
 80041c0:	61fb      	str	r3, [r7, #28]
  return result;
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80041cc:	2320      	movs	r3, #32
 80041ce:	e003      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	fab3 f383 	clz	r3, r3
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	461a      	mov	r2, r3
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d105      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x4be>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	0e9b      	lsrs	r3, r3, #26
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	e011      	b.n	8004216 <HAL_ADC_ConfigChannel+0x4e2>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	fa93 f3a3 	rbit	r3, r3
 80041fe:	613b      	str	r3, [r7, #16]
  return result;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800420a:	2320      	movs	r3, #32
 800420c:	e003      	b.n	8004216 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	fab3 f383 	clz	r3, r3
 8004214:	b2db      	uxtb	r3, r3
 8004216:	429a      	cmp	r2, r3
 8004218:	d14f      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2200      	movs	r2, #0
 8004220:	2103      	movs	r1, #3
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe ff9a 	bl	800315c <LL_ADC_SetOffsetState>
 8004228:	e047      	b.n	80042ba <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004230:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	069b      	lsls	r3, r3, #26
 800423a:	429a      	cmp	r2, r3
 800423c:	d107      	bne.n	800424e <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800424c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004254:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	069b      	lsls	r3, r3, #26
 800425e:	429a      	cmp	r2, r3
 8004260:	d107      	bne.n	8004272 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004270:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004278:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	069b      	lsls	r3, r3, #26
 8004282:	429a      	cmp	r2, r3
 8004284:	d107      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004294:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800429c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	069b      	lsls	r3, r3, #26
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d107      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80042b8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff f89e 	bl	8003400 <LL_ADC_IsEnabled>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f040 81ea 	bne.w	80046a0 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	6819      	ldr	r1, [r3, #0]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	461a      	mov	r2, r3
 80042da:	f7fe ffe7 	bl	80032ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	4a7a      	ldr	r2, [pc, #488]	@ (80044cc <HAL_ADC_ConfigChannel+0x798>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	f040 80e0 	bne.w	80044aa <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4977      	ldr	r1, [pc, #476]	@ (80044d0 <HAL_ADC_ConfigChannel+0x79c>)
 80042f4:	428b      	cmp	r3, r1
 80042f6:	d147      	bne.n	8004388 <HAL_ADC_ConfigChannel+0x654>
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4975      	ldr	r1, [pc, #468]	@ (80044d4 <HAL_ADC_ConfigChannel+0x7a0>)
 80042fe:	428b      	cmp	r3, r1
 8004300:	d040      	beq.n	8004384 <HAL_ADC_ConfigChannel+0x650>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4974      	ldr	r1, [pc, #464]	@ (80044d8 <HAL_ADC_ConfigChannel+0x7a4>)
 8004308:	428b      	cmp	r3, r1
 800430a:	d039      	beq.n	8004380 <HAL_ADC_ConfigChannel+0x64c>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4972      	ldr	r1, [pc, #456]	@ (80044dc <HAL_ADC_ConfigChannel+0x7a8>)
 8004312:	428b      	cmp	r3, r1
 8004314:	d032      	beq.n	800437c <HAL_ADC_ConfigChannel+0x648>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4971      	ldr	r1, [pc, #452]	@ (80044e0 <HAL_ADC_ConfigChannel+0x7ac>)
 800431c:	428b      	cmp	r3, r1
 800431e:	d02b      	beq.n	8004378 <HAL_ADC_ConfigChannel+0x644>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	496f      	ldr	r1, [pc, #444]	@ (80044e4 <HAL_ADC_ConfigChannel+0x7b0>)
 8004326:	428b      	cmp	r3, r1
 8004328:	d024      	beq.n	8004374 <HAL_ADC_ConfigChannel+0x640>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	496e      	ldr	r1, [pc, #440]	@ (80044e8 <HAL_ADC_ConfigChannel+0x7b4>)
 8004330:	428b      	cmp	r3, r1
 8004332:	d01d      	beq.n	8004370 <HAL_ADC_ConfigChannel+0x63c>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	496c      	ldr	r1, [pc, #432]	@ (80044ec <HAL_ADC_ConfigChannel+0x7b8>)
 800433a:	428b      	cmp	r3, r1
 800433c:	d016      	beq.n	800436c <HAL_ADC_ConfigChannel+0x638>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	496b      	ldr	r1, [pc, #428]	@ (80044f0 <HAL_ADC_ConfigChannel+0x7bc>)
 8004344:	428b      	cmp	r3, r1
 8004346:	d00f      	beq.n	8004368 <HAL_ADC_ConfigChannel+0x634>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4969      	ldr	r1, [pc, #420]	@ (80044f4 <HAL_ADC_ConfigChannel+0x7c0>)
 800434e:	428b      	cmp	r3, r1
 8004350:	d008      	beq.n	8004364 <HAL_ADC_ConfigChannel+0x630>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4968      	ldr	r1, [pc, #416]	@ (80044f8 <HAL_ADC_ConfigChannel+0x7c4>)
 8004358:	428b      	cmp	r3, r1
 800435a:	d101      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x62c>
 800435c:	4b67      	ldr	r3, [pc, #412]	@ (80044fc <HAL_ADC_ConfigChannel+0x7c8>)
 800435e:	e0a0      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 8004360:	2300      	movs	r3, #0
 8004362:	e09e      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 8004364:	4b66      	ldr	r3, [pc, #408]	@ (8004500 <HAL_ADC_ConfigChannel+0x7cc>)
 8004366:	e09c      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 8004368:	4b66      	ldr	r3, [pc, #408]	@ (8004504 <HAL_ADC_ConfigChannel+0x7d0>)
 800436a:	e09a      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 800436c:	4b60      	ldr	r3, [pc, #384]	@ (80044f0 <HAL_ADC_ConfigChannel+0x7bc>)
 800436e:	e098      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 8004370:	4b5e      	ldr	r3, [pc, #376]	@ (80044ec <HAL_ADC_ConfigChannel+0x7b8>)
 8004372:	e096      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 8004374:	4b64      	ldr	r3, [pc, #400]	@ (8004508 <HAL_ADC_ConfigChannel+0x7d4>)
 8004376:	e094      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 8004378:	4b64      	ldr	r3, [pc, #400]	@ (800450c <HAL_ADC_ConfigChannel+0x7d8>)
 800437a:	e092      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 800437c:	4b64      	ldr	r3, [pc, #400]	@ (8004510 <HAL_ADC_ConfigChannel+0x7dc>)
 800437e:	e090      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 8004380:	4b64      	ldr	r3, [pc, #400]	@ (8004514 <HAL_ADC_ConfigChannel+0x7e0>)
 8004382:	e08e      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 8004384:	2301      	movs	r3, #1
 8004386:	e08c      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4962      	ldr	r1, [pc, #392]	@ (8004518 <HAL_ADC_ConfigChannel+0x7e4>)
 800438e:	428b      	cmp	r3, r1
 8004390:	d140      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x6e0>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	494f      	ldr	r1, [pc, #316]	@ (80044d4 <HAL_ADC_ConfigChannel+0x7a0>)
 8004398:	428b      	cmp	r3, r1
 800439a:	d039      	beq.n	8004410 <HAL_ADC_ConfigChannel+0x6dc>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	494d      	ldr	r1, [pc, #308]	@ (80044d8 <HAL_ADC_ConfigChannel+0x7a4>)
 80043a2:	428b      	cmp	r3, r1
 80043a4:	d032      	beq.n	800440c <HAL_ADC_ConfigChannel+0x6d8>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	494c      	ldr	r1, [pc, #304]	@ (80044dc <HAL_ADC_ConfigChannel+0x7a8>)
 80043ac:	428b      	cmp	r3, r1
 80043ae:	d02b      	beq.n	8004408 <HAL_ADC_ConfigChannel+0x6d4>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	494a      	ldr	r1, [pc, #296]	@ (80044e0 <HAL_ADC_ConfigChannel+0x7ac>)
 80043b6:	428b      	cmp	r3, r1
 80043b8:	d024      	beq.n	8004404 <HAL_ADC_ConfigChannel+0x6d0>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4949      	ldr	r1, [pc, #292]	@ (80044e4 <HAL_ADC_ConfigChannel+0x7b0>)
 80043c0:	428b      	cmp	r3, r1
 80043c2:	d01d      	beq.n	8004400 <HAL_ADC_ConfigChannel+0x6cc>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4947      	ldr	r1, [pc, #284]	@ (80044e8 <HAL_ADC_ConfigChannel+0x7b4>)
 80043ca:	428b      	cmp	r3, r1
 80043cc:	d016      	beq.n	80043fc <HAL_ADC_ConfigChannel+0x6c8>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4946      	ldr	r1, [pc, #280]	@ (80044ec <HAL_ADC_ConfigChannel+0x7b8>)
 80043d4:	428b      	cmp	r3, r1
 80043d6:	d00f      	beq.n	80043f8 <HAL_ADC_ConfigChannel+0x6c4>
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4944      	ldr	r1, [pc, #272]	@ (80044f0 <HAL_ADC_ConfigChannel+0x7bc>)
 80043de:	428b      	cmp	r3, r1
 80043e0:	d008      	beq.n	80043f4 <HAL_ADC_ConfigChannel+0x6c0>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4944      	ldr	r1, [pc, #272]	@ (80044f8 <HAL_ADC_ConfigChannel+0x7c4>)
 80043e8:	428b      	cmp	r3, r1
 80043ea:	d101      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x6bc>
 80043ec:	4b43      	ldr	r3, [pc, #268]	@ (80044fc <HAL_ADC_ConfigChannel+0x7c8>)
 80043ee:	e058      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 80043f0:	2300      	movs	r3, #0
 80043f2:	e056      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 80043f4:	4b43      	ldr	r3, [pc, #268]	@ (8004504 <HAL_ADC_ConfigChannel+0x7d0>)
 80043f6:	e054      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 80043f8:	4b3d      	ldr	r3, [pc, #244]	@ (80044f0 <HAL_ADC_ConfigChannel+0x7bc>)
 80043fa:	e052      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 80043fc:	4b3b      	ldr	r3, [pc, #236]	@ (80044ec <HAL_ADC_ConfigChannel+0x7b8>)
 80043fe:	e050      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 8004400:	4b41      	ldr	r3, [pc, #260]	@ (8004508 <HAL_ADC_ConfigChannel+0x7d4>)
 8004402:	e04e      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 8004404:	4b41      	ldr	r3, [pc, #260]	@ (800450c <HAL_ADC_ConfigChannel+0x7d8>)
 8004406:	e04c      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 8004408:	4b41      	ldr	r3, [pc, #260]	@ (8004510 <HAL_ADC_ConfigChannel+0x7dc>)
 800440a:	e04a      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 800440c:	4b41      	ldr	r3, [pc, #260]	@ (8004514 <HAL_ADC_ConfigChannel+0x7e0>)
 800440e:	e048      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 8004410:	2301      	movs	r3, #1
 8004412:	e046      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4940      	ldr	r1, [pc, #256]	@ (800451c <HAL_ADC_ConfigChannel+0x7e8>)
 800441a:	428b      	cmp	r3, r1
 800441c:	d140      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x76c>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	492c      	ldr	r1, [pc, #176]	@ (80044d4 <HAL_ADC_ConfigChannel+0x7a0>)
 8004424:	428b      	cmp	r3, r1
 8004426:	d039      	beq.n	800449c <HAL_ADC_ConfigChannel+0x768>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	492a      	ldr	r1, [pc, #168]	@ (80044d8 <HAL_ADC_ConfigChannel+0x7a4>)
 800442e:	428b      	cmp	r3, r1
 8004430:	d032      	beq.n	8004498 <HAL_ADC_ConfigChannel+0x764>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4929      	ldr	r1, [pc, #164]	@ (80044dc <HAL_ADC_ConfigChannel+0x7a8>)
 8004438:	428b      	cmp	r3, r1
 800443a:	d02b      	beq.n	8004494 <HAL_ADC_ConfigChannel+0x760>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4927      	ldr	r1, [pc, #156]	@ (80044e0 <HAL_ADC_ConfigChannel+0x7ac>)
 8004442:	428b      	cmp	r3, r1
 8004444:	d024      	beq.n	8004490 <HAL_ADC_ConfigChannel+0x75c>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4926      	ldr	r1, [pc, #152]	@ (80044e4 <HAL_ADC_ConfigChannel+0x7b0>)
 800444c:	428b      	cmp	r3, r1
 800444e:	d01d      	beq.n	800448c <HAL_ADC_ConfigChannel+0x758>
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4924      	ldr	r1, [pc, #144]	@ (80044e8 <HAL_ADC_ConfigChannel+0x7b4>)
 8004456:	428b      	cmp	r3, r1
 8004458:	d016      	beq.n	8004488 <HAL_ADC_ConfigChannel+0x754>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4923      	ldr	r1, [pc, #140]	@ (80044ec <HAL_ADC_ConfigChannel+0x7b8>)
 8004460:	428b      	cmp	r3, r1
 8004462:	d00f      	beq.n	8004484 <HAL_ADC_ConfigChannel+0x750>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4926      	ldr	r1, [pc, #152]	@ (8004504 <HAL_ADC_ConfigChannel+0x7d0>)
 800446a:	428b      	cmp	r3, r1
 800446c:	d008      	beq.n	8004480 <HAL_ADC_ConfigChannel+0x74c>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	492b      	ldr	r1, [pc, #172]	@ (8004520 <HAL_ADC_ConfigChannel+0x7ec>)
 8004474:	428b      	cmp	r3, r1
 8004476:	d101      	bne.n	800447c <HAL_ADC_ConfigChannel+0x748>
 8004478:	4b2a      	ldr	r3, [pc, #168]	@ (8004524 <HAL_ADC_ConfigChannel+0x7f0>)
 800447a:	e012      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 800447c:	2300      	movs	r3, #0
 800447e:	e010      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 8004480:	4b27      	ldr	r3, [pc, #156]	@ (8004520 <HAL_ADC_ConfigChannel+0x7ec>)
 8004482:	e00e      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 8004484:	4b1a      	ldr	r3, [pc, #104]	@ (80044f0 <HAL_ADC_ConfigChannel+0x7bc>)
 8004486:	e00c      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 8004488:	4b18      	ldr	r3, [pc, #96]	@ (80044ec <HAL_ADC_ConfigChannel+0x7b8>)
 800448a:	e00a      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 800448c:	4b1e      	ldr	r3, [pc, #120]	@ (8004508 <HAL_ADC_ConfigChannel+0x7d4>)
 800448e:	e008      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 8004490:	4b1e      	ldr	r3, [pc, #120]	@ (800450c <HAL_ADC_ConfigChannel+0x7d8>)
 8004492:	e006      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 8004494:	4b1e      	ldr	r3, [pc, #120]	@ (8004510 <HAL_ADC_ConfigChannel+0x7dc>)
 8004496:	e004      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 8004498:	4b1e      	ldr	r3, [pc, #120]	@ (8004514 <HAL_ADC_ConfigChannel+0x7e0>)
 800449a:	e002      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x76e>
 80044a0:	2300      	movs	r3, #0
 80044a2:	4619      	mov	r1, r3
 80044a4:	4610      	mov	r0, r2
 80044a6:	f7fe fd57 	bl	8002f58 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f280 80f6 	bge.w	80046a0 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a05      	ldr	r2, [pc, #20]	@ (80044d0 <HAL_ADC_ConfigChannel+0x79c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d004      	beq.n	80044c8 <HAL_ADC_ConfigChannel+0x794>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a15      	ldr	r2, [pc, #84]	@ (8004518 <HAL_ADC_ConfigChannel+0x7e4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d131      	bne.n	800452c <HAL_ADC_ConfigChannel+0x7f8>
 80044c8:	4b17      	ldr	r3, [pc, #92]	@ (8004528 <HAL_ADC_ConfigChannel+0x7f4>)
 80044ca:	e030      	b.n	800452e <HAL_ADC_ConfigChannel+0x7fa>
 80044cc:	47ff0000 	.word	0x47ff0000
 80044d0:	40022000 	.word	0x40022000
 80044d4:	04300002 	.word	0x04300002
 80044d8:	08600004 	.word	0x08600004
 80044dc:	0c900008 	.word	0x0c900008
 80044e0:	10c00010 	.word	0x10c00010
 80044e4:	14f00020 	.word	0x14f00020
 80044e8:	2a000400 	.word	0x2a000400
 80044ec:	2e300800 	.word	0x2e300800
 80044f0:	32601000 	.word	0x32601000
 80044f4:	43210000 	.word	0x43210000
 80044f8:	4b840000 	.word	0x4b840000
 80044fc:	4fb80000 	.word	0x4fb80000
 8004500:	47520000 	.word	0x47520000
 8004504:	36902000 	.word	0x36902000
 8004508:	25b00200 	.word	0x25b00200
 800450c:	21800100 	.word	0x21800100
 8004510:	1d500080 	.word	0x1d500080
 8004514:	19200040 	.word	0x19200040
 8004518:	40022100 	.word	0x40022100
 800451c:	58026000 	.word	0x58026000
 8004520:	3ac04000 	.word	0x3ac04000
 8004524:	3ef08000 	.word	0x3ef08000
 8004528:	40022300 	.word	0x40022300
 800452c:	4b61      	ldr	r3, [pc, #388]	@ (80046b4 <HAL_ADC_ConfigChannel+0x980>)
 800452e:	4618      	mov	r0, r3
 8004530:	f7fe fd04 	bl	8002f3c <LL_ADC_GetCommonPathInternalCh>
 8004534:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a5f      	ldr	r2, [pc, #380]	@ (80046b8 <HAL_ADC_ConfigChannel+0x984>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d004      	beq.n	800454a <HAL_ADC_ConfigChannel+0x816>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a5d      	ldr	r2, [pc, #372]	@ (80046bc <HAL_ADC_ConfigChannel+0x988>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d10e      	bne.n	8004568 <HAL_ADC_ConfigChannel+0x834>
 800454a:	485b      	ldr	r0, [pc, #364]	@ (80046b8 <HAL_ADC_ConfigChannel+0x984>)
 800454c:	f7fe ff58 	bl	8003400 <LL_ADC_IsEnabled>
 8004550:	4604      	mov	r4, r0
 8004552:	485a      	ldr	r0, [pc, #360]	@ (80046bc <HAL_ADC_ConfigChannel+0x988>)
 8004554:	f7fe ff54 	bl	8003400 <LL_ADC_IsEnabled>
 8004558:	4603      	mov	r3, r0
 800455a:	4323      	orrs	r3, r4
 800455c:	2b00      	cmp	r3, #0
 800455e:	bf0c      	ite	eq
 8004560:	2301      	moveq	r3, #1
 8004562:	2300      	movne	r3, #0
 8004564:	b2db      	uxtb	r3, r3
 8004566:	e008      	b.n	800457a <HAL_ADC_ConfigChannel+0x846>
 8004568:	4855      	ldr	r0, [pc, #340]	@ (80046c0 <HAL_ADC_ConfigChannel+0x98c>)
 800456a:	f7fe ff49 	bl	8003400 <LL_ADC_IsEnabled>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	bf0c      	ite	eq
 8004574:	2301      	moveq	r3, #1
 8004576:	2300      	movne	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d07d      	beq.n	800467a <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a50      	ldr	r2, [pc, #320]	@ (80046c4 <HAL_ADC_ConfigChannel+0x990>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d130      	bne.n	80045ea <HAL_ADC_ConfigChannel+0x8b6>
 8004588:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800458a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d12b      	bne.n	80045ea <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a4a      	ldr	r2, [pc, #296]	@ (80046c0 <HAL_ADC_ConfigChannel+0x98c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	f040 8081 	bne.w	80046a0 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a45      	ldr	r2, [pc, #276]	@ (80046b8 <HAL_ADC_ConfigChannel+0x984>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d004      	beq.n	80045b2 <HAL_ADC_ConfigChannel+0x87e>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a43      	ldr	r2, [pc, #268]	@ (80046bc <HAL_ADC_ConfigChannel+0x988>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d101      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x882>
 80045b2:	4a45      	ldr	r2, [pc, #276]	@ (80046c8 <HAL_ADC_ConfigChannel+0x994>)
 80045b4:	e000      	b.n	80045b8 <HAL_ADC_ConfigChannel+0x884>
 80045b6:	4a3f      	ldr	r2, [pc, #252]	@ (80046b4 <HAL_ADC_ConfigChannel+0x980>)
 80045b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045be:	4619      	mov	r1, r3
 80045c0:	4610      	mov	r0, r2
 80045c2:	f7fe fca8 	bl	8002f16 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045c6:	4b41      	ldr	r3, [pc, #260]	@ (80046cc <HAL_ADC_ConfigChannel+0x998>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	099b      	lsrs	r3, r3, #6
 80045cc:	4a40      	ldr	r2, [pc, #256]	@ (80046d0 <HAL_ADC_ConfigChannel+0x99c>)
 80045ce:	fba2 2303 	umull	r2, r3, r2, r3
 80045d2:	099b      	lsrs	r3, r3, #6
 80045d4:	3301      	adds	r3, #1
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80045da:	e002      	b.n	80045e2 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3b01      	subs	r3, #1
 80045e0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f9      	bne.n	80045dc <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045e8:	e05a      	b.n	80046a0 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a39      	ldr	r2, [pc, #228]	@ (80046d4 <HAL_ADC_ConfigChannel+0x9a0>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d11e      	bne.n	8004632 <HAL_ADC_ConfigChannel+0x8fe>
 80045f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d119      	bne.n	8004632 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a2f      	ldr	r2, [pc, #188]	@ (80046c0 <HAL_ADC_ConfigChannel+0x98c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d14b      	bne.n	80046a0 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a2a      	ldr	r2, [pc, #168]	@ (80046b8 <HAL_ADC_ConfigChannel+0x984>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d004      	beq.n	800461c <HAL_ADC_ConfigChannel+0x8e8>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a29      	ldr	r2, [pc, #164]	@ (80046bc <HAL_ADC_ConfigChannel+0x988>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d101      	bne.n	8004620 <HAL_ADC_ConfigChannel+0x8ec>
 800461c:	4a2a      	ldr	r2, [pc, #168]	@ (80046c8 <HAL_ADC_ConfigChannel+0x994>)
 800461e:	e000      	b.n	8004622 <HAL_ADC_ConfigChannel+0x8ee>
 8004620:	4a24      	ldr	r2, [pc, #144]	@ (80046b4 <HAL_ADC_ConfigChannel+0x980>)
 8004622:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004624:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004628:	4619      	mov	r1, r3
 800462a:	4610      	mov	r0, r2
 800462c:	f7fe fc73 	bl	8002f16 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004630:	e036      	b.n	80046a0 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a28      	ldr	r2, [pc, #160]	@ (80046d8 <HAL_ADC_ConfigChannel+0x9a4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d131      	bne.n	80046a0 <HAL_ADC_ConfigChannel+0x96c>
 800463c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800463e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d12c      	bne.n	80046a0 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1d      	ldr	r2, [pc, #116]	@ (80046c0 <HAL_ADC_ConfigChannel+0x98c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d127      	bne.n	80046a0 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a18      	ldr	r2, [pc, #96]	@ (80046b8 <HAL_ADC_ConfigChannel+0x984>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d004      	beq.n	8004664 <HAL_ADC_ConfigChannel+0x930>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a17      	ldr	r2, [pc, #92]	@ (80046bc <HAL_ADC_ConfigChannel+0x988>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d101      	bne.n	8004668 <HAL_ADC_ConfigChannel+0x934>
 8004664:	4a18      	ldr	r2, [pc, #96]	@ (80046c8 <HAL_ADC_ConfigChannel+0x994>)
 8004666:	e000      	b.n	800466a <HAL_ADC_ConfigChannel+0x936>
 8004668:	4a12      	ldr	r2, [pc, #72]	@ (80046b4 <HAL_ADC_ConfigChannel+0x980>)
 800466a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800466c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004670:	4619      	mov	r1, r3
 8004672:	4610      	mov	r0, r2
 8004674:	f7fe fc4f 	bl	8002f16 <LL_ADC_SetCommonPathInternalCh>
 8004678:	e012      	b.n	80046a0 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800467e:	f043 0220 	orr.w	r2, r3, #32
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800468c:	e008      	b.n	80046a0 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004692:	f043 0220 	orr.w	r2, r3, #32
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80046a8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3794      	adds	r7, #148	@ 0x94
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd90      	pop	{r4, r7, pc}
 80046b4:	58026300 	.word	0x58026300
 80046b8:	40022000 	.word	0x40022000
 80046bc:	40022100 	.word	0x40022100
 80046c0:	58026000 	.word	0x58026000
 80046c4:	c7520000 	.word	0xc7520000
 80046c8:	40022300 	.word	0x40022300
 80046cc:	24000000 	.word	0x24000000
 80046d0:	053e2d63 	.word	0x053e2d63
 80046d4:	c3210000 	.word	0xc3210000
 80046d8:	cb840000 	.word	0xcb840000

080046dc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a6c      	ldr	r2, [pc, #432]	@ (800489c <ADC_ConfigureBoostMode+0x1c0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d004      	beq.n	80046f8 <ADC_ConfigureBoostMode+0x1c>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a6b      	ldr	r2, [pc, #428]	@ (80048a0 <ADC_ConfigureBoostMode+0x1c4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d109      	bne.n	800470c <ADC_ConfigureBoostMode+0x30>
 80046f8:	4b6a      	ldr	r3, [pc, #424]	@ (80048a4 <ADC_ConfigureBoostMode+0x1c8>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004700:	2b00      	cmp	r3, #0
 8004702:	bf14      	ite	ne
 8004704:	2301      	movne	r3, #1
 8004706:	2300      	moveq	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	e008      	b.n	800471e <ADC_ConfigureBoostMode+0x42>
 800470c:	4b66      	ldr	r3, [pc, #408]	@ (80048a8 <ADC_ConfigureBoostMode+0x1cc>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004714:	2b00      	cmp	r3, #0
 8004716:	bf14      	ite	ne
 8004718:	2301      	movne	r3, #1
 800471a:	2300      	moveq	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d01c      	beq.n	800475c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004722:	f005 fd0b 	bl	800a13c <HAL_RCC_GetHCLKFreq>
 8004726:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004730:	d010      	beq.n	8004754 <ADC_ConfigureBoostMode+0x78>
 8004732:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004736:	d873      	bhi.n	8004820 <ADC_ConfigureBoostMode+0x144>
 8004738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800473c:	d002      	beq.n	8004744 <ADC_ConfigureBoostMode+0x68>
 800473e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004742:	d16d      	bne.n	8004820 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004750:	60fb      	str	r3, [r7, #12]
        break;
 8004752:	e068      	b.n	8004826 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	089b      	lsrs	r3, r3, #2
 8004758:	60fb      	str	r3, [r7, #12]
        break;
 800475a:	e064      	b.n	8004826 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800475c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004760:	f04f 0100 	mov.w	r1, #0
 8004764:	f006 fee6 	bl	800b534 <HAL_RCCEx_GetPeriphCLKFreq>
 8004768:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004772:	d051      	beq.n	8004818 <ADC_ConfigureBoostMode+0x13c>
 8004774:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004778:	d854      	bhi.n	8004824 <ADC_ConfigureBoostMode+0x148>
 800477a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800477e:	d047      	beq.n	8004810 <ADC_ConfigureBoostMode+0x134>
 8004780:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004784:	d84e      	bhi.n	8004824 <ADC_ConfigureBoostMode+0x148>
 8004786:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800478a:	d03d      	beq.n	8004808 <ADC_ConfigureBoostMode+0x12c>
 800478c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004790:	d848      	bhi.n	8004824 <ADC_ConfigureBoostMode+0x148>
 8004792:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004796:	d033      	beq.n	8004800 <ADC_ConfigureBoostMode+0x124>
 8004798:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800479c:	d842      	bhi.n	8004824 <ADC_ConfigureBoostMode+0x148>
 800479e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80047a2:	d029      	beq.n	80047f8 <ADC_ConfigureBoostMode+0x11c>
 80047a4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80047a8:	d83c      	bhi.n	8004824 <ADC_ConfigureBoostMode+0x148>
 80047aa:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80047ae:	d01a      	beq.n	80047e6 <ADC_ConfigureBoostMode+0x10a>
 80047b0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80047b4:	d836      	bhi.n	8004824 <ADC_ConfigureBoostMode+0x148>
 80047b6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80047ba:	d014      	beq.n	80047e6 <ADC_ConfigureBoostMode+0x10a>
 80047bc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80047c0:	d830      	bhi.n	8004824 <ADC_ConfigureBoostMode+0x148>
 80047c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047c6:	d00e      	beq.n	80047e6 <ADC_ConfigureBoostMode+0x10a>
 80047c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047cc:	d82a      	bhi.n	8004824 <ADC_ConfigureBoostMode+0x148>
 80047ce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047d2:	d008      	beq.n	80047e6 <ADC_ConfigureBoostMode+0x10a>
 80047d4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047d8:	d824      	bhi.n	8004824 <ADC_ConfigureBoostMode+0x148>
 80047da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047de:	d002      	beq.n	80047e6 <ADC_ConfigureBoostMode+0x10a>
 80047e0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047e4:	d11e      	bne.n	8004824 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	0c9b      	lsrs	r3, r3, #18
 80047ec:	005b      	lsls	r3, r3, #1
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f4:	60fb      	str	r3, [r7, #12]
        break;
 80047f6:	e016      	b.n	8004826 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	091b      	lsrs	r3, r3, #4
 80047fc:	60fb      	str	r3, [r7, #12]
        break;
 80047fe:	e012      	b.n	8004826 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	60fb      	str	r3, [r7, #12]
        break;
 8004806:	e00e      	b.n	8004826 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	099b      	lsrs	r3, r3, #6
 800480c:	60fb      	str	r3, [r7, #12]
        break;
 800480e:	e00a      	b.n	8004826 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	09db      	lsrs	r3, r3, #7
 8004814:	60fb      	str	r3, [r7, #12]
        break;
 8004816:	e006      	b.n	8004826 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	0a1b      	lsrs	r3, r3, #8
 800481c:	60fb      	str	r3, [r7, #12]
        break;
 800481e:	e002      	b.n	8004826 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004820:	bf00      	nop
 8004822:	e000      	b.n	8004826 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004824:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	085b      	lsrs	r3, r3, #1
 800482a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4a1f      	ldr	r2, [pc, #124]	@ (80048ac <ADC_ConfigureBoostMode+0x1d0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d808      	bhi.n	8004846 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004842:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004844:	e025      	b.n	8004892 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4a19      	ldr	r2, [pc, #100]	@ (80048b0 <ADC_ConfigureBoostMode+0x1d4>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d80a      	bhi.n	8004864 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004860:	609a      	str	r2, [r3, #8]
}
 8004862:	e016      	b.n	8004892 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4a13      	ldr	r2, [pc, #76]	@ (80048b4 <ADC_ConfigureBoostMode+0x1d8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d80a      	bhi.n	8004882 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800487e:	609a      	str	r2, [r3, #8]
}
 8004880:	e007      	b.n	8004892 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004890:	609a      	str	r2, [r3, #8]
}
 8004892:	bf00      	nop
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40022000 	.word	0x40022000
 80048a0:	40022100 	.word	0x40022100
 80048a4:	40022300 	.word	0x40022300
 80048a8:	58026300 	.word	0x58026300
 80048ac:	005f5e10 	.word	0x005f5e10
 80048b0:	00bebc20 	.word	0x00bebc20
 80048b4:	017d7840 	.word	0x017d7840

080048b8 <LL_ADC_IsEnabled>:
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <LL_ADC_IsEnabled+0x18>
 80048cc:	2301      	movs	r3, #1
 80048ce:	e000      	b.n	80048d2 <LL_ADC_IsEnabled+0x1a>
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <LL_ADC_REG_IsConversionOngoing>:
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d101      	bne.n	80048f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004968:	b590      	push	{r4, r7, lr}
 800496a:	b0a3      	sub	sp, #140	@ 0x8c
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004982:	2302      	movs	r3, #2
 8004984:	e0c1      	b.n	8004b0a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800498e:	2300      	movs	r3, #0
 8004990:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004992:	2300      	movs	r3, #0
 8004994:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a5e      	ldr	r2, [pc, #376]	@ (8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d102      	bne.n	80049a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80049a0:	4b5d      	ldr	r3, [pc, #372]	@ (8004b18 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	e001      	b.n	80049aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10b      	bne.n	80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049b4:	f043 0220 	orr.w	r2, r3, #32
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0a0      	b.n	8004b0a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff ff87 	bl	80048de <LL_ADC_REG_IsConversionOngoing>
 80049d0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff ff80 	bl	80048de <LL_ADC_REG_IsConversionOngoing>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f040 8081 	bne.w	8004ae8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80049e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d17c      	bne.n	8004ae8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a48      	ldr	r2, [pc, #288]	@ (8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d004      	beq.n	8004a02 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a46      	ldr	r2, [pc, #280]	@ (8004b18 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d101      	bne.n	8004a06 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004a02:	4b46      	ldr	r3, [pc, #280]	@ (8004b1c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004a04:	e000      	b.n	8004a08 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004a06:	4b46      	ldr	r3, [pc, #280]	@ (8004b20 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004a08:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d039      	beq.n	8004a86 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004a12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a22:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a3a      	ldr	r2, [pc, #232]	@ (8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d004      	beq.n	8004a38 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a39      	ldr	r2, [pc, #228]	@ (8004b18 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d10e      	bne.n	8004a56 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004a38:	4836      	ldr	r0, [pc, #216]	@ (8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a3a:	f7ff ff3d 	bl	80048b8 <LL_ADC_IsEnabled>
 8004a3e:	4604      	mov	r4, r0
 8004a40:	4835      	ldr	r0, [pc, #212]	@ (8004b18 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a42:	f7ff ff39 	bl	80048b8 <LL_ADC_IsEnabled>
 8004a46:	4603      	mov	r3, r0
 8004a48:	4323      	orrs	r3, r4
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	bf0c      	ite	eq
 8004a4e:	2301      	moveq	r3, #1
 8004a50:	2300      	movne	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	e008      	b.n	8004a68 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004a56:	4833      	ldr	r0, [pc, #204]	@ (8004b24 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004a58:	f7ff ff2e 	bl	80048b8 <LL_ADC_IsEnabled>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	bf0c      	ite	eq
 8004a62:	2301      	moveq	r3, #1
 8004a64:	2300      	movne	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d047      	beq.n	8004afc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	4b2d      	ldr	r3, [pc, #180]	@ (8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	6811      	ldr	r1, [r2, #0]
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	6892      	ldr	r2, [r2, #8]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a82:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a84:	e03a      	b.n	8004afc <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004a86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a90:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a1f      	ldr	r2, [pc, #124]	@ (8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d004      	beq.n	8004aa6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b18 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d10e      	bne.n	8004ac4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004aa6:	481b      	ldr	r0, [pc, #108]	@ (8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004aa8:	f7ff ff06 	bl	80048b8 <LL_ADC_IsEnabled>
 8004aac:	4604      	mov	r4, r0
 8004aae:	481a      	ldr	r0, [pc, #104]	@ (8004b18 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ab0:	f7ff ff02 	bl	80048b8 <LL_ADC_IsEnabled>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	4323      	orrs	r3, r4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	bf0c      	ite	eq
 8004abc:	2301      	moveq	r3, #1
 8004abe:	2300      	movne	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	e008      	b.n	8004ad6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004ac4:	4817      	ldr	r0, [pc, #92]	@ (8004b24 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004ac6:	f7ff fef7 	bl	80048b8 <LL_ADC_IsEnabled>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	bf0c      	ite	eq
 8004ad0:	2301      	moveq	r3, #1
 8004ad2:	2300      	movne	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d010      	beq.n	8004afc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004ada:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	4b12      	ldr	r3, [pc, #72]	@ (8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004ae4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ae6:	e009      	b.n	8004afc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aec:	f043 0220 	orr.w	r2, r3, #32
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004afa:	e000      	b.n	8004afe <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004afc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004b06:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	378c      	adds	r7, #140	@ 0x8c
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd90      	pop	{r4, r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40022000 	.word	0x40022000
 8004b18:	40022100 	.word	0x40022100
 8004b1c:	40022300 	.word	0x40022300
 8004b20:	58026300 	.word	0x58026300
 8004b24:	58026000 	.word	0x58026000
 8004b28:	fffff0e0 	.word	0xfffff0e0

08004b2c <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e023      	b.n	8004b86 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fb ff68 	bl	8000a28 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <HAL_CORDIC_CalculateCpltCallback>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
__weak void HAL_CORDIC_CalculateCpltCallback(CORDIC_HandleTypeDef *hcordic)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  UNUSED(hcordic);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CORDIC_CalculateCpltCallback can be implemented in the user file
   */
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_CORDIC_IRQHandler>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
void HAL_CORDIC_IRQHandler(CORDIC_HandleTypeDef *hcordic)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  /* Check if calculation complete interrupt is enabled and if result ready
     flag is raised */
  if (__HAL_CORDIC_GET_IT_SOURCE(hcordic, CORDIC_IT_IEN) != 0U)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d039      	beq.n	8004c2c <HAL_CORDIC_IRQHandler+0x8a>
  {
    if (__HAL_CORDIC_GET_FLAG(hcordic, CORDIC_FLAG_RRDY) != 0U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bc6:	d101      	bne.n	8004bcc <HAL_CORDIC_IRQHandler+0x2a>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e000      	b.n	8004bce <HAL_CORDIC_IRQHandler+0x2c>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d02c      	beq.n	8004c2c <HAL_CORDIC_IRQHandler+0x8a>
    {
      /* Decrement number of calculations to get */
      hcordic->NbCalcToGet--;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	1e5a      	subs	r2, r3, #1
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	611a      	str	r2, [r3, #16]

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &(hcordic->pOutBuff));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3308      	adds	r3, #8
 8004be0:	4619      	mov	r1, r3
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f84f 	bl	8004c86 <CORDIC_ReadOutDataIncrementPtr>

      /* Check if calculations are still to be ordered */
      if (hcordic->NbCalcToOrder > 0U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00a      	beq.n	8004c06 <HAL_CORDIC_IRQHandler+0x64>
      {
        /* Decrement number of calculations to order */
        hcordic->NbCalcToOrder--;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	1e5a      	subs	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	60da      	str	r2, [r3, #12]

        /* Continue the processing by providing another write of input data
           in the Write Data register, and increment input buffer pointer */
        CORDIC_WriteInDataIncrementPtr(hcordic, &(hcordic->pInBuff));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	4619      	mov	r1, r3
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f817 	bl	8004c34 <CORDIC_WriteInDataIncrementPtr>
      }

      /* Check if all calculations results are got */
      if (hcordic->NbCalcToGet == 0U)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10e      	bne.n	8004c2c <HAL_CORDIC_IRQHandler+0x8a>
      {
        /* Disable Result Ready Interrupt */
        __HAL_CORDIC_DISABLE_IT(hcordic, CORDIC_IT_IEN);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004c1c:	601a      	str	r2, [r3, #0]

        /* Change the CORDIC state */
        hcordic->State = HAL_CORDIC_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
#if USE_HAL_CORDIC_REGISTER_CALLBACKS == 1
        /*Call registered callback*/
        hcordic->CalculateCpltCallback(hcordic);
#else
        /*Call legacy weak callback*/
        HAL_CORDIC_CalculateCpltCallback(hcordic);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7ff ffb1 	bl	8004b8e <HAL_CORDIC_CalculateCpltCallback>
#endif /* USE_HAL_CORDIC_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, const int32_t **ppInBuff)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	1d1a      	adds	r2, r3, #4
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c62:	d10a      	bne.n	8004c7a <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	1d1a      	adds	r2, r3, #4
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	601a      	str	r2, [r3, #0]
  }
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	1d1a      	adds	r2, r3, #4
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cb0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004cb4:	d10a      	bne.n	8004ccc <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	1d1a      	adds	r2, r3, #4
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	601a      	str	r2, [r3, #0]
  }
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8004d18 <__NVIC_SetPriorityGrouping+0x40>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004d00:	4b06      	ldr	r3, [pc, #24]	@ (8004d1c <__NVIC_SetPriorityGrouping+0x44>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d06:	4a04      	ldr	r2, [pc, #16]	@ (8004d18 <__NVIC_SetPriorityGrouping+0x40>)
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	60d3      	str	r3, [r2, #12]
}
 8004d0c:	bf00      	nop
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	e000ed00 	.word	0xe000ed00
 8004d1c:	05fa0000 	.word	0x05fa0000

08004d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d24:	4b04      	ldr	r3, [pc, #16]	@ (8004d38 <__NVIC_GetPriorityGrouping+0x18>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	0a1b      	lsrs	r3, r3, #8
 8004d2a:	f003 0307 	and.w	r3, r3, #7
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	e000ed00 	.word	0xe000ed00

08004d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	4603      	mov	r3, r0
 8004d44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	db0b      	blt.n	8004d66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	f003 021f 	and.w	r2, r3, #31
 8004d54:	4907      	ldr	r1, [pc, #28]	@ (8004d74 <__NVIC_EnableIRQ+0x38>)
 8004d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	2001      	movs	r0, #1
 8004d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	e000e100 	.word	0xe000e100

08004d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	4603      	mov	r3, r0
 8004d80:	6039      	str	r1, [r7, #0]
 8004d82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	db0a      	blt.n	8004da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	490c      	ldr	r1, [pc, #48]	@ (8004dc4 <__NVIC_SetPriority+0x4c>)
 8004d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d96:	0112      	lsls	r2, r2, #4
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004da0:	e00a      	b.n	8004db8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	4908      	ldr	r1, [pc, #32]	@ (8004dc8 <__NVIC_SetPriority+0x50>)
 8004da8:	88fb      	ldrh	r3, [r7, #6]
 8004daa:	f003 030f 	and.w	r3, r3, #15
 8004dae:	3b04      	subs	r3, #4
 8004db0:	0112      	lsls	r2, r2, #4
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	440b      	add	r3, r1
 8004db6:	761a      	strb	r2, [r3, #24]
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	e000e100 	.word	0xe000e100
 8004dc8:	e000ed00 	.word	0xe000ed00

08004dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b089      	sub	sp, #36	@ 0x24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	f1c3 0307 	rsb	r3, r3, #7
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	bf28      	it	cs
 8004dea:	2304      	movcs	r3, #4
 8004dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	3304      	adds	r3, #4
 8004df2:	2b06      	cmp	r3, #6
 8004df4:	d902      	bls.n	8004dfc <NVIC_EncodePriority+0x30>
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	3b03      	subs	r3, #3
 8004dfa:	e000      	b.n	8004dfe <NVIC_EncodePriority+0x32>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e00:	f04f 32ff 	mov.w	r2, #4294967295
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	43da      	mvns	r2, r3
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	401a      	ands	r2, r3
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e14:	f04f 31ff 	mov.w	r1, #4294967295
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1e:	43d9      	mvns	r1, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e24:	4313      	orrs	r3, r2
         );
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3724      	adds	r7, #36	@ 0x24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e44:	d301      	bcc.n	8004e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e46:	2301      	movs	r3, #1
 8004e48:	e00f      	b.n	8004e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e74 <SysTick_Config+0x40>)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e52:	210f      	movs	r1, #15
 8004e54:	f04f 30ff 	mov.w	r0, #4294967295
 8004e58:	f7ff ff8e 	bl	8004d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e5c:	4b05      	ldr	r3, [pc, #20]	@ (8004e74 <SysTick_Config+0x40>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e62:	4b04      	ldr	r3, [pc, #16]	@ (8004e74 <SysTick_Config+0x40>)
 8004e64:	2207      	movs	r2, #7
 8004e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	e000e010 	.word	0xe000e010

08004e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff ff29 	bl	8004cd8 <__NVIC_SetPriorityGrouping>
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b086      	sub	sp, #24
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	4603      	mov	r3, r0
 8004e96:	60b9      	str	r1, [r7, #8]
 8004e98:	607a      	str	r2, [r7, #4]
 8004e9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e9c:	f7ff ff40 	bl	8004d20 <__NVIC_GetPriorityGrouping>
 8004ea0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	6978      	ldr	r0, [r7, #20]
 8004ea8:	f7ff ff90 	bl	8004dcc <NVIC_EncodePriority>
 8004eac:	4602      	mov	r2, r0
 8004eae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff ff5f 	bl	8004d78 <__NVIC_SetPriority>
}
 8004eba:	bf00      	nop
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	4603      	mov	r3, r0
 8004eca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ecc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff ff33 	bl	8004d3c <__NVIC_EnableIRQ>
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff ffa4 	bl	8004e34 <SysTick_Config>
 8004eec:	4603      	mov	r3, r0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004efc:	f3bf 8f5f 	dmb	sy
}
 8004f00:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004f02:	4b07      	ldr	r3, [pc, #28]	@ (8004f20 <HAL_MPU_Disable+0x28>)
 8004f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f06:	4a06      	ldr	r2, [pc, #24]	@ (8004f20 <HAL_MPU_Disable+0x28>)
 8004f08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f0c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004f0e:	4b05      	ldr	r3, [pc, #20]	@ (8004f24 <HAL_MPU_Disable+0x2c>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	605a      	str	r2, [r3, #4]
}
 8004f14:	bf00      	nop
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	e000ed00 	.word	0xe000ed00
 8004f24:	e000ed90 	.word	0xe000ed90

08004f28 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004f30:	4a0b      	ldr	r2, [pc, #44]	@ (8004f60 <HAL_MPU_Enable+0x38>)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f043 0301 	orr.w	r3, r3, #1
 8004f38:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f64 <HAL_MPU_Enable+0x3c>)
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3e:	4a09      	ldr	r2, [pc, #36]	@ (8004f64 <HAL_MPU_Enable+0x3c>)
 8004f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f44:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004f46:	f3bf 8f4f 	dsb	sy
}
 8004f4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f4c:	f3bf 8f6f 	isb	sy
}
 8004f50:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	e000ed90 	.word	0xe000ed90
 8004f64:	e000ed00 	.word	0xe000ed00

08004f68 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	785a      	ldrb	r2, [r3, #1]
 8004f74:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe4 <HAL_MPU_ConfigRegion+0x7c>)
 8004f76:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004f78:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe4 <HAL_MPU_ConfigRegion+0x7c>)
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	4a19      	ldr	r2, [pc, #100]	@ (8004fe4 <HAL_MPU_ConfigRegion+0x7c>)
 8004f7e:	f023 0301 	bic.w	r3, r3, #1
 8004f82:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004f84:	4a17      	ldr	r2, [pc, #92]	@ (8004fe4 <HAL_MPU_ConfigRegion+0x7c>)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	7b1b      	ldrb	r3, [r3, #12]
 8004f90:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	7adb      	ldrb	r3, [r3, #11]
 8004f96:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004f98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	7a9b      	ldrb	r3, [r3, #10]
 8004f9e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004fa0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	7b5b      	ldrb	r3, [r3, #13]
 8004fa6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004fa8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	7b9b      	ldrb	r3, [r3, #14]
 8004fae:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004fb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	7bdb      	ldrb	r3, [r3, #15]
 8004fb6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004fb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	7a5b      	ldrb	r3, [r3, #9]
 8004fbe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004fc0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	7a1b      	ldrb	r3, [r3, #8]
 8004fc6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004fc8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	7812      	ldrb	r2, [r2, #0]
 8004fce:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004fd0:	4a04      	ldr	r2, [pc, #16]	@ (8004fe4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004fd2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004fd4:	6113      	str	r3, [r2, #16]
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	e000ed90 	.word	0xe000ed90

08004fe8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e014      	b.n	8005024 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	791b      	ldrb	r3, [r3, #4]
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d105      	bne.n	8005010 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7fb fdca 	bl	8000ba4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b08a      	sub	sp, #40	@ 0x28
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <HAL_DAC_ConfigChannel+0x1e>
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e12d      	b.n	80052aa <HAL_DAC_ConfigChannel+0x27e>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b04      	cmp	r3, #4
    }
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	795b      	ldrb	r3, [r3, #5]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_DAC_ConfigChannel+0x34>
 800505c:	2302      	movs	r3, #2
 800505e:	e124      	b.n	80052aa <HAL_DAC_ConfigChannel+0x27e>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2202      	movs	r2, #2
 800506a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b04      	cmp	r3, #4
 8005072:	d17a      	bne.n	800516a <HAL_DAC_ConfigChannel+0x13e>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005074:	f7fd ff0c 	bl	8002e90 <HAL_GetTick>
 8005078:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d13d      	bne.n	80050fc <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005080:	e018      	b.n	80050b4 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005082:	f7fd ff05 	bl	8002e90 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b01      	cmp	r3, #1
 800508e:	d911      	bls.n	80050b4 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005096:	4b87      	ldr	r3, [pc, #540]	@ (80052b4 <HAL_DAC_ConfigChannel+0x288>)
 8005098:	4013      	ands	r3, r2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f043 0208 	orr.w	r2, r3, #8
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2203      	movs	r2, #3
 80050ae:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e0fa      	b.n	80052aa <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050ba:	4b7e      	ldr	r3, [pc, #504]	@ (80052b4 <HAL_DAC_ConfigChannel+0x288>)
 80050bc:	4013      	ands	r3, r2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1df      	bne.n	8005082 <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	6992      	ldr	r2, [r2, #24]
 80050ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80050cc:	e020      	b.n	8005110 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80050ce:	f7fd fedf 	bl	8002e90 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d90f      	bls.n	80050fc <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	da0a      	bge.n	80050fc <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f043 0208 	orr.w	r2, r3, #8
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2203      	movs	r2, #3
 80050f6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e0d6      	b.n	80052aa <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005102:	2b00      	cmp	r3, #0
 8005104:	dbe3      	blt.n	80050ce <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	6992      	ldr	r2, [r2, #24]
 800510e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005120:	fa01 f303 	lsl.w	r3, r1, r3
 8005124:	43db      	mvns	r3, r3
 8005126:	ea02 0103 	and.w	r1, r2, r3
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	69da      	ldr	r2, [r3, #28]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	409a      	lsls	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f003 0310 	and.w	r3, r3, #16
 800514a:	21ff      	movs	r1, #255	@ 0xff
 800514c:	fa01 f303 	lsl.w	r3, r1, r3
 8005150:	43db      	mvns	r3, r3
 8005152:	ea02 0103 	and.w	r1, r2, r3
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	6a1a      	ldr	r2, [r3, #32]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	409a      	lsls	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d11d      	bne.n	80051ae <HAL_DAC_ConfigChannel+0x182>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005178:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f003 0310 	and.w	r3, r3, #16
 8005180:	221f      	movs	r2, #31
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	43db      	mvns	r3, r3
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	4013      	ands	r3, r2
 800518c:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f003 0310 	and.w	r3, r3, #16
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b4:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2207      	movs	r2, #7
 80051be:	fa02 f303 	lsl.w	r3, r2, r3
 80051c2:	43db      	mvns	r3, r3
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	4013      	ands	r3, r2
 80051c8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d102      	bne.n	80051d8 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = 0x00000000UL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80051d6:	e00f      	b.n	80051f8 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d102      	bne.n	80051e6 <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80051e0:	2301      	movs	r3, #1
 80051e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80051e4:	e008      	b.n	80051f8 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d102      	bne.n	80051f4 <HAL_DAC_ConfigChannel+0x1c8>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80051ee:	2301      	movs	r3, #1
 80051f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80051f2:	e001      	b.n	80051f8 <HAL_DAC_ConfigChannel+0x1cc>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80051f4:	2300      	movs	r3, #0
 80051f6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	4313      	orrs	r3, r2
 8005202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005204:	4313      	orrs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f003 0310 	and.w	r3, r3, #16
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	4313      	orrs	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6819      	ldr	r1, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f003 0310 	and.w	r3, r3, #16
 800522e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005232:	fa02 f303 	lsl.w	r3, r2, r3
 8005236:	43da      	mvns	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	400a      	ands	r2, r1
 800523e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f003 0310 	and.w	r3, r3, #16
 800524e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005252:	fa02 f303 	lsl.w	r3, r2, r3
 8005256:	43db      	mvns	r3, r3
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	4013      	ands	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f003 0310 	and.w	r3, r3, #16
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	fa02 f303 	lsl.w	r3, r2, r3
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	4313      	orrs	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6819      	ldr	r1, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f003 0310 	and.w	r3, r3, #16
 800528a:	22c0      	movs	r2, #192	@ 0xc0
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	43da      	mvns	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	400a      	ands	r2, r1
 8005298:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2201      	movs	r2, #1
 800529e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80052a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3728      	adds	r7, #40	@ 0x28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	20008000 	.word	0x20008000

080052b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80052c0:	f7fd fde6 	bl	8002e90 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e312      	b.n	80058f6 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a66      	ldr	r2, [pc, #408]	@ (8005470 <HAL_DMA_Init+0x1b8>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d04a      	beq.n	8005370 <HAL_DMA_Init+0xb8>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a65      	ldr	r2, [pc, #404]	@ (8005474 <HAL_DMA_Init+0x1bc>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d045      	beq.n	8005370 <HAL_DMA_Init+0xb8>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a63      	ldr	r2, [pc, #396]	@ (8005478 <HAL_DMA_Init+0x1c0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d040      	beq.n	8005370 <HAL_DMA_Init+0xb8>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a62      	ldr	r2, [pc, #392]	@ (800547c <HAL_DMA_Init+0x1c4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d03b      	beq.n	8005370 <HAL_DMA_Init+0xb8>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a60      	ldr	r2, [pc, #384]	@ (8005480 <HAL_DMA_Init+0x1c8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d036      	beq.n	8005370 <HAL_DMA_Init+0xb8>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a5f      	ldr	r2, [pc, #380]	@ (8005484 <HAL_DMA_Init+0x1cc>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d031      	beq.n	8005370 <HAL_DMA_Init+0xb8>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a5d      	ldr	r2, [pc, #372]	@ (8005488 <HAL_DMA_Init+0x1d0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d02c      	beq.n	8005370 <HAL_DMA_Init+0xb8>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a5c      	ldr	r2, [pc, #368]	@ (800548c <HAL_DMA_Init+0x1d4>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d027      	beq.n	8005370 <HAL_DMA_Init+0xb8>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a5a      	ldr	r2, [pc, #360]	@ (8005490 <HAL_DMA_Init+0x1d8>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d022      	beq.n	8005370 <HAL_DMA_Init+0xb8>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a59      	ldr	r2, [pc, #356]	@ (8005494 <HAL_DMA_Init+0x1dc>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d01d      	beq.n	8005370 <HAL_DMA_Init+0xb8>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a57      	ldr	r2, [pc, #348]	@ (8005498 <HAL_DMA_Init+0x1e0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d018      	beq.n	8005370 <HAL_DMA_Init+0xb8>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a56      	ldr	r2, [pc, #344]	@ (800549c <HAL_DMA_Init+0x1e4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d013      	beq.n	8005370 <HAL_DMA_Init+0xb8>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a54      	ldr	r2, [pc, #336]	@ (80054a0 <HAL_DMA_Init+0x1e8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00e      	beq.n	8005370 <HAL_DMA_Init+0xb8>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a53      	ldr	r2, [pc, #332]	@ (80054a4 <HAL_DMA_Init+0x1ec>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d009      	beq.n	8005370 <HAL_DMA_Init+0xb8>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a51      	ldr	r2, [pc, #324]	@ (80054a8 <HAL_DMA_Init+0x1f0>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d004      	beq.n	8005370 <HAL_DMA_Init+0xb8>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a50      	ldr	r2, [pc, #320]	@ (80054ac <HAL_DMA_Init+0x1f4>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d101      	bne.n	8005374 <HAL_DMA_Init+0xbc>
 8005370:	2301      	movs	r3, #1
 8005372:	e000      	b.n	8005376 <HAL_DMA_Init+0xbe>
 8005374:	2300      	movs	r3, #0
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 813c 	beq.w	80055f4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a37      	ldr	r2, [pc, #220]	@ (8005470 <HAL_DMA_Init+0x1b8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d04a      	beq.n	800542c <HAL_DMA_Init+0x174>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a36      	ldr	r2, [pc, #216]	@ (8005474 <HAL_DMA_Init+0x1bc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d045      	beq.n	800542c <HAL_DMA_Init+0x174>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a34      	ldr	r2, [pc, #208]	@ (8005478 <HAL_DMA_Init+0x1c0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d040      	beq.n	800542c <HAL_DMA_Init+0x174>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a33      	ldr	r2, [pc, #204]	@ (800547c <HAL_DMA_Init+0x1c4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d03b      	beq.n	800542c <HAL_DMA_Init+0x174>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a31      	ldr	r2, [pc, #196]	@ (8005480 <HAL_DMA_Init+0x1c8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d036      	beq.n	800542c <HAL_DMA_Init+0x174>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a30      	ldr	r2, [pc, #192]	@ (8005484 <HAL_DMA_Init+0x1cc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d031      	beq.n	800542c <HAL_DMA_Init+0x174>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a2e      	ldr	r2, [pc, #184]	@ (8005488 <HAL_DMA_Init+0x1d0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d02c      	beq.n	800542c <HAL_DMA_Init+0x174>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a2d      	ldr	r2, [pc, #180]	@ (800548c <HAL_DMA_Init+0x1d4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d027      	beq.n	800542c <HAL_DMA_Init+0x174>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a2b      	ldr	r2, [pc, #172]	@ (8005490 <HAL_DMA_Init+0x1d8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d022      	beq.n	800542c <HAL_DMA_Init+0x174>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a2a      	ldr	r2, [pc, #168]	@ (8005494 <HAL_DMA_Init+0x1dc>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d01d      	beq.n	800542c <HAL_DMA_Init+0x174>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a28      	ldr	r2, [pc, #160]	@ (8005498 <HAL_DMA_Init+0x1e0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d018      	beq.n	800542c <HAL_DMA_Init+0x174>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a27      	ldr	r2, [pc, #156]	@ (800549c <HAL_DMA_Init+0x1e4>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d013      	beq.n	800542c <HAL_DMA_Init+0x174>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a25      	ldr	r2, [pc, #148]	@ (80054a0 <HAL_DMA_Init+0x1e8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d00e      	beq.n	800542c <HAL_DMA_Init+0x174>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a24      	ldr	r2, [pc, #144]	@ (80054a4 <HAL_DMA_Init+0x1ec>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d009      	beq.n	800542c <HAL_DMA_Init+0x174>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a22      	ldr	r2, [pc, #136]	@ (80054a8 <HAL_DMA_Init+0x1f0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d004      	beq.n	800542c <HAL_DMA_Init+0x174>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a21      	ldr	r2, [pc, #132]	@ (80054ac <HAL_DMA_Init+0x1f4>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d108      	bne.n	800543e <HAL_DMA_Init+0x186>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0201 	bic.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	e007      	b.n	800544e <HAL_DMA_Init+0x196>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 0201 	bic.w	r2, r2, #1
 800544c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800544e:	e02f      	b.n	80054b0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005450:	f7fd fd1e 	bl	8002e90 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b05      	cmp	r3, #5
 800545c:	d928      	bls.n	80054b0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2220      	movs	r2, #32
 8005462:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2203      	movs	r2, #3
 8005468:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e242      	b.n	80058f6 <HAL_DMA_Init+0x63e>
 8005470:	40020010 	.word	0x40020010
 8005474:	40020028 	.word	0x40020028
 8005478:	40020040 	.word	0x40020040
 800547c:	40020058 	.word	0x40020058
 8005480:	40020070 	.word	0x40020070
 8005484:	40020088 	.word	0x40020088
 8005488:	400200a0 	.word	0x400200a0
 800548c:	400200b8 	.word	0x400200b8
 8005490:	40020410 	.word	0x40020410
 8005494:	40020428 	.word	0x40020428
 8005498:	40020440 	.word	0x40020440
 800549c:	40020458 	.word	0x40020458
 80054a0:	40020470 	.word	0x40020470
 80054a4:	40020488 	.word	0x40020488
 80054a8:	400204a0 	.word	0x400204a0
 80054ac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1c8      	bne.n	8005450 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4b83      	ldr	r3, [pc, #524]	@ (80056d8 <HAL_DMA_Init+0x420>)
 80054ca:	4013      	ands	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80054d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054ee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005500:	2b04      	cmp	r3, #4
 8005502:	d107      	bne.n	8005514 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550c:	4313      	orrs	r3, r2
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	2b28      	cmp	r3, #40	@ 0x28
 800551a:	d903      	bls.n	8005524 <HAL_DMA_Init+0x26c>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b2e      	cmp	r3, #46	@ 0x2e
 8005522:	d91f      	bls.n	8005564 <HAL_DMA_Init+0x2ac>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b3e      	cmp	r3, #62	@ 0x3e
 800552a:	d903      	bls.n	8005534 <HAL_DMA_Init+0x27c>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2b42      	cmp	r3, #66	@ 0x42
 8005532:	d917      	bls.n	8005564 <HAL_DMA_Init+0x2ac>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b46      	cmp	r3, #70	@ 0x46
 800553a:	d903      	bls.n	8005544 <HAL_DMA_Init+0x28c>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b48      	cmp	r3, #72	@ 0x48
 8005542:	d90f      	bls.n	8005564 <HAL_DMA_Init+0x2ac>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2b4e      	cmp	r3, #78	@ 0x4e
 800554a:	d903      	bls.n	8005554 <HAL_DMA_Init+0x29c>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2b52      	cmp	r3, #82	@ 0x52
 8005552:	d907      	bls.n	8005564 <HAL_DMA_Init+0x2ac>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2b73      	cmp	r3, #115	@ 0x73
 800555a:	d905      	bls.n	8005568 <HAL_DMA_Init+0x2b0>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b77      	cmp	r3, #119	@ 0x77
 8005562:	d801      	bhi.n	8005568 <HAL_DMA_Init+0x2b0>
 8005564:	2301      	movs	r3, #1
 8005566:	e000      	b.n	800556a <HAL_DMA_Init+0x2b2>
 8005568:	2300      	movs	r3, #0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005574:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f023 0307 	bic.w	r3, r3, #7
 800558c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4313      	orrs	r3, r2
 8005596:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559c:	2b04      	cmp	r3, #4
 800559e:	d117      	bne.n	80055d0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00e      	beq.n	80055d0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f001 ff18 	bl	80073e8 <DMA_CheckFifoParam>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d008      	beq.n	80055d0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2240      	movs	r2, #64	@ 0x40
 80055c2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e192      	b.n	80058f6 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f001 fe53 	bl	8007284 <DMA_CalcBaseAndBitshift>
 80055de:	4603      	mov	r3, r0
 80055e0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055e6:	f003 031f 	and.w	r3, r3, #31
 80055ea:	223f      	movs	r2, #63	@ 0x3f
 80055ec:	409a      	lsls	r2, r3
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	609a      	str	r2, [r3, #8]
 80055f2:	e0c8      	b.n	8005786 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a38      	ldr	r2, [pc, #224]	@ (80056dc <HAL_DMA_Init+0x424>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d022      	beq.n	8005644 <HAL_DMA_Init+0x38c>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a37      	ldr	r2, [pc, #220]	@ (80056e0 <HAL_DMA_Init+0x428>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d01d      	beq.n	8005644 <HAL_DMA_Init+0x38c>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a35      	ldr	r2, [pc, #212]	@ (80056e4 <HAL_DMA_Init+0x42c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d018      	beq.n	8005644 <HAL_DMA_Init+0x38c>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a34      	ldr	r2, [pc, #208]	@ (80056e8 <HAL_DMA_Init+0x430>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d013      	beq.n	8005644 <HAL_DMA_Init+0x38c>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a32      	ldr	r2, [pc, #200]	@ (80056ec <HAL_DMA_Init+0x434>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d00e      	beq.n	8005644 <HAL_DMA_Init+0x38c>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a31      	ldr	r2, [pc, #196]	@ (80056f0 <HAL_DMA_Init+0x438>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d009      	beq.n	8005644 <HAL_DMA_Init+0x38c>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a2f      	ldr	r2, [pc, #188]	@ (80056f4 <HAL_DMA_Init+0x43c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d004      	beq.n	8005644 <HAL_DMA_Init+0x38c>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a2e      	ldr	r2, [pc, #184]	@ (80056f8 <HAL_DMA_Init+0x440>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d101      	bne.n	8005648 <HAL_DMA_Init+0x390>
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <HAL_DMA_Init+0x392>
 8005648:	2300      	movs	r3, #0
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 8092 	beq.w	8005774 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a21      	ldr	r2, [pc, #132]	@ (80056dc <HAL_DMA_Init+0x424>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d021      	beq.n	800569e <HAL_DMA_Init+0x3e6>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a20      	ldr	r2, [pc, #128]	@ (80056e0 <HAL_DMA_Init+0x428>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d01c      	beq.n	800569e <HAL_DMA_Init+0x3e6>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a1e      	ldr	r2, [pc, #120]	@ (80056e4 <HAL_DMA_Init+0x42c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d017      	beq.n	800569e <HAL_DMA_Init+0x3e6>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a1d      	ldr	r2, [pc, #116]	@ (80056e8 <HAL_DMA_Init+0x430>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d012      	beq.n	800569e <HAL_DMA_Init+0x3e6>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a1b      	ldr	r2, [pc, #108]	@ (80056ec <HAL_DMA_Init+0x434>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d00d      	beq.n	800569e <HAL_DMA_Init+0x3e6>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a1a      	ldr	r2, [pc, #104]	@ (80056f0 <HAL_DMA_Init+0x438>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d008      	beq.n	800569e <HAL_DMA_Init+0x3e6>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a18      	ldr	r2, [pc, #96]	@ (80056f4 <HAL_DMA_Init+0x43c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d003      	beq.n	800569e <HAL_DMA_Init+0x3e6>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a17      	ldr	r2, [pc, #92]	@ (80056f8 <HAL_DMA_Init+0x440>)
 800569c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4b10      	ldr	r3, [pc, #64]	@ (80056fc <HAL_DMA_Init+0x444>)
 80056ba:	4013      	ands	r3, r2
 80056bc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	2b40      	cmp	r3, #64	@ 0x40
 80056c4:	d01c      	beq.n	8005700 <HAL_DMA_Init+0x448>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	2b80      	cmp	r3, #128	@ 0x80
 80056cc:	d102      	bne.n	80056d4 <HAL_DMA_Init+0x41c>
 80056ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80056d2:	e016      	b.n	8005702 <HAL_DMA_Init+0x44a>
 80056d4:	2300      	movs	r3, #0
 80056d6:	e014      	b.n	8005702 <HAL_DMA_Init+0x44a>
 80056d8:	fe10803f 	.word	0xfe10803f
 80056dc:	58025408 	.word	0x58025408
 80056e0:	5802541c 	.word	0x5802541c
 80056e4:	58025430 	.word	0x58025430
 80056e8:	58025444 	.word	0x58025444
 80056ec:	58025458 	.word	0x58025458
 80056f0:	5802546c 	.word	0x5802546c
 80056f4:	58025480 	.word	0x58025480
 80056f8:	58025494 	.word	0x58025494
 80056fc:	fffe000f 	.word	0xfffe000f
 8005700:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	68d2      	ldr	r2, [r2, #12]
 8005706:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005708:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005710:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005718:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005720:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005728:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005730:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	461a      	mov	r2, r3
 8005746:	4b6e      	ldr	r3, [pc, #440]	@ (8005900 <HAL_DMA_Init+0x648>)
 8005748:	4413      	add	r3, r2
 800574a:	4a6e      	ldr	r2, [pc, #440]	@ (8005904 <HAL_DMA_Init+0x64c>)
 800574c:	fba2 2303 	umull	r2, r3, r2, r3
 8005750:	091b      	lsrs	r3, r3, #4
 8005752:	009a      	lsls	r2, r3, #2
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f001 fd93 	bl	8007284 <DMA_CalcBaseAndBitshift>
 800575e:	4603      	mov	r3, r0
 8005760:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005766:	f003 031f 	and.w	r3, r3, #31
 800576a:	2201      	movs	r2, #1
 800576c:	409a      	lsls	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	605a      	str	r2, [r3, #4]
 8005772:	e008      	b.n	8005786 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2240      	movs	r2, #64	@ 0x40
 8005778:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2203      	movs	r2, #3
 800577e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e0b7      	b.n	80058f6 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a5f      	ldr	r2, [pc, #380]	@ (8005908 <HAL_DMA_Init+0x650>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d072      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a5d      	ldr	r2, [pc, #372]	@ (800590c <HAL_DMA_Init+0x654>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d06d      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a5c      	ldr	r2, [pc, #368]	@ (8005910 <HAL_DMA_Init+0x658>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d068      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a5a      	ldr	r2, [pc, #360]	@ (8005914 <HAL_DMA_Init+0x65c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d063      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a59      	ldr	r2, [pc, #356]	@ (8005918 <HAL_DMA_Init+0x660>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d05e      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a57      	ldr	r2, [pc, #348]	@ (800591c <HAL_DMA_Init+0x664>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d059      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a56      	ldr	r2, [pc, #344]	@ (8005920 <HAL_DMA_Init+0x668>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d054      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a54      	ldr	r2, [pc, #336]	@ (8005924 <HAL_DMA_Init+0x66c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d04f      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a53      	ldr	r2, [pc, #332]	@ (8005928 <HAL_DMA_Init+0x670>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d04a      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a51      	ldr	r2, [pc, #324]	@ (800592c <HAL_DMA_Init+0x674>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d045      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a50      	ldr	r2, [pc, #320]	@ (8005930 <HAL_DMA_Init+0x678>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d040      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a4e      	ldr	r2, [pc, #312]	@ (8005934 <HAL_DMA_Init+0x67c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d03b      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a4d      	ldr	r2, [pc, #308]	@ (8005938 <HAL_DMA_Init+0x680>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d036      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a4b      	ldr	r2, [pc, #300]	@ (800593c <HAL_DMA_Init+0x684>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d031      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a4a      	ldr	r2, [pc, #296]	@ (8005940 <HAL_DMA_Init+0x688>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d02c      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a48      	ldr	r2, [pc, #288]	@ (8005944 <HAL_DMA_Init+0x68c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d027      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a47      	ldr	r2, [pc, #284]	@ (8005948 <HAL_DMA_Init+0x690>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d022      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a45      	ldr	r2, [pc, #276]	@ (800594c <HAL_DMA_Init+0x694>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d01d      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a44      	ldr	r2, [pc, #272]	@ (8005950 <HAL_DMA_Init+0x698>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d018      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a42      	ldr	r2, [pc, #264]	@ (8005954 <HAL_DMA_Init+0x69c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d013      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a41      	ldr	r2, [pc, #260]	@ (8005958 <HAL_DMA_Init+0x6a0>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00e      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a3f      	ldr	r2, [pc, #252]	@ (800595c <HAL_DMA_Init+0x6a4>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d009      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a3e      	ldr	r2, [pc, #248]	@ (8005960 <HAL_DMA_Init+0x6a8>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d004      	beq.n	8005876 <HAL_DMA_Init+0x5be>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a3c      	ldr	r2, [pc, #240]	@ (8005964 <HAL_DMA_Init+0x6ac>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d101      	bne.n	800587a <HAL_DMA_Init+0x5c2>
 8005876:	2301      	movs	r3, #1
 8005878:	e000      	b.n	800587c <HAL_DMA_Init+0x5c4>
 800587a:	2300      	movs	r3, #0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d032      	beq.n	80058e6 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f001 fe2d 	bl	80074e0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	2b80      	cmp	r3, #128	@ 0x80
 800588c:	d102      	bne.n	8005894 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80058a8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d010      	beq.n	80058d4 <HAL_DMA_Init+0x61c>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	2b08      	cmp	r3, #8
 80058b8:	d80c      	bhi.n	80058d4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f001 feaa 	bl	8007614 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80058d0:	605a      	str	r2, [r3, #4]
 80058d2:	e008      	b.n	80058e6 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	a7fdabf8 	.word	0xa7fdabf8
 8005904:	cccccccd 	.word	0xcccccccd
 8005908:	40020010 	.word	0x40020010
 800590c:	40020028 	.word	0x40020028
 8005910:	40020040 	.word	0x40020040
 8005914:	40020058 	.word	0x40020058
 8005918:	40020070 	.word	0x40020070
 800591c:	40020088 	.word	0x40020088
 8005920:	400200a0 	.word	0x400200a0
 8005924:	400200b8 	.word	0x400200b8
 8005928:	40020410 	.word	0x40020410
 800592c:	40020428 	.word	0x40020428
 8005930:	40020440 	.word	0x40020440
 8005934:	40020458 	.word	0x40020458
 8005938:	40020470 	.word	0x40020470
 800593c:	40020488 	.word	0x40020488
 8005940:	400204a0 	.word	0x400204a0
 8005944:	400204b8 	.word	0x400204b8
 8005948:	58025408 	.word	0x58025408
 800594c:	5802541c 	.word	0x5802541c
 8005950:	58025430 	.word	0x58025430
 8005954:	58025444 	.word	0x58025444
 8005958:	58025458 	.word	0x58025458
 800595c:	5802546c 	.word	0x5802546c
 8005960:	58025480 	.word	0x58025480
 8005964:	58025494 	.word	0x58025494

08005968 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005970:	f7fd fa8e 	bl	8002e90 <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e2dc      	b.n	8005f3a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d008      	beq.n	800599e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2280      	movs	r2, #128	@ 0x80
 8005990:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e2cd      	b.n	8005f3a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a76      	ldr	r2, [pc, #472]	@ (8005b7c <HAL_DMA_Abort+0x214>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d04a      	beq.n	8005a3e <HAL_DMA_Abort+0xd6>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a74      	ldr	r2, [pc, #464]	@ (8005b80 <HAL_DMA_Abort+0x218>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d045      	beq.n	8005a3e <HAL_DMA_Abort+0xd6>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a73      	ldr	r2, [pc, #460]	@ (8005b84 <HAL_DMA_Abort+0x21c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d040      	beq.n	8005a3e <HAL_DMA_Abort+0xd6>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a71      	ldr	r2, [pc, #452]	@ (8005b88 <HAL_DMA_Abort+0x220>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d03b      	beq.n	8005a3e <HAL_DMA_Abort+0xd6>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a70      	ldr	r2, [pc, #448]	@ (8005b8c <HAL_DMA_Abort+0x224>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d036      	beq.n	8005a3e <HAL_DMA_Abort+0xd6>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a6e      	ldr	r2, [pc, #440]	@ (8005b90 <HAL_DMA_Abort+0x228>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d031      	beq.n	8005a3e <HAL_DMA_Abort+0xd6>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a6d      	ldr	r2, [pc, #436]	@ (8005b94 <HAL_DMA_Abort+0x22c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d02c      	beq.n	8005a3e <HAL_DMA_Abort+0xd6>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a6b      	ldr	r2, [pc, #428]	@ (8005b98 <HAL_DMA_Abort+0x230>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d027      	beq.n	8005a3e <HAL_DMA_Abort+0xd6>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a6a      	ldr	r2, [pc, #424]	@ (8005b9c <HAL_DMA_Abort+0x234>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d022      	beq.n	8005a3e <HAL_DMA_Abort+0xd6>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a68      	ldr	r2, [pc, #416]	@ (8005ba0 <HAL_DMA_Abort+0x238>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d01d      	beq.n	8005a3e <HAL_DMA_Abort+0xd6>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a67      	ldr	r2, [pc, #412]	@ (8005ba4 <HAL_DMA_Abort+0x23c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d018      	beq.n	8005a3e <HAL_DMA_Abort+0xd6>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a65      	ldr	r2, [pc, #404]	@ (8005ba8 <HAL_DMA_Abort+0x240>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d013      	beq.n	8005a3e <HAL_DMA_Abort+0xd6>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a64      	ldr	r2, [pc, #400]	@ (8005bac <HAL_DMA_Abort+0x244>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d00e      	beq.n	8005a3e <HAL_DMA_Abort+0xd6>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a62      	ldr	r2, [pc, #392]	@ (8005bb0 <HAL_DMA_Abort+0x248>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d009      	beq.n	8005a3e <HAL_DMA_Abort+0xd6>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a61      	ldr	r2, [pc, #388]	@ (8005bb4 <HAL_DMA_Abort+0x24c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d004      	beq.n	8005a3e <HAL_DMA_Abort+0xd6>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a5f      	ldr	r2, [pc, #380]	@ (8005bb8 <HAL_DMA_Abort+0x250>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d101      	bne.n	8005a42 <HAL_DMA_Abort+0xda>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e000      	b.n	8005a44 <HAL_DMA_Abort+0xdc>
 8005a42:	2300      	movs	r3, #0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d013      	beq.n	8005a70 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 021e 	bic.w	r2, r2, #30
 8005a56:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	695a      	ldr	r2, [r3, #20]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a66:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	617b      	str	r3, [r7, #20]
 8005a6e:	e00a      	b.n	8005a86 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 020e 	bic.w	r2, r2, #14
 8005a7e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a3c      	ldr	r2, [pc, #240]	@ (8005b7c <HAL_DMA_Abort+0x214>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d072      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a3a      	ldr	r2, [pc, #232]	@ (8005b80 <HAL_DMA_Abort+0x218>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d06d      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a39      	ldr	r2, [pc, #228]	@ (8005b84 <HAL_DMA_Abort+0x21c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d068      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a37      	ldr	r2, [pc, #220]	@ (8005b88 <HAL_DMA_Abort+0x220>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d063      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a36      	ldr	r2, [pc, #216]	@ (8005b8c <HAL_DMA_Abort+0x224>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d05e      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a34      	ldr	r2, [pc, #208]	@ (8005b90 <HAL_DMA_Abort+0x228>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d059      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a33      	ldr	r2, [pc, #204]	@ (8005b94 <HAL_DMA_Abort+0x22c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d054      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a31      	ldr	r2, [pc, #196]	@ (8005b98 <HAL_DMA_Abort+0x230>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d04f      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a30      	ldr	r2, [pc, #192]	@ (8005b9c <HAL_DMA_Abort+0x234>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d04a      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a2e      	ldr	r2, [pc, #184]	@ (8005ba0 <HAL_DMA_Abort+0x238>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d045      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a2d      	ldr	r2, [pc, #180]	@ (8005ba4 <HAL_DMA_Abort+0x23c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d040      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a2b      	ldr	r2, [pc, #172]	@ (8005ba8 <HAL_DMA_Abort+0x240>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d03b      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a2a      	ldr	r2, [pc, #168]	@ (8005bac <HAL_DMA_Abort+0x244>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d036      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a28      	ldr	r2, [pc, #160]	@ (8005bb0 <HAL_DMA_Abort+0x248>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d031      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a27      	ldr	r2, [pc, #156]	@ (8005bb4 <HAL_DMA_Abort+0x24c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d02c      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a25      	ldr	r2, [pc, #148]	@ (8005bb8 <HAL_DMA_Abort+0x250>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d027      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a24      	ldr	r2, [pc, #144]	@ (8005bbc <HAL_DMA_Abort+0x254>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d022      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a22      	ldr	r2, [pc, #136]	@ (8005bc0 <HAL_DMA_Abort+0x258>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d01d      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a21      	ldr	r2, [pc, #132]	@ (8005bc4 <HAL_DMA_Abort+0x25c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d018      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1f      	ldr	r2, [pc, #124]	@ (8005bc8 <HAL_DMA_Abort+0x260>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d013      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1e      	ldr	r2, [pc, #120]	@ (8005bcc <HAL_DMA_Abort+0x264>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00e      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1c      	ldr	r2, [pc, #112]	@ (8005bd0 <HAL_DMA_Abort+0x268>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d009      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1b      	ldr	r2, [pc, #108]	@ (8005bd4 <HAL_DMA_Abort+0x26c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d004      	beq.n	8005b76 <HAL_DMA_Abort+0x20e>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a19      	ldr	r2, [pc, #100]	@ (8005bd8 <HAL_DMA_Abort+0x270>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d132      	bne.n	8005bdc <HAL_DMA_Abort+0x274>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e031      	b.n	8005bde <HAL_DMA_Abort+0x276>
 8005b7a:	bf00      	nop
 8005b7c:	40020010 	.word	0x40020010
 8005b80:	40020028 	.word	0x40020028
 8005b84:	40020040 	.word	0x40020040
 8005b88:	40020058 	.word	0x40020058
 8005b8c:	40020070 	.word	0x40020070
 8005b90:	40020088 	.word	0x40020088
 8005b94:	400200a0 	.word	0x400200a0
 8005b98:	400200b8 	.word	0x400200b8
 8005b9c:	40020410 	.word	0x40020410
 8005ba0:	40020428 	.word	0x40020428
 8005ba4:	40020440 	.word	0x40020440
 8005ba8:	40020458 	.word	0x40020458
 8005bac:	40020470 	.word	0x40020470
 8005bb0:	40020488 	.word	0x40020488
 8005bb4:	400204a0 	.word	0x400204a0
 8005bb8:	400204b8 	.word	0x400204b8
 8005bbc:	58025408 	.word	0x58025408
 8005bc0:	5802541c 	.word	0x5802541c
 8005bc4:	58025430 	.word	0x58025430
 8005bc8:	58025444 	.word	0x58025444
 8005bcc:	58025458 	.word	0x58025458
 8005bd0:	5802546c 	.word	0x5802546c
 8005bd4:	58025480 	.word	0x58025480
 8005bd8:	58025494 	.word	0x58025494
 8005bdc:	2300      	movs	r3, #0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d007      	beq.n	8005bf2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bf0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a6d      	ldr	r2, [pc, #436]	@ (8005dac <HAL_DMA_Abort+0x444>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d04a      	beq.n	8005c92 <HAL_DMA_Abort+0x32a>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a6b      	ldr	r2, [pc, #428]	@ (8005db0 <HAL_DMA_Abort+0x448>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d045      	beq.n	8005c92 <HAL_DMA_Abort+0x32a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a6a      	ldr	r2, [pc, #424]	@ (8005db4 <HAL_DMA_Abort+0x44c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d040      	beq.n	8005c92 <HAL_DMA_Abort+0x32a>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a68      	ldr	r2, [pc, #416]	@ (8005db8 <HAL_DMA_Abort+0x450>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d03b      	beq.n	8005c92 <HAL_DMA_Abort+0x32a>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a67      	ldr	r2, [pc, #412]	@ (8005dbc <HAL_DMA_Abort+0x454>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d036      	beq.n	8005c92 <HAL_DMA_Abort+0x32a>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a65      	ldr	r2, [pc, #404]	@ (8005dc0 <HAL_DMA_Abort+0x458>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d031      	beq.n	8005c92 <HAL_DMA_Abort+0x32a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a64      	ldr	r2, [pc, #400]	@ (8005dc4 <HAL_DMA_Abort+0x45c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d02c      	beq.n	8005c92 <HAL_DMA_Abort+0x32a>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a62      	ldr	r2, [pc, #392]	@ (8005dc8 <HAL_DMA_Abort+0x460>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d027      	beq.n	8005c92 <HAL_DMA_Abort+0x32a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a61      	ldr	r2, [pc, #388]	@ (8005dcc <HAL_DMA_Abort+0x464>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d022      	beq.n	8005c92 <HAL_DMA_Abort+0x32a>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a5f      	ldr	r2, [pc, #380]	@ (8005dd0 <HAL_DMA_Abort+0x468>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d01d      	beq.n	8005c92 <HAL_DMA_Abort+0x32a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a5e      	ldr	r2, [pc, #376]	@ (8005dd4 <HAL_DMA_Abort+0x46c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d018      	beq.n	8005c92 <HAL_DMA_Abort+0x32a>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a5c      	ldr	r2, [pc, #368]	@ (8005dd8 <HAL_DMA_Abort+0x470>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d013      	beq.n	8005c92 <HAL_DMA_Abort+0x32a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a5b      	ldr	r2, [pc, #364]	@ (8005ddc <HAL_DMA_Abort+0x474>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00e      	beq.n	8005c92 <HAL_DMA_Abort+0x32a>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a59      	ldr	r2, [pc, #356]	@ (8005de0 <HAL_DMA_Abort+0x478>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d009      	beq.n	8005c92 <HAL_DMA_Abort+0x32a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a58      	ldr	r2, [pc, #352]	@ (8005de4 <HAL_DMA_Abort+0x47c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d004      	beq.n	8005c92 <HAL_DMA_Abort+0x32a>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a56      	ldr	r2, [pc, #344]	@ (8005de8 <HAL_DMA_Abort+0x480>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d108      	bne.n	8005ca4 <HAL_DMA_Abort+0x33c>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0201 	bic.w	r2, r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	e007      	b.n	8005cb4 <HAL_DMA_Abort+0x34c>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0201 	bic.w	r2, r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005cb4:	e013      	b.n	8005cde <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005cb6:	f7fd f8eb 	bl	8002e90 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b05      	cmp	r3, #5
 8005cc2:	d90c      	bls.n	8005cde <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2203      	movs	r2, #3
 8005cce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e12d      	b.n	8005f3a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1e5      	bne.n	8005cb6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a2f      	ldr	r2, [pc, #188]	@ (8005dac <HAL_DMA_Abort+0x444>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d04a      	beq.n	8005d8a <HAL_DMA_Abort+0x422>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a2d      	ldr	r2, [pc, #180]	@ (8005db0 <HAL_DMA_Abort+0x448>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d045      	beq.n	8005d8a <HAL_DMA_Abort+0x422>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a2c      	ldr	r2, [pc, #176]	@ (8005db4 <HAL_DMA_Abort+0x44c>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d040      	beq.n	8005d8a <HAL_DMA_Abort+0x422>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a2a      	ldr	r2, [pc, #168]	@ (8005db8 <HAL_DMA_Abort+0x450>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d03b      	beq.n	8005d8a <HAL_DMA_Abort+0x422>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a29      	ldr	r2, [pc, #164]	@ (8005dbc <HAL_DMA_Abort+0x454>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d036      	beq.n	8005d8a <HAL_DMA_Abort+0x422>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a27      	ldr	r2, [pc, #156]	@ (8005dc0 <HAL_DMA_Abort+0x458>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d031      	beq.n	8005d8a <HAL_DMA_Abort+0x422>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a26      	ldr	r2, [pc, #152]	@ (8005dc4 <HAL_DMA_Abort+0x45c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d02c      	beq.n	8005d8a <HAL_DMA_Abort+0x422>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a24      	ldr	r2, [pc, #144]	@ (8005dc8 <HAL_DMA_Abort+0x460>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d027      	beq.n	8005d8a <HAL_DMA_Abort+0x422>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a23      	ldr	r2, [pc, #140]	@ (8005dcc <HAL_DMA_Abort+0x464>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d022      	beq.n	8005d8a <HAL_DMA_Abort+0x422>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a21      	ldr	r2, [pc, #132]	@ (8005dd0 <HAL_DMA_Abort+0x468>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d01d      	beq.n	8005d8a <HAL_DMA_Abort+0x422>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a20      	ldr	r2, [pc, #128]	@ (8005dd4 <HAL_DMA_Abort+0x46c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d018      	beq.n	8005d8a <HAL_DMA_Abort+0x422>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a1e      	ldr	r2, [pc, #120]	@ (8005dd8 <HAL_DMA_Abort+0x470>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d013      	beq.n	8005d8a <HAL_DMA_Abort+0x422>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a1d      	ldr	r2, [pc, #116]	@ (8005ddc <HAL_DMA_Abort+0x474>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00e      	beq.n	8005d8a <HAL_DMA_Abort+0x422>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a1b      	ldr	r2, [pc, #108]	@ (8005de0 <HAL_DMA_Abort+0x478>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d009      	beq.n	8005d8a <HAL_DMA_Abort+0x422>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8005de4 <HAL_DMA_Abort+0x47c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <HAL_DMA_Abort+0x422>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a18      	ldr	r2, [pc, #96]	@ (8005de8 <HAL_DMA_Abort+0x480>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d101      	bne.n	8005d8e <HAL_DMA_Abort+0x426>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e000      	b.n	8005d90 <HAL_DMA_Abort+0x428>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d02b      	beq.n	8005dec <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d98:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d9e:	f003 031f 	and.w	r3, r3, #31
 8005da2:	223f      	movs	r2, #63	@ 0x3f
 8005da4:	409a      	lsls	r2, r3
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	609a      	str	r2, [r3, #8]
 8005daa:	e02a      	b.n	8005e02 <HAL_DMA_Abort+0x49a>
 8005dac:	40020010 	.word	0x40020010
 8005db0:	40020028 	.word	0x40020028
 8005db4:	40020040 	.word	0x40020040
 8005db8:	40020058 	.word	0x40020058
 8005dbc:	40020070 	.word	0x40020070
 8005dc0:	40020088 	.word	0x40020088
 8005dc4:	400200a0 	.word	0x400200a0
 8005dc8:	400200b8 	.word	0x400200b8
 8005dcc:	40020410 	.word	0x40020410
 8005dd0:	40020428 	.word	0x40020428
 8005dd4:	40020440 	.word	0x40020440
 8005dd8:	40020458 	.word	0x40020458
 8005ddc:	40020470 	.word	0x40020470
 8005de0:	40020488 	.word	0x40020488
 8005de4:	400204a0 	.word	0x400204a0
 8005de8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005df6:	f003 031f 	and.w	r3, r3, #31
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	409a      	lsls	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a4f      	ldr	r2, [pc, #316]	@ (8005f44 <HAL_DMA_Abort+0x5dc>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d072      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a4d      	ldr	r2, [pc, #308]	@ (8005f48 <HAL_DMA_Abort+0x5e0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d06d      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a4c      	ldr	r2, [pc, #304]	@ (8005f4c <HAL_DMA_Abort+0x5e4>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d068      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a4a      	ldr	r2, [pc, #296]	@ (8005f50 <HAL_DMA_Abort+0x5e8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d063      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a49      	ldr	r2, [pc, #292]	@ (8005f54 <HAL_DMA_Abort+0x5ec>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d05e      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a47      	ldr	r2, [pc, #284]	@ (8005f58 <HAL_DMA_Abort+0x5f0>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d059      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a46      	ldr	r2, [pc, #280]	@ (8005f5c <HAL_DMA_Abort+0x5f4>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d054      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a44      	ldr	r2, [pc, #272]	@ (8005f60 <HAL_DMA_Abort+0x5f8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d04f      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a43      	ldr	r2, [pc, #268]	@ (8005f64 <HAL_DMA_Abort+0x5fc>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d04a      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a41      	ldr	r2, [pc, #260]	@ (8005f68 <HAL_DMA_Abort+0x600>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d045      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a40      	ldr	r2, [pc, #256]	@ (8005f6c <HAL_DMA_Abort+0x604>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d040      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a3e      	ldr	r2, [pc, #248]	@ (8005f70 <HAL_DMA_Abort+0x608>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d03b      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a3d      	ldr	r2, [pc, #244]	@ (8005f74 <HAL_DMA_Abort+0x60c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d036      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a3b      	ldr	r2, [pc, #236]	@ (8005f78 <HAL_DMA_Abort+0x610>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d031      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a3a      	ldr	r2, [pc, #232]	@ (8005f7c <HAL_DMA_Abort+0x614>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d02c      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a38      	ldr	r2, [pc, #224]	@ (8005f80 <HAL_DMA_Abort+0x618>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d027      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a37      	ldr	r2, [pc, #220]	@ (8005f84 <HAL_DMA_Abort+0x61c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d022      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a35      	ldr	r2, [pc, #212]	@ (8005f88 <HAL_DMA_Abort+0x620>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d01d      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a34      	ldr	r2, [pc, #208]	@ (8005f8c <HAL_DMA_Abort+0x624>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d018      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a32      	ldr	r2, [pc, #200]	@ (8005f90 <HAL_DMA_Abort+0x628>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d013      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a31      	ldr	r2, [pc, #196]	@ (8005f94 <HAL_DMA_Abort+0x62c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d00e      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a2f      	ldr	r2, [pc, #188]	@ (8005f98 <HAL_DMA_Abort+0x630>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d009      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a2e      	ldr	r2, [pc, #184]	@ (8005f9c <HAL_DMA_Abort+0x634>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d004      	beq.n	8005ef2 <HAL_DMA_Abort+0x58a>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a2c      	ldr	r2, [pc, #176]	@ (8005fa0 <HAL_DMA_Abort+0x638>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d101      	bne.n	8005ef6 <HAL_DMA_Abort+0x58e>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e000      	b.n	8005ef8 <HAL_DMA_Abort+0x590>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d015      	beq.n	8005f28 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005f04:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00c      	beq.n	8005f28 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f1c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005f26:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	40020010 	.word	0x40020010
 8005f48:	40020028 	.word	0x40020028
 8005f4c:	40020040 	.word	0x40020040
 8005f50:	40020058 	.word	0x40020058
 8005f54:	40020070 	.word	0x40020070
 8005f58:	40020088 	.word	0x40020088
 8005f5c:	400200a0 	.word	0x400200a0
 8005f60:	400200b8 	.word	0x400200b8
 8005f64:	40020410 	.word	0x40020410
 8005f68:	40020428 	.word	0x40020428
 8005f6c:	40020440 	.word	0x40020440
 8005f70:	40020458 	.word	0x40020458
 8005f74:	40020470 	.word	0x40020470
 8005f78:	40020488 	.word	0x40020488
 8005f7c:	400204a0 	.word	0x400204a0
 8005f80:	400204b8 	.word	0x400204b8
 8005f84:	58025408 	.word	0x58025408
 8005f88:	5802541c 	.word	0x5802541c
 8005f8c:	58025430 	.word	0x58025430
 8005f90:	58025444 	.word	0x58025444
 8005f94:	58025458 	.word	0x58025458
 8005f98:	5802546c 	.word	0x5802546c
 8005f9c:	58025480 	.word	0x58025480
 8005fa0:	58025494 	.word	0x58025494

08005fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e237      	b.n	8006426 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d004      	beq.n	8005fcc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2280      	movs	r2, #128	@ 0x80
 8005fc6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e22c      	b.n	8006426 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a5c      	ldr	r2, [pc, #368]	@ (8006144 <HAL_DMA_Abort_IT+0x1a0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d04a      	beq.n	800606c <HAL_DMA_Abort_IT+0xc8>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a5b      	ldr	r2, [pc, #364]	@ (8006148 <HAL_DMA_Abort_IT+0x1a4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d045      	beq.n	800606c <HAL_DMA_Abort_IT+0xc8>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a59      	ldr	r2, [pc, #356]	@ (800614c <HAL_DMA_Abort_IT+0x1a8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d040      	beq.n	800606c <HAL_DMA_Abort_IT+0xc8>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a58      	ldr	r2, [pc, #352]	@ (8006150 <HAL_DMA_Abort_IT+0x1ac>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d03b      	beq.n	800606c <HAL_DMA_Abort_IT+0xc8>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a56      	ldr	r2, [pc, #344]	@ (8006154 <HAL_DMA_Abort_IT+0x1b0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d036      	beq.n	800606c <HAL_DMA_Abort_IT+0xc8>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a55      	ldr	r2, [pc, #340]	@ (8006158 <HAL_DMA_Abort_IT+0x1b4>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d031      	beq.n	800606c <HAL_DMA_Abort_IT+0xc8>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a53      	ldr	r2, [pc, #332]	@ (800615c <HAL_DMA_Abort_IT+0x1b8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d02c      	beq.n	800606c <HAL_DMA_Abort_IT+0xc8>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a52      	ldr	r2, [pc, #328]	@ (8006160 <HAL_DMA_Abort_IT+0x1bc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d027      	beq.n	800606c <HAL_DMA_Abort_IT+0xc8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a50      	ldr	r2, [pc, #320]	@ (8006164 <HAL_DMA_Abort_IT+0x1c0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d022      	beq.n	800606c <HAL_DMA_Abort_IT+0xc8>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a4f      	ldr	r2, [pc, #316]	@ (8006168 <HAL_DMA_Abort_IT+0x1c4>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d01d      	beq.n	800606c <HAL_DMA_Abort_IT+0xc8>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a4d      	ldr	r2, [pc, #308]	@ (800616c <HAL_DMA_Abort_IT+0x1c8>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d018      	beq.n	800606c <HAL_DMA_Abort_IT+0xc8>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a4c      	ldr	r2, [pc, #304]	@ (8006170 <HAL_DMA_Abort_IT+0x1cc>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d013      	beq.n	800606c <HAL_DMA_Abort_IT+0xc8>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a4a      	ldr	r2, [pc, #296]	@ (8006174 <HAL_DMA_Abort_IT+0x1d0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00e      	beq.n	800606c <HAL_DMA_Abort_IT+0xc8>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a49      	ldr	r2, [pc, #292]	@ (8006178 <HAL_DMA_Abort_IT+0x1d4>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d009      	beq.n	800606c <HAL_DMA_Abort_IT+0xc8>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a47      	ldr	r2, [pc, #284]	@ (800617c <HAL_DMA_Abort_IT+0x1d8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d004      	beq.n	800606c <HAL_DMA_Abort_IT+0xc8>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a46      	ldr	r2, [pc, #280]	@ (8006180 <HAL_DMA_Abort_IT+0x1dc>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d101      	bne.n	8006070 <HAL_DMA_Abort_IT+0xcc>
 800606c:	2301      	movs	r3, #1
 800606e:	e000      	b.n	8006072 <HAL_DMA_Abort_IT+0xce>
 8006070:	2300      	movs	r3, #0
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 8086 	beq.w	8006184 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2204      	movs	r2, #4
 800607c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a2f      	ldr	r2, [pc, #188]	@ (8006144 <HAL_DMA_Abort_IT+0x1a0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d04a      	beq.n	8006120 <HAL_DMA_Abort_IT+0x17c>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a2e      	ldr	r2, [pc, #184]	@ (8006148 <HAL_DMA_Abort_IT+0x1a4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d045      	beq.n	8006120 <HAL_DMA_Abort_IT+0x17c>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a2c      	ldr	r2, [pc, #176]	@ (800614c <HAL_DMA_Abort_IT+0x1a8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d040      	beq.n	8006120 <HAL_DMA_Abort_IT+0x17c>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a2b      	ldr	r2, [pc, #172]	@ (8006150 <HAL_DMA_Abort_IT+0x1ac>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d03b      	beq.n	8006120 <HAL_DMA_Abort_IT+0x17c>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a29      	ldr	r2, [pc, #164]	@ (8006154 <HAL_DMA_Abort_IT+0x1b0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d036      	beq.n	8006120 <HAL_DMA_Abort_IT+0x17c>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a28      	ldr	r2, [pc, #160]	@ (8006158 <HAL_DMA_Abort_IT+0x1b4>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d031      	beq.n	8006120 <HAL_DMA_Abort_IT+0x17c>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a26      	ldr	r2, [pc, #152]	@ (800615c <HAL_DMA_Abort_IT+0x1b8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d02c      	beq.n	8006120 <HAL_DMA_Abort_IT+0x17c>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a25      	ldr	r2, [pc, #148]	@ (8006160 <HAL_DMA_Abort_IT+0x1bc>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d027      	beq.n	8006120 <HAL_DMA_Abort_IT+0x17c>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a23      	ldr	r2, [pc, #140]	@ (8006164 <HAL_DMA_Abort_IT+0x1c0>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d022      	beq.n	8006120 <HAL_DMA_Abort_IT+0x17c>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a22      	ldr	r2, [pc, #136]	@ (8006168 <HAL_DMA_Abort_IT+0x1c4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d01d      	beq.n	8006120 <HAL_DMA_Abort_IT+0x17c>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a20      	ldr	r2, [pc, #128]	@ (800616c <HAL_DMA_Abort_IT+0x1c8>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d018      	beq.n	8006120 <HAL_DMA_Abort_IT+0x17c>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a1f      	ldr	r2, [pc, #124]	@ (8006170 <HAL_DMA_Abort_IT+0x1cc>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d013      	beq.n	8006120 <HAL_DMA_Abort_IT+0x17c>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006174 <HAL_DMA_Abort_IT+0x1d0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00e      	beq.n	8006120 <HAL_DMA_Abort_IT+0x17c>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a1c      	ldr	r2, [pc, #112]	@ (8006178 <HAL_DMA_Abort_IT+0x1d4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d009      	beq.n	8006120 <HAL_DMA_Abort_IT+0x17c>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a1a      	ldr	r2, [pc, #104]	@ (800617c <HAL_DMA_Abort_IT+0x1d8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d004      	beq.n	8006120 <HAL_DMA_Abort_IT+0x17c>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a19      	ldr	r2, [pc, #100]	@ (8006180 <HAL_DMA_Abort_IT+0x1dc>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d108      	bne.n	8006132 <HAL_DMA_Abort_IT+0x18e>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 0201 	bic.w	r2, r2, #1
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	e178      	b.n	8006424 <HAL_DMA_Abort_IT+0x480>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f022 0201 	bic.w	r2, r2, #1
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	e16f      	b.n	8006424 <HAL_DMA_Abort_IT+0x480>
 8006144:	40020010 	.word	0x40020010
 8006148:	40020028 	.word	0x40020028
 800614c:	40020040 	.word	0x40020040
 8006150:	40020058 	.word	0x40020058
 8006154:	40020070 	.word	0x40020070
 8006158:	40020088 	.word	0x40020088
 800615c:	400200a0 	.word	0x400200a0
 8006160:	400200b8 	.word	0x400200b8
 8006164:	40020410 	.word	0x40020410
 8006168:	40020428 	.word	0x40020428
 800616c:	40020440 	.word	0x40020440
 8006170:	40020458 	.word	0x40020458
 8006174:	40020470 	.word	0x40020470
 8006178:	40020488 	.word	0x40020488
 800617c:	400204a0 	.word	0x400204a0
 8006180:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 020e 	bic.w	r2, r2, #14
 8006192:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a6c      	ldr	r2, [pc, #432]	@ (800634c <HAL_DMA_Abort_IT+0x3a8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d04a      	beq.n	8006234 <HAL_DMA_Abort_IT+0x290>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a6b      	ldr	r2, [pc, #428]	@ (8006350 <HAL_DMA_Abort_IT+0x3ac>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d045      	beq.n	8006234 <HAL_DMA_Abort_IT+0x290>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a69      	ldr	r2, [pc, #420]	@ (8006354 <HAL_DMA_Abort_IT+0x3b0>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d040      	beq.n	8006234 <HAL_DMA_Abort_IT+0x290>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a68      	ldr	r2, [pc, #416]	@ (8006358 <HAL_DMA_Abort_IT+0x3b4>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d03b      	beq.n	8006234 <HAL_DMA_Abort_IT+0x290>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a66      	ldr	r2, [pc, #408]	@ (800635c <HAL_DMA_Abort_IT+0x3b8>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d036      	beq.n	8006234 <HAL_DMA_Abort_IT+0x290>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a65      	ldr	r2, [pc, #404]	@ (8006360 <HAL_DMA_Abort_IT+0x3bc>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d031      	beq.n	8006234 <HAL_DMA_Abort_IT+0x290>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a63      	ldr	r2, [pc, #396]	@ (8006364 <HAL_DMA_Abort_IT+0x3c0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d02c      	beq.n	8006234 <HAL_DMA_Abort_IT+0x290>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a62      	ldr	r2, [pc, #392]	@ (8006368 <HAL_DMA_Abort_IT+0x3c4>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d027      	beq.n	8006234 <HAL_DMA_Abort_IT+0x290>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a60      	ldr	r2, [pc, #384]	@ (800636c <HAL_DMA_Abort_IT+0x3c8>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d022      	beq.n	8006234 <HAL_DMA_Abort_IT+0x290>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a5f      	ldr	r2, [pc, #380]	@ (8006370 <HAL_DMA_Abort_IT+0x3cc>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d01d      	beq.n	8006234 <HAL_DMA_Abort_IT+0x290>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a5d      	ldr	r2, [pc, #372]	@ (8006374 <HAL_DMA_Abort_IT+0x3d0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d018      	beq.n	8006234 <HAL_DMA_Abort_IT+0x290>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a5c      	ldr	r2, [pc, #368]	@ (8006378 <HAL_DMA_Abort_IT+0x3d4>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d013      	beq.n	8006234 <HAL_DMA_Abort_IT+0x290>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a5a      	ldr	r2, [pc, #360]	@ (800637c <HAL_DMA_Abort_IT+0x3d8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d00e      	beq.n	8006234 <HAL_DMA_Abort_IT+0x290>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a59      	ldr	r2, [pc, #356]	@ (8006380 <HAL_DMA_Abort_IT+0x3dc>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d009      	beq.n	8006234 <HAL_DMA_Abort_IT+0x290>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a57      	ldr	r2, [pc, #348]	@ (8006384 <HAL_DMA_Abort_IT+0x3e0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d004      	beq.n	8006234 <HAL_DMA_Abort_IT+0x290>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a56      	ldr	r2, [pc, #344]	@ (8006388 <HAL_DMA_Abort_IT+0x3e4>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d108      	bne.n	8006246 <HAL_DMA_Abort_IT+0x2a2>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0201 	bic.w	r2, r2, #1
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	e007      	b.n	8006256 <HAL_DMA_Abort_IT+0x2b2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 0201 	bic.w	r2, r2, #1
 8006254:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a3c      	ldr	r2, [pc, #240]	@ (800634c <HAL_DMA_Abort_IT+0x3a8>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d072      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a3a      	ldr	r2, [pc, #232]	@ (8006350 <HAL_DMA_Abort_IT+0x3ac>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d06d      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a39      	ldr	r2, [pc, #228]	@ (8006354 <HAL_DMA_Abort_IT+0x3b0>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d068      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a37      	ldr	r2, [pc, #220]	@ (8006358 <HAL_DMA_Abort_IT+0x3b4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d063      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a36      	ldr	r2, [pc, #216]	@ (800635c <HAL_DMA_Abort_IT+0x3b8>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d05e      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a34      	ldr	r2, [pc, #208]	@ (8006360 <HAL_DMA_Abort_IT+0x3bc>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d059      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a33      	ldr	r2, [pc, #204]	@ (8006364 <HAL_DMA_Abort_IT+0x3c0>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d054      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a31      	ldr	r2, [pc, #196]	@ (8006368 <HAL_DMA_Abort_IT+0x3c4>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d04f      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a30      	ldr	r2, [pc, #192]	@ (800636c <HAL_DMA_Abort_IT+0x3c8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d04a      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a2e      	ldr	r2, [pc, #184]	@ (8006370 <HAL_DMA_Abort_IT+0x3cc>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d045      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a2d      	ldr	r2, [pc, #180]	@ (8006374 <HAL_DMA_Abort_IT+0x3d0>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d040      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a2b      	ldr	r2, [pc, #172]	@ (8006378 <HAL_DMA_Abort_IT+0x3d4>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d03b      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a2a      	ldr	r2, [pc, #168]	@ (800637c <HAL_DMA_Abort_IT+0x3d8>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d036      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a28      	ldr	r2, [pc, #160]	@ (8006380 <HAL_DMA_Abort_IT+0x3dc>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d031      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a27      	ldr	r2, [pc, #156]	@ (8006384 <HAL_DMA_Abort_IT+0x3e0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d02c      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a25      	ldr	r2, [pc, #148]	@ (8006388 <HAL_DMA_Abort_IT+0x3e4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d027      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a24      	ldr	r2, [pc, #144]	@ (800638c <HAL_DMA_Abort_IT+0x3e8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d022      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a22      	ldr	r2, [pc, #136]	@ (8006390 <HAL_DMA_Abort_IT+0x3ec>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d01d      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a21      	ldr	r2, [pc, #132]	@ (8006394 <HAL_DMA_Abort_IT+0x3f0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d018      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1f      	ldr	r2, [pc, #124]	@ (8006398 <HAL_DMA_Abort_IT+0x3f4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d013      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a1e      	ldr	r2, [pc, #120]	@ (800639c <HAL_DMA_Abort_IT+0x3f8>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d00e      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a1c      	ldr	r2, [pc, #112]	@ (80063a0 <HAL_DMA_Abort_IT+0x3fc>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d009      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a1b      	ldr	r2, [pc, #108]	@ (80063a4 <HAL_DMA_Abort_IT+0x400>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d004      	beq.n	8006346 <HAL_DMA_Abort_IT+0x3a2>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a19      	ldr	r2, [pc, #100]	@ (80063a8 <HAL_DMA_Abort_IT+0x404>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d132      	bne.n	80063ac <HAL_DMA_Abort_IT+0x408>
 8006346:	2301      	movs	r3, #1
 8006348:	e031      	b.n	80063ae <HAL_DMA_Abort_IT+0x40a>
 800634a:	bf00      	nop
 800634c:	40020010 	.word	0x40020010
 8006350:	40020028 	.word	0x40020028
 8006354:	40020040 	.word	0x40020040
 8006358:	40020058 	.word	0x40020058
 800635c:	40020070 	.word	0x40020070
 8006360:	40020088 	.word	0x40020088
 8006364:	400200a0 	.word	0x400200a0
 8006368:	400200b8 	.word	0x400200b8
 800636c:	40020410 	.word	0x40020410
 8006370:	40020428 	.word	0x40020428
 8006374:	40020440 	.word	0x40020440
 8006378:	40020458 	.word	0x40020458
 800637c:	40020470 	.word	0x40020470
 8006380:	40020488 	.word	0x40020488
 8006384:	400204a0 	.word	0x400204a0
 8006388:	400204b8 	.word	0x400204b8
 800638c:	58025408 	.word	0x58025408
 8006390:	5802541c 	.word	0x5802541c
 8006394:	58025430 	.word	0x58025430
 8006398:	58025444 	.word	0x58025444
 800639c:	58025458 	.word	0x58025458
 80063a0:	5802546c 	.word	0x5802546c
 80063a4:	58025480 	.word	0x58025480
 80063a8:	58025494 	.word	0x58025494
 80063ac:	2300      	movs	r3, #0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d028      	beq.n	8006404 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80063c0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063c6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063cc:	f003 031f 	and.w	r3, r3, #31
 80063d0:	2201      	movs	r2, #1
 80063d2:	409a      	lsls	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80063e0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00c      	beq.n	8006404 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80063f8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006402:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop

08006430 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08a      	sub	sp, #40	@ 0x28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800643c:	4b67      	ldr	r3, [pc, #412]	@ (80065dc <HAL_DMA_IRQHandler+0x1ac>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a67      	ldr	r2, [pc, #412]	@ (80065e0 <HAL_DMA_IRQHandler+0x1b0>)
 8006442:	fba2 2303 	umull	r2, r3, r2, r3
 8006446:	0a9b      	lsrs	r3, r3, #10
 8006448:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800644e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006454:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a5f      	ldr	r2, [pc, #380]	@ (80065e4 <HAL_DMA_IRQHandler+0x1b4>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d04a      	beq.n	8006502 <HAL_DMA_IRQHandler+0xd2>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a5d      	ldr	r2, [pc, #372]	@ (80065e8 <HAL_DMA_IRQHandler+0x1b8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d045      	beq.n	8006502 <HAL_DMA_IRQHandler+0xd2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a5c      	ldr	r2, [pc, #368]	@ (80065ec <HAL_DMA_IRQHandler+0x1bc>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d040      	beq.n	8006502 <HAL_DMA_IRQHandler+0xd2>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a5a      	ldr	r2, [pc, #360]	@ (80065f0 <HAL_DMA_IRQHandler+0x1c0>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d03b      	beq.n	8006502 <HAL_DMA_IRQHandler+0xd2>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a59      	ldr	r2, [pc, #356]	@ (80065f4 <HAL_DMA_IRQHandler+0x1c4>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d036      	beq.n	8006502 <HAL_DMA_IRQHandler+0xd2>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a57      	ldr	r2, [pc, #348]	@ (80065f8 <HAL_DMA_IRQHandler+0x1c8>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d031      	beq.n	8006502 <HAL_DMA_IRQHandler+0xd2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a56      	ldr	r2, [pc, #344]	@ (80065fc <HAL_DMA_IRQHandler+0x1cc>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d02c      	beq.n	8006502 <HAL_DMA_IRQHandler+0xd2>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a54      	ldr	r2, [pc, #336]	@ (8006600 <HAL_DMA_IRQHandler+0x1d0>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d027      	beq.n	8006502 <HAL_DMA_IRQHandler+0xd2>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a53      	ldr	r2, [pc, #332]	@ (8006604 <HAL_DMA_IRQHandler+0x1d4>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d022      	beq.n	8006502 <HAL_DMA_IRQHandler+0xd2>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a51      	ldr	r2, [pc, #324]	@ (8006608 <HAL_DMA_IRQHandler+0x1d8>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d01d      	beq.n	8006502 <HAL_DMA_IRQHandler+0xd2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a50      	ldr	r2, [pc, #320]	@ (800660c <HAL_DMA_IRQHandler+0x1dc>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d018      	beq.n	8006502 <HAL_DMA_IRQHandler+0xd2>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a4e      	ldr	r2, [pc, #312]	@ (8006610 <HAL_DMA_IRQHandler+0x1e0>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d013      	beq.n	8006502 <HAL_DMA_IRQHandler+0xd2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a4d      	ldr	r2, [pc, #308]	@ (8006614 <HAL_DMA_IRQHandler+0x1e4>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d00e      	beq.n	8006502 <HAL_DMA_IRQHandler+0xd2>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a4b      	ldr	r2, [pc, #300]	@ (8006618 <HAL_DMA_IRQHandler+0x1e8>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d009      	beq.n	8006502 <HAL_DMA_IRQHandler+0xd2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a4a      	ldr	r2, [pc, #296]	@ (800661c <HAL_DMA_IRQHandler+0x1ec>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d004      	beq.n	8006502 <HAL_DMA_IRQHandler+0xd2>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a48      	ldr	r2, [pc, #288]	@ (8006620 <HAL_DMA_IRQHandler+0x1f0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d101      	bne.n	8006506 <HAL_DMA_IRQHandler+0xd6>
 8006502:	2301      	movs	r3, #1
 8006504:	e000      	b.n	8006508 <HAL_DMA_IRQHandler+0xd8>
 8006506:	2300      	movs	r3, #0
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 842b 	beq.w	8006d64 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006512:	f003 031f 	and.w	r3, r3, #31
 8006516:	2208      	movs	r2, #8
 8006518:	409a      	lsls	r2, r3
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	4013      	ands	r3, r2
 800651e:	2b00      	cmp	r3, #0
 8006520:	f000 80a2 	beq.w	8006668 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a2e      	ldr	r2, [pc, #184]	@ (80065e4 <HAL_DMA_IRQHandler+0x1b4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d04a      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x194>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a2d      	ldr	r2, [pc, #180]	@ (80065e8 <HAL_DMA_IRQHandler+0x1b8>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d045      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x194>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a2b      	ldr	r2, [pc, #172]	@ (80065ec <HAL_DMA_IRQHandler+0x1bc>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d040      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x194>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a2a      	ldr	r2, [pc, #168]	@ (80065f0 <HAL_DMA_IRQHandler+0x1c0>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d03b      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x194>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a28      	ldr	r2, [pc, #160]	@ (80065f4 <HAL_DMA_IRQHandler+0x1c4>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d036      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x194>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a27      	ldr	r2, [pc, #156]	@ (80065f8 <HAL_DMA_IRQHandler+0x1c8>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d031      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x194>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a25      	ldr	r2, [pc, #148]	@ (80065fc <HAL_DMA_IRQHandler+0x1cc>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d02c      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x194>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a24      	ldr	r2, [pc, #144]	@ (8006600 <HAL_DMA_IRQHandler+0x1d0>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d027      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x194>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a22      	ldr	r2, [pc, #136]	@ (8006604 <HAL_DMA_IRQHandler+0x1d4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d022      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x194>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a21      	ldr	r2, [pc, #132]	@ (8006608 <HAL_DMA_IRQHandler+0x1d8>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d01d      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x194>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a1f      	ldr	r2, [pc, #124]	@ (800660c <HAL_DMA_IRQHandler+0x1dc>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d018      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x194>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a1e      	ldr	r2, [pc, #120]	@ (8006610 <HAL_DMA_IRQHandler+0x1e0>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d013      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x194>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a1c      	ldr	r2, [pc, #112]	@ (8006614 <HAL_DMA_IRQHandler+0x1e4>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00e      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x194>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006618 <HAL_DMA_IRQHandler+0x1e8>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d009      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x194>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a19      	ldr	r2, [pc, #100]	@ (800661c <HAL_DMA_IRQHandler+0x1ec>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d004      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x194>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a18      	ldr	r2, [pc, #96]	@ (8006620 <HAL_DMA_IRQHandler+0x1f0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d12f      	bne.n	8006624 <HAL_DMA_IRQHandler+0x1f4>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0304 	and.w	r3, r3, #4
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	bf14      	ite	ne
 80065d2:	2301      	movne	r3, #1
 80065d4:	2300      	moveq	r3, #0
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	e02e      	b.n	8006638 <HAL_DMA_IRQHandler+0x208>
 80065da:	bf00      	nop
 80065dc:	24000000 	.word	0x24000000
 80065e0:	1b4e81b5 	.word	0x1b4e81b5
 80065e4:	40020010 	.word	0x40020010
 80065e8:	40020028 	.word	0x40020028
 80065ec:	40020040 	.word	0x40020040
 80065f0:	40020058 	.word	0x40020058
 80065f4:	40020070 	.word	0x40020070
 80065f8:	40020088 	.word	0x40020088
 80065fc:	400200a0 	.word	0x400200a0
 8006600:	400200b8 	.word	0x400200b8
 8006604:	40020410 	.word	0x40020410
 8006608:	40020428 	.word	0x40020428
 800660c:	40020440 	.word	0x40020440
 8006610:	40020458 	.word	0x40020458
 8006614:	40020470 	.word	0x40020470
 8006618:	40020488 	.word	0x40020488
 800661c:	400204a0 	.word	0x400204a0
 8006620:	400204b8 	.word	0x400204b8
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0308 	and.w	r3, r3, #8
 800662e:	2b00      	cmp	r3, #0
 8006630:	bf14      	ite	ne
 8006632:	2301      	movne	r3, #1
 8006634:	2300      	moveq	r3, #0
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d015      	beq.n	8006668 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0204 	bic.w	r2, r2, #4
 800664a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006650:	f003 031f 	and.w	r3, r3, #31
 8006654:	2208      	movs	r2, #8
 8006656:	409a      	lsls	r2, r3
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006660:	f043 0201 	orr.w	r2, r3, #1
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800666c:	f003 031f 	and.w	r3, r3, #31
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	fa22 f303 	lsr.w	r3, r2, r3
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d06e      	beq.n	800675c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a69      	ldr	r2, [pc, #420]	@ (8006828 <HAL_DMA_IRQHandler+0x3f8>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d04a      	beq.n	800671e <HAL_DMA_IRQHandler+0x2ee>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a67      	ldr	r2, [pc, #412]	@ (800682c <HAL_DMA_IRQHandler+0x3fc>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d045      	beq.n	800671e <HAL_DMA_IRQHandler+0x2ee>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a66      	ldr	r2, [pc, #408]	@ (8006830 <HAL_DMA_IRQHandler+0x400>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d040      	beq.n	800671e <HAL_DMA_IRQHandler+0x2ee>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a64      	ldr	r2, [pc, #400]	@ (8006834 <HAL_DMA_IRQHandler+0x404>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d03b      	beq.n	800671e <HAL_DMA_IRQHandler+0x2ee>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a63      	ldr	r2, [pc, #396]	@ (8006838 <HAL_DMA_IRQHandler+0x408>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d036      	beq.n	800671e <HAL_DMA_IRQHandler+0x2ee>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a61      	ldr	r2, [pc, #388]	@ (800683c <HAL_DMA_IRQHandler+0x40c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d031      	beq.n	800671e <HAL_DMA_IRQHandler+0x2ee>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a60      	ldr	r2, [pc, #384]	@ (8006840 <HAL_DMA_IRQHandler+0x410>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d02c      	beq.n	800671e <HAL_DMA_IRQHandler+0x2ee>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a5e      	ldr	r2, [pc, #376]	@ (8006844 <HAL_DMA_IRQHandler+0x414>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d027      	beq.n	800671e <HAL_DMA_IRQHandler+0x2ee>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a5d      	ldr	r2, [pc, #372]	@ (8006848 <HAL_DMA_IRQHandler+0x418>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d022      	beq.n	800671e <HAL_DMA_IRQHandler+0x2ee>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a5b      	ldr	r2, [pc, #364]	@ (800684c <HAL_DMA_IRQHandler+0x41c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d01d      	beq.n	800671e <HAL_DMA_IRQHandler+0x2ee>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a5a      	ldr	r2, [pc, #360]	@ (8006850 <HAL_DMA_IRQHandler+0x420>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d018      	beq.n	800671e <HAL_DMA_IRQHandler+0x2ee>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a58      	ldr	r2, [pc, #352]	@ (8006854 <HAL_DMA_IRQHandler+0x424>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d013      	beq.n	800671e <HAL_DMA_IRQHandler+0x2ee>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a57      	ldr	r2, [pc, #348]	@ (8006858 <HAL_DMA_IRQHandler+0x428>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d00e      	beq.n	800671e <HAL_DMA_IRQHandler+0x2ee>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a55      	ldr	r2, [pc, #340]	@ (800685c <HAL_DMA_IRQHandler+0x42c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d009      	beq.n	800671e <HAL_DMA_IRQHandler+0x2ee>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a54      	ldr	r2, [pc, #336]	@ (8006860 <HAL_DMA_IRQHandler+0x430>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d004      	beq.n	800671e <HAL_DMA_IRQHandler+0x2ee>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a52      	ldr	r2, [pc, #328]	@ (8006864 <HAL_DMA_IRQHandler+0x434>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d10a      	bne.n	8006734 <HAL_DMA_IRQHandler+0x304>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006728:	2b00      	cmp	r3, #0
 800672a:	bf14      	ite	ne
 800672c:	2301      	movne	r3, #1
 800672e:	2300      	moveq	r3, #0
 8006730:	b2db      	uxtb	r3, r3
 8006732:	e003      	b.n	800673c <HAL_DMA_IRQHandler+0x30c>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2300      	movs	r3, #0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00d      	beq.n	800675c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006744:	f003 031f 	and.w	r3, r3, #31
 8006748:	2201      	movs	r2, #1
 800674a:	409a      	lsls	r2, r3
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006754:	f043 0202 	orr.w	r2, r3, #2
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006760:	f003 031f 	and.w	r3, r3, #31
 8006764:	2204      	movs	r2, #4
 8006766:	409a      	lsls	r2, r3
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	4013      	ands	r3, r2
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 808f 	beq.w	8006890 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a2c      	ldr	r2, [pc, #176]	@ (8006828 <HAL_DMA_IRQHandler+0x3f8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d04a      	beq.n	8006812 <HAL_DMA_IRQHandler+0x3e2>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a2a      	ldr	r2, [pc, #168]	@ (800682c <HAL_DMA_IRQHandler+0x3fc>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d045      	beq.n	8006812 <HAL_DMA_IRQHandler+0x3e2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a29      	ldr	r2, [pc, #164]	@ (8006830 <HAL_DMA_IRQHandler+0x400>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d040      	beq.n	8006812 <HAL_DMA_IRQHandler+0x3e2>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a27      	ldr	r2, [pc, #156]	@ (8006834 <HAL_DMA_IRQHandler+0x404>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d03b      	beq.n	8006812 <HAL_DMA_IRQHandler+0x3e2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a26      	ldr	r2, [pc, #152]	@ (8006838 <HAL_DMA_IRQHandler+0x408>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d036      	beq.n	8006812 <HAL_DMA_IRQHandler+0x3e2>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a24      	ldr	r2, [pc, #144]	@ (800683c <HAL_DMA_IRQHandler+0x40c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d031      	beq.n	8006812 <HAL_DMA_IRQHandler+0x3e2>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a23      	ldr	r2, [pc, #140]	@ (8006840 <HAL_DMA_IRQHandler+0x410>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d02c      	beq.n	8006812 <HAL_DMA_IRQHandler+0x3e2>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a21      	ldr	r2, [pc, #132]	@ (8006844 <HAL_DMA_IRQHandler+0x414>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d027      	beq.n	8006812 <HAL_DMA_IRQHandler+0x3e2>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a20      	ldr	r2, [pc, #128]	@ (8006848 <HAL_DMA_IRQHandler+0x418>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d022      	beq.n	8006812 <HAL_DMA_IRQHandler+0x3e2>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a1e      	ldr	r2, [pc, #120]	@ (800684c <HAL_DMA_IRQHandler+0x41c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d01d      	beq.n	8006812 <HAL_DMA_IRQHandler+0x3e2>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a1d      	ldr	r2, [pc, #116]	@ (8006850 <HAL_DMA_IRQHandler+0x420>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d018      	beq.n	8006812 <HAL_DMA_IRQHandler+0x3e2>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006854 <HAL_DMA_IRQHandler+0x424>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d013      	beq.n	8006812 <HAL_DMA_IRQHandler+0x3e2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a1a      	ldr	r2, [pc, #104]	@ (8006858 <HAL_DMA_IRQHandler+0x428>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d00e      	beq.n	8006812 <HAL_DMA_IRQHandler+0x3e2>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a18      	ldr	r2, [pc, #96]	@ (800685c <HAL_DMA_IRQHandler+0x42c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d009      	beq.n	8006812 <HAL_DMA_IRQHandler+0x3e2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a17      	ldr	r2, [pc, #92]	@ (8006860 <HAL_DMA_IRQHandler+0x430>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d004      	beq.n	8006812 <HAL_DMA_IRQHandler+0x3e2>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a15      	ldr	r2, [pc, #84]	@ (8006864 <HAL_DMA_IRQHandler+0x434>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d12a      	bne.n	8006868 <HAL_DMA_IRQHandler+0x438>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	bf14      	ite	ne
 8006820:	2301      	movne	r3, #1
 8006822:	2300      	moveq	r3, #0
 8006824:	b2db      	uxtb	r3, r3
 8006826:	e023      	b.n	8006870 <HAL_DMA_IRQHandler+0x440>
 8006828:	40020010 	.word	0x40020010
 800682c:	40020028 	.word	0x40020028
 8006830:	40020040 	.word	0x40020040
 8006834:	40020058 	.word	0x40020058
 8006838:	40020070 	.word	0x40020070
 800683c:	40020088 	.word	0x40020088
 8006840:	400200a0 	.word	0x400200a0
 8006844:	400200b8 	.word	0x400200b8
 8006848:	40020410 	.word	0x40020410
 800684c:	40020428 	.word	0x40020428
 8006850:	40020440 	.word	0x40020440
 8006854:	40020458 	.word	0x40020458
 8006858:	40020470 	.word	0x40020470
 800685c:	40020488 	.word	0x40020488
 8006860:	400204a0 	.word	0x400204a0
 8006864:	400204b8 	.word	0x400204b8
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2300      	movs	r3, #0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00d      	beq.n	8006890 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006878:	f003 031f 	and.w	r3, r3, #31
 800687c:	2204      	movs	r2, #4
 800687e:	409a      	lsls	r2, r3
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006888:	f043 0204 	orr.w	r2, r3, #4
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006894:	f003 031f 	and.w	r3, r3, #31
 8006898:	2210      	movs	r2, #16
 800689a:	409a      	lsls	r2, r3
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	4013      	ands	r3, r2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 80a6 	beq.w	80069f2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a85      	ldr	r2, [pc, #532]	@ (8006ac0 <HAL_DMA_IRQHandler+0x690>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d04a      	beq.n	8006946 <HAL_DMA_IRQHandler+0x516>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a83      	ldr	r2, [pc, #524]	@ (8006ac4 <HAL_DMA_IRQHandler+0x694>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d045      	beq.n	8006946 <HAL_DMA_IRQHandler+0x516>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a82      	ldr	r2, [pc, #520]	@ (8006ac8 <HAL_DMA_IRQHandler+0x698>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d040      	beq.n	8006946 <HAL_DMA_IRQHandler+0x516>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a80      	ldr	r2, [pc, #512]	@ (8006acc <HAL_DMA_IRQHandler+0x69c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d03b      	beq.n	8006946 <HAL_DMA_IRQHandler+0x516>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a7f      	ldr	r2, [pc, #508]	@ (8006ad0 <HAL_DMA_IRQHandler+0x6a0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d036      	beq.n	8006946 <HAL_DMA_IRQHandler+0x516>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a7d      	ldr	r2, [pc, #500]	@ (8006ad4 <HAL_DMA_IRQHandler+0x6a4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d031      	beq.n	8006946 <HAL_DMA_IRQHandler+0x516>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a7c      	ldr	r2, [pc, #496]	@ (8006ad8 <HAL_DMA_IRQHandler+0x6a8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d02c      	beq.n	8006946 <HAL_DMA_IRQHandler+0x516>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a7a      	ldr	r2, [pc, #488]	@ (8006adc <HAL_DMA_IRQHandler+0x6ac>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d027      	beq.n	8006946 <HAL_DMA_IRQHandler+0x516>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a79      	ldr	r2, [pc, #484]	@ (8006ae0 <HAL_DMA_IRQHandler+0x6b0>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d022      	beq.n	8006946 <HAL_DMA_IRQHandler+0x516>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a77      	ldr	r2, [pc, #476]	@ (8006ae4 <HAL_DMA_IRQHandler+0x6b4>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d01d      	beq.n	8006946 <HAL_DMA_IRQHandler+0x516>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a76      	ldr	r2, [pc, #472]	@ (8006ae8 <HAL_DMA_IRQHandler+0x6b8>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d018      	beq.n	8006946 <HAL_DMA_IRQHandler+0x516>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a74      	ldr	r2, [pc, #464]	@ (8006aec <HAL_DMA_IRQHandler+0x6bc>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d013      	beq.n	8006946 <HAL_DMA_IRQHandler+0x516>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a73      	ldr	r2, [pc, #460]	@ (8006af0 <HAL_DMA_IRQHandler+0x6c0>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00e      	beq.n	8006946 <HAL_DMA_IRQHandler+0x516>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a71      	ldr	r2, [pc, #452]	@ (8006af4 <HAL_DMA_IRQHandler+0x6c4>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d009      	beq.n	8006946 <HAL_DMA_IRQHandler+0x516>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a70      	ldr	r2, [pc, #448]	@ (8006af8 <HAL_DMA_IRQHandler+0x6c8>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d004      	beq.n	8006946 <HAL_DMA_IRQHandler+0x516>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a6e      	ldr	r2, [pc, #440]	@ (8006afc <HAL_DMA_IRQHandler+0x6cc>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d10a      	bne.n	800695c <HAL_DMA_IRQHandler+0x52c>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0308 	and.w	r3, r3, #8
 8006950:	2b00      	cmp	r3, #0
 8006952:	bf14      	ite	ne
 8006954:	2301      	movne	r3, #1
 8006956:	2300      	moveq	r3, #0
 8006958:	b2db      	uxtb	r3, r3
 800695a:	e009      	b.n	8006970 <HAL_DMA_IRQHandler+0x540>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0304 	and.w	r3, r3, #4
 8006966:	2b00      	cmp	r3, #0
 8006968:	bf14      	ite	ne
 800696a:	2301      	movne	r3, #1
 800696c:	2300      	moveq	r3, #0
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	d03e      	beq.n	80069f2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006978:	f003 031f 	and.w	r3, r3, #31
 800697c:	2210      	movs	r2, #16
 800697e:	409a      	lsls	r2, r3
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d018      	beq.n	80069c4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d108      	bne.n	80069b2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d024      	beq.n	80069f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	4798      	blx	r3
 80069b0:	e01f      	b.n	80069f2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d01b      	beq.n	80069f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	4798      	blx	r3
 80069c2:	e016      	b.n	80069f2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d107      	bne.n	80069e2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 0208 	bic.w	r2, r2, #8
 80069e0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069f6:	f003 031f 	and.w	r3, r3, #31
 80069fa:	2220      	movs	r2, #32
 80069fc:	409a      	lsls	r2, r3
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	4013      	ands	r3, r2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 8110 	beq.w	8006c28 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a2c      	ldr	r2, [pc, #176]	@ (8006ac0 <HAL_DMA_IRQHandler+0x690>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d04a      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x678>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a2b      	ldr	r2, [pc, #172]	@ (8006ac4 <HAL_DMA_IRQHandler+0x694>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d045      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x678>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a29      	ldr	r2, [pc, #164]	@ (8006ac8 <HAL_DMA_IRQHandler+0x698>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d040      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x678>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a28      	ldr	r2, [pc, #160]	@ (8006acc <HAL_DMA_IRQHandler+0x69c>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d03b      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x678>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a26      	ldr	r2, [pc, #152]	@ (8006ad0 <HAL_DMA_IRQHandler+0x6a0>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d036      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x678>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a25      	ldr	r2, [pc, #148]	@ (8006ad4 <HAL_DMA_IRQHandler+0x6a4>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d031      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x678>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a23      	ldr	r2, [pc, #140]	@ (8006ad8 <HAL_DMA_IRQHandler+0x6a8>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d02c      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x678>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a22      	ldr	r2, [pc, #136]	@ (8006adc <HAL_DMA_IRQHandler+0x6ac>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d027      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x678>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a20      	ldr	r2, [pc, #128]	@ (8006ae0 <HAL_DMA_IRQHandler+0x6b0>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d022      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x678>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a1f      	ldr	r2, [pc, #124]	@ (8006ae4 <HAL_DMA_IRQHandler+0x6b4>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d01d      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x678>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a1d      	ldr	r2, [pc, #116]	@ (8006ae8 <HAL_DMA_IRQHandler+0x6b8>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d018      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x678>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8006aec <HAL_DMA_IRQHandler+0x6bc>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d013      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x678>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a1a      	ldr	r2, [pc, #104]	@ (8006af0 <HAL_DMA_IRQHandler+0x6c0>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d00e      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x678>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a19      	ldr	r2, [pc, #100]	@ (8006af4 <HAL_DMA_IRQHandler+0x6c4>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d009      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x678>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a17      	ldr	r2, [pc, #92]	@ (8006af8 <HAL_DMA_IRQHandler+0x6c8>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d004      	beq.n	8006aa8 <HAL_DMA_IRQHandler+0x678>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a16      	ldr	r2, [pc, #88]	@ (8006afc <HAL_DMA_IRQHandler+0x6cc>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d12b      	bne.n	8006b00 <HAL_DMA_IRQHandler+0x6d0>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0310 	and.w	r3, r3, #16
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	bf14      	ite	ne
 8006ab6:	2301      	movne	r3, #1
 8006ab8:	2300      	moveq	r3, #0
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	e02a      	b.n	8006b14 <HAL_DMA_IRQHandler+0x6e4>
 8006abe:	bf00      	nop
 8006ac0:	40020010 	.word	0x40020010
 8006ac4:	40020028 	.word	0x40020028
 8006ac8:	40020040 	.word	0x40020040
 8006acc:	40020058 	.word	0x40020058
 8006ad0:	40020070 	.word	0x40020070
 8006ad4:	40020088 	.word	0x40020088
 8006ad8:	400200a0 	.word	0x400200a0
 8006adc:	400200b8 	.word	0x400200b8
 8006ae0:	40020410 	.word	0x40020410
 8006ae4:	40020428 	.word	0x40020428
 8006ae8:	40020440 	.word	0x40020440
 8006aec:	40020458 	.word	0x40020458
 8006af0:	40020470 	.word	0x40020470
 8006af4:	40020488 	.word	0x40020488
 8006af8:	400204a0 	.word	0x400204a0
 8006afc:	400204b8 	.word	0x400204b8
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	bf14      	ite	ne
 8006b0e:	2301      	movne	r3, #1
 8006b10:	2300      	moveq	r3, #0
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 8087 	beq.w	8006c28 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b1e:	f003 031f 	and.w	r3, r3, #31
 8006b22:	2220      	movs	r2, #32
 8006b24:	409a      	lsls	r2, r3
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d139      	bne.n	8006baa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0216 	bic.w	r2, r2, #22
 8006b44:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695a      	ldr	r2, [r3, #20]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b54:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d103      	bne.n	8006b66 <HAL_DMA_IRQHandler+0x736>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d007      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 0208 	bic.w	r2, r2, #8
 8006b74:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b7a:	f003 031f 	and.w	r3, r3, #31
 8006b7e:	223f      	movs	r2, #63	@ 0x3f
 8006b80:	409a      	lsls	r2, r3
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 834a 	beq.w	8007234 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	4798      	blx	r3
          }
          return;
 8006ba8:	e344      	b.n	8007234 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d018      	beq.n	8006bea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d108      	bne.n	8006bd8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d02c      	beq.n	8006c28 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	4798      	blx	r3
 8006bd6:	e027      	b.n	8006c28 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d023      	beq.n	8006c28 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	4798      	blx	r3
 8006be8:	e01e      	b.n	8006c28 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10f      	bne.n	8006c18 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0210 	bic.w	r2, r2, #16
 8006c06:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 8306 	beq.w	800723e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 8088 	beq.w	8006d50 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2204      	movs	r2, #4
 8006c44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a7a      	ldr	r2, [pc, #488]	@ (8006e38 <HAL_DMA_IRQHandler+0xa08>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d04a      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x8b8>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a79      	ldr	r2, [pc, #484]	@ (8006e3c <HAL_DMA_IRQHandler+0xa0c>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d045      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x8b8>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a77      	ldr	r2, [pc, #476]	@ (8006e40 <HAL_DMA_IRQHandler+0xa10>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d040      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x8b8>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a76      	ldr	r2, [pc, #472]	@ (8006e44 <HAL_DMA_IRQHandler+0xa14>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d03b      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x8b8>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a74      	ldr	r2, [pc, #464]	@ (8006e48 <HAL_DMA_IRQHandler+0xa18>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d036      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x8b8>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a73      	ldr	r2, [pc, #460]	@ (8006e4c <HAL_DMA_IRQHandler+0xa1c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d031      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x8b8>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a71      	ldr	r2, [pc, #452]	@ (8006e50 <HAL_DMA_IRQHandler+0xa20>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d02c      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x8b8>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a70      	ldr	r2, [pc, #448]	@ (8006e54 <HAL_DMA_IRQHandler+0xa24>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d027      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x8b8>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a6e      	ldr	r2, [pc, #440]	@ (8006e58 <HAL_DMA_IRQHandler+0xa28>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d022      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x8b8>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a6d      	ldr	r2, [pc, #436]	@ (8006e5c <HAL_DMA_IRQHandler+0xa2c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d01d      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x8b8>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a6b      	ldr	r2, [pc, #428]	@ (8006e60 <HAL_DMA_IRQHandler+0xa30>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d018      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x8b8>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a6a      	ldr	r2, [pc, #424]	@ (8006e64 <HAL_DMA_IRQHandler+0xa34>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d013      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x8b8>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a68      	ldr	r2, [pc, #416]	@ (8006e68 <HAL_DMA_IRQHandler+0xa38>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d00e      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x8b8>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a67      	ldr	r2, [pc, #412]	@ (8006e6c <HAL_DMA_IRQHandler+0xa3c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d009      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x8b8>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a65      	ldr	r2, [pc, #404]	@ (8006e70 <HAL_DMA_IRQHandler+0xa40>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d004      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x8b8>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a64      	ldr	r2, [pc, #400]	@ (8006e74 <HAL_DMA_IRQHandler+0xa44>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d108      	bne.n	8006cfa <HAL_DMA_IRQHandler+0x8ca>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f022 0201 	bic.w	r2, r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	e007      	b.n	8006d0a <HAL_DMA_IRQHandler+0x8da>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f022 0201 	bic.w	r2, r2, #1
 8006d08:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d307      	bcc.n	8006d26 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0301 	and.w	r3, r3, #1
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1f2      	bne.n	8006d0a <HAL_DMA_IRQHandler+0x8da>
 8006d24:	e000      	b.n	8006d28 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006d26:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d004      	beq.n	8006d40 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2203      	movs	r2, #3
 8006d3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006d3e:	e003      	b.n	8006d48 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 8272 	beq.w	800723e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	4798      	blx	r3
 8006d62:	e26c      	b.n	800723e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a43      	ldr	r2, [pc, #268]	@ (8006e78 <HAL_DMA_IRQHandler+0xa48>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d022      	beq.n	8006db4 <HAL_DMA_IRQHandler+0x984>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a42      	ldr	r2, [pc, #264]	@ (8006e7c <HAL_DMA_IRQHandler+0xa4c>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d01d      	beq.n	8006db4 <HAL_DMA_IRQHandler+0x984>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a40      	ldr	r2, [pc, #256]	@ (8006e80 <HAL_DMA_IRQHandler+0xa50>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d018      	beq.n	8006db4 <HAL_DMA_IRQHandler+0x984>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a3f      	ldr	r2, [pc, #252]	@ (8006e84 <HAL_DMA_IRQHandler+0xa54>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d013      	beq.n	8006db4 <HAL_DMA_IRQHandler+0x984>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a3d      	ldr	r2, [pc, #244]	@ (8006e88 <HAL_DMA_IRQHandler+0xa58>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d00e      	beq.n	8006db4 <HAL_DMA_IRQHandler+0x984>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a3c      	ldr	r2, [pc, #240]	@ (8006e8c <HAL_DMA_IRQHandler+0xa5c>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d009      	beq.n	8006db4 <HAL_DMA_IRQHandler+0x984>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a3a      	ldr	r2, [pc, #232]	@ (8006e90 <HAL_DMA_IRQHandler+0xa60>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d004      	beq.n	8006db4 <HAL_DMA_IRQHandler+0x984>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a39      	ldr	r2, [pc, #228]	@ (8006e94 <HAL_DMA_IRQHandler+0xa64>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d101      	bne.n	8006db8 <HAL_DMA_IRQHandler+0x988>
 8006db4:	2301      	movs	r3, #1
 8006db6:	e000      	b.n	8006dba <HAL_DMA_IRQHandler+0x98a>
 8006db8:	2300      	movs	r3, #0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 823f 	beq.w	800723e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dcc:	f003 031f 	and.w	r3, r3, #31
 8006dd0:	2204      	movs	r2, #4
 8006dd2:	409a      	lsls	r2, r3
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f000 80cd 	beq.w	8006f78 <HAL_DMA_IRQHandler+0xb48>
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 80c7 	beq.w	8006f78 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dee:	f003 031f 	and.w	r3, r3, #31
 8006df2:	2204      	movs	r2, #4
 8006df4:	409a      	lsls	r2, r3
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d049      	beq.n	8006e98 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d109      	bne.n	8006e22 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f000 8210 	beq.w	8007238 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e20:	e20a      	b.n	8007238 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 8206 	beq.w	8007238 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e34:	e200      	b.n	8007238 <HAL_DMA_IRQHandler+0xe08>
 8006e36:	bf00      	nop
 8006e38:	40020010 	.word	0x40020010
 8006e3c:	40020028 	.word	0x40020028
 8006e40:	40020040 	.word	0x40020040
 8006e44:	40020058 	.word	0x40020058
 8006e48:	40020070 	.word	0x40020070
 8006e4c:	40020088 	.word	0x40020088
 8006e50:	400200a0 	.word	0x400200a0
 8006e54:	400200b8 	.word	0x400200b8
 8006e58:	40020410 	.word	0x40020410
 8006e5c:	40020428 	.word	0x40020428
 8006e60:	40020440 	.word	0x40020440
 8006e64:	40020458 	.word	0x40020458
 8006e68:	40020470 	.word	0x40020470
 8006e6c:	40020488 	.word	0x40020488
 8006e70:	400204a0 	.word	0x400204a0
 8006e74:	400204b8 	.word	0x400204b8
 8006e78:	58025408 	.word	0x58025408
 8006e7c:	5802541c 	.word	0x5802541c
 8006e80:	58025430 	.word	0x58025430
 8006e84:	58025444 	.word	0x58025444
 8006e88:	58025458 	.word	0x58025458
 8006e8c:	5802546c 	.word	0x5802546c
 8006e90:	58025480 	.word	0x58025480
 8006e94:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	f003 0320 	and.w	r3, r3, #32
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d160      	bne.n	8006f64 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a7f      	ldr	r2, [pc, #508]	@ (80070a4 <HAL_DMA_IRQHandler+0xc74>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d04a      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xb12>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a7d      	ldr	r2, [pc, #500]	@ (80070a8 <HAL_DMA_IRQHandler+0xc78>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d045      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xb12>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a7c      	ldr	r2, [pc, #496]	@ (80070ac <HAL_DMA_IRQHandler+0xc7c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d040      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xb12>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a7a      	ldr	r2, [pc, #488]	@ (80070b0 <HAL_DMA_IRQHandler+0xc80>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d03b      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xb12>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a79      	ldr	r2, [pc, #484]	@ (80070b4 <HAL_DMA_IRQHandler+0xc84>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d036      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xb12>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a77      	ldr	r2, [pc, #476]	@ (80070b8 <HAL_DMA_IRQHandler+0xc88>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d031      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xb12>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a76      	ldr	r2, [pc, #472]	@ (80070bc <HAL_DMA_IRQHandler+0xc8c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d02c      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xb12>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a74      	ldr	r2, [pc, #464]	@ (80070c0 <HAL_DMA_IRQHandler+0xc90>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d027      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xb12>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a73      	ldr	r2, [pc, #460]	@ (80070c4 <HAL_DMA_IRQHandler+0xc94>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d022      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xb12>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a71      	ldr	r2, [pc, #452]	@ (80070c8 <HAL_DMA_IRQHandler+0xc98>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d01d      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xb12>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a70      	ldr	r2, [pc, #448]	@ (80070cc <HAL_DMA_IRQHandler+0xc9c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d018      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xb12>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a6e      	ldr	r2, [pc, #440]	@ (80070d0 <HAL_DMA_IRQHandler+0xca0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d013      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xb12>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a6d      	ldr	r2, [pc, #436]	@ (80070d4 <HAL_DMA_IRQHandler+0xca4>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d00e      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xb12>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a6b      	ldr	r2, [pc, #428]	@ (80070d8 <HAL_DMA_IRQHandler+0xca8>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d009      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xb12>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a6a      	ldr	r2, [pc, #424]	@ (80070dc <HAL_DMA_IRQHandler+0xcac>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d004      	beq.n	8006f42 <HAL_DMA_IRQHandler+0xb12>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a68      	ldr	r2, [pc, #416]	@ (80070e0 <HAL_DMA_IRQHandler+0xcb0>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d108      	bne.n	8006f54 <HAL_DMA_IRQHandler+0xb24>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f022 0208 	bic.w	r2, r2, #8
 8006f50:	601a      	str	r2, [r3, #0]
 8006f52:	e007      	b.n	8006f64 <HAL_DMA_IRQHandler+0xb34>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 0204 	bic.w	r2, r2, #4
 8006f62:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 8165 	beq.w	8007238 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f76:	e15f      	b.n	8007238 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f7c:	f003 031f 	and.w	r3, r3, #31
 8006f80:	2202      	movs	r2, #2
 8006f82:	409a      	lsls	r2, r3
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	4013      	ands	r3, r2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 80c5 	beq.w	8007118 <HAL_DMA_IRQHandler+0xce8>
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f003 0302 	and.w	r3, r3, #2
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 80bf 	beq.w	8007118 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f9e:	f003 031f 	and.w	r3, r3, #31
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	409a      	lsls	r2, r3
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d018      	beq.n	8006fe6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d109      	bne.n	8006fd2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 813a 	beq.w	800723c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fd0:	e134      	b.n	800723c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f000 8130 	beq.w	800723c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fe4:	e12a      	b.n	800723c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	f003 0320 	and.w	r3, r3, #32
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f040 8089 	bne.w	8007104 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a2b      	ldr	r2, [pc, #172]	@ (80070a4 <HAL_DMA_IRQHandler+0xc74>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d04a      	beq.n	8007092 <HAL_DMA_IRQHandler+0xc62>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a29      	ldr	r2, [pc, #164]	@ (80070a8 <HAL_DMA_IRQHandler+0xc78>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d045      	beq.n	8007092 <HAL_DMA_IRQHandler+0xc62>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a28      	ldr	r2, [pc, #160]	@ (80070ac <HAL_DMA_IRQHandler+0xc7c>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d040      	beq.n	8007092 <HAL_DMA_IRQHandler+0xc62>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a26      	ldr	r2, [pc, #152]	@ (80070b0 <HAL_DMA_IRQHandler+0xc80>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d03b      	beq.n	8007092 <HAL_DMA_IRQHandler+0xc62>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a25      	ldr	r2, [pc, #148]	@ (80070b4 <HAL_DMA_IRQHandler+0xc84>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d036      	beq.n	8007092 <HAL_DMA_IRQHandler+0xc62>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a23      	ldr	r2, [pc, #140]	@ (80070b8 <HAL_DMA_IRQHandler+0xc88>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d031      	beq.n	8007092 <HAL_DMA_IRQHandler+0xc62>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a22      	ldr	r2, [pc, #136]	@ (80070bc <HAL_DMA_IRQHandler+0xc8c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d02c      	beq.n	8007092 <HAL_DMA_IRQHandler+0xc62>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a20      	ldr	r2, [pc, #128]	@ (80070c0 <HAL_DMA_IRQHandler+0xc90>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d027      	beq.n	8007092 <HAL_DMA_IRQHandler+0xc62>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a1f      	ldr	r2, [pc, #124]	@ (80070c4 <HAL_DMA_IRQHandler+0xc94>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d022      	beq.n	8007092 <HAL_DMA_IRQHandler+0xc62>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a1d      	ldr	r2, [pc, #116]	@ (80070c8 <HAL_DMA_IRQHandler+0xc98>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d01d      	beq.n	8007092 <HAL_DMA_IRQHandler+0xc62>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a1c      	ldr	r2, [pc, #112]	@ (80070cc <HAL_DMA_IRQHandler+0xc9c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d018      	beq.n	8007092 <HAL_DMA_IRQHandler+0xc62>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a1a      	ldr	r2, [pc, #104]	@ (80070d0 <HAL_DMA_IRQHandler+0xca0>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d013      	beq.n	8007092 <HAL_DMA_IRQHandler+0xc62>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a19      	ldr	r2, [pc, #100]	@ (80070d4 <HAL_DMA_IRQHandler+0xca4>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d00e      	beq.n	8007092 <HAL_DMA_IRQHandler+0xc62>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a17      	ldr	r2, [pc, #92]	@ (80070d8 <HAL_DMA_IRQHandler+0xca8>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d009      	beq.n	8007092 <HAL_DMA_IRQHandler+0xc62>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a16      	ldr	r2, [pc, #88]	@ (80070dc <HAL_DMA_IRQHandler+0xcac>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d004      	beq.n	8007092 <HAL_DMA_IRQHandler+0xc62>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a14      	ldr	r2, [pc, #80]	@ (80070e0 <HAL_DMA_IRQHandler+0xcb0>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d128      	bne.n	80070e4 <HAL_DMA_IRQHandler+0xcb4>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f022 0214 	bic.w	r2, r2, #20
 80070a0:	601a      	str	r2, [r3, #0]
 80070a2:	e027      	b.n	80070f4 <HAL_DMA_IRQHandler+0xcc4>
 80070a4:	40020010 	.word	0x40020010
 80070a8:	40020028 	.word	0x40020028
 80070ac:	40020040 	.word	0x40020040
 80070b0:	40020058 	.word	0x40020058
 80070b4:	40020070 	.word	0x40020070
 80070b8:	40020088 	.word	0x40020088
 80070bc:	400200a0 	.word	0x400200a0
 80070c0:	400200b8 	.word	0x400200b8
 80070c4:	40020410 	.word	0x40020410
 80070c8:	40020428 	.word	0x40020428
 80070cc:	40020440 	.word	0x40020440
 80070d0:	40020458 	.word	0x40020458
 80070d4:	40020470 	.word	0x40020470
 80070d8:	40020488 	.word	0x40020488
 80070dc:	400204a0 	.word	0x400204a0
 80070e0:	400204b8 	.word	0x400204b8
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f022 020a 	bic.w	r2, r2, #10
 80070f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 8097 	beq.w	800723c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007116:	e091      	b.n	800723c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800711c:	f003 031f 	and.w	r3, r3, #31
 8007120:	2208      	movs	r2, #8
 8007122:	409a      	lsls	r2, r3
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	4013      	ands	r3, r2
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 8088 	beq.w	800723e <HAL_DMA_IRQHandler+0xe0e>
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	f003 0308 	and.w	r3, r3, #8
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 8082 	beq.w	800723e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a41      	ldr	r2, [pc, #260]	@ (8007244 <HAL_DMA_IRQHandler+0xe14>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d04a      	beq.n	80071da <HAL_DMA_IRQHandler+0xdaa>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a3f      	ldr	r2, [pc, #252]	@ (8007248 <HAL_DMA_IRQHandler+0xe18>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d045      	beq.n	80071da <HAL_DMA_IRQHandler+0xdaa>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a3e      	ldr	r2, [pc, #248]	@ (800724c <HAL_DMA_IRQHandler+0xe1c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d040      	beq.n	80071da <HAL_DMA_IRQHandler+0xdaa>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a3c      	ldr	r2, [pc, #240]	@ (8007250 <HAL_DMA_IRQHandler+0xe20>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d03b      	beq.n	80071da <HAL_DMA_IRQHandler+0xdaa>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a3b      	ldr	r2, [pc, #236]	@ (8007254 <HAL_DMA_IRQHandler+0xe24>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d036      	beq.n	80071da <HAL_DMA_IRQHandler+0xdaa>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a39      	ldr	r2, [pc, #228]	@ (8007258 <HAL_DMA_IRQHandler+0xe28>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d031      	beq.n	80071da <HAL_DMA_IRQHandler+0xdaa>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a38      	ldr	r2, [pc, #224]	@ (800725c <HAL_DMA_IRQHandler+0xe2c>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d02c      	beq.n	80071da <HAL_DMA_IRQHandler+0xdaa>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a36      	ldr	r2, [pc, #216]	@ (8007260 <HAL_DMA_IRQHandler+0xe30>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d027      	beq.n	80071da <HAL_DMA_IRQHandler+0xdaa>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a35      	ldr	r2, [pc, #212]	@ (8007264 <HAL_DMA_IRQHandler+0xe34>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d022      	beq.n	80071da <HAL_DMA_IRQHandler+0xdaa>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a33      	ldr	r2, [pc, #204]	@ (8007268 <HAL_DMA_IRQHandler+0xe38>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d01d      	beq.n	80071da <HAL_DMA_IRQHandler+0xdaa>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a32      	ldr	r2, [pc, #200]	@ (800726c <HAL_DMA_IRQHandler+0xe3c>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d018      	beq.n	80071da <HAL_DMA_IRQHandler+0xdaa>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a30      	ldr	r2, [pc, #192]	@ (8007270 <HAL_DMA_IRQHandler+0xe40>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d013      	beq.n	80071da <HAL_DMA_IRQHandler+0xdaa>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a2f      	ldr	r2, [pc, #188]	@ (8007274 <HAL_DMA_IRQHandler+0xe44>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d00e      	beq.n	80071da <HAL_DMA_IRQHandler+0xdaa>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a2d      	ldr	r2, [pc, #180]	@ (8007278 <HAL_DMA_IRQHandler+0xe48>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d009      	beq.n	80071da <HAL_DMA_IRQHandler+0xdaa>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a2c      	ldr	r2, [pc, #176]	@ (800727c <HAL_DMA_IRQHandler+0xe4c>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d004      	beq.n	80071da <HAL_DMA_IRQHandler+0xdaa>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a2a      	ldr	r2, [pc, #168]	@ (8007280 <HAL_DMA_IRQHandler+0xe50>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d108      	bne.n	80071ec <HAL_DMA_IRQHandler+0xdbc>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 021c 	bic.w	r2, r2, #28
 80071e8:	601a      	str	r2, [r3, #0]
 80071ea:	e007      	b.n	80071fc <HAL_DMA_IRQHandler+0xdcc>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 020e 	bic.w	r2, r2, #14
 80071fa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007200:	f003 031f 	and.w	r3, r3, #31
 8007204:	2201      	movs	r2, #1
 8007206:	409a      	lsls	r2, r3
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007226:	2b00      	cmp	r3, #0
 8007228:	d009      	beq.n	800723e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	4798      	blx	r3
 8007232:	e004      	b.n	800723e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007234:	bf00      	nop
 8007236:	e002      	b.n	800723e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007238:	bf00      	nop
 800723a:	e000      	b.n	800723e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800723c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800723e:	3728      	adds	r7, #40	@ 0x28
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	40020010 	.word	0x40020010
 8007248:	40020028 	.word	0x40020028
 800724c:	40020040 	.word	0x40020040
 8007250:	40020058 	.word	0x40020058
 8007254:	40020070 	.word	0x40020070
 8007258:	40020088 	.word	0x40020088
 800725c:	400200a0 	.word	0x400200a0
 8007260:	400200b8 	.word	0x400200b8
 8007264:	40020410 	.word	0x40020410
 8007268:	40020428 	.word	0x40020428
 800726c:	40020440 	.word	0x40020440
 8007270:	40020458 	.word	0x40020458
 8007274:	40020470 	.word	0x40020470
 8007278:	40020488 	.word	0x40020488
 800727c:	400204a0 	.word	0x400204a0
 8007280:	400204b8 	.word	0x400204b8

08007284 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a42      	ldr	r2, [pc, #264]	@ (800739c <DMA_CalcBaseAndBitshift+0x118>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d04a      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a41      	ldr	r2, [pc, #260]	@ (80073a0 <DMA_CalcBaseAndBitshift+0x11c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d045      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a3f      	ldr	r2, [pc, #252]	@ (80073a4 <DMA_CalcBaseAndBitshift+0x120>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d040      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a3e      	ldr	r2, [pc, #248]	@ (80073a8 <DMA_CalcBaseAndBitshift+0x124>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d03b      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a3c      	ldr	r2, [pc, #240]	@ (80073ac <DMA_CalcBaseAndBitshift+0x128>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d036      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a3b      	ldr	r2, [pc, #236]	@ (80073b0 <DMA_CalcBaseAndBitshift+0x12c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d031      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a39      	ldr	r2, [pc, #228]	@ (80073b4 <DMA_CalcBaseAndBitshift+0x130>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d02c      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a38      	ldr	r2, [pc, #224]	@ (80073b8 <DMA_CalcBaseAndBitshift+0x134>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d027      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a36      	ldr	r2, [pc, #216]	@ (80073bc <DMA_CalcBaseAndBitshift+0x138>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d022      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a35      	ldr	r2, [pc, #212]	@ (80073c0 <DMA_CalcBaseAndBitshift+0x13c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d01d      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a33      	ldr	r2, [pc, #204]	@ (80073c4 <DMA_CalcBaseAndBitshift+0x140>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d018      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a32      	ldr	r2, [pc, #200]	@ (80073c8 <DMA_CalcBaseAndBitshift+0x144>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d013      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a30      	ldr	r2, [pc, #192]	@ (80073cc <DMA_CalcBaseAndBitshift+0x148>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d00e      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a2f      	ldr	r2, [pc, #188]	@ (80073d0 <DMA_CalcBaseAndBitshift+0x14c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d009      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a2d      	ldr	r2, [pc, #180]	@ (80073d4 <DMA_CalcBaseAndBitshift+0x150>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d004      	beq.n	800732c <DMA_CalcBaseAndBitshift+0xa8>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a2c      	ldr	r2, [pc, #176]	@ (80073d8 <DMA_CalcBaseAndBitshift+0x154>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d101      	bne.n	8007330 <DMA_CalcBaseAndBitshift+0xac>
 800732c:	2301      	movs	r3, #1
 800732e:	e000      	b.n	8007332 <DMA_CalcBaseAndBitshift+0xae>
 8007330:	2300      	movs	r3, #0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d024      	beq.n	8007380 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	b2db      	uxtb	r3, r3
 800733c:	3b10      	subs	r3, #16
 800733e:	4a27      	ldr	r2, [pc, #156]	@ (80073dc <DMA_CalcBaseAndBitshift+0x158>)
 8007340:	fba2 2303 	umull	r2, r3, r2, r3
 8007344:	091b      	lsrs	r3, r3, #4
 8007346:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f003 0307 	and.w	r3, r3, #7
 800734e:	4a24      	ldr	r2, [pc, #144]	@ (80073e0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007350:	5cd3      	ldrb	r3, [r2, r3]
 8007352:	461a      	mov	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2b03      	cmp	r3, #3
 800735c:	d908      	bls.n	8007370 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	461a      	mov	r2, r3
 8007364:	4b1f      	ldr	r3, [pc, #124]	@ (80073e4 <DMA_CalcBaseAndBitshift+0x160>)
 8007366:	4013      	ands	r3, r2
 8007368:	1d1a      	adds	r2, r3, #4
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	659a      	str	r2, [r3, #88]	@ 0x58
 800736e:	e00d      	b.n	800738c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	461a      	mov	r2, r3
 8007376:	4b1b      	ldr	r3, [pc, #108]	@ (80073e4 <DMA_CalcBaseAndBitshift+0x160>)
 8007378:	4013      	ands	r3, r2
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	6593      	str	r3, [r2, #88]	@ 0x58
 800737e:	e005      	b.n	800738c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007390:	4618      	mov	r0, r3
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	40020010 	.word	0x40020010
 80073a0:	40020028 	.word	0x40020028
 80073a4:	40020040 	.word	0x40020040
 80073a8:	40020058 	.word	0x40020058
 80073ac:	40020070 	.word	0x40020070
 80073b0:	40020088 	.word	0x40020088
 80073b4:	400200a0 	.word	0x400200a0
 80073b8:	400200b8 	.word	0x400200b8
 80073bc:	40020410 	.word	0x40020410
 80073c0:	40020428 	.word	0x40020428
 80073c4:	40020440 	.word	0x40020440
 80073c8:	40020458 	.word	0x40020458
 80073cc:	40020470 	.word	0x40020470
 80073d0:	40020488 	.word	0x40020488
 80073d4:	400204a0 	.word	0x400204a0
 80073d8:	400204b8 	.word	0x400204b8
 80073dc:	aaaaaaab 	.word	0xaaaaaaab
 80073e0:	080163f0 	.word	0x080163f0
 80073e4:	fffffc00 	.word	0xfffffc00

080073e8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d120      	bne.n	800743e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007400:	2b03      	cmp	r3, #3
 8007402:	d858      	bhi.n	80074b6 <DMA_CheckFifoParam+0xce>
 8007404:	a201      	add	r2, pc, #4	@ (adr r2, 800740c <DMA_CheckFifoParam+0x24>)
 8007406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740a:	bf00      	nop
 800740c:	0800741d 	.word	0x0800741d
 8007410:	0800742f 	.word	0x0800742f
 8007414:	0800741d 	.word	0x0800741d
 8007418:	080074b7 	.word	0x080074b7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007420:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d048      	beq.n	80074ba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800742c:	e045      	b.n	80074ba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007432:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007436:	d142      	bne.n	80074be <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800743c:	e03f      	b.n	80074be <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007446:	d123      	bne.n	8007490 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800744c:	2b03      	cmp	r3, #3
 800744e:	d838      	bhi.n	80074c2 <DMA_CheckFifoParam+0xda>
 8007450:	a201      	add	r2, pc, #4	@ (adr r2, 8007458 <DMA_CheckFifoParam+0x70>)
 8007452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007456:	bf00      	nop
 8007458:	08007469 	.word	0x08007469
 800745c:	0800746f 	.word	0x0800746f
 8007460:	08007469 	.word	0x08007469
 8007464:	08007481 	.word	0x08007481
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	73fb      	strb	r3, [r7, #15]
        break;
 800746c:	e030      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007472:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d025      	beq.n	80074c6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800747e:	e022      	b.n	80074c6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007484:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007488:	d11f      	bne.n	80074ca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800748e:	e01c      	b.n	80074ca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007494:	2b02      	cmp	r3, #2
 8007496:	d902      	bls.n	800749e <DMA_CheckFifoParam+0xb6>
 8007498:	2b03      	cmp	r3, #3
 800749a:	d003      	beq.n	80074a4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800749c:	e018      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	73fb      	strb	r3, [r7, #15]
        break;
 80074a2:	e015      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00e      	beq.n	80074ce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	73fb      	strb	r3, [r7, #15]
    break;
 80074b4:	e00b      	b.n	80074ce <DMA_CheckFifoParam+0xe6>
        break;
 80074b6:	bf00      	nop
 80074b8:	e00a      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
        break;
 80074ba:	bf00      	nop
 80074bc:	e008      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
        break;
 80074be:	bf00      	nop
 80074c0:	e006      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
        break;
 80074c2:	bf00      	nop
 80074c4:	e004      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
        break;
 80074c6:	bf00      	nop
 80074c8:	e002      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
        break;
 80074ca:	bf00      	nop
 80074cc:	e000      	b.n	80074d0 <DMA_CheckFifoParam+0xe8>
    break;
 80074ce:	bf00      	nop
    }
  }

  return status;
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop

080074e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a38      	ldr	r2, [pc, #224]	@ (80075d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d022      	beq.n	800753e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a36      	ldr	r2, [pc, #216]	@ (80075d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d01d      	beq.n	800753e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a35      	ldr	r2, [pc, #212]	@ (80075dc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d018      	beq.n	800753e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a33      	ldr	r2, [pc, #204]	@ (80075e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d013      	beq.n	800753e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a32      	ldr	r2, [pc, #200]	@ (80075e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d00e      	beq.n	800753e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a30      	ldr	r2, [pc, #192]	@ (80075e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d009      	beq.n	800753e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a2f      	ldr	r2, [pc, #188]	@ (80075ec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d004      	beq.n	800753e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a2d      	ldr	r2, [pc, #180]	@ (80075f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d101      	bne.n	8007542 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800753e:	2301      	movs	r3, #1
 8007540:	e000      	b.n	8007544 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007542:	2300      	movs	r3, #0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d01a      	beq.n	800757e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	b2db      	uxtb	r3, r3
 800754e:	3b08      	subs	r3, #8
 8007550:	4a28      	ldr	r2, [pc, #160]	@ (80075f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007552:	fba2 2303 	umull	r2, r3, r2, r3
 8007556:	091b      	lsrs	r3, r3, #4
 8007558:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	4b26      	ldr	r3, [pc, #152]	@ (80075f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800755e:	4413      	add	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	461a      	mov	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a24      	ldr	r2, [pc, #144]	@ (80075fc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800756c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f003 031f 	and.w	r3, r3, #31
 8007574:	2201      	movs	r2, #1
 8007576:	409a      	lsls	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800757c:	e024      	b.n	80075c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	3b10      	subs	r3, #16
 8007586:	4a1e      	ldr	r2, [pc, #120]	@ (8007600 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007588:	fba2 2303 	umull	r2, r3, r2, r3
 800758c:	091b      	lsrs	r3, r3, #4
 800758e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	4a1c      	ldr	r2, [pc, #112]	@ (8007604 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d806      	bhi.n	80075a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	4a1b      	ldr	r2, [pc, #108]	@ (8007608 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d902      	bls.n	80075a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	3308      	adds	r3, #8
 80075a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	4b18      	ldr	r3, [pc, #96]	@ (800760c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80075aa:	4413      	add	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	461a      	mov	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a16      	ldr	r2, [pc, #88]	@ (8007610 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80075b8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f003 031f 	and.w	r3, r3, #31
 80075c0:	2201      	movs	r2, #1
 80075c2:	409a      	lsls	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80075c8:	bf00      	nop
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	58025408 	.word	0x58025408
 80075d8:	5802541c 	.word	0x5802541c
 80075dc:	58025430 	.word	0x58025430
 80075e0:	58025444 	.word	0x58025444
 80075e4:	58025458 	.word	0x58025458
 80075e8:	5802546c 	.word	0x5802546c
 80075ec:	58025480 	.word	0x58025480
 80075f0:	58025494 	.word	0x58025494
 80075f4:	cccccccd 	.word	0xcccccccd
 80075f8:	16009600 	.word	0x16009600
 80075fc:	58025880 	.word	0x58025880
 8007600:	aaaaaaab 	.word	0xaaaaaaab
 8007604:	400204b8 	.word	0x400204b8
 8007608:	4002040f 	.word	0x4002040f
 800760c:	10008200 	.word	0x10008200
 8007610:	40020880 	.word	0x40020880

08007614 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	b2db      	uxtb	r3, r3
 8007622:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d04a      	beq.n	80076c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2b08      	cmp	r3, #8
 800762e:	d847      	bhi.n	80076c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a25      	ldr	r2, [pc, #148]	@ (80076cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d022      	beq.n	8007680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a24      	ldr	r2, [pc, #144]	@ (80076d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d01d      	beq.n	8007680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a22      	ldr	r2, [pc, #136]	@ (80076d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d018      	beq.n	8007680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a21      	ldr	r2, [pc, #132]	@ (80076d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d013      	beq.n	8007680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a1f      	ldr	r2, [pc, #124]	@ (80076dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d00e      	beq.n	8007680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a1e      	ldr	r2, [pc, #120]	@ (80076e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d009      	beq.n	8007680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a1c      	ldr	r2, [pc, #112]	@ (80076e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d004      	beq.n	8007680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a1b      	ldr	r2, [pc, #108]	@ (80076e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d101      	bne.n	8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007680:	2301      	movs	r3, #1
 8007682:	e000      	b.n	8007686 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007684:	2300      	movs	r3, #0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00a      	beq.n	80076a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	4b17      	ldr	r3, [pc, #92]	@ (80076ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	461a      	mov	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a15      	ldr	r2, [pc, #84]	@ (80076f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800769c:	671a      	str	r2, [r3, #112]	@ 0x70
 800769e:	e009      	b.n	80076b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	4b14      	ldr	r3, [pc, #80]	@ (80076f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80076a4:	4413      	add	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	461a      	mov	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a11      	ldr	r2, [pc, #68]	@ (80076f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80076b2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	2201      	movs	r2, #1
 80076ba:	409a      	lsls	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80076c0:	bf00      	nop
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	58025408 	.word	0x58025408
 80076d0:	5802541c 	.word	0x5802541c
 80076d4:	58025430 	.word	0x58025430
 80076d8:	58025444 	.word	0x58025444
 80076dc:	58025458 	.word	0x58025458
 80076e0:	5802546c 	.word	0x5802546c
 80076e4:	58025480 	.word	0x58025480
 80076e8:	58025494 	.word	0x58025494
 80076ec:	1600963f 	.word	0x1600963f
 80076f0:	58025940 	.word	0x58025940
 80076f4:	1000823f 	.word	0x1000823f
 80076f8:	40020940 	.word	0x40020940

080076fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b089      	sub	sp, #36	@ 0x24
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007706:	2300      	movs	r3, #0
 8007708:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800770a:	4b86      	ldr	r3, [pc, #536]	@ (8007924 <HAL_GPIO_Init+0x228>)
 800770c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800770e:	e18c      	b.n	8007a2a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	2101      	movs	r1, #1
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	fa01 f303 	lsl.w	r3, r1, r3
 800771c:	4013      	ands	r3, r2
 800771e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 817e 	beq.w	8007a24 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f003 0303 	and.w	r3, r3, #3
 8007730:	2b01      	cmp	r3, #1
 8007732:	d005      	beq.n	8007740 <HAL_GPIO_Init+0x44>
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f003 0303 	and.w	r3, r3, #3
 800773c:	2b02      	cmp	r3, #2
 800773e:	d130      	bne.n	80077a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	2203      	movs	r2, #3
 800774c:	fa02 f303 	lsl.w	r3, r2, r3
 8007750:	43db      	mvns	r3, r3
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	4013      	ands	r3, r2
 8007756:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	68da      	ldr	r2, [r3, #12]
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	fa02 f303 	lsl.w	r3, r2, r3
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	4313      	orrs	r3, r2
 8007768:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007776:	2201      	movs	r2, #1
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	fa02 f303 	lsl.w	r3, r2, r3
 800777e:	43db      	mvns	r3, r3
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	4013      	ands	r3, r2
 8007784:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	091b      	lsrs	r3, r3, #4
 800778c:	f003 0201 	and.w	r2, r3, #1
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	fa02 f303 	lsl.w	r3, r2, r3
 8007796:	69ba      	ldr	r2, [r7, #24]
 8007798:	4313      	orrs	r3, r2
 800779a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	69ba      	ldr	r2, [r7, #24]
 80077a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f003 0303 	and.w	r3, r3, #3
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	d017      	beq.n	80077de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	2203      	movs	r2, #3
 80077ba:	fa02 f303 	lsl.w	r3, r2, r3
 80077be:	43db      	mvns	r3, r3
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	4013      	ands	r3, r2
 80077c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	689a      	ldr	r2, [r3, #8]
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	fa02 f303 	lsl.w	r3, r2, r3
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f003 0303 	and.w	r3, r3, #3
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d123      	bne.n	8007832 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	08da      	lsrs	r2, r3, #3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	3208      	adds	r2, #8
 80077f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	f003 0307 	and.w	r3, r3, #7
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	220f      	movs	r2, #15
 8007802:	fa02 f303 	lsl.w	r3, r2, r3
 8007806:	43db      	mvns	r3, r3
 8007808:	69ba      	ldr	r2, [r7, #24]
 800780a:	4013      	ands	r3, r2
 800780c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	691a      	ldr	r2, [r3, #16]
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	f003 0307 	and.w	r3, r3, #7
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	fa02 f303 	lsl.w	r3, r2, r3
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	4313      	orrs	r3, r2
 8007822:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	08da      	lsrs	r2, r3, #3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	3208      	adds	r2, #8
 800782c:	69b9      	ldr	r1, [r7, #24]
 800782e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	2203      	movs	r2, #3
 800783e:	fa02 f303 	lsl.w	r3, r2, r3
 8007842:	43db      	mvns	r3, r3
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	4013      	ands	r3, r2
 8007848:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	f003 0203 	and.w	r2, r3, #3
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	fa02 f303 	lsl.w	r3, r2, r3
 800785a:	69ba      	ldr	r2, [r7, #24]
 800785c:	4313      	orrs	r3, r2
 800785e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 80d8 	beq.w	8007a24 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007874:	4b2c      	ldr	r3, [pc, #176]	@ (8007928 <HAL_GPIO_Init+0x22c>)
 8007876:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800787a:	4a2b      	ldr	r2, [pc, #172]	@ (8007928 <HAL_GPIO_Init+0x22c>)
 800787c:	f043 0302 	orr.w	r3, r3, #2
 8007880:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007884:	4b28      	ldr	r3, [pc, #160]	@ (8007928 <HAL_GPIO_Init+0x22c>)
 8007886:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007892:	4a26      	ldr	r2, [pc, #152]	@ (800792c <HAL_GPIO_Init+0x230>)
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	089b      	lsrs	r3, r3, #2
 8007898:	3302      	adds	r3, #2
 800789a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800789e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	f003 0303 	and.w	r3, r3, #3
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	220f      	movs	r2, #15
 80078aa:	fa02 f303 	lsl.w	r3, r2, r3
 80078ae:	43db      	mvns	r3, r3
 80078b0:	69ba      	ldr	r2, [r7, #24]
 80078b2:	4013      	ands	r3, r2
 80078b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007930 <HAL_GPIO_Init+0x234>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d04a      	beq.n	8007954 <HAL_GPIO_Init+0x258>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007934 <HAL_GPIO_Init+0x238>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d02b      	beq.n	800791e <HAL_GPIO_Init+0x222>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a1b      	ldr	r2, [pc, #108]	@ (8007938 <HAL_GPIO_Init+0x23c>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d025      	beq.n	800791a <HAL_GPIO_Init+0x21e>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a1a      	ldr	r2, [pc, #104]	@ (800793c <HAL_GPIO_Init+0x240>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d01f      	beq.n	8007916 <HAL_GPIO_Init+0x21a>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a19      	ldr	r2, [pc, #100]	@ (8007940 <HAL_GPIO_Init+0x244>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d019      	beq.n	8007912 <HAL_GPIO_Init+0x216>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a18      	ldr	r2, [pc, #96]	@ (8007944 <HAL_GPIO_Init+0x248>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d013      	beq.n	800790e <HAL_GPIO_Init+0x212>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a17      	ldr	r2, [pc, #92]	@ (8007948 <HAL_GPIO_Init+0x24c>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d00d      	beq.n	800790a <HAL_GPIO_Init+0x20e>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a16      	ldr	r2, [pc, #88]	@ (800794c <HAL_GPIO_Init+0x250>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d007      	beq.n	8007906 <HAL_GPIO_Init+0x20a>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a15      	ldr	r2, [pc, #84]	@ (8007950 <HAL_GPIO_Init+0x254>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d101      	bne.n	8007902 <HAL_GPIO_Init+0x206>
 80078fe:	2309      	movs	r3, #9
 8007900:	e029      	b.n	8007956 <HAL_GPIO_Init+0x25a>
 8007902:	230a      	movs	r3, #10
 8007904:	e027      	b.n	8007956 <HAL_GPIO_Init+0x25a>
 8007906:	2307      	movs	r3, #7
 8007908:	e025      	b.n	8007956 <HAL_GPIO_Init+0x25a>
 800790a:	2306      	movs	r3, #6
 800790c:	e023      	b.n	8007956 <HAL_GPIO_Init+0x25a>
 800790e:	2305      	movs	r3, #5
 8007910:	e021      	b.n	8007956 <HAL_GPIO_Init+0x25a>
 8007912:	2304      	movs	r3, #4
 8007914:	e01f      	b.n	8007956 <HAL_GPIO_Init+0x25a>
 8007916:	2303      	movs	r3, #3
 8007918:	e01d      	b.n	8007956 <HAL_GPIO_Init+0x25a>
 800791a:	2302      	movs	r3, #2
 800791c:	e01b      	b.n	8007956 <HAL_GPIO_Init+0x25a>
 800791e:	2301      	movs	r3, #1
 8007920:	e019      	b.n	8007956 <HAL_GPIO_Init+0x25a>
 8007922:	bf00      	nop
 8007924:	58000080 	.word	0x58000080
 8007928:	58024400 	.word	0x58024400
 800792c:	58000400 	.word	0x58000400
 8007930:	58020000 	.word	0x58020000
 8007934:	58020400 	.word	0x58020400
 8007938:	58020800 	.word	0x58020800
 800793c:	58020c00 	.word	0x58020c00
 8007940:	58021000 	.word	0x58021000
 8007944:	58021400 	.word	0x58021400
 8007948:	58021800 	.word	0x58021800
 800794c:	58021c00 	.word	0x58021c00
 8007950:	58022400 	.word	0x58022400
 8007954:	2300      	movs	r3, #0
 8007956:	69fa      	ldr	r2, [r7, #28]
 8007958:	f002 0203 	and.w	r2, r2, #3
 800795c:	0092      	lsls	r2, r2, #2
 800795e:	4093      	lsls	r3, r2
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	4313      	orrs	r3, r2
 8007964:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007966:	4938      	ldr	r1, [pc, #224]	@ (8007a48 <HAL_GPIO_Init+0x34c>)
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	089b      	lsrs	r3, r3, #2
 800796c:	3302      	adds	r3, #2
 800796e:	69ba      	ldr	r2, [r7, #24]
 8007970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	43db      	mvns	r3, r3
 8007980:	69ba      	ldr	r2, [r7, #24]
 8007982:	4013      	ands	r3, r2
 8007984:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d003      	beq.n	800799a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007992:	69ba      	ldr	r2, [r7, #24]
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	4313      	orrs	r3, r2
 8007998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800799a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80079a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	43db      	mvns	r3, r3
 80079ae:	69ba      	ldr	r2, [r7, #24]
 80079b0:	4013      	ands	r3, r2
 80079b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d003      	beq.n	80079c8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80079c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	43db      	mvns	r3, r3
 80079da:	69ba      	ldr	r2, [r7, #24]
 80079dc:	4013      	ands	r3, r2
 80079de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d003      	beq.n	80079f4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	69ba      	ldr	r2, [r7, #24]
 80079f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	43db      	mvns	r3, r3
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	4013      	ands	r3, r2
 8007a08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007a16:	69ba      	ldr	r2, [r7, #24]
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	3301      	adds	r3, #1
 8007a28:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	fa22 f303 	lsr.w	r3, r2, r3
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f47f ae6b 	bne.w	8007710 <HAL_GPIO_Init+0x14>
  }
}
 8007a3a:	bf00      	nop
 8007a3c:	bf00      	nop
 8007a3e:	3724      	adds	r7, #36	@ 0x24
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	58000400 	.word	0x58000400

08007a4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e08b      	b.n	8007b76 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d106      	bne.n	8007a78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7f9 fac0 	bl	8000ff8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2224      	movs	r2, #36	@ 0x24
 8007a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0201 	bic.w	r2, r2, #1
 8007a8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007a9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	689a      	ldr	r2, [r3, #8]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007aac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d107      	bne.n	8007ac6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	689a      	ldr	r2, [r3, #8]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ac2:	609a      	str	r2, [r3, #8]
 8007ac4:	e006      	b.n	8007ad4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007ad2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d108      	bne.n	8007aee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007aea:	605a      	str	r2, [r3, #4]
 8007aec:	e007      	b.n	8007afe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007afc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6859      	ldr	r1, [r3, #4]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	4b1d      	ldr	r3, [pc, #116]	@ (8007b80 <HAL_I2C_Init+0x134>)
 8007b0a:	430b      	orrs	r3, r1
 8007b0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68da      	ldr	r2, [r3, #12]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	691a      	ldr	r2, [r3, #16]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	430a      	orrs	r2, r1
 8007b36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	69d9      	ldr	r1, [r3, #28]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a1a      	ldr	r2, [r3, #32]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	430a      	orrs	r2, r1
 8007b46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f042 0201 	orr.w	r2, r2, #1
 8007b56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2220      	movs	r2, #32
 8007b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	02008000 	.word	0x02008000

08007b84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b20      	cmp	r3, #32
 8007b98:	d138      	bne.n	8007c0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d101      	bne.n	8007ba8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e032      	b.n	8007c0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2224      	movs	r2, #36	@ 0x24
 8007bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 0201 	bic.w	r2, r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007bd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6819      	ldr	r1, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f042 0201 	orr.w	r2, r2, #1
 8007bf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	e000      	b.n	8007c0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c0c:	2302      	movs	r3, #2
  }
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b085      	sub	sp, #20
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	2b20      	cmp	r3, #32
 8007c2e:	d139      	bne.n	8007ca4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d101      	bne.n	8007c3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c3a:	2302      	movs	r3, #2
 8007c3c:	e033      	b.n	8007ca6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2224      	movs	r2, #36	@ 0x24
 8007c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f022 0201 	bic.w	r2, r2, #1
 8007c5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007c6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	021b      	lsls	r3, r3, #8
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f042 0201 	orr.w	r2, r2, #1
 8007c8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2220      	movs	r2, #32
 8007c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	e000      	b.n	8007ca6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ca4:	2302      	movs	r3, #2
  }
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3714      	adds	r7, #20
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b084      	sub	sp, #16
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e043      	b.n	8007d4c <HAL_IWDG_Init+0x9a>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8007ccc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f245 5255 	movw	r2, #21845	@ 0x5555
 8007cd6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	6852      	ldr	r2, [r2, #4]
 8007ce0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	6892      	ldr	r2, [r2, #8]
 8007cea:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007cec:	f7fb f8d0 	bl	8002e90 <HAL_GetTick>
 8007cf0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007cf2:	e011      	b.n	8007d18 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007cf4:	f7fb f8cc 	bl	8002e90 <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	f641 0201 	movw	r2, #6145	@ 0x1801
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d908      	bls.n	8007d18 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	f003 0307 	and.w	r3, r3, #7
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e019      	b.n	8007d4c <HAL_IWDG_Init+0x9a>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	f003 0307 	and.w	r3, r3, #7
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1e6      	bne.n	8007cf4 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	691a      	ldr	r2, [r3, #16]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d005      	beq.n	8007d40 <HAL_IWDG_Init+0x8e>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	68d2      	ldr	r2, [r2, #12]
 8007d3c:	611a      	str	r2, [r3, #16]
 8007d3e:	e004      	b.n	8007d4a <HAL_IWDG_Init+0x98>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8007d48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af02      	add	r7, sp, #8
 8007d5a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e0fe      	b.n	8007f64 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d106      	bne.n	8007d80 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f00b ff30 	bl	8013be0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2203      	movs	r2, #3
 8007d84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f008 fac8 	bl	8010322 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6818      	ldr	r0, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	7c1a      	ldrb	r2, [r3, #16]
 8007d9a:	f88d 2000 	strb.w	r2, [sp]
 8007d9e:	3304      	adds	r3, #4
 8007da0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007da2:	f008 f999 	bl	80100d8 <USB_CoreInit>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d005      	beq.n	8007db8 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007db4:	2301      	movs	r3, #1
 8007db6:	e0d5      	b.n	8007f64 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f008 fac0 	bl	8010344 <USB_SetCurrentMode>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d005      	beq.n	8007dd6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2202      	movs	r2, #2
 8007dce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e0c6      	b.n	8007f64 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	73fb      	strb	r3, [r7, #15]
 8007dda:	e04a      	b.n	8007e72 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007ddc:	7bfa      	ldrb	r2, [r7, #15]
 8007dde:	6879      	ldr	r1, [r7, #4]
 8007de0:	4613      	mov	r3, r2
 8007de2:	00db      	lsls	r3, r3, #3
 8007de4:	4413      	add	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	440b      	add	r3, r1
 8007dea:	3315      	adds	r3, #21
 8007dec:	2201      	movs	r2, #1
 8007dee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007df0:	7bfa      	ldrb	r2, [r7, #15]
 8007df2:	6879      	ldr	r1, [r7, #4]
 8007df4:	4613      	mov	r3, r2
 8007df6:	00db      	lsls	r3, r3, #3
 8007df8:	4413      	add	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	440b      	add	r3, r1
 8007dfe:	3314      	adds	r3, #20
 8007e00:	7bfa      	ldrb	r2, [r7, #15]
 8007e02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007e04:	7bfa      	ldrb	r2, [r7, #15]
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
 8007e08:	b298      	uxth	r0, r3
 8007e0a:	6879      	ldr	r1, [r7, #4]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	00db      	lsls	r3, r3, #3
 8007e10:	4413      	add	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	440b      	add	r3, r1
 8007e16:	332e      	adds	r3, #46	@ 0x2e
 8007e18:	4602      	mov	r2, r0
 8007e1a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007e1c:	7bfa      	ldrb	r2, [r7, #15]
 8007e1e:	6879      	ldr	r1, [r7, #4]
 8007e20:	4613      	mov	r3, r2
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	4413      	add	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	440b      	add	r3, r1
 8007e2a:	3318      	adds	r3, #24
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007e30:	7bfa      	ldrb	r2, [r7, #15]
 8007e32:	6879      	ldr	r1, [r7, #4]
 8007e34:	4613      	mov	r3, r2
 8007e36:	00db      	lsls	r3, r3, #3
 8007e38:	4413      	add	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	440b      	add	r3, r1
 8007e3e:	331c      	adds	r3, #28
 8007e40:	2200      	movs	r2, #0
 8007e42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007e44:	7bfa      	ldrb	r2, [r7, #15]
 8007e46:	6879      	ldr	r1, [r7, #4]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	00db      	lsls	r3, r3, #3
 8007e4c:	4413      	add	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	440b      	add	r3, r1
 8007e52:	3320      	adds	r3, #32
 8007e54:	2200      	movs	r2, #0
 8007e56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007e58:	7bfa      	ldrb	r2, [r7, #15]
 8007e5a:	6879      	ldr	r1, [r7, #4]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	00db      	lsls	r3, r3, #3
 8007e60:	4413      	add	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	440b      	add	r3, r1
 8007e66:	3324      	adds	r3, #36	@ 0x24
 8007e68:	2200      	movs	r2, #0
 8007e6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e6c:	7bfb      	ldrb	r3, [r7, #15]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	73fb      	strb	r3, [r7, #15]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	791b      	ldrb	r3, [r3, #4]
 8007e76:	7bfa      	ldrb	r2, [r7, #15]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d3af      	bcc.n	8007ddc <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	73fb      	strb	r3, [r7, #15]
 8007e80:	e044      	b.n	8007f0c <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007e82:	7bfa      	ldrb	r2, [r7, #15]
 8007e84:	6879      	ldr	r1, [r7, #4]
 8007e86:	4613      	mov	r3, r2
 8007e88:	00db      	lsls	r3, r3, #3
 8007e8a:	4413      	add	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	440b      	add	r3, r1
 8007e90:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007e94:	2200      	movs	r2, #0
 8007e96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007e98:	7bfa      	ldrb	r2, [r7, #15]
 8007e9a:	6879      	ldr	r1, [r7, #4]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	00db      	lsls	r3, r3, #3
 8007ea0:	4413      	add	r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	440b      	add	r3, r1
 8007ea6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007eaa:	7bfa      	ldrb	r2, [r7, #15]
 8007eac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007eae:	7bfa      	ldrb	r2, [r7, #15]
 8007eb0:	6879      	ldr	r1, [r7, #4]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	00db      	lsls	r3, r3, #3
 8007eb6:	4413      	add	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	440b      	add	r3, r1
 8007ebc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007ec4:	7bfa      	ldrb	r2, [r7, #15]
 8007ec6:	6879      	ldr	r1, [r7, #4]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	00db      	lsls	r3, r3, #3
 8007ecc:	4413      	add	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	440b      	add	r3, r1
 8007ed2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007eda:	7bfa      	ldrb	r2, [r7, #15]
 8007edc:	6879      	ldr	r1, [r7, #4]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	00db      	lsls	r3, r3, #3
 8007ee2:	4413      	add	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	440b      	add	r3, r1
 8007ee8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007eec:	2200      	movs	r2, #0
 8007eee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007ef0:	7bfa      	ldrb	r2, [r7, #15]
 8007ef2:	6879      	ldr	r1, [r7, #4]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	00db      	lsls	r3, r3, #3
 8007ef8:	4413      	add	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	440b      	add	r3, r1
 8007efe:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007f02:	2200      	movs	r2, #0
 8007f04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	73fb      	strb	r3, [r7, #15]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	791b      	ldrb	r3, [r3, #4]
 8007f10:	7bfa      	ldrb	r2, [r7, #15]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d3b5      	bcc.n	8007e82 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6818      	ldr	r0, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	7c1a      	ldrb	r2, [r3, #16]
 8007f1e:	f88d 2000 	strb.w	r2, [sp]
 8007f22:	3304      	adds	r3, #4
 8007f24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f26:	f008 fa59 	bl	80103dc <USB_DevInit>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d005      	beq.n	8007f3c <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2202      	movs	r2, #2
 8007f34:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e013      	b.n	8007f64 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	7b1b      	ldrb	r3, [r3, #12]
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d102      	bne.n	8007f58 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f001 f96e 	bl	8009234 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f009 fa9c 	bl	801149a <USB_DevDisconnect>

  return HAL_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d101      	bne.n	8007f88 <HAL_PCD_Start+0x1c>
 8007f84:	2302      	movs	r3, #2
 8007f86:	e022      	b.n	8007fce <HAL_PCD_Start+0x62>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d009      	beq.n	8007fb0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d105      	bne.n	8007fb0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fa8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f008 f9a3 	bl	8010300 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f009 fa4a 	bl	8011458 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007fd6:	b590      	push	{r4, r7, lr}
 8007fd8:	b08d      	sub	sp, #52	@ 0x34
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f009 fb08 	bl	8011602 <USB_GetMode>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f040 84b9 	bne.w	800896c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4618      	mov	r0, r3
 8008000:	f009 fa6c 	bl	80114dc <USB_ReadInterrupts>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	f000 84af 	beq.w	800896a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	0a1b      	lsrs	r3, r3, #8
 8008016:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4618      	mov	r0, r3
 8008026:	f009 fa59 	bl	80114dc <USB_ReadInterrupts>
 800802a:	4603      	mov	r3, r0
 800802c:	f003 0302 	and.w	r3, r3, #2
 8008030:	2b02      	cmp	r3, #2
 8008032:	d107      	bne.n	8008044 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	695a      	ldr	r2, [r3, #20]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f002 0202 	and.w	r2, r2, #2
 8008042:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4618      	mov	r0, r3
 800804a:	f009 fa47 	bl	80114dc <USB_ReadInterrupts>
 800804e:	4603      	mov	r3, r0
 8008050:	f003 0310 	and.w	r3, r3, #16
 8008054:	2b10      	cmp	r3, #16
 8008056:	d161      	bne.n	800811c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	699a      	ldr	r2, [r3, #24]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f022 0210 	bic.w	r2, r2, #16
 8008066:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	6a1b      	ldr	r3, [r3, #32]
 800806c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	f003 020f 	and.w	r2, r3, #15
 8008074:	4613      	mov	r3, r2
 8008076:	00db      	lsls	r3, r3, #3
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	4413      	add	r3, r2
 8008084:	3304      	adds	r3, #4
 8008086:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800808e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008092:	d124      	bne.n	80080de <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008094:	69ba      	ldr	r2, [r7, #24]
 8008096:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800809a:	4013      	ands	r3, r2
 800809c:	2b00      	cmp	r3, #0
 800809e:	d035      	beq.n	800810c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	091b      	lsrs	r3, r3, #4
 80080a8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80080aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	461a      	mov	r2, r3
 80080b2:	6a38      	ldr	r0, [r7, #32]
 80080b4:	f009 f87e 	bl	80111b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	68da      	ldr	r2, [r3, #12]
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	091b      	lsrs	r3, r3, #4
 80080c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080c4:	441a      	add	r2, r3
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	695a      	ldr	r2, [r3, #20]
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	091b      	lsrs	r3, r3, #4
 80080d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080d6:	441a      	add	r2, r3
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	615a      	str	r2, [r3, #20]
 80080dc:	e016      	b.n	800810c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80080e4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80080e8:	d110      	bne.n	800810c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80080f0:	2208      	movs	r2, #8
 80080f2:	4619      	mov	r1, r3
 80080f4:	6a38      	ldr	r0, [r7, #32]
 80080f6:	f009 f85d 	bl	80111b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	695a      	ldr	r2, [r3, #20]
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	091b      	lsrs	r3, r3, #4
 8008102:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008106:	441a      	add	r2, r3
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	699a      	ldr	r2, [r3, #24]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f042 0210 	orr.w	r2, r2, #16
 800811a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4618      	mov	r0, r3
 8008122:	f009 f9db 	bl	80114dc <USB_ReadInterrupts>
 8008126:	4603      	mov	r3, r0
 8008128:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800812c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008130:	f040 80a7 	bne.w	8008282 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008134:	2300      	movs	r3, #0
 8008136:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4618      	mov	r0, r3
 800813e:	f009 f9e0 	bl	8011502 <USB_ReadDevAllOutEpInterrupt>
 8008142:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8008144:	e099      	b.n	800827a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	2b00      	cmp	r3, #0
 800814e:	f000 808e 	beq.w	800826e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008158:	b2d2      	uxtb	r2, r2
 800815a:	4611      	mov	r1, r2
 800815c:	4618      	mov	r0, r3
 800815e:	f009 fa04 	bl	801156a <USB_ReadDevOutEPInterrupt>
 8008162:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00c      	beq.n	8008188 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800816e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008170:	015a      	lsls	r2, r3, #5
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	4413      	add	r3, r2
 8008176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800817a:	461a      	mov	r2, r3
 800817c:	2301      	movs	r3, #1
 800817e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008180:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fed0 	bl	8008f28 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	f003 0308 	and.w	r3, r3, #8
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00c      	beq.n	80081ac <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008194:	015a      	lsls	r2, r3, #5
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	4413      	add	r3, r2
 800819a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800819e:	461a      	mov	r2, r3
 80081a0:	2308      	movs	r3, #8
 80081a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80081a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 ffa6 	bl	80090f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	f003 0310 	and.w	r3, r3, #16
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d008      	beq.n	80081c8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80081b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b8:	015a      	lsls	r2, r3, #5
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	4413      	add	r3, r2
 80081be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081c2:	461a      	mov	r2, r3
 80081c4:	2310      	movs	r3, #16
 80081c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	f003 0302 	and.w	r3, r3, #2
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d030      	beq.n	8008234 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80081d2:	6a3b      	ldr	r3, [r7, #32]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081da:	2b80      	cmp	r3, #128	@ 0x80
 80081dc:	d109      	bne.n	80081f2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	69fa      	ldr	r2, [r7, #28]
 80081e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80081f0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80081f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081f4:	4613      	mov	r3, r2
 80081f6:	00db      	lsls	r3, r3, #3
 80081f8:	4413      	add	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	4413      	add	r3, r2
 8008204:	3304      	adds	r3, #4
 8008206:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	78db      	ldrb	r3, [r3, #3]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d108      	bne.n	8008222 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	2200      	movs	r2, #0
 8008214:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008218:	b2db      	uxtb	r3, r3
 800821a:	4619      	mov	r1, r3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f00b fdff 	bl	8013e20 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008224:	015a      	lsls	r2, r3, #5
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	4413      	add	r3, r2
 800822a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800822e:	461a      	mov	r2, r3
 8008230:	2302      	movs	r3, #2
 8008232:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	f003 0320 	and.w	r3, r3, #32
 800823a:	2b00      	cmp	r3, #0
 800823c:	d008      	beq.n	8008250 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800823e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008240:	015a      	lsls	r2, r3, #5
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	4413      	add	r3, r2
 8008246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800824a:	461a      	mov	r2, r3
 800824c:	2320      	movs	r3, #32
 800824e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d009      	beq.n	800826e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800825a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825c:	015a      	lsls	r2, r3, #5
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	4413      	add	r3, r2
 8008262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008266:	461a      	mov	r2, r3
 8008268:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800826c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800826e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008270:	3301      	adds	r3, #1
 8008272:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008276:	085b      	lsrs	r3, r3, #1
 8008278:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800827a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800827c:	2b00      	cmp	r3, #0
 800827e:	f47f af62 	bne.w	8008146 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4618      	mov	r0, r3
 8008288:	f009 f928 	bl	80114dc <USB_ReadInterrupts>
 800828c:	4603      	mov	r3, r0
 800828e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008292:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008296:	f040 80db 	bne.w	8008450 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4618      	mov	r0, r3
 80082a0:	f009 f949 	bl	8011536 <USB_ReadDevAllInEpInterrupt>
 80082a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80082a6:	2300      	movs	r3, #0
 80082a8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80082aa:	e0cd      	b.n	8008448 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80082ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f000 80c2 	beq.w	800843c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082be:	b2d2      	uxtb	r2, r2
 80082c0:	4611      	mov	r1, r2
 80082c2:	4618      	mov	r0, r3
 80082c4:	f009 f96f 	bl	80115a6 <USB_ReadDevInEPInterrupt>
 80082c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	f003 0301 	and.w	r3, r3, #1
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d057      	beq.n	8008384 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80082d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d6:	f003 030f 	and.w	r3, r3, #15
 80082da:	2201      	movs	r2, #1
 80082dc:	fa02 f303 	lsl.w	r3, r2, r3
 80082e0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	43db      	mvns	r3, r3
 80082ee:	69f9      	ldr	r1, [r7, #28]
 80082f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80082f4:	4013      	ands	r3, r2
 80082f6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80082f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008304:	461a      	mov	r2, r3
 8008306:	2301      	movs	r3, #1
 8008308:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	799b      	ldrb	r3, [r3, #6]
 800830e:	2b01      	cmp	r3, #1
 8008310:	d132      	bne.n	8008378 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008312:	6879      	ldr	r1, [r7, #4]
 8008314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008316:	4613      	mov	r3, r2
 8008318:	00db      	lsls	r3, r3, #3
 800831a:	4413      	add	r3, r2
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	440b      	add	r3, r1
 8008320:	3320      	adds	r3, #32
 8008322:	6819      	ldr	r1, [r3, #0]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008328:	4613      	mov	r3, r2
 800832a:	00db      	lsls	r3, r3, #3
 800832c:	4413      	add	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4403      	add	r3, r0
 8008332:	331c      	adds	r3, #28
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4419      	add	r1, r3
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800833c:	4613      	mov	r3, r2
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	4413      	add	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4403      	add	r3, r0
 8008346:	3320      	adds	r3, #32
 8008348:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800834a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834c:	2b00      	cmp	r3, #0
 800834e:	d113      	bne.n	8008378 <HAL_PCD_IRQHandler+0x3a2>
 8008350:	6879      	ldr	r1, [r7, #4]
 8008352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008354:	4613      	mov	r3, r2
 8008356:	00db      	lsls	r3, r3, #3
 8008358:	4413      	add	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	440b      	add	r3, r1
 800835e:	3324      	adds	r3, #36	@ 0x24
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d108      	bne.n	8008378 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6818      	ldr	r0, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008370:	461a      	mov	r2, r3
 8008372:	2101      	movs	r1, #1
 8008374:	f009 f978 	bl	8011668 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837a:	b2db      	uxtb	r3, r3
 800837c:	4619      	mov	r1, r3
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f00b fcc9 	bl	8013d16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	f003 0308 	and.w	r3, r3, #8
 800838a:	2b00      	cmp	r3, #0
 800838c:	d008      	beq.n	80083a0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800838e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008390:	015a      	lsls	r2, r3, #5
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	4413      	add	r3, r2
 8008396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800839a:	461a      	mov	r2, r3
 800839c:	2308      	movs	r3, #8
 800839e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	f003 0310 	and.w	r3, r3, #16
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d008      	beq.n	80083bc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80083aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ac:	015a      	lsls	r2, r3, #5
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083b6:	461a      	mov	r2, r3
 80083b8:	2310      	movs	r3, #16
 80083ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d008      	beq.n	80083d8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80083c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083d2:	461a      	mov	r2, r3
 80083d4:	2340      	movs	r3, #64	@ 0x40
 80083d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	f003 0302 	and.w	r3, r3, #2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d023      	beq.n	800842a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80083e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80083e4:	6a38      	ldr	r0, [r7, #32]
 80083e6:	f008 f957 	bl	8010698 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80083ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083ec:	4613      	mov	r3, r2
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	4413      	add	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	3310      	adds	r3, #16
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	4413      	add	r3, r2
 80083fa:	3304      	adds	r3, #4
 80083fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	78db      	ldrb	r3, [r3, #3]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d108      	bne.n	8008418 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	2200      	movs	r2, #0
 800840a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800840c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840e:	b2db      	uxtb	r3, r3
 8008410:	4619      	mov	r1, r3
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f00b fd16 	bl	8013e44 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	4413      	add	r3, r2
 8008420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008424:	461a      	mov	r2, r3
 8008426:	2302      	movs	r3, #2
 8008428:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008430:	2b00      	cmp	r3, #0
 8008432:	d003      	beq.n	800843c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008434:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fcea 	bl	8008e10 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800843c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843e:	3301      	adds	r3, #1
 8008440:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008444:	085b      	lsrs	r3, r3, #1
 8008446:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800844a:	2b00      	cmp	r3, #0
 800844c:	f47f af2e 	bne.w	80082ac <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4618      	mov	r0, r3
 8008456:	f009 f841 	bl	80114dc <USB_ReadInterrupts>
 800845a:	4603      	mov	r3, r0
 800845c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008460:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008464:	d122      	bne.n	80084ac <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	69fa      	ldr	r2, [r7, #28]
 8008470:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008474:	f023 0301 	bic.w	r3, r3, #1
 8008478:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8008480:	2b01      	cmp	r3, #1
 8008482:	d108      	bne.n	8008496 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800848c:	2100      	movs	r1, #0
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fef4 	bl	800927c <HAL_PCDEx_LPM_Callback>
 8008494:	e002      	b.n	800849c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f00b fcb4 	bl	8013e04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	695a      	ldr	r2, [r3, #20]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80084aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f009 f813 	bl	80114dc <USB_ReadInterrupts>
 80084b6:	4603      	mov	r3, r0
 80084b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80084bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084c0:	d112      	bne.n	80084e8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d102      	bne.n	80084d8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f00b fc70 	bl	8013db8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	695a      	ldr	r2, [r3, #20]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80084e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4618      	mov	r0, r3
 80084ee:	f008 fff5 	bl	80114dc <USB_ReadInterrupts>
 80084f2:	4603      	mov	r3, r0
 80084f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084fc:	d121      	bne.n	8008542 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	695a      	ldr	r2, [r3, #20]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800850c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8008514:	2b00      	cmp	r3, #0
 8008516:	d111      	bne.n	800853c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008526:	089b      	lsrs	r3, r3, #2
 8008528:	f003 020f 	and.w	r2, r3, #15
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008532:	2101      	movs	r1, #1
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fea1 	bl	800927c <HAL_PCDEx_LPM_Callback>
 800853a:	e002      	b.n	8008542 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f00b fc3b 	bl	8013db8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4618      	mov	r0, r3
 8008548:	f008 ffc8 	bl	80114dc <USB_ReadInterrupts>
 800854c:	4603      	mov	r3, r0
 800854e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008556:	f040 80b7 	bne.w	80086c8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	69fa      	ldr	r2, [r7, #28]
 8008564:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008568:	f023 0301 	bic.w	r3, r3, #1
 800856c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	2110      	movs	r1, #16
 8008574:	4618      	mov	r0, r3
 8008576:	f008 f88f 	bl	8010698 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800857a:	2300      	movs	r3, #0
 800857c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800857e:	e046      	b.n	800860e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800858c:	461a      	mov	r2, r3
 800858e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008592:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	4413      	add	r3, r2
 800859c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085a4:	0151      	lsls	r1, r2, #5
 80085a6:	69fa      	ldr	r2, [r7, #28]
 80085a8:	440a      	add	r2, r1
 80085aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80085b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80085b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085c0:	461a      	mov	r2, r3
 80085c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80085c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80085c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ca:	015a      	lsls	r2, r3, #5
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	4413      	add	r3, r2
 80085d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085d8:	0151      	lsls	r1, r2, #5
 80085da:	69fa      	ldr	r2, [r7, #28]
 80085dc:	440a      	add	r2, r1
 80085de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80085e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80085e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ea:	015a      	lsls	r2, r3, #5
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	4413      	add	r3, r2
 80085f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085f8:	0151      	lsls	r1, r2, #5
 80085fa:	69fa      	ldr	r2, [r7, #28]
 80085fc:	440a      	add	r2, r1
 80085fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008602:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008606:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860a:	3301      	adds	r3, #1
 800860c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	791b      	ldrb	r3, [r3, #4]
 8008612:	461a      	mov	r2, r3
 8008614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008616:	4293      	cmp	r3, r2
 8008618:	d3b2      	bcc.n	8008580 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	69fa      	ldr	r2, [r7, #28]
 8008624:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008628:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800862c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	7bdb      	ldrb	r3, [r3, #15]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d016      	beq.n	8008664 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800863c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008640:	69fa      	ldr	r2, [r7, #28]
 8008642:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008646:	f043 030b 	orr.w	r3, r3, #11
 800864a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008656:	69fa      	ldr	r2, [r7, #28]
 8008658:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800865c:	f043 030b 	orr.w	r3, r3, #11
 8008660:	6453      	str	r3, [r2, #68]	@ 0x44
 8008662:	e015      	b.n	8008690 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800866a:	695a      	ldr	r2, [r3, #20]
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008672:	4619      	mov	r1, r3
 8008674:	f242 032b 	movw	r3, #8235	@ 0x202b
 8008678:	4313      	orrs	r3, r2
 800867a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	69fa      	ldr	r2, [r7, #28]
 8008686:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800868a:	f043 030b 	orr.w	r3, r3, #11
 800868e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	69fa      	ldr	r2, [r7, #28]
 800869a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800869e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80086a2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6818      	ldr	r0, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80086b2:	461a      	mov	r2, r3
 80086b4:	f008 ffd8 	bl	8011668 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	695a      	ldr	r2, [r3, #20]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80086c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f008 ff05 	bl	80114dc <USB_ReadInterrupts>
 80086d2:	4603      	mov	r3, r0
 80086d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80086d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086dc:	d123      	bne.n	8008726 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f008 ff9c 	bl	8011620 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f008 f84c 	bl	801078a <USB_GetDevSpeed>
 80086f2:	4603      	mov	r3, r0
 80086f4:	461a      	mov	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681c      	ldr	r4, [r3, #0]
 80086fe:	f001 fd1d 	bl	800a13c <HAL_RCC_GetHCLKFreq>
 8008702:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008708:	461a      	mov	r2, r3
 800870a:	4620      	mov	r0, r4
 800870c:	f007 fd56 	bl	80101bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f00b fb28 	bl	8013d66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	695a      	ldr	r2, [r3, #20]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8008724:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4618      	mov	r0, r3
 800872c:	f008 fed6 	bl	80114dc <USB_ReadInterrupts>
 8008730:	4603      	mov	r3, r0
 8008732:	f003 0308 	and.w	r3, r3, #8
 8008736:	2b08      	cmp	r3, #8
 8008738:	d10a      	bne.n	8008750 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f00b fb05 	bl	8013d4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	695a      	ldr	r2, [r3, #20]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f002 0208 	and.w	r2, r2, #8
 800874e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4618      	mov	r0, r3
 8008756:	f008 fec1 	bl	80114dc <USB_ReadInterrupts>
 800875a:	4603      	mov	r3, r0
 800875c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008760:	2b80      	cmp	r3, #128	@ 0x80
 8008762:	d123      	bne.n	80087ac <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008770:	2301      	movs	r3, #1
 8008772:	627b      	str	r3, [r7, #36]	@ 0x24
 8008774:	e014      	b.n	80087a0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008776:	6879      	ldr	r1, [r7, #4]
 8008778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800877a:	4613      	mov	r3, r2
 800877c:	00db      	lsls	r3, r3, #3
 800877e:	4413      	add	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	440b      	add	r3, r1
 8008784:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d105      	bne.n	800879a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800878e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008790:	b2db      	uxtb	r3, r3
 8008792:	4619      	mov	r1, r3
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fb0a 	bl	8008dae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800879a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879c:	3301      	adds	r3, #1
 800879e:	627b      	str	r3, [r7, #36]	@ 0x24
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	791b      	ldrb	r3, [r3, #4]
 80087a4:	461a      	mov	r2, r3
 80087a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d3e4      	bcc.n	8008776 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4618      	mov	r0, r3
 80087b2:	f008 fe93 	bl	80114dc <USB_ReadInterrupts>
 80087b6:	4603      	mov	r3, r0
 80087b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80087bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087c0:	d13c      	bne.n	800883c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80087c2:	2301      	movs	r3, #1
 80087c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80087c6:	e02b      	b.n	8008820 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80087c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ca:	015a      	lsls	r2, r3, #5
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	4413      	add	r3, r2
 80087d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80087d8:	6879      	ldr	r1, [r7, #4]
 80087da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087dc:	4613      	mov	r3, r2
 80087de:	00db      	lsls	r3, r3, #3
 80087e0:	4413      	add	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	440b      	add	r3, r1
 80087e6:	3318      	adds	r3, #24
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d115      	bne.n	800881a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80087ee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	da12      	bge.n	800881a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80087f4:	6879      	ldr	r1, [r7, #4]
 80087f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087f8:	4613      	mov	r3, r2
 80087fa:	00db      	lsls	r3, r3, #3
 80087fc:	4413      	add	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	440b      	add	r3, r1
 8008802:	3317      	adds	r3, #23
 8008804:	2201      	movs	r2, #1
 8008806:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880a:	b2db      	uxtb	r3, r3
 800880c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008810:	b2db      	uxtb	r3, r3
 8008812:	4619      	mov	r1, r3
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 faca 	bl	8008dae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800881a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881c:	3301      	adds	r3, #1
 800881e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	791b      	ldrb	r3, [r3, #4]
 8008824:	461a      	mov	r2, r3
 8008826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008828:	4293      	cmp	r3, r2
 800882a:	d3cd      	bcc.n	80087c8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	695a      	ldr	r2, [r3, #20]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800883a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4618      	mov	r0, r3
 8008842:	f008 fe4b 	bl	80114dc <USB_ReadInterrupts>
 8008846:	4603      	mov	r3, r0
 8008848:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800884c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008850:	d156      	bne.n	8008900 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008852:	2301      	movs	r3, #1
 8008854:	627b      	str	r3, [r7, #36]	@ 0x24
 8008856:	e045      	b.n	80088e4 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885a:	015a      	lsls	r2, r3, #5
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	4413      	add	r3, r2
 8008860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008868:	6879      	ldr	r1, [r7, #4]
 800886a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800886c:	4613      	mov	r3, r2
 800886e:	00db      	lsls	r3, r3, #3
 8008870:	4413      	add	r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	440b      	add	r3, r1
 8008876:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d12e      	bne.n	80088de <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008880:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008882:	2b00      	cmp	r3, #0
 8008884:	da2b      	bge.n	80088de <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	0c1a      	lsrs	r2, r3, #16
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8008890:	4053      	eors	r3, r2
 8008892:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008896:	2b00      	cmp	r3, #0
 8008898:	d121      	bne.n	80088de <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800889a:	6879      	ldr	r1, [r7, #4]
 800889c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800889e:	4613      	mov	r3, r2
 80088a0:	00db      	lsls	r3, r3, #3
 80088a2:	4413      	add	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	440b      	add	r3, r1
 80088a8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80088ac:	2201      	movs	r2, #1
 80088ae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80088b0:	6a3b      	ldr	r3, [r7, #32]
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80088b8:	6a3b      	ldr	r3, [r7, #32]
 80088ba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	695b      	ldr	r3, [r3, #20]
 80088c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10a      	bne.n	80088de <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	69fa      	ldr	r2, [r7, #28]
 80088d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80088da:	6053      	str	r3, [r2, #4]
            break;
 80088dc:	e008      	b.n	80088f0 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80088de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e0:	3301      	adds	r3, #1
 80088e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	791b      	ldrb	r3, [r3, #4]
 80088e8:	461a      	mov	r2, r3
 80088ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d3b3      	bcc.n	8008858 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	695a      	ldr	r2, [r3, #20]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80088fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4618      	mov	r0, r3
 8008906:	f008 fde9 	bl	80114dc <USB_ReadInterrupts>
 800890a:	4603      	mov	r3, r0
 800890c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008914:	d10a      	bne.n	800892c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f00b faa6 	bl	8013e68 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	695a      	ldr	r2, [r3, #20]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800892a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4618      	mov	r0, r3
 8008932:	f008 fdd3 	bl	80114dc <USB_ReadInterrupts>
 8008936:	4603      	mov	r3, r0
 8008938:	f003 0304 	and.w	r3, r3, #4
 800893c:	2b04      	cmp	r3, #4
 800893e:	d115      	bne.n	800896c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	f003 0304 	and.w	r3, r3, #4
 800894e:	2b00      	cmp	r3, #0
 8008950:	d002      	beq.n	8008958 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f00b fa96 	bl	8013e84 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	6859      	ldr	r1, [r3, #4]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	69ba      	ldr	r2, [r7, #24]
 8008964:	430a      	orrs	r2, r1
 8008966:	605a      	str	r2, [r3, #4]
 8008968:	e000      	b.n	800896c <HAL_PCD_IRQHandler+0x996>
      return;
 800896a:	bf00      	nop
    }
  }
}
 800896c:	3734      	adds	r7, #52	@ 0x34
 800896e:	46bd      	mov	sp, r7
 8008970:	bd90      	pop	{r4, r7, pc}

08008972 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b082      	sub	sp, #8
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	460b      	mov	r3, r1
 800897c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008984:	2b01      	cmp	r3, #1
 8008986:	d101      	bne.n	800898c <HAL_PCD_SetAddress+0x1a>
 8008988:	2302      	movs	r3, #2
 800898a:	e012      	b.n	80089b2 <HAL_PCD_SetAddress+0x40>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	78fa      	ldrb	r2, [r7, #3]
 8008998:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	78fa      	ldrb	r2, [r7, #3]
 80089a0:	4611      	mov	r1, r2
 80089a2:	4618      	mov	r0, r3
 80089a4:	f008 fd32 	bl	801140c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	4608      	mov	r0, r1
 80089c4:	4611      	mov	r1, r2
 80089c6:	461a      	mov	r2, r3
 80089c8:	4603      	mov	r3, r0
 80089ca:	70fb      	strb	r3, [r7, #3]
 80089cc:	460b      	mov	r3, r1
 80089ce:	803b      	strh	r3, [r7, #0]
 80089d0:	4613      	mov	r3, r2
 80089d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80089d4:	2300      	movs	r3, #0
 80089d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80089d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	da0f      	bge.n	8008a00 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089e0:	78fb      	ldrb	r3, [r7, #3]
 80089e2:	f003 020f 	and.w	r2, r3, #15
 80089e6:	4613      	mov	r3, r2
 80089e8:	00db      	lsls	r3, r3, #3
 80089ea:	4413      	add	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	3310      	adds	r3, #16
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	4413      	add	r3, r2
 80089f4:	3304      	adds	r3, #4
 80089f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2201      	movs	r2, #1
 80089fc:	705a      	strb	r2, [r3, #1]
 80089fe:	e00f      	b.n	8008a20 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008a00:	78fb      	ldrb	r3, [r7, #3]
 8008a02:	f003 020f 	and.w	r2, r3, #15
 8008a06:	4613      	mov	r3, r2
 8008a08:	00db      	lsls	r3, r3, #3
 8008a0a:	4413      	add	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	4413      	add	r3, r2
 8008a16:	3304      	adds	r3, #4
 8008a18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008a20:	78fb      	ldrb	r3, [r7, #3]
 8008a22:	f003 030f 	and.w	r3, r3, #15
 8008a26:	b2da      	uxtb	r2, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8008a2c:	883b      	ldrh	r3, [r7, #0]
 8008a2e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	78ba      	ldrb	r2, [r7, #2]
 8008a3a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	785b      	ldrb	r3, [r3, #1]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d004      	beq.n	8008a4e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	461a      	mov	r2, r3
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008a4e:	78bb      	ldrb	r3, [r7, #2]
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d102      	bne.n	8008a5a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d101      	bne.n	8008a68 <HAL_PCD_EP_Open+0xae>
 8008a64:	2302      	movs	r3, #2
 8008a66:	e00e      	b.n	8008a86 <HAL_PCD_EP_Open+0xcc>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68f9      	ldr	r1, [r7, #12]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f007 feac 	bl	80107d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8008a84:	7afb      	ldrb	r3, [r7, #11]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b084      	sub	sp, #16
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	460b      	mov	r3, r1
 8008a98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008a9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	da0f      	bge.n	8008ac2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008aa2:	78fb      	ldrb	r3, [r7, #3]
 8008aa4:	f003 020f 	and.w	r2, r3, #15
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	00db      	lsls	r3, r3, #3
 8008aac:	4413      	add	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	3310      	adds	r3, #16
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	3304      	adds	r3, #4
 8008ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2201      	movs	r2, #1
 8008abe:	705a      	strb	r2, [r3, #1]
 8008ac0:	e00f      	b.n	8008ae2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ac2:	78fb      	ldrb	r3, [r7, #3]
 8008ac4:	f003 020f 	and.w	r2, r3, #15
 8008ac8:	4613      	mov	r3, r2
 8008aca:	00db      	lsls	r3, r3, #3
 8008acc:	4413      	add	r3, r2
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	3304      	adds	r3, #4
 8008ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ae2:	78fb      	ldrb	r3, [r7, #3]
 8008ae4:	f003 030f 	and.w	r3, r3, #15
 8008ae8:	b2da      	uxtb	r2, r3
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d101      	bne.n	8008afc <HAL_PCD_EP_Close+0x6e>
 8008af8:	2302      	movs	r3, #2
 8008afa:	e00e      	b.n	8008b1a <HAL_PCD_EP_Close+0x8c>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68f9      	ldr	r1, [r7, #12]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f007 feea 	bl	80108e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b086      	sub	sp, #24
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	60f8      	str	r0, [r7, #12]
 8008b2a:	607a      	str	r2, [r7, #4]
 8008b2c:	603b      	str	r3, [r7, #0]
 8008b2e:	460b      	mov	r3, r1
 8008b30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b32:	7afb      	ldrb	r3, [r7, #11]
 8008b34:	f003 020f 	and.w	r2, r3, #15
 8008b38:	4613      	mov	r3, r2
 8008b3a:	00db      	lsls	r3, r3, #3
 8008b3c:	4413      	add	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	4413      	add	r3, r2
 8008b48:	3304      	adds	r3, #4
 8008b4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	683a      	ldr	r2, [r7, #0]
 8008b56:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	2200      	movs	r2, #0
 8008b62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b64:	7afb      	ldrb	r3, [r7, #11]
 8008b66:	f003 030f 	and.w	r3, r3, #15
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	799b      	ldrb	r3, [r3, #6]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d102      	bne.n	8008b7e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6818      	ldr	r0, [r3, #0]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	799b      	ldrb	r3, [r3, #6]
 8008b86:	461a      	mov	r2, r3
 8008b88:	6979      	ldr	r1, [r7, #20]
 8008b8a:	f007 ff87 	bl	8010a9c <USB_EPStartXfer>

  return HAL_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3718      	adds	r7, #24
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008ba4:	78fb      	ldrb	r3, [r7, #3]
 8008ba6:	f003 020f 	and.w	r2, r3, #15
 8008baa:	6879      	ldr	r1, [r7, #4]
 8008bac:	4613      	mov	r3, r2
 8008bae:	00db      	lsls	r3, r3, #3
 8008bb0:	4413      	add	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	440b      	add	r3, r1
 8008bb6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008bba:	681b      	ldr	r3, [r3, #0]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b086      	sub	sp, #24
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	607a      	str	r2, [r7, #4]
 8008bd2:	603b      	str	r3, [r7, #0]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bd8:	7afb      	ldrb	r3, [r7, #11]
 8008bda:	f003 020f 	and.w	r2, r3, #15
 8008bde:	4613      	mov	r3, r2
 8008be0:	00db      	lsls	r3, r3, #3
 8008be2:	4413      	add	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	3310      	adds	r3, #16
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	4413      	add	r3, r2
 8008bec:	3304      	adds	r3, #4
 8008bee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	2201      	movs	r2, #1
 8008c06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c08:	7afb      	ldrb	r3, [r7, #11]
 8008c0a:	f003 030f 	and.w	r3, r3, #15
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	799b      	ldrb	r3, [r3, #6]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d102      	bne.n	8008c22 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6818      	ldr	r0, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	799b      	ldrb	r3, [r3, #6]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	6979      	ldr	r1, [r7, #20]
 8008c2e:	f007 ff35 	bl	8010a9c <USB_EPStartXfer>

  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3718      	adds	r7, #24
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	460b      	mov	r3, r1
 8008c46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008c48:	78fb      	ldrb	r3, [r7, #3]
 8008c4a:	f003 030f 	and.w	r3, r3, #15
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	7912      	ldrb	r2, [r2, #4]
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d901      	bls.n	8008c5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e04f      	b.n	8008cfa <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	da0f      	bge.n	8008c82 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c62:	78fb      	ldrb	r3, [r7, #3]
 8008c64:	f003 020f 	and.w	r2, r3, #15
 8008c68:	4613      	mov	r3, r2
 8008c6a:	00db      	lsls	r3, r3, #3
 8008c6c:	4413      	add	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	3310      	adds	r3, #16
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	4413      	add	r3, r2
 8008c76:	3304      	adds	r3, #4
 8008c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	705a      	strb	r2, [r3, #1]
 8008c80:	e00d      	b.n	8008c9e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008c82:	78fa      	ldrb	r2, [r7, #3]
 8008c84:	4613      	mov	r3, r2
 8008c86:	00db      	lsls	r3, r3, #3
 8008c88:	4413      	add	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	4413      	add	r3, r2
 8008c94:	3304      	adds	r3, #4
 8008c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ca4:	78fb      	ldrb	r3, [r7, #3]
 8008ca6:	f003 030f 	and.w	r3, r3, #15
 8008caa:	b2da      	uxtb	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d101      	bne.n	8008cbe <HAL_PCD_EP_SetStall+0x82>
 8008cba:	2302      	movs	r3, #2
 8008cbc:	e01d      	b.n	8008cfa <HAL_PCD_EP_SetStall+0xbe>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68f9      	ldr	r1, [r7, #12]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f008 fac9 	bl	8011264 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008cd2:	78fb      	ldrb	r3, [r7, #3]
 8008cd4:	f003 030f 	and.w	r3, r3, #15
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d109      	bne.n	8008cf0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6818      	ldr	r0, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	7999      	ldrb	r1, [r3, #6]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008cea:	461a      	mov	r2, r3
 8008cec:	f008 fcbc 	bl	8011668 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008d0e:	78fb      	ldrb	r3, [r7, #3]
 8008d10:	f003 030f 	and.w	r3, r3, #15
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	7912      	ldrb	r2, [r2, #4]
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d901      	bls.n	8008d20 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e042      	b.n	8008da6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008d20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	da0f      	bge.n	8008d48 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d28:	78fb      	ldrb	r3, [r7, #3]
 8008d2a:	f003 020f 	and.w	r2, r3, #15
 8008d2e:	4613      	mov	r3, r2
 8008d30:	00db      	lsls	r3, r3, #3
 8008d32:	4413      	add	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	3310      	adds	r3, #16
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2201      	movs	r2, #1
 8008d44:	705a      	strb	r2, [r3, #1]
 8008d46:	e00f      	b.n	8008d68 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d48:	78fb      	ldrb	r3, [r7, #3]
 8008d4a:	f003 020f 	and.w	r2, r3, #15
 8008d4e:	4613      	mov	r3, r2
 8008d50:	00db      	lsls	r3, r3, #3
 8008d52:	4413      	add	r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	3304      	adds	r3, #4
 8008d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2200      	movs	r2, #0
 8008d66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d6e:	78fb      	ldrb	r3, [r7, #3]
 8008d70:	f003 030f 	and.w	r3, r3, #15
 8008d74:	b2da      	uxtb	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d101      	bne.n	8008d88 <HAL_PCD_EP_ClrStall+0x86>
 8008d84:	2302      	movs	r3, #2
 8008d86:	e00e      	b.n	8008da6 <HAL_PCD_EP_ClrStall+0xa4>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68f9      	ldr	r1, [r7, #12]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f008 fad2 	bl	8011340 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b084      	sub	sp, #16
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	460b      	mov	r3, r1
 8008db8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008dba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	da0c      	bge.n	8008ddc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008dc2:	78fb      	ldrb	r3, [r7, #3]
 8008dc4:	f003 020f 	and.w	r2, r3, #15
 8008dc8:	4613      	mov	r3, r2
 8008dca:	00db      	lsls	r3, r3, #3
 8008dcc:	4413      	add	r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	3310      	adds	r3, #16
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	3304      	adds	r3, #4
 8008dd8:	60fb      	str	r3, [r7, #12]
 8008dda:	e00c      	b.n	8008df6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ddc:	78fb      	ldrb	r3, [r7, #3]
 8008dde:	f003 020f 	and.w	r2, r3, #15
 8008de2:	4613      	mov	r3, r2
 8008de4:	00db      	lsls	r3, r3, #3
 8008de6:	4413      	add	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	4413      	add	r3, r2
 8008df2:	3304      	adds	r3, #4
 8008df4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68f9      	ldr	r1, [r7, #12]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f008 f8f1 	bl	8010fe4 <USB_EPStopXfer>
 8008e02:	4603      	mov	r3, r0
 8008e04:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008e06:	7afb      	ldrb	r3, [r7, #11]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b08a      	sub	sp, #40	@ 0x28
 8008e14:	af02      	add	r7, sp, #8
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	4613      	mov	r3, r2
 8008e28:	00db      	lsls	r3, r3, #3
 8008e2a:	4413      	add	r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	3310      	adds	r3, #16
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	4413      	add	r3, r2
 8008e34:	3304      	adds	r3, #4
 8008e36:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	695a      	ldr	r2, [r3, #20]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d901      	bls.n	8008e48 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	e06b      	b.n	8008f20 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	691a      	ldr	r2, [r3, #16]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	695b      	ldr	r3, [r3, #20]
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	69fa      	ldr	r2, [r7, #28]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d902      	bls.n	8008e64 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	3303      	adds	r3, #3
 8008e68:	089b      	lsrs	r3, r3, #2
 8008e6a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e6c:	e02a      	b.n	8008ec4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	691a      	ldr	r2, [r3, #16]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	69fa      	ldr	r2, [r7, #28]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d902      	bls.n	8008e8a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	3303      	adds	r3, #3
 8008e8e:	089b      	lsrs	r3, r3, #2
 8008e90:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	68d9      	ldr	r1, [r3, #12]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008ea2:	9300      	str	r3, [sp, #0]
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	6978      	ldr	r0, [r7, #20]
 8008ea8:	f008 f946 	bl	8011138 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	68da      	ldr	r2, [r3, #12]
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	441a      	add	r2, r3
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	695a      	ldr	r2, [r3, #20]
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	441a      	add	r2, r3
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	015a      	lsls	r2, r3, #5
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	4413      	add	r3, r2
 8008ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d809      	bhi.n	8008eee <PCD_WriteEmptyTxFifo+0xde>
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	695a      	ldr	r2, [r3, #20]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d203      	bcs.n	8008eee <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1bf      	bne.n	8008e6e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	691a      	ldr	r2, [r3, #16]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d811      	bhi.n	8008f1e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	f003 030f 	and.w	r3, r3, #15
 8008f00:	2201      	movs	r2, #1
 8008f02:	fa02 f303 	lsl.w	r3, r2, r3
 8008f06:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	43db      	mvns	r3, r3
 8008f14:	6939      	ldr	r1, [r7, #16]
 8008f16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3720      	adds	r7, #32
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b088      	sub	sp, #32
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	333c      	adds	r3, #60	@ 0x3c
 8008f40:	3304      	adds	r3, #4
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	015a      	lsls	r2, r3, #5
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	799b      	ldrb	r3, [r3, #6]
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d17b      	bne.n	8009056 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	f003 0308 	and.w	r3, r3, #8
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d015      	beq.n	8008f94 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	4a61      	ldr	r2, [pc, #388]	@ (80090f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	f240 80b9 	bls.w	80090e4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f000 80b3 	beq.w	80090e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	015a      	lsls	r2, r3, #5
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	4413      	add	r3, r2
 8008f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f90:	6093      	str	r3, [r2, #8]
 8008f92:	e0a7      	b.n	80090e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	f003 0320 	and.w	r3, r3, #32
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d009      	beq.n	8008fb2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	015a      	lsls	r2, r3, #5
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008faa:	461a      	mov	r2, r3
 8008fac:	2320      	movs	r3, #32
 8008fae:	6093      	str	r3, [r2, #8]
 8008fb0:	e098      	b.n	80090e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f040 8093 	bne.w	80090e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	4a4b      	ldr	r2, [pc, #300]	@ (80090f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d90f      	bls.n	8008fe6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00a      	beq.n	8008fe6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	015a      	lsls	r2, r3, #5
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fdc:	461a      	mov	r2, r3
 8008fde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fe2:	6093      	str	r3, [r2, #8]
 8008fe4:	e07e      	b.n	80090e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	4613      	mov	r3, r2
 8008fea:	00db      	lsls	r3, r3, #3
 8008fec:	4413      	add	r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6a1a      	ldr	r2, [r3, #32]
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	0159      	lsls	r1, r3, #5
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	440b      	add	r3, r1
 8009008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800900c:	691b      	ldr	r3, [r3, #16]
 800900e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009012:	1ad2      	subs	r2, r2, r3
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d114      	bne.n	8009048 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d109      	bne.n	800903a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6818      	ldr	r0, [r3, #0]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009030:	461a      	mov	r2, r3
 8009032:	2101      	movs	r1, #1
 8009034:	f008 fb18 	bl	8011668 <USB_EP0_OutStart>
 8009038:	e006      	b.n	8009048 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	68da      	ldr	r2, [r3, #12]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	441a      	add	r2, r3
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	b2db      	uxtb	r3, r3
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f00a fe46 	bl	8013ce0 <HAL_PCD_DataOutStageCallback>
 8009054:	e046      	b.n	80090e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	4a26      	ldr	r2, [pc, #152]	@ (80090f4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d124      	bne.n	80090a8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00a      	beq.n	800907e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	015a      	lsls	r2, r3, #5
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	4413      	add	r3, r2
 8009070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009074:	461a      	mov	r2, r3
 8009076:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800907a:	6093      	str	r3, [r2, #8]
 800907c:	e032      	b.n	80090e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	f003 0320 	and.w	r3, r3, #32
 8009084:	2b00      	cmp	r3, #0
 8009086:	d008      	beq.n	800909a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	015a      	lsls	r2, r3, #5
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	4413      	add	r3, r2
 8009090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009094:	461a      	mov	r2, r3
 8009096:	2320      	movs	r3, #32
 8009098:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	b2db      	uxtb	r3, r3
 800909e:	4619      	mov	r1, r3
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f00a fe1d 	bl	8013ce0 <HAL_PCD_DataOutStageCallback>
 80090a6:	e01d      	b.n	80090e4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d114      	bne.n	80090d8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80090ae:	6879      	ldr	r1, [r7, #4]
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	4613      	mov	r3, r2
 80090b4:	00db      	lsls	r3, r3, #3
 80090b6:	4413      	add	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	440b      	add	r3, r1
 80090bc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d108      	bne.n	80090d8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6818      	ldr	r0, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80090d0:	461a      	mov	r2, r3
 80090d2:	2100      	movs	r1, #0
 80090d4:	f008 fac8 	bl	8011668 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	4619      	mov	r1, r3
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f00a fdfe 	bl	8013ce0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3720      	adds	r7, #32
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	4f54300a 	.word	0x4f54300a
 80090f4:	4f54310a 	.word	0x4f54310a

080090f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b086      	sub	sp, #24
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	333c      	adds	r3, #60	@ 0x3c
 8009110:	3304      	adds	r3, #4
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	015a      	lsls	r2, r3, #5
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	4413      	add	r3, r2
 800911e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	4a15      	ldr	r2, [pc, #84]	@ (8009180 <PCD_EP_OutSetupPacket_int+0x88>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d90e      	bls.n	800914c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009134:	2b00      	cmp	r3, #0
 8009136:	d009      	beq.n	800914c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	015a      	lsls	r2, r3, #5
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	4413      	add	r3, r2
 8009140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009144:	461a      	mov	r2, r3
 8009146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800914a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f00a fdb5 	bl	8013cbc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	4a0a      	ldr	r2, [pc, #40]	@ (8009180 <PCD_EP_OutSetupPacket_int+0x88>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d90c      	bls.n	8009174 <PCD_EP_OutSetupPacket_int+0x7c>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	799b      	ldrb	r3, [r3, #6]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d108      	bne.n	8009174 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6818      	ldr	r0, [r3, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800916c:	461a      	mov	r2, r3
 800916e:	2101      	movs	r1, #1
 8009170:	f008 fa7a 	bl	8011668 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3718      	adds	r7, #24
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	4f54300a 	.word	0x4f54300a

08009184 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	460b      	mov	r3, r1
 800918e:	70fb      	strb	r3, [r7, #3]
 8009190:	4613      	mov	r3, r2
 8009192:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800919a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800919c:	78fb      	ldrb	r3, [r7, #3]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d107      	bne.n	80091b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80091a2:	883b      	ldrh	r3, [r7, #0]
 80091a4:	0419      	lsls	r1, r3, #16
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	430a      	orrs	r2, r1
 80091ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80091b0:	e028      	b.n	8009204 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091b8:	0c1b      	lsrs	r3, r3, #16
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	4413      	add	r3, r2
 80091be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80091c0:	2300      	movs	r3, #0
 80091c2:	73fb      	strb	r3, [r7, #15]
 80091c4:	e00d      	b.n	80091e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
 80091cc:	3340      	adds	r3, #64	@ 0x40
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	4413      	add	r3, r2
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	0c1b      	lsrs	r3, r3, #16
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	4413      	add	r3, r2
 80091da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
 80091de:	3301      	adds	r3, #1
 80091e0:	73fb      	strb	r3, [r7, #15]
 80091e2:	7bfa      	ldrb	r2, [r7, #15]
 80091e4:	78fb      	ldrb	r3, [r7, #3]
 80091e6:	3b01      	subs	r3, #1
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d3ec      	bcc.n	80091c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80091ec:	883b      	ldrh	r3, [r7, #0]
 80091ee:	0418      	lsls	r0, r3, #16
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6819      	ldr	r1, [r3, #0]
 80091f4:	78fb      	ldrb	r3, [r7, #3]
 80091f6:	3b01      	subs	r3, #1
 80091f8:	68ba      	ldr	r2, [r7, #8]
 80091fa:	4302      	orrs	r2, r0
 80091fc:	3340      	adds	r3, #64	@ 0x40
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	440b      	add	r3, r1
 8009202:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009212:	b480      	push	{r7}
 8009214:	b083      	sub	sp, #12
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	460b      	mov	r3, r1
 800921c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	887a      	ldrh	r2, [r7, #2]
 8009224:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2201      	movs	r2, #1
 8009246:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009262:	4b05      	ldr	r3, [pc, #20]	@ (8009278 <HAL_PCDEx_ActivateLPM+0x44>)
 8009264:	4313      	orrs	r3, r2
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr
 8009278:	10000003 	.word	0x10000003

0800927c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	460b      	mov	r3, r1
 8009286:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800929c:	4b19      	ldr	r3, [pc, #100]	@ (8009304 <HAL_PWREx_ConfigSupply+0x70>)
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	f003 0304 	and.w	r3, r3, #4
 80092a4:	2b04      	cmp	r3, #4
 80092a6:	d00a      	beq.n	80092be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80092a8:	4b16      	ldr	r3, [pc, #88]	@ (8009304 <HAL_PWREx_ConfigSupply+0x70>)
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	f003 0307 	and.w	r3, r3, #7
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d001      	beq.n	80092ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e01f      	b.n	80092fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	e01d      	b.n	80092fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80092be:	4b11      	ldr	r3, [pc, #68]	@ (8009304 <HAL_PWREx_ConfigSupply+0x70>)
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	f023 0207 	bic.w	r2, r3, #7
 80092c6:	490f      	ldr	r1, [pc, #60]	@ (8009304 <HAL_PWREx_ConfigSupply+0x70>)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4313      	orrs	r3, r2
 80092cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80092ce:	f7f9 fddf 	bl	8002e90 <HAL_GetTick>
 80092d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80092d4:	e009      	b.n	80092ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80092d6:	f7f9 fddb 	bl	8002e90 <HAL_GetTick>
 80092da:	4602      	mov	r2, r0
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80092e4:	d901      	bls.n	80092ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	e007      	b.n	80092fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80092ea:	4b06      	ldr	r3, [pc, #24]	@ (8009304 <HAL_PWREx_ConfigSupply+0x70>)
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80092f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092f6:	d1ee      	bne.n	80092d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	58024800 	.word	0x58024800

08009308 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009308:	b480      	push	{r7}
 800930a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800930c:	4b05      	ldr	r3, [pc, #20]	@ (8009324 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	4a04      	ldr	r2, [pc, #16]	@ (8009324 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009312:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009316:	60d3      	str	r3, [r2, #12]
}
 8009318:	bf00      	nop
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	58024800 	.word	0x58024800

08009328 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b08c      	sub	sp, #48	@ 0x30
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d101      	bne.n	800933a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	e3c8      	b.n	8009acc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 0301 	and.w	r3, r3, #1
 8009342:	2b00      	cmp	r3, #0
 8009344:	f000 8087 	beq.w	8009456 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009348:	4b88      	ldr	r3, [pc, #544]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009350:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009352:	4b86      	ldr	r3, [pc, #536]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 8009354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009356:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800935a:	2b10      	cmp	r3, #16
 800935c:	d007      	beq.n	800936e <HAL_RCC_OscConfig+0x46>
 800935e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009360:	2b18      	cmp	r3, #24
 8009362:	d110      	bne.n	8009386 <HAL_RCC_OscConfig+0x5e>
 8009364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009366:	f003 0303 	and.w	r3, r3, #3
 800936a:	2b02      	cmp	r3, #2
 800936c:	d10b      	bne.n	8009386 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800936e:	4b7f      	ldr	r3, [pc, #508]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d06c      	beq.n	8009454 <HAL_RCC_OscConfig+0x12c>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d168      	bne.n	8009454 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e3a2      	b.n	8009acc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800938e:	d106      	bne.n	800939e <HAL_RCC_OscConfig+0x76>
 8009390:	4b76      	ldr	r3, [pc, #472]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a75      	ldr	r2, [pc, #468]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 8009396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800939a:	6013      	str	r3, [r2, #0]
 800939c:	e02e      	b.n	80093fc <HAL_RCC_OscConfig+0xd4>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d10c      	bne.n	80093c0 <HAL_RCC_OscConfig+0x98>
 80093a6:	4b71      	ldr	r3, [pc, #452]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a70      	ldr	r2, [pc, #448]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 80093ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093b0:	6013      	str	r3, [r2, #0]
 80093b2:	4b6e      	ldr	r3, [pc, #440]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a6d      	ldr	r2, [pc, #436]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 80093b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80093bc:	6013      	str	r3, [r2, #0]
 80093be:	e01d      	b.n	80093fc <HAL_RCC_OscConfig+0xd4>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80093c8:	d10c      	bne.n	80093e4 <HAL_RCC_OscConfig+0xbc>
 80093ca:	4b68      	ldr	r3, [pc, #416]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a67      	ldr	r2, [pc, #412]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 80093d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80093d4:	6013      	str	r3, [r2, #0]
 80093d6:	4b65      	ldr	r3, [pc, #404]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a64      	ldr	r2, [pc, #400]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 80093dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093e0:	6013      	str	r3, [r2, #0]
 80093e2:	e00b      	b.n	80093fc <HAL_RCC_OscConfig+0xd4>
 80093e4:	4b61      	ldr	r3, [pc, #388]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a60      	ldr	r2, [pc, #384]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 80093ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093ee:	6013      	str	r3, [r2, #0]
 80093f0:	4b5e      	ldr	r3, [pc, #376]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a5d      	ldr	r2, [pc, #372]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 80093f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80093fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d013      	beq.n	800942c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009404:	f7f9 fd44 	bl	8002e90 <HAL_GetTick>
 8009408:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800940a:	e008      	b.n	800941e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800940c:	f7f9 fd40 	bl	8002e90 <HAL_GetTick>
 8009410:	4602      	mov	r2, r0
 8009412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009414:	1ad3      	subs	r3, r2, r3
 8009416:	2b64      	cmp	r3, #100	@ 0x64
 8009418:	d901      	bls.n	800941e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e356      	b.n	8009acc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800941e:	4b53      	ldr	r3, [pc, #332]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009426:	2b00      	cmp	r3, #0
 8009428:	d0f0      	beq.n	800940c <HAL_RCC_OscConfig+0xe4>
 800942a:	e014      	b.n	8009456 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800942c:	f7f9 fd30 	bl	8002e90 <HAL_GetTick>
 8009430:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009432:	e008      	b.n	8009446 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009434:	f7f9 fd2c 	bl	8002e90 <HAL_GetTick>
 8009438:	4602      	mov	r2, r0
 800943a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943c:	1ad3      	subs	r3, r2, r3
 800943e:	2b64      	cmp	r3, #100	@ 0x64
 8009440:	d901      	bls.n	8009446 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009442:	2303      	movs	r3, #3
 8009444:	e342      	b.n	8009acc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009446:	4b49      	ldr	r3, [pc, #292]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1f0      	bne.n	8009434 <HAL_RCC_OscConfig+0x10c>
 8009452:	e000      	b.n	8009456 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 0302 	and.w	r3, r3, #2
 800945e:	2b00      	cmp	r3, #0
 8009460:	f000 808c 	beq.w	800957c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009464:	4b41      	ldr	r3, [pc, #260]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800946c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800946e:	4b3f      	ldr	r3, [pc, #252]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 8009470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009472:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009474:	6a3b      	ldr	r3, [r7, #32]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d007      	beq.n	800948a <HAL_RCC_OscConfig+0x162>
 800947a:	6a3b      	ldr	r3, [r7, #32]
 800947c:	2b18      	cmp	r3, #24
 800947e:	d137      	bne.n	80094f0 <HAL_RCC_OscConfig+0x1c8>
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	f003 0303 	and.w	r3, r3, #3
 8009486:	2b00      	cmp	r3, #0
 8009488:	d132      	bne.n	80094f0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800948a:	4b38      	ldr	r3, [pc, #224]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 0304 	and.w	r3, r3, #4
 8009492:	2b00      	cmp	r3, #0
 8009494:	d005      	beq.n	80094a2 <HAL_RCC_OscConfig+0x17a>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d101      	bne.n	80094a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e314      	b.n	8009acc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80094a2:	4b32      	ldr	r3, [pc, #200]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f023 0219 	bic.w	r2, r3, #25
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	492f      	ldr	r1, [pc, #188]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 80094b0:	4313      	orrs	r3, r2
 80094b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094b4:	f7f9 fcec 	bl	8002e90 <HAL_GetTick>
 80094b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094ba:	e008      	b.n	80094ce <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094bc:	f7f9 fce8 	bl	8002e90 <HAL_GetTick>
 80094c0:	4602      	mov	r2, r0
 80094c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c4:	1ad3      	subs	r3, r2, r3
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d901      	bls.n	80094ce <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80094ca:	2303      	movs	r3, #3
 80094cc:	e2fe      	b.n	8009acc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094ce:	4b27      	ldr	r3, [pc, #156]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 0304 	and.w	r3, r3, #4
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d0f0      	beq.n	80094bc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094da:	4b24      	ldr	r3, [pc, #144]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	061b      	lsls	r3, r3, #24
 80094e8:	4920      	ldr	r1, [pc, #128]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 80094ea:	4313      	orrs	r3, r2
 80094ec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094ee:	e045      	b.n	800957c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d026      	beq.n	8009546 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80094f8:	4b1c      	ldr	r3, [pc, #112]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f023 0219 	bic.w	r2, r3, #25
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	4919      	ldr	r1, [pc, #100]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 8009506:	4313      	orrs	r3, r2
 8009508:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800950a:	f7f9 fcc1 	bl	8002e90 <HAL_GetTick>
 800950e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009510:	e008      	b.n	8009524 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009512:	f7f9 fcbd 	bl	8002e90 <HAL_GetTick>
 8009516:	4602      	mov	r2, r0
 8009518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	2b02      	cmp	r3, #2
 800951e:	d901      	bls.n	8009524 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009520:	2303      	movs	r3, #3
 8009522:	e2d3      	b.n	8009acc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009524:	4b11      	ldr	r3, [pc, #68]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 0304 	and.w	r3, r3, #4
 800952c:	2b00      	cmp	r3, #0
 800952e:	d0f0      	beq.n	8009512 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009530:	4b0e      	ldr	r3, [pc, #56]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	061b      	lsls	r3, r3, #24
 800953e:	490b      	ldr	r1, [pc, #44]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 8009540:	4313      	orrs	r3, r2
 8009542:	604b      	str	r3, [r1, #4]
 8009544:	e01a      	b.n	800957c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009546:	4b09      	ldr	r3, [pc, #36]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a08      	ldr	r2, [pc, #32]	@ (800956c <HAL_RCC_OscConfig+0x244>)
 800954c:	f023 0301 	bic.w	r3, r3, #1
 8009550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009552:	f7f9 fc9d 	bl	8002e90 <HAL_GetTick>
 8009556:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009558:	e00a      	b.n	8009570 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800955a:	f7f9 fc99 	bl	8002e90 <HAL_GetTick>
 800955e:	4602      	mov	r2, r0
 8009560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009562:	1ad3      	subs	r3, r2, r3
 8009564:	2b02      	cmp	r3, #2
 8009566:	d903      	bls.n	8009570 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009568:	2303      	movs	r3, #3
 800956a:	e2af      	b.n	8009acc <HAL_RCC_OscConfig+0x7a4>
 800956c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009570:	4b96      	ldr	r3, [pc, #600]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 0304 	and.w	r3, r3, #4
 8009578:	2b00      	cmp	r3, #0
 800957a:	d1ee      	bne.n	800955a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 0310 	and.w	r3, r3, #16
 8009584:	2b00      	cmp	r3, #0
 8009586:	d06a      	beq.n	800965e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009588:	4b90      	ldr	r3, [pc, #576]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009590:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009592:	4b8e      	ldr	r3, [pc, #568]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 8009594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009596:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	2b08      	cmp	r3, #8
 800959c:	d007      	beq.n	80095ae <HAL_RCC_OscConfig+0x286>
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	2b18      	cmp	r3, #24
 80095a2:	d11b      	bne.n	80095dc <HAL_RCC_OscConfig+0x2b4>
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	f003 0303 	and.w	r3, r3, #3
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d116      	bne.n	80095dc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80095ae:	4b87      	ldr	r3, [pc, #540]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d005      	beq.n	80095c6 <HAL_RCC_OscConfig+0x29e>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	69db      	ldr	r3, [r3, #28]
 80095be:	2b80      	cmp	r3, #128	@ 0x80
 80095c0:	d001      	beq.n	80095c6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	e282      	b.n	8009acc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80095c6:	4b81      	ldr	r3, [pc, #516]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a1b      	ldr	r3, [r3, #32]
 80095d2:	061b      	lsls	r3, r3, #24
 80095d4:	497d      	ldr	r1, [pc, #500]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 80095d6:	4313      	orrs	r3, r2
 80095d8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80095da:	e040      	b.n	800965e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	69db      	ldr	r3, [r3, #28]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d023      	beq.n	800962c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80095e4:	4b79      	ldr	r3, [pc, #484]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a78      	ldr	r2, [pc, #480]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 80095ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095f0:	f7f9 fc4e 	bl	8002e90 <HAL_GetTick>
 80095f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80095f6:	e008      	b.n	800960a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80095f8:	f7f9 fc4a 	bl	8002e90 <HAL_GetTick>
 80095fc:	4602      	mov	r2, r0
 80095fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	2b02      	cmp	r3, #2
 8009604:	d901      	bls.n	800960a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009606:	2303      	movs	r3, #3
 8009608:	e260      	b.n	8009acc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800960a:	4b70      	ldr	r3, [pc, #448]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009612:	2b00      	cmp	r3, #0
 8009614:	d0f0      	beq.n	80095f8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009616:	4b6d      	ldr	r3, [pc, #436]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	061b      	lsls	r3, r3, #24
 8009624:	4969      	ldr	r1, [pc, #420]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 8009626:	4313      	orrs	r3, r2
 8009628:	60cb      	str	r3, [r1, #12]
 800962a:	e018      	b.n	800965e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800962c:	4b67      	ldr	r3, [pc, #412]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a66      	ldr	r2, [pc, #408]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 8009632:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009638:	f7f9 fc2a 	bl	8002e90 <HAL_GetTick>
 800963c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800963e:	e008      	b.n	8009652 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009640:	f7f9 fc26 	bl	8002e90 <HAL_GetTick>
 8009644:	4602      	mov	r2, r0
 8009646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	2b02      	cmp	r3, #2
 800964c:	d901      	bls.n	8009652 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800964e:	2303      	movs	r3, #3
 8009650:	e23c      	b.n	8009acc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009652:	4b5e      	ldr	r3, [pc, #376]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1f0      	bne.n	8009640 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 0308 	and.w	r3, r3, #8
 8009666:	2b00      	cmp	r3, #0
 8009668:	d036      	beq.n	80096d8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d019      	beq.n	80096a6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009672:	4b56      	ldr	r3, [pc, #344]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 8009674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009676:	4a55      	ldr	r2, [pc, #340]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 8009678:	f043 0301 	orr.w	r3, r3, #1
 800967c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800967e:	f7f9 fc07 	bl	8002e90 <HAL_GetTick>
 8009682:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009684:	e008      	b.n	8009698 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009686:	f7f9 fc03 	bl	8002e90 <HAL_GetTick>
 800968a:	4602      	mov	r2, r0
 800968c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	2b02      	cmp	r3, #2
 8009692:	d901      	bls.n	8009698 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009694:	2303      	movs	r3, #3
 8009696:	e219      	b.n	8009acc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009698:	4b4c      	ldr	r3, [pc, #304]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 800969a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800969c:	f003 0302 	and.w	r3, r3, #2
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d0f0      	beq.n	8009686 <HAL_RCC_OscConfig+0x35e>
 80096a4:	e018      	b.n	80096d8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80096a6:	4b49      	ldr	r3, [pc, #292]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 80096a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096aa:	4a48      	ldr	r2, [pc, #288]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 80096ac:	f023 0301 	bic.w	r3, r3, #1
 80096b0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096b2:	f7f9 fbed 	bl	8002e90 <HAL_GetTick>
 80096b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80096b8:	e008      	b.n	80096cc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80096ba:	f7f9 fbe9 	bl	8002e90 <HAL_GetTick>
 80096be:	4602      	mov	r2, r0
 80096c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c2:	1ad3      	subs	r3, r2, r3
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d901      	bls.n	80096cc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80096c8:	2303      	movs	r3, #3
 80096ca:	e1ff      	b.n	8009acc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80096cc:	4b3f      	ldr	r3, [pc, #252]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 80096ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096d0:	f003 0302 	and.w	r3, r3, #2
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1f0      	bne.n	80096ba <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 0320 	and.w	r3, r3, #32
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d036      	beq.n	8009752 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	699b      	ldr	r3, [r3, #24]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d019      	beq.n	8009720 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80096ec:	4b37      	ldr	r3, [pc, #220]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a36      	ldr	r2, [pc, #216]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 80096f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80096f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80096f8:	f7f9 fbca 	bl	8002e90 <HAL_GetTick>
 80096fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80096fe:	e008      	b.n	8009712 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009700:	f7f9 fbc6 	bl	8002e90 <HAL_GetTick>
 8009704:	4602      	mov	r2, r0
 8009706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009708:	1ad3      	subs	r3, r2, r3
 800970a:	2b02      	cmp	r3, #2
 800970c:	d901      	bls.n	8009712 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800970e:	2303      	movs	r3, #3
 8009710:	e1dc      	b.n	8009acc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009712:	4b2e      	ldr	r3, [pc, #184]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d0f0      	beq.n	8009700 <HAL_RCC_OscConfig+0x3d8>
 800971e:	e018      	b.n	8009752 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009720:	4b2a      	ldr	r3, [pc, #168]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a29      	ldr	r2, [pc, #164]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 8009726:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800972a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800972c:	f7f9 fbb0 	bl	8002e90 <HAL_GetTick>
 8009730:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009732:	e008      	b.n	8009746 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009734:	f7f9 fbac 	bl	8002e90 <HAL_GetTick>
 8009738:	4602      	mov	r2, r0
 800973a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800973c:	1ad3      	subs	r3, r2, r3
 800973e:	2b02      	cmp	r3, #2
 8009740:	d901      	bls.n	8009746 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009742:	2303      	movs	r3, #3
 8009744:	e1c2      	b.n	8009acc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009746:	4b21      	ldr	r3, [pc, #132]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1f0      	bne.n	8009734 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 0304 	and.w	r3, r3, #4
 800975a:	2b00      	cmp	r3, #0
 800975c:	f000 8086 	beq.w	800986c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009760:	4b1b      	ldr	r3, [pc, #108]	@ (80097d0 <HAL_RCC_OscConfig+0x4a8>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a1a      	ldr	r2, [pc, #104]	@ (80097d0 <HAL_RCC_OscConfig+0x4a8>)
 8009766:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800976a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800976c:	f7f9 fb90 	bl	8002e90 <HAL_GetTick>
 8009770:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009772:	e008      	b.n	8009786 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009774:	f7f9 fb8c 	bl	8002e90 <HAL_GetTick>
 8009778:	4602      	mov	r2, r0
 800977a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	2b64      	cmp	r3, #100	@ 0x64
 8009780:	d901      	bls.n	8009786 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009782:	2303      	movs	r3, #3
 8009784:	e1a2      	b.n	8009acc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009786:	4b12      	ldr	r3, [pc, #72]	@ (80097d0 <HAL_RCC_OscConfig+0x4a8>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800978e:	2b00      	cmp	r3, #0
 8009790:	d0f0      	beq.n	8009774 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	2b01      	cmp	r3, #1
 8009798:	d106      	bne.n	80097a8 <HAL_RCC_OscConfig+0x480>
 800979a:	4b0c      	ldr	r3, [pc, #48]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 800979c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800979e:	4a0b      	ldr	r2, [pc, #44]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 80097a0:	f043 0301 	orr.w	r3, r3, #1
 80097a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80097a6:	e032      	b.n	800980e <HAL_RCC_OscConfig+0x4e6>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d111      	bne.n	80097d4 <HAL_RCC_OscConfig+0x4ac>
 80097b0:	4b06      	ldr	r3, [pc, #24]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 80097b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097b4:	4a05      	ldr	r2, [pc, #20]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 80097b6:	f023 0301 	bic.w	r3, r3, #1
 80097ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80097bc:	4b03      	ldr	r3, [pc, #12]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 80097be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097c0:	4a02      	ldr	r2, [pc, #8]	@ (80097cc <HAL_RCC_OscConfig+0x4a4>)
 80097c2:	f023 0304 	bic.w	r3, r3, #4
 80097c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80097c8:	e021      	b.n	800980e <HAL_RCC_OscConfig+0x4e6>
 80097ca:	bf00      	nop
 80097cc:	58024400 	.word	0x58024400
 80097d0:	58024800 	.word	0x58024800
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	2b05      	cmp	r3, #5
 80097da:	d10c      	bne.n	80097f6 <HAL_RCC_OscConfig+0x4ce>
 80097dc:	4b83      	ldr	r3, [pc, #524]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 80097de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097e0:	4a82      	ldr	r2, [pc, #520]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 80097e2:	f043 0304 	orr.w	r3, r3, #4
 80097e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80097e8:	4b80      	ldr	r3, [pc, #512]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 80097ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097ec:	4a7f      	ldr	r2, [pc, #508]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 80097ee:	f043 0301 	orr.w	r3, r3, #1
 80097f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80097f4:	e00b      	b.n	800980e <HAL_RCC_OscConfig+0x4e6>
 80097f6:	4b7d      	ldr	r3, [pc, #500]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 80097f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097fa:	4a7c      	ldr	r2, [pc, #496]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 80097fc:	f023 0301 	bic.w	r3, r3, #1
 8009800:	6713      	str	r3, [r2, #112]	@ 0x70
 8009802:	4b7a      	ldr	r3, [pc, #488]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 8009804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009806:	4a79      	ldr	r2, [pc, #484]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 8009808:	f023 0304 	bic.w	r3, r3, #4
 800980c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d015      	beq.n	8009842 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009816:	f7f9 fb3b 	bl	8002e90 <HAL_GetTick>
 800981a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800981c:	e00a      	b.n	8009834 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800981e:	f7f9 fb37 	bl	8002e90 <HAL_GetTick>
 8009822:	4602      	mov	r2, r0
 8009824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800982c:	4293      	cmp	r3, r2
 800982e:	d901      	bls.n	8009834 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009830:	2303      	movs	r3, #3
 8009832:	e14b      	b.n	8009acc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009834:	4b6d      	ldr	r3, [pc, #436]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 8009836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009838:	f003 0302 	and.w	r3, r3, #2
 800983c:	2b00      	cmp	r3, #0
 800983e:	d0ee      	beq.n	800981e <HAL_RCC_OscConfig+0x4f6>
 8009840:	e014      	b.n	800986c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009842:	f7f9 fb25 	bl	8002e90 <HAL_GetTick>
 8009846:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009848:	e00a      	b.n	8009860 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800984a:	f7f9 fb21 	bl	8002e90 <HAL_GetTick>
 800984e:	4602      	mov	r2, r0
 8009850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009852:	1ad3      	subs	r3, r2, r3
 8009854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009858:	4293      	cmp	r3, r2
 800985a:	d901      	bls.n	8009860 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800985c:	2303      	movs	r3, #3
 800985e:	e135      	b.n	8009acc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009860:	4b62      	ldr	r3, [pc, #392]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 8009862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009864:	f003 0302 	and.w	r3, r3, #2
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1ee      	bne.n	800984a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009870:	2b00      	cmp	r3, #0
 8009872:	f000 812a 	beq.w	8009aca <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009876:	4b5d      	ldr	r3, [pc, #372]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800987e:	2b18      	cmp	r3, #24
 8009880:	f000 80ba 	beq.w	80099f8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009888:	2b02      	cmp	r3, #2
 800988a:	f040 8095 	bne.w	80099b8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800988e:	4b57      	ldr	r3, [pc, #348]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a56      	ldr	r2, [pc, #344]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 8009894:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800989a:	f7f9 faf9 	bl	8002e90 <HAL_GetTick>
 800989e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098a0:	e008      	b.n	80098b4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098a2:	f7f9 faf5 	bl	8002e90 <HAL_GetTick>
 80098a6:	4602      	mov	r2, r0
 80098a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d901      	bls.n	80098b4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80098b0:	2303      	movs	r3, #3
 80098b2:	e10b      	b.n	8009acc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098b4:	4b4d      	ldr	r3, [pc, #308]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1f0      	bne.n	80098a2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80098c0:	4b4a      	ldr	r3, [pc, #296]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 80098c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098c4:	4b4a      	ldr	r3, [pc, #296]	@ (80099f0 <HAL_RCC_OscConfig+0x6c8>)
 80098c6:	4013      	ands	r3, r2
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80098d0:	0112      	lsls	r2, r2, #4
 80098d2:	430a      	orrs	r2, r1
 80098d4:	4945      	ldr	r1, [pc, #276]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 80098d6:	4313      	orrs	r3, r2
 80098d8:	628b      	str	r3, [r1, #40]	@ 0x28
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098de:	3b01      	subs	r3, #1
 80098e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098e8:	3b01      	subs	r3, #1
 80098ea:	025b      	lsls	r3, r3, #9
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	431a      	orrs	r2, r3
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098f4:	3b01      	subs	r3, #1
 80098f6:	041b      	lsls	r3, r3, #16
 80098f8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80098fc:	431a      	orrs	r2, r3
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009902:	3b01      	subs	r3, #1
 8009904:	061b      	lsls	r3, r3, #24
 8009906:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800990a:	4938      	ldr	r1, [pc, #224]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 800990c:	4313      	orrs	r3, r2
 800990e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009910:	4b36      	ldr	r3, [pc, #216]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 8009912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009914:	4a35      	ldr	r2, [pc, #212]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 8009916:	f023 0301 	bic.w	r3, r3, #1
 800991a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800991c:	4b33      	ldr	r3, [pc, #204]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 800991e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009920:	4b34      	ldr	r3, [pc, #208]	@ (80099f4 <HAL_RCC_OscConfig+0x6cc>)
 8009922:	4013      	ands	r3, r2
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009928:	00d2      	lsls	r2, r2, #3
 800992a:	4930      	ldr	r1, [pc, #192]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 800992c:	4313      	orrs	r3, r2
 800992e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009930:	4b2e      	ldr	r3, [pc, #184]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 8009932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009934:	f023 020c 	bic.w	r2, r3, #12
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800993c:	492b      	ldr	r1, [pc, #172]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 800993e:	4313      	orrs	r3, r2
 8009940:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009942:	4b2a      	ldr	r3, [pc, #168]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 8009944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009946:	f023 0202 	bic.w	r2, r3, #2
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800994e:	4927      	ldr	r1, [pc, #156]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 8009950:	4313      	orrs	r3, r2
 8009952:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009954:	4b25      	ldr	r3, [pc, #148]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 8009956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009958:	4a24      	ldr	r2, [pc, #144]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 800995a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800995e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009960:	4b22      	ldr	r3, [pc, #136]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 8009962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009964:	4a21      	ldr	r2, [pc, #132]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 8009966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800996a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800996c:	4b1f      	ldr	r3, [pc, #124]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 800996e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009970:	4a1e      	ldr	r2, [pc, #120]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 8009972:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009976:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009978:	4b1c      	ldr	r3, [pc, #112]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 800997a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800997c:	4a1b      	ldr	r2, [pc, #108]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 800997e:	f043 0301 	orr.w	r3, r3, #1
 8009982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009984:	4b19      	ldr	r3, [pc, #100]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a18      	ldr	r2, [pc, #96]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 800998a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800998e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009990:	f7f9 fa7e 	bl	8002e90 <HAL_GetTick>
 8009994:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009996:	e008      	b.n	80099aa <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009998:	f7f9 fa7a 	bl	8002e90 <HAL_GetTick>
 800999c:	4602      	mov	r2, r0
 800999e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d901      	bls.n	80099aa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80099a6:	2303      	movs	r3, #3
 80099a8:	e090      	b.n	8009acc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80099aa:	4b10      	ldr	r3, [pc, #64]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d0f0      	beq.n	8009998 <HAL_RCC_OscConfig+0x670>
 80099b6:	e088      	b.n	8009aca <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099b8:	4b0c      	ldr	r3, [pc, #48]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a0b      	ldr	r2, [pc, #44]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 80099be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80099c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099c4:	f7f9 fa64 	bl	8002e90 <HAL_GetTick>
 80099c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80099ca:	e008      	b.n	80099de <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80099cc:	f7f9 fa60 	bl	8002e90 <HAL_GetTick>
 80099d0:	4602      	mov	r2, r0
 80099d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d4:	1ad3      	subs	r3, r2, r3
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	d901      	bls.n	80099de <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80099da:	2303      	movs	r3, #3
 80099dc:	e076      	b.n	8009acc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80099de:	4b03      	ldr	r3, [pc, #12]	@ (80099ec <HAL_RCC_OscConfig+0x6c4>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1f0      	bne.n	80099cc <HAL_RCC_OscConfig+0x6a4>
 80099ea:	e06e      	b.n	8009aca <HAL_RCC_OscConfig+0x7a2>
 80099ec:	58024400 	.word	0x58024400
 80099f0:	fffffc0c 	.word	0xfffffc0c
 80099f4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80099f8:	4b36      	ldr	r3, [pc, #216]	@ (8009ad4 <HAL_RCC_OscConfig+0x7ac>)
 80099fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80099fe:	4b35      	ldr	r3, [pc, #212]	@ (8009ad4 <HAL_RCC_OscConfig+0x7ac>)
 8009a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a02:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d031      	beq.n	8009a70 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	f003 0203 	and.w	r2, r3, #3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d12a      	bne.n	8009a70 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	091b      	lsrs	r3, r3, #4
 8009a1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d122      	bne.n	8009a70 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a34:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d11a      	bne.n	8009a70 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	0a5b      	lsrs	r3, r3, #9
 8009a3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a46:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d111      	bne.n	8009a70 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	0c1b      	lsrs	r3, r3, #16
 8009a50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a58:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d108      	bne.n	8009a70 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	0e1b      	lsrs	r3, r3, #24
 8009a62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a6a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d001      	beq.n	8009a74 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	e02b      	b.n	8009acc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009a74:	4b17      	ldr	r3, [pc, #92]	@ (8009ad4 <HAL_RCC_OscConfig+0x7ac>)
 8009a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a78:	08db      	lsrs	r3, r3, #3
 8009a7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a7e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a84:	693a      	ldr	r2, [r7, #16]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d01f      	beq.n	8009aca <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009a8a:	4b12      	ldr	r3, [pc, #72]	@ (8009ad4 <HAL_RCC_OscConfig+0x7ac>)
 8009a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a8e:	4a11      	ldr	r2, [pc, #68]	@ (8009ad4 <HAL_RCC_OscConfig+0x7ac>)
 8009a90:	f023 0301 	bic.w	r3, r3, #1
 8009a94:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009a96:	f7f9 f9fb 	bl	8002e90 <HAL_GetTick>
 8009a9a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009a9c:	bf00      	nop
 8009a9e:	f7f9 f9f7 	bl	8002e90 <HAL_GetTick>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d0f9      	beq.n	8009a9e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8009ad4 <HAL_RCC_OscConfig+0x7ac>)
 8009aac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009aae:	4b0a      	ldr	r3, [pc, #40]	@ (8009ad8 <HAL_RCC_OscConfig+0x7b0>)
 8009ab0:	4013      	ands	r3, r2
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009ab6:	00d2      	lsls	r2, r2, #3
 8009ab8:	4906      	ldr	r1, [pc, #24]	@ (8009ad4 <HAL_RCC_OscConfig+0x7ac>)
 8009aba:	4313      	orrs	r3, r2
 8009abc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009abe:	4b05      	ldr	r3, [pc, #20]	@ (8009ad4 <HAL_RCC_OscConfig+0x7ac>)
 8009ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac2:	4a04      	ldr	r2, [pc, #16]	@ (8009ad4 <HAL_RCC_OscConfig+0x7ac>)
 8009ac4:	f043 0301 	orr.w	r3, r3, #1
 8009ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3730      	adds	r7, #48	@ 0x30
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	58024400 	.word	0x58024400
 8009ad8:	ffff0007 	.word	0xffff0007

08009adc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b086      	sub	sp, #24
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d101      	bne.n	8009af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	e19c      	b.n	8009e2a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009af0:	4b8a      	ldr	r3, [pc, #552]	@ (8009d1c <HAL_RCC_ClockConfig+0x240>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f003 030f 	and.w	r3, r3, #15
 8009af8:	683a      	ldr	r2, [r7, #0]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d910      	bls.n	8009b20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009afe:	4b87      	ldr	r3, [pc, #540]	@ (8009d1c <HAL_RCC_ClockConfig+0x240>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f023 020f 	bic.w	r2, r3, #15
 8009b06:	4985      	ldr	r1, [pc, #532]	@ (8009d1c <HAL_RCC_ClockConfig+0x240>)
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b0e:	4b83      	ldr	r3, [pc, #524]	@ (8009d1c <HAL_RCC_ClockConfig+0x240>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f003 030f 	and.w	r3, r3, #15
 8009b16:	683a      	ldr	r2, [r7, #0]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d001      	beq.n	8009b20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e184      	b.n	8009e2a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f003 0304 	and.w	r3, r3, #4
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d010      	beq.n	8009b4e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	691a      	ldr	r2, [r3, #16]
 8009b30:	4b7b      	ldr	r3, [pc, #492]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d908      	bls.n	8009b4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009b3c:	4b78      	ldr	r3, [pc, #480]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	4975      	ldr	r1, [pc, #468]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f003 0308 	and.w	r3, r3, #8
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d010      	beq.n	8009b7c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	695a      	ldr	r2, [r3, #20]
 8009b5e:	4b70      	ldr	r3, [pc, #448]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009b60:	69db      	ldr	r3, [r3, #28]
 8009b62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d908      	bls.n	8009b7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009b6a:	4b6d      	ldr	r3, [pc, #436]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009b6c:	69db      	ldr	r3, [r3, #28]
 8009b6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	695b      	ldr	r3, [r3, #20]
 8009b76:	496a      	ldr	r1, [pc, #424]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 0310 	and.w	r3, r3, #16
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d010      	beq.n	8009baa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	699a      	ldr	r2, [r3, #24]
 8009b8c:	4b64      	ldr	r3, [pc, #400]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009b8e:	69db      	ldr	r3, [r3, #28]
 8009b90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d908      	bls.n	8009baa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009b98:	4b61      	ldr	r3, [pc, #388]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009b9a:	69db      	ldr	r3, [r3, #28]
 8009b9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	699b      	ldr	r3, [r3, #24]
 8009ba4:	495e      	ldr	r1, [pc, #376]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f003 0320 	and.w	r3, r3, #32
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d010      	beq.n	8009bd8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	69da      	ldr	r2, [r3, #28]
 8009bba:	4b59      	ldr	r3, [pc, #356]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009bbc:	6a1b      	ldr	r3, [r3, #32]
 8009bbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d908      	bls.n	8009bd8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009bc6:	4b56      	ldr	r3, [pc, #344]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009bc8:	6a1b      	ldr	r3, [r3, #32]
 8009bca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	69db      	ldr	r3, [r3, #28]
 8009bd2:	4953      	ldr	r1, [pc, #332]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f003 0302 	and.w	r3, r3, #2
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d010      	beq.n	8009c06 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	68da      	ldr	r2, [r3, #12]
 8009be8:	4b4d      	ldr	r3, [pc, #308]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	f003 030f 	and.w	r3, r3, #15
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d908      	bls.n	8009c06 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009bf4:	4b4a      	ldr	r3, [pc, #296]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	f023 020f 	bic.w	r2, r3, #15
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	4947      	ldr	r1, [pc, #284]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009c02:	4313      	orrs	r3, r2
 8009c04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f003 0301 	and.w	r3, r3, #1
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d055      	beq.n	8009cbe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009c12:	4b43      	ldr	r3, [pc, #268]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	4940      	ldr	r1, [pc, #256]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009c20:	4313      	orrs	r3, r2
 8009c22:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	d107      	bne.n	8009c3c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009c2c:	4b3c      	ldr	r3, [pc, #240]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d121      	bne.n	8009c7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e0f6      	b.n	8009e2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	2b03      	cmp	r3, #3
 8009c42:	d107      	bne.n	8009c54 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009c44:	4b36      	ldr	r3, [pc, #216]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d115      	bne.n	8009c7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	e0ea      	b.n	8009e2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d107      	bne.n	8009c6c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c5c:	4b30      	ldr	r3, [pc, #192]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d109      	bne.n	8009c7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e0de      	b.n	8009e2a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f003 0304 	and.w	r3, r3, #4
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d101      	bne.n	8009c7c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e0d6      	b.n	8009e2a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009c7c:	4b28      	ldr	r3, [pc, #160]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	f023 0207 	bic.w	r2, r3, #7
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	4925      	ldr	r1, [pc, #148]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c8e:	f7f9 f8ff 	bl	8002e90 <HAL_GetTick>
 8009c92:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c94:	e00a      	b.n	8009cac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c96:	f7f9 f8fb 	bl	8002e90 <HAL_GetTick>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d901      	bls.n	8009cac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009ca8:	2303      	movs	r3, #3
 8009caa:	e0be      	b.n	8009e2a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cac:	4b1c      	ldr	r3, [pc, #112]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	00db      	lsls	r3, r3, #3
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d1eb      	bne.n	8009c96 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 0302 	and.w	r3, r3, #2
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d010      	beq.n	8009cec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	68da      	ldr	r2, [r3, #12]
 8009cce:	4b14      	ldr	r3, [pc, #80]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009cd0:	699b      	ldr	r3, [r3, #24]
 8009cd2:	f003 030f 	and.w	r3, r3, #15
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d208      	bcs.n	8009cec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009cda:	4b11      	ldr	r3, [pc, #68]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	f023 020f 	bic.w	r2, r3, #15
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	490e      	ldr	r1, [pc, #56]	@ (8009d20 <HAL_RCC_ClockConfig+0x244>)
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009cec:	4b0b      	ldr	r3, [pc, #44]	@ (8009d1c <HAL_RCC_ClockConfig+0x240>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 030f 	and.w	r3, r3, #15
 8009cf4:	683a      	ldr	r2, [r7, #0]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d214      	bcs.n	8009d24 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cfa:	4b08      	ldr	r3, [pc, #32]	@ (8009d1c <HAL_RCC_ClockConfig+0x240>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f023 020f 	bic.w	r2, r3, #15
 8009d02:	4906      	ldr	r1, [pc, #24]	@ (8009d1c <HAL_RCC_ClockConfig+0x240>)
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d0a:	4b04      	ldr	r3, [pc, #16]	@ (8009d1c <HAL_RCC_ClockConfig+0x240>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f003 030f 	and.w	r3, r3, #15
 8009d12:	683a      	ldr	r2, [r7, #0]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d005      	beq.n	8009d24 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e086      	b.n	8009e2a <HAL_RCC_ClockConfig+0x34e>
 8009d1c:	52002000 	.word	0x52002000
 8009d20:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 0304 	and.w	r3, r3, #4
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d010      	beq.n	8009d52 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	691a      	ldr	r2, [r3, #16]
 8009d34:	4b3f      	ldr	r3, [pc, #252]	@ (8009e34 <HAL_RCC_ClockConfig+0x358>)
 8009d36:	699b      	ldr	r3, [r3, #24]
 8009d38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d208      	bcs.n	8009d52 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009d40:	4b3c      	ldr	r3, [pc, #240]	@ (8009e34 <HAL_RCC_ClockConfig+0x358>)
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	691b      	ldr	r3, [r3, #16]
 8009d4c:	4939      	ldr	r1, [pc, #228]	@ (8009e34 <HAL_RCC_ClockConfig+0x358>)
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f003 0308 	and.w	r3, r3, #8
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d010      	beq.n	8009d80 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	695a      	ldr	r2, [r3, #20]
 8009d62:	4b34      	ldr	r3, [pc, #208]	@ (8009e34 <HAL_RCC_ClockConfig+0x358>)
 8009d64:	69db      	ldr	r3, [r3, #28]
 8009d66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d208      	bcs.n	8009d80 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009d6e:	4b31      	ldr	r3, [pc, #196]	@ (8009e34 <HAL_RCC_ClockConfig+0x358>)
 8009d70:	69db      	ldr	r3, [r3, #28]
 8009d72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	695b      	ldr	r3, [r3, #20]
 8009d7a:	492e      	ldr	r1, [pc, #184]	@ (8009e34 <HAL_RCC_ClockConfig+0x358>)
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f003 0310 	and.w	r3, r3, #16
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d010      	beq.n	8009dae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	699a      	ldr	r2, [r3, #24]
 8009d90:	4b28      	ldr	r3, [pc, #160]	@ (8009e34 <HAL_RCC_ClockConfig+0x358>)
 8009d92:	69db      	ldr	r3, [r3, #28]
 8009d94:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d208      	bcs.n	8009dae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009d9c:	4b25      	ldr	r3, [pc, #148]	@ (8009e34 <HAL_RCC_ClockConfig+0x358>)
 8009d9e:	69db      	ldr	r3, [r3, #28]
 8009da0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	699b      	ldr	r3, [r3, #24]
 8009da8:	4922      	ldr	r1, [pc, #136]	@ (8009e34 <HAL_RCC_ClockConfig+0x358>)
 8009daa:	4313      	orrs	r3, r2
 8009dac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f003 0320 	and.w	r3, r3, #32
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d010      	beq.n	8009ddc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	69da      	ldr	r2, [r3, #28]
 8009dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8009e34 <HAL_RCC_ClockConfig+0x358>)
 8009dc0:	6a1b      	ldr	r3, [r3, #32]
 8009dc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d208      	bcs.n	8009ddc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009dca:	4b1a      	ldr	r3, [pc, #104]	@ (8009e34 <HAL_RCC_ClockConfig+0x358>)
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	69db      	ldr	r3, [r3, #28]
 8009dd6:	4917      	ldr	r1, [pc, #92]	@ (8009e34 <HAL_RCC_ClockConfig+0x358>)
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009ddc:	f000 f834 	bl	8009e48 <HAL_RCC_GetSysClockFreq>
 8009de0:	4602      	mov	r2, r0
 8009de2:	4b14      	ldr	r3, [pc, #80]	@ (8009e34 <HAL_RCC_ClockConfig+0x358>)
 8009de4:	699b      	ldr	r3, [r3, #24]
 8009de6:	0a1b      	lsrs	r3, r3, #8
 8009de8:	f003 030f 	and.w	r3, r3, #15
 8009dec:	4912      	ldr	r1, [pc, #72]	@ (8009e38 <HAL_RCC_ClockConfig+0x35c>)
 8009dee:	5ccb      	ldrb	r3, [r1, r3]
 8009df0:	f003 031f 	and.w	r3, r3, #31
 8009df4:	fa22 f303 	lsr.w	r3, r2, r3
 8009df8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8009e34 <HAL_RCC_ClockConfig+0x358>)
 8009dfc:	699b      	ldr	r3, [r3, #24]
 8009dfe:	f003 030f 	and.w	r3, r3, #15
 8009e02:	4a0d      	ldr	r2, [pc, #52]	@ (8009e38 <HAL_RCC_ClockConfig+0x35c>)
 8009e04:	5cd3      	ldrb	r3, [r2, r3]
 8009e06:	f003 031f 	and.w	r3, r3, #31
 8009e0a:	693a      	ldr	r2, [r7, #16]
 8009e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009e10:	4a0a      	ldr	r2, [pc, #40]	@ (8009e3c <HAL_RCC_ClockConfig+0x360>)
 8009e12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009e14:	4a0a      	ldr	r2, [pc, #40]	@ (8009e40 <HAL_RCC_ClockConfig+0x364>)
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8009e44 <HAL_RCC_ClockConfig+0x368>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7f8 ffec 	bl	8002dfc <HAL_InitTick>
 8009e24:	4603      	mov	r3, r0
 8009e26:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3718      	adds	r7, #24
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	58024400 	.word	0x58024400
 8009e38:	080163e0 	.word	0x080163e0
 8009e3c:	24000004 	.word	0x24000004
 8009e40:	24000000 	.word	0x24000000
 8009e44:	24000008 	.word	0x24000008

08009e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b089      	sub	sp, #36	@ 0x24
 8009e4c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009e4e:	4bb3      	ldr	r3, [pc, #716]	@ (800a11c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e56:	2b18      	cmp	r3, #24
 8009e58:	f200 8155 	bhi.w	800a106 <HAL_RCC_GetSysClockFreq+0x2be>
 8009e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e64 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e62:	bf00      	nop
 8009e64:	08009ec9 	.word	0x08009ec9
 8009e68:	0800a107 	.word	0x0800a107
 8009e6c:	0800a107 	.word	0x0800a107
 8009e70:	0800a107 	.word	0x0800a107
 8009e74:	0800a107 	.word	0x0800a107
 8009e78:	0800a107 	.word	0x0800a107
 8009e7c:	0800a107 	.word	0x0800a107
 8009e80:	0800a107 	.word	0x0800a107
 8009e84:	08009eef 	.word	0x08009eef
 8009e88:	0800a107 	.word	0x0800a107
 8009e8c:	0800a107 	.word	0x0800a107
 8009e90:	0800a107 	.word	0x0800a107
 8009e94:	0800a107 	.word	0x0800a107
 8009e98:	0800a107 	.word	0x0800a107
 8009e9c:	0800a107 	.word	0x0800a107
 8009ea0:	0800a107 	.word	0x0800a107
 8009ea4:	08009ef5 	.word	0x08009ef5
 8009ea8:	0800a107 	.word	0x0800a107
 8009eac:	0800a107 	.word	0x0800a107
 8009eb0:	0800a107 	.word	0x0800a107
 8009eb4:	0800a107 	.word	0x0800a107
 8009eb8:	0800a107 	.word	0x0800a107
 8009ebc:	0800a107 	.word	0x0800a107
 8009ec0:	0800a107 	.word	0x0800a107
 8009ec4:	08009efb 	.word	0x08009efb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ec8:	4b94      	ldr	r3, [pc, #592]	@ (800a11c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f003 0320 	and.w	r3, r3, #32
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d009      	beq.n	8009ee8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ed4:	4b91      	ldr	r3, [pc, #580]	@ (800a11c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	08db      	lsrs	r3, r3, #3
 8009eda:	f003 0303 	and.w	r3, r3, #3
 8009ede:	4a90      	ldr	r2, [pc, #576]	@ (800a120 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ee4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009ee6:	e111      	b.n	800a10c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009ee8:	4b8d      	ldr	r3, [pc, #564]	@ (800a120 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009eea:	61bb      	str	r3, [r7, #24]
      break;
 8009eec:	e10e      	b.n	800a10c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009eee:	4b8d      	ldr	r3, [pc, #564]	@ (800a124 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009ef0:	61bb      	str	r3, [r7, #24]
      break;
 8009ef2:	e10b      	b.n	800a10c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009ef4:	4b8c      	ldr	r3, [pc, #560]	@ (800a128 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009ef6:	61bb      	str	r3, [r7, #24]
      break;
 8009ef8:	e108      	b.n	800a10c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009efa:	4b88      	ldr	r3, [pc, #544]	@ (800a11c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009efe:	f003 0303 	and.w	r3, r3, #3
 8009f02:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009f04:	4b85      	ldr	r3, [pc, #532]	@ (800a11c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f08:	091b      	lsrs	r3, r3, #4
 8009f0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f0e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009f10:	4b82      	ldr	r3, [pc, #520]	@ (800a11c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f14:	f003 0301 	and.w	r3, r3, #1
 8009f18:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009f1a:	4b80      	ldr	r3, [pc, #512]	@ (800a11c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f1e:	08db      	lsrs	r3, r3, #3
 8009f20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	fb02 f303 	mul.w	r3, r2, r3
 8009f2a:	ee07 3a90 	vmov	s15, r3
 8009f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f32:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	f000 80e1 	beq.w	800a100 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	f000 8083 	beq.w	800a04c <HAL_RCC_GetSysClockFreq+0x204>
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	2b02      	cmp	r3, #2
 8009f4a:	f200 80a1 	bhi.w	800a090 <HAL_RCC_GetSysClockFreq+0x248>
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d003      	beq.n	8009f5c <HAL_RCC_GetSysClockFreq+0x114>
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d056      	beq.n	800a008 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009f5a:	e099      	b.n	800a090 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f5c:	4b6f      	ldr	r3, [pc, #444]	@ (800a11c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 0320 	and.w	r3, r3, #32
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d02d      	beq.n	8009fc4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f68:	4b6c      	ldr	r3, [pc, #432]	@ (800a11c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	08db      	lsrs	r3, r3, #3
 8009f6e:	f003 0303 	and.w	r3, r3, #3
 8009f72:	4a6b      	ldr	r2, [pc, #428]	@ (800a120 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009f74:	fa22 f303 	lsr.w	r3, r2, r3
 8009f78:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	ee07 3a90 	vmov	s15, r3
 8009f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	ee07 3a90 	vmov	s15, r3
 8009f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f92:	4b62      	ldr	r3, [pc, #392]	@ (800a11c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f9a:	ee07 3a90 	vmov	s15, r3
 8009f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009fa6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a12c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fbe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009fc2:	e087      	b.n	800a0d4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	ee07 3a90 	vmov	s15, r3
 8009fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fce:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a130 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fd6:	4b51      	ldr	r3, [pc, #324]	@ (800a11c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fde:	ee07 3a90 	vmov	s15, r3
 8009fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009fea:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a12c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a002:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a006:	e065      	b.n	800a0d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	ee07 3a90 	vmov	s15, r3
 800a00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a012:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a134 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a01a:	4b40      	ldr	r3, [pc, #256]	@ (800a11c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a01c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a01e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a022:	ee07 3a90 	vmov	s15, r3
 800a026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a02a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a02e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a12c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a03a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a03e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a042:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a046:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a04a:	e043      	b.n	800a0d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	ee07 3a90 	vmov	s15, r3
 800a052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a056:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a138 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a05a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a05e:	4b2f      	ldr	r3, [pc, #188]	@ (800a11c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a066:	ee07 3a90 	vmov	s15, r3
 800a06a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a06e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a072:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a12c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a07a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a07e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a08a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a08e:	e021      	b.n	800a0d4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	ee07 3a90 	vmov	s15, r3
 800a096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a09a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a134 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a09e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0a2:	4b1e      	ldr	r3, [pc, #120]	@ (800a11c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0aa:	ee07 3a90 	vmov	s15, r3
 800a0ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0b2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0b6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a12c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a0ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a0d2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a0d4:	4b11      	ldr	r3, [pc, #68]	@ (800a11c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a0d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0d8:	0a5b      	lsrs	r3, r3, #9
 800a0da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0de:	3301      	adds	r3, #1
 800a0e0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	ee07 3a90 	vmov	s15, r3
 800a0e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a0ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0f8:	ee17 3a90 	vmov	r3, s15
 800a0fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a0fe:	e005      	b.n	800a10c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a100:	2300      	movs	r3, #0
 800a102:	61bb      	str	r3, [r7, #24]
      break;
 800a104:	e002      	b.n	800a10c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a106:	4b07      	ldr	r3, [pc, #28]	@ (800a124 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a108:	61bb      	str	r3, [r7, #24]
      break;
 800a10a:	bf00      	nop
  }

  return sysclockfreq;
 800a10c:	69bb      	ldr	r3, [r7, #24]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3724      	adds	r7, #36	@ 0x24
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	58024400 	.word	0x58024400
 800a120:	03d09000 	.word	0x03d09000
 800a124:	003d0900 	.word	0x003d0900
 800a128:	017d7840 	.word	0x017d7840
 800a12c:	46000000 	.word	0x46000000
 800a130:	4c742400 	.word	0x4c742400
 800a134:	4a742400 	.word	0x4a742400
 800a138:	4bbebc20 	.word	0x4bbebc20

0800a13c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a142:	f7ff fe81 	bl	8009e48 <HAL_RCC_GetSysClockFreq>
 800a146:	4602      	mov	r2, r0
 800a148:	4b10      	ldr	r3, [pc, #64]	@ (800a18c <HAL_RCC_GetHCLKFreq+0x50>)
 800a14a:	699b      	ldr	r3, [r3, #24]
 800a14c:	0a1b      	lsrs	r3, r3, #8
 800a14e:	f003 030f 	and.w	r3, r3, #15
 800a152:	490f      	ldr	r1, [pc, #60]	@ (800a190 <HAL_RCC_GetHCLKFreq+0x54>)
 800a154:	5ccb      	ldrb	r3, [r1, r3]
 800a156:	f003 031f 	and.w	r3, r3, #31
 800a15a:	fa22 f303 	lsr.w	r3, r2, r3
 800a15e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a160:	4b0a      	ldr	r3, [pc, #40]	@ (800a18c <HAL_RCC_GetHCLKFreq+0x50>)
 800a162:	699b      	ldr	r3, [r3, #24]
 800a164:	f003 030f 	and.w	r3, r3, #15
 800a168:	4a09      	ldr	r2, [pc, #36]	@ (800a190 <HAL_RCC_GetHCLKFreq+0x54>)
 800a16a:	5cd3      	ldrb	r3, [r2, r3]
 800a16c:	f003 031f 	and.w	r3, r3, #31
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	fa22 f303 	lsr.w	r3, r2, r3
 800a176:	4a07      	ldr	r2, [pc, #28]	@ (800a194 <HAL_RCC_GetHCLKFreq+0x58>)
 800a178:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a17a:	4a07      	ldr	r2, [pc, #28]	@ (800a198 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a180:	4b04      	ldr	r3, [pc, #16]	@ (800a194 <HAL_RCC_GetHCLKFreq+0x58>)
 800a182:	681b      	ldr	r3, [r3, #0]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	58024400 	.word	0x58024400
 800a190:	080163e0 	.word	0x080163e0
 800a194:	24000004 	.word	0x24000004
 800a198:	24000000 	.word	0x24000000

0800a19c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a1a0:	f7ff ffcc 	bl	800a13c <HAL_RCC_GetHCLKFreq>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	4b06      	ldr	r3, [pc, #24]	@ (800a1c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a1a8:	69db      	ldr	r3, [r3, #28]
 800a1aa:	091b      	lsrs	r3, r3, #4
 800a1ac:	f003 0307 	and.w	r3, r3, #7
 800a1b0:	4904      	ldr	r1, [pc, #16]	@ (800a1c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a1b2:	5ccb      	ldrb	r3, [r1, r3]
 800a1b4:	f003 031f 	and.w	r3, r3, #31
 800a1b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	58024400 	.word	0x58024400
 800a1c4:	080163e0 	.word	0x080163e0

0800a1c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a1cc:	f7ff ffb6 	bl	800a13c <HAL_RCC_GetHCLKFreq>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	4b06      	ldr	r3, [pc, #24]	@ (800a1ec <HAL_RCC_GetPCLK2Freq+0x24>)
 800a1d4:	69db      	ldr	r3, [r3, #28]
 800a1d6:	0a1b      	lsrs	r3, r3, #8
 800a1d8:	f003 0307 	and.w	r3, r3, #7
 800a1dc:	4904      	ldr	r1, [pc, #16]	@ (800a1f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a1de:	5ccb      	ldrb	r3, [r1, r3]
 800a1e0:	f003 031f 	and.w	r3, r3, #31
 800a1e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	58024400 	.word	0x58024400
 800a1f0:	080163e0 	.word	0x080163e0

0800a1f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a1f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a1f8:	b0c6      	sub	sp, #280	@ 0x118
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a200:	2300      	movs	r3, #0
 800a202:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a206:	2300      	movs	r3, #0
 800a208:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a20c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a214:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800a218:	2500      	movs	r5, #0
 800a21a:	ea54 0305 	orrs.w	r3, r4, r5
 800a21e:	d049      	beq.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a224:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a226:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a22a:	d02f      	beq.n	800a28c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a22c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a230:	d828      	bhi.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a232:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a236:	d01a      	beq.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a238:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a23c:	d822      	bhi.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d003      	beq.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a242:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a246:	d007      	beq.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a248:	e01c      	b.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a24a:	4bab      	ldr	r3, [pc, #684]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a24c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a24e:	4aaa      	ldr	r2, [pc, #680]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a250:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a254:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a256:	e01a      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a25c:	3308      	adds	r3, #8
 800a25e:	2102      	movs	r1, #2
 800a260:	4618      	mov	r0, r3
 800a262:	f002 fa49 	bl	800c6f8 <RCCEx_PLL2_Config>
 800a266:	4603      	mov	r3, r0
 800a268:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a26c:	e00f      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a26e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a272:	3328      	adds	r3, #40	@ 0x28
 800a274:	2102      	movs	r1, #2
 800a276:	4618      	mov	r0, r3
 800a278:	f002 faf0 	bl	800c85c <RCCEx_PLL3_Config>
 800a27c:	4603      	mov	r3, r0
 800a27e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a282:	e004      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a28a:	e000      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a28c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a28e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10a      	bne.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a296:	4b98      	ldr	r3, [pc, #608]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a29a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a29e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2a4:	4a94      	ldr	r2, [pc, #592]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a2a6:	430b      	orrs	r3, r1
 800a2a8:	6513      	str	r3, [r2, #80]	@ 0x50
 800a2aa:	e003      	b.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2bc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800a2c0:	f04f 0900 	mov.w	r9, #0
 800a2c4:	ea58 0309 	orrs.w	r3, r8, r9
 800a2c8:	d047      	beq.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2d0:	2b04      	cmp	r3, #4
 800a2d2:	d82a      	bhi.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a2d4:	a201      	add	r2, pc, #4	@ (adr r2, 800a2dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2da:	bf00      	nop
 800a2dc:	0800a2f1 	.word	0x0800a2f1
 800a2e0:	0800a2ff 	.word	0x0800a2ff
 800a2e4:	0800a315 	.word	0x0800a315
 800a2e8:	0800a333 	.word	0x0800a333
 800a2ec:	0800a333 	.word	0x0800a333
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2f0:	4b81      	ldr	r3, [pc, #516]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a2f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2f4:	4a80      	ldr	r2, [pc, #512]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a2f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a2fc:	e01a      	b.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a302:	3308      	adds	r3, #8
 800a304:	2100      	movs	r1, #0
 800a306:	4618      	mov	r0, r3
 800a308:	f002 f9f6 	bl	800c6f8 <RCCEx_PLL2_Config>
 800a30c:	4603      	mov	r3, r0
 800a30e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a312:	e00f      	b.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a318:	3328      	adds	r3, #40	@ 0x28
 800a31a:	2100      	movs	r1, #0
 800a31c:	4618      	mov	r0, r3
 800a31e:	f002 fa9d 	bl	800c85c <RCCEx_PLL3_Config>
 800a322:	4603      	mov	r3, r0
 800a324:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a328:	e004      	b.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a330:	e000      	b.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a332:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a334:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10a      	bne.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a33c:	4b6e      	ldr	r3, [pc, #440]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a33e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a340:	f023 0107 	bic.w	r1, r3, #7
 800a344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a34a:	4a6b      	ldr	r2, [pc, #428]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a34c:	430b      	orrs	r3, r1
 800a34e:	6513      	str	r3, [r2, #80]	@ 0x50
 800a350:	e003      	b.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a352:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a356:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800a366:	f04f 0b00 	mov.w	fp, #0
 800a36a:	ea5a 030b 	orrs.w	r3, sl, fp
 800a36e:	d05b      	beq.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a374:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a378:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a37c:	d03b      	beq.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a37e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a382:	d834      	bhi.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a384:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a388:	d037      	beq.n	800a3fa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a38a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a38e:	d82e      	bhi.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a390:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a394:	d033      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a396:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a39a:	d828      	bhi.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a39c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a3a0:	d01a      	beq.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a3a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a3a6:	d822      	bhi.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d003      	beq.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a3ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a3b0:	d007      	beq.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a3b2:	e01c      	b.n	800a3ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3b4:	4b50      	ldr	r3, [pc, #320]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3b8:	4a4f      	ldr	r2, [pc, #316]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a3ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a3c0:	e01e      	b.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3c6:	3308      	adds	r3, #8
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f002 f994 	bl	800c6f8 <RCCEx_PLL2_Config>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a3d6:	e013      	b.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3dc:	3328      	adds	r3, #40	@ 0x28
 800a3de:	2100      	movs	r1, #0
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f002 fa3b 	bl	800c85c <RCCEx_PLL3_Config>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a3ec:	e008      	b.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a3f4:	e004      	b.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a3f6:	bf00      	nop
 800a3f8:	e002      	b.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a3fa:	bf00      	nop
 800a3fc:	e000      	b.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a3fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a400:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a404:	2b00      	cmp	r3, #0
 800a406:	d10b      	bne.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a408:	4b3b      	ldr	r3, [pc, #236]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a40a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a40c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a414:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a418:	4a37      	ldr	r2, [pc, #220]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a41a:	430b      	orrs	r3, r1
 800a41c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a41e:	e003      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a420:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a424:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a430:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a434:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a438:	2300      	movs	r3, #0
 800a43a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a43e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a442:	460b      	mov	r3, r1
 800a444:	4313      	orrs	r3, r2
 800a446:	d05d      	beq.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a44c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a450:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a454:	d03b      	beq.n	800a4ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a456:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a45a:	d834      	bhi.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a45c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a460:	d037      	beq.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a462:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a466:	d82e      	bhi.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a468:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a46c:	d033      	beq.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a46e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a472:	d828      	bhi.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a474:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a478:	d01a      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a47a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a47e:	d822      	bhi.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a480:	2b00      	cmp	r3, #0
 800a482:	d003      	beq.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a484:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a488:	d007      	beq.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a48a:	e01c      	b.n	800a4c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a48c:	4b1a      	ldr	r3, [pc, #104]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a48e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a490:	4a19      	ldr	r2, [pc, #100]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a496:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a498:	e01e      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a49a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a49e:	3308      	adds	r3, #8
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f002 f928 	bl	800c6f8 <RCCEx_PLL2_Config>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a4ae:	e013      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a4b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4b4:	3328      	adds	r3, #40	@ 0x28
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f002 f9cf 	bl	800c85c <RCCEx_PLL3_Config>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a4c4:	e008      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a4cc:	e004      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a4ce:	bf00      	nop
 800a4d0:	e002      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a4d2:	bf00      	nop
 800a4d4:	e000      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a4d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d10d      	bne.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a4e0:	4b05      	ldr	r3, [pc, #20]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a4e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4e4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a4e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a4f0:	4a01      	ldr	r2, [pc, #4]	@ (800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a4f2:	430b      	orrs	r3, r1
 800a4f4:	6593      	str	r3, [r2, #88]	@ 0x58
 800a4f6:	e005      	b.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a4f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a500:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a510:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a514:	2300      	movs	r3, #0
 800a516:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a51a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a51e:	460b      	mov	r3, r1
 800a520:	4313      	orrs	r3, r2
 800a522:	d03a      	beq.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a52a:	2b30      	cmp	r3, #48	@ 0x30
 800a52c:	d01f      	beq.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a52e:	2b30      	cmp	r3, #48	@ 0x30
 800a530:	d819      	bhi.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a532:	2b20      	cmp	r3, #32
 800a534:	d00c      	beq.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a536:	2b20      	cmp	r3, #32
 800a538:	d815      	bhi.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d019      	beq.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a53e:	2b10      	cmp	r3, #16
 800a540:	d111      	bne.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a542:	4baa      	ldr	r3, [pc, #680]	@ (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a546:	4aa9      	ldr	r2, [pc, #676]	@ (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a54c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a54e:	e011      	b.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a554:	3308      	adds	r3, #8
 800a556:	2102      	movs	r1, #2
 800a558:	4618      	mov	r0, r3
 800a55a:	f002 f8cd 	bl	800c6f8 <RCCEx_PLL2_Config>
 800a55e:	4603      	mov	r3, r0
 800a560:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a564:	e006      	b.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a56c:	e002      	b.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a56e:	bf00      	nop
 800a570:	e000      	b.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a572:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a574:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d10a      	bne.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a57c:	4b9b      	ldr	r3, [pc, #620]	@ (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a57e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a580:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a58a:	4a98      	ldr	r2, [pc, #608]	@ (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a58c:	430b      	orrs	r3, r1
 800a58e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a590:	e003      	b.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a592:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a596:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a59a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a5a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a5b0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	d051      	beq.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a5ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a5c4:	d035      	beq.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a5c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a5ca:	d82e      	bhi.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a5cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a5d0:	d031      	beq.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a5d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a5d6:	d828      	bhi.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a5d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5dc:	d01a      	beq.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a5de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5e2:	d822      	bhi.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d003      	beq.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a5e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5ec:	d007      	beq.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a5ee:	e01c      	b.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5f0:	4b7e      	ldr	r3, [pc, #504]	@ (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f4:	4a7d      	ldr	r2, [pc, #500]	@ (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a5f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a5fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a5fc:	e01c      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a602:	3308      	adds	r3, #8
 800a604:	2100      	movs	r1, #0
 800a606:	4618      	mov	r0, r3
 800a608:	f002 f876 	bl	800c6f8 <RCCEx_PLL2_Config>
 800a60c:	4603      	mov	r3, r0
 800a60e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a612:	e011      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a618:	3328      	adds	r3, #40	@ 0x28
 800a61a:	2100      	movs	r1, #0
 800a61c:	4618      	mov	r0, r3
 800a61e:	f002 f91d 	bl	800c85c <RCCEx_PLL3_Config>
 800a622:	4603      	mov	r3, r0
 800a624:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a628:	e006      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a62a:	2301      	movs	r3, #1
 800a62c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a630:	e002      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a632:	bf00      	nop
 800a634:	e000      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a636:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a638:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d10a      	bne.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a640:	4b6a      	ldr	r3, [pc, #424]	@ (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a644:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a64c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a64e:	4a67      	ldr	r2, [pc, #412]	@ (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a650:	430b      	orrs	r3, r1
 800a652:	6513      	str	r3, [r2, #80]	@ 0x50
 800a654:	e003      	b.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a656:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a65a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a666:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a66a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a66e:	2300      	movs	r3, #0
 800a670:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a674:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a678:	460b      	mov	r3, r1
 800a67a:	4313      	orrs	r3, r2
 800a67c:	d053      	beq.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a67e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a684:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a688:	d033      	beq.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a68a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a68e:	d82c      	bhi.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a690:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a694:	d02f      	beq.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a696:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a69a:	d826      	bhi.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a69c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a6a0:	d02b      	beq.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a6a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a6a6:	d820      	bhi.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a6a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6ac:	d012      	beq.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a6ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6b2:	d81a      	bhi.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d022      	beq.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a6b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6bc:	d115      	bne.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6c2:	3308      	adds	r3, #8
 800a6c4:	2101      	movs	r1, #1
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f002 f816 	bl	800c6f8 <RCCEx_PLL2_Config>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a6d2:	e015      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6d8:	3328      	adds	r3, #40	@ 0x28
 800a6da:	2101      	movs	r1, #1
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f002 f8bd 	bl	800c85c <RCCEx_PLL3_Config>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a6e8:	e00a      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a6f0:	e006      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a6f2:	bf00      	nop
 800a6f4:	e004      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a6f6:	bf00      	nop
 800a6f8:	e002      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a6fa:	bf00      	nop
 800a6fc:	e000      	b.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a6fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a700:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10a      	bne.n	800a71e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a708:	4b38      	ldr	r3, [pc, #224]	@ (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a70a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a70c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a716:	4a35      	ldr	r2, [pc, #212]	@ (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a718:	430b      	orrs	r3, r1
 800a71a:	6513      	str	r3, [r2, #80]	@ 0x50
 800a71c:	e003      	b.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a71e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a722:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a732:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a736:	2300      	movs	r3, #0
 800a738:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a73c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a740:	460b      	mov	r3, r1
 800a742:	4313      	orrs	r3, r2
 800a744:	d058      	beq.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a74a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a74e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a752:	d033      	beq.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a754:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a758:	d82c      	bhi.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a75a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a75e:	d02f      	beq.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a760:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a764:	d826      	bhi.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a766:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a76a:	d02b      	beq.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a76c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a770:	d820      	bhi.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a772:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a776:	d012      	beq.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a778:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a77c:	d81a      	bhi.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d022      	beq.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a782:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a786:	d115      	bne.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a78c:	3308      	adds	r3, #8
 800a78e:	2101      	movs	r1, #1
 800a790:	4618      	mov	r0, r3
 800a792:	f001 ffb1 	bl	800c6f8 <RCCEx_PLL2_Config>
 800a796:	4603      	mov	r3, r0
 800a798:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a79c:	e015      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7a2:	3328      	adds	r3, #40	@ 0x28
 800a7a4:	2101      	movs	r1, #1
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f002 f858 	bl	800c85c <RCCEx_PLL3_Config>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a7b2:	e00a      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a7ba:	e006      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a7bc:	bf00      	nop
 800a7be:	e004      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a7c0:	bf00      	nop
 800a7c2:	e002      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a7c4:	bf00      	nop
 800a7c6:	e000      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a7c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d10e      	bne.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a7d2:	4b06      	ldr	r3, [pc, #24]	@ (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7d6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a7e2:	4a02      	ldr	r2, [pc, #8]	@ (800a7ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a7e4:	430b      	orrs	r3, r1
 800a7e6:	6593      	str	r3, [r2, #88]	@ 0x58
 800a7e8:	e006      	b.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a7ea:	bf00      	nop
 800a7ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a800:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a804:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a808:	2300      	movs	r3, #0
 800a80a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a80e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a812:	460b      	mov	r3, r1
 800a814:	4313      	orrs	r3, r2
 800a816:	d037      	beq.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a81c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a81e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a822:	d00e      	beq.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a828:	d816      	bhi.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d018      	beq.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a82e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a832:	d111      	bne.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a834:	4bc4      	ldr	r3, [pc, #784]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a838:	4ac3      	ldr	r2, [pc, #780]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a83a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a83e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a840:	e00f      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a846:	3308      	adds	r3, #8
 800a848:	2101      	movs	r1, #1
 800a84a:	4618      	mov	r0, r3
 800a84c:	f001 ff54 	bl	800c6f8 <RCCEx_PLL2_Config>
 800a850:	4603      	mov	r3, r0
 800a852:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a856:	e004      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a858:	2301      	movs	r3, #1
 800a85a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a85e:	e000      	b.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a860:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a862:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a866:	2b00      	cmp	r3, #0
 800a868:	d10a      	bne.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a86a:	4bb7      	ldr	r3, [pc, #732]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a86c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a86e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a876:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a878:	4ab3      	ldr	r2, [pc, #716]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a87a:	430b      	orrs	r3, r1
 800a87c:	6513      	str	r3, [r2, #80]	@ 0x50
 800a87e:	e003      	b.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a880:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a884:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a890:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a894:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a898:	2300      	movs	r3, #0
 800a89a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a89e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	d039      	beq.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a8a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a8ae:	2b03      	cmp	r3, #3
 800a8b0:	d81c      	bhi.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a8b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b8:	0800a8f5 	.word	0x0800a8f5
 800a8bc:	0800a8c9 	.word	0x0800a8c9
 800a8c0:	0800a8d7 	.word	0x0800a8d7
 800a8c4:	0800a8f5 	.word	0x0800a8f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8c8:	4b9f      	ldr	r3, [pc, #636]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8cc:	4a9e      	ldr	r2, [pc, #632]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a8ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a8d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a8d4:	e00f      	b.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a8d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8da:	3308      	adds	r3, #8
 800a8dc:	2102      	movs	r1, #2
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f001 ff0a 	bl	800c6f8 <RCCEx_PLL2_Config>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a8ea:	e004      	b.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a8f2:	e000      	b.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a8f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d10a      	bne.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a8fe:	4b92      	ldr	r3, [pc, #584]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a902:	f023 0103 	bic.w	r1, r3, #3
 800a906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a90a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a90c:	4a8e      	ldr	r2, [pc, #568]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a90e:	430b      	orrs	r3, r1
 800a910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a912:	e003      	b.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a914:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a918:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a91c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a924:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a928:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a92c:	2300      	movs	r3, #0
 800a92e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a932:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a936:	460b      	mov	r3, r1
 800a938:	4313      	orrs	r3, r2
 800a93a:	f000 8099 	beq.w	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a93e:	4b83      	ldr	r3, [pc, #524]	@ (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a82      	ldr	r2, [pc, #520]	@ (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a948:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a94a:	f7f8 faa1 	bl	8002e90 <HAL_GetTick>
 800a94e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a952:	e00b      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a954:	f7f8 fa9c 	bl	8002e90 <HAL_GetTick>
 800a958:	4602      	mov	r2, r0
 800a95a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a95e:	1ad3      	subs	r3, r2, r3
 800a960:	2b64      	cmp	r3, #100	@ 0x64
 800a962:	d903      	bls.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a964:	2303      	movs	r3, #3
 800a966:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a96a:	e005      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a96c:	4b77      	ldr	r3, [pc, #476]	@ (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a974:	2b00      	cmp	r3, #0
 800a976:	d0ed      	beq.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a978:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d173      	bne.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a980:	4b71      	ldr	r3, [pc, #452]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a982:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a988:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a98c:	4053      	eors	r3, r2
 800a98e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a992:	2b00      	cmp	r3, #0
 800a994:	d015      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a996:	4b6c      	ldr	r3, [pc, #432]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a99a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a99e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a9a2:	4b69      	ldr	r3, [pc, #420]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a9a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9a6:	4a68      	ldr	r2, [pc, #416]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a9a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a9ac:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a9ae:	4b66      	ldr	r3, [pc, #408]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a9b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9b2:	4a65      	ldr	r2, [pc, #404]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a9b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9b8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a9ba:	4a63      	ldr	r2, [pc, #396]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a9bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9c0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a9c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a9ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9ce:	d118      	bne.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9d0:	f7f8 fa5e 	bl	8002e90 <HAL_GetTick>
 800a9d4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a9d8:	e00d      	b.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9da:	f7f8 fa59 	bl	8002e90 <HAL_GetTick>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a9e4:	1ad2      	subs	r2, r2, r3
 800a9e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d903      	bls.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a9ee:	2303      	movs	r3, #3
 800a9f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800a9f4:	e005      	b.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a9f6:	4b54      	ldr	r3, [pc, #336]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a9f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9fa:	f003 0302 	and.w	r3, r3, #2
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d0eb      	beq.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800aa02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d129      	bne.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aa12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa1a:	d10e      	bne.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800aa1c:	4b4a      	ldr	r3, [pc, #296]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa1e:	691b      	ldr	r3, [r3, #16]
 800aa20:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800aa24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aa2c:	091a      	lsrs	r2, r3, #4
 800aa2e:	4b48      	ldr	r3, [pc, #288]	@ (800ab50 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800aa30:	4013      	ands	r3, r2
 800aa32:	4a45      	ldr	r2, [pc, #276]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa34:	430b      	orrs	r3, r1
 800aa36:	6113      	str	r3, [r2, #16]
 800aa38:	e005      	b.n	800aa46 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800aa3a:	4b43      	ldr	r3, [pc, #268]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa3c:	691b      	ldr	r3, [r3, #16]
 800aa3e:	4a42      	ldr	r2, [pc, #264]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800aa44:	6113      	str	r3, [r2, #16]
 800aa46:	4b40      	ldr	r3, [pc, #256]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa48:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800aa4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aa52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa56:	4a3c      	ldr	r2, [pc, #240]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aa58:	430b      	orrs	r3, r1
 800aa5a:	6713      	str	r3, [r2, #112]	@ 0x70
 800aa5c:	e008      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aa5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800aa66:	e003      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800aa70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa78:	f002 0301 	and.w	r3, r2, #1
 800aa7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aa80:	2300      	movs	r3, #0
 800aa82:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800aa86:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	f000 808f 	beq.w	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800aa92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa98:	2b28      	cmp	r3, #40	@ 0x28
 800aa9a:	d871      	bhi.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800aa9c:	a201      	add	r2, pc, #4	@ (adr r2, 800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800aa9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa2:	bf00      	nop
 800aaa4:	0800ab89 	.word	0x0800ab89
 800aaa8:	0800ab81 	.word	0x0800ab81
 800aaac:	0800ab81 	.word	0x0800ab81
 800aab0:	0800ab81 	.word	0x0800ab81
 800aab4:	0800ab81 	.word	0x0800ab81
 800aab8:	0800ab81 	.word	0x0800ab81
 800aabc:	0800ab81 	.word	0x0800ab81
 800aac0:	0800ab81 	.word	0x0800ab81
 800aac4:	0800ab55 	.word	0x0800ab55
 800aac8:	0800ab81 	.word	0x0800ab81
 800aacc:	0800ab81 	.word	0x0800ab81
 800aad0:	0800ab81 	.word	0x0800ab81
 800aad4:	0800ab81 	.word	0x0800ab81
 800aad8:	0800ab81 	.word	0x0800ab81
 800aadc:	0800ab81 	.word	0x0800ab81
 800aae0:	0800ab81 	.word	0x0800ab81
 800aae4:	0800ab6b 	.word	0x0800ab6b
 800aae8:	0800ab81 	.word	0x0800ab81
 800aaec:	0800ab81 	.word	0x0800ab81
 800aaf0:	0800ab81 	.word	0x0800ab81
 800aaf4:	0800ab81 	.word	0x0800ab81
 800aaf8:	0800ab81 	.word	0x0800ab81
 800aafc:	0800ab81 	.word	0x0800ab81
 800ab00:	0800ab81 	.word	0x0800ab81
 800ab04:	0800ab89 	.word	0x0800ab89
 800ab08:	0800ab81 	.word	0x0800ab81
 800ab0c:	0800ab81 	.word	0x0800ab81
 800ab10:	0800ab81 	.word	0x0800ab81
 800ab14:	0800ab81 	.word	0x0800ab81
 800ab18:	0800ab81 	.word	0x0800ab81
 800ab1c:	0800ab81 	.word	0x0800ab81
 800ab20:	0800ab81 	.word	0x0800ab81
 800ab24:	0800ab89 	.word	0x0800ab89
 800ab28:	0800ab81 	.word	0x0800ab81
 800ab2c:	0800ab81 	.word	0x0800ab81
 800ab30:	0800ab81 	.word	0x0800ab81
 800ab34:	0800ab81 	.word	0x0800ab81
 800ab38:	0800ab81 	.word	0x0800ab81
 800ab3c:	0800ab81 	.word	0x0800ab81
 800ab40:	0800ab81 	.word	0x0800ab81
 800ab44:	0800ab89 	.word	0x0800ab89
 800ab48:	58024400 	.word	0x58024400
 800ab4c:	58024800 	.word	0x58024800
 800ab50:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab58:	3308      	adds	r3, #8
 800ab5a:	2101      	movs	r1, #1
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f001 fdcb 	bl	800c6f8 <RCCEx_PLL2_Config>
 800ab62:	4603      	mov	r3, r0
 800ab64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ab68:	e00f      	b.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ab6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab6e:	3328      	adds	r3, #40	@ 0x28
 800ab70:	2101      	movs	r1, #1
 800ab72:	4618      	mov	r0, r3
 800ab74:	f001 fe72 	bl	800c85c <RCCEx_PLL3_Config>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ab7e:	e004      	b.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab80:	2301      	movs	r3, #1
 800ab82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ab86:	e000      	b.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800ab88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d10a      	bne.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ab92:	4bbf      	ldr	r3, [pc, #764]	@ (800ae90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ab94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab96:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800ab9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aba0:	4abb      	ldr	r2, [pc, #748]	@ (800ae90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aba2:	430b      	orrs	r3, r1
 800aba4:	6553      	str	r3, [r2, #84]	@ 0x54
 800aba6:	e003      	b.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aba8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800abac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800abb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb8:	f002 0302 	and.w	r3, r2, #2
 800abbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800abc0:	2300      	movs	r3, #0
 800abc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800abc6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800abca:	460b      	mov	r3, r1
 800abcc:	4313      	orrs	r3, r2
 800abce:	d041      	beq.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800abd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abd6:	2b05      	cmp	r3, #5
 800abd8:	d824      	bhi.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800abda:	a201      	add	r2, pc, #4	@ (adr r2, 800abe0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800abdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe0:	0800ac2d 	.word	0x0800ac2d
 800abe4:	0800abf9 	.word	0x0800abf9
 800abe8:	0800ac0f 	.word	0x0800ac0f
 800abec:	0800ac2d 	.word	0x0800ac2d
 800abf0:	0800ac2d 	.word	0x0800ac2d
 800abf4:	0800ac2d 	.word	0x0800ac2d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800abf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abfc:	3308      	adds	r3, #8
 800abfe:	2101      	movs	r1, #1
 800ac00:	4618      	mov	r0, r3
 800ac02:	f001 fd79 	bl	800c6f8 <RCCEx_PLL2_Config>
 800ac06:	4603      	mov	r3, r0
 800ac08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ac0c:	e00f      	b.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac12:	3328      	adds	r3, #40	@ 0x28
 800ac14:	2101      	movs	r1, #1
 800ac16:	4618      	mov	r0, r3
 800ac18:	f001 fe20 	bl	800c85c <RCCEx_PLL3_Config>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ac22:	e004      	b.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac24:	2301      	movs	r3, #1
 800ac26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ac2a:	e000      	b.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800ac2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d10a      	bne.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ac36:	4b96      	ldr	r3, [pc, #600]	@ (800ae90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ac38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac3a:	f023 0107 	bic.w	r1, r3, #7
 800ac3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac44:	4a92      	ldr	r2, [pc, #584]	@ (800ae90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ac46:	430b      	orrs	r3, r1
 800ac48:	6553      	str	r3, [r2, #84]	@ 0x54
 800ac4a:	e003      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ac54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5c:	f002 0304 	and.w	r3, r2, #4
 800ac60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ac64:	2300      	movs	r3, #0
 800ac66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ac6a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ac6e:	460b      	mov	r3, r1
 800ac70:	4313      	orrs	r3, r2
 800ac72:	d044      	beq.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ac74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac7c:	2b05      	cmp	r3, #5
 800ac7e:	d825      	bhi.n	800accc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800ac80:	a201      	add	r2, pc, #4	@ (adr r2, 800ac88 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800ac82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac86:	bf00      	nop
 800ac88:	0800acd5 	.word	0x0800acd5
 800ac8c:	0800aca1 	.word	0x0800aca1
 800ac90:	0800acb7 	.word	0x0800acb7
 800ac94:	0800acd5 	.word	0x0800acd5
 800ac98:	0800acd5 	.word	0x0800acd5
 800ac9c:	0800acd5 	.word	0x0800acd5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aca4:	3308      	adds	r3, #8
 800aca6:	2101      	movs	r1, #1
 800aca8:	4618      	mov	r0, r3
 800acaa:	f001 fd25 	bl	800c6f8 <RCCEx_PLL2_Config>
 800acae:	4603      	mov	r3, r0
 800acb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800acb4:	e00f      	b.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800acb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acba:	3328      	adds	r3, #40	@ 0x28
 800acbc:	2101      	movs	r1, #1
 800acbe:	4618      	mov	r0, r3
 800acc0:	f001 fdcc 	bl	800c85c <RCCEx_PLL3_Config>
 800acc4:	4603      	mov	r3, r0
 800acc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800acca:	e004      	b.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800accc:	2301      	movs	r3, #1
 800acce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800acd2:	e000      	b.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800acd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acd6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d10b      	bne.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800acde:	4b6c      	ldr	r3, [pc, #432]	@ (800ae90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ace0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ace2:	f023 0107 	bic.w	r1, r3, #7
 800ace6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acee:	4a68      	ldr	r2, [pc, #416]	@ (800ae90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800acf0:	430b      	orrs	r3, r1
 800acf2:	6593      	str	r3, [r2, #88]	@ 0x58
 800acf4:	e003      	b.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acf6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800acfa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800acfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad06:	f002 0320 	and.w	r3, r2, #32
 800ad0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ad0e:	2300      	movs	r3, #0
 800ad10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ad14:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800ad18:	460b      	mov	r3, r1
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	d055      	beq.n	800adca <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ad1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ad26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ad2a:	d033      	beq.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800ad2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ad30:	d82c      	bhi.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ad32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad36:	d02f      	beq.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800ad38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad3c:	d826      	bhi.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ad3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ad42:	d02b      	beq.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800ad44:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ad48:	d820      	bhi.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ad4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad4e:	d012      	beq.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800ad50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad54:	d81a      	bhi.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d022      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800ad5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad5e:	d115      	bne.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad64:	3308      	adds	r3, #8
 800ad66:	2100      	movs	r1, #0
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f001 fcc5 	bl	800c6f8 <RCCEx_PLL2_Config>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ad74:	e015      	b.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad7a:	3328      	adds	r3, #40	@ 0x28
 800ad7c:	2102      	movs	r1, #2
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f001 fd6c 	bl	800c85c <RCCEx_PLL3_Config>
 800ad84:	4603      	mov	r3, r0
 800ad86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ad8a:	e00a      	b.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ad92:	e006      	b.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ad94:	bf00      	nop
 800ad96:	e004      	b.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ad98:	bf00      	nop
 800ad9a:	e002      	b.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ad9c:	bf00      	nop
 800ad9e:	e000      	b.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ada0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ada2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d10b      	bne.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800adaa:	4b39      	ldr	r3, [pc, #228]	@ (800ae90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800adac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800adb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800adba:	4a35      	ldr	r2, [pc, #212]	@ (800ae90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800adbc:	430b      	orrs	r3, r1
 800adbe:	6553      	str	r3, [r2, #84]	@ 0x54
 800adc0:	e003      	b.n	800adca <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800adc6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800adca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800add6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800adda:	2300      	movs	r3, #0
 800addc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ade0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800ade4:	460b      	mov	r3, r1
 800ade6:	4313      	orrs	r3, r2
 800ade8:	d058      	beq.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800adea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800adf2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800adf6:	d033      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800adf8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800adfc:	d82c      	bhi.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800adfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae02:	d02f      	beq.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ae04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae08:	d826      	bhi.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ae0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ae0e:	d02b      	beq.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800ae10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ae14:	d820      	bhi.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ae16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae1a:	d012      	beq.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800ae1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae20:	d81a      	bhi.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d022      	beq.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800ae26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae2a:	d115      	bne.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae30:	3308      	adds	r3, #8
 800ae32:	2100      	movs	r1, #0
 800ae34:	4618      	mov	r0, r3
 800ae36:	f001 fc5f 	bl	800c6f8 <RCCEx_PLL2_Config>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ae40:	e015      	b.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ae42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae46:	3328      	adds	r3, #40	@ 0x28
 800ae48:	2102      	movs	r1, #2
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f001 fd06 	bl	800c85c <RCCEx_PLL3_Config>
 800ae50:	4603      	mov	r3, r0
 800ae52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ae56:	e00a      	b.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ae5e:	e006      	b.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ae60:	bf00      	nop
 800ae62:	e004      	b.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ae64:	bf00      	nop
 800ae66:	e002      	b.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ae68:	bf00      	nop
 800ae6a:	e000      	b.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ae6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d10e      	bne.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ae76:	4b06      	ldr	r3, [pc, #24]	@ (800ae90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ae78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae7a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800ae7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ae86:	4a02      	ldr	r2, [pc, #8]	@ (800ae90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ae88:	430b      	orrs	r3, r1
 800ae8a:	6593      	str	r3, [r2, #88]	@ 0x58
 800ae8c:	e006      	b.n	800ae9c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800ae8e:	bf00      	nop
 800ae90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ae9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800aea8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aeac:	2300      	movs	r3, #0
 800aeae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aeb2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	d055      	beq.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800aebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aec0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aec4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800aec8:	d033      	beq.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800aeca:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800aece:	d82c      	bhi.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800aed0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aed4:	d02f      	beq.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800aed6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aeda:	d826      	bhi.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800aedc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800aee0:	d02b      	beq.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800aee2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800aee6:	d820      	bhi.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800aee8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aeec:	d012      	beq.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800aeee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aef2:	d81a      	bhi.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d022      	beq.n	800af3e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800aef8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aefc:	d115      	bne.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aefe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af02:	3308      	adds	r3, #8
 800af04:	2100      	movs	r1, #0
 800af06:	4618      	mov	r0, r3
 800af08:	f001 fbf6 	bl	800c6f8 <RCCEx_PLL2_Config>
 800af0c:	4603      	mov	r3, r0
 800af0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800af12:	e015      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af18:	3328      	adds	r3, #40	@ 0x28
 800af1a:	2102      	movs	r1, #2
 800af1c:	4618      	mov	r0, r3
 800af1e:	f001 fc9d 	bl	800c85c <RCCEx_PLL3_Config>
 800af22:	4603      	mov	r3, r0
 800af24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800af28:	e00a      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af2a:	2301      	movs	r3, #1
 800af2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800af30:	e006      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800af32:	bf00      	nop
 800af34:	e004      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800af36:	bf00      	nop
 800af38:	e002      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800af3a:	bf00      	nop
 800af3c:	e000      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800af3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af44:	2b00      	cmp	r3, #0
 800af46:	d10b      	bne.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800af48:	4ba0      	ldr	r3, [pc, #640]	@ (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800af4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af4c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800af50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800af58:	4a9c      	ldr	r2, [pc, #624]	@ (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800af5a:	430b      	orrs	r3, r1
 800af5c:	6593      	str	r3, [r2, #88]	@ 0x58
 800af5e:	e003      	b.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800af68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af70:	f002 0308 	and.w	r3, r2, #8
 800af74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800af78:	2300      	movs	r3, #0
 800af7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800af7e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800af82:	460b      	mov	r3, r1
 800af84:	4313      	orrs	r3, r2
 800af86:	d01e      	beq.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800af88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af94:	d10c      	bne.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800af96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af9a:	3328      	adds	r3, #40	@ 0x28
 800af9c:	2102      	movs	r1, #2
 800af9e:	4618      	mov	r0, r3
 800afa0:	f001 fc5c 	bl	800c85c <RCCEx_PLL3_Config>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d002      	beq.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800afaa:	2301      	movs	r3, #1
 800afac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800afb0:	4b86      	ldr	r3, [pc, #536]	@ (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800afb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afb4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800afb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afc0:	4a82      	ldr	r2, [pc, #520]	@ (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800afc2:	430b      	orrs	r3, r1
 800afc4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800afc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afce:	f002 0310 	and.w	r3, r2, #16
 800afd2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800afd6:	2300      	movs	r3, #0
 800afd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800afdc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800afe0:	460b      	mov	r3, r1
 800afe2:	4313      	orrs	r3, r2
 800afe4:	d01e      	beq.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800afe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800afee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aff2:	d10c      	bne.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aff8:	3328      	adds	r3, #40	@ 0x28
 800affa:	2102      	movs	r1, #2
 800affc:	4618      	mov	r0, r3
 800affe:	f001 fc2d 	bl	800c85c <RCCEx_PLL3_Config>
 800b002:	4603      	mov	r3, r0
 800b004:	2b00      	cmp	r3, #0
 800b006:	d002      	beq.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b008:	2301      	movs	r3, #1
 800b00a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b00e:	4b6f      	ldr	r3, [pc, #444]	@ (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b012:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b01a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b01e:	4a6b      	ldr	r2, [pc, #428]	@ (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b020:	430b      	orrs	r3, r1
 800b022:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b030:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b032:	2300      	movs	r3, #0
 800b034:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b036:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b03a:	460b      	mov	r3, r1
 800b03c:	4313      	orrs	r3, r2
 800b03e:	d03e      	beq.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b044:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b048:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b04c:	d022      	beq.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b04e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b052:	d81b      	bhi.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b054:	2b00      	cmp	r3, #0
 800b056:	d003      	beq.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b05c:	d00b      	beq.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b05e:	e015      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b064:	3308      	adds	r3, #8
 800b066:	2100      	movs	r1, #0
 800b068:	4618      	mov	r0, r3
 800b06a:	f001 fb45 	bl	800c6f8 <RCCEx_PLL2_Config>
 800b06e:	4603      	mov	r3, r0
 800b070:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b074:	e00f      	b.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b07a:	3328      	adds	r3, #40	@ 0x28
 800b07c:	2102      	movs	r1, #2
 800b07e:	4618      	mov	r0, r3
 800b080:	f001 fbec 	bl	800c85c <RCCEx_PLL3_Config>
 800b084:	4603      	mov	r3, r0
 800b086:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b08a:	e004      	b.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b08c:	2301      	movs	r3, #1
 800b08e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b092:	e000      	b.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b094:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b096:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d10b      	bne.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b09e:	4b4b      	ldr	r3, [pc, #300]	@ (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b0a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0a2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b0ae:	4a47      	ldr	r2, [pc, #284]	@ (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b0b0:	430b      	orrs	r3, r1
 800b0b2:	6593      	str	r3, [r2, #88]	@ 0x58
 800b0b4:	e003      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b0ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b0ca:	673b      	str	r3, [r7, #112]	@ 0x70
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	677b      	str	r3, [r7, #116]	@ 0x74
 800b0d0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	d03b      	beq.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b0da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b0e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b0e6:	d01f      	beq.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b0e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b0ec:	d818      	bhi.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b0ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b0f2:	d003      	beq.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b0f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b0f8:	d007      	beq.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b0fa:	e011      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0fc:	4b33      	ldr	r3, [pc, #204]	@ (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b0fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b100:	4a32      	ldr	r2, [pc, #200]	@ (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b102:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b106:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b108:	e00f      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b10e:	3328      	adds	r3, #40	@ 0x28
 800b110:	2101      	movs	r1, #1
 800b112:	4618      	mov	r0, r3
 800b114:	f001 fba2 	bl	800c85c <RCCEx_PLL3_Config>
 800b118:	4603      	mov	r3, r0
 800b11a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b11e:	e004      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b120:	2301      	movs	r3, #1
 800b122:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b126:	e000      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b12a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d10b      	bne.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b132:	4b26      	ldr	r3, [pc, #152]	@ (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b136:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b13a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b13e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b142:	4a22      	ldr	r2, [pc, #136]	@ (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b144:	430b      	orrs	r3, r1
 800b146:	6553      	str	r3, [r2, #84]	@ 0x54
 800b148:	e003      	b.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b14a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b14e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800b15e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b160:	2300      	movs	r3, #0
 800b162:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b164:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800b168:	460b      	mov	r3, r1
 800b16a:	4313      	orrs	r3, r2
 800b16c:	d034      	beq.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b16e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b174:	2b00      	cmp	r3, #0
 800b176:	d003      	beq.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b17c:	d007      	beq.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b17e:	e011      	b.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b180:	4b12      	ldr	r3, [pc, #72]	@ (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b184:	4a11      	ldr	r2, [pc, #68]	@ (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b18a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b18c:	e00e      	b.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b18e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b192:	3308      	adds	r3, #8
 800b194:	2102      	movs	r1, #2
 800b196:	4618      	mov	r0, r3
 800b198:	f001 faae 	bl	800c6f8 <RCCEx_PLL2_Config>
 800b19c:	4603      	mov	r3, r0
 800b19e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b1a2:	e003      	b.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b1aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d10d      	bne.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b1b4:	4b05      	ldr	r3, [pc, #20]	@ (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b1b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1b8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b1bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1c2:	4a02      	ldr	r2, [pc, #8]	@ (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b1c4:	430b      	orrs	r3, r1
 800b1c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b1c8:	e006      	b.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b1ca:	bf00      	nop
 800b1cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b1d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b1d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800b1e4:	663b      	str	r3, [r7, #96]	@ 0x60
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	667b      	str	r3, [r7, #100]	@ 0x64
 800b1ea:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	d00c      	beq.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b1f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1f8:	3328      	adds	r3, #40	@ 0x28
 800b1fa:	2102      	movs	r1, #2
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f001 fb2d 	bl	800c85c <RCCEx_PLL3_Config>
 800b202:	4603      	mov	r3, r0
 800b204:	2b00      	cmp	r3, #0
 800b206:	d002      	beq.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b208:	2301      	movs	r3, #1
 800b20a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b20e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b216:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800b21a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b21c:	2300      	movs	r3, #0
 800b21e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b220:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800b224:	460b      	mov	r3, r1
 800b226:	4313      	orrs	r3, r2
 800b228:	d036      	beq.n	800b298 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b22a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b22e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b230:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b234:	d018      	beq.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b236:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b23a:	d811      	bhi.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b23c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b240:	d014      	beq.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b242:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b246:	d80b      	bhi.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d011      	beq.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b24c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b250:	d106      	bne.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b252:	4bb7      	ldr	r3, [pc, #732]	@ (800b530 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b256:	4ab6      	ldr	r2, [pc, #728]	@ (800b530 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b25c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b25e:	e008      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b260:	2301      	movs	r3, #1
 800b262:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b266:	e004      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b268:	bf00      	nop
 800b26a:	e002      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b26c:	bf00      	nop
 800b26e:	e000      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b270:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b272:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10a      	bne.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b27a:	4bad      	ldr	r3, [pc, #692]	@ (800b530 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b27c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b27e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b286:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b288:	4aa9      	ldr	r2, [pc, #676]	@ (800b530 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b28a:	430b      	orrs	r3, r1
 800b28c:	6553      	str	r3, [r2, #84]	@ 0x54
 800b28e:	e003      	b.n	800b298 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b290:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b294:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800b2a4:	653b      	str	r3, [r7, #80]	@ 0x50
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	657b      	str	r3, [r7, #84]	@ 0x54
 800b2aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	d009      	beq.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b2b4:	4b9e      	ldr	r3, [pc, #632]	@ (800b530 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b2b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b2bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2c2:	4a9b      	ldr	r2, [pc, #620]	@ (800b530 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b2c4:	430b      	orrs	r3, r1
 800b2c6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b2c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800b2d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2da:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800b2de:	460b      	mov	r3, r1
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	d009      	beq.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b2e4:	4b92      	ldr	r3, [pc, #584]	@ (800b530 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b2e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2e8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800b2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b2f2:	4a8f      	ldr	r2, [pc, #572]	@ (800b530 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b2f4:	430b      	orrs	r3, r1
 800b2f6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b300:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800b304:	643b      	str	r3, [r7, #64]	@ 0x40
 800b306:	2300      	movs	r3, #0
 800b308:	647b      	str	r3, [r7, #68]	@ 0x44
 800b30a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800b30e:	460b      	mov	r3, r1
 800b310:	4313      	orrs	r3, r2
 800b312:	d00e      	beq.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b314:	4b86      	ldr	r3, [pc, #536]	@ (800b530 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	4a85      	ldr	r2, [pc, #532]	@ (800b530 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b31a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b31e:	6113      	str	r3, [r2, #16]
 800b320:	4b83      	ldr	r3, [pc, #524]	@ (800b530 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b322:	6919      	ldr	r1, [r3, #16]
 800b324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b328:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b32c:	4a80      	ldr	r2, [pc, #512]	@ (800b530 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b32e:	430b      	orrs	r3, r1
 800b330:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800b33e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b340:	2300      	movs	r3, #0
 800b342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b344:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b348:	460b      	mov	r3, r1
 800b34a:	4313      	orrs	r3, r2
 800b34c:	d009      	beq.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b34e:	4b78      	ldr	r3, [pc, #480]	@ (800b530 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b352:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b35a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b35c:	4a74      	ldr	r2, [pc, #464]	@ (800b530 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b35e:	430b      	orrs	r3, r1
 800b360:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b36e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b370:	2300      	movs	r3, #0
 800b372:	637b      	str	r3, [r7, #52]	@ 0x34
 800b374:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b378:	460b      	mov	r3, r1
 800b37a:	4313      	orrs	r3, r2
 800b37c:	d00a      	beq.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b37e:	4b6c      	ldr	r3, [pc, #432]	@ (800b530 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b382:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b38a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b38e:	4a68      	ldr	r2, [pc, #416]	@ (800b530 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b390:	430b      	orrs	r3, r1
 800b392:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39c:	2100      	movs	r1, #0
 800b39e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b3a0:	f003 0301 	and.w	r3, r3, #1
 800b3a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3a6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	d011      	beq.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3b4:	3308      	adds	r3, #8
 800b3b6:	2100      	movs	r1, #0
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f001 f99d 	bl	800c6f8 <RCCEx_PLL2_Config>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b3c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d003      	beq.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b3d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b3d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3dc:	2100      	movs	r1, #0
 800b3de:	6239      	str	r1, [r7, #32]
 800b3e0:	f003 0302 	and.w	r3, r3, #2
 800b3e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3e6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	4313      	orrs	r3, r2
 800b3ee:	d011      	beq.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b3f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3f4:	3308      	adds	r3, #8
 800b3f6:	2101      	movs	r1, #1
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f001 f97d 	bl	800c6f8 <RCCEx_PLL2_Config>
 800b3fe:	4603      	mov	r3, r0
 800b400:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b404:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d003      	beq.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b40c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b410:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41c:	2100      	movs	r1, #0
 800b41e:	61b9      	str	r1, [r7, #24]
 800b420:	f003 0304 	and.w	r3, r3, #4
 800b424:	61fb      	str	r3, [r7, #28]
 800b426:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b42a:	460b      	mov	r3, r1
 800b42c:	4313      	orrs	r3, r2
 800b42e:	d011      	beq.n	800b454 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b434:	3308      	adds	r3, #8
 800b436:	2102      	movs	r1, #2
 800b438:	4618      	mov	r0, r3
 800b43a:	f001 f95d 	bl	800c6f8 <RCCEx_PLL2_Config>
 800b43e:	4603      	mov	r3, r0
 800b440:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b444:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d003      	beq.n	800b454 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b44c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b450:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45c:	2100      	movs	r1, #0
 800b45e:	6139      	str	r1, [r7, #16]
 800b460:	f003 0308 	and.w	r3, r3, #8
 800b464:	617b      	str	r3, [r7, #20]
 800b466:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b46a:	460b      	mov	r3, r1
 800b46c:	4313      	orrs	r3, r2
 800b46e:	d011      	beq.n	800b494 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b474:	3328      	adds	r3, #40	@ 0x28
 800b476:	2100      	movs	r1, #0
 800b478:	4618      	mov	r0, r3
 800b47a:	f001 f9ef 	bl	800c85c <RCCEx_PLL3_Config>
 800b47e:	4603      	mov	r3, r0
 800b480:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800b484:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d003      	beq.n	800b494 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b48c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b490:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49c:	2100      	movs	r1, #0
 800b49e:	60b9      	str	r1, [r7, #8]
 800b4a0:	f003 0310 	and.w	r3, r3, #16
 800b4a4:	60fb      	str	r3, [r7, #12]
 800b4a6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	d011      	beq.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b4b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4b4:	3328      	adds	r3, #40	@ 0x28
 800b4b6:	2101      	movs	r1, #1
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f001 f9cf 	bl	800c85c <RCCEx_PLL3_Config>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b4c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d003      	beq.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b4d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4dc:	2100      	movs	r1, #0
 800b4de:	6039      	str	r1, [r7, #0]
 800b4e0:	f003 0320 	and.w	r3, r3, #32
 800b4e4:	607b      	str	r3, [r7, #4]
 800b4e6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	d011      	beq.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4f4:	3328      	adds	r3, #40	@ 0x28
 800b4f6:	2102      	movs	r1, #2
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f001 f9af 	bl	800c85c <RCCEx_PLL3_Config>
 800b4fe:	4603      	mov	r3, r0
 800b500:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b504:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d003      	beq.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b50c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b510:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800b514:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d101      	bne.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b51c:	2300      	movs	r3, #0
 800b51e:	e000      	b.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b520:	2301      	movs	r3, #1
}
 800b522:	4618      	mov	r0, r3
 800b524:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800b528:	46bd      	mov	sp, r7
 800b52a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b52e:	bf00      	nop
 800b530:	58024400 	.word	0x58024400

0800b534 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b090      	sub	sp, #64	@ 0x40
 800b538:	af00      	add	r7, sp, #0
 800b53a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b53e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b542:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b546:	430b      	orrs	r3, r1
 800b548:	f040 8094 	bne.w	800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b54c:	4b9b      	ldr	r3, [pc, #620]	@ (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b54e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b550:	f003 0307 	and.w	r3, r3, #7
 800b554:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b558:	2b04      	cmp	r3, #4
 800b55a:	f200 8087 	bhi.w	800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b55e:	a201      	add	r2, pc, #4	@ (adr r2, 800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b564:	0800b579 	.word	0x0800b579
 800b568:	0800b5a1 	.word	0x0800b5a1
 800b56c:	0800b5c9 	.word	0x0800b5c9
 800b570:	0800b665 	.word	0x0800b665
 800b574:	0800b5f1 	.word	0x0800b5f1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b578:	4b90      	ldr	r3, [pc, #576]	@ (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b580:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b584:	d108      	bne.n	800b598 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b586:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b58a:	4618      	mov	r0, r3
 800b58c:	f000 ff62 	bl	800c454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b594:	f000 bc93 	b.w	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b598:	2300      	movs	r3, #0
 800b59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b59c:	f000 bc8f 	b.w	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5a0:	4b86      	ldr	r3, [pc, #536]	@ (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b5a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b5ac:	d108      	bne.n	800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5ae:	f107 0318 	add.w	r3, r7, #24
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f000 fca6 	bl	800bf04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5bc:	f000 bc7f 	b.w	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5c4:	f000 bc7b 	b.w	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5c8:	4b7c      	ldr	r3, [pc, #496]	@ (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b5d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5d4:	d108      	bne.n	800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5d6:	f107 030c 	add.w	r3, r7, #12
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f000 fde6 	bl	800c1ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5e4:	f000 bc6b 	b.w	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5ec:	f000 bc67 	b.w	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b5f0:	4b72      	ldr	r3, [pc, #456]	@ (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b5f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b5f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b5f8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5fa:	4b70      	ldr	r3, [pc, #448]	@ (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f003 0304 	and.w	r3, r3, #4
 800b602:	2b04      	cmp	r3, #4
 800b604:	d10c      	bne.n	800b620 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d109      	bne.n	800b620 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b60c:	4b6b      	ldr	r3, [pc, #428]	@ (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	08db      	lsrs	r3, r3, #3
 800b612:	f003 0303 	and.w	r3, r3, #3
 800b616:	4a6a      	ldr	r2, [pc, #424]	@ (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b618:	fa22 f303 	lsr.w	r3, r2, r3
 800b61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b61e:	e01f      	b.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b620:	4b66      	ldr	r3, [pc, #408]	@ (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b62c:	d106      	bne.n	800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b62e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b630:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b634:	d102      	bne.n	800b63c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b636:	4b63      	ldr	r3, [pc, #396]	@ (800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b638:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b63a:	e011      	b.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b63c:	4b5f      	ldr	r3, [pc, #380]	@ (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b644:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b648:	d106      	bne.n	800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b64a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b64c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b650:	d102      	bne.n	800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b652:	4b5d      	ldr	r3, [pc, #372]	@ (800b7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b654:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b656:	e003      	b.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b658:	2300      	movs	r3, #0
 800b65a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b65c:	f000 bc2f 	b.w	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b660:	f000 bc2d 	b.w	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b664:	4b59      	ldr	r3, [pc, #356]	@ (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b668:	f000 bc29 	b.w	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b66c:	2300      	movs	r3, #0
 800b66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b670:	f000 bc25 	b.w	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b674:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b678:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b67c:	430b      	orrs	r3, r1
 800b67e:	f040 80a7 	bne.w	800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b682:	4b4e      	ldr	r3, [pc, #312]	@ (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b686:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b68a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b68e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b692:	d054      	beq.n	800b73e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b696:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b69a:	f200 808b 	bhi.w	800b7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b6a4:	f000 8083 	beq.w	800b7ae <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6aa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b6ae:	f200 8081 	bhi.w	800b7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b6b8:	d02f      	beq.n	800b71a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b6c0:	d878      	bhi.n	800b7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d004      	beq.n	800b6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b6ce:	d012      	beq.n	800b6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b6d0:	e070      	b.n	800b7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b6d2:	4b3a      	ldr	r3, [pc, #232]	@ (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b6de:	d107      	bne.n	800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f000 feb5 	bl	800c454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6ee:	e3e6      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6f4:	e3e3      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6f6:	4b31      	ldr	r3, [pc, #196]	@ (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b6fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b702:	d107      	bne.n	800b714 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b704:	f107 0318 	add.w	r3, r7, #24
 800b708:	4618      	mov	r0, r3
 800b70a:	f000 fbfb 	bl	800bf04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b712:	e3d4      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b714:	2300      	movs	r3, #0
 800b716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b718:	e3d1      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b71a:	4b28      	ldr	r3, [pc, #160]	@ (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b722:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b726:	d107      	bne.n	800b738 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b728:	f107 030c 	add.w	r3, r7, #12
 800b72c:	4618      	mov	r0, r3
 800b72e:	f000 fd3d 	bl	800c1ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b736:	e3c2      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b738:	2300      	movs	r3, #0
 800b73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b73c:	e3bf      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b73e:	4b1f      	ldr	r3, [pc, #124]	@ (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b742:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b746:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b748:	4b1c      	ldr	r3, [pc, #112]	@ (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f003 0304 	and.w	r3, r3, #4
 800b750:	2b04      	cmp	r3, #4
 800b752:	d10c      	bne.n	800b76e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b756:	2b00      	cmp	r3, #0
 800b758:	d109      	bne.n	800b76e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b75a:	4b18      	ldr	r3, [pc, #96]	@ (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	08db      	lsrs	r3, r3, #3
 800b760:	f003 0303 	and.w	r3, r3, #3
 800b764:	4a16      	ldr	r2, [pc, #88]	@ (800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b766:	fa22 f303 	lsr.w	r3, r2, r3
 800b76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b76c:	e01e      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b76e:	4b13      	ldr	r3, [pc, #76]	@ (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b77a:	d106      	bne.n	800b78a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b77c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b77e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b782:	d102      	bne.n	800b78a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b784:	4b0f      	ldr	r3, [pc, #60]	@ (800b7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b786:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b788:	e010      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b78a:	4b0c      	ldr	r3, [pc, #48]	@ (800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b792:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b796:	d106      	bne.n	800b7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b79a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b79e:	d102      	bne.n	800b7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b7a0:	4b09      	ldr	r3, [pc, #36]	@ (800b7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b7a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7a4:	e002      	b.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b7aa:	e388      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b7ac:	e387      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b7ae:	4b07      	ldr	r3, [pc, #28]	@ (800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b7b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7b2:	e384      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7b8:	e381      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b7ba:	bf00      	nop
 800b7bc:	58024400 	.word	0x58024400
 800b7c0:	03d09000 	.word	0x03d09000
 800b7c4:	003d0900 	.word	0x003d0900
 800b7c8:	017d7840 	.word	0x017d7840
 800b7cc:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b7d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7d4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b7d8:	430b      	orrs	r3, r1
 800b7da:	f040 809c 	bne.w	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b7de:	4b9e      	ldr	r3, [pc, #632]	@ (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b7e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7e2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b7e6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b7ee:	d054      	beq.n	800b89a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b7f6:	f200 808b 	bhi.w	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b800:	f000 8083 	beq.w	800b90a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b806:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b80a:	f200 8081 	bhi.w	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b810:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b814:	d02f      	beq.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b818:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b81c:	d878      	bhi.n	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b820:	2b00      	cmp	r3, #0
 800b822:	d004      	beq.n	800b82e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b826:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b82a:	d012      	beq.n	800b852 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b82c:	e070      	b.n	800b910 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b82e:	4b8a      	ldr	r3, [pc, #552]	@ (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b836:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b83a:	d107      	bne.n	800b84c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b83c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b840:	4618      	mov	r0, r3
 800b842:	f000 fe07 	bl	800c454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b84a:	e338      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b84c:	2300      	movs	r3, #0
 800b84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b850:	e335      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b852:	4b81      	ldr	r3, [pc, #516]	@ (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b85a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b85e:	d107      	bne.n	800b870 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b860:	f107 0318 	add.w	r3, r7, #24
 800b864:	4618      	mov	r0, r3
 800b866:	f000 fb4d 	bl	800bf04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b86e:	e326      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b874:	e323      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b876:	4b78      	ldr	r3, [pc, #480]	@ (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b87e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b882:	d107      	bne.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b884:	f107 030c 	add.w	r3, r7, #12
 800b888:	4618      	mov	r0, r3
 800b88a:	f000 fc8f 	bl	800c1ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b892:	e314      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b894:	2300      	movs	r3, #0
 800b896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b898:	e311      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b89a:	4b6f      	ldr	r3, [pc, #444]	@ (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b89c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b89e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b8a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b8a4:	4b6c      	ldr	r3, [pc, #432]	@ (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f003 0304 	and.w	r3, r3, #4
 800b8ac:	2b04      	cmp	r3, #4
 800b8ae:	d10c      	bne.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b8b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d109      	bne.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8b6:	4b68      	ldr	r3, [pc, #416]	@ (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	08db      	lsrs	r3, r3, #3
 800b8bc:	f003 0303 	and.w	r3, r3, #3
 800b8c0:	4a66      	ldr	r2, [pc, #408]	@ (800ba5c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b8c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8c8:	e01e      	b.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b8ca:	4b63      	ldr	r3, [pc, #396]	@ (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8d6:	d106      	bne.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b8d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8de:	d102      	bne.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b8e0:	4b5f      	ldr	r3, [pc, #380]	@ (800ba60 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b8e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8e4:	e010      	b.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8e6:	4b5c      	ldr	r3, [pc, #368]	@ (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8f2:	d106      	bne.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b8f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8fa:	d102      	bne.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b8fc:	4b59      	ldr	r3, [pc, #356]	@ (800ba64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b900:	e002      	b.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b902:	2300      	movs	r3, #0
 800b904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b906:	e2da      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b908:	e2d9      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b90a:	4b57      	ldr	r3, [pc, #348]	@ (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b90c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b90e:	e2d6      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b910:	2300      	movs	r3, #0
 800b912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b914:	e2d3      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b91a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b91e:	430b      	orrs	r3, r1
 800b920:	f040 80a7 	bne.w	800ba72 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b924:	4b4c      	ldr	r3, [pc, #304]	@ (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b928:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b92c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b92e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b930:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b934:	d055      	beq.n	800b9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b938:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b93c:	f200 8096 	bhi.w	800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b942:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b946:	f000 8084 	beq.w	800ba52 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b94c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b950:	f200 808c 	bhi.w	800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b956:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b95a:	d030      	beq.n	800b9be <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b95e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b962:	f200 8083 	bhi.w	800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d004      	beq.n	800b976 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b972:	d012      	beq.n	800b99a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b974:	e07a      	b.n	800ba6c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b976:	4b38      	ldr	r3, [pc, #224]	@ (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b97e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b982:	d107      	bne.n	800b994 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b984:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b988:	4618      	mov	r0, r3
 800b98a:	f000 fd63 	bl	800c454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b98e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b992:	e294      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b994:	2300      	movs	r3, #0
 800b996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b998:	e291      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b99a:	4b2f      	ldr	r3, [pc, #188]	@ (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b9a6:	d107      	bne.n	800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9a8:	f107 0318 	add.w	r3, r7, #24
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f000 faa9 	bl	800bf04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9b6:	e282      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9bc:	e27f      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b9be:	4b26      	ldr	r3, [pc, #152]	@ (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b9c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9ca:	d107      	bne.n	800b9dc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9cc:	f107 030c 	add.w	r3, r7, #12
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f000 fbeb 	bl	800c1ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9da:	e270      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9e0:	e26d      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b9e2:	4b1d      	ldr	r3, [pc, #116]	@ (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b9e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b9ea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b9ec:	4b1a      	ldr	r3, [pc, #104]	@ (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f003 0304 	and.w	r3, r3, #4
 800b9f4:	2b04      	cmp	r3, #4
 800b9f6:	d10c      	bne.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b9f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d109      	bne.n	800ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9fe:	4b16      	ldr	r3, [pc, #88]	@ (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	08db      	lsrs	r3, r3, #3
 800ba04:	f003 0303 	and.w	r3, r3, #3
 800ba08:	4a14      	ldr	r2, [pc, #80]	@ (800ba5c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ba0a:	fa22 f303 	lsr.w	r3, r2, r3
 800ba0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba10:	e01e      	b.n	800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ba12:	4b11      	ldr	r3, [pc, #68]	@ (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba1e:	d106      	bne.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ba20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba26:	d102      	bne.n	800ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ba28:	4b0d      	ldr	r3, [pc, #52]	@ (800ba60 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ba2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba2c:	e010      	b.n	800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ba2e:	4b0a      	ldr	r3, [pc, #40]	@ (800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba3a:	d106      	bne.n	800ba4a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800ba3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba42:	d102      	bne.n	800ba4a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ba44:	4b07      	ldr	r3, [pc, #28]	@ (800ba64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ba46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba48:	e002      	b.n	800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ba4e:	e236      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ba50:	e235      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ba52:	4b05      	ldr	r3, [pc, #20]	@ (800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ba54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba56:	e232      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ba58:	58024400 	.word	0x58024400
 800ba5c:	03d09000 	.word	0x03d09000
 800ba60:	003d0900 	.word	0x003d0900
 800ba64:	017d7840 	.word	0x017d7840
 800ba68:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba70:	e225      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ba72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba76:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ba7a:	430b      	orrs	r3, r1
 800ba7c:	f040 8085 	bne.w	800bb8a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ba80:	4b9c      	ldr	r3, [pc, #624]	@ (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ba82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba84:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ba88:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ba8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ba90:	d06b      	beq.n	800bb6a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800ba92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ba98:	d874      	bhi.n	800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ba9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800baa0:	d056      	beq.n	800bb50 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800baa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800baa8:	d86c      	bhi.n	800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800baaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bab0:	d03b      	beq.n	800bb2a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800bab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bab4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bab8:	d864      	bhi.n	800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800baba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800babc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bac0:	d021      	beq.n	800bb06 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800bac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bac8:	d85c      	bhi.n	800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800baca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d004      	beq.n	800bada <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800bad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bad6:	d004      	beq.n	800bae2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800bad8:	e054      	b.n	800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800bada:	f7fe fb5f 	bl	800a19c <HAL_RCC_GetPCLK1Freq>
 800bade:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bae0:	e1ed      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bae2:	4b84      	ldr	r3, [pc, #528]	@ (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800baea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800baee:	d107      	bne.n	800bb00 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800baf0:	f107 0318 	add.w	r3, r7, #24
 800baf4:	4618      	mov	r0, r3
 800baf6:	f000 fa05 	bl	800bf04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bafa:	69fb      	ldr	r3, [r7, #28]
 800bafc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bafe:	e1de      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb00:	2300      	movs	r3, #0
 800bb02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb04:	e1db      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb06:	4b7b      	ldr	r3, [pc, #492]	@ (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bb0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb12:	d107      	bne.n	800bb24 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb14:	f107 030c 	add.w	r3, r7, #12
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f000 fb47 	bl	800c1ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb22:	e1cc      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb24:	2300      	movs	r3, #0
 800bb26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb28:	e1c9      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bb2a:	4b72      	ldr	r3, [pc, #456]	@ (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f003 0304 	and.w	r3, r3, #4
 800bb32:	2b04      	cmp	r3, #4
 800bb34:	d109      	bne.n	800bb4a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb36:	4b6f      	ldr	r3, [pc, #444]	@ (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	08db      	lsrs	r3, r3, #3
 800bb3c:	f003 0303 	and.w	r3, r3, #3
 800bb40:	4a6d      	ldr	r2, [pc, #436]	@ (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800bb42:	fa22 f303 	lsr.w	r3, r2, r3
 800bb46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb48:	e1b9      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb4e:	e1b6      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bb50:	4b68      	ldr	r3, [pc, #416]	@ (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb5c:	d102      	bne.n	800bb64 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800bb5e:	4b67      	ldr	r3, [pc, #412]	@ (800bcfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800bb60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb62:	e1ac      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb64:	2300      	movs	r3, #0
 800bb66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb68:	e1a9      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bb6a:	4b62      	ldr	r3, [pc, #392]	@ (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb76:	d102      	bne.n	800bb7e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800bb78:	4b61      	ldr	r3, [pc, #388]	@ (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800bb7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb7c:	e19f      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb82:	e19c      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bb84:	2300      	movs	r3, #0
 800bb86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb88:	e199      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800bb8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb8e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800bb92:	430b      	orrs	r3, r1
 800bb94:	d173      	bne.n	800bc7e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800bb96:	4b57      	ldr	r3, [pc, #348]	@ (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bb98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800bb9e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bba2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bba6:	d02f      	beq.n	800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800bba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbaa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bbae:	d863      	bhi.n	800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800bbb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d004      	beq.n	800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800bbb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbbc:	d012      	beq.n	800bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800bbbe:	e05b      	b.n	800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbc0:	4b4c      	ldr	r3, [pc, #304]	@ (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bbc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bbcc:	d107      	bne.n	800bbde <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbce:	f107 0318 	add.w	r3, r7, #24
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f000 f996 	bl	800bf04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbdc:	e16f      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bbe2:	e16c      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bbe4:	4b43      	ldr	r3, [pc, #268]	@ (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bbec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bbf0:	d107      	bne.n	800bc02 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbf2:	f107 030c 	add.w	r3, r7, #12
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f000 fad8 	bl	800c1ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc00:	e15d      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc02:	2300      	movs	r3, #0
 800bc04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc06:	e15a      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc08:	4b3a      	ldr	r3, [pc, #232]	@ (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bc0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc0c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bc10:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc12:	4b38      	ldr	r3, [pc, #224]	@ (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f003 0304 	and.w	r3, r3, #4
 800bc1a:	2b04      	cmp	r3, #4
 800bc1c:	d10c      	bne.n	800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800bc1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d109      	bne.n	800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc24:	4b33      	ldr	r3, [pc, #204]	@ (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	08db      	lsrs	r3, r3, #3
 800bc2a:	f003 0303 	and.w	r3, r3, #3
 800bc2e:	4a32      	ldr	r2, [pc, #200]	@ (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800bc30:	fa22 f303 	lsr.w	r3, r2, r3
 800bc34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc36:	e01e      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc38:	4b2e      	ldr	r3, [pc, #184]	@ (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc44:	d106      	bne.n	800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800bc46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc4c:	d102      	bne.n	800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc4e:	4b2b      	ldr	r3, [pc, #172]	@ (800bcfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800bc50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc52:	e010      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc54:	4b27      	ldr	r3, [pc, #156]	@ (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc60:	d106      	bne.n	800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800bc62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc68:	d102      	bne.n	800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bc6a:	4b25      	ldr	r3, [pc, #148]	@ (800bd00 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800bc6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc6e:	e002      	b.n	800bc76 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bc70:	2300      	movs	r3, #0
 800bc72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800bc74:	e123      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bc76:	e122      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc7c:	e11f      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800bc7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc82:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800bc86:	430b      	orrs	r3, r1
 800bc88:	d13c      	bne.n	800bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bc8a:	4b1a      	ldr	r3, [pc, #104]	@ (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bc8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bc92:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bc94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d004      	beq.n	800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800bc9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bca0:	d012      	beq.n	800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800bca2:	e023      	b.n	800bcec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bca4:	4b13      	ldr	r3, [pc, #76]	@ (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bcac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bcb0:	d107      	bne.n	800bcc2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bcb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f000 fbcc 	bl	800c454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bcbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcc0:	e0fd      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcc6:	e0fa      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bcc8:	4b0a      	ldr	r3, [pc, #40]	@ (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bcd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bcd4:	d107      	bne.n	800bce6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcd6:	f107 0318 	add.w	r3, r7, #24
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f000 f912 	bl	800bf04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bce0:	6a3b      	ldr	r3, [r7, #32]
 800bce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bce4:	e0eb      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bce6:	2300      	movs	r3, #0
 800bce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcea:	e0e8      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bcec:	2300      	movs	r3, #0
 800bcee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bcf0:	e0e5      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bcf2:	bf00      	nop
 800bcf4:	58024400 	.word	0x58024400
 800bcf8:	03d09000 	.word	0x03d09000
 800bcfc:	003d0900 	.word	0x003d0900
 800bd00:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bd04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd08:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800bd0c:	430b      	orrs	r3, r1
 800bd0e:	f040 8085 	bne.w	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bd12:	4b6d      	ldr	r3, [pc, #436]	@ (800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd16:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800bd1a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800bd1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bd22:	d06b      	beq.n	800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800bd24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bd2a:	d874      	bhi.n	800be16 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bd2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd32:	d056      	beq.n	800bde2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800bd34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd3a:	d86c      	bhi.n	800be16 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bd3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bd42:	d03b      	beq.n	800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800bd44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bd4a:	d864      	bhi.n	800be16 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bd4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd52:	d021      	beq.n	800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800bd54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd5a:	d85c      	bhi.n	800be16 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800bd5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d004      	beq.n	800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800bd62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd68:	d004      	beq.n	800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800bd6a:	e054      	b.n	800be16 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bd6c:	f000 f8b4 	bl	800bed8 <HAL_RCCEx_GetD3PCLK1Freq>
 800bd70:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bd72:	e0a4      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd74:	4b54      	ldr	r3, [pc, #336]	@ (800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd80:	d107      	bne.n	800bd92 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd82:	f107 0318 	add.w	r3, r7, #24
 800bd86:	4618      	mov	r0, r3
 800bd88:	f000 f8bc 	bl	800bf04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bd8c:	69fb      	ldr	r3, [r7, #28]
 800bd8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd90:	e095      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd92:	2300      	movs	r3, #0
 800bd94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd96:	e092      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd98:	4b4b      	ldr	r3, [pc, #300]	@ (800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bda0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bda4:	d107      	bne.n	800bdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bda6:	f107 030c 	add.w	r3, r7, #12
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f000 f9fe 	bl	800c1ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdb4:	e083      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdba:	e080      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bdbc:	4b42      	ldr	r3, [pc, #264]	@ (800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f003 0304 	and.w	r3, r3, #4
 800bdc4:	2b04      	cmp	r3, #4
 800bdc6:	d109      	bne.n	800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdc8:	4b3f      	ldr	r3, [pc, #252]	@ (800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	08db      	lsrs	r3, r3, #3
 800bdce:	f003 0303 	and.w	r3, r3, #3
 800bdd2:	4a3e      	ldr	r2, [pc, #248]	@ (800becc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800bdd4:	fa22 f303 	lsr.w	r3, r2, r3
 800bdd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdda:	e070      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bddc:	2300      	movs	r3, #0
 800bdde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bde0:	e06d      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bde2:	4b39      	ldr	r3, [pc, #228]	@ (800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bdee:	d102      	bne.n	800bdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800bdf0:	4b37      	ldr	r3, [pc, #220]	@ (800bed0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800bdf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdf4:	e063      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdfa:	e060      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bdfc:	4b32      	ldr	r3, [pc, #200]	@ (800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be08:	d102      	bne.n	800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800be0a:	4b32      	ldr	r3, [pc, #200]	@ (800bed4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800be0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be0e:	e056      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be10:	2300      	movs	r3, #0
 800be12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be14:	e053      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800be16:	2300      	movs	r3, #0
 800be18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be1a:	e050      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800be1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be20:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800be24:	430b      	orrs	r3, r1
 800be26:	d148      	bne.n	800beba <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800be28:	4b27      	ldr	r3, [pc, #156]	@ (800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800be2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be2c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800be30:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800be32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be38:	d02a      	beq.n	800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800be3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be40:	d838      	bhi.n	800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800be42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be44:	2b00      	cmp	r3, #0
 800be46:	d004      	beq.n	800be52 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800be48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be4e:	d00d      	beq.n	800be6c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800be50:	e030      	b.n	800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800be52:	4b1d      	ldr	r3, [pc, #116]	@ (800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be5e:	d102      	bne.n	800be66 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800be60:	4b1c      	ldr	r3, [pc, #112]	@ (800bed4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800be62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be64:	e02b      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be66:	2300      	movs	r3, #0
 800be68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be6a:	e028      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be6c:	4b16      	ldr	r3, [pc, #88]	@ (800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800be74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800be78:	d107      	bne.n	800be8a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be7e:	4618      	mov	r0, r3
 800be80:	f000 fae8 	bl	800c454 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be88:	e019      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be8a:	2300      	movs	r3, #0
 800be8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800be8e:	e016      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be90:	4b0d      	ldr	r3, [pc, #52]	@ (800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be9c:	d107      	bne.n	800beae <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be9e:	f107 0318 	add.w	r3, r7, #24
 800bea2:	4618      	mov	r0, r3
 800bea4:	f000 f82e 	bl	800bf04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beac:	e007      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800beae:	2300      	movs	r3, #0
 800beb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800beb2:	e004      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800beb4:	2300      	movs	r3, #0
 800beb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800beb8:	e001      	b.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800beba:	2300      	movs	r3, #0
 800bebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800bebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3740      	adds	r7, #64	@ 0x40
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	58024400 	.word	0x58024400
 800becc:	03d09000 	.word	0x03d09000
 800bed0:	003d0900 	.word	0x003d0900
 800bed4:	017d7840 	.word	0x017d7840

0800bed8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bedc:	f7fe f92e 	bl	800a13c <HAL_RCC_GetHCLKFreq>
 800bee0:	4602      	mov	r2, r0
 800bee2:	4b06      	ldr	r3, [pc, #24]	@ (800befc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bee4:	6a1b      	ldr	r3, [r3, #32]
 800bee6:	091b      	lsrs	r3, r3, #4
 800bee8:	f003 0307 	and.w	r3, r3, #7
 800beec:	4904      	ldr	r1, [pc, #16]	@ (800bf00 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800beee:	5ccb      	ldrb	r3, [r1, r3]
 800bef0:	f003 031f 	and.w	r3, r3, #31
 800bef4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bef8:	4618      	mov	r0, r3
 800befa:	bd80      	pop	{r7, pc}
 800befc:	58024400 	.word	0x58024400
 800bf00:	080163e0 	.word	0x080163e0

0800bf04 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b089      	sub	sp, #36	@ 0x24
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bf0c:	4ba1      	ldr	r3, [pc, #644]	@ (800c194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf10:	f003 0303 	and.w	r3, r3, #3
 800bf14:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bf16:	4b9f      	ldr	r3, [pc, #636]	@ (800c194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf1a:	0b1b      	lsrs	r3, r3, #12
 800bf1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf20:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bf22:	4b9c      	ldr	r3, [pc, #624]	@ (800c194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf26:	091b      	lsrs	r3, r3, #4
 800bf28:	f003 0301 	and.w	r3, r3, #1
 800bf2c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bf2e:	4b99      	ldr	r3, [pc, #612]	@ (800c194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf32:	08db      	lsrs	r3, r3, #3
 800bf34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf38:	693a      	ldr	r2, [r7, #16]
 800bf3a:	fb02 f303 	mul.w	r3, r2, r3
 800bf3e:	ee07 3a90 	vmov	s15, r3
 800bf42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	f000 8111 	beq.w	800c174 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bf52:	69bb      	ldr	r3, [r7, #24]
 800bf54:	2b02      	cmp	r3, #2
 800bf56:	f000 8083 	beq.w	800c060 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	2b02      	cmp	r3, #2
 800bf5e:	f200 80a1 	bhi.w	800c0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d003      	beq.n	800bf70 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	2b01      	cmp	r3, #1
 800bf6c:	d056      	beq.n	800c01c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bf6e:	e099      	b.n	800c0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf70:	4b88      	ldr	r3, [pc, #544]	@ (800c194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f003 0320 	and.w	r3, r3, #32
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d02d      	beq.n	800bfd8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf7c:	4b85      	ldr	r3, [pc, #532]	@ (800c194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	08db      	lsrs	r3, r3, #3
 800bf82:	f003 0303 	and.w	r3, r3, #3
 800bf86:	4a84      	ldr	r2, [pc, #528]	@ (800c198 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bf88:	fa22 f303 	lsr.w	r3, r2, r3
 800bf8c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	ee07 3a90 	vmov	s15, r3
 800bf94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	ee07 3a90 	vmov	s15, r3
 800bf9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfa6:	4b7b      	ldr	r3, [pc, #492]	@ (800c194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfae:	ee07 3a90 	vmov	s15, r3
 800bfb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c19c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bfbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bfd6:	e087      	b.n	800c0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	ee07 3a90 	vmov	s15, r3
 800bfde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfe2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bfe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfea:	4b6a      	ldr	r3, [pc, #424]	@ (800c194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bff2:	ee07 3a90 	vmov	s15, r3
 800bff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bffa:	ed97 6a03 	vldr	s12, [r7, #12]
 800bffe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c19c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c00a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c00e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c012:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c01a:	e065      	b.n	800c0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	ee07 3a90 	vmov	s15, r3
 800c022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c026:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c02a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c02e:	4b59      	ldr	r3, [pc, #356]	@ (800c194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c036:	ee07 3a90 	vmov	s15, r3
 800c03a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c03e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c042:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c19c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c04a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c04e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c05a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c05e:	e043      	b.n	800c0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	ee07 3a90 	vmov	s15, r3
 800c066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c06a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c06e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c072:	4b48      	ldr	r3, [pc, #288]	@ (800c194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c07a:	ee07 3a90 	vmov	s15, r3
 800c07e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c082:	ed97 6a03 	vldr	s12, [r7, #12]
 800c086:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c19c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c08a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c08e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c09a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c09e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0a2:	e021      	b.n	800c0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	ee07 3a90 	vmov	s15, r3
 800c0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c0b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0b6:	4b37      	ldr	r3, [pc, #220]	@ (800c194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0be:	ee07 3a90 	vmov	s15, r3
 800c0c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c19c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c0ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c0e8:	4b2a      	ldr	r3, [pc, #168]	@ (800c194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0ec:	0a5b      	lsrs	r3, r3, #9
 800c0ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0f2:	ee07 3a90 	vmov	s15, r3
 800c0f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c0fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c102:	edd7 6a07 	vldr	s13, [r7, #28]
 800c106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c10a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c10e:	ee17 2a90 	vmov	r2, s15
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c116:	4b1f      	ldr	r3, [pc, #124]	@ (800c194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c11a:	0c1b      	lsrs	r3, r3, #16
 800c11c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c120:	ee07 3a90 	vmov	s15, r3
 800c124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c128:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c12c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c130:	edd7 6a07 	vldr	s13, [r7, #28]
 800c134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c13c:	ee17 2a90 	vmov	r2, s15
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c144:	4b13      	ldr	r3, [pc, #76]	@ (800c194 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c148:	0e1b      	lsrs	r3, r3, #24
 800c14a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c14e:	ee07 3a90 	vmov	s15, r3
 800c152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c156:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c15a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c15e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c16a:	ee17 2a90 	vmov	r2, s15
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c172:	e008      	b.n	800c186 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	609a      	str	r2, [r3, #8]
}
 800c186:	bf00      	nop
 800c188:	3724      	adds	r7, #36	@ 0x24
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr
 800c192:	bf00      	nop
 800c194:	58024400 	.word	0x58024400
 800c198:	03d09000 	.word	0x03d09000
 800c19c:	46000000 	.word	0x46000000
 800c1a0:	4c742400 	.word	0x4c742400
 800c1a4:	4a742400 	.word	0x4a742400
 800c1a8:	4bbebc20 	.word	0x4bbebc20

0800c1ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b089      	sub	sp, #36	@ 0x24
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c1b4:	4ba1      	ldr	r3, [pc, #644]	@ (800c43c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1b8:	f003 0303 	and.w	r3, r3, #3
 800c1bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c1be:	4b9f      	ldr	r3, [pc, #636]	@ (800c43c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1c2:	0d1b      	lsrs	r3, r3, #20
 800c1c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c1c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c1ca:	4b9c      	ldr	r3, [pc, #624]	@ (800c43c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1ce:	0a1b      	lsrs	r3, r3, #8
 800c1d0:	f003 0301 	and.w	r3, r3, #1
 800c1d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c1d6:	4b99      	ldr	r3, [pc, #612]	@ (800c43c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1da:	08db      	lsrs	r3, r3, #3
 800c1dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c1e0:	693a      	ldr	r2, [r7, #16]
 800c1e2:	fb02 f303 	mul.w	r3, r2, r3
 800c1e6:	ee07 3a90 	vmov	s15, r3
 800c1ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f000 8111 	beq.w	800c41c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c1fa:	69bb      	ldr	r3, [r7, #24]
 800c1fc:	2b02      	cmp	r3, #2
 800c1fe:	f000 8083 	beq.w	800c308 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	2b02      	cmp	r3, #2
 800c206:	f200 80a1 	bhi.w	800c34c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c20a:	69bb      	ldr	r3, [r7, #24]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d003      	beq.n	800c218 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	2b01      	cmp	r3, #1
 800c214:	d056      	beq.n	800c2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c216:	e099      	b.n	800c34c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c218:	4b88      	ldr	r3, [pc, #544]	@ (800c43c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f003 0320 	and.w	r3, r3, #32
 800c220:	2b00      	cmp	r3, #0
 800c222:	d02d      	beq.n	800c280 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c224:	4b85      	ldr	r3, [pc, #532]	@ (800c43c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	08db      	lsrs	r3, r3, #3
 800c22a:	f003 0303 	and.w	r3, r3, #3
 800c22e:	4a84      	ldr	r2, [pc, #528]	@ (800c440 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c230:	fa22 f303 	lsr.w	r3, r2, r3
 800c234:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	ee07 3a90 	vmov	s15, r3
 800c23c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	ee07 3a90 	vmov	s15, r3
 800c246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c24a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c24e:	4b7b      	ldr	r3, [pc, #492]	@ (800c43c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c256:	ee07 3a90 	vmov	s15, r3
 800c25a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c25e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c262:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c444 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c26a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c26e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c27a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c27e:	e087      	b.n	800c390 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	ee07 3a90 	vmov	s15, r3
 800c286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c28a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c448 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c28e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c292:	4b6a      	ldr	r3, [pc, #424]	@ (800c43c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c29a:	ee07 3a90 	vmov	s15, r3
 800c29e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c444 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c2aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2c2:	e065      	b.n	800c390 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	ee07 3a90 	vmov	s15, r3
 800c2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c44c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c2d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2d6:	4b59      	ldr	r3, [pc, #356]	@ (800c43c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2de:	ee07 3a90 	vmov	s15, r3
 800c2e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c444 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c2ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c306:	e043      	b.n	800c390 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	ee07 3a90 	vmov	s15, r3
 800c30e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c312:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c31a:	4b48      	ldr	r3, [pc, #288]	@ (800c43c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c31c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c31e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c322:	ee07 3a90 	vmov	s15, r3
 800c326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c32a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c32e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c444 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c33a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c33e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c342:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c34a:	e021      	b.n	800c390 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	ee07 3a90 	vmov	s15, r3
 800c352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c356:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c44c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c35a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c35e:	4b37      	ldr	r3, [pc, #220]	@ (800c43c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c366:	ee07 3a90 	vmov	s15, r3
 800c36a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c36e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c372:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c444 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c37a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c37e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c38a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c38e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c390:	4b2a      	ldr	r3, [pc, #168]	@ (800c43c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c394:	0a5b      	lsrs	r3, r3, #9
 800c396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c39a:	ee07 3a90 	vmov	s15, r3
 800c39e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c3a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3b6:	ee17 2a90 	vmov	r2, s15
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c3be:	4b1f      	ldr	r3, [pc, #124]	@ (800c43c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3c2:	0c1b      	lsrs	r3, r3, #16
 800c3c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3c8:	ee07 3a90 	vmov	s15, r3
 800c3cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c3d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3e4:	ee17 2a90 	vmov	r2, s15
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c3ec:	4b13      	ldr	r3, [pc, #76]	@ (800c43c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3f0:	0e1b      	lsrs	r3, r3, #24
 800c3f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3f6:	ee07 3a90 	vmov	s15, r3
 800c3fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c402:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c406:	edd7 6a07 	vldr	s13, [r7, #28]
 800c40a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c40e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c412:	ee17 2a90 	vmov	r2, s15
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c41a:	e008      	b.n	800c42e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2200      	movs	r2, #0
 800c420:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2200      	movs	r2, #0
 800c426:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2200      	movs	r2, #0
 800c42c:	609a      	str	r2, [r3, #8]
}
 800c42e:	bf00      	nop
 800c430:	3724      	adds	r7, #36	@ 0x24
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	58024400 	.word	0x58024400
 800c440:	03d09000 	.word	0x03d09000
 800c444:	46000000 	.word	0x46000000
 800c448:	4c742400 	.word	0x4c742400
 800c44c:	4a742400 	.word	0x4a742400
 800c450:	4bbebc20 	.word	0x4bbebc20

0800c454 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c454:	b480      	push	{r7}
 800c456:	b089      	sub	sp, #36	@ 0x24
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c45c:	4ba0      	ldr	r3, [pc, #640]	@ (800c6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c45e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c460:	f003 0303 	and.w	r3, r3, #3
 800c464:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c466:	4b9e      	ldr	r3, [pc, #632]	@ (800c6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c46a:	091b      	lsrs	r3, r3, #4
 800c46c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c470:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c472:	4b9b      	ldr	r3, [pc, #620]	@ (800c6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c476:	f003 0301 	and.w	r3, r3, #1
 800c47a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c47c:	4b98      	ldr	r3, [pc, #608]	@ (800c6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c47e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c480:	08db      	lsrs	r3, r3, #3
 800c482:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c486:	693a      	ldr	r2, [r7, #16]
 800c488:	fb02 f303 	mul.w	r3, r2, r3
 800c48c:	ee07 3a90 	vmov	s15, r3
 800c490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c494:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	f000 8111 	beq.w	800c6c2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c4a0:	69bb      	ldr	r3, [r7, #24]
 800c4a2:	2b02      	cmp	r3, #2
 800c4a4:	f000 8083 	beq.w	800c5ae <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	2b02      	cmp	r3, #2
 800c4ac:	f200 80a1 	bhi.w	800c5f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d003      	beq.n	800c4be <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c4b6:	69bb      	ldr	r3, [r7, #24]
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d056      	beq.n	800c56a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c4bc:	e099      	b.n	800c5f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4be:	4b88      	ldr	r3, [pc, #544]	@ (800c6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f003 0320 	and.w	r3, r3, #32
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d02d      	beq.n	800c526 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4ca:	4b85      	ldr	r3, [pc, #532]	@ (800c6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	08db      	lsrs	r3, r3, #3
 800c4d0:	f003 0303 	and.w	r3, r3, #3
 800c4d4:	4a83      	ldr	r2, [pc, #524]	@ (800c6e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c4d6:	fa22 f303 	lsr.w	r3, r2, r3
 800c4da:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	ee07 3a90 	vmov	s15, r3
 800c4e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	ee07 3a90 	vmov	s15, r3
 800c4ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4f4:	4b7a      	ldr	r3, [pc, #488]	@ (800c6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4fc:	ee07 3a90 	vmov	s15, r3
 800c500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c504:	ed97 6a03 	vldr	s12, [r7, #12]
 800c508:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c50c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c510:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c514:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c518:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c51c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c520:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c524:	e087      	b.n	800c636 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	ee07 3a90 	vmov	s15, r3
 800c52c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c530:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c6ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c534:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c538:	4b69      	ldr	r3, [pc, #420]	@ (800c6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c53a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c53c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c540:	ee07 3a90 	vmov	s15, r3
 800c544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c548:	ed97 6a03 	vldr	s12, [r7, #12]
 800c54c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c550:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c554:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c558:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c55c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c560:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c564:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c568:	e065      	b.n	800c636 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	ee07 3a90 	vmov	s15, r3
 800c570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c574:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c6f0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c578:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c57c:	4b58      	ldr	r3, [pc, #352]	@ (800c6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c57e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c584:	ee07 3a90 	vmov	s15, r3
 800c588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c58c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c590:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c594:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c598:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c59c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c5a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5ac:	e043      	b.n	800c636 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	ee07 3a90 	vmov	s15, r3
 800c5b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5b8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c5bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5c0:	4b47      	ldr	r3, [pc, #284]	@ (800c6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c5c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5c8:	ee07 3a90 	vmov	s15, r3
 800c5cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5d4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c5d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c5e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5f0:	e021      	b.n	800c636 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	ee07 3a90 	vmov	s15, r3
 800c5f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5fc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c6ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c604:	4b36      	ldr	r3, [pc, #216]	@ (800c6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c60c:	ee07 3a90 	vmov	s15, r3
 800c610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c614:	ed97 6a03 	vldr	s12, [r7, #12]
 800c618:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c61c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c624:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c628:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c62c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c630:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c634:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c636:	4b2a      	ldr	r3, [pc, #168]	@ (800c6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c63a:	0a5b      	lsrs	r3, r3, #9
 800c63c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c640:	ee07 3a90 	vmov	s15, r3
 800c644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c648:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c64c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c650:	edd7 6a07 	vldr	s13, [r7, #28]
 800c654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c65c:	ee17 2a90 	vmov	r2, s15
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c664:	4b1e      	ldr	r3, [pc, #120]	@ (800c6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c668:	0c1b      	lsrs	r3, r3, #16
 800c66a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c66e:	ee07 3a90 	vmov	s15, r3
 800c672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c676:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c67a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c67e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c68a:	ee17 2a90 	vmov	r2, s15
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c692:	4b13      	ldr	r3, [pc, #76]	@ (800c6e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c696:	0e1b      	lsrs	r3, r3, #24
 800c698:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c69c:	ee07 3a90 	vmov	s15, r3
 800c6a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c6a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6b8:	ee17 2a90 	vmov	r2, s15
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c6c0:	e008      	b.n	800c6d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	609a      	str	r2, [r3, #8]
}
 800c6d4:	bf00      	nop
 800c6d6:	3724      	adds	r7, #36	@ 0x24
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr
 800c6e0:	58024400 	.word	0x58024400
 800c6e4:	03d09000 	.word	0x03d09000
 800c6e8:	46000000 	.word	0x46000000
 800c6ec:	4c742400 	.word	0x4c742400
 800c6f0:	4a742400 	.word	0x4a742400
 800c6f4:	4bbebc20 	.word	0x4bbebc20

0800c6f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b084      	sub	sp, #16
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c702:	2300      	movs	r3, #0
 800c704:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c706:	4b53      	ldr	r3, [pc, #332]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c70a:	f003 0303 	and.w	r3, r3, #3
 800c70e:	2b03      	cmp	r3, #3
 800c710:	d101      	bne.n	800c716 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c712:	2301      	movs	r3, #1
 800c714:	e099      	b.n	800c84a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c716:	4b4f      	ldr	r3, [pc, #316]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a4e      	ldr	r2, [pc, #312]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c71c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c720:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c722:	f7f6 fbb5 	bl	8002e90 <HAL_GetTick>
 800c726:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c728:	e008      	b.n	800c73c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c72a:	f7f6 fbb1 	bl	8002e90 <HAL_GetTick>
 800c72e:	4602      	mov	r2, r0
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	1ad3      	subs	r3, r2, r3
 800c734:	2b02      	cmp	r3, #2
 800c736:	d901      	bls.n	800c73c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c738:	2303      	movs	r3, #3
 800c73a:	e086      	b.n	800c84a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c73c:	4b45      	ldr	r3, [pc, #276]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c744:	2b00      	cmp	r3, #0
 800c746:	d1f0      	bne.n	800c72a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c748:	4b42      	ldr	r3, [pc, #264]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c74a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c74c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	031b      	lsls	r3, r3, #12
 800c756:	493f      	ldr	r1, [pc, #252]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c758:	4313      	orrs	r3, r2
 800c75a:	628b      	str	r3, [r1, #40]	@ 0x28
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	3b01      	subs	r3, #1
 800c762:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	689b      	ldr	r3, [r3, #8]
 800c76a:	3b01      	subs	r3, #1
 800c76c:	025b      	lsls	r3, r3, #9
 800c76e:	b29b      	uxth	r3, r3
 800c770:	431a      	orrs	r2, r3
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	3b01      	subs	r3, #1
 800c778:	041b      	lsls	r3, r3, #16
 800c77a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c77e:	431a      	orrs	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	691b      	ldr	r3, [r3, #16]
 800c784:	3b01      	subs	r3, #1
 800c786:	061b      	lsls	r3, r3, #24
 800c788:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c78c:	4931      	ldr	r1, [pc, #196]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c78e:	4313      	orrs	r3, r2
 800c790:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c792:	4b30      	ldr	r3, [pc, #192]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c796:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	695b      	ldr	r3, [r3, #20]
 800c79e:	492d      	ldr	r1, [pc, #180]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c7a4:	4b2b      	ldr	r3, [pc, #172]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c7a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7a8:	f023 0220 	bic.w	r2, r3, #32
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	699b      	ldr	r3, [r3, #24]
 800c7b0:	4928      	ldr	r1, [pc, #160]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c7b6:	4b27      	ldr	r3, [pc, #156]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c7b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7ba:	4a26      	ldr	r2, [pc, #152]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c7bc:	f023 0310 	bic.w	r3, r3, #16
 800c7c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c7c2:	4b24      	ldr	r3, [pc, #144]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c7c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c7c6:	4b24      	ldr	r3, [pc, #144]	@ (800c858 <RCCEx_PLL2_Config+0x160>)
 800c7c8:	4013      	ands	r3, r2
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	69d2      	ldr	r2, [r2, #28]
 800c7ce:	00d2      	lsls	r2, r2, #3
 800c7d0:	4920      	ldr	r1, [pc, #128]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c7d6:	4b1f      	ldr	r3, [pc, #124]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c7d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7da:	4a1e      	ldr	r2, [pc, #120]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c7dc:	f043 0310 	orr.w	r3, r3, #16
 800c7e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d106      	bne.n	800c7f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c7e8:	4b1a      	ldr	r3, [pc, #104]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c7ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7ec:	4a19      	ldr	r2, [pc, #100]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c7ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c7f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c7f4:	e00f      	b.n	800c816 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d106      	bne.n	800c80a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c7fc:	4b15      	ldr	r3, [pc, #84]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c7fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c800:	4a14      	ldr	r2, [pc, #80]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c806:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c808:	e005      	b.n	800c816 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c80a:	4b12      	ldr	r3, [pc, #72]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c80c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c80e:	4a11      	ldr	r2, [pc, #68]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c810:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c814:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c816:	4b0f      	ldr	r3, [pc, #60]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4a0e      	ldr	r2, [pc, #56]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c81c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c820:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c822:	f7f6 fb35 	bl	8002e90 <HAL_GetTick>
 800c826:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c828:	e008      	b.n	800c83c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c82a:	f7f6 fb31 	bl	8002e90 <HAL_GetTick>
 800c82e:	4602      	mov	r2, r0
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	1ad3      	subs	r3, r2, r3
 800c834:	2b02      	cmp	r3, #2
 800c836:	d901      	bls.n	800c83c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c838:	2303      	movs	r3, #3
 800c83a:	e006      	b.n	800c84a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c83c:	4b05      	ldr	r3, [pc, #20]	@ (800c854 <RCCEx_PLL2_Config+0x15c>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c844:	2b00      	cmp	r3, #0
 800c846:	d0f0      	beq.n	800c82a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c848:	7bfb      	ldrb	r3, [r7, #15]
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3710      	adds	r7, #16
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	58024400 	.word	0x58024400
 800c858:	ffff0007 	.word	0xffff0007

0800c85c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c866:	2300      	movs	r3, #0
 800c868:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c86a:	4b53      	ldr	r3, [pc, #332]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c86c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c86e:	f003 0303 	and.w	r3, r3, #3
 800c872:	2b03      	cmp	r3, #3
 800c874:	d101      	bne.n	800c87a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c876:	2301      	movs	r3, #1
 800c878:	e099      	b.n	800c9ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c87a:	4b4f      	ldr	r3, [pc, #316]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	4a4e      	ldr	r2, [pc, #312]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c880:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c884:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c886:	f7f6 fb03 	bl	8002e90 <HAL_GetTick>
 800c88a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c88c:	e008      	b.n	800c8a0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c88e:	f7f6 faff 	bl	8002e90 <HAL_GetTick>
 800c892:	4602      	mov	r2, r0
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	1ad3      	subs	r3, r2, r3
 800c898:	2b02      	cmp	r3, #2
 800c89a:	d901      	bls.n	800c8a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c89c:	2303      	movs	r3, #3
 800c89e:	e086      	b.n	800c9ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c8a0:	4b45      	ldr	r3, [pc, #276]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d1f0      	bne.n	800c88e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c8ac:	4b42      	ldr	r3, [pc, #264]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c8ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8b0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	051b      	lsls	r3, r3, #20
 800c8ba:	493f      	ldr	r1, [pc, #252]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	628b      	str	r3, [r1, #40]	@ 0x28
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	3b01      	subs	r3, #1
 800c8c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	689b      	ldr	r3, [r3, #8]
 800c8ce:	3b01      	subs	r3, #1
 800c8d0:	025b      	lsls	r3, r3, #9
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	431a      	orrs	r2, r3
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	68db      	ldr	r3, [r3, #12]
 800c8da:	3b01      	subs	r3, #1
 800c8dc:	041b      	lsls	r3, r3, #16
 800c8de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c8e2:	431a      	orrs	r2, r3
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	691b      	ldr	r3, [r3, #16]
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	061b      	lsls	r3, r3, #24
 800c8ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c8f0:	4931      	ldr	r1, [pc, #196]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c8f6:	4b30      	ldr	r3, [pc, #192]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c8f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	695b      	ldr	r3, [r3, #20]
 800c902:	492d      	ldr	r1, [pc, #180]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c904:	4313      	orrs	r3, r2
 800c906:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c908:	4b2b      	ldr	r3, [pc, #172]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c90a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c90c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	699b      	ldr	r3, [r3, #24]
 800c914:	4928      	ldr	r1, [pc, #160]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c916:	4313      	orrs	r3, r2
 800c918:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c91a:	4b27      	ldr	r3, [pc, #156]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c91c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c91e:	4a26      	ldr	r2, [pc, #152]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c920:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c924:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c926:	4b24      	ldr	r3, [pc, #144]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c928:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c92a:	4b24      	ldr	r3, [pc, #144]	@ (800c9bc <RCCEx_PLL3_Config+0x160>)
 800c92c:	4013      	ands	r3, r2
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	69d2      	ldr	r2, [r2, #28]
 800c932:	00d2      	lsls	r2, r2, #3
 800c934:	4920      	ldr	r1, [pc, #128]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c936:	4313      	orrs	r3, r2
 800c938:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c93a:	4b1f      	ldr	r3, [pc, #124]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c93c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c93e:	4a1e      	ldr	r2, [pc, #120]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c944:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d106      	bne.n	800c95a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c94c:	4b1a      	ldr	r3, [pc, #104]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c94e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c950:	4a19      	ldr	r2, [pc, #100]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c952:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c956:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c958:	e00f      	b.n	800c97a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	2b01      	cmp	r3, #1
 800c95e:	d106      	bne.n	800c96e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c960:	4b15      	ldr	r3, [pc, #84]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c964:	4a14      	ldr	r2, [pc, #80]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c966:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c96a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c96c:	e005      	b.n	800c97a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c96e:	4b12      	ldr	r3, [pc, #72]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c972:	4a11      	ldr	r2, [pc, #68]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c974:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c978:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c97a:	4b0f      	ldr	r3, [pc, #60]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	4a0e      	ldr	r2, [pc, #56]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c984:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c986:	f7f6 fa83 	bl	8002e90 <HAL_GetTick>
 800c98a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c98c:	e008      	b.n	800c9a0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c98e:	f7f6 fa7f 	bl	8002e90 <HAL_GetTick>
 800c992:	4602      	mov	r2, r0
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	1ad3      	subs	r3, r2, r3
 800c998:	2b02      	cmp	r3, #2
 800c99a:	d901      	bls.n	800c9a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c99c:	2303      	movs	r3, #3
 800c99e:	e006      	b.n	800c9ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c9a0:	4b05      	ldr	r3, [pc, #20]	@ (800c9b8 <RCCEx_PLL3_Config+0x15c>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d0f0      	beq.n	800c98e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3710      	adds	r7, #16
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	bf00      	nop
 800c9b8:	58024400 	.word	0x58024400
 800c9bc:	ffff0007 	.word	0xffff0007

0800c9c0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d101      	bne.n	800c9d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e10f      	b.n	800cbf2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a87      	ldr	r2, [pc, #540]	@ (800cbfc <HAL_SPI_Init+0x23c>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d00f      	beq.n	800ca02 <HAL_SPI_Init+0x42>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4a86      	ldr	r2, [pc, #536]	@ (800cc00 <HAL_SPI_Init+0x240>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d00a      	beq.n	800ca02 <HAL_SPI_Init+0x42>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a84      	ldr	r2, [pc, #528]	@ (800cc04 <HAL_SPI_Init+0x244>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d005      	beq.n	800ca02 <HAL_SPI_Init+0x42>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	2b0f      	cmp	r3, #15
 800c9fc:	d901      	bls.n	800ca02 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e0f7      	b.n	800cbf2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f000 fbba 	bl	800d17c <SPI_GetPacketSize>
 800ca08:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	4a7b      	ldr	r2, [pc, #492]	@ (800cbfc <HAL_SPI_Init+0x23c>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d00c      	beq.n	800ca2e <HAL_SPI_Init+0x6e>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a79      	ldr	r2, [pc, #484]	@ (800cc00 <HAL_SPI_Init+0x240>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d007      	beq.n	800ca2e <HAL_SPI_Init+0x6e>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a78      	ldr	r2, [pc, #480]	@ (800cc04 <HAL_SPI_Init+0x244>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d002      	beq.n	800ca2e <HAL_SPI_Init+0x6e>
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2b08      	cmp	r3, #8
 800ca2c:	d811      	bhi.n	800ca52 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ca32:	4a72      	ldr	r2, [pc, #456]	@ (800cbfc <HAL_SPI_Init+0x23c>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d009      	beq.n	800ca4c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a70      	ldr	r2, [pc, #448]	@ (800cc00 <HAL_SPI_Init+0x240>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d004      	beq.n	800ca4c <HAL_SPI_Init+0x8c>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a6f      	ldr	r2, [pc, #444]	@ (800cc04 <HAL_SPI_Init+0x244>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d104      	bne.n	800ca56 <HAL_SPI_Init+0x96>
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2b10      	cmp	r3, #16
 800ca50:	d901      	bls.n	800ca56 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ca52:	2301      	movs	r3, #1
 800ca54:	e0cd      	b.n	800cbf2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ca5c:	b2db      	uxtb	r3, r3
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d106      	bne.n	800ca70 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2200      	movs	r2, #0
 800ca66:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f7f4 fc6c 	bl	8001348 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2202      	movs	r2, #2
 800ca74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	681a      	ldr	r2, [r3, #0]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f022 0201 	bic.w	r2, r2, #1
 800ca86:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ca92:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	699b      	ldr	r3, [r3, #24]
 800ca98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ca9c:	d119      	bne.n	800cad2 <HAL_SPI_Init+0x112>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800caa6:	d103      	bne.n	800cab0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800caac:	2b00      	cmp	r3, #0
 800caae:	d008      	beq.n	800cac2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d10c      	bne.n	800cad2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cabc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cac0:	d107      	bne.n	800cad2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cad0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d00f      	beq.n	800cafe <HAL_SPI_Init+0x13e>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	68db      	ldr	r3, [r3, #12]
 800cae2:	2b06      	cmp	r3, #6
 800cae4:	d90b      	bls.n	800cafe <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	430a      	orrs	r2, r1
 800cafa:	601a      	str	r2, [r3, #0]
 800cafc:	e007      	b.n	800cb0e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	681a      	ldr	r2, [r3, #0]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cb0c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	69da      	ldr	r2, [r3, #28]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb16:	431a      	orrs	r2, r3
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	431a      	orrs	r2, r3
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb20:	ea42 0103 	orr.w	r1, r2, r3
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	68da      	ldr	r2, [r3, #12]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	430a      	orrs	r2, r1
 800cb2e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb38:	431a      	orrs	r2, r3
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb3e:	431a      	orrs	r2, r3
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	699b      	ldr	r3, [r3, #24]
 800cb44:	431a      	orrs	r2, r3
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	691b      	ldr	r3, [r3, #16]
 800cb4a:	431a      	orrs	r2, r3
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	695b      	ldr	r3, [r3, #20]
 800cb50:	431a      	orrs	r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6a1b      	ldr	r3, [r3, #32]
 800cb56:	431a      	orrs	r2, r3
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	431a      	orrs	r2, r3
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb62:	431a      	orrs	r2, r3
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	689b      	ldr	r3, [r3, #8]
 800cb68:	431a      	orrs	r2, r3
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb6e:	ea42 0103 	orr.w	r1, r2, r3
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	430a      	orrs	r2, r1
 800cb7c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d113      	bne.n	800cbae <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cb98:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	689b      	ldr	r3, [r3, #8]
 800cba0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cbac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f022 0201 	bic.w	r2, r2, #1
 800cbbc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d00a      	beq.n	800cbe0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	430a      	orrs	r2, r1
 800cbde:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2201      	movs	r2, #1
 800cbec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800cbf0:	2300      	movs	r3, #0
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3710      	adds	r7, #16
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	40013000 	.word	0x40013000
 800cc00:	40003800 	.word	0x40003800
 800cc04:	40003c00 	.word	0x40003c00

0800cc08 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b08a      	sub	sp, #40	@ 0x28
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	691b      	ldr	r3, [r3, #16]
 800cc16:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	695b      	ldr	r3, [r3, #20]
 800cc1e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800cc20:	6a3a      	ldr	r2, [r7, #32]
 800cc22:	69fb      	ldr	r3, [r7, #28]
 800cc24:	4013      	ands	r3, r2
 800cc26:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	689b      	ldr	r3, [r3, #8]
 800cc2e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800cc30:	2300      	movs	r3, #0
 800cc32:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cc3a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	3330      	adds	r3, #48	@ 0x30
 800cc42:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d010      	beq.n	800cc70 <HAL_SPI_IRQHandler+0x68>
 800cc4e:	6a3b      	ldr	r3, [r7, #32]
 800cc50:	f003 0308 	and.w	r3, r3, #8
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d00b      	beq.n	800cc70 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	699a      	ldr	r2, [r3, #24]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cc66:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f000 f9c3 	bl	800cff4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800cc6e:	e192      	b.n	800cf96 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800cc70:	69bb      	ldr	r3, [r7, #24]
 800cc72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d113      	bne.n	800cca2 <HAL_SPI_IRQHandler+0x9a>
 800cc7a:	69bb      	ldr	r3, [r7, #24]
 800cc7c:	f003 0320 	and.w	r3, r3, #32
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d10e      	bne.n	800cca2 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800cc84:	69bb      	ldr	r3, [r7, #24]
 800cc86:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d009      	beq.n	800cca2 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	4798      	blx	r3
    hspi->RxISR(hspi);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	4798      	blx	r3
    handled = 1UL;
 800cc9e:	2301      	movs	r3, #1
 800cca0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d10f      	bne.n	800cccc <HAL_SPI_IRQHandler+0xc4>
 800ccac:	69bb      	ldr	r3, [r7, #24]
 800ccae:	f003 0301 	and.w	r3, r3, #1
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d00a      	beq.n	800cccc <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d105      	bne.n	800cccc <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	4798      	blx	r3
    handled = 1UL;
 800ccc8:	2301      	movs	r3, #1
 800ccca:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800cccc:	69bb      	ldr	r3, [r7, #24]
 800ccce:	f003 0320 	and.w	r3, r3, #32
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d10f      	bne.n	800ccf6 <HAL_SPI_IRQHandler+0xee>
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	f003 0302 	and.w	r3, r3, #2
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d00a      	beq.n	800ccf6 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800cce0:	69bb      	ldr	r3, [r7, #24]
 800cce2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d105      	bne.n	800ccf6 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	4798      	blx	r3
    handled = 1UL;
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800ccf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	f040 8147 	bne.w	800cf8c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800ccfe:	69bb      	ldr	r3, [r7, #24]
 800cd00:	f003 0308 	and.w	r3, r3, #8
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	f000 808b 	beq.w	800ce20 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	699a      	ldr	r2, [r3, #24]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f042 0208 	orr.w	r2, r2, #8
 800cd18:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	699a      	ldr	r2, [r3, #24]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f042 0210 	orr.w	r2, r2, #16
 800cd28:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	699a      	ldr	r2, [r3, #24]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cd38:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	691a      	ldr	r2, [r3, #16]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f022 0208 	bic.w	r2, r2, #8
 800cd48:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	689b      	ldr	r3, [r3, #8]
 800cd50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d13d      	bne.n	800cdd4 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800cd58:	e036      	b.n	800cdc8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	68db      	ldr	r3, [r3, #12]
 800cd5e:	2b0f      	cmp	r3, #15
 800cd60:	d90b      	bls.n	800cd7a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681a      	ldr	r2, [r3, #0]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd6a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cd6c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd72:	1d1a      	adds	r2, r3, #4
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	665a      	str	r2, [r3, #100]	@ 0x64
 800cd78:	e01d      	b.n	800cdb6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	68db      	ldr	r3, [r3, #12]
 800cd7e:	2b07      	cmp	r3, #7
 800cd80:	d90b      	bls.n	800cd9a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd86:	68fa      	ldr	r2, [r7, #12]
 800cd88:	8812      	ldrh	r2, [r2, #0]
 800cd8a:	b292      	uxth	r2, r2
 800cd8c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd92:	1c9a      	adds	r2, r3, #2
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	665a      	str	r2, [r3, #100]	@ 0x64
 800cd98:	e00d      	b.n	800cdb6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cda6:	7812      	ldrb	r2, [r2, #0]
 800cda8:	b2d2      	uxtb	r2, r2
 800cdaa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdb0:	1c5a      	adds	r2, r3, #1
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	b29a      	uxth	r2, r3
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d1c2      	bne.n	800cd5a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f000 f931 	bl	800d03c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2201      	movs	r2, #1
 800cdde:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d003      	beq.n	800cdf4 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f000 f8f7 	bl	800cfe0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cdf2:	e0d0      	b.n	800cf96 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800cdf4:	7cfb      	ldrb	r3, [r7, #19]
 800cdf6:	2b05      	cmp	r3, #5
 800cdf8:	d103      	bne.n	800ce02 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 f8e6 	bl	800cfcc <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800ce00:	e0c6      	b.n	800cf90 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800ce02:	7cfb      	ldrb	r3, [r7, #19]
 800ce04:	2b04      	cmp	r3, #4
 800ce06:	d103      	bne.n	800ce10 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f000 f8d5 	bl	800cfb8 <HAL_SPI_RxCpltCallback>
    return;
 800ce0e:	e0bf      	b.n	800cf90 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800ce10:	7cfb      	ldrb	r3, [r7, #19]
 800ce12:	2b03      	cmp	r3, #3
 800ce14:	f040 80bc 	bne.w	800cf90 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 f8c3 	bl	800cfa4 <HAL_SPI_TxCpltCallback>
    return;
 800ce1e:	e0b7      	b.n	800cf90 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800ce20:	69bb      	ldr	r3, [r7, #24]
 800ce22:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	f000 80b5 	beq.w	800cf96 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d00f      	beq.n	800ce56 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ce3c:	f043 0204 	orr.w	r2, r3, #4
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	699a      	ldr	r2, [r3, #24]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ce54:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800ce56:	69bb      	ldr	r3, [r7, #24]
 800ce58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d00f      	beq.n	800ce80 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ce66:	f043 0201 	orr.w	r2, r3, #1
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	699a      	ldr	r2, [r3, #24]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ce7e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800ce80:	69bb      	ldr	r3, [r7, #24]
 800ce82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d00f      	beq.n	800ceaa <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ce90:	f043 0208 	orr.w	r2, r3, #8
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	699a      	ldr	r2, [r3, #24]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cea8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	f003 0320 	and.w	r3, r3, #32
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d00f      	beq.n	800ced4 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ceba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	699a      	ldr	r2, [r3, #24]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f042 0220 	orr.w	r2, r2, #32
 800ced2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d05a      	beq.n	800cf94 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f022 0201 	bic.w	r2, r2, #1
 800ceec:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	6919      	ldr	r1, [r3, #16]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	4b28      	ldr	r3, [pc, #160]	@ (800cf9c <HAL_SPI_IRQHandler+0x394>)
 800cefa:	400b      	ands	r3, r1
 800cefc:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800cf04:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800cf08:	d138      	bne.n	800cf7c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	689a      	ldr	r2, [r3, #8]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800cf18:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d013      	beq.n	800cf4a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cf26:	4a1e      	ldr	r2, [pc, #120]	@ (800cfa0 <HAL_SPI_IRQHandler+0x398>)
 800cf28:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7f9 f838 	bl	8005fa4 <HAL_DMA_Abort_IT>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d007      	beq.n	800cf4a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf40:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d020      	beq.n	800cf94 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf56:	4a12      	ldr	r2, [pc, #72]	@ (800cfa0 <HAL_SPI_IRQHandler+0x398>)
 800cf58:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7f9 f820 	bl	8005fa4 <HAL_DMA_Abort_IT>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d014      	beq.n	800cf94 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf70:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800cf7a:	e00b      	b.n	800cf94 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2201      	movs	r2, #1
 800cf80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 f82b 	bl	800cfe0 <HAL_SPI_ErrorCallback>
    return;
 800cf8a:	e003      	b.n	800cf94 <HAL_SPI_IRQHandler+0x38c>
    return;
 800cf8c:	bf00      	nop
 800cf8e:	e002      	b.n	800cf96 <HAL_SPI_IRQHandler+0x38e>
    return;
 800cf90:	bf00      	nop
 800cf92:	e000      	b.n	800cf96 <HAL_SPI_IRQHandler+0x38e>
    return;
 800cf94:	bf00      	nop
  }
}
 800cf96:	3728      	adds	r7, #40	@ 0x28
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}
 800cf9c:	fffffc94 	.word	0xfffffc94
 800cfa0:	0800d009 	.word	0x0800d009

0800cfa4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800cfac:	bf00      	nop
 800cfae:	370c      	adds	r7, #12
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr

0800cfb8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800cfc0:	bf00      	nop
 800cfc2:	370c      	adds	r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr

0800cfcc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800cfd4:	bf00      	nop
 800cfd6:	370c      	adds	r7, #12
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b083      	sub	sp, #12
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cfe8:	bf00      	nop
 800cfea:	370c      	adds	r7, #12
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr

0800cff4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800cffc:	bf00      	nop
 800cffe:	370c      	adds	r7, #12
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr

0800d008 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d014:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2200      	movs	r2, #0
 800d01a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2200      	movs	r2, #0
 800d022:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2201      	movs	r2, #1
 800d02a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d02e:	68f8      	ldr	r0, [r7, #12]
 800d030:	f7ff ffd6 	bl	800cfe0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d034:	bf00      	nop
 800d036:	3710      	adds	r7, #16
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b085      	sub	sp, #20
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	695b      	ldr	r3, [r3, #20]
 800d04a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	699a      	ldr	r2, [r3, #24]
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f042 0208 	orr.w	r2, r2, #8
 800d05a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	699a      	ldr	r2, [r3, #24]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f042 0210 	orr.w	r2, r2, #16
 800d06a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	681a      	ldr	r2, [r3, #0]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f022 0201 	bic.w	r2, r2, #1
 800d07a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	6919      	ldr	r1, [r3, #16]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681a      	ldr	r2, [r3, #0]
 800d086:	4b3c      	ldr	r3, [pc, #240]	@ (800d178 <SPI_CloseTransfer+0x13c>)
 800d088:	400b      	ands	r3, r1
 800d08a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	689a      	ldr	r2, [r3, #8]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d09a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	2b04      	cmp	r3, #4
 800d0a6:	d014      	beq.n	800d0d2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f003 0320 	and.w	r3, r3, #32
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d00f      	beq.n	800d0d2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d0b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	699a      	ldr	r2, [r3, #24]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f042 0220 	orr.w	r2, r2, #32
 800d0d0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	2b03      	cmp	r3, #3
 800d0dc:	d014      	beq.n	800d108 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d00f      	beq.n	800d108 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d0ee:	f043 0204 	orr.w	r2, r3, #4
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	699a      	ldr	r2, [r3, #24]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d106:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d00f      	beq.n	800d132 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d118:	f043 0201 	orr.w	r2, r3, #1
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	699a      	ldr	r2, [r3, #24]
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d130:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d00f      	beq.n	800d15c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d142:	f043 0208 	orr.w	r2, r3, #8
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	699a      	ldr	r2, [r3, #24]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d15a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2200      	movs	r2, #0
 800d160:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2200      	movs	r2, #0
 800d168:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800d16c:	bf00      	nop
 800d16e:	3714      	adds	r7, #20
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr
 800d178:	fffffc90 	.word	0xfffffc90

0800d17c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b085      	sub	sp, #20
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d188:	095b      	lsrs	r3, r3, #5
 800d18a:	3301      	adds	r3, #1
 800d18c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	68db      	ldr	r3, [r3, #12]
 800d192:	3301      	adds	r3, #1
 800d194:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	3307      	adds	r3, #7
 800d19a:	08db      	lsrs	r3, r3, #3
 800d19c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	68fa      	ldr	r2, [r7, #12]
 800d1a2:	fb02 f303 	mul.w	r3, r2, r3
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3714      	adds	r7, #20
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr

0800d1b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d1b2:	b580      	push	{r7, lr}
 800d1b4:	b082      	sub	sp, #8
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d101      	bne.n	800d1c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e049      	b.n	800d258 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d106      	bne.n	800d1de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f7f4 fcbb 	bl	8001b54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2202      	movs	r2, #2
 800d1e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681a      	ldr	r2, [r3, #0]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	3304      	adds	r3, #4
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	4610      	mov	r0, r2
 800d1f2:	f000 fbdb 	bl	800d9ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2201      	movs	r2, #1
 800d202:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2201      	movs	r2, #1
 800d20a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2201      	movs	r2, #1
 800d212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2201      	movs	r2, #1
 800d21a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2201      	movs	r2, #1
 800d222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2201      	movs	r2, #1
 800d22a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2201      	movs	r2, #1
 800d232:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2201      	movs	r2, #1
 800d23a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2201      	movs	r2, #1
 800d242:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2201      	movs	r2, #1
 800d24a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2201      	movs	r2, #1
 800d252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d256:	2300      	movs	r3, #0
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3708      	adds	r7, #8
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b082      	sub	sp, #8
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d101      	bne.n	800d272 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d26e:	2301      	movs	r3, #1
 800d270:	e049      	b.n	800d306 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d106      	bne.n	800d28c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2200      	movs	r2, #0
 800d282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f000 f841 	bl	800d30e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2202      	movs	r2, #2
 800d290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681a      	ldr	r2, [r3, #0]
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	3304      	adds	r3, #4
 800d29c:	4619      	mov	r1, r3
 800d29e:	4610      	mov	r0, r2
 800d2a0:	f000 fb84 	bl	800d9ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2201      	movs	r2, #1
 800d2c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2201      	movs	r2, #1
 800d2d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2201      	movs	r2, #1
 800d300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	3708      	adds	r7, #8
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}

0800d30e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d30e:	b480      	push	{r7}
 800d310:	b083      	sub	sp, #12
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d316:	bf00      	nop
 800d318:	370c      	adds	r7, #12
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr

0800d322 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d322:	b580      	push	{r7, lr}
 800d324:	b084      	sub	sp, #16
 800d326:	af00      	add	r7, sp, #0
 800d328:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	691b      	ldr	r3, [r3, #16]
 800d338:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	f003 0302 	and.w	r3, r3, #2
 800d340:	2b00      	cmp	r3, #0
 800d342:	d020      	beq.n	800d386 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f003 0302 	and.w	r3, r3, #2
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d01b      	beq.n	800d386 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f06f 0202 	mvn.w	r2, #2
 800d356:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2201      	movs	r2, #1
 800d35c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	699b      	ldr	r3, [r3, #24]
 800d364:	f003 0303 	and.w	r3, r3, #3
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d003      	beq.n	800d374 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 faff 	bl	800d970 <HAL_TIM_IC_CaptureCallback>
 800d372:	e005      	b.n	800d380 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f000 faf1 	bl	800d95c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f000 fb02 	bl	800d984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2200      	movs	r2, #0
 800d384:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	f003 0304 	and.w	r3, r3, #4
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d020      	beq.n	800d3d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f003 0304 	and.w	r3, r3, #4
 800d396:	2b00      	cmp	r3, #0
 800d398:	d01b      	beq.n	800d3d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f06f 0204 	mvn.w	r2, #4
 800d3a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2202      	movs	r2, #2
 800d3a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	699b      	ldr	r3, [r3, #24]
 800d3b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d003      	beq.n	800d3c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f000 fad9 	bl	800d970 <HAL_TIM_IC_CaptureCallback>
 800d3be:	e005      	b.n	800d3cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f000 facb 	bl	800d95c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f000 fadc 	bl	800d984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	f003 0308 	and.w	r3, r3, #8
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d020      	beq.n	800d41e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f003 0308 	and.w	r3, r3, #8
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d01b      	beq.n	800d41e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f06f 0208 	mvn.w	r2, #8
 800d3ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2204      	movs	r2, #4
 800d3f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	69db      	ldr	r3, [r3, #28]
 800d3fc:	f003 0303 	and.w	r3, r3, #3
 800d400:	2b00      	cmp	r3, #0
 800d402:	d003      	beq.n	800d40c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f000 fab3 	bl	800d970 <HAL_TIM_IC_CaptureCallback>
 800d40a:	e005      	b.n	800d418 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f000 faa5 	bl	800d95c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f000 fab6 	bl	800d984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2200      	movs	r2, #0
 800d41c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	f003 0310 	and.w	r3, r3, #16
 800d424:	2b00      	cmp	r3, #0
 800d426:	d020      	beq.n	800d46a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f003 0310 	and.w	r3, r3, #16
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d01b      	beq.n	800d46a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f06f 0210 	mvn.w	r2, #16
 800d43a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2208      	movs	r2, #8
 800d440:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	69db      	ldr	r3, [r3, #28]
 800d448:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d003      	beq.n	800d458 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 fa8d 	bl	800d970 <HAL_TIM_IC_CaptureCallback>
 800d456:	e005      	b.n	800d464 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 fa7f 	bl	800d95c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f000 fa90 	bl	800d984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	f003 0301 	and.w	r3, r3, #1
 800d470:	2b00      	cmp	r3, #0
 800d472:	d00c      	beq.n	800d48e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f003 0301 	and.w	r3, r3, #1
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d007      	beq.n	800d48e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f06f 0201 	mvn.w	r2, #1
 800d486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f000 fa5d 	bl	800d948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d494:	2b00      	cmp	r3, #0
 800d496:	d104      	bne.n	800d4a2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d00c      	beq.n	800d4bc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d007      	beq.n	800d4bc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d4b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 ffca 	bl	800e450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d00c      	beq.n	800d4e0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d007      	beq.n	800d4e0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d4d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 ffc2 	bl	800e464 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d00c      	beq.n	800d504 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d007      	beq.n	800d504 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d4fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 fa4a 	bl	800d998 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	f003 0320 	and.w	r3, r3, #32
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d00c      	beq.n	800d528 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	f003 0320 	and.w	r3, r3, #32
 800d514:	2b00      	cmp	r3, #0
 800d516:	d007      	beq.n	800d528 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f06f 0220 	mvn.w	r2, #32
 800d520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f000 ff8a 	bl	800e43c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d528:	bf00      	nop
 800d52a:	3710      	adds	r7, #16
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b086      	sub	sp, #24
 800d534:	af00      	add	r7, sp, #0
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	60b9      	str	r1, [r7, #8]
 800d53a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d53c:	2300      	movs	r3, #0
 800d53e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d546:	2b01      	cmp	r3, #1
 800d548:	d101      	bne.n	800d54e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d54a:	2302      	movs	r3, #2
 800d54c:	e0ff      	b.n	800d74e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2201      	movs	r2, #1
 800d552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2b14      	cmp	r3, #20
 800d55a:	f200 80f0 	bhi.w	800d73e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d55e:	a201      	add	r2, pc, #4	@ (adr r2, 800d564 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d564:	0800d5b9 	.word	0x0800d5b9
 800d568:	0800d73f 	.word	0x0800d73f
 800d56c:	0800d73f 	.word	0x0800d73f
 800d570:	0800d73f 	.word	0x0800d73f
 800d574:	0800d5f9 	.word	0x0800d5f9
 800d578:	0800d73f 	.word	0x0800d73f
 800d57c:	0800d73f 	.word	0x0800d73f
 800d580:	0800d73f 	.word	0x0800d73f
 800d584:	0800d63b 	.word	0x0800d63b
 800d588:	0800d73f 	.word	0x0800d73f
 800d58c:	0800d73f 	.word	0x0800d73f
 800d590:	0800d73f 	.word	0x0800d73f
 800d594:	0800d67b 	.word	0x0800d67b
 800d598:	0800d73f 	.word	0x0800d73f
 800d59c:	0800d73f 	.word	0x0800d73f
 800d5a0:	0800d73f 	.word	0x0800d73f
 800d5a4:	0800d6bd 	.word	0x0800d6bd
 800d5a8:	0800d73f 	.word	0x0800d73f
 800d5ac:	0800d73f 	.word	0x0800d73f
 800d5b0:	0800d73f 	.word	0x0800d73f
 800d5b4:	0800d6fd 	.word	0x0800d6fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	68b9      	ldr	r1, [r7, #8]
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f000 faa0 	bl	800db04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	699a      	ldr	r2, [r3, #24]
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f042 0208 	orr.w	r2, r2, #8
 800d5d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	699a      	ldr	r2, [r3, #24]
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f022 0204 	bic.w	r2, r2, #4
 800d5e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	6999      	ldr	r1, [r3, #24]
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	691a      	ldr	r2, [r3, #16]
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	430a      	orrs	r2, r1
 800d5f4:	619a      	str	r2, [r3, #24]
      break;
 800d5f6:	e0a5      	b.n	800d744 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	68b9      	ldr	r1, [r7, #8]
 800d5fe:	4618      	mov	r0, r3
 800d600:	f000 fb10 	bl	800dc24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	699a      	ldr	r2, [r3, #24]
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d612:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	699a      	ldr	r2, [r3, #24]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	6999      	ldr	r1, [r3, #24]
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	691b      	ldr	r3, [r3, #16]
 800d62e:	021a      	lsls	r2, r3, #8
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	430a      	orrs	r2, r1
 800d636:	619a      	str	r2, [r3, #24]
      break;
 800d638:	e084      	b.n	800d744 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	68b9      	ldr	r1, [r7, #8]
 800d640:	4618      	mov	r0, r3
 800d642:	f000 fb79 	bl	800dd38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	69da      	ldr	r2, [r3, #28]
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f042 0208 	orr.w	r2, r2, #8
 800d654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	69da      	ldr	r2, [r3, #28]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f022 0204 	bic.w	r2, r2, #4
 800d664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	69d9      	ldr	r1, [r3, #28]
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	691a      	ldr	r2, [r3, #16]
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	430a      	orrs	r2, r1
 800d676:	61da      	str	r2, [r3, #28]
      break;
 800d678:	e064      	b.n	800d744 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	68b9      	ldr	r1, [r7, #8]
 800d680:	4618      	mov	r0, r3
 800d682:	f000 fbe1 	bl	800de48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	69da      	ldr	r2, [r3, #28]
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d694:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	69da      	ldr	r2, [r3, #28]
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d6a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	69d9      	ldr	r1, [r3, #28]
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	691b      	ldr	r3, [r3, #16]
 800d6b0:	021a      	lsls	r2, r3, #8
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	430a      	orrs	r2, r1
 800d6b8:	61da      	str	r2, [r3, #28]
      break;
 800d6ba:	e043      	b.n	800d744 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	68b9      	ldr	r1, [r7, #8]
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f000 fc2a 	bl	800df1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f042 0208 	orr.w	r2, r2, #8
 800d6d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f022 0204 	bic.w	r2, r2, #4
 800d6e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	691a      	ldr	r2, [r3, #16]
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	430a      	orrs	r2, r1
 800d6f8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d6fa:	e023      	b.n	800d744 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	68b9      	ldr	r1, [r7, #8]
 800d702:	4618      	mov	r0, r3
 800d704:	f000 fc6e 	bl	800dfe4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d716:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d726:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	691b      	ldr	r3, [r3, #16]
 800d732:	021a      	lsls	r2, r3, #8
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	430a      	orrs	r2, r1
 800d73a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d73c:	e002      	b.n	800d744 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d73e:	2301      	movs	r3, #1
 800d740:	75fb      	strb	r3, [r7, #23]
      break;
 800d742:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2200      	movs	r2, #0
 800d748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d74c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3718      	adds	r7, #24
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop

0800d758 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d762:	2300      	movs	r3, #0
 800d764:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d101      	bne.n	800d774 <HAL_TIM_ConfigClockSource+0x1c>
 800d770:	2302      	movs	r3, #2
 800d772:	e0dc      	b.n	800d92e <HAL_TIM_ConfigClockSource+0x1d6>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2201      	movs	r2, #1
 800d778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2202      	movs	r2, #2
 800d780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	689b      	ldr	r3, [r3, #8]
 800d78a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d78c:	68ba      	ldr	r2, [r7, #8]
 800d78e:	4b6a      	ldr	r3, [pc, #424]	@ (800d938 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d790:	4013      	ands	r3, r2
 800d792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d79a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	68ba      	ldr	r2, [r7, #8]
 800d7a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	4a64      	ldr	r2, [pc, #400]	@ (800d93c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	f000 80a9 	beq.w	800d902 <HAL_TIM_ConfigClockSource+0x1aa>
 800d7b0:	4a62      	ldr	r2, [pc, #392]	@ (800d93c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	f200 80ae 	bhi.w	800d914 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7b8:	4a61      	ldr	r2, [pc, #388]	@ (800d940 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	f000 80a1 	beq.w	800d902 <HAL_TIM_ConfigClockSource+0x1aa>
 800d7c0:	4a5f      	ldr	r2, [pc, #380]	@ (800d940 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	f200 80a6 	bhi.w	800d914 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7c8:	4a5e      	ldr	r2, [pc, #376]	@ (800d944 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	f000 8099 	beq.w	800d902 <HAL_TIM_ConfigClockSource+0x1aa>
 800d7d0:	4a5c      	ldr	r2, [pc, #368]	@ (800d944 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	f200 809e 	bhi.w	800d914 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d7dc:	f000 8091 	beq.w	800d902 <HAL_TIM_ConfigClockSource+0x1aa>
 800d7e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d7e4:	f200 8096 	bhi.w	800d914 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d7ec:	f000 8089 	beq.w	800d902 <HAL_TIM_ConfigClockSource+0x1aa>
 800d7f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d7f4:	f200 808e 	bhi.w	800d914 <HAL_TIM_ConfigClockSource+0x1bc>
 800d7f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d7fc:	d03e      	beq.n	800d87c <HAL_TIM_ConfigClockSource+0x124>
 800d7fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d802:	f200 8087 	bhi.w	800d914 <HAL_TIM_ConfigClockSource+0x1bc>
 800d806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d80a:	f000 8086 	beq.w	800d91a <HAL_TIM_ConfigClockSource+0x1c2>
 800d80e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d812:	d87f      	bhi.n	800d914 <HAL_TIM_ConfigClockSource+0x1bc>
 800d814:	2b70      	cmp	r3, #112	@ 0x70
 800d816:	d01a      	beq.n	800d84e <HAL_TIM_ConfigClockSource+0xf6>
 800d818:	2b70      	cmp	r3, #112	@ 0x70
 800d81a:	d87b      	bhi.n	800d914 <HAL_TIM_ConfigClockSource+0x1bc>
 800d81c:	2b60      	cmp	r3, #96	@ 0x60
 800d81e:	d050      	beq.n	800d8c2 <HAL_TIM_ConfigClockSource+0x16a>
 800d820:	2b60      	cmp	r3, #96	@ 0x60
 800d822:	d877      	bhi.n	800d914 <HAL_TIM_ConfigClockSource+0x1bc>
 800d824:	2b50      	cmp	r3, #80	@ 0x50
 800d826:	d03c      	beq.n	800d8a2 <HAL_TIM_ConfigClockSource+0x14a>
 800d828:	2b50      	cmp	r3, #80	@ 0x50
 800d82a:	d873      	bhi.n	800d914 <HAL_TIM_ConfigClockSource+0x1bc>
 800d82c:	2b40      	cmp	r3, #64	@ 0x40
 800d82e:	d058      	beq.n	800d8e2 <HAL_TIM_ConfigClockSource+0x18a>
 800d830:	2b40      	cmp	r3, #64	@ 0x40
 800d832:	d86f      	bhi.n	800d914 <HAL_TIM_ConfigClockSource+0x1bc>
 800d834:	2b30      	cmp	r3, #48	@ 0x30
 800d836:	d064      	beq.n	800d902 <HAL_TIM_ConfigClockSource+0x1aa>
 800d838:	2b30      	cmp	r3, #48	@ 0x30
 800d83a:	d86b      	bhi.n	800d914 <HAL_TIM_ConfigClockSource+0x1bc>
 800d83c:	2b20      	cmp	r3, #32
 800d83e:	d060      	beq.n	800d902 <HAL_TIM_ConfigClockSource+0x1aa>
 800d840:	2b20      	cmp	r3, #32
 800d842:	d867      	bhi.n	800d914 <HAL_TIM_ConfigClockSource+0x1bc>
 800d844:	2b00      	cmp	r3, #0
 800d846:	d05c      	beq.n	800d902 <HAL_TIM_ConfigClockSource+0x1aa>
 800d848:	2b10      	cmp	r3, #16
 800d84a:	d05a      	beq.n	800d902 <HAL_TIM_ConfigClockSource+0x1aa>
 800d84c:	e062      	b.n	800d914 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d85e:	f000 fca5 	bl	800e1ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d870:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	68ba      	ldr	r2, [r7, #8]
 800d878:	609a      	str	r2, [r3, #8]
      break;
 800d87a:	e04f      	b.n	800d91c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d88c:	f000 fc8e 	bl	800e1ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	689a      	ldr	r2, [r3, #8]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d89e:	609a      	str	r2, [r3, #8]
      break;
 800d8a0:	e03c      	b.n	800d91c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	f000 fbfe 	bl	800e0b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	2150      	movs	r1, #80	@ 0x50
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f000 fc58 	bl	800e170 <TIM_ITRx_SetConfig>
      break;
 800d8c0:	e02c      	b.n	800d91c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	f000 fc1d 	bl	800e10e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	2160      	movs	r1, #96	@ 0x60
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f000 fc48 	bl	800e170 <TIM_ITRx_SetConfig>
      break;
 800d8e0:	e01c      	b.n	800d91c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d8ee:	461a      	mov	r2, r3
 800d8f0:	f000 fbde 	bl	800e0b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	2140      	movs	r1, #64	@ 0x40
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f000 fc38 	bl	800e170 <TIM_ITRx_SetConfig>
      break;
 800d900:	e00c      	b.n	800d91c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	4619      	mov	r1, r3
 800d90c:	4610      	mov	r0, r2
 800d90e:	f000 fc2f 	bl	800e170 <TIM_ITRx_SetConfig>
      break;
 800d912:	e003      	b.n	800d91c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d914:	2301      	movs	r3, #1
 800d916:	73fb      	strb	r3, [r7, #15]
      break;
 800d918:	e000      	b.n	800d91c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d91a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2201      	movs	r2, #1
 800d920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2200      	movs	r2, #0
 800d928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3710      	adds	r7, #16
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	ffceff88 	.word	0xffceff88
 800d93c:	00100040 	.word	0x00100040
 800d940:	00100030 	.word	0x00100030
 800d944:	00100020 	.word	0x00100020

0800d948 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d948:	b480      	push	{r7}
 800d94a:	b083      	sub	sp, #12
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d950:	bf00      	nop
 800d952:	370c      	adds	r7, #12
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr

0800d95c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b083      	sub	sp, #12
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d964:	bf00      	nop
 800d966:	370c      	adds	r7, #12
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr

0800d970 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d970:	b480      	push	{r7}
 800d972:	b083      	sub	sp, #12
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d978:	bf00      	nop
 800d97a:	370c      	adds	r7, #12
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr

0800d984 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d984:	b480      	push	{r7}
 800d986:	b083      	sub	sp, #12
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d98c:	bf00      	nop
 800d98e:	370c      	adds	r7, #12
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr

0800d998 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d998:	b480      	push	{r7}
 800d99a:	b083      	sub	sp, #12
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d9a0:	bf00      	nop
 800d9a2:	370c      	adds	r7, #12
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9aa:	4770      	bx	lr

0800d9ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b085      	sub	sp, #20
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	4a47      	ldr	r2, [pc, #284]	@ (800dadc <TIM_Base_SetConfig+0x130>)
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	d013      	beq.n	800d9ec <TIM_Base_SetConfig+0x40>
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d9ca:	d00f      	beq.n	800d9ec <TIM_Base_SetConfig+0x40>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	4a44      	ldr	r2, [pc, #272]	@ (800dae0 <TIM_Base_SetConfig+0x134>)
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	d00b      	beq.n	800d9ec <TIM_Base_SetConfig+0x40>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	4a43      	ldr	r2, [pc, #268]	@ (800dae4 <TIM_Base_SetConfig+0x138>)
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	d007      	beq.n	800d9ec <TIM_Base_SetConfig+0x40>
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	4a42      	ldr	r2, [pc, #264]	@ (800dae8 <TIM_Base_SetConfig+0x13c>)
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d003      	beq.n	800d9ec <TIM_Base_SetConfig+0x40>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	4a41      	ldr	r2, [pc, #260]	@ (800daec <TIM_Base_SetConfig+0x140>)
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	d108      	bne.n	800d9fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	68fa      	ldr	r2, [r7, #12]
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	4a36      	ldr	r2, [pc, #216]	@ (800dadc <TIM_Base_SetConfig+0x130>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d027      	beq.n	800da56 <TIM_Base_SetConfig+0xaa>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da0c:	d023      	beq.n	800da56 <TIM_Base_SetConfig+0xaa>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	4a33      	ldr	r2, [pc, #204]	@ (800dae0 <TIM_Base_SetConfig+0x134>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d01f      	beq.n	800da56 <TIM_Base_SetConfig+0xaa>
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	4a32      	ldr	r2, [pc, #200]	@ (800dae4 <TIM_Base_SetConfig+0x138>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d01b      	beq.n	800da56 <TIM_Base_SetConfig+0xaa>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	4a31      	ldr	r2, [pc, #196]	@ (800dae8 <TIM_Base_SetConfig+0x13c>)
 800da22:	4293      	cmp	r3, r2
 800da24:	d017      	beq.n	800da56 <TIM_Base_SetConfig+0xaa>
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	4a30      	ldr	r2, [pc, #192]	@ (800daec <TIM_Base_SetConfig+0x140>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d013      	beq.n	800da56 <TIM_Base_SetConfig+0xaa>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	4a2f      	ldr	r2, [pc, #188]	@ (800daf0 <TIM_Base_SetConfig+0x144>)
 800da32:	4293      	cmp	r3, r2
 800da34:	d00f      	beq.n	800da56 <TIM_Base_SetConfig+0xaa>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	4a2e      	ldr	r2, [pc, #184]	@ (800daf4 <TIM_Base_SetConfig+0x148>)
 800da3a:	4293      	cmp	r3, r2
 800da3c:	d00b      	beq.n	800da56 <TIM_Base_SetConfig+0xaa>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	4a2d      	ldr	r2, [pc, #180]	@ (800daf8 <TIM_Base_SetConfig+0x14c>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d007      	beq.n	800da56 <TIM_Base_SetConfig+0xaa>
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	4a2c      	ldr	r2, [pc, #176]	@ (800dafc <TIM_Base_SetConfig+0x150>)
 800da4a:	4293      	cmp	r3, r2
 800da4c:	d003      	beq.n	800da56 <TIM_Base_SetConfig+0xaa>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	4a2b      	ldr	r2, [pc, #172]	@ (800db00 <TIM_Base_SetConfig+0x154>)
 800da52:	4293      	cmp	r3, r2
 800da54:	d108      	bne.n	800da68 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800da5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	68db      	ldr	r3, [r3, #12]
 800da62:	68fa      	ldr	r2, [r7, #12]
 800da64:	4313      	orrs	r3, r2
 800da66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	695b      	ldr	r3, [r3, #20]
 800da72:	4313      	orrs	r3, r2
 800da74:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	689a      	ldr	r2, [r3, #8]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	4a14      	ldr	r2, [pc, #80]	@ (800dadc <TIM_Base_SetConfig+0x130>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d00f      	beq.n	800daae <TIM_Base_SetConfig+0x102>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	4a16      	ldr	r2, [pc, #88]	@ (800daec <TIM_Base_SetConfig+0x140>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d00b      	beq.n	800daae <TIM_Base_SetConfig+0x102>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	4a15      	ldr	r2, [pc, #84]	@ (800daf0 <TIM_Base_SetConfig+0x144>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d007      	beq.n	800daae <TIM_Base_SetConfig+0x102>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	4a14      	ldr	r2, [pc, #80]	@ (800daf4 <TIM_Base_SetConfig+0x148>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d003      	beq.n	800daae <TIM_Base_SetConfig+0x102>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	4a13      	ldr	r2, [pc, #76]	@ (800daf8 <TIM_Base_SetConfig+0x14c>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d103      	bne.n	800dab6 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	691a      	ldr	r2, [r3, #16]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f043 0204 	orr.w	r2, r3, #4
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2201      	movs	r2, #1
 800dac6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	68fa      	ldr	r2, [r7, #12]
 800dacc:	601a      	str	r2, [r3, #0]
}
 800dace:	bf00      	nop
 800dad0:	3714      	adds	r7, #20
 800dad2:	46bd      	mov	sp, r7
 800dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad8:	4770      	bx	lr
 800dada:	bf00      	nop
 800dadc:	40010000 	.word	0x40010000
 800dae0:	40000400 	.word	0x40000400
 800dae4:	40000800 	.word	0x40000800
 800dae8:	40000c00 	.word	0x40000c00
 800daec:	40010400 	.word	0x40010400
 800daf0:	40014000 	.word	0x40014000
 800daf4:	40014400 	.word	0x40014400
 800daf8:	40014800 	.word	0x40014800
 800dafc:	4000e000 	.word	0x4000e000
 800db00:	4000e400 	.word	0x4000e400

0800db04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db04:	b480      	push	{r7}
 800db06:	b087      	sub	sp, #28
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6a1b      	ldr	r3, [r3, #32]
 800db12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6a1b      	ldr	r3, [r3, #32]
 800db18:	f023 0201 	bic.w	r2, r3, #1
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	685b      	ldr	r3, [r3, #4]
 800db24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	699b      	ldr	r3, [r3, #24]
 800db2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800db2c:	68fa      	ldr	r2, [r7, #12]
 800db2e:	4b37      	ldr	r3, [pc, #220]	@ (800dc0c <TIM_OC1_SetConfig+0x108>)
 800db30:	4013      	ands	r3, r2
 800db32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	f023 0303 	bic.w	r3, r3, #3
 800db3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	68fa      	ldr	r2, [r7, #12]
 800db42:	4313      	orrs	r3, r2
 800db44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	f023 0302 	bic.w	r3, r3, #2
 800db4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	689b      	ldr	r3, [r3, #8]
 800db52:	697a      	ldr	r2, [r7, #20]
 800db54:	4313      	orrs	r3, r2
 800db56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	4a2d      	ldr	r2, [pc, #180]	@ (800dc10 <TIM_OC1_SetConfig+0x10c>)
 800db5c:	4293      	cmp	r3, r2
 800db5e:	d00f      	beq.n	800db80 <TIM_OC1_SetConfig+0x7c>
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	4a2c      	ldr	r2, [pc, #176]	@ (800dc14 <TIM_OC1_SetConfig+0x110>)
 800db64:	4293      	cmp	r3, r2
 800db66:	d00b      	beq.n	800db80 <TIM_OC1_SetConfig+0x7c>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	4a2b      	ldr	r2, [pc, #172]	@ (800dc18 <TIM_OC1_SetConfig+0x114>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d007      	beq.n	800db80 <TIM_OC1_SetConfig+0x7c>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	4a2a      	ldr	r2, [pc, #168]	@ (800dc1c <TIM_OC1_SetConfig+0x118>)
 800db74:	4293      	cmp	r3, r2
 800db76:	d003      	beq.n	800db80 <TIM_OC1_SetConfig+0x7c>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	4a29      	ldr	r2, [pc, #164]	@ (800dc20 <TIM_OC1_SetConfig+0x11c>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d10c      	bne.n	800db9a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	f023 0308 	bic.w	r3, r3, #8
 800db86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	697a      	ldr	r2, [r7, #20]
 800db8e:	4313      	orrs	r3, r2
 800db90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	f023 0304 	bic.w	r3, r3, #4
 800db98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	4a1c      	ldr	r2, [pc, #112]	@ (800dc10 <TIM_OC1_SetConfig+0x10c>)
 800db9e:	4293      	cmp	r3, r2
 800dba0:	d00f      	beq.n	800dbc2 <TIM_OC1_SetConfig+0xbe>
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	4a1b      	ldr	r2, [pc, #108]	@ (800dc14 <TIM_OC1_SetConfig+0x110>)
 800dba6:	4293      	cmp	r3, r2
 800dba8:	d00b      	beq.n	800dbc2 <TIM_OC1_SetConfig+0xbe>
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	4a1a      	ldr	r2, [pc, #104]	@ (800dc18 <TIM_OC1_SetConfig+0x114>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d007      	beq.n	800dbc2 <TIM_OC1_SetConfig+0xbe>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	4a19      	ldr	r2, [pc, #100]	@ (800dc1c <TIM_OC1_SetConfig+0x118>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	d003      	beq.n	800dbc2 <TIM_OC1_SetConfig+0xbe>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	4a18      	ldr	r2, [pc, #96]	@ (800dc20 <TIM_OC1_SetConfig+0x11c>)
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d111      	bne.n	800dbe6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dbc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dbd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	695b      	ldr	r3, [r3, #20]
 800dbd6:	693a      	ldr	r2, [r7, #16]
 800dbd8:	4313      	orrs	r3, r2
 800dbda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	699b      	ldr	r3, [r3, #24]
 800dbe0:	693a      	ldr	r2, [r7, #16]
 800dbe2:	4313      	orrs	r3, r2
 800dbe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	693a      	ldr	r2, [r7, #16]
 800dbea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	68fa      	ldr	r2, [r7, #12]
 800dbf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	685a      	ldr	r2, [r3, #4]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	697a      	ldr	r2, [r7, #20]
 800dbfe:	621a      	str	r2, [r3, #32]
}
 800dc00:	bf00      	nop
 800dc02:	371c      	adds	r7, #28
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr
 800dc0c:	fffeff8f 	.word	0xfffeff8f
 800dc10:	40010000 	.word	0x40010000
 800dc14:	40010400 	.word	0x40010400
 800dc18:	40014000 	.word	0x40014000
 800dc1c:	40014400 	.word	0x40014400
 800dc20:	40014800 	.word	0x40014800

0800dc24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b087      	sub	sp, #28
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6a1b      	ldr	r3, [r3, #32]
 800dc32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6a1b      	ldr	r3, [r3, #32]
 800dc38:	f023 0210 	bic.w	r2, r3, #16
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	685b      	ldr	r3, [r3, #4]
 800dc44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	699b      	ldr	r3, [r3, #24]
 800dc4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dc4c:	68fa      	ldr	r2, [r7, #12]
 800dc4e:	4b34      	ldr	r3, [pc, #208]	@ (800dd20 <TIM_OC2_SetConfig+0xfc>)
 800dc50:	4013      	ands	r3, r2
 800dc52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dc5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	021b      	lsls	r3, r3, #8
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	4313      	orrs	r3, r2
 800dc66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	f023 0320 	bic.w	r3, r3, #32
 800dc6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	689b      	ldr	r3, [r3, #8]
 800dc74:	011b      	lsls	r3, r3, #4
 800dc76:	697a      	ldr	r2, [r7, #20]
 800dc78:	4313      	orrs	r3, r2
 800dc7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	4a29      	ldr	r2, [pc, #164]	@ (800dd24 <TIM_OC2_SetConfig+0x100>)
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d003      	beq.n	800dc8c <TIM_OC2_SetConfig+0x68>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	4a28      	ldr	r2, [pc, #160]	@ (800dd28 <TIM_OC2_SetConfig+0x104>)
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d10d      	bne.n	800dca8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dc92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	68db      	ldr	r3, [r3, #12]
 800dc98:	011b      	lsls	r3, r3, #4
 800dc9a:	697a      	ldr	r2, [r7, #20]
 800dc9c:	4313      	orrs	r3, r2
 800dc9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dca6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	4a1e      	ldr	r2, [pc, #120]	@ (800dd24 <TIM_OC2_SetConfig+0x100>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d00f      	beq.n	800dcd0 <TIM_OC2_SetConfig+0xac>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	4a1d      	ldr	r2, [pc, #116]	@ (800dd28 <TIM_OC2_SetConfig+0x104>)
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d00b      	beq.n	800dcd0 <TIM_OC2_SetConfig+0xac>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	4a1c      	ldr	r2, [pc, #112]	@ (800dd2c <TIM_OC2_SetConfig+0x108>)
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	d007      	beq.n	800dcd0 <TIM_OC2_SetConfig+0xac>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	4a1b      	ldr	r2, [pc, #108]	@ (800dd30 <TIM_OC2_SetConfig+0x10c>)
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	d003      	beq.n	800dcd0 <TIM_OC2_SetConfig+0xac>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	4a1a      	ldr	r2, [pc, #104]	@ (800dd34 <TIM_OC2_SetConfig+0x110>)
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d113      	bne.n	800dcf8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dcd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dcde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	695b      	ldr	r3, [r3, #20]
 800dce4:	009b      	lsls	r3, r3, #2
 800dce6:	693a      	ldr	r2, [r7, #16]
 800dce8:	4313      	orrs	r3, r2
 800dcea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	699b      	ldr	r3, [r3, #24]
 800dcf0:	009b      	lsls	r3, r3, #2
 800dcf2:	693a      	ldr	r2, [r7, #16]
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	693a      	ldr	r2, [r7, #16]
 800dcfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	68fa      	ldr	r2, [r7, #12]
 800dd02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	685a      	ldr	r2, [r3, #4]
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	697a      	ldr	r2, [r7, #20]
 800dd10:	621a      	str	r2, [r3, #32]
}
 800dd12:	bf00      	nop
 800dd14:	371c      	adds	r7, #28
 800dd16:	46bd      	mov	sp, r7
 800dd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1c:	4770      	bx	lr
 800dd1e:	bf00      	nop
 800dd20:	feff8fff 	.word	0xfeff8fff
 800dd24:	40010000 	.word	0x40010000
 800dd28:	40010400 	.word	0x40010400
 800dd2c:	40014000 	.word	0x40014000
 800dd30:	40014400 	.word	0x40014400
 800dd34:	40014800 	.word	0x40014800

0800dd38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b087      	sub	sp, #28
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6a1b      	ldr	r3, [r3, #32]
 800dd46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6a1b      	ldr	r3, [r3, #32]
 800dd4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	69db      	ldr	r3, [r3, #28]
 800dd5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dd60:	68fa      	ldr	r2, [r7, #12]
 800dd62:	4b33      	ldr	r3, [pc, #204]	@ (800de30 <TIM_OC3_SetConfig+0xf8>)
 800dd64:	4013      	ands	r3, r2
 800dd66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f023 0303 	bic.w	r3, r3, #3
 800dd6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	68fa      	ldr	r2, [r7, #12]
 800dd76:	4313      	orrs	r3, r2
 800dd78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dd80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	689b      	ldr	r3, [r3, #8]
 800dd86:	021b      	lsls	r3, r3, #8
 800dd88:	697a      	ldr	r2, [r7, #20]
 800dd8a:	4313      	orrs	r3, r2
 800dd8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	4a28      	ldr	r2, [pc, #160]	@ (800de34 <TIM_OC3_SetConfig+0xfc>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d003      	beq.n	800dd9e <TIM_OC3_SetConfig+0x66>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	4a27      	ldr	r2, [pc, #156]	@ (800de38 <TIM_OC3_SetConfig+0x100>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d10d      	bne.n	800ddba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dda4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	68db      	ldr	r3, [r3, #12]
 800ddaa:	021b      	lsls	r3, r3, #8
 800ddac:	697a      	ldr	r2, [r7, #20]
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ddb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	4a1d      	ldr	r2, [pc, #116]	@ (800de34 <TIM_OC3_SetConfig+0xfc>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d00f      	beq.n	800dde2 <TIM_OC3_SetConfig+0xaa>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	4a1c      	ldr	r2, [pc, #112]	@ (800de38 <TIM_OC3_SetConfig+0x100>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d00b      	beq.n	800dde2 <TIM_OC3_SetConfig+0xaa>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	4a1b      	ldr	r2, [pc, #108]	@ (800de3c <TIM_OC3_SetConfig+0x104>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d007      	beq.n	800dde2 <TIM_OC3_SetConfig+0xaa>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	4a1a      	ldr	r2, [pc, #104]	@ (800de40 <TIM_OC3_SetConfig+0x108>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d003      	beq.n	800dde2 <TIM_OC3_SetConfig+0xaa>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	4a19      	ldr	r2, [pc, #100]	@ (800de44 <TIM_OC3_SetConfig+0x10c>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d113      	bne.n	800de0a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dde8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ddf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	695b      	ldr	r3, [r3, #20]
 800ddf6:	011b      	lsls	r3, r3, #4
 800ddf8:	693a      	ldr	r2, [r7, #16]
 800ddfa:	4313      	orrs	r3, r2
 800ddfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	699b      	ldr	r3, [r3, #24]
 800de02:	011b      	lsls	r3, r3, #4
 800de04:	693a      	ldr	r2, [r7, #16]
 800de06:	4313      	orrs	r3, r2
 800de08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	693a      	ldr	r2, [r7, #16]
 800de0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	68fa      	ldr	r2, [r7, #12]
 800de14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	685a      	ldr	r2, [r3, #4]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	697a      	ldr	r2, [r7, #20]
 800de22:	621a      	str	r2, [r3, #32]
}
 800de24:	bf00      	nop
 800de26:	371c      	adds	r7, #28
 800de28:	46bd      	mov	sp, r7
 800de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2e:	4770      	bx	lr
 800de30:	fffeff8f 	.word	0xfffeff8f
 800de34:	40010000 	.word	0x40010000
 800de38:	40010400 	.word	0x40010400
 800de3c:	40014000 	.word	0x40014000
 800de40:	40014400 	.word	0x40014400
 800de44:	40014800 	.word	0x40014800

0800de48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800de48:	b480      	push	{r7}
 800de4a:	b087      	sub	sp, #28
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6a1b      	ldr	r3, [r3, #32]
 800de56:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6a1b      	ldr	r3, [r3, #32]
 800de5c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	685b      	ldr	r3, [r3, #4]
 800de68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	69db      	ldr	r3, [r3, #28]
 800de6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800de70:	68fa      	ldr	r2, [r7, #12]
 800de72:	4b24      	ldr	r3, [pc, #144]	@ (800df04 <TIM_OC4_SetConfig+0xbc>)
 800de74:	4013      	ands	r3, r2
 800de76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800de7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	021b      	lsls	r3, r3, #8
 800de86:	68fa      	ldr	r2, [r7, #12]
 800de88:	4313      	orrs	r3, r2
 800de8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800de92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	689b      	ldr	r3, [r3, #8]
 800de98:	031b      	lsls	r3, r3, #12
 800de9a:	693a      	ldr	r2, [r7, #16]
 800de9c:	4313      	orrs	r3, r2
 800de9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	4a19      	ldr	r2, [pc, #100]	@ (800df08 <TIM_OC4_SetConfig+0xc0>)
 800dea4:	4293      	cmp	r3, r2
 800dea6:	d00f      	beq.n	800dec8 <TIM_OC4_SetConfig+0x80>
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	4a18      	ldr	r2, [pc, #96]	@ (800df0c <TIM_OC4_SetConfig+0xc4>)
 800deac:	4293      	cmp	r3, r2
 800deae:	d00b      	beq.n	800dec8 <TIM_OC4_SetConfig+0x80>
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	4a17      	ldr	r2, [pc, #92]	@ (800df10 <TIM_OC4_SetConfig+0xc8>)
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d007      	beq.n	800dec8 <TIM_OC4_SetConfig+0x80>
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	4a16      	ldr	r2, [pc, #88]	@ (800df14 <TIM_OC4_SetConfig+0xcc>)
 800debc:	4293      	cmp	r3, r2
 800debe:	d003      	beq.n	800dec8 <TIM_OC4_SetConfig+0x80>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	4a15      	ldr	r2, [pc, #84]	@ (800df18 <TIM_OC4_SetConfig+0xd0>)
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d109      	bne.n	800dedc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dece:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	695b      	ldr	r3, [r3, #20]
 800ded4:	019b      	lsls	r3, r3, #6
 800ded6:	697a      	ldr	r2, [r7, #20]
 800ded8:	4313      	orrs	r3, r2
 800deda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	697a      	ldr	r2, [r7, #20]
 800dee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	68fa      	ldr	r2, [r7, #12]
 800dee6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	685a      	ldr	r2, [r3, #4]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	693a      	ldr	r2, [r7, #16]
 800def4:	621a      	str	r2, [r3, #32]
}
 800def6:	bf00      	nop
 800def8:	371c      	adds	r7, #28
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr
 800df02:	bf00      	nop
 800df04:	feff8fff 	.word	0xfeff8fff
 800df08:	40010000 	.word	0x40010000
 800df0c:	40010400 	.word	0x40010400
 800df10:	40014000 	.word	0x40014000
 800df14:	40014400 	.word	0x40014400
 800df18:	40014800 	.word	0x40014800

0800df1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b087      	sub	sp, #28
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6a1b      	ldr	r3, [r3, #32]
 800df2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6a1b      	ldr	r3, [r3, #32]
 800df30:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	685b      	ldr	r3, [r3, #4]
 800df3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800df44:	68fa      	ldr	r2, [r7, #12]
 800df46:	4b21      	ldr	r3, [pc, #132]	@ (800dfcc <TIM_OC5_SetConfig+0xb0>)
 800df48:	4013      	ands	r3, r2
 800df4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	68fa      	ldr	r2, [r7, #12]
 800df52:	4313      	orrs	r3, r2
 800df54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800df5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	689b      	ldr	r3, [r3, #8]
 800df62:	041b      	lsls	r3, r3, #16
 800df64:	693a      	ldr	r2, [r7, #16]
 800df66:	4313      	orrs	r3, r2
 800df68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	4a18      	ldr	r2, [pc, #96]	@ (800dfd0 <TIM_OC5_SetConfig+0xb4>)
 800df6e:	4293      	cmp	r3, r2
 800df70:	d00f      	beq.n	800df92 <TIM_OC5_SetConfig+0x76>
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	4a17      	ldr	r2, [pc, #92]	@ (800dfd4 <TIM_OC5_SetConfig+0xb8>)
 800df76:	4293      	cmp	r3, r2
 800df78:	d00b      	beq.n	800df92 <TIM_OC5_SetConfig+0x76>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	4a16      	ldr	r2, [pc, #88]	@ (800dfd8 <TIM_OC5_SetConfig+0xbc>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	d007      	beq.n	800df92 <TIM_OC5_SetConfig+0x76>
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	4a15      	ldr	r2, [pc, #84]	@ (800dfdc <TIM_OC5_SetConfig+0xc0>)
 800df86:	4293      	cmp	r3, r2
 800df88:	d003      	beq.n	800df92 <TIM_OC5_SetConfig+0x76>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	4a14      	ldr	r2, [pc, #80]	@ (800dfe0 <TIM_OC5_SetConfig+0xc4>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	d109      	bne.n	800dfa6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800df98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	695b      	ldr	r3, [r3, #20]
 800df9e:	021b      	lsls	r3, r3, #8
 800dfa0:	697a      	ldr	r2, [r7, #20]
 800dfa2:	4313      	orrs	r3, r2
 800dfa4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	697a      	ldr	r2, [r7, #20]
 800dfaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	68fa      	ldr	r2, [r7, #12]
 800dfb0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	685a      	ldr	r2, [r3, #4]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	693a      	ldr	r2, [r7, #16]
 800dfbe:	621a      	str	r2, [r3, #32]
}
 800dfc0:	bf00      	nop
 800dfc2:	371c      	adds	r7, #28
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr
 800dfcc:	fffeff8f 	.word	0xfffeff8f
 800dfd0:	40010000 	.word	0x40010000
 800dfd4:	40010400 	.word	0x40010400
 800dfd8:	40014000 	.word	0x40014000
 800dfdc:	40014400 	.word	0x40014400
 800dfe0:	40014800 	.word	0x40014800

0800dfe4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b087      	sub	sp, #28
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6a1b      	ldr	r3, [r3, #32]
 800dff2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6a1b      	ldr	r3, [r3, #32]
 800dff8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e00a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e00c:	68fa      	ldr	r2, [r7, #12]
 800e00e:	4b22      	ldr	r3, [pc, #136]	@ (800e098 <TIM_OC6_SetConfig+0xb4>)
 800e010:	4013      	ands	r3, r2
 800e012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	021b      	lsls	r3, r3, #8
 800e01a:	68fa      	ldr	r2, [r7, #12]
 800e01c:	4313      	orrs	r3, r2
 800e01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	689b      	ldr	r3, [r3, #8]
 800e02c:	051b      	lsls	r3, r3, #20
 800e02e:	693a      	ldr	r2, [r7, #16]
 800e030:	4313      	orrs	r3, r2
 800e032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	4a19      	ldr	r2, [pc, #100]	@ (800e09c <TIM_OC6_SetConfig+0xb8>)
 800e038:	4293      	cmp	r3, r2
 800e03a:	d00f      	beq.n	800e05c <TIM_OC6_SetConfig+0x78>
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	4a18      	ldr	r2, [pc, #96]	@ (800e0a0 <TIM_OC6_SetConfig+0xbc>)
 800e040:	4293      	cmp	r3, r2
 800e042:	d00b      	beq.n	800e05c <TIM_OC6_SetConfig+0x78>
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	4a17      	ldr	r2, [pc, #92]	@ (800e0a4 <TIM_OC6_SetConfig+0xc0>)
 800e048:	4293      	cmp	r3, r2
 800e04a:	d007      	beq.n	800e05c <TIM_OC6_SetConfig+0x78>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	4a16      	ldr	r2, [pc, #88]	@ (800e0a8 <TIM_OC6_SetConfig+0xc4>)
 800e050:	4293      	cmp	r3, r2
 800e052:	d003      	beq.n	800e05c <TIM_OC6_SetConfig+0x78>
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	4a15      	ldr	r2, [pc, #84]	@ (800e0ac <TIM_OC6_SetConfig+0xc8>)
 800e058:	4293      	cmp	r3, r2
 800e05a:	d109      	bne.n	800e070 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e062:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	695b      	ldr	r3, [r3, #20]
 800e068:	029b      	lsls	r3, r3, #10
 800e06a:	697a      	ldr	r2, [r7, #20]
 800e06c:	4313      	orrs	r3, r2
 800e06e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	697a      	ldr	r2, [r7, #20]
 800e074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	68fa      	ldr	r2, [r7, #12]
 800e07a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	685a      	ldr	r2, [r3, #4]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	693a      	ldr	r2, [r7, #16]
 800e088:	621a      	str	r2, [r3, #32]
}
 800e08a:	bf00      	nop
 800e08c:	371c      	adds	r7, #28
 800e08e:	46bd      	mov	sp, r7
 800e090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e094:	4770      	bx	lr
 800e096:	bf00      	nop
 800e098:	feff8fff 	.word	0xfeff8fff
 800e09c:	40010000 	.word	0x40010000
 800e0a0:	40010400 	.word	0x40010400
 800e0a4:	40014000 	.word	0x40014000
 800e0a8:	40014400 	.word	0x40014400
 800e0ac:	40014800 	.word	0x40014800

0800e0b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b087      	sub	sp, #28
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	60f8      	str	r0, [r7, #12]
 800e0b8:	60b9      	str	r1, [r7, #8]
 800e0ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	6a1b      	ldr	r3, [r3, #32]
 800e0c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	6a1b      	ldr	r3, [r3, #32]
 800e0c6:	f023 0201 	bic.w	r2, r3, #1
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	699b      	ldr	r3, [r3, #24]
 800e0d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e0d4:	693b      	ldr	r3, [r7, #16]
 800e0d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e0da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	011b      	lsls	r3, r3, #4
 800e0e0:	693a      	ldr	r2, [r7, #16]
 800e0e2:	4313      	orrs	r3, r2
 800e0e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	f023 030a 	bic.w	r3, r3, #10
 800e0ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e0ee:	697a      	ldr	r2, [r7, #20]
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	4313      	orrs	r3, r2
 800e0f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	693a      	ldr	r2, [r7, #16]
 800e0fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	697a      	ldr	r2, [r7, #20]
 800e100:	621a      	str	r2, [r3, #32]
}
 800e102:	bf00      	nop
 800e104:	371c      	adds	r7, #28
 800e106:	46bd      	mov	sp, r7
 800e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10c:	4770      	bx	lr

0800e10e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e10e:	b480      	push	{r7}
 800e110:	b087      	sub	sp, #28
 800e112:	af00      	add	r7, sp, #0
 800e114:	60f8      	str	r0, [r7, #12]
 800e116:	60b9      	str	r1, [r7, #8]
 800e118:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	6a1b      	ldr	r3, [r3, #32]
 800e11e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	6a1b      	ldr	r3, [r3, #32]
 800e124:	f023 0210 	bic.w	r2, r3, #16
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	699b      	ldr	r3, [r3, #24]
 800e130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e138:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	031b      	lsls	r3, r3, #12
 800e13e:	693a      	ldr	r2, [r7, #16]
 800e140:	4313      	orrs	r3, r2
 800e142:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e14a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	011b      	lsls	r3, r3, #4
 800e150:	697a      	ldr	r2, [r7, #20]
 800e152:	4313      	orrs	r3, r2
 800e154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	693a      	ldr	r2, [r7, #16]
 800e15a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	697a      	ldr	r2, [r7, #20]
 800e160:	621a      	str	r2, [r3, #32]
}
 800e162:	bf00      	nop
 800e164:	371c      	adds	r7, #28
 800e166:	46bd      	mov	sp, r7
 800e168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16c:	4770      	bx	lr
	...

0800e170 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e170:	b480      	push	{r7}
 800e172:	b085      	sub	sp, #20
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	689b      	ldr	r3, [r3, #8]
 800e17e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e180:	68fa      	ldr	r2, [r7, #12]
 800e182:	4b09      	ldr	r3, [pc, #36]	@ (800e1a8 <TIM_ITRx_SetConfig+0x38>)
 800e184:	4013      	ands	r3, r2
 800e186:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e188:	683a      	ldr	r2, [r7, #0]
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	4313      	orrs	r3, r2
 800e18e:	f043 0307 	orr.w	r3, r3, #7
 800e192:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	68fa      	ldr	r2, [r7, #12]
 800e198:	609a      	str	r2, [r3, #8]
}
 800e19a:	bf00      	nop
 800e19c:	3714      	adds	r7, #20
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
 800e1a6:	bf00      	nop
 800e1a8:	ffcfff8f 	.word	0xffcfff8f

0800e1ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b087      	sub	sp, #28
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	60b9      	str	r1, [r7, #8]
 800e1b6:	607a      	str	r2, [r7, #4]
 800e1b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	689b      	ldr	r3, [r3, #8]
 800e1be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e1c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	021a      	lsls	r2, r3, #8
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	431a      	orrs	r2, r3
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	4313      	orrs	r3, r2
 800e1d4:	697a      	ldr	r2, [r7, #20]
 800e1d6:	4313      	orrs	r3, r2
 800e1d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	697a      	ldr	r2, [r7, #20]
 800e1de:	609a      	str	r2, [r3, #8]
}
 800e1e0:	bf00      	nop
 800e1e2:	371c      	adds	r7, #28
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr

0800e1ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b085      	sub	sp, #20
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d101      	bne.n	800e204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e200:	2302      	movs	r3, #2
 800e202:	e077      	b.n	800e2f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2201      	movs	r2, #1
 800e208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2202      	movs	r2, #2
 800e210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	689b      	ldr	r3, [r3, #8]
 800e222:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4a35      	ldr	r2, [pc, #212]	@ (800e300 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d004      	beq.n	800e238 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	4a34      	ldr	r2, [pc, #208]	@ (800e304 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d108      	bne.n	800e24a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e23e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	68fa      	ldr	r2, [r7, #12]
 800e246:	4313      	orrs	r3, r2
 800e248:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e250:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	68fa      	ldr	r2, [r7, #12]
 800e258:	4313      	orrs	r3, r2
 800e25a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	68fa      	ldr	r2, [r7, #12]
 800e262:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4a25      	ldr	r2, [pc, #148]	@ (800e300 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e26a:	4293      	cmp	r3, r2
 800e26c:	d02c      	beq.n	800e2c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e276:	d027      	beq.n	800e2c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4a22      	ldr	r2, [pc, #136]	@ (800e308 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d022      	beq.n	800e2c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	4a21      	ldr	r2, [pc, #132]	@ (800e30c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e288:	4293      	cmp	r3, r2
 800e28a:	d01d      	beq.n	800e2c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4a1f      	ldr	r2, [pc, #124]	@ (800e310 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e292:	4293      	cmp	r3, r2
 800e294:	d018      	beq.n	800e2c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	4a1a      	ldr	r2, [pc, #104]	@ (800e304 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d013      	beq.n	800e2c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	4a1b      	ldr	r2, [pc, #108]	@ (800e314 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d00e      	beq.n	800e2c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	4a1a      	ldr	r2, [pc, #104]	@ (800e318 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	d009      	beq.n	800e2c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	4a18      	ldr	r2, [pc, #96]	@ (800e31c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	d004      	beq.n	800e2c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	4a17      	ldr	r2, [pc, #92]	@ (800e320 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d10c      	bne.n	800e2e2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e2ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	689b      	ldr	r3, [r3, #8]
 800e2d4:	68ba      	ldr	r2, [r7, #8]
 800e2d6:	4313      	orrs	r3, r2
 800e2d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	68ba      	ldr	r2, [r7, #8]
 800e2e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e2f2:	2300      	movs	r3, #0
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3714      	adds	r7, #20
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr
 800e300:	40010000 	.word	0x40010000
 800e304:	40010400 	.word	0x40010400
 800e308:	40000400 	.word	0x40000400
 800e30c:	40000800 	.word	0x40000800
 800e310:	40000c00 	.word	0x40000c00
 800e314:	40001800 	.word	0x40001800
 800e318:	40014000 	.word	0x40014000
 800e31c:	4000e000 	.word	0x4000e000
 800e320:	4000e400 	.word	0x4000e400

0800e324 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e324:	b480      	push	{r7}
 800e326:	b085      	sub	sp, #20
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e32e:	2300      	movs	r3, #0
 800e330:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e338:	2b01      	cmp	r3, #1
 800e33a:	d101      	bne.n	800e340 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e33c:	2302      	movs	r3, #2
 800e33e:	e073      	b.n	800e428 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2201      	movs	r2, #1
 800e344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	68db      	ldr	r3, [r3, #12]
 800e352:	4313      	orrs	r3, r2
 800e354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	689b      	ldr	r3, [r3, #8]
 800e360:	4313      	orrs	r3, r2
 800e362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	4313      	orrs	r3, r2
 800e370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4313      	orrs	r3, r2
 800e37e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	691b      	ldr	r3, [r3, #16]
 800e38a:	4313      	orrs	r3, r2
 800e38c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	695b      	ldr	r3, [r3, #20]
 800e398:	4313      	orrs	r3, r2
 800e39a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3a6:	4313      	orrs	r3, r2
 800e3a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	699b      	ldr	r3, [r3, #24]
 800e3b4:	041b      	lsls	r3, r3, #16
 800e3b6:	4313      	orrs	r3, r2
 800e3b8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	69db      	ldr	r3, [r3, #28]
 800e3c4:	4313      	orrs	r3, r2
 800e3c6:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4a19      	ldr	r2, [pc, #100]	@ (800e434 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d004      	beq.n	800e3dc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	4a18      	ldr	r2, [pc, #96]	@ (800e438 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d11c      	bne.n	800e416 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3e6:	051b      	lsls	r3, r3, #20
 800e3e8:	4313      	orrs	r3, r2
 800e3ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	6a1b      	ldr	r3, [r3, #32]
 800e3f6:	4313      	orrs	r3, r2
 800e3f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e404:	4313      	orrs	r3, r2
 800e406:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e412:	4313      	orrs	r3, r2
 800e414:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	68fa      	ldr	r2, [r7, #12]
 800e41c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2200      	movs	r2, #0
 800e422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e426:	2300      	movs	r3, #0
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3714      	adds	r7, #20
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr
 800e434:	40010000 	.word	0x40010000
 800e438:	40010400 	.word	0x40010400

0800e43c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e43c:	b480      	push	{r7}
 800e43e:	b083      	sub	sp, #12
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e444:	bf00      	nop
 800e446:	370c      	adds	r7, #12
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e450:	b480      	push	{r7}
 800e452:	b083      	sub	sp, #12
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e458:	bf00      	nop
 800e45a:	370c      	adds	r7, #12
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr

0800e464 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e464:	b480      	push	{r7}
 800e466:	b083      	sub	sp, #12
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e46c:	bf00      	nop
 800e46e:	370c      	adds	r7, #12
 800e470:	46bd      	mov	sp, r7
 800e472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e476:	4770      	bx	lr

0800e478 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d101      	bne.n	800e48a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e486:	2301      	movs	r3, #1
 800e488:	e042      	b.n	800e510 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e490:	2b00      	cmp	r3, #0
 800e492:	d106      	bne.n	800e4a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2200      	movs	r2, #0
 800e498:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f7f3 fc51 	bl	8001d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2224      	movs	r2, #36	@ 0x24
 800e4a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f022 0201 	bic.w	r2, r2, #1
 800e4b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d002      	beq.n	800e4c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f001 fa8a 	bl	800f9dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f000 fc1b 	bl	800ed04 <UART_SetConfig>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	d101      	bne.n	800e4d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	e01b      	b.n	800e510 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	685a      	ldr	r2, [r3, #4]
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e4e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	689a      	ldr	r2, [r3, #8]
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e4f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	681a      	ldr	r2, [r3, #0]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f042 0201 	orr.w	r2, r2, #1
 800e506:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f001 fb09 	bl	800fb20 <UART_CheckIdleState>
 800e50e:	4603      	mov	r3, r0
}
 800e510:	4618      	mov	r0, r3
 800e512:	3708      	adds	r7, #8
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}

0800e518 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b0ba      	sub	sp, #232	@ 0xe8
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	69db      	ldr	r3, [r3, #28]
 800e526:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	689b      	ldr	r3, [r3, #8]
 800e53a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e53e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e542:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e546:	4013      	ands	r3, r2
 800e548:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e54c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e550:	2b00      	cmp	r3, #0
 800e552:	d11b      	bne.n	800e58c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e558:	f003 0320 	and.w	r3, r3, #32
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d015      	beq.n	800e58c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e564:	f003 0320 	and.w	r3, r3, #32
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d105      	bne.n	800e578 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e56c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e570:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e574:	2b00      	cmp	r3, #0
 800e576:	d009      	beq.n	800e58c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	f000 8393 	beq.w	800eca8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	4798      	blx	r3
      }
      return;
 800e58a:	e38d      	b.n	800eca8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e58c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e590:	2b00      	cmp	r3, #0
 800e592:	f000 8123 	beq.w	800e7dc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e596:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e59a:	4b8d      	ldr	r3, [pc, #564]	@ (800e7d0 <HAL_UART_IRQHandler+0x2b8>)
 800e59c:	4013      	ands	r3, r2
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d106      	bne.n	800e5b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e5a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e5a6:	4b8b      	ldr	r3, [pc, #556]	@ (800e7d4 <HAL_UART_IRQHandler+0x2bc>)
 800e5a8:	4013      	ands	r3, r2
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	f000 8116 	beq.w	800e7dc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e5b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5b4:	f003 0301 	and.w	r3, r3, #1
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d011      	beq.n	800e5e0 <HAL_UART_IRQHandler+0xc8>
 800e5bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e5c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00b      	beq.n	800e5e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e5d6:	f043 0201 	orr.w	r2, r3, #1
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e5e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e5e4:	f003 0302 	and.w	r3, r3, #2
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d011      	beq.n	800e610 <HAL_UART_IRQHandler+0xf8>
 800e5ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e5f0:	f003 0301 	and.w	r3, r3, #1
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d00b      	beq.n	800e610 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	2202      	movs	r2, #2
 800e5fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e606:	f043 0204 	orr.w	r2, r3, #4
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e614:	f003 0304 	and.w	r3, r3, #4
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d011      	beq.n	800e640 <HAL_UART_IRQHandler+0x128>
 800e61c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e620:	f003 0301 	and.w	r3, r3, #1
 800e624:	2b00      	cmp	r3, #0
 800e626:	d00b      	beq.n	800e640 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	2204      	movs	r2, #4
 800e62e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e636:	f043 0202 	orr.w	r2, r3, #2
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e644:	f003 0308 	and.w	r3, r3, #8
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d017      	beq.n	800e67c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e64c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e650:	f003 0320 	and.w	r3, r3, #32
 800e654:	2b00      	cmp	r3, #0
 800e656:	d105      	bne.n	800e664 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e658:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e65c:	4b5c      	ldr	r3, [pc, #368]	@ (800e7d0 <HAL_UART_IRQHandler+0x2b8>)
 800e65e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e660:	2b00      	cmp	r3, #0
 800e662:	d00b      	beq.n	800e67c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	2208      	movs	r2, #8
 800e66a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e672:	f043 0208 	orr.w	r2, r3, #8
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e67c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e680:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e684:	2b00      	cmp	r3, #0
 800e686:	d012      	beq.n	800e6ae <HAL_UART_IRQHandler+0x196>
 800e688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e68c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e690:	2b00      	cmp	r3, #0
 800e692:	d00c      	beq.n	800e6ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e69c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6a4:	f043 0220 	orr.w	r2, r3, #32
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	f000 82f9 	beq.w	800ecac <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e6ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e6be:	f003 0320 	and.w	r3, r3, #32
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d013      	beq.n	800e6ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e6c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e6ca:	f003 0320 	and.w	r3, r3, #32
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d105      	bne.n	800e6de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e6d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e6d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d007      	beq.n	800e6ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d003      	beq.n	800e6ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	689b      	ldr	r3, [r3, #8]
 800e6fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e702:	2b40      	cmp	r3, #64	@ 0x40
 800e704:	d005      	beq.n	800e712 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e70a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d054      	beq.n	800e7bc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f001 fb1c 	bl	800fd50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	689b      	ldr	r3, [r3, #8]
 800e71e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e722:	2b40      	cmp	r3, #64	@ 0x40
 800e724:	d146      	bne.n	800e7b4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	3308      	adds	r3, #8
 800e72c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e730:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e734:	e853 3f00 	ldrex	r3, [r3]
 800e738:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e73c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e744:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	3308      	adds	r3, #8
 800e74e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e752:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e756:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e75a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e75e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e762:	e841 2300 	strex	r3, r2, [r1]
 800e766:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e76a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d1d9      	bne.n	800e726 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d017      	beq.n	800e7ac <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e782:	4a15      	ldr	r2, [pc, #84]	@ (800e7d8 <HAL_UART_IRQHandler+0x2c0>)
 800e784:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7f7 fc09 	bl	8005fa4 <HAL_DMA_Abort_IT>
 800e792:	4603      	mov	r3, r0
 800e794:	2b00      	cmp	r3, #0
 800e796:	d019      	beq.n	800e7cc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e79e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e7a0:	687a      	ldr	r2, [r7, #4]
 800e7a2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e7a6:	4610      	mov	r0, r2
 800e7a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7aa:	e00f      	b.n	800e7cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f000 fa93 	bl	800ecd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7b2:	e00b      	b.n	800e7cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f000 fa8f 	bl	800ecd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7ba:	e007      	b.n	800e7cc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f000 fa8b 	bl	800ecd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e7ca:	e26f      	b.n	800ecac <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7cc:	bf00      	nop
    return;
 800e7ce:	e26d      	b.n	800ecac <HAL_UART_IRQHandler+0x794>
 800e7d0:	10000001 	.word	0x10000001
 800e7d4:	04000120 	.word	0x04000120
 800e7d8:	0800fe1d 	.word	0x0800fe1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	f040 8203 	bne.w	800ebec <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e7e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7ea:	f003 0310 	and.w	r3, r3, #16
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	f000 81fc 	beq.w	800ebec <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e7f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e7f8:	f003 0310 	and.w	r3, r3, #16
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	f000 81f5 	beq.w	800ebec <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	2210      	movs	r2, #16
 800e808:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e814:	2b40      	cmp	r3, #64	@ 0x40
 800e816:	f040 816d 	bne.w	800eaf4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	4aa4      	ldr	r2, [pc, #656]	@ (800eab4 <HAL_UART_IRQHandler+0x59c>)
 800e824:	4293      	cmp	r3, r2
 800e826:	d068      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	4aa1      	ldr	r2, [pc, #644]	@ (800eab8 <HAL_UART_IRQHandler+0x5a0>)
 800e832:	4293      	cmp	r3, r2
 800e834:	d061      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	4a9f      	ldr	r2, [pc, #636]	@ (800eabc <HAL_UART_IRQHandler+0x5a4>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d05a      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4a9c      	ldr	r2, [pc, #624]	@ (800eac0 <HAL_UART_IRQHandler+0x5a8>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d053      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	4a9a      	ldr	r2, [pc, #616]	@ (800eac4 <HAL_UART_IRQHandler+0x5ac>)
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d04c      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	4a97      	ldr	r2, [pc, #604]	@ (800eac8 <HAL_UART_IRQHandler+0x5b0>)
 800e86a:	4293      	cmp	r3, r2
 800e86c:	d045      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	4a95      	ldr	r2, [pc, #596]	@ (800eacc <HAL_UART_IRQHandler+0x5b4>)
 800e878:	4293      	cmp	r3, r2
 800e87a:	d03e      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4a92      	ldr	r2, [pc, #584]	@ (800ead0 <HAL_UART_IRQHandler+0x5b8>)
 800e886:	4293      	cmp	r3, r2
 800e888:	d037      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	4a90      	ldr	r2, [pc, #576]	@ (800ead4 <HAL_UART_IRQHandler+0x5bc>)
 800e894:	4293      	cmp	r3, r2
 800e896:	d030      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	4a8d      	ldr	r2, [pc, #564]	@ (800ead8 <HAL_UART_IRQHandler+0x5c0>)
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d029      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	4a8b      	ldr	r2, [pc, #556]	@ (800eadc <HAL_UART_IRQHandler+0x5c4>)
 800e8b0:	4293      	cmp	r3, r2
 800e8b2:	d022      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	4a88      	ldr	r2, [pc, #544]	@ (800eae0 <HAL_UART_IRQHandler+0x5c8>)
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	d01b      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	4a86      	ldr	r2, [pc, #536]	@ (800eae4 <HAL_UART_IRQHandler+0x5cc>)
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	d014      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4a83      	ldr	r2, [pc, #524]	@ (800eae8 <HAL_UART_IRQHandler+0x5d0>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d00d      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	4a81      	ldr	r2, [pc, #516]	@ (800eaec <HAL_UART_IRQHandler+0x5d4>)
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d006      	beq.n	800e8fa <HAL_UART_IRQHandler+0x3e2>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	4a7e      	ldr	r2, [pc, #504]	@ (800eaf0 <HAL_UART_IRQHandler+0x5d8>)
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d106      	bne.n	800e908 <HAL_UART_IRQHandler+0x3f0>
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	b29b      	uxth	r3, r3
 800e906:	e005      	b.n	800e914 <HAL_UART_IRQHandler+0x3fc>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	685b      	ldr	r3, [r3, #4]
 800e912:	b29b      	uxth	r3, r3
 800e914:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e918:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	f000 80ad 	beq.w	800ea7c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e928:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e92c:	429a      	cmp	r2, r3
 800e92e:	f080 80a5 	bcs.w	800ea7c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e938:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e942:	69db      	ldr	r3, [r3, #28]
 800e944:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e948:	f000 8087 	beq.w	800ea5a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e954:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e958:	e853 3f00 	ldrex	r3, [r3]
 800e95c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e960:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e964:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e968:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	461a      	mov	r2, r3
 800e972:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e976:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e97a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e97e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e982:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e986:	e841 2300 	strex	r3, r2, [r1]
 800e98a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e98e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e992:	2b00      	cmp	r3, #0
 800e994:	d1da      	bne.n	800e94c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	3308      	adds	r3, #8
 800e99c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e99e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e9a0:	e853 3f00 	ldrex	r3, [r3]
 800e9a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e9a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e9a8:	f023 0301 	bic.w	r3, r3, #1
 800e9ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	3308      	adds	r3, #8
 800e9b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e9ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e9be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e9c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e9c6:	e841 2300 	strex	r3, r2, [r1]
 800e9ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e9cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d1e1      	bne.n	800e996 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	3308      	adds	r3, #8
 800e9d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e9dc:	e853 3f00 	ldrex	r3, [r3]
 800e9e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e9e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e9e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e9e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	3308      	adds	r3, #8
 800e9f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e9f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e9f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e9fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e9fe:	e841 2300 	strex	r3, r2, [r1]
 800ea02:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ea04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d1e3      	bne.n	800e9d2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2220      	movs	r2, #32
 800ea0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2200      	movs	r2, #0
 800ea16:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea20:	e853 3f00 	ldrex	r3, [r3]
 800ea24:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ea26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea28:	f023 0310 	bic.w	r3, r3, #16
 800ea2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	461a      	mov	r2, r3
 800ea36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ea3c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ea40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ea42:	e841 2300 	strex	r3, r2, [r1]
 800ea46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ea48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d1e4      	bne.n	800ea18 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7f6 ff87 	bl	8005968 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2202      	movs	r2, #2
 800ea5e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	1ad3      	subs	r3, r2, r3
 800ea70:	b29b      	uxth	r3, r3
 800ea72:	4619      	mov	r1, r3
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f000 f939 	bl	800ecec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ea7a:	e119      	b.n	800ecb0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ea82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ea86:	429a      	cmp	r2, r3
 800ea88:	f040 8112 	bne.w	800ecb0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ea92:	69db      	ldr	r3, [r3, #28]
 800ea94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea98:	f040 810a 	bne.w	800ecb0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2202      	movs	r2, #2
 800eaa0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f000 f91e 	bl	800ecec <HAL_UARTEx_RxEventCallback>
      return;
 800eab0:	e0fe      	b.n	800ecb0 <HAL_UART_IRQHandler+0x798>
 800eab2:	bf00      	nop
 800eab4:	40020010 	.word	0x40020010
 800eab8:	40020028 	.word	0x40020028
 800eabc:	40020040 	.word	0x40020040
 800eac0:	40020058 	.word	0x40020058
 800eac4:	40020070 	.word	0x40020070
 800eac8:	40020088 	.word	0x40020088
 800eacc:	400200a0 	.word	0x400200a0
 800ead0:	400200b8 	.word	0x400200b8
 800ead4:	40020410 	.word	0x40020410
 800ead8:	40020428 	.word	0x40020428
 800eadc:	40020440 	.word	0x40020440
 800eae0:	40020458 	.word	0x40020458
 800eae4:	40020470 	.word	0x40020470
 800eae8:	40020488 	.word	0x40020488
 800eaec:	400204a0 	.word	0x400204a0
 800eaf0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eb00:	b29b      	uxth	r3, r3
 800eb02:	1ad3      	subs	r3, r2, r3
 800eb04:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eb0e:	b29b      	uxth	r3, r3
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	f000 80cf 	beq.w	800ecb4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800eb16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	f000 80ca 	beq.w	800ecb4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb28:	e853 3f00 	ldrex	r3, [r3]
 800eb2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800eb2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eb34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	461a      	mov	r2, r3
 800eb3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800eb42:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb44:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eb48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eb4a:	e841 2300 	strex	r3, r2, [r1]
 800eb4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eb50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d1e4      	bne.n	800eb20 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	3308      	adds	r3, #8
 800eb5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb60:	e853 3f00 	ldrex	r3, [r3]
 800eb64:	623b      	str	r3, [r7, #32]
   return(result);
 800eb66:	6a3a      	ldr	r2, [r7, #32]
 800eb68:	4b55      	ldr	r3, [pc, #340]	@ (800ecc0 <HAL_UART_IRQHandler+0x7a8>)
 800eb6a:	4013      	ands	r3, r2
 800eb6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	3308      	adds	r3, #8
 800eb76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800eb7a:	633a      	str	r2, [r7, #48]	@ 0x30
 800eb7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eb80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb82:	e841 2300 	strex	r3, r2, [r1]
 800eb86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800eb88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d1e3      	bne.n	800eb56 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2220      	movs	r2, #32
 800eb92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2200      	movs	r2, #0
 800eb9a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eba8:	693b      	ldr	r3, [r7, #16]
 800ebaa:	e853 3f00 	ldrex	r3, [r3]
 800ebae:	60fb      	str	r3, [r7, #12]
   return(result);
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f023 0310 	bic.w	r3, r3, #16
 800ebb6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ebc4:	61fb      	str	r3, [r7, #28]
 800ebc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebc8:	69b9      	ldr	r1, [r7, #24]
 800ebca:	69fa      	ldr	r2, [r7, #28]
 800ebcc:	e841 2300 	strex	r3, r2, [r1]
 800ebd0:	617b      	str	r3, [r7, #20]
   return(result);
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d1e4      	bne.n	800eba2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2202      	movs	r2, #2
 800ebdc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ebde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ebe2:	4619      	mov	r1, r3
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f000 f881 	bl	800ecec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ebea:	e063      	b.n	800ecb4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ebec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ebf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d00e      	beq.n	800ec16 <HAL_UART_IRQHandler+0x6fe>
 800ebf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ebfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d008      	beq.n	800ec16 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ec0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f001 f941 	bl	800fe96 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec14:	e051      	b.n	800ecba <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ec16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d014      	beq.n	800ec4c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ec22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d105      	bne.n	800ec3a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ec2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ec32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d008      	beq.n	800ec4c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d03a      	beq.n	800ecb8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	4798      	blx	r3
    }
    return;
 800ec4a:	e035      	b.n	800ecb8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ec4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d009      	beq.n	800ec6c <HAL_UART_IRQHandler+0x754>
 800ec58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d003      	beq.n	800ec6c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f001 f8eb 	bl	800fe40 <UART_EndTransmit_IT>
    return;
 800ec6a:	e026      	b.n	800ecba <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ec6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d009      	beq.n	800ec8c <HAL_UART_IRQHandler+0x774>
 800ec78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec7c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d003      	beq.n	800ec8c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f001 f91a 	bl	800febe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ec8a:	e016      	b.n	800ecba <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ec8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d010      	beq.n	800ecba <HAL_UART_IRQHandler+0x7a2>
 800ec98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	da0c      	bge.n	800ecba <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f001 f902 	bl	800feaa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eca6:	e008      	b.n	800ecba <HAL_UART_IRQHandler+0x7a2>
      return;
 800eca8:	bf00      	nop
 800ecaa:	e006      	b.n	800ecba <HAL_UART_IRQHandler+0x7a2>
    return;
 800ecac:	bf00      	nop
 800ecae:	e004      	b.n	800ecba <HAL_UART_IRQHandler+0x7a2>
      return;
 800ecb0:	bf00      	nop
 800ecb2:	e002      	b.n	800ecba <HAL_UART_IRQHandler+0x7a2>
      return;
 800ecb4:	bf00      	nop
 800ecb6:	e000      	b.n	800ecba <HAL_UART_IRQHandler+0x7a2>
    return;
 800ecb8:	bf00      	nop
  }
}
 800ecba:	37e8      	adds	r7, #232	@ 0xe8
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}
 800ecc0:	effffffe 	.word	0xeffffffe

0800ecc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b083      	sub	sp, #12
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800eccc:	bf00      	nop
 800ecce:	370c      	adds	r7, #12
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr

0800ecd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b083      	sub	sp, #12
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ece0:	bf00      	nop
 800ece2:	370c      	adds	r7, #12
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr

0800ecec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ecec:	b480      	push	{r7}
 800ecee:	b083      	sub	sp, #12
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ecf8:	bf00      	nop
 800ecfa:	370c      	adds	r7, #12
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr

0800ed04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ed04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ed08:	b092      	sub	sp, #72	@ 0x48
 800ed0a:	af00      	add	r7, sp, #0
 800ed0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	689a      	ldr	r2, [r3, #8]
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	691b      	ldr	r3, [r3, #16]
 800ed1c:	431a      	orrs	r2, r3
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	695b      	ldr	r3, [r3, #20]
 800ed22:	431a      	orrs	r2, r3
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	69db      	ldr	r3, [r3, #28]
 800ed28:	4313      	orrs	r3, r2
 800ed2a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	4bbe      	ldr	r3, [pc, #760]	@ (800f02c <UART_SetConfig+0x328>)
 800ed34:	4013      	ands	r3, r2
 800ed36:	697a      	ldr	r2, [r7, #20]
 800ed38:	6812      	ldr	r2, [r2, #0]
 800ed3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ed3c:	430b      	orrs	r3, r1
 800ed3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	685b      	ldr	r3, [r3, #4]
 800ed46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	68da      	ldr	r2, [r3, #12]
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	430a      	orrs	r2, r1
 800ed54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	699b      	ldr	r3, [r3, #24]
 800ed5a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	4ab3      	ldr	r2, [pc, #716]	@ (800f030 <UART_SetConfig+0x32c>)
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d004      	beq.n	800ed70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	6a1b      	ldr	r3, [r3, #32]
 800ed6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	689a      	ldr	r2, [r3, #8]
 800ed76:	4baf      	ldr	r3, [pc, #700]	@ (800f034 <UART_SetConfig+0x330>)
 800ed78:	4013      	ands	r3, r2
 800ed7a:	697a      	ldr	r2, [r7, #20]
 800ed7c:	6812      	ldr	r2, [r2, #0]
 800ed7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ed80:	430b      	orrs	r3, r1
 800ed82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed8a:	f023 010f 	bic.w	r1, r3, #15
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	430a      	orrs	r2, r1
 800ed98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	4aa6      	ldr	r2, [pc, #664]	@ (800f038 <UART_SetConfig+0x334>)
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d177      	bne.n	800ee94 <UART_SetConfig+0x190>
 800eda4:	4ba5      	ldr	r3, [pc, #660]	@ (800f03c <UART_SetConfig+0x338>)
 800eda6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eda8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800edac:	2b28      	cmp	r3, #40	@ 0x28
 800edae:	d86d      	bhi.n	800ee8c <UART_SetConfig+0x188>
 800edb0:	a201      	add	r2, pc, #4	@ (adr r2, 800edb8 <UART_SetConfig+0xb4>)
 800edb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edb6:	bf00      	nop
 800edb8:	0800ee5d 	.word	0x0800ee5d
 800edbc:	0800ee8d 	.word	0x0800ee8d
 800edc0:	0800ee8d 	.word	0x0800ee8d
 800edc4:	0800ee8d 	.word	0x0800ee8d
 800edc8:	0800ee8d 	.word	0x0800ee8d
 800edcc:	0800ee8d 	.word	0x0800ee8d
 800edd0:	0800ee8d 	.word	0x0800ee8d
 800edd4:	0800ee8d 	.word	0x0800ee8d
 800edd8:	0800ee65 	.word	0x0800ee65
 800eddc:	0800ee8d 	.word	0x0800ee8d
 800ede0:	0800ee8d 	.word	0x0800ee8d
 800ede4:	0800ee8d 	.word	0x0800ee8d
 800ede8:	0800ee8d 	.word	0x0800ee8d
 800edec:	0800ee8d 	.word	0x0800ee8d
 800edf0:	0800ee8d 	.word	0x0800ee8d
 800edf4:	0800ee8d 	.word	0x0800ee8d
 800edf8:	0800ee6d 	.word	0x0800ee6d
 800edfc:	0800ee8d 	.word	0x0800ee8d
 800ee00:	0800ee8d 	.word	0x0800ee8d
 800ee04:	0800ee8d 	.word	0x0800ee8d
 800ee08:	0800ee8d 	.word	0x0800ee8d
 800ee0c:	0800ee8d 	.word	0x0800ee8d
 800ee10:	0800ee8d 	.word	0x0800ee8d
 800ee14:	0800ee8d 	.word	0x0800ee8d
 800ee18:	0800ee75 	.word	0x0800ee75
 800ee1c:	0800ee8d 	.word	0x0800ee8d
 800ee20:	0800ee8d 	.word	0x0800ee8d
 800ee24:	0800ee8d 	.word	0x0800ee8d
 800ee28:	0800ee8d 	.word	0x0800ee8d
 800ee2c:	0800ee8d 	.word	0x0800ee8d
 800ee30:	0800ee8d 	.word	0x0800ee8d
 800ee34:	0800ee8d 	.word	0x0800ee8d
 800ee38:	0800ee7d 	.word	0x0800ee7d
 800ee3c:	0800ee8d 	.word	0x0800ee8d
 800ee40:	0800ee8d 	.word	0x0800ee8d
 800ee44:	0800ee8d 	.word	0x0800ee8d
 800ee48:	0800ee8d 	.word	0x0800ee8d
 800ee4c:	0800ee8d 	.word	0x0800ee8d
 800ee50:	0800ee8d 	.word	0x0800ee8d
 800ee54:	0800ee8d 	.word	0x0800ee8d
 800ee58:	0800ee85 	.word	0x0800ee85
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee62:	e326      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800ee64:	2304      	movs	r3, #4
 800ee66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee6a:	e322      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800ee6c:	2308      	movs	r3, #8
 800ee6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee72:	e31e      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800ee74:	2310      	movs	r3, #16
 800ee76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee7a:	e31a      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800ee7c:	2320      	movs	r3, #32
 800ee7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee82:	e316      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800ee84:	2340      	movs	r3, #64	@ 0x40
 800ee86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee8a:	e312      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800ee8c:	2380      	movs	r3, #128	@ 0x80
 800ee8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee92:	e30e      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	4a69      	ldr	r2, [pc, #420]	@ (800f040 <UART_SetConfig+0x33c>)
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d130      	bne.n	800ef00 <UART_SetConfig+0x1fc>
 800ee9e:	4b67      	ldr	r3, [pc, #412]	@ (800f03c <UART_SetConfig+0x338>)
 800eea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eea2:	f003 0307 	and.w	r3, r3, #7
 800eea6:	2b05      	cmp	r3, #5
 800eea8:	d826      	bhi.n	800eef8 <UART_SetConfig+0x1f4>
 800eeaa:	a201      	add	r2, pc, #4	@ (adr r2, 800eeb0 <UART_SetConfig+0x1ac>)
 800eeac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb0:	0800eec9 	.word	0x0800eec9
 800eeb4:	0800eed1 	.word	0x0800eed1
 800eeb8:	0800eed9 	.word	0x0800eed9
 800eebc:	0800eee1 	.word	0x0800eee1
 800eec0:	0800eee9 	.word	0x0800eee9
 800eec4:	0800eef1 	.word	0x0800eef1
 800eec8:	2300      	movs	r3, #0
 800eeca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eece:	e2f0      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800eed0:	2304      	movs	r3, #4
 800eed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eed6:	e2ec      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800eed8:	2308      	movs	r3, #8
 800eeda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eede:	e2e8      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800eee0:	2310      	movs	r3, #16
 800eee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eee6:	e2e4      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800eee8:	2320      	movs	r3, #32
 800eeea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eeee:	e2e0      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800eef0:	2340      	movs	r3, #64	@ 0x40
 800eef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eef6:	e2dc      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800eef8:	2380      	movs	r3, #128	@ 0x80
 800eefa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eefe:	e2d8      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a4f      	ldr	r2, [pc, #316]	@ (800f044 <UART_SetConfig+0x340>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d130      	bne.n	800ef6c <UART_SetConfig+0x268>
 800ef0a:	4b4c      	ldr	r3, [pc, #304]	@ (800f03c <UART_SetConfig+0x338>)
 800ef0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef0e:	f003 0307 	and.w	r3, r3, #7
 800ef12:	2b05      	cmp	r3, #5
 800ef14:	d826      	bhi.n	800ef64 <UART_SetConfig+0x260>
 800ef16:	a201      	add	r2, pc, #4	@ (adr r2, 800ef1c <UART_SetConfig+0x218>)
 800ef18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef1c:	0800ef35 	.word	0x0800ef35
 800ef20:	0800ef3d 	.word	0x0800ef3d
 800ef24:	0800ef45 	.word	0x0800ef45
 800ef28:	0800ef4d 	.word	0x0800ef4d
 800ef2c:	0800ef55 	.word	0x0800ef55
 800ef30:	0800ef5d 	.word	0x0800ef5d
 800ef34:	2300      	movs	r3, #0
 800ef36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef3a:	e2ba      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800ef3c:	2304      	movs	r3, #4
 800ef3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef42:	e2b6      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800ef44:	2308      	movs	r3, #8
 800ef46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef4a:	e2b2      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800ef4c:	2310      	movs	r3, #16
 800ef4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef52:	e2ae      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800ef54:	2320      	movs	r3, #32
 800ef56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef5a:	e2aa      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800ef5c:	2340      	movs	r3, #64	@ 0x40
 800ef5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef62:	e2a6      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800ef64:	2380      	movs	r3, #128	@ 0x80
 800ef66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef6a:	e2a2      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800ef6c:	697b      	ldr	r3, [r7, #20]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4a35      	ldr	r2, [pc, #212]	@ (800f048 <UART_SetConfig+0x344>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d130      	bne.n	800efd8 <UART_SetConfig+0x2d4>
 800ef76:	4b31      	ldr	r3, [pc, #196]	@ (800f03c <UART_SetConfig+0x338>)
 800ef78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef7a:	f003 0307 	and.w	r3, r3, #7
 800ef7e:	2b05      	cmp	r3, #5
 800ef80:	d826      	bhi.n	800efd0 <UART_SetConfig+0x2cc>
 800ef82:	a201      	add	r2, pc, #4	@ (adr r2, 800ef88 <UART_SetConfig+0x284>)
 800ef84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef88:	0800efa1 	.word	0x0800efa1
 800ef8c:	0800efa9 	.word	0x0800efa9
 800ef90:	0800efb1 	.word	0x0800efb1
 800ef94:	0800efb9 	.word	0x0800efb9
 800ef98:	0800efc1 	.word	0x0800efc1
 800ef9c:	0800efc9 	.word	0x0800efc9
 800efa0:	2300      	movs	r3, #0
 800efa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efa6:	e284      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800efa8:	2304      	movs	r3, #4
 800efaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efae:	e280      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800efb0:	2308      	movs	r3, #8
 800efb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efb6:	e27c      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800efb8:	2310      	movs	r3, #16
 800efba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efbe:	e278      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800efc0:	2320      	movs	r3, #32
 800efc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efc6:	e274      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800efc8:	2340      	movs	r3, #64	@ 0x40
 800efca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efce:	e270      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800efd0:	2380      	movs	r3, #128	@ 0x80
 800efd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800efd6:	e26c      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	4a1b      	ldr	r2, [pc, #108]	@ (800f04c <UART_SetConfig+0x348>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	d142      	bne.n	800f068 <UART_SetConfig+0x364>
 800efe2:	4b16      	ldr	r3, [pc, #88]	@ (800f03c <UART_SetConfig+0x338>)
 800efe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efe6:	f003 0307 	and.w	r3, r3, #7
 800efea:	2b05      	cmp	r3, #5
 800efec:	d838      	bhi.n	800f060 <UART_SetConfig+0x35c>
 800efee:	a201      	add	r2, pc, #4	@ (adr r2, 800eff4 <UART_SetConfig+0x2f0>)
 800eff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eff4:	0800f00d 	.word	0x0800f00d
 800eff8:	0800f015 	.word	0x0800f015
 800effc:	0800f01d 	.word	0x0800f01d
 800f000:	0800f025 	.word	0x0800f025
 800f004:	0800f051 	.word	0x0800f051
 800f008:	0800f059 	.word	0x0800f059
 800f00c:	2300      	movs	r3, #0
 800f00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f012:	e24e      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f014:	2304      	movs	r3, #4
 800f016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f01a:	e24a      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f01c:	2308      	movs	r3, #8
 800f01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f022:	e246      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f024:	2310      	movs	r3, #16
 800f026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f02a:	e242      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f02c:	cfff69f3 	.word	0xcfff69f3
 800f030:	58000c00 	.word	0x58000c00
 800f034:	11fff4ff 	.word	0x11fff4ff
 800f038:	40011000 	.word	0x40011000
 800f03c:	58024400 	.word	0x58024400
 800f040:	40004400 	.word	0x40004400
 800f044:	40004800 	.word	0x40004800
 800f048:	40004c00 	.word	0x40004c00
 800f04c:	40005000 	.word	0x40005000
 800f050:	2320      	movs	r3, #32
 800f052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f056:	e22c      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f058:	2340      	movs	r3, #64	@ 0x40
 800f05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f05e:	e228      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f060:	2380      	movs	r3, #128	@ 0x80
 800f062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f066:	e224      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	4ab1      	ldr	r2, [pc, #708]	@ (800f334 <UART_SetConfig+0x630>)
 800f06e:	4293      	cmp	r3, r2
 800f070:	d176      	bne.n	800f160 <UART_SetConfig+0x45c>
 800f072:	4bb1      	ldr	r3, [pc, #708]	@ (800f338 <UART_SetConfig+0x634>)
 800f074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f076:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f07a:	2b28      	cmp	r3, #40	@ 0x28
 800f07c:	d86c      	bhi.n	800f158 <UART_SetConfig+0x454>
 800f07e:	a201      	add	r2, pc, #4	@ (adr r2, 800f084 <UART_SetConfig+0x380>)
 800f080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f084:	0800f129 	.word	0x0800f129
 800f088:	0800f159 	.word	0x0800f159
 800f08c:	0800f159 	.word	0x0800f159
 800f090:	0800f159 	.word	0x0800f159
 800f094:	0800f159 	.word	0x0800f159
 800f098:	0800f159 	.word	0x0800f159
 800f09c:	0800f159 	.word	0x0800f159
 800f0a0:	0800f159 	.word	0x0800f159
 800f0a4:	0800f131 	.word	0x0800f131
 800f0a8:	0800f159 	.word	0x0800f159
 800f0ac:	0800f159 	.word	0x0800f159
 800f0b0:	0800f159 	.word	0x0800f159
 800f0b4:	0800f159 	.word	0x0800f159
 800f0b8:	0800f159 	.word	0x0800f159
 800f0bc:	0800f159 	.word	0x0800f159
 800f0c0:	0800f159 	.word	0x0800f159
 800f0c4:	0800f139 	.word	0x0800f139
 800f0c8:	0800f159 	.word	0x0800f159
 800f0cc:	0800f159 	.word	0x0800f159
 800f0d0:	0800f159 	.word	0x0800f159
 800f0d4:	0800f159 	.word	0x0800f159
 800f0d8:	0800f159 	.word	0x0800f159
 800f0dc:	0800f159 	.word	0x0800f159
 800f0e0:	0800f159 	.word	0x0800f159
 800f0e4:	0800f141 	.word	0x0800f141
 800f0e8:	0800f159 	.word	0x0800f159
 800f0ec:	0800f159 	.word	0x0800f159
 800f0f0:	0800f159 	.word	0x0800f159
 800f0f4:	0800f159 	.word	0x0800f159
 800f0f8:	0800f159 	.word	0x0800f159
 800f0fc:	0800f159 	.word	0x0800f159
 800f100:	0800f159 	.word	0x0800f159
 800f104:	0800f149 	.word	0x0800f149
 800f108:	0800f159 	.word	0x0800f159
 800f10c:	0800f159 	.word	0x0800f159
 800f110:	0800f159 	.word	0x0800f159
 800f114:	0800f159 	.word	0x0800f159
 800f118:	0800f159 	.word	0x0800f159
 800f11c:	0800f159 	.word	0x0800f159
 800f120:	0800f159 	.word	0x0800f159
 800f124:	0800f151 	.word	0x0800f151
 800f128:	2301      	movs	r3, #1
 800f12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f12e:	e1c0      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f130:	2304      	movs	r3, #4
 800f132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f136:	e1bc      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f138:	2308      	movs	r3, #8
 800f13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f13e:	e1b8      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f140:	2310      	movs	r3, #16
 800f142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f146:	e1b4      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f148:	2320      	movs	r3, #32
 800f14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f14e:	e1b0      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f150:	2340      	movs	r3, #64	@ 0x40
 800f152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f156:	e1ac      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f158:	2380      	movs	r3, #128	@ 0x80
 800f15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f15e:	e1a8      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	4a75      	ldr	r2, [pc, #468]	@ (800f33c <UART_SetConfig+0x638>)
 800f166:	4293      	cmp	r3, r2
 800f168:	d130      	bne.n	800f1cc <UART_SetConfig+0x4c8>
 800f16a:	4b73      	ldr	r3, [pc, #460]	@ (800f338 <UART_SetConfig+0x634>)
 800f16c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f16e:	f003 0307 	and.w	r3, r3, #7
 800f172:	2b05      	cmp	r3, #5
 800f174:	d826      	bhi.n	800f1c4 <UART_SetConfig+0x4c0>
 800f176:	a201      	add	r2, pc, #4	@ (adr r2, 800f17c <UART_SetConfig+0x478>)
 800f178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f17c:	0800f195 	.word	0x0800f195
 800f180:	0800f19d 	.word	0x0800f19d
 800f184:	0800f1a5 	.word	0x0800f1a5
 800f188:	0800f1ad 	.word	0x0800f1ad
 800f18c:	0800f1b5 	.word	0x0800f1b5
 800f190:	0800f1bd 	.word	0x0800f1bd
 800f194:	2300      	movs	r3, #0
 800f196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f19a:	e18a      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f19c:	2304      	movs	r3, #4
 800f19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1a2:	e186      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f1a4:	2308      	movs	r3, #8
 800f1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1aa:	e182      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f1ac:	2310      	movs	r3, #16
 800f1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1b2:	e17e      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f1b4:	2320      	movs	r3, #32
 800f1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1ba:	e17a      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f1bc:	2340      	movs	r3, #64	@ 0x40
 800f1be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1c2:	e176      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f1c4:	2380      	movs	r3, #128	@ 0x80
 800f1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f1ca:	e172      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	4a5b      	ldr	r2, [pc, #364]	@ (800f340 <UART_SetConfig+0x63c>)
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d130      	bne.n	800f238 <UART_SetConfig+0x534>
 800f1d6:	4b58      	ldr	r3, [pc, #352]	@ (800f338 <UART_SetConfig+0x634>)
 800f1d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1da:	f003 0307 	and.w	r3, r3, #7
 800f1de:	2b05      	cmp	r3, #5
 800f1e0:	d826      	bhi.n	800f230 <UART_SetConfig+0x52c>
 800f1e2:	a201      	add	r2, pc, #4	@ (adr r2, 800f1e8 <UART_SetConfig+0x4e4>)
 800f1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1e8:	0800f201 	.word	0x0800f201
 800f1ec:	0800f209 	.word	0x0800f209
 800f1f0:	0800f211 	.word	0x0800f211
 800f1f4:	0800f219 	.word	0x0800f219
 800f1f8:	0800f221 	.word	0x0800f221
 800f1fc:	0800f229 	.word	0x0800f229
 800f200:	2300      	movs	r3, #0
 800f202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f206:	e154      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f208:	2304      	movs	r3, #4
 800f20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f20e:	e150      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f210:	2308      	movs	r3, #8
 800f212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f216:	e14c      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f218:	2310      	movs	r3, #16
 800f21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f21e:	e148      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f220:	2320      	movs	r3, #32
 800f222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f226:	e144      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f228:	2340      	movs	r3, #64	@ 0x40
 800f22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f22e:	e140      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f230:	2380      	movs	r3, #128	@ 0x80
 800f232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f236:	e13c      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	4a41      	ldr	r2, [pc, #260]	@ (800f344 <UART_SetConfig+0x640>)
 800f23e:	4293      	cmp	r3, r2
 800f240:	f040 8082 	bne.w	800f348 <UART_SetConfig+0x644>
 800f244:	4b3c      	ldr	r3, [pc, #240]	@ (800f338 <UART_SetConfig+0x634>)
 800f246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f248:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f24c:	2b28      	cmp	r3, #40	@ 0x28
 800f24e:	d86d      	bhi.n	800f32c <UART_SetConfig+0x628>
 800f250:	a201      	add	r2, pc, #4	@ (adr r2, 800f258 <UART_SetConfig+0x554>)
 800f252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f256:	bf00      	nop
 800f258:	0800f2fd 	.word	0x0800f2fd
 800f25c:	0800f32d 	.word	0x0800f32d
 800f260:	0800f32d 	.word	0x0800f32d
 800f264:	0800f32d 	.word	0x0800f32d
 800f268:	0800f32d 	.word	0x0800f32d
 800f26c:	0800f32d 	.word	0x0800f32d
 800f270:	0800f32d 	.word	0x0800f32d
 800f274:	0800f32d 	.word	0x0800f32d
 800f278:	0800f305 	.word	0x0800f305
 800f27c:	0800f32d 	.word	0x0800f32d
 800f280:	0800f32d 	.word	0x0800f32d
 800f284:	0800f32d 	.word	0x0800f32d
 800f288:	0800f32d 	.word	0x0800f32d
 800f28c:	0800f32d 	.word	0x0800f32d
 800f290:	0800f32d 	.word	0x0800f32d
 800f294:	0800f32d 	.word	0x0800f32d
 800f298:	0800f30d 	.word	0x0800f30d
 800f29c:	0800f32d 	.word	0x0800f32d
 800f2a0:	0800f32d 	.word	0x0800f32d
 800f2a4:	0800f32d 	.word	0x0800f32d
 800f2a8:	0800f32d 	.word	0x0800f32d
 800f2ac:	0800f32d 	.word	0x0800f32d
 800f2b0:	0800f32d 	.word	0x0800f32d
 800f2b4:	0800f32d 	.word	0x0800f32d
 800f2b8:	0800f315 	.word	0x0800f315
 800f2bc:	0800f32d 	.word	0x0800f32d
 800f2c0:	0800f32d 	.word	0x0800f32d
 800f2c4:	0800f32d 	.word	0x0800f32d
 800f2c8:	0800f32d 	.word	0x0800f32d
 800f2cc:	0800f32d 	.word	0x0800f32d
 800f2d0:	0800f32d 	.word	0x0800f32d
 800f2d4:	0800f32d 	.word	0x0800f32d
 800f2d8:	0800f31d 	.word	0x0800f31d
 800f2dc:	0800f32d 	.word	0x0800f32d
 800f2e0:	0800f32d 	.word	0x0800f32d
 800f2e4:	0800f32d 	.word	0x0800f32d
 800f2e8:	0800f32d 	.word	0x0800f32d
 800f2ec:	0800f32d 	.word	0x0800f32d
 800f2f0:	0800f32d 	.word	0x0800f32d
 800f2f4:	0800f32d 	.word	0x0800f32d
 800f2f8:	0800f325 	.word	0x0800f325
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f302:	e0d6      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f304:	2304      	movs	r3, #4
 800f306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f30a:	e0d2      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f30c:	2308      	movs	r3, #8
 800f30e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f312:	e0ce      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f314:	2310      	movs	r3, #16
 800f316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f31a:	e0ca      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f31c:	2320      	movs	r3, #32
 800f31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f322:	e0c6      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f324:	2340      	movs	r3, #64	@ 0x40
 800f326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f32a:	e0c2      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f32c:	2380      	movs	r3, #128	@ 0x80
 800f32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f332:	e0be      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f334:	40011400 	.word	0x40011400
 800f338:	58024400 	.word	0x58024400
 800f33c:	40007800 	.word	0x40007800
 800f340:	40007c00 	.word	0x40007c00
 800f344:	40011800 	.word	0x40011800
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	4aad      	ldr	r2, [pc, #692]	@ (800f604 <UART_SetConfig+0x900>)
 800f34e:	4293      	cmp	r3, r2
 800f350:	d176      	bne.n	800f440 <UART_SetConfig+0x73c>
 800f352:	4bad      	ldr	r3, [pc, #692]	@ (800f608 <UART_SetConfig+0x904>)
 800f354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f356:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f35a:	2b28      	cmp	r3, #40	@ 0x28
 800f35c:	d86c      	bhi.n	800f438 <UART_SetConfig+0x734>
 800f35e:	a201      	add	r2, pc, #4	@ (adr r2, 800f364 <UART_SetConfig+0x660>)
 800f360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f364:	0800f409 	.word	0x0800f409
 800f368:	0800f439 	.word	0x0800f439
 800f36c:	0800f439 	.word	0x0800f439
 800f370:	0800f439 	.word	0x0800f439
 800f374:	0800f439 	.word	0x0800f439
 800f378:	0800f439 	.word	0x0800f439
 800f37c:	0800f439 	.word	0x0800f439
 800f380:	0800f439 	.word	0x0800f439
 800f384:	0800f411 	.word	0x0800f411
 800f388:	0800f439 	.word	0x0800f439
 800f38c:	0800f439 	.word	0x0800f439
 800f390:	0800f439 	.word	0x0800f439
 800f394:	0800f439 	.word	0x0800f439
 800f398:	0800f439 	.word	0x0800f439
 800f39c:	0800f439 	.word	0x0800f439
 800f3a0:	0800f439 	.word	0x0800f439
 800f3a4:	0800f419 	.word	0x0800f419
 800f3a8:	0800f439 	.word	0x0800f439
 800f3ac:	0800f439 	.word	0x0800f439
 800f3b0:	0800f439 	.word	0x0800f439
 800f3b4:	0800f439 	.word	0x0800f439
 800f3b8:	0800f439 	.word	0x0800f439
 800f3bc:	0800f439 	.word	0x0800f439
 800f3c0:	0800f439 	.word	0x0800f439
 800f3c4:	0800f421 	.word	0x0800f421
 800f3c8:	0800f439 	.word	0x0800f439
 800f3cc:	0800f439 	.word	0x0800f439
 800f3d0:	0800f439 	.word	0x0800f439
 800f3d4:	0800f439 	.word	0x0800f439
 800f3d8:	0800f439 	.word	0x0800f439
 800f3dc:	0800f439 	.word	0x0800f439
 800f3e0:	0800f439 	.word	0x0800f439
 800f3e4:	0800f429 	.word	0x0800f429
 800f3e8:	0800f439 	.word	0x0800f439
 800f3ec:	0800f439 	.word	0x0800f439
 800f3f0:	0800f439 	.word	0x0800f439
 800f3f4:	0800f439 	.word	0x0800f439
 800f3f8:	0800f439 	.word	0x0800f439
 800f3fc:	0800f439 	.word	0x0800f439
 800f400:	0800f439 	.word	0x0800f439
 800f404:	0800f431 	.word	0x0800f431
 800f408:	2301      	movs	r3, #1
 800f40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f40e:	e050      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f410:	2304      	movs	r3, #4
 800f412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f416:	e04c      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f418:	2308      	movs	r3, #8
 800f41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f41e:	e048      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f420:	2310      	movs	r3, #16
 800f422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f426:	e044      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f428:	2320      	movs	r3, #32
 800f42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f42e:	e040      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f430:	2340      	movs	r3, #64	@ 0x40
 800f432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f436:	e03c      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f438:	2380      	movs	r3, #128	@ 0x80
 800f43a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f43e:	e038      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f440:	697b      	ldr	r3, [r7, #20]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	4a71      	ldr	r2, [pc, #452]	@ (800f60c <UART_SetConfig+0x908>)
 800f446:	4293      	cmp	r3, r2
 800f448:	d130      	bne.n	800f4ac <UART_SetConfig+0x7a8>
 800f44a:	4b6f      	ldr	r3, [pc, #444]	@ (800f608 <UART_SetConfig+0x904>)
 800f44c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f44e:	f003 0307 	and.w	r3, r3, #7
 800f452:	2b05      	cmp	r3, #5
 800f454:	d826      	bhi.n	800f4a4 <UART_SetConfig+0x7a0>
 800f456:	a201      	add	r2, pc, #4	@ (adr r2, 800f45c <UART_SetConfig+0x758>)
 800f458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f45c:	0800f475 	.word	0x0800f475
 800f460:	0800f47d 	.word	0x0800f47d
 800f464:	0800f485 	.word	0x0800f485
 800f468:	0800f48d 	.word	0x0800f48d
 800f46c:	0800f495 	.word	0x0800f495
 800f470:	0800f49d 	.word	0x0800f49d
 800f474:	2302      	movs	r3, #2
 800f476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f47a:	e01a      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f47c:	2304      	movs	r3, #4
 800f47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f482:	e016      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f484:	2308      	movs	r3, #8
 800f486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f48a:	e012      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f48c:	2310      	movs	r3, #16
 800f48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f492:	e00e      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f494:	2320      	movs	r3, #32
 800f496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f49a:	e00a      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f49c:	2340      	movs	r3, #64	@ 0x40
 800f49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4a2:	e006      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f4a4:	2380      	movs	r3, #128	@ 0x80
 800f4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f4aa:	e002      	b.n	800f4b2 <UART_SetConfig+0x7ae>
 800f4ac:	2380      	movs	r3, #128	@ 0x80
 800f4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	4a55      	ldr	r2, [pc, #340]	@ (800f60c <UART_SetConfig+0x908>)
 800f4b8:	4293      	cmp	r3, r2
 800f4ba:	f040 80f8 	bne.w	800f6ae <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f4be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f4c2:	2b20      	cmp	r3, #32
 800f4c4:	dc46      	bgt.n	800f554 <UART_SetConfig+0x850>
 800f4c6:	2b02      	cmp	r3, #2
 800f4c8:	db75      	blt.n	800f5b6 <UART_SetConfig+0x8b2>
 800f4ca:	3b02      	subs	r3, #2
 800f4cc:	2b1e      	cmp	r3, #30
 800f4ce:	d872      	bhi.n	800f5b6 <UART_SetConfig+0x8b2>
 800f4d0:	a201      	add	r2, pc, #4	@ (adr r2, 800f4d8 <UART_SetConfig+0x7d4>)
 800f4d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4d6:	bf00      	nop
 800f4d8:	0800f55b 	.word	0x0800f55b
 800f4dc:	0800f5b7 	.word	0x0800f5b7
 800f4e0:	0800f563 	.word	0x0800f563
 800f4e4:	0800f5b7 	.word	0x0800f5b7
 800f4e8:	0800f5b7 	.word	0x0800f5b7
 800f4ec:	0800f5b7 	.word	0x0800f5b7
 800f4f0:	0800f573 	.word	0x0800f573
 800f4f4:	0800f5b7 	.word	0x0800f5b7
 800f4f8:	0800f5b7 	.word	0x0800f5b7
 800f4fc:	0800f5b7 	.word	0x0800f5b7
 800f500:	0800f5b7 	.word	0x0800f5b7
 800f504:	0800f5b7 	.word	0x0800f5b7
 800f508:	0800f5b7 	.word	0x0800f5b7
 800f50c:	0800f5b7 	.word	0x0800f5b7
 800f510:	0800f583 	.word	0x0800f583
 800f514:	0800f5b7 	.word	0x0800f5b7
 800f518:	0800f5b7 	.word	0x0800f5b7
 800f51c:	0800f5b7 	.word	0x0800f5b7
 800f520:	0800f5b7 	.word	0x0800f5b7
 800f524:	0800f5b7 	.word	0x0800f5b7
 800f528:	0800f5b7 	.word	0x0800f5b7
 800f52c:	0800f5b7 	.word	0x0800f5b7
 800f530:	0800f5b7 	.word	0x0800f5b7
 800f534:	0800f5b7 	.word	0x0800f5b7
 800f538:	0800f5b7 	.word	0x0800f5b7
 800f53c:	0800f5b7 	.word	0x0800f5b7
 800f540:	0800f5b7 	.word	0x0800f5b7
 800f544:	0800f5b7 	.word	0x0800f5b7
 800f548:	0800f5b7 	.word	0x0800f5b7
 800f54c:	0800f5b7 	.word	0x0800f5b7
 800f550:	0800f5a9 	.word	0x0800f5a9
 800f554:	2b40      	cmp	r3, #64	@ 0x40
 800f556:	d02a      	beq.n	800f5ae <UART_SetConfig+0x8aa>
 800f558:	e02d      	b.n	800f5b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f55a:	f7fc fcbd 	bl	800bed8 <HAL_RCCEx_GetD3PCLK1Freq>
 800f55e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f560:	e02f      	b.n	800f5c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f562:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f566:	4618      	mov	r0, r3
 800f568:	f7fc fccc 	bl	800bf04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f570:	e027      	b.n	800f5c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f572:	f107 0318 	add.w	r3, r7, #24
 800f576:	4618      	mov	r0, r3
 800f578:	f7fc fe18 	bl	800c1ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f580:	e01f      	b.n	800f5c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f582:	4b21      	ldr	r3, [pc, #132]	@ (800f608 <UART_SetConfig+0x904>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	f003 0320 	and.w	r3, r3, #32
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d009      	beq.n	800f5a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f58e:	4b1e      	ldr	r3, [pc, #120]	@ (800f608 <UART_SetConfig+0x904>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	08db      	lsrs	r3, r3, #3
 800f594:	f003 0303 	and.w	r3, r3, #3
 800f598:	4a1d      	ldr	r2, [pc, #116]	@ (800f610 <UART_SetConfig+0x90c>)
 800f59a:	fa22 f303 	lsr.w	r3, r2, r3
 800f59e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f5a0:	e00f      	b.n	800f5c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f5a2:	4b1b      	ldr	r3, [pc, #108]	@ (800f610 <UART_SetConfig+0x90c>)
 800f5a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5a6:	e00c      	b.n	800f5c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f5a8:	4b1a      	ldr	r3, [pc, #104]	@ (800f614 <UART_SetConfig+0x910>)
 800f5aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5ac:	e009      	b.n	800f5c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f5ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5b4:	e005      	b.n	800f5c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f5c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f5c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	f000 81ee 	beq.w	800f9a6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5ce:	4a12      	ldr	r2, [pc, #72]	@ (800f618 <UART_SetConfig+0x914>)
 800f5d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f5d4:	461a      	mov	r2, r3
 800f5d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5dc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	685a      	ldr	r2, [r3, #4]
 800f5e2:	4613      	mov	r3, r2
 800f5e4:	005b      	lsls	r3, r3, #1
 800f5e6:	4413      	add	r3, r2
 800f5e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d305      	bcc.n	800f5fa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	685b      	ldr	r3, [r3, #4]
 800f5f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f5f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d910      	bls.n	800f61c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f600:	e1d1      	b.n	800f9a6 <UART_SetConfig+0xca2>
 800f602:	bf00      	nop
 800f604:	40011c00 	.word	0x40011c00
 800f608:	58024400 	.word	0x58024400
 800f60c:	58000c00 	.word	0x58000c00
 800f610:	03d09000 	.word	0x03d09000
 800f614:	003d0900 	.word	0x003d0900
 800f618:	080163f8 	.word	0x080163f8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f61c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f61e:	2200      	movs	r2, #0
 800f620:	60bb      	str	r3, [r7, #8]
 800f622:	60fa      	str	r2, [r7, #12]
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f628:	4ac0      	ldr	r2, [pc, #768]	@ (800f92c <UART_SetConfig+0xc28>)
 800f62a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f62e:	b29b      	uxth	r3, r3
 800f630:	2200      	movs	r2, #0
 800f632:	603b      	str	r3, [r7, #0]
 800f634:	607a      	str	r2, [r7, #4]
 800f636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f63a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f63e:	f7f0 ff1f 	bl	8000480 <__aeabi_uldivmod>
 800f642:	4602      	mov	r2, r0
 800f644:	460b      	mov	r3, r1
 800f646:	4610      	mov	r0, r2
 800f648:	4619      	mov	r1, r3
 800f64a:	f04f 0200 	mov.w	r2, #0
 800f64e:	f04f 0300 	mov.w	r3, #0
 800f652:	020b      	lsls	r3, r1, #8
 800f654:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f658:	0202      	lsls	r2, r0, #8
 800f65a:	6979      	ldr	r1, [r7, #20]
 800f65c:	6849      	ldr	r1, [r1, #4]
 800f65e:	0849      	lsrs	r1, r1, #1
 800f660:	2000      	movs	r0, #0
 800f662:	460c      	mov	r4, r1
 800f664:	4605      	mov	r5, r0
 800f666:	eb12 0804 	adds.w	r8, r2, r4
 800f66a:	eb43 0905 	adc.w	r9, r3, r5
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	685b      	ldr	r3, [r3, #4]
 800f672:	2200      	movs	r2, #0
 800f674:	469a      	mov	sl, r3
 800f676:	4693      	mov	fp, r2
 800f678:	4652      	mov	r2, sl
 800f67a:	465b      	mov	r3, fp
 800f67c:	4640      	mov	r0, r8
 800f67e:	4649      	mov	r1, r9
 800f680:	f7f0 fefe 	bl	8000480 <__aeabi_uldivmod>
 800f684:	4602      	mov	r2, r0
 800f686:	460b      	mov	r3, r1
 800f688:	4613      	mov	r3, r2
 800f68a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f68c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f68e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f692:	d308      	bcc.n	800f6a6 <UART_SetConfig+0x9a2>
 800f694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f696:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f69a:	d204      	bcs.n	800f6a6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f6a2:	60da      	str	r2, [r3, #12]
 800f6a4:	e17f      	b.n	800f9a6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f6ac:	e17b      	b.n	800f9a6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	69db      	ldr	r3, [r3, #28]
 800f6b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f6b6:	f040 80bd 	bne.w	800f834 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f6ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f6be:	2b20      	cmp	r3, #32
 800f6c0:	dc48      	bgt.n	800f754 <UART_SetConfig+0xa50>
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	db7b      	blt.n	800f7be <UART_SetConfig+0xaba>
 800f6c6:	2b20      	cmp	r3, #32
 800f6c8:	d879      	bhi.n	800f7be <UART_SetConfig+0xaba>
 800f6ca:	a201      	add	r2, pc, #4	@ (adr r2, 800f6d0 <UART_SetConfig+0x9cc>)
 800f6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6d0:	0800f75b 	.word	0x0800f75b
 800f6d4:	0800f763 	.word	0x0800f763
 800f6d8:	0800f7bf 	.word	0x0800f7bf
 800f6dc:	0800f7bf 	.word	0x0800f7bf
 800f6e0:	0800f76b 	.word	0x0800f76b
 800f6e4:	0800f7bf 	.word	0x0800f7bf
 800f6e8:	0800f7bf 	.word	0x0800f7bf
 800f6ec:	0800f7bf 	.word	0x0800f7bf
 800f6f0:	0800f77b 	.word	0x0800f77b
 800f6f4:	0800f7bf 	.word	0x0800f7bf
 800f6f8:	0800f7bf 	.word	0x0800f7bf
 800f6fc:	0800f7bf 	.word	0x0800f7bf
 800f700:	0800f7bf 	.word	0x0800f7bf
 800f704:	0800f7bf 	.word	0x0800f7bf
 800f708:	0800f7bf 	.word	0x0800f7bf
 800f70c:	0800f7bf 	.word	0x0800f7bf
 800f710:	0800f78b 	.word	0x0800f78b
 800f714:	0800f7bf 	.word	0x0800f7bf
 800f718:	0800f7bf 	.word	0x0800f7bf
 800f71c:	0800f7bf 	.word	0x0800f7bf
 800f720:	0800f7bf 	.word	0x0800f7bf
 800f724:	0800f7bf 	.word	0x0800f7bf
 800f728:	0800f7bf 	.word	0x0800f7bf
 800f72c:	0800f7bf 	.word	0x0800f7bf
 800f730:	0800f7bf 	.word	0x0800f7bf
 800f734:	0800f7bf 	.word	0x0800f7bf
 800f738:	0800f7bf 	.word	0x0800f7bf
 800f73c:	0800f7bf 	.word	0x0800f7bf
 800f740:	0800f7bf 	.word	0x0800f7bf
 800f744:	0800f7bf 	.word	0x0800f7bf
 800f748:	0800f7bf 	.word	0x0800f7bf
 800f74c:	0800f7bf 	.word	0x0800f7bf
 800f750:	0800f7b1 	.word	0x0800f7b1
 800f754:	2b40      	cmp	r3, #64	@ 0x40
 800f756:	d02e      	beq.n	800f7b6 <UART_SetConfig+0xab2>
 800f758:	e031      	b.n	800f7be <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f75a:	f7fa fd1f 	bl	800a19c <HAL_RCC_GetPCLK1Freq>
 800f75e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f760:	e033      	b.n	800f7ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f762:	f7fa fd31 	bl	800a1c8 <HAL_RCC_GetPCLK2Freq>
 800f766:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f768:	e02f      	b.n	800f7ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f76a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f76e:	4618      	mov	r0, r3
 800f770:	f7fc fbc8 	bl	800bf04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f778:	e027      	b.n	800f7ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f77a:	f107 0318 	add.w	r3, r7, #24
 800f77e:	4618      	mov	r0, r3
 800f780:	f7fc fd14 	bl	800c1ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f784:	69fb      	ldr	r3, [r7, #28]
 800f786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f788:	e01f      	b.n	800f7ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f78a:	4b69      	ldr	r3, [pc, #420]	@ (800f930 <UART_SetConfig+0xc2c>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	f003 0320 	and.w	r3, r3, #32
 800f792:	2b00      	cmp	r3, #0
 800f794:	d009      	beq.n	800f7aa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f796:	4b66      	ldr	r3, [pc, #408]	@ (800f930 <UART_SetConfig+0xc2c>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	08db      	lsrs	r3, r3, #3
 800f79c:	f003 0303 	and.w	r3, r3, #3
 800f7a0:	4a64      	ldr	r2, [pc, #400]	@ (800f934 <UART_SetConfig+0xc30>)
 800f7a2:	fa22 f303 	lsr.w	r3, r2, r3
 800f7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f7a8:	e00f      	b.n	800f7ca <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f7aa:	4b62      	ldr	r3, [pc, #392]	@ (800f934 <UART_SetConfig+0xc30>)
 800f7ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f7ae:	e00c      	b.n	800f7ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f7b0:	4b61      	ldr	r3, [pc, #388]	@ (800f938 <UART_SetConfig+0xc34>)
 800f7b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f7b4:	e009      	b.n	800f7ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f7b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f7bc:	e005      	b.n	800f7ca <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f7c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f7ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f000 80ea 	beq.w	800f9a6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7d6:	4a55      	ldr	r2, [pc, #340]	@ (800f92c <UART_SetConfig+0xc28>)
 800f7d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f7dc:	461a      	mov	r2, r3
 800f7de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f7e4:	005a      	lsls	r2, r3, #1
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	085b      	lsrs	r3, r3, #1
 800f7ec:	441a      	add	r2, r3
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	685b      	ldr	r3, [r3, #4]
 800f7f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7fa:	2b0f      	cmp	r3, #15
 800f7fc:	d916      	bls.n	800f82c <UART_SetConfig+0xb28>
 800f7fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f804:	d212      	bcs.n	800f82c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f808:	b29b      	uxth	r3, r3
 800f80a:	f023 030f 	bic.w	r3, r3, #15
 800f80e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f812:	085b      	lsrs	r3, r3, #1
 800f814:	b29b      	uxth	r3, r3
 800f816:	f003 0307 	and.w	r3, r3, #7
 800f81a:	b29a      	uxth	r2, r3
 800f81c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f81e:	4313      	orrs	r3, r2
 800f820:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f828:	60da      	str	r2, [r3, #12]
 800f82a:	e0bc      	b.n	800f9a6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f82c:	2301      	movs	r3, #1
 800f82e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f832:	e0b8      	b.n	800f9a6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f834:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f838:	2b20      	cmp	r3, #32
 800f83a:	dc4b      	bgt.n	800f8d4 <UART_SetConfig+0xbd0>
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	f2c0 8087 	blt.w	800f950 <UART_SetConfig+0xc4c>
 800f842:	2b20      	cmp	r3, #32
 800f844:	f200 8084 	bhi.w	800f950 <UART_SetConfig+0xc4c>
 800f848:	a201      	add	r2, pc, #4	@ (adr r2, 800f850 <UART_SetConfig+0xb4c>)
 800f84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f84e:	bf00      	nop
 800f850:	0800f8db 	.word	0x0800f8db
 800f854:	0800f8e3 	.word	0x0800f8e3
 800f858:	0800f951 	.word	0x0800f951
 800f85c:	0800f951 	.word	0x0800f951
 800f860:	0800f8eb 	.word	0x0800f8eb
 800f864:	0800f951 	.word	0x0800f951
 800f868:	0800f951 	.word	0x0800f951
 800f86c:	0800f951 	.word	0x0800f951
 800f870:	0800f8fb 	.word	0x0800f8fb
 800f874:	0800f951 	.word	0x0800f951
 800f878:	0800f951 	.word	0x0800f951
 800f87c:	0800f951 	.word	0x0800f951
 800f880:	0800f951 	.word	0x0800f951
 800f884:	0800f951 	.word	0x0800f951
 800f888:	0800f951 	.word	0x0800f951
 800f88c:	0800f951 	.word	0x0800f951
 800f890:	0800f90b 	.word	0x0800f90b
 800f894:	0800f951 	.word	0x0800f951
 800f898:	0800f951 	.word	0x0800f951
 800f89c:	0800f951 	.word	0x0800f951
 800f8a0:	0800f951 	.word	0x0800f951
 800f8a4:	0800f951 	.word	0x0800f951
 800f8a8:	0800f951 	.word	0x0800f951
 800f8ac:	0800f951 	.word	0x0800f951
 800f8b0:	0800f951 	.word	0x0800f951
 800f8b4:	0800f951 	.word	0x0800f951
 800f8b8:	0800f951 	.word	0x0800f951
 800f8bc:	0800f951 	.word	0x0800f951
 800f8c0:	0800f951 	.word	0x0800f951
 800f8c4:	0800f951 	.word	0x0800f951
 800f8c8:	0800f951 	.word	0x0800f951
 800f8cc:	0800f951 	.word	0x0800f951
 800f8d0:	0800f943 	.word	0x0800f943
 800f8d4:	2b40      	cmp	r3, #64	@ 0x40
 800f8d6:	d037      	beq.n	800f948 <UART_SetConfig+0xc44>
 800f8d8:	e03a      	b.n	800f950 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f8da:	f7fa fc5f 	bl	800a19c <HAL_RCC_GetPCLK1Freq>
 800f8de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f8e0:	e03c      	b.n	800f95c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f8e2:	f7fa fc71 	bl	800a1c8 <HAL_RCC_GetPCLK2Freq>
 800f8e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f8e8:	e038      	b.n	800f95c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f8ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f7fc fb08 	bl	800bf04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f8f8:	e030      	b.n	800f95c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f8fa:	f107 0318 	add.w	r3, r7, #24
 800f8fe:	4618      	mov	r0, r3
 800f900:	f7fc fc54 	bl	800c1ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f904:	69fb      	ldr	r3, [r7, #28]
 800f906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f908:	e028      	b.n	800f95c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f90a:	4b09      	ldr	r3, [pc, #36]	@ (800f930 <UART_SetConfig+0xc2c>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	f003 0320 	and.w	r3, r3, #32
 800f912:	2b00      	cmp	r3, #0
 800f914:	d012      	beq.n	800f93c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f916:	4b06      	ldr	r3, [pc, #24]	@ (800f930 <UART_SetConfig+0xc2c>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	08db      	lsrs	r3, r3, #3
 800f91c:	f003 0303 	and.w	r3, r3, #3
 800f920:	4a04      	ldr	r2, [pc, #16]	@ (800f934 <UART_SetConfig+0xc30>)
 800f922:	fa22 f303 	lsr.w	r3, r2, r3
 800f926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f928:	e018      	b.n	800f95c <UART_SetConfig+0xc58>
 800f92a:	bf00      	nop
 800f92c:	080163f8 	.word	0x080163f8
 800f930:	58024400 	.word	0x58024400
 800f934:	03d09000 	.word	0x03d09000
 800f938:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f93c:	4b24      	ldr	r3, [pc, #144]	@ (800f9d0 <UART_SetConfig+0xccc>)
 800f93e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f940:	e00c      	b.n	800f95c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f942:	4b24      	ldr	r3, [pc, #144]	@ (800f9d4 <UART_SetConfig+0xcd0>)
 800f944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f946:	e009      	b.n	800f95c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f948:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f94e:	e005      	b.n	800f95c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f950:	2300      	movs	r3, #0
 800f952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f954:	2301      	movs	r3, #1
 800f956:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f95a:	bf00      	nop
    }

    if (pclk != 0U)
 800f95c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d021      	beq.n	800f9a6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f962:	697b      	ldr	r3, [r7, #20]
 800f964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f966:	4a1c      	ldr	r2, [pc, #112]	@ (800f9d8 <UART_SetConfig+0xcd4>)
 800f968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f96c:	461a      	mov	r2, r3
 800f96e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f970:	fbb3 f2f2 	udiv	r2, r3, r2
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	085b      	lsrs	r3, r3, #1
 800f97a:	441a      	add	r2, r3
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	685b      	ldr	r3, [r3, #4]
 800f980:	fbb2 f3f3 	udiv	r3, r2, r3
 800f984:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f988:	2b0f      	cmp	r3, #15
 800f98a:	d909      	bls.n	800f9a0 <UART_SetConfig+0xc9c>
 800f98c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f98e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f992:	d205      	bcs.n	800f9a0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f996:	b29a      	uxth	r2, r3
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	60da      	str	r2, [r3, #12]
 800f99e:	e002      	b.n	800f9a6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	2201      	movs	r2, #1
 800f9aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	2201      	movs	r2, #1
 800f9b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	2200      	movs	r2, #0
 800f9c0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f9c2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	3748      	adds	r7, #72	@ 0x48
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f9d0:	03d09000 	.word	0x03d09000
 800f9d4:	003d0900 	.word	0x003d0900
 800f9d8:	080163f8 	.word	0x080163f8

0800f9dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f9dc:	b480      	push	{r7}
 800f9de:	b083      	sub	sp, #12
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9e8:	f003 0308 	and.w	r3, r3, #8
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d00a      	beq.n	800fa06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	685b      	ldr	r3, [r3, #4]
 800f9f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	430a      	orrs	r2, r1
 800fa04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa0a:	f003 0301 	and.w	r3, r3, #1
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d00a      	beq.n	800fa28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	685b      	ldr	r3, [r3, #4]
 800fa18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	430a      	orrs	r2, r1
 800fa26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa2c:	f003 0302 	and.w	r3, r3, #2
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d00a      	beq.n	800fa4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	685b      	ldr	r3, [r3, #4]
 800fa3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	430a      	orrs	r2, r1
 800fa48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa4e:	f003 0304 	and.w	r3, r3, #4
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d00a      	beq.n	800fa6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	685b      	ldr	r3, [r3, #4]
 800fa5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	430a      	orrs	r2, r1
 800fa6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa70:	f003 0310 	and.w	r3, r3, #16
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d00a      	beq.n	800fa8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	689b      	ldr	r3, [r3, #8]
 800fa7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	430a      	orrs	r2, r1
 800fa8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa92:	f003 0320 	and.w	r3, r3, #32
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d00a      	beq.n	800fab0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	689b      	ldr	r3, [r3, #8]
 800faa0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	430a      	orrs	r2, r1
 800faae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d01a      	beq.n	800faf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	685b      	ldr	r3, [r3, #4]
 800fac2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	430a      	orrs	r2, r1
 800fad0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fad6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fada:	d10a      	bne.n	800faf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	685b      	ldr	r3, [r3, #4]
 800fae2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	430a      	orrs	r2, r1
 800faf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800faf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d00a      	beq.n	800fb14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	685b      	ldr	r3, [r3, #4]
 800fb04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	430a      	orrs	r2, r1
 800fb12:	605a      	str	r2, [r3, #4]
  }
}
 800fb14:	bf00      	nop
 800fb16:	370c      	adds	r7, #12
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1e:	4770      	bx	lr

0800fb20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b098      	sub	sp, #96	@ 0x60
 800fb24:	af02      	add	r7, sp, #8
 800fb26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fb30:	f7f3 f9ae 	bl	8002e90 <HAL_GetTick>
 800fb34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f003 0308 	and.w	r3, r3, #8
 800fb40:	2b08      	cmp	r3, #8
 800fb42:	d12f      	bne.n	800fba4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fb44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fb48:	9300      	str	r3, [sp, #0]
 800fb4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f000 f88e 	bl	800fc74 <UART_WaitOnFlagUntilTimeout>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d022      	beq.n	800fba4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb66:	e853 3f00 	ldrex	r3, [r3]
 800fb6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fb6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fb72:	653b      	str	r3, [r7, #80]	@ 0x50
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	461a      	mov	r2, r3
 800fb7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fb7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800fb7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fb82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fb84:	e841 2300 	strex	r3, r2, [r1]
 800fb88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fb8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d1e6      	bne.n	800fb5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2220      	movs	r2, #32
 800fb94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fba0:	2303      	movs	r3, #3
 800fba2:	e063      	b.n	800fc6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	f003 0304 	and.w	r3, r3, #4
 800fbae:	2b04      	cmp	r3, #4
 800fbb0:	d149      	bne.n	800fc46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fbb2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fbb6:	9300      	str	r3, [sp, #0]
 800fbb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fbba:	2200      	movs	r2, #0
 800fbbc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fbc0:	6878      	ldr	r0, [r7, #4]
 800fbc2:	f000 f857 	bl	800fc74 <UART_WaitOnFlagUntilTimeout>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d03c      	beq.n	800fc46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbd4:	e853 3f00 	ldrex	r3, [r3]
 800fbd8:	623b      	str	r3, [r7, #32]
   return(result);
 800fbda:	6a3b      	ldr	r3, [r7, #32]
 800fbdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fbe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fbea:	633b      	str	r3, [r7, #48]	@ 0x30
 800fbec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fbf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbf2:	e841 2300 	strex	r3, r2, [r1]
 800fbf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fbf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d1e6      	bne.n	800fbcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	3308      	adds	r3, #8
 800fc04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	e853 3f00 	ldrex	r3, [r3]
 800fc0c:	60fb      	str	r3, [r7, #12]
   return(result);
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	f023 0301 	bic.w	r3, r3, #1
 800fc14:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	3308      	adds	r3, #8
 800fc1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fc1e:	61fa      	str	r2, [r7, #28]
 800fc20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc22:	69b9      	ldr	r1, [r7, #24]
 800fc24:	69fa      	ldr	r2, [r7, #28]
 800fc26:	e841 2300 	strex	r3, r2, [r1]
 800fc2a:	617b      	str	r3, [r7, #20]
   return(result);
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d1e5      	bne.n	800fbfe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2220      	movs	r2, #32
 800fc36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fc42:	2303      	movs	r3, #3
 800fc44:	e012      	b.n	800fc6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2220      	movs	r2, #32
 800fc4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2220      	movs	r2, #32
 800fc52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2200      	movs	r2, #0
 800fc5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2200      	movs	r2, #0
 800fc66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fc6a:	2300      	movs	r3, #0
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3758      	adds	r7, #88	@ 0x58
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}

0800fc74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b084      	sub	sp, #16
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	60f8      	str	r0, [r7, #12]
 800fc7c:	60b9      	str	r1, [r7, #8]
 800fc7e:	603b      	str	r3, [r7, #0]
 800fc80:	4613      	mov	r3, r2
 800fc82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc84:	e04f      	b.n	800fd26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fc86:	69bb      	ldr	r3, [r7, #24]
 800fc88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc8c:	d04b      	beq.n	800fd26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fc8e:	f7f3 f8ff 	bl	8002e90 <HAL_GetTick>
 800fc92:	4602      	mov	r2, r0
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	1ad3      	subs	r3, r2, r3
 800fc98:	69ba      	ldr	r2, [r7, #24]
 800fc9a:	429a      	cmp	r2, r3
 800fc9c:	d302      	bcc.n	800fca4 <UART_WaitOnFlagUntilTimeout+0x30>
 800fc9e:	69bb      	ldr	r3, [r7, #24]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d101      	bne.n	800fca8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fca4:	2303      	movs	r3, #3
 800fca6:	e04e      	b.n	800fd46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	f003 0304 	and.w	r3, r3, #4
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d037      	beq.n	800fd26 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	2b80      	cmp	r3, #128	@ 0x80
 800fcba:	d034      	beq.n	800fd26 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	2b40      	cmp	r3, #64	@ 0x40
 800fcc0:	d031      	beq.n	800fd26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	69db      	ldr	r3, [r3, #28]
 800fcc8:	f003 0308 	and.w	r3, r3, #8
 800fccc:	2b08      	cmp	r3, #8
 800fcce:	d110      	bne.n	800fcf2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	2208      	movs	r2, #8
 800fcd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fcd8:	68f8      	ldr	r0, [r7, #12]
 800fcda:	f000 f839 	bl	800fd50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	2208      	movs	r2, #8
 800fce2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	2200      	movs	r2, #0
 800fcea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fcee:	2301      	movs	r3, #1
 800fcf0:	e029      	b.n	800fd46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	69db      	ldr	r3, [r3, #28]
 800fcf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fcfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fd00:	d111      	bne.n	800fd26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fd0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fd0c:	68f8      	ldr	r0, [r7, #12]
 800fd0e:	f000 f81f 	bl	800fd50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	2220      	movs	r2, #32
 800fd16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fd22:	2303      	movs	r3, #3
 800fd24:	e00f      	b.n	800fd46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	69da      	ldr	r2, [r3, #28]
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	4013      	ands	r3, r2
 800fd30:	68ba      	ldr	r2, [r7, #8]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	bf0c      	ite	eq
 800fd36:	2301      	moveq	r3, #1
 800fd38:	2300      	movne	r3, #0
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	461a      	mov	r2, r3
 800fd3e:	79fb      	ldrb	r3, [r7, #7]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d0a0      	beq.n	800fc86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fd44:	2300      	movs	r3, #0
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3710      	adds	r7, #16
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
	...

0800fd50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b095      	sub	sp, #84	@ 0x54
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd60:	e853 3f00 	ldrex	r3, [r3]
 800fd64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fd66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fd6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	461a      	mov	r2, r3
 800fd74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd76:	643b      	str	r3, [r7, #64]	@ 0x40
 800fd78:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fd7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fd7e:	e841 2300 	strex	r3, r2, [r1]
 800fd82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fd84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d1e6      	bne.n	800fd58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	3308      	adds	r3, #8
 800fd90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd92:	6a3b      	ldr	r3, [r7, #32]
 800fd94:	e853 3f00 	ldrex	r3, [r3]
 800fd98:	61fb      	str	r3, [r7, #28]
   return(result);
 800fd9a:	69fa      	ldr	r2, [r7, #28]
 800fd9c:	4b1e      	ldr	r3, [pc, #120]	@ (800fe18 <UART_EndRxTransfer+0xc8>)
 800fd9e:	4013      	ands	r3, r2
 800fda0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	3308      	adds	r3, #8
 800fda8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fdaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fdac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fdb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fdb2:	e841 2300 	strex	r3, r2, [r1]
 800fdb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fdb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d1e5      	bne.n	800fd8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fdc2:	2b01      	cmp	r3, #1
 800fdc4:	d118      	bne.n	800fdf8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	e853 3f00 	ldrex	r3, [r3]
 800fdd2:	60bb      	str	r3, [r7, #8]
   return(result);
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	f023 0310 	bic.w	r3, r3, #16
 800fdda:	647b      	str	r3, [r7, #68]	@ 0x44
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	461a      	mov	r2, r3
 800fde2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fde4:	61bb      	str	r3, [r7, #24]
 800fde6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fde8:	6979      	ldr	r1, [r7, #20]
 800fdea:	69ba      	ldr	r2, [r7, #24]
 800fdec:	e841 2300 	strex	r3, r2, [r1]
 800fdf0:	613b      	str	r3, [r7, #16]
   return(result);
 800fdf2:	693b      	ldr	r3, [r7, #16]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d1e6      	bne.n	800fdc6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2220      	movs	r2, #32
 800fdfc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2200      	movs	r2, #0
 800fe04:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fe0c:	bf00      	nop
 800fe0e:	3754      	adds	r7, #84	@ 0x54
 800fe10:	46bd      	mov	sp, r7
 800fe12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe16:	4770      	bx	lr
 800fe18:	effffffe 	.word	0xeffffffe

0800fe1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b084      	sub	sp, #16
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fe32:	68f8      	ldr	r0, [r7, #12]
 800fe34:	f7fe ff50 	bl	800ecd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe38:	bf00      	nop
 800fe3a:	3710      	adds	r7, #16
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}

0800fe40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b088      	sub	sp, #32
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	e853 3f00 	ldrex	r3, [r3]
 800fe54:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fe5c:	61fb      	str	r3, [r7, #28]
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	461a      	mov	r2, r3
 800fe64:	69fb      	ldr	r3, [r7, #28]
 800fe66:	61bb      	str	r3, [r7, #24]
 800fe68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe6a:	6979      	ldr	r1, [r7, #20]
 800fe6c:	69ba      	ldr	r2, [r7, #24]
 800fe6e:	e841 2300 	strex	r3, r2, [r1]
 800fe72:	613b      	str	r3, [r7, #16]
   return(result);
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d1e6      	bne.n	800fe48 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2220      	movs	r2, #32
 800fe7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2200      	movs	r2, #0
 800fe86:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f7fe ff1b 	bl	800ecc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe8e:	bf00      	nop
 800fe90:	3720      	adds	r7, #32
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}

0800fe96 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fe96:	b480      	push	{r7}
 800fe98:	b083      	sub	sp, #12
 800fe9a:	af00      	add	r7, sp, #0
 800fe9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fe9e:	bf00      	nop
 800fea0:	370c      	adds	r7, #12
 800fea2:	46bd      	mov	sp, r7
 800fea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea8:	4770      	bx	lr

0800feaa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800feaa:	b480      	push	{r7}
 800feac:	b083      	sub	sp, #12
 800feae:	af00      	add	r7, sp, #0
 800feb0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800feb2:	bf00      	nop
 800feb4:	370c      	adds	r7, #12
 800feb6:	46bd      	mov	sp, r7
 800feb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febc:	4770      	bx	lr

0800febe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800febe:	b480      	push	{r7}
 800fec0:	b083      	sub	sp, #12
 800fec2:	af00      	add	r7, sp, #0
 800fec4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fec6:	bf00      	nop
 800fec8:	370c      	adds	r7, #12
 800feca:	46bd      	mov	sp, r7
 800fecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed0:	4770      	bx	lr

0800fed2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fed2:	b480      	push	{r7}
 800fed4:	b085      	sub	sp, #20
 800fed6:	af00      	add	r7, sp, #0
 800fed8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fee0:	2b01      	cmp	r3, #1
 800fee2:	d101      	bne.n	800fee8 <HAL_UARTEx_DisableFifoMode+0x16>
 800fee4:	2302      	movs	r3, #2
 800fee6:	e027      	b.n	800ff38 <HAL_UARTEx_DisableFifoMode+0x66>
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2201      	movs	r2, #1
 800feec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2224      	movs	r2, #36	@ 0x24
 800fef4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	681a      	ldr	r2, [r3, #0]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f022 0201 	bic.w	r2, r2, #1
 800ff0e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ff16:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	68fa      	ldr	r2, [r7, #12]
 800ff24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2220      	movs	r2, #32
 800ff2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2200      	movs	r2, #0
 800ff32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ff36:	2300      	movs	r3, #0
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3714      	adds	r7, #20
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr

0800ff44 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b084      	sub	sp, #16
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
 800ff4c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ff54:	2b01      	cmp	r3, #1
 800ff56:	d101      	bne.n	800ff5c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ff58:	2302      	movs	r3, #2
 800ff5a:	e02d      	b.n	800ffb8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2201      	movs	r2, #1
 800ff60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2224      	movs	r2, #36	@ 0x24
 800ff68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	681a      	ldr	r2, [r3, #0]
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	f022 0201 	bic.w	r2, r2, #1
 800ff82:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	689b      	ldr	r3, [r3, #8]
 800ff8a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	683a      	ldr	r2, [r7, #0]
 800ff94:	430a      	orrs	r2, r1
 800ff96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f000 f84f 	bl	801003c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	68fa      	ldr	r2, [r7, #12]
 800ffa4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2220      	movs	r2, #32
 800ffaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ffb6:	2300      	movs	r3, #0
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3710      	adds	r7, #16
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b084      	sub	sp, #16
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ffd0:	2b01      	cmp	r3, #1
 800ffd2:	d101      	bne.n	800ffd8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ffd4:	2302      	movs	r3, #2
 800ffd6:	e02d      	b.n	8010034 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2201      	movs	r2, #1
 800ffdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2224      	movs	r2, #36	@ 0x24
 800ffe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	681a      	ldr	r2, [r3, #0]
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	f022 0201 	bic.w	r2, r2, #1
 800fffe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	689b      	ldr	r3, [r3, #8]
 8010006:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	683a      	ldr	r2, [r7, #0]
 8010010:	430a      	orrs	r2, r1
 8010012:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f000 f811 	bl	801003c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	68fa      	ldr	r2, [r7, #12]
 8010020:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2220      	movs	r2, #32
 8010026:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2200      	movs	r2, #0
 801002e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010032:	2300      	movs	r3, #0
}
 8010034:	4618      	mov	r0, r3
 8010036:	3710      	adds	r7, #16
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}

0801003c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801003c:	b480      	push	{r7}
 801003e:	b085      	sub	sp, #20
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010048:	2b00      	cmp	r3, #0
 801004a:	d108      	bne.n	801005e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2201      	movs	r2, #1
 8010050:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2201      	movs	r2, #1
 8010058:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801005c:	e031      	b.n	80100c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801005e:	2310      	movs	r3, #16
 8010060:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010062:	2310      	movs	r3, #16
 8010064:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	689b      	ldr	r3, [r3, #8]
 801006c:	0e5b      	lsrs	r3, r3, #25
 801006e:	b2db      	uxtb	r3, r3
 8010070:	f003 0307 	and.w	r3, r3, #7
 8010074:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	689b      	ldr	r3, [r3, #8]
 801007c:	0f5b      	lsrs	r3, r3, #29
 801007e:	b2db      	uxtb	r3, r3
 8010080:	f003 0307 	and.w	r3, r3, #7
 8010084:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010086:	7bbb      	ldrb	r3, [r7, #14]
 8010088:	7b3a      	ldrb	r2, [r7, #12]
 801008a:	4911      	ldr	r1, [pc, #68]	@ (80100d0 <UARTEx_SetNbDataToProcess+0x94>)
 801008c:	5c8a      	ldrb	r2, [r1, r2]
 801008e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010092:	7b3a      	ldrb	r2, [r7, #12]
 8010094:	490f      	ldr	r1, [pc, #60]	@ (80100d4 <UARTEx_SetNbDataToProcess+0x98>)
 8010096:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010098:	fb93 f3f2 	sdiv	r3, r3, r2
 801009c:	b29a      	uxth	r2, r3
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100a4:	7bfb      	ldrb	r3, [r7, #15]
 80100a6:	7b7a      	ldrb	r2, [r7, #13]
 80100a8:	4909      	ldr	r1, [pc, #36]	@ (80100d0 <UARTEx_SetNbDataToProcess+0x94>)
 80100aa:	5c8a      	ldrb	r2, [r1, r2]
 80100ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80100b0:	7b7a      	ldrb	r2, [r7, #13]
 80100b2:	4908      	ldr	r1, [pc, #32]	@ (80100d4 <UARTEx_SetNbDataToProcess+0x98>)
 80100b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80100b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80100ba:	b29a      	uxth	r2, r3
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80100c2:	bf00      	nop
 80100c4:	3714      	adds	r7, #20
 80100c6:	46bd      	mov	sp, r7
 80100c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100cc:	4770      	bx	lr
 80100ce:	bf00      	nop
 80100d0:	08016410 	.word	0x08016410
 80100d4:	08016418 	.word	0x08016418

080100d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80100d8:	b084      	sub	sp, #16
 80100da:	b580      	push	{r7, lr}
 80100dc:	b084      	sub	sp, #16
 80100de:	af00      	add	r7, sp, #0
 80100e0:	6078      	str	r0, [r7, #4]
 80100e2:	f107 001c 	add.w	r0, r7, #28
 80100e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80100ea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80100ee:	2b01      	cmp	r3, #1
 80100f0:	d121      	bne.n	8010136 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	68da      	ldr	r2, [r3, #12]
 8010102:	4b2c      	ldr	r3, [pc, #176]	@ (80101b4 <USB_CoreInit+0xdc>)
 8010104:	4013      	ands	r3, r2
 8010106:	687a      	ldr	r2, [r7, #4]
 8010108:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	68db      	ldr	r3, [r3, #12]
 801010e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010116:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801011a:	2b01      	cmp	r3, #1
 801011c:	d105      	bne.n	801012a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	68db      	ldr	r3, [r3, #12]
 8010122:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	f001 fafa 	bl	8011724 <USB_CoreReset>
 8010130:	4603      	mov	r3, r0
 8010132:	73fb      	strb	r3, [r7, #15]
 8010134:	e01b      	b.n	801016e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	68db      	ldr	r3, [r3, #12]
 801013a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f001 faee 	bl	8011724 <USB_CoreReset>
 8010148:	4603      	mov	r3, r0
 801014a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801014c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010150:	2b00      	cmp	r3, #0
 8010152:	d106      	bne.n	8010162 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010158:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	639a      	str	r2, [r3, #56]	@ 0x38
 8010160:	e005      	b.n	801016e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010166:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801016e:	7fbb      	ldrb	r3, [r7, #30]
 8010170:	2b01      	cmp	r3, #1
 8010172:	d116      	bne.n	80101a2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010178:	b29a      	uxth	r2, r3
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010182:	4b0d      	ldr	r3, [pc, #52]	@ (80101b8 <USB_CoreInit+0xe0>)
 8010184:	4313      	orrs	r3, r2
 8010186:	687a      	ldr	r2, [r7, #4]
 8010188:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	689b      	ldr	r3, [r3, #8]
 801018e:	f043 0206 	orr.w	r2, r3, #6
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	689b      	ldr	r3, [r3, #8]
 801019a:	f043 0220 	orr.w	r2, r3, #32
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80101a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	3710      	adds	r7, #16
 80101a8:	46bd      	mov	sp, r7
 80101aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80101ae:	b004      	add	sp, #16
 80101b0:	4770      	bx	lr
 80101b2:	bf00      	nop
 80101b4:	ffbdffbf 	.word	0xffbdffbf
 80101b8:	03ee0000 	.word	0x03ee0000

080101bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80101bc:	b480      	push	{r7}
 80101be:	b087      	sub	sp, #28
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	60f8      	str	r0, [r7, #12]
 80101c4:	60b9      	str	r1, [r7, #8]
 80101c6:	4613      	mov	r3, r2
 80101c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80101ca:	79fb      	ldrb	r3, [r7, #7]
 80101cc:	2b02      	cmp	r3, #2
 80101ce:	d165      	bne.n	801029c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	4a41      	ldr	r2, [pc, #260]	@ (80102d8 <USB_SetTurnaroundTime+0x11c>)
 80101d4:	4293      	cmp	r3, r2
 80101d6:	d906      	bls.n	80101e6 <USB_SetTurnaroundTime+0x2a>
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	4a40      	ldr	r2, [pc, #256]	@ (80102dc <USB_SetTurnaroundTime+0x120>)
 80101dc:	4293      	cmp	r3, r2
 80101de:	d202      	bcs.n	80101e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80101e0:	230f      	movs	r3, #15
 80101e2:	617b      	str	r3, [r7, #20]
 80101e4:	e062      	b.n	80102ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	4a3c      	ldr	r2, [pc, #240]	@ (80102dc <USB_SetTurnaroundTime+0x120>)
 80101ea:	4293      	cmp	r3, r2
 80101ec:	d306      	bcc.n	80101fc <USB_SetTurnaroundTime+0x40>
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	4a3b      	ldr	r2, [pc, #236]	@ (80102e0 <USB_SetTurnaroundTime+0x124>)
 80101f2:	4293      	cmp	r3, r2
 80101f4:	d202      	bcs.n	80101fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80101f6:	230e      	movs	r3, #14
 80101f8:	617b      	str	r3, [r7, #20]
 80101fa:	e057      	b.n	80102ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	4a38      	ldr	r2, [pc, #224]	@ (80102e0 <USB_SetTurnaroundTime+0x124>)
 8010200:	4293      	cmp	r3, r2
 8010202:	d306      	bcc.n	8010212 <USB_SetTurnaroundTime+0x56>
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	4a37      	ldr	r2, [pc, #220]	@ (80102e4 <USB_SetTurnaroundTime+0x128>)
 8010208:	4293      	cmp	r3, r2
 801020a:	d202      	bcs.n	8010212 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801020c:	230d      	movs	r3, #13
 801020e:	617b      	str	r3, [r7, #20]
 8010210:	e04c      	b.n	80102ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	4a33      	ldr	r2, [pc, #204]	@ (80102e4 <USB_SetTurnaroundTime+0x128>)
 8010216:	4293      	cmp	r3, r2
 8010218:	d306      	bcc.n	8010228 <USB_SetTurnaroundTime+0x6c>
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	4a32      	ldr	r2, [pc, #200]	@ (80102e8 <USB_SetTurnaroundTime+0x12c>)
 801021e:	4293      	cmp	r3, r2
 8010220:	d802      	bhi.n	8010228 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010222:	230c      	movs	r3, #12
 8010224:	617b      	str	r3, [r7, #20]
 8010226:	e041      	b.n	80102ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	4a2f      	ldr	r2, [pc, #188]	@ (80102e8 <USB_SetTurnaroundTime+0x12c>)
 801022c:	4293      	cmp	r3, r2
 801022e:	d906      	bls.n	801023e <USB_SetTurnaroundTime+0x82>
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	4a2e      	ldr	r2, [pc, #184]	@ (80102ec <USB_SetTurnaroundTime+0x130>)
 8010234:	4293      	cmp	r3, r2
 8010236:	d802      	bhi.n	801023e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010238:	230b      	movs	r3, #11
 801023a:	617b      	str	r3, [r7, #20]
 801023c:	e036      	b.n	80102ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	4a2a      	ldr	r2, [pc, #168]	@ (80102ec <USB_SetTurnaroundTime+0x130>)
 8010242:	4293      	cmp	r3, r2
 8010244:	d906      	bls.n	8010254 <USB_SetTurnaroundTime+0x98>
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	4a29      	ldr	r2, [pc, #164]	@ (80102f0 <USB_SetTurnaroundTime+0x134>)
 801024a:	4293      	cmp	r3, r2
 801024c:	d802      	bhi.n	8010254 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801024e:	230a      	movs	r3, #10
 8010250:	617b      	str	r3, [r7, #20]
 8010252:	e02b      	b.n	80102ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	4a26      	ldr	r2, [pc, #152]	@ (80102f0 <USB_SetTurnaroundTime+0x134>)
 8010258:	4293      	cmp	r3, r2
 801025a:	d906      	bls.n	801026a <USB_SetTurnaroundTime+0xae>
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	4a25      	ldr	r2, [pc, #148]	@ (80102f4 <USB_SetTurnaroundTime+0x138>)
 8010260:	4293      	cmp	r3, r2
 8010262:	d202      	bcs.n	801026a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010264:	2309      	movs	r3, #9
 8010266:	617b      	str	r3, [r7, #20]
 8010268:	e020      	b.n	80102ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	4a21      	ldr	r2, [pc, #132]	@ (80102f4 <USB_SetTurnaroundTime+0x138>)
 801026e:	4293      	cmp	r3, r2
 8010270:	d306      	bcc.n	8010280 <USB_SetTurnaroundTime+0xc4>
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	4a20      	ldr	r2, [pc, #128]	@ (80102f8 <USB_SetTurnaroundTime+0x13c>)
 8010276:	4293      	cmp	r3, r2
 8010278:	d802      	bhi.n	8010280 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801027a:	2308      	movs	r3, #8
 801027c:	617b      	str	r3, [r7, #20]
 801027e:	e015      	b.n	80102ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	4a1d      	ldr	r2, [pc, #116]	@ (80102f8 <USB_SetTurnaroundTime+0x13c>)
 8010284:	4293      	cmp	r3, r2
 8010286:	d906      	bls.n	8010296 <USB_SetTurnaroundTime+0xda>
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	4a1c      	ldr	r2, [pc, #112]	@ (80102fc <USB_SetTurnaroundTime+0x140>)
 801028c:	4293      	cmp	r3, r2
 801028e:	d202      	bcs.n	8010296 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010290:	2307      	movs	r3, #7
 8010292:	617b      	str	r3, [r7, #20]
 8010294:	e00a      	b.n	80102ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010296:	2306      	movs	r3, #6
 8010298:	617b      	str	r3, [r7, #20]
 801029a:	e007      	b.n	80102ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801029c:	79fb      	ldrb	r3, [r7, #7]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d102      	bne.n	80102a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80102a2:	2309      	movs	r3, #9
 80102a4:	617b      	str	r3, [r7, #20]
 80102a6:	e001      	b.n	80102ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80102a8:	2309      	movs	r3, #9
 80102aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	68db      	ldr	r3, [r3, #12]
 80102b0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	68da      	ldr	r2, [r3, #12]
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	029b      	lsls	r3, r3, #10
 80102c0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80102c4:	431a      	orrs	r2, r3
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80102ca:	2300      	movs	r3, #0
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	371c      	adds	r7, #28
 80102d0:	46bd      	mov	sp, r7
 80102d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d6:	4770      	bx	lr
 80102d8:	00d8acbf 	.word	0x00d8acbf
 80102dc:	00e4e1c0 	.word	0x00e4e1c0
 80102e0:	00f42400 	.word	0x00f42400
 80102e4:	01067380 	.word	0x01067380
 80102e8:	011a499f 	.word	0x011a499f
 80102ec:	01312cff 	.word	0x01312cff
 80102f0:	014ca43f 	.word	0x014ca43f
 80102f4:	016e3600 	.word	0x016e3600
 80102f8:	01a6ab1f 	.word	0x01a6ab1f
 80102fc:	01e84800 	.word	0x01e84800

08010300 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010300:	b480      	push	{r7}
 8010302:	b083      	sub	sp, #12
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	689b      	ldr	r3, [r3, #8]
 801030c:	f043 0201 	orr.w	r2, r3, #1
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010314:	2300      	movs	r3, #0
}
 8010316:	4618      	mov	r0, r3
 8010318:	370c      	adds	r7, #12
 801031a:	46bd      	mov	sp, r7
 801031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010320:	4770      	bx	lr

08010322 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010322:	b480      	push	{r7}
 8010324:	b083      	sub	sp, #12
 8010326:	af00      	add	r7, sp, #0
 8010328:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	689b      	ldr	r3, [r3, #8]
 801032e:	f023 0201 	bic.w	r2, r3, #1
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010336:	2300      	movs	r3, #0
}
 8010338:	4618      	mov	r0, r3
 801033a:	370c      	adds	r7, #12
 801033c:	46bd      	mov	sp, r7
 801033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010342:	4770      	bx	lr

08010344 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b084      	sub	sp, #16
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	460b      	mov	r3, r1
 801034e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010350:	2300      	movs	r3, #0
 8010352:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	68db      	ldr	r3, [r3, #12]
 8010358:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010360:	78fb      	ldrb	r3, [r7, #3]
 8010362:	2b01      	cmp	r3, #1
 8010364:	d115      	bne.n	8010392 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	68db      	ldr	r3, [r3, #12]
 801036a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010372:	200a      	movs	r0, #10
 8010374:	f7f2 fd98 	bl	8002ea8 <HAL_Delay>
      ms += 10U;
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	330a      	adds	r3, #10
 801037c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	f001 f93f 	bl	8011602 <USB_GetMode>
 8010384:	4603      	mov	r3, r0
 8010386:	2b01      	cmp	r3, #1
 8010388:	d01e      	beq.n	80103c8 <USB_SetCurrentMode+0x84>
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	2bc7      	cmp	r3, #199	@ 0xc7
 801038e:	d9f0      	bls.n	8010372 <USB_SetCurrentMode+0x2e>
 8010390:	e01a      	b.n	80103c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010392:	78fb      	ldrb	r3, [r7, #3]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d115      	bne.n	80103c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	68db      	ldr	r3, [r3, #12]
 801039c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80103a4:	200a      	movs	r0, #10
 80103a6:	f7f2 fd7f 	bl	8002ea8 <HAL_Delay>
      ms += 10U;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	330a      	adds	r3, #10
 80103ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80103b0:	6878      	ldr	r0, [r7, #4]
 80103b2:	f001 f926 	bl	8011602 <USB_GetMode>
 80103b6:	4603      	mov	r3, r0
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d005      	beq.n	80103c8 <USB_SetCurrentMode+0x84>
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	2bc7      	cmp	r3, #199	@ 0xc7
 80103c0:	d9f0      	bls.n	80103a4 <USB_SetCurrentMode+0x60>
 80103c2:	e001      	b.n	80103c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80103c4:	2301      	movs	r3, #1
 80103c6:	e005      	b.n	80103d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	2bc8      	cmp	r3, #200	@ 0xc8
 80103cc:	d101      	bne.n	80103d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80103ce:	2301      	movs	r3, #1
 80103d0:	e000      	b.n	80103d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80103d2:	2300      	movs	r3, #0
}
 80103d4:	4618      	mov	r0, r3
 80103d6:	3710      	adds	r7, #16
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}

080103dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80103dc:	b084      	sub	sp, #16
 80103de:	b580      	push	{r7, lr}
 80103e0:	b086      	sub	sp, #24
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
 80103e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80103ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80103ee:	2300      	movs	r3, #0
 80103f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80103f6:	2300      	movs	r3, #0
 80103f8:	613b      	str	r3, [r7, #16]
 80103fa:	e009      	b.n	8010410 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80103fc:	687a      	ldr	r2, [r7, #4]
 80103fe:	693b      	ldr	r3, [r7, #16]
 8010400:	3340      	adds	r3, #64	@ 0x40
 8010402:	009b      	lsls	r3, r3, #2
 8010404:	4413      	add	r3, r2
 8010406:	2200      	movs	r2, #0
 8010408:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	3301      	adds	r3, #1
 801040e:	613b      	str	r3, [r7, #16]
 8010410:	693b      	ldr	r3, [r7, #16]
 8010412:	2b0e      	cmp	r3, #14
 8010414:	d9f2      	bls.n	80103fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010416:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801041a:	2b00      	cmp	r3, #0
 801041c:	d11c      	bne.n	8010458 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	68fa      	ldr	r2, [r7, #12]
 8010428:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801042c:	f043 0302 	orr.w	r3, r3, #2
 8010430:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010436:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	601a      	str	r2, [r3, #0]
 8010456:	e005      	b.n	8010464 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801045c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801046a:	461a      	mov	r2, r3
 801046c:	2300      	movs	r3, #0
 801046e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010470:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8010474:	2b01      	cmp	r3, #1
 8010476:	d10d      	bne.n	8010494 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010478:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801047c:	2b00      	cmp	r3, #0
 801047e:	d104      	bne.n	801048a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010480:	2100      	movs	r1, #0
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f000 f968 	bl	8010758 <USB_SetDevSpeed>
 8010488:	e008      	b.n	801049c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801048a:	2101      	movs	r1, #1
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f000 f963 	bl	8010758 <USB_SetDevSpeed>
 8010492:	e003      	b.n	801049c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010494:	2103      	movs	r1, #3
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f000 f95e 	bl	8010758 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801049c:	2110      	movs	r1, #16
 801049e:	6878      	ldr	r0, [r7, #4]
 80104a0:	f000 f8fa 	bl	8010698 <USB_FlushTxFifo>
 80104a4:	4603      	mov	r3, r0
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d001      	beq.n	80104ae <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80104aa:	2301      	movs	r3, #1
 80104ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80104ae:	6878      	ldr	r0, [r7, #4]
 80104b0:	f000 f924 	bl	80106fc <USB_FlushRxFifo>
 80104b4:	4603      	mov	r3, r0
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d001      	beq.n	80104be <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80104ba:	2301      	movs	r3, #1
 80104bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80104c4:	461a      	mov	r2, r3
 80104c6:	2300      	movs	r3, #0
 80104c8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80104d0:	461a      	mov	r2, r3
 80104d2:	2300      	movs	r3, #0
 80104d4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80104dc:	461a      	mov	r2, r3
 80104de:	2300      	movs	r3, #0
 80104e0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80104e2:	2300      	movs	r3, #0
 80104e4:	613b      	str	r3, [r7, #16]
 80104e6:	e043      	b.n	8010570 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	015a      	lsls	r2, r3, #5
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	4413      	add	r3, r2
 80104f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80104fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80104fe:	d118      	bne.n	8010532 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d10a      	bne.n	801051c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	015a      	lsls	r2, r3, #5
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	4413      	add	r3, r2
 801050e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010512:	461a      	mov	r2, r3
 8010514:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010518:	6013      	str	r3, [r2, #0]
 801051a:	e013      	b.n	8010544 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	015a      	lsls	r2, r3, #5
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	4413      	add	r3, r2
 8010524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010528:	461a      	mov	r2, r3
 801052a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801052e:	6013      	str	r3, [r2, #0]
 8010530:	e008      	b.n	8010544 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	015a      	lsls	r2, r3, #5
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	4413      	add	r3, r2
 801053a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801053e:	461a      	mov	r2, r3
 8010540:	2300      	movs	r3, #0
 8010542:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	015a      	lsls	r2, r3, #5
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	4413      	add	r3, r2
 801054c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010550:	461a      	mov	r2, r3
 8010552:	2300      	movs	r3, #0
 8010554:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010556:	693b      	ldr	r3, [r7, #16]
 8010558:	015a      	lsls	r2, r3, #5
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	4413      	add	r3, r2
 801055e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010562:	461a      	mov	r2, r3
 8010564:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010568:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801056a:	693b      	ldr	r3, [r7, #16]
 801056c:	3301      	adds	r3, #1
 801056e:	613b      	str	r3, [r7, #16]
 8010570:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010574:	461a      	mov	r2, r3
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	4293      	cmp	r3, r2
 801057a:	d3b5      	bcc.n	80104e8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801057c:	2300      	movs	r3, #0
 801057e:	613b      	str	r3, [r7, #16]
 8010580:	e043      	b.n	801060a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	015a      	lsls	r2, r3, #5
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	4413      	add	r3, r2
 801058a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010594:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010598:	d118      	bne.n	80105cc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d10a      	bne.n	80105b6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80105a0:	693b      	ldr	r3, [r7, #16]
 80105a2:	015a      	lsls	r2, r3, #5
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	4413      	add	r3, r2
 80105a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105ac:	461a      	mov	r2, r3
 80105ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80105b2:	6013      	str	r3, [r2, #0]
 80105b4:	e013      	b.n	80105de <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	015a      	lsls	r2, r3, #5
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	4413      	add	r3, r2
 80105be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105c2:	461a      	mov	r2, r3
 80105c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80105c8:	6013      	str	r3, [r2, #0]
 80105ca:	e008      	b.n	80105de <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80105cc:	693b      	ldr	r3, [r7, #16]
 80105ce:	015a      	lsls	r2, r3, #5
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	4413      	add	r3, r2
 80105d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105d8:	461a      	mov	r2, r3
 80105da:	2300      	movs	r3, #0
 80105dc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	015a      	lsls	r2, r3, #5
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	4413      	add	r3, r2
 80105e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105ea:	461a      	mov	r2, r3
 80105ec:	2300      	movs	r3, #0
 80105ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	015a      	lsls	r2, r3, #5
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	4413      	add	r3, r2
 80105f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105fc:	461a      	mov	r2, r3
 80105fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010602:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010604:	693b      	ldr	r3, [r7, #16]
 8010606:	3301      	adds	r3, #1
 8010608:	613b      	str	r3, [r7, #16]
 801060a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801060e:	461a      	mov	r2, r3
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	4293      	cmp	r3, r2
 8010614:	d3b5      	bcc.n	8010582 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801061c:	691b      	ldr	r3, [r3, #16]
 801061e:	68fa      	ldr	r2, [r7, #12]
 8010620:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010624:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010628:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2200      	movs	r2, #0
 801062e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8010636:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010638:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801063c:	2b00      	cmp	r3, #0
 801063e:	d105      	bne.n	801064c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	699b      	ldr	r3, [r3, #24]
 8010644:	f043 0210 	orr.w	r2, r3, #16
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	699a      	ldr	r2, [r3, #24]
 8010650:	4b0f      	ldr	r3, [pc, #60]	@ (8010690 <USB_DevInit+0x2b4>)
 8010652:	4313      	orrs	r3, r2
 8010654:	687a      	ldr	r2, [r7, #4]
 8010656:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010658:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801065c:	2b00      	cmp	r3, #0
 801065e:	d005      	beq.n	801066c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	699b      	ldr	r3, [r3, #24]
 8010664:	f043 0208 	orr.w	r2, r3, #8
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801066c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010670:	2b01      	cmp	r3, #1
 8010672:	d105      	bne.n	8010680 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	699a      	ldr	r2, [r3, #24]
 8010678:	4b06      	ldr	r3, [pc, #24]	@ (8010694 <USB_DevInit+0x2b8>)
 801067a:	4313      	orrs	r3, r2
 801067c:	687a      	ldr	r2, [r7, #4]
 801067e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010680:	7dfb      	ldrb	r3, [r7, #23]
}
 8010682:	4618      	mov	r0, r3
 8010684:	3718      	adds	r7, #24
 8010686:	46bd      	mov	sp, r7
 8010688:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801068c:	b004      	add	sp, #16
 801068e:	4770      	bx	lr
 8010690:	803c3800 	.word	0x803c3800
 8010694:	40000004 	.word	0x40000004

08010698 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010698:	b480      	push	{r7}
 801069a:	b085      	sub	sp, #20
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
 80106a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80106a2:	2300      	movs	r3, #0
 80106a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	3301      	adds	r3, #1
 80106aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80106b2:	d901      	bls.n	80106b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80106b4:	2303      	movs	r3, #3
 80106b6:	e01b      	b.n	80106f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	691b      	ldr	r3, [r3, #16]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	daf2      	bge.n	80106a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80106c0:	2300      	movs	r3, #0
 80106c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	019b      	lsls	r3, r3, #6
 80106c8:	f043 0220 	orr.w	r2, r3, #32
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	3301      	adds	r3, #1
 80106d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80106dc:	d901      	bls.n	80106e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80106de:	2303      	movs	r3, #3
 80106e0:	e006      	b.n	80106f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	691b      	ldr	r3, [r3, #16]
 80106e6:	f003 0320 	and.w	r3, r3, #32
 80106ea:	2b20      	cmp	r3, #32
 80106ec:	d0f0      	beq.n	80106d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80106ee:	2300      	movs	r3, #0
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	3714      	adds	r7, #20
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr

080106fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80106fc:	b480      	push	{r7}
 80106fe:	b085      	sub	sp, #20
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010704:	2300      	movs	r3, #0
 8010706:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	3301      	adds	r3, #1
 801070c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010714:	d901      	bls.n	801071a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010716:	2303      	movs	r3, #3
 8010718:	e018      	b.n	801074c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	691b      	ldr	r3, [r3, #16]
 801071e:	2b00      	cmp	r3, #0
 8010720:	daf2      	bge.n	8010708 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010722:	2300      	movs	r3, #0
 8010724:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2210      	movs	r2, #16
 801072a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	3301      	adds	r3, #1
 8010730:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010738:	d901      	bls.n	801073e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801073a:	2303      	movs	r3, #3
 801073c:	e006      	b.n	801074c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	691b      	ldr	r3, [r3, #16]
 8010742:	f003 0310 	and.w	r3, r3, #16
 8010746:	2b10      	cmp	r3, #16
 8010748:	d0f0      	beq.n	801072c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801074a:	2300      	movs	r3, #0
}
 801074c:	4618      	mov	r0, r3
 801074e:	3714      	adds	r7, #20
 8010750:	46bd      	mov	sp, r7
 8010752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010756:	4770      	bx	lr

08010758 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010758:	b480      	push	{r7}
 801075a:	b085      	sub	sp, #20
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	460b      	mov	r3, r1
 8010762:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801076e:	681a      	ldr	r2, [r3, #0]
 8010770:	78fb      	ldrb	r3, [r7, #3]
 8010772:	68f9      	ldr	r1, [r7, #12]
 8010774:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010778:	4313      	orrs	r3, r2
 801077a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801077c:	2300      	movs	r3, #0
}
 801077e:	4618      	mov	r0, r3
 8010780:	3714      	adds	r7, #20
 8010782:	46bd      	mov	sp, r7
 8010784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010788:	4770      	bx	lr

0801078a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 801078a:	b480      	push	{r7}
 801078c:	b087      	sub	sp, #28
 801078e:	af00      	add	r7, sp, #0
 8010790:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801079c:	689b      	ldr	r3, [r3, #8]
 801079e:	f003 0306 	and.w	r3, r3, #6
 80107a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d102      	bne.n	80107b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80107aa:	2300      	movs	r3, #0
 80107ac:	75fb      	strb	r3, [r7, #23]
 80107ae:	e00a      	b.n	80107c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	2b02      	cmp	r3, #2
 80107b4:	d002      	beq.n	80107bc <USB_GetDevSpeed+0x32>
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	2b06      	cmp	r3, #6
 80107ba:	d102      	bne.n	80107c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80107bc:	2302      	movs	r3, #2
 80107be:	75fb      	strb	r3, [r7, #23]
 80107c0:	e001      	b.n	80107c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80107c2:	230f      	movs	r3, #15
 80107c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80107c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	371c      	adds	r7, #28
 80107cc:	46bd      	mov	sp, r7
 80107ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d2:	4770      	bx	lr

080107d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80107d4:	b480      	push	{r7}
 80107d6:	b085      	sub	sp, #20
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80107e2:	683b      	ldr	r3, [r7, #0]
 80107e4:	781b      	ldrb	r3, [r3, #0]
 80107e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	785b      	ldrb	r3, [r3, #1]
 80107ec:	2b01      	cmp	r3, #1
 80107ee:	d139      	bne.n	8010864 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107f6:	69da      	ldr	r2, [r3, #28]
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	781b      	ldrb	r3, [r3, #0]
 80107fc:	f003 030f 	and.w	r3, r3, #15
 8010800:	2101      	movs	r1, #1
 8010802:	fa01 f303 	lsl.w	r3, r1, r3
 8010806:	b29b      	uxth	r3, r3
 8010808:	68f9      	ldr	r1, [r7, #12]
 801080a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801080e:	4313      	orrs	r3, r2
 8010810:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	015a      	lsls	r2, r3, #5
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	4413      	add	r3, r2
 801081a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010824:	2b00      	cmp	r3, #0
 8010826:	d153      	bne.n	80108d0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	015a      	lsls	r2, r3, #5
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	4413      	add	r3, r2
 8010830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010834:	681a      	ldr	r2, [r3, #0]
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	689b      	ldr	r3, [r3, #8]
 801083a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	791b      	ldrb	r3, [r3, #4]
 8010842:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010844:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	059b      	lsls	r3, r3, #22
 801084a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801084c:	431a      	orrs	r2, r3
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	0159      	lsls	r1, r3, #5
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	440b      	add	r3, r1
 8010856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801085a:	4619      	mov	r1, r3
 801085c:	4b20      	ldr	r3, [pc, #128]	@ (80108e0 <USB_ActivateEndpoint+0x10c>)
 801085e:	4313      	orrs	r3, r2
 8010860:	600b      	str	r3, [r1, #0]
 8010862:	e035      	b.n	80108d0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801086a:	69da      	ldr	r2, [r3, #28]
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	781b      	ldrb	r3, [r3, #0]
 8010870:	f003 030f 	and.w	r3, r3, #15
 8010874:	2101      	movs	r1, #1
 8010876:	fa01 f303 	lsl.w	r3, r1, r3
 801087a:	041b      	lsls	r3, r3, #16
 801087c:	68f9      	ldr	r1, [r7, #12]
 801087e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010882:	4313      	orrs	r3, r2
 8010884:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010886:	68bb      	ldr	r3, [r7, #8]
 8010888:	015a      	lsls	r2, r3, #5
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	4413      	add	r3, r2
 801088e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010898:	2b00      	cmp	r3, #0
 801089a:	d119      	bne.n	80108d0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801089c:	68bb      	ldr	r3, [r7, #8]
 801089e:	015a      	lsls	r2, r3, #5
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	4413      	add	r3, r2
 80108a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80108a8:	681a      	ldr	r2, [r3, #0]
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	689b      	ldr	r3, [r3, #8]
 80108ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	791b      	ldrb	r3, [r3, #4]
 80108b6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80108b8:	430b      	orrs	r3, r1
 80108ba:	431a      	orrs	r2, r3
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	0159      	lsls	r1, r3, #5
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	440b      	add	r3, r1
 80108c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80108c8:	4619      	mov	r1, r3
 80108ca:	4b05      	ldr	r3, [pc, #20]	@ (80108e0 <USB_ActivateEndpoint+0x10c>)
 80108cc:	4313      	orrs	r3, r2
 80108ce:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80108d0:	2300      	movs	r3, #0
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	3714      	adds	r7, #20
 80108d6:	46bd      	mov	sp, r7
 80108d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108dc:	4770      	bx	lr
 80108de:	bf00      	nop
 80108e0:	10008000 	.word	0x10008000

080108e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80108e4:	b480      	push	{r7}
 80108e6:	b085      	sub	sp, #20
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	781b      	ldrb	r3, [r3, #0]
 80108f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80108f8:	683b      	ldr	r3, [r7, #0]
 80108fa:	785b      	ldrb	r3, [r3, #1]
 80108fc:	2b01      	cmp	r3, #1
 80108fe:	d161      	bne.n	80109c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	015a      	lsls	r2, r3, #5
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	4413      	add	r3, r2
 8010908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010912:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010916:	d11f      	bne.n	8010958 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	015a      	lsls	r2, r3, #5
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	4413      	add	r3, r2
 8010920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	68ba      	ldr	r2, [r7, #8]
 8010928:	0151      	lsls	r1, r2, #5
 801092a:	68fa      	ldr	r2, [r7, #12]
 801092c:	440a      	add	r2, r1
 801092e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010932:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010936:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	015a      	lsls	r2, r3, #5
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	4413      	add	r3, r2
 8010940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	68ba      	ldr	r2, [r7, #8]
 8010948:	0151      	lsls	r1, r2, #5
 801094a:	68fa      	ldr	r2, [r7, #12]
 801094c:	440a      	add	r2, r1
 801094e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010952:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010956:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801095e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	781b      	ldrb	r3, [r3, #0]
 8010964:	f003 030f 	and.w	r3, r3, #15
 8010968:	2101      	movs	r1, #1
 801096a:	fa01 f303 	lsl.w	r3, r1, r3
 801096e:	b29b      	uxth	r3, r3
 8010970:	43db      	mvns	r3, r3
 8010972:	68f9      	ldr	r1, [r7, #12]
 8010974:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010978:	4013      	ands	r3, r2
 801097a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010982:	69da      	ldr	r2, [r3, #28]
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	781b      	ldrb	r3, [r3, #0]
 8010988:	f003 030f 	and.w	r3, r3, #15
 801098c:	2101      	movs	r1, #1
 801098e:	fa01 f303 	lsl.w	r3, r1, r3
 8010992:	b29b      	uxth	r3, r3
 8010994:	43db      	mvns	r3, r3
 8010996:	68f9      	ldr	r1, [r7, #12]
 8010998:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801099c:	4013      	ands	r3, r2
 801099e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	015a      	lsls	r2, r3, #5
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	4413      	add	r3, r2
 80109a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80109ac:	681a      	ldr	r2, [r3, #0]
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	0159      	lsls	r1, r3, #5
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	440b      	add	r3, r1
 80109b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80109ba:	4619      	mov	r1, r3
 80109bc:	4b35      	ldr	r3, [pc, #212]	@ (8010a94 <USB_DeactivateEndpoint+0x1b0>)
 80109be:	4013      	ands	r3, r2
 80109c0:	600b      	str	r3, [r1, #0]
 80109c2:	e060      	b.n	8010a86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80109c4:	68bb      	ldr	r3, [r7, #8]
 80109c6:	015a      	lsls	r2, r3, #5
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	4413      	add	r3, r2
 80109cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80109d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80109da:	d11f      	bne.n	8010a1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80109dc:	68bb      	ldr	r3, [r7, #8]
 80109de:	015a      	lsls	r2, r3, #5
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	4413      	add	r3, r2
 80109e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	68ba      	ldr	r2, [r7, #8]
 80109ec:	0151      	lsls	r1, r2, #5
 80109ee:	68fa      	ldr	r2, [r7, #12]
 80109f0:	440a      	add	r2, r1
 80109f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80109f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80109fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	015a      	lsls	r2, r3, #5
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	4413      	add	r3, r2
 8010a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	68ba      	ldr	r2, [r7, #8]
 8010a0c:	0151      	lsls	r1, r2, #5
 8010a0e:	68fa      	ldr	r2, [r7, #12]
 8010a10:	440a      	add	r2, r1
 8010a12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010a16:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010a1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	f003 030f 	and.w	r3, r3, #15
 8010a2c:	2101      	movs	r1, #1
 8010a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8010a32:	041b      	lsls	r3, r3, #16
 8010a34:	43db      	mvns	r3, r3
 8010a36:	68f9      	ldr	r1, [r7, #12]
 8010a38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010a3c:	4013      	ands	r3, r2
 8010a3e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a46:	69da      	ldr	r2, [r3, #28]
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	f003 030f 	and.w	r3, r3, #15
 8010a50:	2101      	movs	r1, #1
 8010a52:	fa01 f303 	lsl.w	r3, r1, r3
 8010a56:	041b      	lsls	r3, r3, #16
 8010a58:	43db      	mvns	r3, r3
 8010a5a:	68f9      	ldr	r1, [r7, #12]
 8010a5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010a60:	4013      	ands	r3, r2
 8010a62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	015a      	lsls	r2, r3, #5
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	4413      	add	r3, r2
 8010a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a70:	681a      	ldr	r2, [r3, #0]
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	0159      	lsls	r1, r3, #5
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	440b      	add	r3, r1
 8010a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a7e:	4619      	mov	r1, r3
 8010a80:	4b05      	ldr	r3, [pc, #20]	@ (8010a98 <USB_DeactivateEndpoint+0x1b4>)
 8010a82:	4013      	ands	r3, r2
 8010a84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010a86:	2300      	movs	r3, #0
}
 8010a88:	4618      	mov	r0, r3
 8010a8a:	3714      	adds	r7, #20
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a92:	4770      	bx	lr
 8010a94:	ec337800 	.word	0xec337800
 8010a98:	eff37800 	.word	0xeff37800

08010a9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b08a      	sub	sp, #40	@ 0x28
 8010aa0:	af02      	add	r7, sp, #8
 8010aa2:	60f8      	str	r0, [r7, #12]
 8010aa4:	60b9      	str	r1, [r7, #8]
 8010aa6:	4613      	mov	r3, r2
 8010aa8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	781b      	ldrb	r3, [r3, #0]
 8010ab2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010ab4:	68bb      	ldr	r3, [r7, #8]
 8010ab6:	785b      	ldrb	r3, [r3, #1]
 8010ab8:	2b01      	cmp	r3, #1
 8010aba:	f040 8185 	bne.w	8010dc8 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	691b      	ldr	r3, [r3, #16]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d132      	bne.n	8010b2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010ac6:	69bb      	ldr	r3, [r7, #24]
 8010ac8:	015a      	lsls	r2, r3, #5
 8010aca:	69fb      	ldr	r3, [r7, #28]
 8010acc:	4413      	add	r3, r2
 8010ace:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ad2:	691a      	ldr	r2, [r3, #16]
 8010ad4:	69bb      	ldr	r3, [r7, #24]
 8010ad6:	0159      	lsls	r1, r3, #5
 8010ad8:	69fb      	ldr	r3, [r7, #28]
 8010ada:	440b      	add	r3, r1
 8010adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4ba7      	ldr	r3, [pc, #668]	@ (8010d80 <USB_EPStartXfer+0x2e4>)
 8010ae4:	4013      	ands	r3, r2
 8010ae6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010ae8:	69bb      	ldr	r3, [r7, #24]
 8010aea:	015a      	lsls	r2, r3, #5
 8010aec:	69fb      	ldr	r3, [r7, #28]
 8010aee:	4413      	add	r3, r2
 8010af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010af4:	691b      	ldr	r3, [r3, #16]
 8010af6:	69ba      	ldr	r2, [r7, #24]
 8010af8:	0151      	lsls	r1, r2, #5
 8010afa:	69fa      	ldr	r2, [r7, #28]
 8010afc:	440a      	add	r2, r1
 8010afe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010b02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010b06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010b08:	69bb      	ldr	r3, [r7, #24]
 8010b0a:	015a      	lsls	r2, r3, #5
 8010b0c:	69fb      	ldr	r3, [r7, #28]
 8010b0e:	4413      	add	r3, r2
 8010b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b14:	691a      	ldr	r2, [r3, #16]
 8010b16:	69bb      	ldr	r3, [r7, #24]
 8010b18:	0159      	lsls	r1, r3, #5
 8010b1a:	69fb      	ldr	r3, [r7, #28]
 8010b1c:	440b      	add	r3, r1
 8010b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b22:	4619      	mov	r1, r3
 8010b24:	4b97      	ldr	r3, [pc, #604]	@ (8010d84 <USB_EPStartXfer+0x2e8>)
 8010b26:	4013      	ands	r3, r2
 8010b28:	610b      	str	r3, [r1, #16]
 8010b2a:	e097      	b.n	8010c5c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010b2c:	69bb      	ldr	r3, [r7, #24]
 8010b2e:	015a      	lsls	r2, r3, #5
 8010b30:	69fb      	ldr	r3, [r7, #28]
 8010b32:	4413      	add	r3, r2
 8010b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b38:	691a      	ldr	r2, [r3, #16]
 8010b3a:	69bb      	ldr	r3, [r7, #24]
 8010b3c:	0159      	lsls	r1, r3, #5
 8010b3e:	69fb      	ldr	r3, [r7, #28]
 8010b40:	440b      	add	r3, r1
 8010b42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b46:	4619      	mov	r1, r3
 8010b48:	4b8e      	ldr	r3, [pc, #568]	@ (8010d84 <USB_EPStartXfer+0x2e8>)
 8010b4a:	4013      	ands	r3, r2
 8010b4c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010b4e:	69bb      	ldr	r3, [r7, #24]
 8010b50:	015a      	lsls	r2, r3, #5
 8010b52:	69fb      	ldr	r3, [r7, #28]
 8010b54:	4413      	add	r3, r2
 8010b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b5a:	691a      	ldr	r2, [r3, #16]
 8010b5c:	69bb      	ldr	r3, [r7, #24]
 8010b5e:	0159      	lsls	r1, r3, #5
 8010b60:	69fb      	ldr	r3, [r7, #28]
 8010b62:	440b      	add	r3, r1
 8010b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b68:	4619      	mov	r1, r3
 8010b6a:	4b85      	ldr	r3, [pc, #532]	@ (8010d80 <USB_EPStartXfer+0x2e4>)
 8010b6c:	4013      	ands	r3, r2
 8010b6e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8010b70:	69bb      	ldr	r3, [r7, #24]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d11a      	bne.n	8010bac <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8010b76:	68bb      	ldr	r3, [r7, #8]
 8010b78:	691a      	ldr	r2, [r3, #16]
 8010b7a:	68bb      	ldr	r3, [r7, #8]
 8010b7c:	689b      	ldr	r3, [r3, #8]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d903      	bls.n	8010b8a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	689a      	ldr	r2, [r3, #8]
 8010b86:	68bb      	ldr	r3, [r7, #8]
 8010b88:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010b8a:	69bb      	ldr	r3, [r7, #24]
 8010b8c:	015a      	lsls	r2, r3, #5
 8010b8e:	69fb      	ldr	r3, [r7, #28]
 8010b90:	4413      	add	r3, r2
 8010b92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b96:	691b      	ldr	r3, [r3, #16]
 8010b98:	69ba      	ldr	r2, [r7, #24]
 8010b9a:	0151      	lsls	r1, r2, #5
 8010b9c:	69fa      	ldr	r2, [r7, #28]
 8010b9e:	440a      	add	r2, r1
 8010ba0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010ba4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010ba8:	6113      	str	r3, [r2, #16]
 8010baa:	e044      	b.n	8010c36 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	691a      	ldr	r2, [r3, #16]
 8010bb0:	68bb      	ldr	r3, [r7, #8]
 8010bb2:	689b      	ldr	r3, [r3, #8]
 8010bb4:	4413      	add	r3, r2
 8010bb6:	1e5a      	subs	r2, r3, #1
 8010bb8:	68bb      	ldr	r3, [r7, #8]
 8010bba:	689b      	ldr	r3, [r3, #8]
 8010bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8010bc0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8010bc2:	69bb      	ldr	r3, [r7, #24]
 8010bc4:	015a      	lsls	r2, r3, #5
 8010bc6:	69fb      	ldr	r3, [r7, #28]
 8010bc8:	4413      	add	r3, r2
 8010bca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010bce:	691a      	ldr	r2, [r3, #16]
 8010bd0:	8afb      	ldrh	r3, [r7, #22]
 8010bd2:	04d9      	lsls	r1, r3, #19
 8010bd4:	4b6c      	ldr	r3, [pc, #432]	@ (8010d88 <USB_EPStartXfer+0x2ec>)
 8010bd6:	400b      	ands	r3, r1
 8010bd8:	69b9      	ldr	r1, [r7, #24]
 8010bda:	0148      	lsls	r0, r1, #5
 8010bdc:	69f9      	ldr	r1, [r7, #28]
 8010bde:	4401      	add	r1, r0
 8010be0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010be4:	4313      	orrs	r3, r2
 8010be6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	791b      	ldrb	r3, [r3, #4]
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	d122      	bne.n	8010c36 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010bf0:	69bb      	ldr	r3, [r7, #24]
 8010bf2:	015a      	lsls	r2, r3, #5
 8010bf4:	69fb      	ldr	r3, [r7, #28]
 8010bf6:	4413      	add	r3, r2
 8010bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010bfc:	691b      	ldr	r3, [r3, #16]
 8010bfe:	69ba      	ldr	r2, [r7, #24]
 8010c00:	0151      	lsls	r1, r2, #5
 8010c02:	69fa      	ldr	r2, [r7, #28]
 8010c04:	440a      	add	r2, r1
 8010c06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010c0a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8010c0e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8010c10:	69bb      	ldr	r3, [r7, #24]
 8010c12:	015a      	lsls	r2, r3, #5
 8010c14:	69fb      	ldr	r3, [r7, #28]
 8010c16:	4413      	add	r3, r2
 8010c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c1c:	691a      	ldr	r2, [r3, #16]
 8010c1e:	8afb      	ldrh	r3, [r7, #22]
 8010c20:	075b      	lsls	r3, r3, #29
 8010c22:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8010c26:	69b9      	ldr	r1, [r7, #24]
 8010c28:	0148      	lsls	r0, r1, #5
 8010c2a:	69f9      	ldr	r1, [r7, #28]
 8010c2c:	4401      	add	r1, r0
 8010c2e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010c32:	4313      	orrs	r3, r2
 8010c34:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010c36:	69bb      	ldr	r3, [r7, #24]
 8010c38:	015a      	lsls	r2, r3, #5
 8010c3a:	69fb      	ldr	r3, [r7, #28]
 8010c3c:	4413      	add	r3, r2
 8010c3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c42:	691a      	ldr	r2, [r3, #16]
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	691b      	ldr	r3, [r3, #16]
 8010c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010c4c:	69b9      	ldr	r1, [r7, #24]
 8010c4e:	0148      	lsls	r0, r1, #5
 8010c50:	69f9      	ldr	r1, [r7, #28]
 8010c52:	4401      	add	r1, r0
 8010c54:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010c58:	4313      	orrs	r3, r2
 8010c5a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010c5c:	79fb      	ldrb	r3, [r7, #7]
 8010c5e:	2b01      	cmp	r3, #1
 8010c60:	d14b      	bne.n	8010cfa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010c62:	68bb      	ldr	r3, [r7, #8]
 8010c64:	69db      	ldr	r3, [r3, #28]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d009      	beq.n	8010c7e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010c6a:	69bb      	ldr	r3, [r7, #24]
 8010c6c:	015a      	lsls	r2, r3, #5
 8010c6e:	69fb      	ldr	r3, [r7, #28]
 8010c70:	4413      	add	r3, r2
 8010c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c76:	461a      	mov	r2, r3
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	69db      	ldr	r3, [r3, #28]
 8010c7c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	791b      	ldrb	r3, [r3, #4]
 8010c82:	2b01      	cmp	r3, #1
 8010c84:	d128      	bne.n	8010cd8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010c86:	69fb      	ldr	r3, [r7, #28]
 8010c88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c8c:	689b      	ldr	r3, [r3, #8]
 8010c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d110      	bne.n	8010cb8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010c96:	69bb      	ldr	r3, [r7, #24]
 8010c98:	015a      	lsls	r2, r3, #5
 8010c9a:	69fb      	ldr	r3, [r7, #28]
 8010c9c:	4413      	add	r3, r2
 8010c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	69ba      	ldr	r2, [r7, #24]
 8010ca6:	0151      	lsls	r1, r2, #5
 8010ca8:	69fa      	ldr	r2, [r7, #28]
 8010caa:	440a      	add	r2, r1
 8010cac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010cb0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010cb4:	6013      	str	r3, [r2, #0]
 8010cb6:	e00f      	b.n	8010cd8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010cb8:	69bb      	ldr	r3, [r7, #24]
 8010cba:	015a      	lsls	r2, r3, #5
 8010cbc:	69fb      	ldr	r3, [r7, #28]
 8010cbe:	4413      	add	r3, r2
 8010cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	69ba      	ldr	r2, [r7, #24]
 8010cc8:	0151      	lsls	r1, r2, #5
 8010cca:	69fa      	ldr	r2, [r7, #28]
 8010ccc:	440a      	add	r2, r1
 8010cce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010cd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010cd6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010cd8:	69bb      	ldr	r3, [r7, #24]
 8010cda:	015a      	lsls	r2, r3, #5
 8010cdc:	69fb      	ldr	r3, [r7, #28]
 8010cde:	4413      	add	r3, r2
 8010ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	69ba      	ldr	r2, [r7, #24]
 8010ce8:	0151      	lsls	r1, r2, #5
 8010cea:	69fa      	ldr	r2, [r7, #28]
 8010cec:	440a      	add	r2, r1
 8010cee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010cf2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010cf6:	6013      	str	r3, [r2, #0]
 8010cf8:	e169      	b.n	8010fce <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010cfa:	69bb      	ldr	r3, [r7, #24]
 8010cfc:	015a      	lsls	r2, r3, #5
 8010cfe:	69fb      	ldr	r3, [r7, #28]
 8010d00:	4413      	add	r3, r2
 8010d02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	69ba      	ldr	r2, [r7, #24]
 8010d0a:	0151      	lsls	r1, r2, #5
 8010d0c:	69fa      	ldr	r2, [r7, #28]
 8010d0e:	440a      	add	r2, r1
 8010d10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010d14:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010d18:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	791b      	ldrb	r3, [r3, #4]
 8010d1e:	2b01      	cmp	r3, #1
 8010d20:	d015      	beq.n	8010d4e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	691b      	ldr	r3, [r3, #16]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	f000 8151 	beq.w	8010fce <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010d2c:	69fb      	ldr	r3, [r7, #28]
 8010d2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010d32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	781b      	ldrb	r3, [r3, #0]
 8010d38:	f003 030f 	and.w	r3, r3, #15
 8010d3c:	2101      	movs	r1, #1
 8010d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8010d42:	69f9      	ldr	r1, [r7, #28]
 8010d44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010d48:	4313      	orrs	r3, r2
 8010d4a:	634b      	str	r3, [r1, #52]	@ 0x34
 8010d4c:	e13f      	b.n	8010fce <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010d4e:	69fb      	ldr	r3, [r7, #28]
 8010d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010d54:	689b      	ldr	r3, [r3, #8]
 8010d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d116      	bne.n	8010d8c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010d5e:	69bb      	ldr	r3, [r7, #24]
 8010d60:	015a      	lsls	r2, r3, #5
 8010d62:	69fb      	ldr	r3, [r7, #28]
 8010d64:	4413      	add	r3, r2
 8010d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	69ba      	ldr	r2, [r7, #24]
 8010d6e:	0151      	lsls	r1, r2, #5
 8010d70:	69fa      	ldr	r2, [r7, #28]
 8010d72:	440a      	add	r2, r1
 8010d74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010d78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010d7c:	6013      	str	r3, [r2, #0]
 8010d7e:	e015      	b.n	8010dac <USB_EPStartXfer+0x310>
 8010d80:	e007ffff 	.word	0xe007ffff
 8010d84:	fff80000 	.word	0xfff80000
 8010d88:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010d8c:	69bb      	ldr	r3, [r7, #24]
 8010d8e:	015a      	lsls	r2, r3, #5
 8010d90:	69fb      	ldr	r3, [r7, #28]
 8010d92:	4413      	add	r3, r2
 8010d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	69ba      	ldr	r2, [r7, #24]
 8010d9c:	0151      	lsls	r1, r2, #5
 8010d9e:	69fa      	ldr	r2, [r7, #28]
 8010da0:	440a      	add	r2, r1
 8010da2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010daa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010dac:	68bb      	ldr	r3, [r7, #8]
 8010dae:	68d9      	ldr	r1, [r3, #12]
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	781a      	ldrb	r2, [r3, #0]
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	691b      	ldr	r3, [r3, #16]
 8010db8:	b298      	uxth	r0, r3
 8010dba:	79fb      	ldrb	r3, [r7, #7]
 8010dbc:	9300      	str	r3, [sp, #0]
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	68f8      	ldr	r0, [r7, #12]
 8010dc2:	f000 f9b9 	bl	8011138 <USB_WritePacket>
 8010dc6:	e102      	b.n	8010fce <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010dc8:	69bb      	ldr	r3, [r7, #24]
 8010dca:	015a      	lsls	r2, r3, #5
 8010dcc:	69fb      	ldr	r3, [r7, #28]
 8010dce:	4413      	add	r3, r2
 8010dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010dd4:	691a      	ldr	r2, [r3, #16]
 8010dd6:	69bb      	ldr	r3, [r7, #24]
 8010dd8:	0159      	lsls	r1, r3, #5
 8010dda:	69fb      	ldr	r3, [r7, #28]
 8010ddc:	440b      	add	r3, r1
 8010dde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010de2:	4619      	mov	r1, r3
 8010de4:	4b7c      	ldr	r3, [pc, #496]	@ (8010fd8 <USB_EPStartXfer+0x53c>)
 8010de6:	4013      	ands	r3, r2
 8010de8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010dea:	69bb      	ldr	r3, [r7, #24]
 8010dec:	015a      	lsls	r2, r3, #5
 8010dee:	69fb      	ldr	r3, [r7, #28]
 8010df0:	4413      	add	r3, r2
 8010df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010df6:	691a      	ldr	r2, [r3, #16]
 8010df8:	69bb      	ldr	r3, [r7, #24]
 8010dfa:	0159      	lsls	r1, r3, #5
 8010dfc:	69fb      	ldr	r3, [r7, #28]
 8010dfe:	440b      	add	r3, r1
 8010e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010e04:	4619      	mov	r1, r3
 8010e06:	4b75      	ldr	r3, [pc, #468]	@ (8010fdc <USB_EPStartXfer+0x540>)
 8010e08:	4013      	ands	r3, r2
 8010e0a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8010e0c:	69bb      	ldr	r3, [r7, #24]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d12f      	bne.n	8010e72 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	691b      	ldr	r3, [r3, #16]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d003      	beq.n	8010e22 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	689a      	ldr	r2, [r3, #8]
 8010e1e:	68bb      	ldr	r3, [r7, #8]
 8010e20:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	689a      	ldr	r2, [r3, #8]
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8010e2a:	69bb      	ldr	r3, [r7, #24]
 8010e2c:	015a      	lsls	r2, r3, #5
 8010e2e:	69fb      	ldr	r3, [r7, #28]
 8010e30:	4413      	add	r3, r2
 8010e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010e36:	691a      	ldr	r2, [r3, #16]
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	6a1b      	ldr	r3, [r3, #32]
 8010e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010e40:	69b9      	ldr	r1, [r7, #24]
 8010e42:	0148      	lsls	r0, r1, #5
 8010e44:	69f9      	ldr	r1, [r7, #28]
 8010e46:	4401      	add	r1, r0
 8010e48:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010e4c:	4313      	orrs	r3, r2
 8010e4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010e50:	69bb      	ldr	r3, [r7, #24]
 8010e52:	015a      	lsls	r2, r3, #5
 8010e54:	69fb      	ldr	r3, [r7, #28]
 8010e56:	4413      	add	r3, r2
 8010e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010e5c:	691b      	ldr	r3, [r3, #16]
 8010e5e:	69ba      	ldr	r2, [r7, #24]
 8010e60:	0151      	lsls	r1, r2, #5
 8010e62:	69fa      	ldr	r2, [r7, #28]
 8010e64:	440a      	add	r2, r1
 8010e66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010e6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010e6e:	6113      	str	r3, [r2, #16]
 8010e70:	e05f      	b.n	8010f32 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8010e72:	68bb      	ldr	r3, [r7, #8]
 8010e74:	691b      	ldr	r3, [r3, #16]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d123      	bne.n	8010ec2 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010e7a:	69bb      	ldr	r3, [r7, #24]
 8010e7c:	015a      	lsls	r2, r3, #5
 8010e7e:	69fb      	ldr	r3, [r7, #28]
 8010e80:	4413      	add	r3, r2
 8010e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010e86:	691a      	ldr	r2, [r3, #16]
 8010e88:	68bb      	ldr	r3, [r7, #8]
 8010e8a:	689b      	ldr	r3, [r3, #8]
 8010e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010e90:	69b9      	ldr	r1, [r7, #24]
 8010e92:	0148      	lsls	r0, r1, #5
 8010e94:	69f9      	ldr	r1, [r7, #28]
 8010e96:	4401      	add	r1, r0
 8010e98:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010e9c:	4313      	orrs	r3, r2
 8010e9e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010ea0:	69bb      	ldr	r3, [r7, #24]
 8010ea2:	015a      	lsls	r2, r3, #5
 8010ea4:	69fb      	ldr	r3, [r7, #28]
 8010ea6:	4413      	add	r3, r2
 8010ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010eac:	691b      	ldr	r3, [r3, #16]
 8010eae:	69ba      	ldr	r2, [r7, #24]
 8010eb0:	0151      	lsls	r1, r2, #5
 8010eb2:	69fa      	ldr	r2, [r7, #28]
 8010eb4:	440a      	add	r2, r1
 8010eb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010eba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010ebe:	6113      	str	r3, [r2, #16]
 8010ec0:	e037      	b.n	8010f32 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010ec2:	68bb      	ldr	r3, [r7, #8]
 8010ec4:	691a      	ldr	r2, [r3, #16]
 8010ec6:	68bb      	ldr	r3, [r7, #8]
 8010ec8:	689b      	ldr	r3, [r3, #8]
 8010eca:	4413      	add	r3, r2
 8010ecc:	1e5a      	subs	r2, r3, #1
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	689b      	ldr	r3, [r3, #8]
 8010ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ed6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	689b      	ldr	r3, [r3, #8]
 8010edc:	8afa      	ldrh	r2, [r7, #22]
 8010ede:	fb03 f202 	mul.w	r2, r3, r2
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010ee6:	69bb      	ldr	r3, [r7, #24]
 8010ee8:	015a      	lsls	r2, r3, #5
 8010eea:	69fb      	ldr	r3, [r7, #28]
 8010eec:	4413      	add	r3, r2
 8010eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ef2:	691a      	ldr	r2, [r3, #16]
 8010ef4:	8afb      	ldrh	r3, [r7, #22]
 8010ef6:	04d9      	lsls	r1, r3, #19
 8010ef8:	4b39      	ldr	r3, [pc, #228]	@ (8010fe0 <USB_EPStartXfer+0x544>)
 8010efa:	400b      	ands	r3, r1
 8010efc:	69b9      	ldr	r1, [r7, #24]
 8010efe:	0148      	lsls	r0, r1, #5
 8010f00:	69f9      	ldr	r1, [r7, #28]
 8010f02:	4401      	add	r1, r0
 8010f04:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010f08:	4313      	orrs	r3, r2
 8010f0a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8010f0c:	69bb      	ldr	r3, [r7, #24]
 8010f0e:	015a      	lsls	r2, r3, #5
 8010f10:	69fb      	ldr	r3, [r7, #28]
 8010f12:	4413      	add	r3, r2
 8010f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010f18:	691a      	ldr	r2, [r3, #16]
 8010f1a:	68bb      	ldr	r3, [r7, #8]
 8010f1c:	6a1b      	ldr	r3, [r3, #32]
 8010f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010f22:	69b9      	ldr	r1, [r7, #24]
 8010f24:	0148      	lsls	r0, r1, #5
 8010f26:	69f9      	ldr	r1, [r7, #28]
 8010f28:	4401      	add	r1, r0
 8010f2a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010f2e:	4313      	orrs	r3, r2
 8010f30:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8010f32:	79fb      	ldrb	r3, [r7, #7]
 8010f34:	2b01      	cmp	r3, #1
 8010f36:	d10d      	bne.n	8010f54 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	68db      	ldr	r3, [r3, #12]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d009      	beq.n	8010f54 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	68d9      	ldr	r1, [r3, #12]
 8010f44:	69bb      	ldr	r3, [r7, #24]
 8010f46:	015a      	lsls	r2, r3, #5
 8010f48:	69fb      	ldr	r3, [r7, #28]
 8010f4a:	4413      	add	r3, r2
 8010f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010f50:	460a      	mov	r2, r1
 8010f52:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	791b      	ldrb	r3, [r3, #4]
 8010f58:	2b01      	cmp	r3, #1
 8010f5a:	d128      	bne.n	8010fae <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010f5c:	69fb      	ldr	r3, [r7, #28]
 8010f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f62:	689b      	ldr	r3, [r3, #8]
 8010f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d110      	bne.n	8010f8e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010f6c:	69bb      	ldr	r3, [r7, #24]
 8010f6e:	015a      	lsls	r2, r3, #5
 8010f70:	69fb      	ldr	r3, [r7, #28]
 8010f72:	4413      	add	r3, r2
 8010f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	69ba      	ldr	r2, [r7, #24]
 8010f7c:	0151      	lsls	r1, r2, #5
 8010f7e:	69fa      	ldr	r2, [r7, #28]
 8010f80:	440a      	add	r2, r1
 8010f82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010f86:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010f8a:	6013      	str	r3, [r2, #0]
 8010f8c:	e00f      	b.n	8010fae <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010f8e:	69bb      	ldr	r3, [r7, #24]
 8010f90:	015a      	lsls	r2, r3, #5
 8010f92:	69fb      	ldr	r3, [r7, #28]
 8010f94:	4413      	add	r3, r2
 8010f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	69ba      	ldr	r2, [r7, #24]
 8010f9e:	0151      	lsls	r1, r2, #5
 8010fa0:	69fa      	ldr	r2, [r7, #28]
 8010fa2:	440a      	add	r2, r1
 8010fa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010fac:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010fae:	69bb      	ldr	r3, [r7, #24]
 8010fb0:	015a      	lsls	r2, r3, #5
 8010fb2:	69fb      	ldr	r3, [r7, #28]
 8010fb4:	4413      	add	r3, r2
 8010fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	69ba      	ldr	r2, [r7, #24]
 8010fbe:	0151      	lsls	r1, r2, #5
 8010fc0:	69fa      	ldr	r2, [r7, #28]
 8010fc2:	440a      	add	r2, r1
 8010fc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010fc8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010fcc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010fce:	2300      	movs	r3, #0
}
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	3720      	adds	r7, #32
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}
 8010fd8:	fff80000 	.word	0xfff80000
 8010fdc:	e007ffff 	.word	0xe007ffff
 8010fe0:	1ff80000 	.word	0x1ff80000

08010fe4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b087      	sub	sp, #28
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010ffa:	683b      	ldr	r3, [r7, #0]
 8010ffc:	785b      	ldrb	r3, [r3, #1]
 8010ffe:	2b01      	cmp	r3, #1
 8011000:	d14a      	bne.n	8011098 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	781b      	ldrb	r3, [r3, #0]
 8011006:	015a      	lsls	r2, r3, #5
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	4413      	add	r3, r2
 801100c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011016:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801101a:	f040 8086 	bne.w	801112a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	781b      	ldrb	r3, [r3, #0]
 8011022:	015a      	lsls	r2, r3, #5
 8011024:	693b      	ldr	r3, [r7, #16]
 8011026:	4413      	add	r3, r2
 8011028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	683a      	ldr	r2, [r7, #0]
 8011030:	7812      	ldrb	r2, [r2, #0]
 8011032:	0151      	lsls	r1, r2, #5
 8011034:	693a      	ldr	r2, [r7, #16]
 8011036:	440a      	add	r2, r1
 8011038:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801103c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011040:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	781b      	ldrb	r3, [r3, #0]
 8011046:	015a      	lsls	r2, r3, #5
 8011048:	693b      	ldr	r3, [r7, #16]
 801104a:	4413      	add	r3, r2
 801104c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	683a      	ldr	r2, [r7, #0]
 8011054:	7812      	ldrb	r2, [r2, #0]
 8011056:	0151      	lsls	r1, r2, #5
 8011058:	693a      	ldr	r2, [r7, #16]
 801105a:	440a      	add	r2, r1
 801105c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011060:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011064:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	3301      	adds	r3, #1
 801106a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011072:	4293      	cmp	r3, r2
 8011074:	d902      	bls.n	801107c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8011076:	2301      	movs	r3, #1
 8011078:	75fb      	strb	r3, [r7, #23]
          break;
 801107a:	e056      	b.n	801112a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	781b      	ldrb	r3, [r3, #0]
 8011080:	015a      	lsls	r2, r3, #5
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	4413      	add	r3, r2
 8011086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011090:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011094:	d0e7      	beq.n	8011066 <USB_EPStopXfer+0x82>
 8011096:	e048      	b.n	801112a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011098:	683b      	ldr	r3, [r7, #0]
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	015a      	lsls	r2, r3, #5
 801109e:	693b      	ldr	r3, [r7, #16]
 80110a0:	4413      	add	r3, r2
 80110a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80110ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80110b0:	d13b      	bne.n	801112a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	781b      	ldrb	r3, [r3, #0]
 80110b6:	015a      	lsls	r2, r3, #5
 80110b8:	693b      	ldr	r3, [r7, #16]
 80110ba:	4413      	add	r3, r2
 80110bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	683a      	ldr	r2, [r7, #0]
 80110c4:	7812      	ldrb	r2, [r2, #0]
 80110c6:	0151      	lsls	r1, r2, #5
 80110c8:	693a      	ldr	r2, [r7, #16]
 80110ca:	440a      	add	r2, r1
 80110cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80110d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80110d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	015a      	lsls	r2, r3, #5
 80110dc:	693b      	ldr	r3, [r7, #16]
 80110de:	4413      	add	r3, r2
 80110e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	683a      	ldr	r2, [r7, #0]
 80110e8:	7812      	ldrb	r2, [r2, #0]
 80110ea:	0151      	lsls	r1, r2, #5
 80110ec:	693a      	ldr	r2, [r7, #16]
 80110ee:	440a      	add	r2, r1
 80110f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80110f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80110f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	3301      	adds	r3, #1
 80110fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011106:	4293      	cmp	r3, r2
 8011108:	d902      	bls.n	8011110 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801110a:	2301      	movs	r3, #1
 801110c:	75fb      	strb	r3, [r7, #23]
          break;
 801110e:	e00c      	b.n	801112a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	781b      	ldrb	r3, [r3, #0]
 8011114:	015a      	lsls	r2, r3, #5
 8011116:	693b      	ldr	r3, [r7, #16]
 8011118:	4413      	add	r3, r2
 801111a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011124:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011128:	d0e7      	beq.n	80110fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801112a:	7dfb      	ldrb	r3, [r7, #23]
}
 801112c:	4618      	mov	r0, r3
 801112e:	371c      	adds	r7, #28
 8011130:	46bd      	mov	sp, r7
 8011132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011136:	4770      	bx	lr

08011138 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011138:	b480      	push	{r7}
 801113a:	b089      	sub	sp, #36	@ 0x24
 801113c:	af00      	add	r7, sp, #0
 801113e:	60f8      	str	r0, [r7, #12]
 8011140:	60b9      	str	r1, [r7, #8]
 8011142:	4611      	mov	r1, r2
 8011144:	461a      	mov	r2, r3
 8011146:	460b      	mov	r3, r1
 8011148:	71fb      	strb	r3, [r7, #7]
 801114a:	4613      	mov	r3, r2
 801114c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011152:	68bb      	ldr	r3, [r7, #8]
 8011154:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8011156:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801115a:	2b00      	cmp	r3, #0
 801115c:	d123      	bne.n	80111a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801115e:	88bb      	ldrh	r3, [r7, #4]
 8011160:	3303      	adds	r3, #3
 8011162:	089b      	lsrs	r3, r3, #2
 8011164:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011166:	2300      	movs	r3, #0
 8011168:	61bb      	str	r3, [r7, #24]
 801116a:	e018      	b.n	801119e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801116c:	79fb      	ldrb	r3, [r7, #7]
 801116e:	031a      	lsls	r2, r3, #12
 8011170:	697b      	ldr	r3, [r7, #20]
 8011172:	4413      	add	r3, r2
 8011174:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011178:	461a      	mov	r2, r3
 801117a:	69fb      	ldr	r3, [r7, #28]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011180:	69fb      	ldr	r3, [r7, #28]
 8011182:	3301      	adds	r3, #1
 8011184:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011186:	69fb      	ldr	r3, [r7, #28]
 8011188:	3301      	adds	r3, #1
 801118a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801118c:	69fb      	ldr	r3, [r7, #28]
 801118e:	3301      	adds	r3, #1
 8011190:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011192:	69fb      	ldr	r3, [r7, #28]
 8011194:	3301      	adds	r3, #1
 8011196:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011198:	69bb      	ldr	r3, [r7, #24]
 801119a:	3301      	adds	r3, #1
 801119c:	61bb      	str	r3, [r7, #24]
 801119e:	69ba      	ldr	r2, [r7, #24]
 80111a0:	693b      	ldr	r3, [r7, #16]
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d3e2      	bcc.n	801116c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80111a6:	2300      	movs	r3, #0
}
 80111a8:	4618      	mov	r0, r3
 80111aa:	3724      	adds	r7, #36	@ 0x24
 80111ac:	46bd      	mov	sp, r7
 80111ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b2:	4770      	bx	lr

080111b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80111b4:	b480      	push	{r7}
 80111b6:	b08b      	sub	sp, #44	@ 0x2c
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	60f8      	str	r0, [r7, #12]
 80111bc:	60b9      	str	r1, [r7, #8]
 80111be:	4613      	mov	r3, r2
 80111c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80111ca:	88fb      	ldrh	r3, [r7, #6]
 80111cc:	089b      	lsrs	r3, r3, #2
 80111ce:	b29b      	uxth	r3, r3
 80111d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80111d2:	88fb      	ldrh	r3, [r7, #6]
 80111d4:	f003 0303 	and.w	r3, r3, #3
 80111d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80111da:	2300      	movs	r3, #0
 80111dc:	623b      	str	r3, [r7, #32]
 80111de:	e014      	b.n	801120a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80111e0:	69bb      	ldr	r3, [r7, #24]
 80111e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80111e6:	681a      	ldr	r2, [r3, #0]
 80111e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80111ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111ee:	3301      	adds	r3, #1
 80111f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80111f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111f4:	3301      	adds	r3, #1
 80111f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80111f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111fa:	3301      	adds	r3, #1
 80111fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80111fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011200:	3301      	adds	r3, #1
 8011202:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8011204:	6a3b      	ldr	r3, [r7, #32]
 8011206:	3301      	adds	r3, #1
 8011208:	623b      	str	r3, [r7, #32]
 801120a:	6a3a      	ldr	r2, [r7, #32]
 801120c:	697b      	ldr	r3, [r7, #20]
 801120e:	429a      	cmp	r2, r3
 8011210:	d3e6      	bcc.n	80111e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011212:	8bfb      	ldrh	r3, [r7, #30]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d01e      	beq.n	8011256 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011218:	2300      	movs	r3, #0
 801121a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801121c:	69bb      	ldr	r3, [r7, #24]
 801121e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011222:	461a      	mov	r2, r3
 8011224:	f107 0310 	add.w	r3, r7, #16
 8011228:	6812      	ldr	r2, [r2, #0]
 801122a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801122c:	693a      	ldr	r2, [r7, #16]
 801122e:	6a3b      	ldr	r3, [r7, #32]
 8011230:	b2db      	uxtb	r3, r3
 8011232:	00db      	lsls	r3, r3, #3
 8011234:	fa22 f303 	lsr.w	r3, r2, r3
 8011238:	b2da      	uxtb	r2, r3
 801123a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801123c:	701a      	strb	r2, [r3, #0]
      i++;
 801123e:	6a3b      	ldr	r3, [r7, #32]
 8011240:	3301      	adds	r3, #1
 8011242:	623b      	str	r3, [r7, #32]
      pDest++;
 8011244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011246:	3301      	adds	r3, #1
 8011248:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801124a:	8bfb      	ldrh	r3, [r7, #30]
 801124c:	3b01      	subs	r3, #1
 801124e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011250:	8bfb      	ldrh	r3, [r7, #30]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d1ea      	bne.n	801122c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011258:	4618      	mov	r0, r3
 801125a:	372c      	adds	r7, #44	@ 0x2c
 801125c:	46bd      	mov	sp, r7
 801125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011262:	4770      	bx	lr

08011264 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011264:	b480      	push	{r7}
 8011266:	b085      	sub	sp, #20
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	781b      	ldrb	r3, [r3, #0]
 8011276:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	785b      	ldrb	r3, [r3, #1]
 801127c:	2b01      	cmp	r3, #1
 801127e:	d12c      	bne.n	80112da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011280:	68bb      	ldr	r3, [r7, #8]
 8011282:	015a      	lsls	r2, r3, #5
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	4413      	add	r3, r2
 8011288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	2b00      	cmp	r3, #0
 8011290:	db12      	blt.n	80112b8 <USB_EPSetStall+0x54>
 8011292:	68bb      	ldr	r3, [r7, #8]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d00f      	beq.n	80112b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	015a      	lsls	r2, r3, #5
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	4413      	add	r3, r2
 80112a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	68ba      	ldr	r2, [r7, #8]
 80112a8:	0151      	lsls	r1, r2, #5
 80112aa:	68fa      	ldr	r2, [r7, #12]
 80112ac:	440a      	add	r2, r1
 80112ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80112b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80112b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80112b8:	68bb      	ldr	r3, [r7, #8]
 80112ba:	015a      	lsls	r2, r3, #5
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	4413      	add	r3, r2
 80112c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	68ba      	ldr	r2, [r7, #8]
 80112c8:	0151      	lsls	r1, r2, #5
 80112ca:	68fa      	ldr	r2, [r7, #12]
 80112cc:	440a      	add	r2, r1
 80112ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80112d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80112d6:	6013      	str	r3, [r2, #0]
 80112d8:	e02b      	b.n	8011332 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80112da:	68bb      	ldr	r3, [r7, #8]
 80112dc:	015a      	lsls	r2, r3, #5
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	4413      	add	r3, r2
 80112e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	db12      	blt.n	8011312 <USB_EPSetStall+0xae>
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d00f      	beq.n	8011312 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	015a      	lsls	r2, r3, #5
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	4413      	add	r3, r2
 80112fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	68ba      	ldr	r2, [r7, #8]
 8011302:	0151      	lsls	r1, r2, #5
 8011304:	68fa      	ldr	r2, [r7, #12]
 8011306:	440a      	add	r2, r1
 8011308:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801130c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8011310:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	015a      	lsls	r2, r3, #5
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	4413      	add	r3, r2
 801131a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	68ba      	ldr	r2, [r7, #8]
 8011322:	0151      	lsls	r1, r2, #5
 8011324:	68fa      	ldr	r2, [r7, #12]
 8011326:	440a      	add	r2, r1
 8011328:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801132c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011330:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011332:	2300      	movs	r3, #0
}
 8011334:	4618      	mov	r0, r3
 8011336:	3714      	adds	r7, #20
 8011338:	46bd      	mov	sp, r7
 801133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133e:	4770      	bx	lr

08011340 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011340:	b480      	push	{r7}
 8011342:	b085      	sub	sp, #20
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
 8011348:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	781b      	ldrb	r3, [r3, #0]
 8011352:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	785b      	ldrb	r3, [r3, #1]
 8011358:	2b01      	cmp	r3, #1
 801135a:	d128      	bne.n	80113ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	015a      	lsls	r2, r3, #5
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	4413      	add	r3, r2
 8011364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	68ba      	ldr	r2, [r7, #8]
 801136c:	0151      	lsls	r1, r2, #5
 801136e:	68fa      	ldr	r2, [r7, #12]
 8011370:	440a      	add	r2, r1
 8011372:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011376:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801137a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	791b      	ldrb	r3, [r3, #4]
 8011380:	2b03      	cmp	r3, #3
 8011382:	d003      	beq.n	801138c <USB_EPClearStall+0x4c>
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	791b      	ldrb	r3, [r3, #4]
 8011388:	2b02      	cmp	r3, #2
 801138a:	d138      	bne.n	80113fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801138c:	68bb      	ldr	r3, [r7, #8]
 801138e:	015a      	lsls	r2, r3, #5
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	4413      	add	r3, r2
 8011394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	68ba      	ldr	r2, [r7, #8]
 801139c:	0151      	lsls	r1, r2, #5
 801139e:	68fa      	ldr	r2, [r7, #12]
 80113a0:	440a      	add	r2, r1
 80113a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80113a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80113aa:	6013      	str	r3, [r2, #0]
 80113ac:	e027      	b.n	80113fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	015a      	lsls	r2, r3, #5
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	4413      	add	r3, r2
 80113b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	68ba      	ldr	r2, [r7, #8]
 80113be:	0151      	lsls	r1, r2, #5
 80113c0:	68fa      	ldr	r2, [r7, #12]
 80113c2:	440a      	add	r2, r1
 80113c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80113c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80113cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80113ce:	683b      	ldr	r3, [r7, #0]
 80113d0:	791b      	ldrb	r3, [r3, #4]
 80113d2:	2b03      	cmp	r3, #3
 80113d4:	d003      	beq.n	80113de <USB_EPClearStall+0x9e>
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	791b      	ldrb	r3, [r3, #4]
 80113da:	2b02      	cmp	r3, #2
 80113dc:	d10f      	bne.n	80113fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	015a      	lsls	r2, r3, #5
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	4413      	add	r3, r2
 80113e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	68ba      	ldr	r2, [r7, #8]
 80113ee:	0151      	lsls	r1, r2, #5
 80113f0:	68fa      	ldr	r2, [r7, #12]
 80113f2:	440a      	add	r2, r1
 80113f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80113f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80113fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80113fe:	2300      	movs	r3, #0
}
 8011400:	4618      	mov	r0, r3
 8011402:	3714      	adds	r7, #20
 8011404:	46bd      	mov	sp, r7
 8011406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140a:	4770      	bx	lr

0801140c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801140c:	b480      	push	{r7}
 801140e:	b085      	sub	sp, #20
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
 8011414:	460b      	mov	r3, r1
 8011416:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	68fa      	ldr	r2, [r7, #12]
 8011426:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801142a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 801142e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011436:	681a      	ldr	r2, [r3, #0]
 8011438:	78fb      	ldrb	r3, [r7, #3]
 801143a:	011b      	lsls	r3, r3, #4
 801143c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8011440:	68f9      	ldr	r1, [r7, #12]
 8011442:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011446:	4313      	orrs	r3, r2
 8011448:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801144a:	2300      	movs	r3, #0
}
 801144c:	4618      	mov	r0, r3
 801144e:	3714      	adds	r7, #20
 8011450:	46bd      	mov	sp, r7
 8011452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011456:	4770      	bx	lr

08011458 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8011458:	b480      	push	{r7}
 801145a:	b085      	sub	sp, #20
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	68fa      	ldr	r2, [r7, #12]
 801146e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011472:	f023 0303 	bic.w	r3, r3, #3
 8011476:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801147e:	685b      	ldr	r3, [r3, #4]
 8011480:	68fa      	ldr	r2, [r7, #12]
 8011482:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011486:	f023 0302 	bic.w	r3, r3, #2
 801148a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801148c:	2300      	movs	r3, #0
}
 801148e:	4618      	mov	r0, r3
 8011490:	3714      	adds	r7, #20
 8011492:	46bd      	mov	sp, r7
 8011494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011498:	4770      	bx	lr

0801149a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801149a:	b480      	push	{r7}
 801149c:	b085      	sub	sp, #20
 801149e:	af00      	add	r7, sp, #0
 80114a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	68fa      	ldr	r2, [r7, #12]
 80114b0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80114b4:	f023 0303 	bic.w	r3, r3, #3
 80114b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80114c0:	685b      	ldr	r3, [r3, #4]
 80114c2:	68fa      	ldr	r2, [r7, #12]
 80114c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80114c8:	f043 0302 	orr.w	r3, r3, #2
 80114cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80114ce:	2300      	movs	r3, #0
}
 80114d0:	4618      	mov	r0, r3
 80114d2:	3714      	adds	r7, #20
 80114d4:	46bd      	mov	sp, r7
 80114d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114da:	4770      	bx	lr

080114dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80114dc:	b480      	push	{r7}
 80114de:	b085      	sub	sp, #20
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	695b      	ldr	r3, [r3, #20]
 80114e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	699b      	ldr	r3, [r3, #24]
 80114ee:	68fa      	ldr	r2, [r7, #12]
 80114f0:	4013      	ands	r3, r2
 80114f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80114f4:	68fb      	ldr	r3, [r7, #12]
}
 80114f6:	4618      	mov	r0, r3
 80114f8:	3714      	adds	r7, #20
 80114fa:	46bd      	mov	sp, r7
 80114fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011500:	4770      	bx	lr

08011502 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011502:	b480      	push	{r7}
 8011504:	b085      	sub	sp, #20
 8011506:	af00      	add	r7, sp, #0
 8011508:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011514:	699b      	ldr	r3, [r3, #24]
 8011516:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801151e:	69db      	ldr	r3, [r3, #28]
 8011520:	68ba      	ldr	r2, [r7, #8]
 8011522:	4013      	ands	r3, r2
 8011524:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	0c1b      	lsrs	r3, r3, #16
}
 801152a:	4618      	mov	r0, r3
 801152c:	3714      	adds	r7, #20
 801152e:	46bd      	mov	sp, r7
 8011530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011534:	4770      	bx	lr

08011536 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011536:	b480      	push	{r7}
 8011538:	b085      	sub	sp, #20
 801153a:	af00      	add	r7, sp, #0
 801153c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011548:	699b      	ldr	r3, [r3, #24]
 801154a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011552:	69db      	ldr	r3, [r3, #28]
 8011554:	68ba      	ldr	r2, [r7, #8]
 8011556:	4013      	ands	r3, r2
 8011558:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801155a:	68bb      	ldr	r3, [r7, #8]
 801155c:	b29b      	uxth	r3, r3
}
 801155e:	4618      	mov	r0, r3
 8011560:	3714      	adds	r7, #20
 8011562:	46bd      	mov	sp, r7
 8011564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011568:	4770      	bx	lr

0801156a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801156a:	b480      	push	{r7}
 801156c:	b085      	sub	sp, #20
 801156e:	af00      	add	r7, sp, #0
 8011570:	6078      	str	r0, [r7, #4]
 8011572:	460b      	mov	r3, r1
 8011574:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801157a:	78fb      	ldrb	r3, [r7, #3]
 801157c:	015a      	lsls	r2, r3, #5
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	4413      	add	r3, r2
 8011582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011586:	689b      	ldr	r3, [r3, #8]
 8011588:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011590:	695b      	ldr	r3, [r3, #20]
 8011592:	68ba      	ldr	r2, [r7, #8]
 8011594:	4013      	ands	r3, r2
 8011596:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011598:	68bb      	ldr	r3, [r7, #8]
}
 801159a:	4618      	mov	r0, r3
 801159c:	3714      	adds	r7, #20
 801159e:	46bd      	mov	sp, r7
 80115a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a4:	4770      	bx	lr

080115a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80115a6:	b480      	push	{r7}
 80115a8:	b087      	sub	sp, #28
 80115aa:	af00      	add	r7, sp, #0
 80115ac:	6078      	str	r0, [r7, #4]
 80115ae:	460b      	mov	r3, r1
 80115b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80115b6:	697b      	ldr	r3, [r7, #20]
 80115b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80115bc:	691b      	ldr	r3, [r3, #16]
 80115be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80115c0:	697b      	ldr	r3, [r7, #20]
 80115c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80115c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80115c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80115ca:	78fb      	ldrb	r3, [r7, #3]
 80115cc:	f003 030f 	and.w	r3, r3, #15
 80115d0:	68fa      	ldr	r2, [r7, #12]
 80115d2:	fa22 f303 	lsr.w	r3, r2, r3
 80115d6:	01db      	lsls	r3, r3, #7
 80115d8:	b2db      	uxtb	r3, r3
 80115da:	693a      	ldr	r2, [r7, #16]
 80115dc:	4313      	orrs	r3, r2
 80115de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80115e0:	78fb      	ldrb	r3, [r7, #3]
 80115e2:	015a      	lsls	r2, r3, #5
 80115e4:	697b      	ldr	r3, [r7, #20]
 80115e6:	4413      	add	r3, r2
 80115e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115ec:	689b      	ldr	r3, [r3, #8]
 80115ee:	693a      	ldr	r2, [r7, #16]
 80115f0:	4013      	ands	r3, r2
 80115f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80115f4:	68bb      	ldr	r3, [r7, #8]
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	371c      	adds	r7, #28
 80115fa:	46bd      	mov	sp, r7
 80115fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011600:	4770      	bx	lr

08011602 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011602:	b480      	push	{r7}
 8011604:	b083      	sub	sp, #12
 8011606:	af00      	add	r7, sp, #0
 8011608:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	695b      	ldr	r3, [r3, #20]
 801160e:	f003 0301 	and.w	r3, r3, #1
}
 8011612:	4618      	mov	r0, r3
 8011614:	370c      	adds	r7, #12
 8011616:	46bd      	mov	sp, r7
 8011618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161c:	4770      	bx	lr
	...

08011620 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8011620:	b480      	push	{r7}
 8011622:	b085      	sub	sp, #20
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011632:	681a      	ldr	r2, [r3, #0]
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801163a:	4619      	mov	r1, r3
 801163c:	4b09      	ldr	r3, [pc, #36]	@ (8011664 <USB_ActivateSetup+0x44>)
 801163e:	4013      	ands	r3, r2
 8011640:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011648:	685b      	ldr	r3, [r3, #4]
 801164a:	68fa      	ldr	r2, [r7, #12]
 801164c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011654:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011656:	2300      	movs	r3, #0
}
 8011658:	4618      	mov	r0, r3
 801165a:	3714      	adds	r7, #20
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr
 8011664:	fffff800 	.word	0xfffff800

08011668 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8011668:	b480      	push	{r7}
 801166a:	b087      	sub	sp, #28
 801166c:	af00      	add	r7, sp, #0
 801166e:	60f8      	str	r0, [r7, #12]
 8011670:	460b      	mov	r3, r1
 8011672:	607a      	str	r2, [r7, #4]
 8011674:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	333c      	adds	r3, #60	@ 0x3c
 801167e:	3304      	adds	r3, #4
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011684:	693b      	ldr	r3, [r7, #16]
 8011686:	4a26      	ldr	r2, [pc, #152]	@ (8011720 <USB_EP0_OutStart+0xb8>)
 8011688:	4293      	cmp	r3, r2
 801168a:	d90a      	bls.n	80116a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011698:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801169c:	d101      	bne.n	80116a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801169e:	2300      	movs	r3, #0
 80116a0:	e037      	b.n	8011712 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80116a2:	697b      	ldr	r3, [r7, #20]
 80116a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80116a8:	461a      	mov	r2, r3
 80116aa:	2300      	movs	r3, #0
 80116ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80116ae:	697b      	ldr	r3, [r7, #20]
 80116b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80116b4:	691b      	ldr	r3, [r3, #16]
 80116b6:	697a      	ldr	r2, [r7, #20]
 80116b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80116bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80116c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80116c8:	691b      	ldr	r3, [r3, #16]
 80116ca:	697a      	ldr	r2, [r7, #20]
 80116cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80116d0:	f043 0318 	orr.w	r3, r3, #24
 80116d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80116d6:	697b      	ldr	r3, [r7, #20]
 80116d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80116dc:	691b      	ldr	r3, [r3, #16]
 80116de:	697a      	ldr	r2, [r7, #20]
 80116e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80116e4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80116e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80116ea:	7afb      	ldrb	r3, [r7, #11]
 80116ec:	2b01      	cmp	r3, #1
 80116ee:	d10f      	bne.n	8011710 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80116f0:	697b      	ldr	r3, [r7, #20]
 80116f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80116f6:	461a      	mov	r2, r3
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80116fc:	697b      	ldr	r3, [r7, #20]
 80116fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	697a      	ldr	r2, [r7, #20]
 8011706:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801170a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 801170e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011710:	2300      	movs	r3, #0
}
 8011712:	4618      	mov	r0, r3
 8011714:	371c      	adds	r7, #28
 8011716:	46bd      	mov	sp, r7
 8011718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171c:	4770      	bx	lr
 801171e:	bf00      	nop
 8011720:	4f54300a 	.word	0x4f54300a

08011724 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011724:	b480      	push	{r7}
 8011726:	b085      	sub	sp, #20
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801172c:	2300      	movs	r3, #0
 801172e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	3301      	adds	r3, #1
 8011734:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801173c:	d901      	bls.n	8011742 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801173e:	2303      	movs	r3, #3
 8011740:	e01b      	b.n	801177a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	691b      	ldr	r3, [r3, #16]
 8011746:	2b00      	cmp	r3, #0
 8011748:	daf2      	bge.n	8011730 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801174a:	2300      	movs	r3, #0
 801174c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	691b      	ldr	r3, [r3, #16]
 8011752:	f043 0201 	orr.w	r2, r3, #1
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	3301      	adds	r3, #1
 801175e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011766:	d901      	bls.n	801176c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011768:	2303      	movs	r3, #3
 801176a:	e006      	b.n	801177a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	691b      	ldr	r3, [r3, #16]
 8011770:	f003 0301 	and.w	r3, r3, #1
 8011774:	2b01      	cmp	r3, #1
 8011776:	d0f0      	beq.n	801175a <USB_CoreReset+0x36>

  return HAL_OK;
 8011778:	2300      	movs	r3, #0
}
 801177a:	4618      	mov	r0, r3
 801177c:	3714      	adds	r7, #20
 801177e:	46bd      	mov	sp, r7
 8011780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011784:	4770      	bx	lr
	...

08011788 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b084      	sub	sp, #16
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
 8011790:	460b      	mov	r3, r1
 8011792:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011794:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8011798:	f002 fd12 	bl	80141c0 <USBD_static_malloc>
 801179c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d109      	bne.n	80117b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	32b0      	adds	r2, #176	@ 0xb0
 80117ae:	2100      	movs	r1, #0
 80117b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80117b4:	2302      	movs	r3, #2
 80117b6:	e0d4      	b.n	8011962 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80117b8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80117bc:	2100      	movs	r1, #0
 80117be:	68f8      	ldr	r0, [r7, #12]
 80117c0:	f003 ffc6 	bl	8015750 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	32b0      	adds	r2, #176	@ 0xb0
 80117ce:	68f9      	ldr	r1, [r7, #12]
 80117d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	32b0      	adds	r2, #176	@ 0xb0
 80117de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	7c1b      	ldrb	r3, [r3, #16]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d138      	bne.n	8011862 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80117f0:	4b5e      	ldr	r3, [pc, #376]	@ (801196c <USBD_CDC_Init+0x1e4>)
 80117f2:	7819      	ldrb	r1, [r3, #0]
 80117f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80117f8:	2202      	movs	r2, #2
 80117fa:	6878      	ldr	r0, [r7, #4]
 80117fc:	f002 fbbd 	bl	8013f7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011800:	4b5a      	ldr	r3, [pc, #360]	@ (801196c <USBD_CDC_Init+0x1e4>)
 8011802:	781b      	ldrb	r3, [r3, #0]
 8011804:	f003 020f 	and.w	r2, r3, #15
 8011808:	6879      	ldr	r1, [r7, #4]
 801180a:	4613      	mov	r3, r2
 801180c:	009b      	lsls	r3, r3, #2
 801180e:	4413      	add	r3, r2
 8011810:	009b      	lsls	r3, r3, #2
 8011812:	440b      	add	r3, r1
 8011814:	3324      	adds	r3, #36	@ 0x24
 8011816:	2201      	movs	r2, #1
 8011818:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801181a:	4b55      	ldr	r3, [pc, #340]	@ (8011970 <USBD_CDC_Init+0x1e8>)
 801181c:	7819      	ldrb	r1, [r3, #0]
 801181e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011822:	2202      	movs	r2, #2
 8011824:	6878      	ldr	r0, [r7, #4]
 8011826:	f002 fba8 	bl	8013f7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801182a:	4b51      	ldr	r3, [pc, #324]	@ (8011970 <USBD_CDC_Init+0x1e8>)
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	f003 020f 	and.w	r2, r3, #15
 8011832:	6879      	ldr	r1, [r7, #4]
 8011834:	4613      	mov	r3, r2
 8011836:	009b      	lsls	r3, r3, #2
 8011838:	4413      	add	r3, r2
 801183a:	009b      	lsls	r3, r3, #2
 801183c:	440b      	add	r3, r1
 801183e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011842:	2201      	movs	r2, #1
 8011844:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011846:	4b4b      	ldr	r3, [pc, #300]	@ (8011974 <USBD_CDC_Init+0x1ec>)
 8011848:	781b      	ldrb	r3, [r3, #0]
 801184a:	f003 020f 	and.w	r2, r3, #15
 801184e:	6879      	ldr	r1, [r7, #4]
 8011850:	4613      	mov	r3, r2
 8011852:	009b      	lsls	r3, r3, #2
 8011854:	4413      	add	r3, r2
 8011856:	009b      	lsls	r3, r3, #2
 8011858:	440b      	add	r3, r1
 801185a:	3326      	adds	r3, #38	@ 0x26
 801185c:	2210      	movs	r2, #16
 801185e:	801a      	strh	r2, [r3, #0]
 8011860:	e035      	b.n	80118ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011862:	4b42      	ldr	r3, [pc, #264]	@ (801196c <USBD_CDC_Init+0x1e4>)
 8011864:	7819      	ldrb	r1, [r3, #0]
 8011866:	2340      	movs	r3, #64	@ 0x40
 8011868:	2202      	movs	r2, #2
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f002 fb85 	bl	8013f7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011870:	4b3e      	ldr	r3, [pc, #248]	@ (801196c <USBD_CDC_Init+0x1e4>)
 8011872:	781b      	ldrb	r3, [r3, #0]
 8011874:	f003 020f 	and.w	r2, r3, #15
 8011878:	6879      	ldr	r1, [r7, #4]
 801187a:	4613      	mov	r3, r2
 801187c:	009b      	lsls	r3, r3, #2
 801187e:	4413      	add	r3, r2
 8011880:	009b      	lsls	r3, r3, #2
 8011882:	440b      	add	r3, r1
 8011884:	3324      	adds	r3, #36	@ 0x24
 8011886:	2201      	movs	r2, #1
 8011888:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801188a:	4b39      	ldr	r3, [pc, #228]	@ (8011970 <USBD_CDC_Init+0x1e8>)
 801188c:	7819      	ldrb	r1, [r3, #0]
 801188e:	2340      	movs	r3, #64	@ 0x40
 8011890:	2202      	movs	r2, #2
 8011892:	6878      	ldr	r0, [r7, #4]
 8011894:	f002 fb71 	bl	8013f7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011898:	4b35      	ldr	r3, [pc, #212]	@ (8011970 <USBD_CDC_Init+0x1e8>)
 801189a:	781b      	ldrb	r3, [r3, #0]
 801189c:	f003 020f 	and.w	r2, r3, #15
 80118a0:	6879      	ldr	r1, [r7, #4]
 80118a2:	4613      	mov	r3, r2
 80118a4:	009b      	lsls	r3, r3, #2
 80118a6:	4413      	add	r3, r2
 80118a8:	009b      	lsls	r3, r3, #2
 80118aa:	440b      	add	r3, r1
 80118ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80118b0:	2201      	movs	r2, #1
 80118b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80118b4:	4b2f      	ldr	r3, [pc, #188]	@ (8011974 <USBD_CDC_Init+0x1ec>)
 80118b6:	781b      	ldrb	r3, [r3, #0]
 80118b8:	f003 020f 	and.w	r2, r3, #15
 80118bc:	6879      	ldr	r1, [r7, #4]
 80118be:	4613      	mov	r3, r2
 80118c0:	009b      	lsls	r3, r3, #2
 80118c2:	4413      	add	r3, r2
 80118c4:	009b      	lsls	r3, r3, #2
 80118c6:	440b      	add	r3, r1
 80118c8:	3326      	adds	r3, #38	@ 0x26
 80118ca:	2210      	movs	r2, #16
 80118cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80118ce:	4b29      	ldr	r3, [pc, #164]	@ (8011974 <USBD_CDC_Init+0x1ec>)
 80118d0:	7819      	ldrb	r1, [r3, #0]
 80118d2:	2308      	movs	r3, #8
 80118d4:	2203      	movs	r2, #3
 80118d6:	6878      	ldr	r0, [r7, #4]
 80118d8:	f002 fb4f 	bl	8013f7a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80118dc:	4b25      	ldr	r3, [pc, #148]	@ (8011974 <USBD_CDC_Init+0x1ec>)
 80118de:	781b      	ldrb	r3, [r3, #0]
 80118e0:	f003 020f 	and.w	r2, r3, #15
 80118e4:	6879      	ldr	r1, [r7, #4]
 80118e6:	4613      	mov	r3, r2
 80118e8:	009b      	lsls	r3, r3, #2
 80118ea:	4413      	add	r3, r2
 80118ec:	009b      	lsls	r3, r3, #2
 80118ee:	440b      	add	r3, r1
 80118f0:	3324      	adds	r3, #36	@ 0x24
 80118f2:	2201      	movs	r2, #1
 80118f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	2200      	movs	r2, #0
 80118fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011904:	687a      	ldr	r2, [r7, #4]
 8011906:	33b0      	adds	r3, #176	@ 0xb0
 8011908:	009b      	lsls	r3, r3, #2
 801190a:	4413      	add	r3, r2
 801190c:	685b      	ldr	r3, [r3, #4]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	2200      	movs	r2, #0
 8011916:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	2200      	movs	r2, #0
 801191e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8011928:	2b00      	cmp	r3, #0
 801192a:	d101      	bne.n	8011930 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801192c:	2302      	movs	r3, #2
 801192e:	e018      	b.n	8011962 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	7c1b      	ldrb	r3, [r3, #16]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d10a      	bne.n	801194e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011938:	4b0d      	ldr	r3, [pc, #52]	@ (8011970 <USBD_CDC_Init+0x1e8>)
 801193a:	7819      	ldrb	r1, [r3, #0]
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011942:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f002 fc06 	bl	8014158 <USBD_LL_PrepareReceive>
 801194c:	e008      	b.n	8011960 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801194e:	4b08      	ldr	r3, [pc, #32]	@ (8011970 <USBD_CDC_Init+0x1e8>)
 8011950:	7819      	ldrb	r1, [r3, #0]
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011958:	2340      	movs	r3, #64	@ 0x40
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f002 fbfc 	bl	8014158 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011960:	2300      	movs	r3, #0
}
 8011962:	4618      	mov	r0, r3
 8011964:	3710      	adds	r7, #16
 8011966:	46bd      	mov	sp, r7
 8011968:	bd80      	pop	{r7, pc}
 801196a:	bf00      	nop
 801196c:	24000097 	.word	0x24000097
 8011970:	24000098 	.word	0x24000098
 8011974:	24000099 	.word	0x24000099

08011978 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b082      	sub	sp, #8
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
 8011980:	460b      	mov	r3, r1
 8011982:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8011984:	4b3a      	ldr	r3, [pc, #232]	@ (8011a70 <USBD_CDC_DeInit+0xf8>)
 8011986:	781b      	ldrb	r3, [r3, #0]
 8011988:	4619      	mov	r1, r3
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	f002 fb1b 	bl	8013fc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8011990:	4b37      	ldr	r3, [pc, #220]	@ (8011a70 <USBD_CDC_DeInit+0xf8>)
 8011992:	781b      	ldrb	r3, [r3, #0]
 8011994:	f003 020f 	and.w	r2, r3, #15
 8011998:	6879      	ldr	r1, [r7, #4]
 801199a:	4613      	mov	r3, r2
 801199c:	009b      	lsls	r3, r3, #2
 801199e:	4413      	add	r3, r2
 80119a0:	009b      	lsls	r3, r3, #2
 80119a2:	440b      	add	r3, r1
 80119a4:	3324      	adds	r3, #36	@ 0x24
 80119a6:	2200      	movs	r2, #0
 80119a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80119aa:	4b32      	ldr	r3, [pc, #200]	@ (8011a74 <USBD_CDC_DeInit+0xfc>)
 80119ac:	781b      	ldrb	r3, [r3, #0]
 80119ae:	4619      	mov	r1, r3
 80119b0:	6878      	ldr	r0, [r7, #4]
 80119b2:	f002 fb08 	bl	8013fc6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80119b6:	4b2f      	ldr	r3, [pc, #188]	@ (8011a74 <USBD_CDC_DeInit+0xfc>)
 80119b8:	781b      	ldrb	r3, [r3, #0]
 80119ba:	f003 020f 	and.w	r2, r3, #15
 80119be:	6879      	ldr	r1, [r7, #4]
 80119c0:	4613      	mov	r3, r2
 80119c2:	009b      	lsls	r3, r3, #2
 80119c4:	4413      	add	r3, r2
 80119c6:	009b      	lsls	r3, r3, #2
 80119c8:	440b      	add	r3, r1
 80119ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80119ce:	2200      	movs	r2, #0
 80119d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80119d2:	4b29      	ldr	r3, [pc, #164]	@ (8011a78 <USBD_CDC_DeInit+0x100>)
 80119d4:	781b      	ldrb	r3, [r3, #0]
 80119d6:	4619      	mov	r1, r3
 80119d8:	6878      	ldr	r0, [r7, #4]
 80119da:	f002 faf4 	bl	8013fc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80119de:	4b26      	ldr	r3, [pc, #152]	@ (8011a78 <USBD_CDC_DeInit+0x100>)
 80119e0:	781b      	ldrb	r3, [r3, #0]
 80119e2:	f003 020f 	and.w	r2, r3, #15
 80119e6:	6879      	ldr	r1, [r7, #4]
 80119e8:	4613      	mov	r3, r2
 80119ea:	009b      	lsls	r3, r3, #2
 80119ec:	4413      	add	r3, r2
 80119ee:	009b      	lsls	r3, r3, #2
 80119f0:	440b      	add	r3, r1
 80119f2:	3324      	adds	r3, #36	@ 0x24
 80119f4:	2200      	movs	r2, #0
 80119f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80119f8:	4b1f      	ldr	r3, [pc, #124]	@ (8011a78 <USBD_CDC_DeInit+0x100>)
 80119fa:	781b      	ldrb	r3, [r3, #0]
 80119fc:	f003 020f 	and.w	r2, r3, #15
 8011a00:	6879      	ldr	r1, [r7, #4]
 8011a02:	4613      	mov	r3, r2
 8011a04:	009b      	lsls	r3, r3, #2
 8011a06:	4413      	add	r3, r2
 8011a08:	009b      	lsls	r3, r3, #2
 8011a0a:	440b      	add	r3, r1
 8011a0c:	3326      	adds	r3, #38	@ 0x26
 8011a0e:	2200      	movs	r2, #0
 8011a10:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	32b0      	adds	r2, #176	@ 0xb0
 8011a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d01f      	beq.n	8011a64 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011a2a:	687a      	ldr	r2, [r7, #4]
 8011a2c:	33b0      	adds	r3, #176	@ 0xb0
 8011a2e:	009b      	lsls	r3, r3, #2
 8011a30:	4413      	add	r3, r2
 8011a32:	685b      	ldr	r3, [r3, #4]
 8011a34:	685b      	ldr	r3, [r3, #4]
 8011a36:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	32b0      	adds	r2, #176	@ 0xb0
 8011a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a46:	4618      	mov	r0, r3
 8011a48:	f002 fbc8 	bl	80141dc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	32b0      	adds	r2, #176	@ 0xb0
 8011a56:	2100      	movs	r1, #0
 8011a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2200      	movs	r2, #0
 8011a60:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011a64:	2300      	movs	r3, #0
}
 8011a66:	4618      	mov	r0, r3
 8011a68:	3708      	adds	r7, #8
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}
 8011a6e:	bf00      	nop
 8011a70:	24000097 	.word	0x24000097
 8011a74:	24000098 	.word	0x24000098
 8011a78:	24000099 	.word	0x24000099

08011a7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b086      	sub	sp, #24
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	32b0      	adds	r2, #176	@ 0xb0
 8011a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a94:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8011a96:	2300      	movs	r3, #0
 8011a98:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011aa2:	693b      	ldr	r3, [r7, #16]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d101      	bne.n	8011aac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8011aa8:	2303      	movs	r3, #3
 8011aaa:	e0bf      	b.n	8011c2c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	781b      	ldrb	r3, [r3, #0]
 8011ab0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d050      	beq.n	8011b5a <USBD_CDC_Setup+0xde>
 8011ab8:	2b20      	cmp	r3, #32
 8011aba:	f040 80af 	bne.w	8011c1c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011abe:	683b      	ldr	r3, [r7, #0]
 8011ac0:	88db      	ldrh	r3, [r3, #6]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d03a      	beq.n	8011b3c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	781b      	ldrb	r3, [r3, #0]
 8011aca:	b25b      	sxtb	r3, r3
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	da1b      	bge.n	8011b08 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011ad6:	687a      	ldr	r2, [r7, #4]
 8011ad8:	33b0      	adds	r3, #176	@ 0xb0
 8011ada:	009b      	lsls	r3, r3, #2
 8011adc:	4413      	add	r3, r2
 8011ade:	685b      	ldr	r3, [r3, #4]
 8011ae0:	689b      	ldr	r3, [r3, #8]
 8011ae2:	683a      	ldr	r2, [r7, #0]
 8011ae4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8011ae6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011ae8:	683a      	ldr	r2, [r7, #0]
 8011aea:	88d2      	ldrh	r2, [r2, #6]
 8011aec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011aee:	683b      	ldr	r3, [r7, #0]
 8011af0:	88db      	ldrh	r3, [r3, #6]
 8011af2:	2b07      	cmp	r3, #7
 8011af4:	bf28      	it	cs
 8011af6:	2307      	movcs	r3, #7
 8011af8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8011afa:	693b      	ldr	r3, [r7, #16]
 8011afc:	89fa      	ldrh	r2, [r7, #14]
 8011afe:	4619      	mov	r1, r3
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f001 fdbd 	bl	8013680 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8011b06:	e090      	b.n	8011c2a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8011b08:	683b      	ldr	r3, [r7, #0]
 8011b0a:	785a      	ldrb	r2, [r3, #1]
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8011b12:	683b      	ldr	r3, [r7, #0]
 8011b14:	88db      	ldrh	r3, [r3, #6]
 8011b16:	2b3f      	cmp	r3, #63	@ 0x3f
 8011b18:	d803      	bhi.n	8011b22 <USBD_CDC_Setup+0xa6>
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	88db      	ldrh	r3, [r3, #6]
 8011b1e:	b2da      	uxtb	r2, r3
 8011b20:	e000      	b.n	8011b24 <USBD_CDC_Setup+0xa8>
 8011b22:	2240      	movs	r2, #64	@ 0x40
 8011b24:	693b      	ldr	r3, [r7, #16]
 8011b26:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8011b2a:	6939      	ldr	r1, [r7, #16]
 8011b2c:	693b      	ldr	r3, [r7, #16]
 8011b2e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8011b32:	461a      	mov	r2, r3
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	f001 fdcf 	bl	80136d8 <USBD_CtlPrepareRx>
      break;
 8011b3a:	e076      	b.n	8011c2a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011b42:	687a      	ldr	r2, [r7, #4]
 8011b44:	33b0      	adds	r3, #176	@ 0xb0
 8011b46:	009b      	lsls	r3, r3, #2
 8011b48:	4413      	add	r3, r2
 8011b4a:	685b      	ldr	r3, [r3, #4]
 8011b4c:	689b      	ldr	r3, [r3, #8]
 8011b4e:	683a      	ldr	r2, [r7, #0]
 8011b50:	7850      	ldrb	r0, [r2, #1]
 8011b52:	2200      	movs	r2, #0
 8011b54:	6839      	ldr	r1, [r7, #0]
 8011b56:	4798      	blx	r3
      break;
 8011b58:	e067      	b.n	8011c2a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011b5a:	683b      	ldr	r3, [r7, #0]
 8011b5c:	785b      	ldrb	r3, [r3, #1]
 8011b5e:	2b0b      	cmp	r3, #11
 8011b60:	d851      	bhi.n	8011c06 <USBD_CDC_Setup+0x18a>
 8011b62:	a201      	add	r2, pc, #4	@ (adr r2, 8011b68 <USBD_CDC_Setup+0xec>)
 8011b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b68:	08011b99 	.word	0x08011b99
 8011b6c:	08011c15 	.word	0x08011c15
 8011b70:	08011c07 	.word	0x08011c07
 8011b74:	08011c07 	.word	0x08011c07
 8011b78:	08011c07 	.word	0x08011c07
 8011b7c:	08011c07 	.word	0x08011c07
 8011b80:	08011c07 	.word	0x08011c07
 8011b84:	08011c07 	.word	0x08011c07
 8011b88:	08011c07 	.word	0x08011c07
 8011b8c:	08011c07 	.word	0x08011c07
 8011b90:	08011bc3 	.word	0x08011bc3
 8011b94:	08011bed 	.word	0x08011bed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011b9e:	b2db      	uxtb	r3, r3
 8011ba0:	2b03      	cmp	r3, #3
 8011ba2:	d107      	bne.n	8011bb4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011ba4:	f107 030a 	add.w	r3, r7, #10
 8011ba8:	2202      	movs	r2, #2
 8011baa:	4619      	mov	r1, r3
 8011bac:	6878      	ldr	r0, [r7, #4]
 8011bae:	f001 fd67 	bl	8013680 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011bb2:	e032      	b.n	8011c1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011bb4:	6839      	ldr	r1, [r7, #0]
 8011bb6:	6878      	ldr	r0, [r7, #4]
 8011bb8:	f001 fce5 	bl	8013586 <USBD_CtlError>
            ret = USBD_FAIL;
 8011bbc:	2303      	movs	r3, #3
 8011bbe:	75fb      	strb	r3, [r7, #23]
          break;
 8011bc0:	e02b      	b.n	8011c1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011bc8:	b2db      	uxtb	r3, r3
 8011bca:	2b03      	cmp	r3, #3
 8011bcc:	d107      	bne.n	8011bde <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011bce:	f107 030d 	add.w	r3, r7, #13
 8011bd2:	2201      	movs	r2, #1
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	6878      	ldr	r0, [r7, #4]
 8011bd8:	f001 fd52 	bl	8013680 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011bdc:	e01d      	b.n	8011c1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011bde:	6839      	ldr	r1, [r7, #0]
 8011be0:	6878      	ldr	r0, [r7, #4]
 8011be2:	f001 fcd0 	bl	8013586 <USBD_CtlError>
            ret = USBD_FAIL;
 8011be6:	2303      	movs	r3, #3
 8011be8:	75fb      	strb	r3, [r7, #23]
          break;
 8011bea:	e016      	b.n	8011c1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011bf2:	b2db      	uxtb	r3, r3
 8011bf4:	2b03      	cmp	r3, #3
 8011bf6:	d00f      	beq.n	8011c18 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8011bf8:	6839      	ldr	r1, [r7, #0]
 8011bfa:	6878      	ldr	r0, [r7, #4]
 8011bfc:	f001 fcc3 	bl	8013586 <USBD_CtlError>
            ret = USBD_FAIL;
 8011c00:	2303      	movs	r3, #3
 8011c02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011c04:	e008      	b.n	8011c18 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011c06:	6839      	ldr	r1, [r7, #0]
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f001 fcbc 	bl	8013586 <USBD_CtlError>
          ret = USBD_FAIL;
 8011c0e:	2303      	movs	r3, #3
 8011c10:	75fb      	strb	r3, [r7, #23]
          break;
 8011c12:	e002      	b.n	8011c1a <USBD_CDC_Setup+0x19e>
          break;
 8011c14:	bf00      	nop
 8011c16:	e008      	b.n	8011c2a <USBD_CDC_Setup+0x1ae>
          break;
 8011c18:	bf00      	nop
      }
      break;
 8011c1a:	e006      	b.n	8011c2a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8011c1c:	6839      	ldr	r1, [r7, #0]
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	f001 fcb1 	bl	8013586 <USBD_CtlError>
      ret = USBD_FAIL;
 8011c24:	2303      	movs	r3, #3
 8011c26:	75fb      	strb	r3, [r7, #23]
      break;
 8011c28:	bf00      	nop
  }

  return (uint8_t)ret;
 8011c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	3718      	adds	r7, #24
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}

08011c34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b084      	sub	sp, #16
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
 8011c3c:	460b      	mov	r3, r1
 8011c3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011c46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	32b0      	adds	r2, #176	@ 0xb0
 8011c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d101      	bne.n	8011c5e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8011c5a:	2303      	movs	r3, #3
 8011c5c:	e065      	b.n	8011d2a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	32b0      	adds	r2, #176	@ 0xb0
 8011c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011c6e:	78fb      	ldrb	r3, [r7, #3]
 8011c70:	f003 020f 	and.w	r2, r3, #15
 8011c74:	6879      	ldr	r1, [r7, #4]
 8011c76:	4613      	mov	r3, r2
 8011c78:	009b      	lsls	r3, r3, #2
 8011c7a:	4413      	add	r3, r2
 8011c7c:	009b      	lsls	r3, r3, #2
 8011c7e:	440b      	add	r3, r1
 8011c80:	3318      	adds	r3, #24
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d02f      	beq.n	8011ce8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8011c88:	78fb      	ldrb	r3, [r7, #3]
 8011c8a:	f003 020f 	and.w	r2, r3, #15
 8011c8e:	6879      	ldr	r1, [r7, #4]
 8011c90:	4613      	mov	r3, r2
 8011c92:	009b      	lsls	r3, r3, #2
 8011c94:	4413      	add	r3, r2
 8011c96:	009b      	lsls	r3, r3, #2
 8011c98:	440b      	add	r3, r1
 8011c9a:	3318      	adds	r3, #24
 8011c9c:	681a      	ldr	r2, [r3, #0]
 8011c9e:	78fb      	ldrb	r3, [r7, #3]
 8011ca0:	f003 010f 	and.w	r1, r3, #15
 8011ca4:	68f8      	ldr	r0, [r7, #12]
 8011ca6:	460b      	mov	r3, r1
 8011ca8:	00db      	lsls	r3, r3, #3
 8011caa:	440b      	add	r3, r1
 8011cac:	009b      	lsls	r3, r3, #2
 8011cae:	4403      	add	r3, r0
 8011cb0:	331c      	adds	r3, #28
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8011cb8:	fb01 f303 	mul.w	r3, r1, r3
 8011cbc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d112      	bne.n	8011ce8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8011cc2:	78fb      	ldrb	r3, [r7, #3]
 8011cc4:	f003 020f 	and.w	r2, r3, #15
 8011cc8:	6879      	ldr	r1, [r7, #4]
 8011cca:	4613      	mov	r3, r2
 8011ccc:	009b      	lsls	r3, r3, #2
 8011cce:	4413      	add	r3, r2
 8011cd0:	009b      	lsls	r3, r3, #2
 8011cd2:	440b      	add	r3, r1
 8011cd4:	3318      	adds	r3, #24
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011cda:	78f9      	ldrb	r1, [r7, #3]
 8011cdc:	2300      	movs	r3, #0
 8011cde:	2200      	movs	r2, #0
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f002 fa18 	bl	8014116 <USBD_LL_Transmit>
 8011ce6:	e01f      	b.n	8011d28 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	2200      	movs	r2, #0
 8011cec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011cf6:	687a      	ldr	r2, [r7, #4]
 8011cf8:	33b0      	adds	r3, #176	@ 0xb0
 8011cfa:	009b      	lsls	r3, r3, #2
 8011cfc:	4413      	add	r3, r2
 8011cfe:	685b      	ldr	r3, [r3, #4]
 8011d00:	691b      	ldr	r3, [r3, #16]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d010      	beq.n	8011d28 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011d0c:	687a      	ldr	r2, [r7, #4]
 8011d0e:	33b0      	adds	r3, #176	@ 0xb0
 8011d10:	009b      	lsls	r3, r3, #2
 8011d12:	4413      	add	r3, r2
 8011d14:	685b      	ldr	r3, [r3, #4]
 8011d16:	691b      	ldr	r3, [r3, #16]
 8011d18:	68ba      	ldr	r2, [r7, #8]
 8011d1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8011d1e:	68ba      	ldr	r2, [r7, #8]
 8011d20:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8011d24:	78fa      	ldrb	r2, [r7, #3]
 8011d26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011d28:	2300      	movs	r3, #0
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	3710      	adds	r7, #16
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bd80      	pop	{r7, pc}

08011d32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011d32:	b580      	push	{r7, lr}
 8011d34:	b084      	sub	sp, #16
 8011d36:	af00      	add	r7, sp, #0
 8011d38:	6078      	str	r0, [r7, #4]
 8011d3a:	460b      	mov	r3, r1
 8011d3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	32b0      	adds	r2, #176	@ 0xb0
 8011d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	32b0      	adds	r2, #176	@ 0xb0
 8011d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d101      	bne.n	8011d64 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8011d60:	2303      	movs	r3, #3
 8011d62:	e01a      	b.n	8011d9a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011d64:	78fb      	ldrb	r3, [r7, #3]
 8011d66:	4619      	mov	r1, r3
 8011d68:	6878      	ldr	r0, [r7, #4]
 8011d6a:	f002 fa16 	bl	801419a <USBD_LL_GetRxDataSize>
 8011d6e:	4602      	mov	r2, r0
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011d7c:	687a      	ldr	r2, [r7, #4]
 8011d7e:	33b0      	adds	r3, #176	@ 0xb0
 8011d80:	009b      	lsls	r3, r3, #2
 8011d82:	4413      	add	r3, r2
 8011d84:	685b      	ldr	r3, [r3, #4]
 8011d86:	68db      	ldr	r3, [r3, #12]
 8011d88:	68fa      	ldr	r2, [r7, #12]
 8011d8a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8011d8e:	68fa      	ldr	r2, [r7, #12]
 8011d90:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8011d94:	4611      	mov	r1, r2
 8011d96:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011d98:	2300      	movs	r3, #0
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	3710      	adds	r7, #16
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}

08011da2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011da2:	b580      	push	{r7, lr}
 8011da4:	b084      	sub	sp, #16
 8011da6:	af00      	add	r7, sp, #0
 8011da8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	32b0      	adds	r2, #176	@ 0xb0
 8011db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011db8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d101      	bne.n	8011dc4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011dc0:	2303      	movs	r3, #3
 8011dc2:	e024      	b.n	8011e0e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011dca:	687a      	ldr	r2, [r7, #4]
 8011dcc:	33b0      	adds	r3, #176	@ 0xb0
 8011dce:	009b      	lsls	r3, r3, #2
 8011dd0:	4413      	add	r3, r2
 8011dd2:	685b      	ldr	r3, [r3, #4]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d019      	beq.n	8011e0c <USBD_CDC_EP0_RxReady+0x6a>
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8011dde:	2bff      	cmp	r3, #255	@ 0xff
 8011de0:	d014      	beq.n	8011e0c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011de8:	687a      	ldr	r2, [r7, #4]
 8011dea:	33b0      	adds	r3, #176	@ 0xb0
 8011dec:	009b      	lsls	r3, r3, #2
 8011dee:	4413      	add	r3, r2
 8011df0:	685b      	ldr	r3, [r3, #4]
 8011df2:	689b      	ldr	r3, [r3, #8]
 8011df4:	68fa      	ldr	r2, [r7, #12]
 8011df6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8011dfa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8011dfc:	68fa      	ldr	r2, [r7, #12]
 8011dfe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011e02:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	22ff      	movs	r2, #255	@ 0xff
 8011e08:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8011e0c:	2300      	movs	r3, #0
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	3710      	adds	r7, #16
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}
	...

08011e18 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b086      	sub	sp, #24
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011e20:	2182      	movs	r1, #130	@ 0x82
 8011e22:	4818      	ldr	r0, [pc, #96]	@ (8011e84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011e24:	f000 fd4f 	bl	80128c6 <USBD_GetEpDesc>
 8011e28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011e2a:	2101      	movs	r1, #1
 8011e2c:	4815      	ldr	r0, [pc, #84]	@ (8011e84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011e2e:	f000 fd4a 	bl	80128c6 <USBD_GetEpDesc>
 8011e32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011e34:	2181      	movs	r1, #129	@ 0x81
 8011e36:	4813      	ldr	r0, [pc, #76]	@ (8011e84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011e38:	f000 fd45 	bl	80128c6 <USBD_GetEpDesc>
 8011e3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011e3e:	697b      	ldr	r3, [r7, #20]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d002      	beq.n	8011e4a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011e44:	697b      	ldr	r3, [r7, #20]
 8011e46:	2210      	movs	r2, #16
 8011e48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011e4a:	693b      	ldr	r3, [r7, #16]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d006      	beq.n	8011e5e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011e50:	693b      	ldr	r3, [r7, #16]
 8011e52:	2200      	movs	r2, #0
 8011e54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011e58:	711a      	strb	r2, [r3, #4]
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d006      	beq.n	8011e72 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	2200      	movs	r2, #0
 8011e68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011e6c:	711a      	strb	r2, [r3, #4]
 8011e6e:	2200      	movs	r2, #0
 8011e70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	2243      	movs	r2, #67	@ 0x43
 8011e76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011e78:	4b02      	ldr	r3, [pc, #8]	@ (8011e84 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	3718      	adds	r7, #24
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bd80      	pop	{r7, pc}
 8011e82:	bf00      	nop
 8011e84:	24000054 	.word	0x24000054

08011e88 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b086      	sub	sp, #24
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011e90:	2182      	movs	r1, #130	@ 0x82
 8011e92:	4818      	ldr	r0, [pc, #96]	@ (8011ef4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011e94:	f000 fd17 	bl	80128c6 <USBD_GetEpDesc>
 8011e98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011e9a:	2101      	movs	r1, #1
 8011e9c:	4815      	ldr	r0, [pc, #84]	@ (8011ef4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011e9e:	f000 fd12 	bl	80128c6 <USBD_GetEpDesc>
 8011ea2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011ea4:	2181      	movs	r1, #129	@ 0x81
 8011ea6:	4813      	ldr	r0, [pc, #76]	@ (8011ef4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011ea8:	f000 fd0d 	bl	80128c6 <USBD_GetEpDesc>
 8011eac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011eae:	697b      	ldr	r3, [r7, #20]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d002      	beq.n	8011eba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8011eb4:	697b      	ldr	r3, [r7, #20]
 8011eb6:	2210      	movs	r2, #16
 8011eb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011eba:	693b      	ldr	r3, [r7, #16]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d006      	beq.n	8011ece <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011ec0:	693b      	ldr	r3, [r7, #16]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	711a      	strb	r2, [r3, #4]
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	f042 0202 	orr.w	r2, r2, #2
 8011ecc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d006      	beq.n	8011ee2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	711a      	strb	r2, [r3, #4]
 8011eda:	2200      	movs	r2, #0
 8011edc:	f042 0202 	orr.w	r2, r2, #2
 8011ee0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	2243      	movs	r2, #67	@ 0x43
 8011ee6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011ee8:	4b02      	ldr	r3, [pc, #8]	@ (8011ef4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8011eea:	4618      	mov	r0, r3
 8011eec:	3718      	adds	r7, #24
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	bd80      	pop	{r7, pc}
 8011ef2:	bf00      	nop
 8011ef4:	24000054 	.word	0x24000054

08011ef8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b086      	sub	sp, #24
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011f00:	2182      	movs	r1, #130	@ 0x82
 8011f02:	4818      	ldr	r0, [pc, #96]	@ (8011f64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011f04:	f000 fcdf 	bl	80128c6 <USBD_GetEpDesc>
 8011f08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011f0a:	2101      	movs	r1, #1
 8011f0c:	4815      	ldr	r0, [pc, #84]	@ (8011f64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011f0e:	f000 fcda 	bl	80128c6 <USBD_GetEpDesc>
 8011f12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011f14:	2181      	movs	r1, #129	@ 0x81
 8011f16:	4813      	ldr	r0, [pc, #76]	@ (8011f64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011f18:	f000 fcd5 	bl	80128c6 <USBD_GetEpDesc>
 8011f1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011f1e:	697b      	ldr	r3, [r7, #20]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d002      	beq.n	8011f2a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011f24:	697b      	ldr	r3, [r7, #20]
 8011f26:	2210      	movs	r2, #16
 8011f28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011f2a:	693b      	ldr	r3, [r7, #16]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d006      	beq.n	8011f3e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011f30:	693b      	ldr	r3, [r7, #16]
 8011f32:	2200      	movs	r2, #0
 8011f34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011f38:	711a      	strb	r2, [r3, #4]
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d006      	beq.n	8011f52 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	2200      	movs	r2, #0
 8011f48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011f4c:	711a      	strb	r2, [r3, #4]
 8011f4e:	2200      	movs	r2, #0
 8011f50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2243      	movs	r2, #67	@ 0x43
 8011f56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011f58:	4b02      	ldr	r3, [pc, #8]	@ (8011f64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	3718      	adds	r7, #24
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}
 8011f62:	bf00      	nop
 8011f64:	24000054 	.word	0x24000054

08011f68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011f68:	b480      	push	{r7}
 8011f6a:	b083      	sub	sp, #12
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	220a      	movs	r2, #10
 8011f74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011f76:	4b03      	ldr	r3, [pc, #12]	@ (8011f84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011f78:	4618      	mov	r0, r3
 8011f7a:	370c      	adds	r7, #12
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f82:	4770      	bx	lr
 8011f84:	24000010 	.word	0x24000010

08011f88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011f88:	b480      	push	{r7}
 8011f8a:	b083      	sub	sp, #12
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
 8011f90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d101      	bne.n	8011f9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011f98:	2303      	movs	r3, #3
 8011f9a:	e009      	b.n	8011fb0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011fa2:	687a      	ldr	r2, [r7, #4]
 8011fa4:	33b0      	adds	r3, #176	@ 0xb0
 8011fa6:	009b      	lsls	r3, r3, #2
 8011fa8:	4413      	add	r3, r2
 8011faa:	683a      	ldr	r2, [r7, #0]
 8011fac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8011fae:	2300      	movs	r3, #0
}
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	370c      	adds	r7, #12
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fba:	4770      	bx	lr

08011fbc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011fbc:	b480      	push	{r7}
 8011fbe:	b087      	sub	sp, #28
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	60f8      	str	r0, [r7, #12]
 8011fc4:	60b9      	str	r1, [r7, #8]
 8011fc6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	32b0      	adds	r2, #176	@ 0xb0
 8011fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fd6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d101      	bne.n	8011fe2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011fde:	2303      	movs	r3, #3
 8011fe0:	e008      	b.n	8011ff4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8011fe2:	697b      	ldr	r3, [r7, #20]
 8011fe4:	68ba      	ldr	r2, [r7, #8]
 8011fe6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8011fea:	697b      	ldr	r3, [r7, #20]
 8011fec:	687a      	ldr	r2, [r7, #4]
 8011fee:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8011ff2:	2300      	movs	r3, #0
}
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	371c      	adds	r7, #28
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffe:	4770      	bx	lr

08012000 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8012000:	b480      	push	{r7}
 8012002:	b085      	sub	sp, #20
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
 8012008:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	32b0      	adds	r2, #176	@ 0xb0
 8012014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012018:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d101      	bne.n	8012024 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8012020:	2303      	movs	r3, #3
 8012022:	e004      	b.n	801202e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	683a      	ldr	r2, [r7, #0]
 8012028:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801202c:	2300      	movs	r3, #0
}
 801202e:	4618      	mov	r0, r3
 8012030:	3714      	adds	r7, #20
 8012032:	46bd      	mov	sp, r7
 8012034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012038:	4770      	bx	lr
	...

0801203c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b084      	sub	sp, #16
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	32b0      	adds	r2, #176	@ 0xb0
 801204e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012052:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8012054:	2301      	movs	r3, #1
 8012056:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d101      	bne.n	8012062 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801205e:	2303      	movs	r3, #3
 8012060:	e025      	b.n	80120ae <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8012068:	2b00      	cmp	r3, #0
 801206a:	d11f      	bne.n	80120ac <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801206c:	68bb      	ldr	r3, [r7, #8]
 801206e:	2201      	movs	r2, #1
 8012070:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8012074:	4b10      	ldr	r3, [pc, #64]	@ (80120b8 <USBD_CDC_TransmitPacket+0x7c>)
 8012076:	781b      	ldrb	r3, [r3, #0]
 8012078:	f003 020f 	and.w	r2, r3, #15
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8012082:	6878      	ldr	r0, [r7, #4]
 8012084:	4613      	mov	r3, r2
 8012086:	009b      	lsls	r3, r3, #2
 8012088:	4413      	add	r3, r2
 801208a:	009b      	lsls	r3, r3, #2
 801208c:	4403      	add	r3, r0
 801208e:	3318      	adds	r3, #24
 8012090:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8012092:	4b09      	ldr	r3, [pc, #36]	@ (80120b8 <USBD_CDC_TransmitPacket+0x7c>)
 8012094:	7819      	ldrb	r1, [r3, #0]
 8012096:	68bb      	ldr	r3, [r7, #8]
 8012098:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801209c:	68bb      	ldr	r3, [r7, #8]
 801209e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80120a2:	6878      	ldr	r0, [r7, #4]
 80120a4:	f002 f837 	bl	8014116 <USBD_LL_Transmit>

    ret = USBD_OK;
 80120a8:	2300      	movs	r3, #0
 80120aa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80120ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80120ae:	4618      	mov	r0, r3
 80120b0:	3710      	adds	r7, #16
 80120b2:	46bd      	mov	sp, r7
 80120b4:	bd80      	pop	{r7, pc}
 80120b6:	bf00      	nop
 80120b8:	24000097 	.word	0x24000097

080120bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b084      	sub	sp, #16
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	32b0      	adds	r2, #176	@ 0xb0
 80120ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	32b0      	adds	r2, #176	@ 0xb0
 80120de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d101      	bne.n	80120ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80120e6:	2303      	movs	r3, #3
 80120e8:	e018      	b.n	801211c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	7c1b      	ldrb	r3, [r3, #16]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d10a      	bne.n	8012108 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80120f2:	4b0c      	ldr	r3, [pc, #48]	@ (8012124 <USBD_CDC_ReceivePacket+0x68>)
 80120f4:	7819      	ldrb	r1, [r3, #0]
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80120fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012100:	6878      	ldr	r0, [r7, #4]
 8012102:	f002 f829 	bl	8014158 <USBD_LL_PrepareReceive>
 8012106:	e008      	b.n	801211a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012108:	4b06      	ldr	r3, [pc, #24]	@ (8012124 <USBD_CDC_ReceivePacket+0x68>)
 801210a:	7819      	ldrb	r1, [r3, #0]
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012112:	2340      	movs	r3, #64	@ 0x40
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	f002 f81f 	bl	8014158 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801211a:	2300      	movs	r3, #0
}
 801211c:	4618      	mov	r0, r3
 801211e:	3710      	adds	r7, #16
 8012120:	46bd      	mov	sp, r7
 8012122:	bd80      	pop	{r7, pc}
 8012124:	24000098 	.word	0x24000098

08012128 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b086      	sub	sp, #24
 801212c:	af00      	add	r7, sp, #0
 801212e:	60f8      	str	r0, [r7, #12]
 8012130:	60b9      	str	r1, [r7, #8]
 8012132:	4613      	mov	r3, r2
 8012134:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d101      	bne.n	8012140 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801213c:	2303      	movs	r3, #3
 801213e:	e01f      	b.n	8012180 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	2200      	movs	r2, #0
 8012144:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	2200      	movs	r2, #0
 801214c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	2200      	movs	r2, #0
 8012154:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012158:	68bb      	ldr	r3, [r7, #8]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d003      	beq.n	8012166 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	68ba      	ldr	r2, [r7, #8]
 8012162:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	2201      	movs	r2, #1
 801216a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	79fa      	ldrb	r2, [r7, #7]
 8012172:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012174:	68f8      	ldr	r0, [r7, #12]
 8012176:	f001 fe93 	bl	8013ea0 <USBD_LL_Init>
 801217a:	4603      	mov	r3, r0
 801217c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801217e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012180:	4618      	mov	r0, r3
 8012182:	3718      	adds	r7, #24
 8012184:	46bd      	mov	sp, r7
 8012186:	bd80      	pop	{r7, pc}

08012188 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012188:	b580      	push	{r7, lr}
 801218a:	b084      	sub	sp, #16
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
 8012190:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012192:	2300      	movs	r3, #0
 8012194:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8012196:	683b      	ldr	r3, [r7, #0]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d101      	bne.n	80121a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801219c:	2303      	movs	r3, #3
 801219e:	e025      	b.n	80121ec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	683a      	ldr	r2, [r7, #0]
 80121a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	32ae      	adds	r2, #174	@ 0xae
 80121b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d00f      	beq.n	80121dc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	32ae      	adds	r2, #174	@ 0xae
 80121c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121cc:	f107 020e 	add.w	r2, r7, #14
 80121d0:	4610      	mov	r0, r2
 80121d2:	4798      	blx	r3
 80121d4:	4602      	mov	r2, r0
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80121e2:	1c5a      	adds	r2, r3, #1
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80121ea:	2300      	movs	r3, #0
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	3710      	adds	r7, #16
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd80      	pop	{r7, pc}

080121f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b082      	sub	sp, #8
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80121fc:	6878      	ldr	r0, [r7, #4]
 80121fe:	f001 fea1 	bl	8013f44 <USBD_LL_Start>
 8012202:	4603      	mov	r3, r0
}
 8012204:	4618      	mov	r0, r3
 8012206:	3708      	adds	r7, #8
 8012208:	46bd      	mov	sp, r7
 801220a:	bd80      	pop	{r7, pc}

0801220c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801220c:	b480      	push	{r7}
 801220e:	b083      	sub	sp, #12
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012214:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8012216:	4618      	mov	r0, r3
 8012218:	370c      	adds	r7, #12
 801221a:	46bd      	mov	sp, r7
 801221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012220:	4770      	bx	lr

08012222 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012222:	b580      	push	{r7, lr}
 8012224:	b084      	sub	sp, #16
 8012226:	af00      	add	r7, sp, #0
 8012228:	6078      	str	r0, [r7, #4]
 801222a:	460b      	mov	r3, r1
 801222c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801222e:	2300      	movs	r3, #0
 8012230:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012238:	2b00      	cmp	r3, #0
 801223a:	d009      	beq.n	8012250 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	78fa      	ldrb	r2, [r7, #3]
 8012246:	4611      	mov	r1, r2
 8012248:	6878      	ldr	r0, [r7, #4]
 801224a:	4798      	blx	r3
 801224c:	4603      	mov	r3, r0
 801224e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012250:	7bfb      	ldrb	r3, [r7, #15]
}
 8012252:	4618      	mov	r0, r3
 8012254:	3710      	adds	r7, #16
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}

0801225a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801225a:	b580      	push	{r7, lr}
 801225c:	b084      	sub	sp, #16
 801225e:	af00      	add	r7, sp, #0
 8012260:	6078      	str	r0, [r7, #4]
 8012262:	460b      	mov	r3, r1
 8012264:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012266:	2300      	movs	r3, #0
 8012268:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012270:	685b      	ldr	r3, [r3, #4]
 8012272:	78fa      	ldrb	r2, [r7, #3]
 8012274:	4611      	mov	r1, r2
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	4798      	blx	r3
 801227a:	4603      	mov	r3, r0
 801227c:	2b00      	cmp	r3, #0
 801227e:	d001      	beq.n	8012284 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8012280:	2303      	movs	r3, #3
 8012282:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012284:	7bfb      	ldrb	r3, [r7, #15]
}
 8012286:	4618      	mov	r0, r3
 8012288:	3710      	adds	r7, #16
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}

0801228e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801228e:	b580      	push	{r7, lr}
 8012290:	b084      	sub	sp, #16
 8012292:	af00      	add	r7, sp, #0
 8012294:	6078      	str	r0, [r7, #4]
 8012296:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801229e:	6839      	ldr	r1, [r7, #0]
 80122a0:	4618      	mov	r0, r3
 80122a2:	f001 f936 	bl	8013512 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	2201      	movs	r2, #1
 80122aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80122b4:	461a      	mov	r2, r3
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80122c2:	f003 031f 	and.w	r3, r3, #31
 80122c6:	2b02      	cmp	r3, #2
 80122c8:	d01a      	beq.n	8012300 <USBD_LL_SetupStage+0x72>
 80122ca:	2b02      	cmp	r3, #2
 80122cc:	d822      	bhi.n	8012314 <USBD_LL_SetupStage+0x86>
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d002      	beq.n	80122d8 <USBD_LL_SetupStage+0x4a>
 80122d2:	2b01      	cmp	r3, #1
 80122d4:	d00a      	beq.n	80122ec <USBD_LL_SetupStage+0x5e>
 80122d6:	e01d      	b.n	8012314 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80122de:	4619      	mov	r1, r3
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f000 fb63 	bl	80129ac <USBD_StdDevReq>
 80122e6:	4603      	mov	r3, r0
 80122e8:	73fb      	strb	r3, [r7, #15]
      break;
 80122ea:	e020      	b.n	801232e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80122f2:	4619      	mov	r1, r3
 80122f4:	6878      	ldr	r0, [r7, #4]
 80122f6:	f000 fbcb 	bl	8012a90 <USBD_StdItfReq>
 80122fa:	4603      	mov	r3, r0
 80122fc:	73fb      	strb	r3, [r7, #15]
      break;
 80122fe:	e016      	b.n	801232e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012306:	4619      	mov	r1, r3
 8012308:	6878      	ldr	r0, [r7, #4]
 801230a:	f000 fc2d 	bl	8012b68 <USBD_StdEPReq>
 801230e:	4603      	mov	r3, r0
 8012310:	73fb      	strb	r3, [r7, #15]
      break;
 8012312:	e00c      	b.n	801232e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801231a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801231e:	b2db      	uxtb	r3, r3
 8012320:	4619      	mov	r1, r3
 8012322:	6878      	ldr	r0, [r7, #4]
 8012324:	f001 fe6e 	bl	8014004 <USBD_LL_StallEP>
 8012328:	4603      	mov	r3, r0
 801232a:	73fb      	strb	r3, [r7, #15]
      break;
 801232c:	bf00      	nop
  }

  return ret;
 801232e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012330:	4618      	mov	r0, r3
 8012332:	3710      	adds	r7, #16
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}

08012338 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b086      	sub	sp, #24
 801233c:	af00      	add	r7, sp, #0
 801233e:	60f8      	str	r0, [r7, #12]
 8012340:	460b      	mov	r3, r1
 8012342:	607a      	str	r2, [r7, #4]
 8012344:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8012346:	2300      	movs	r3, #0
 8012348:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801234a:	7afb      	ldrb	r3, [r7, #11]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d16e      	bne.n	801242e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8012356:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801235e:	2b03      	cmp	r3, #3
 8012360:	f040 8098 	bne.w	8012494 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8012364:	693b      	ldr	r3, [r7, #16]
 8012366:	689a      	ldr	r2, [r3, #8]
 8012368:	693b      	ldr	r3, [r7, #16]
 801236a:	68db      	ldr	r3, [r3, #12]
 801236c:	429a      	cmp	r2, r3
 801236e:	d913      	bls.n	8012398 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8012370:	693b      	ldr	r3, [r7, #16]
 8012372:	689a      	ldr	r2, [r3, #8]
 8012374:	693b      	ldr	r3, [r7, #16]
 8012376:	68db      	ldr	r3, [r3, #12]
 8012378:	1ad2      	subs	r2, r2, r3
 801237a:	693b      	ldr	r3, [r7, #16]
 801237c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801237e:	693b      	ldr	r3, [r7, #16]
 8012380:	68da      	ldr	r2, [r3, #12]
 8012382:	693b      	ldr	r3, [r7, #16]
 8012384:	689b      	ldr	r3, [r3, #8]
 8012386:	4293      	cmp	r3, r2
 8012388:	bf28      	it	cs
 801238a:	4613      	movcs	r3, r2
 801238c:	461a      	mov	r2, r3
 801238e:	6879      	ldr	r1, [r7, #4]
 8012390:	68f8      	ldr	r0, [r7, #12]
 8012392:	f001 f9be 	bl	8013712 <USBD_CtlContinueRx>
 8012396:	e07d      	b.n	8012494 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801239e:	f003 031f 	and.w	r3, r3, #31
 80123a2:	2b02      	cmp	r3, #2
 80123a4:	d014      	beq.n	80123d0 <USBD_LL_DataOutStage+0x98>
 80123a6:	2b02      	cmp	r3, #2
 80123a8:	d81d      	bhi.n	80123e6 <USBD_LL_DataOutStage+0xae>
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d002      	beq.n	80123b4 <USBD_LL_DataOutStage+0x7c>
 80123ae:	2b01      	cmp	r3, #1
 80123b0:	d003      	beq.n	80123ba <USBD_LL_DataOutStage+0x82>
 80123b2:	e018      	b.n	80123e6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80123b4:	2300      	movs	r3, #0
 80123b6:	75bb      	strb	r3, [r7, #22]
            break;
 80123b8:	e018      	b.n	80123ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80123c0:	b2db      	uxtb	r3, r3
 80123c2:	4619      	mov	r1, r3
 80123c4:	68f8      	ldr	r0, [r7, #12]
 80123c6:	f000 fa64 	bl	8012892 <USBD_CoreFindIF>
 80123ca:	4603      	mov	r3, r0
 80123cc:	75bb      	strb	r3, [r7, #22]
            break;
 80123ce:	e00d      	b.n	80123ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80123d6:	b2db      	uxtb	r3, r3
 80123d8:	4619      	mov	r1, r3
 80123da:	68f8      	ldr	r0, [r7, #12]
 80123dc:	f000 fa66 	bl	80128ac <USBD_CoreFindEP>
 80123e0:	4603      	mov	r3, r0
 80123e2:	75bb      	strb	r3, [r7, #22]
            break;
 80123e4:	e002      	b.n	80123ec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80123e6:	2300      	movs	r3, #0
 80123e8:	75bb      	strb	r3, [r7, #22]
            break;
 80123ea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80123ec:	7dbb      	ldrb	r3, [r7, #22]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d119      	bne.n	8012426 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80123f8:	b2db      	uxtb	r3, r3
 80123fa:	2b03      	cmp	r3, #3
 80123fc:	d113      	bne.n	8012426 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80123fe:	7dba      	ldrb	r2, [r7, #22]
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	32ae      	adds	r2, #174	@ 0xae
 8012404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012408:	691b      	ldr	r3, [r3, #16]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d00b      	beq.n	8012426 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801240e:	7dba      	ldrb	r2, [r7, #22]
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8012416:	7dba      	ldrb	r2, [r7, #22]
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	32ae      	adds	r2, #174	@ 0xae
 801241c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012420:	691b      	ldr	r3, [r3, #16]
 8012422:	68f8      	ldr	r0, [r7, #12]
 8012424:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012426:	68f8      	ldr	r0, [r7, #12]
 8012428:	f001 f984 	bl	8013734 <USBD_CtlSendStatus>
 801242c:	e032      	b.n	8012494 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801242e:	7afb      	ldrb	r3, [r7, #11]
 8012430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012434:	b2db      	uxtb	r3, r3
 8012436:	4619      	mov	r1, r3
 8012438:	68f8      	ldr	r0, [r7, #12]
 801243a:	f000 fa37 	bl	80128ac <USBD_CoreFindEP>
 801243e:	4603      	mov	r3, r0
 8012440:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012442:	7dbb      	ldrb	r3, [r7, #22]
 8012444:	2bff      	cmp	r3, #255	@ 0xff
 8012446:	d025      	beq.n	8012494 <USBD_LL_DataOutStage+0x15c>
 8012448:	7dbb      	ldrb	r3, [r7, #22]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d122      	bne.n	8012494 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012454:	b2db      	uxtb	r3, r3
 8012456:	2b03      	cmp	r3, #3
 8012458:	d117      	bne.n	801248a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801245a:	7dba      	ldrb	r2, [r7, #22]
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	32ae      	adds	r2, #174	@ 0xae
 8012460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012464:	699b      	ldr	r3, [r3, #24]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d00f      	beq.n	801248a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801246a:	7dba      	ldrb	r2, [r7, #22]
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8012472:	7dba      	ldrb	r2, [r7, #22]
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	32ae      	adds	r2, #174	@ 0xae
 8012478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801247c:	699b      	ldr	r3, [r3, #24]
 801247e:	7afa      	ldrb	r2, [r7, #11]
 8012480:	4611      	mov	r1, r2
 8012482:	68f8      	ldr	r0, [r7, #12]
 8012484:	4798      	blx	r3
 8012486:	4603      	mov	r3, r0
 8012488:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801248a:	7dfb      	ldrb	r3, [r7, #23]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d001      	beq.n	8012494 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8012490:	7dfb      	ldrb	r3, [r7, #23]
 8012492:	e000      	b.n	8012496 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8012494:	2300      	movs	r3, #0
}
 8012496:	4618      	mov	r0, r3
 8012498:	3718      	adds	r7, #24
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}

0801249e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801249e:	b580      	push	{r7, lr}
 80124a0:	b086      	sub	sp, #24
 80124a2:	af00      	add	r7, sp, #0
 80124a4:	60f8      	str	r0, [r7, #12]
 80124a6:	460b      	mov	r3, r1
 80124a8:	607a      	str	r2, [r7, #4]
 80124aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80124ac:	7afb      	ldrb	r3, [r7, #11]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d16f      	bne.n	8012592 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	3314      	adds	r3, #20
 80124b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80124be:	2b02      	cmp	r3, #2
 80124c0:	d15a      	bne.n	8012578 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80124c2:	693b      	ldr	r3, [r7, #16]
 80124c4:	689a      	ldr	r2, [r3, #8]
 80124c6:	693b      	ldr	r3, [r7, #16]
 80124c8:	68db      	ldr	r3, [r3, #12]
 80124ca:	429a      	cmp	r2, r3
 80124cc:	d914      	bls.n	80124f8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80124ce:	693b      	ldr	r3, [r7, #16]
 80124d0:	689a      	ldr	r2, [r3, #8]
 80124d2:	693b      	ldr	r3, [r7, #16]
 80124d4:	68db      	ldr	r3, [r3, #12]
 80124d6:	1ad2      	subs	r2, r2, r3
 80124d8:	693b      	ldr	r3, [r7, #16]
 80124da:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80124dc:	693b      	ldr	r3, [r7, #16]
 80124de:	689b      	ldr	r3, [r3, #8]
 80124e0:	461a      	mov	r2, r3
 80124e2:	6879      	ldr	r1, [r7, #4]
 80124e4:	68f8      	ldr	r0, [r7, #12]
 80124e6:	f001 f8e6 	bl	80136b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80124ea:	2300      	movs	r3, #0
 80124ec:	2200      	movs	r2, #0
 80124ee:	2100      	movs	r1, #0
 80124f0:	68f8      	ldr	r0, [r7, #12]
 80124f2:	f001 fe31 	bl	8014158 <USBD_LL_PrepareReceive>
 80124f6:	e03f      	b.n	8012578 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80124f8:	693b      	ldr	r3, [r7, #16]
 80124fa:	68da      	ldr	r2, [r3, #12]
 80124fc:	693b      	ldr	r3, [r7, #16]
 80124fe:	689b      	ldr	r3, [r3, #8]
 8012500:	429a      	cmp	r2, r3
 8012502:	d11c      	bne.n	801253e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012504:	693b      	ldr	r3, [r7, #16]
 8012506:	685a      	ldr	r2, [r3, #4]
 8012508:	693b      	ldr	r3, [r7, #16]
 801250a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801250c:	429a      	cmp	r2, r3
 801250e:	d316      	bcc.n	801253e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012510:	693b      	ldr	r3, [r7, #16]
 8012512:	685a      	ldr	r2, [r3, #4]
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801251a:	429a      	cmp	r2, r3
 801251c:	d20f      	bcs.n	801253e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801251e:	2200      	movs	r2, #0
 8012520:	2100      	movs	r1, #0
 8012522:	68f8      	ldr	r0, [r7, #12]
 8012524:	f001 f8c7 	bl	80136b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	2200      	movs	r2, #0
 801252c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012530:	2300      	movs	r3, #0
 8012532:	2200      	movs	r2, #0
 8012534:	2100      	movs	r1, #0
 8012536:	68f8      	ldr	r0, [r7, #12]
 8012538:	f001 fe0e 	bl	8014158 <USBD_LL_PrepareReceive>
 801253c:	e01c      	b.n	8012578 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012544:	b2db      	uxtb	r3, r3
 8012546:	2b03      	cmp	r3, #3
 8012548:	d10f      	bne.n	801256a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012550:	68db      	ldr	r3, [r3, #12]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d009      	beq.n	801256a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	2200      	movs	r2, #0
 801255a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012564:	68db      	ldr	r3, [r3, #12]
 8012566:	68f8      	ldr	r0, [r7, #12]
 8012568:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801256a:	2180      	movs	r1, #128	@ 0x80
 801256c:	68f8      	ldr	r0, [r7, #12]
 801256e:	f001 fd49 	bl	8014004 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012572:	68f8      	ldr	r0, [r7, #12]
 8012574:	f001 f8f1 	bl	801375a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801257e:	2b00      	cmp	r3, #0
 8012580:	d03a      	beq.n	80125f8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8012582:	68f8      	ldr	r0, [r7, #12]
 8012584:	f7ff fe42 	bl	801220c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	2200      	movs	r2, #0
 801258c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8012590:	e032      	b.n	80125f8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8012592:	7afb      	ldrb	r3, [r7, #11]
 8012594:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8012598:	b2db      	uxtb	r3, r3
 801259a:	4619      	mov	r1, r3
 801259c:	68f8      	ldr	r0, [r7, #12]
 801259e:	f000 f985 	bl	80128ac <USBD_CoreFindEP>
 80125a2:	4603      	mov	r3, r0
 80125a4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80125a6:	7dfb      	ldrb	r3, [r7, #23]
 80125a8:	2bff      	cmp	r3, #255	@ 0xff
 80125aa:	d025      	beq.n	80125f8 <USBD_LL_DataInStage+0x15a>
 80125ac:	7dfb      	ldrb	r3, [r7, #23]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d122      	bne.n	80125f8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80125b8:	b2db      	uxtb	r3, r3
 80125ba:	2b03      	cmp	r3, #3
 80125bc:	d11c      	bne.n	80125f8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80125be:	7dfa      	ldrb	r2, [r7, #23]
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	32ae      	adds	r2, #174	@ 0xae
 80125c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125c8:	695b      	ldr	r3, [r3, #20]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d014      	beq.n	80125f8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80125ce:	7dfa      	ldrb	r2, [r7, #23]
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80125d6:	7dfa      	ldrb	r2, [r7, #23]
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	32ae      	adds	r2, #174	@ 0xae
 80125dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125e0:	695b      	ldr	r3, [r3, #20]
 80125e2:	7afa      	ldrb	r2, [r7, #11]
 80125e4:	4611      	mov	r1, r2
 80125e6:	68f8      	ldr	r0, [r7, #12]
 80125e8:	4798      	blx	r3
 80125ea:	4603      	mov	r3, r0
 80125ec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80125ee:	7dbb      	ldrb	r3, [r7, #22]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d001      	beq.n	80125f8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80125f4:	7dbb      	ldrb	r3, [r7, #22]
 80125f6:	e000      	b.n	80125fa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80125f8:	2300      	movs	r3, #0
}
 80125fa:	4618      	mov	r0, r3
 80125fc:	3718      	adds	r7, #24
 80125fe:	46bd      	mov	sp, r7
 8012600:	bd80      	pop	{r7, pc}

08012602 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012602:	b580      	push	{r7, lr}
 8012604:	b084      	sub	sp, #16
 8012606:	af00      	add	r7, sp, #0
 8012608:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801260a:	2300      	movs	r3, #0
 801260c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	2201      	movs	r2, #1
 8012612:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	2200      	movs	r2, #0
 801261a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	2200      	movs	r2, #0
 8012622:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2200      	movs	r2, #0
 8012628:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	2200      	movs	r2, #0
 8012630:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801263a:	2b00      	cmp	r3, #0
 801263c:	d014      	beq.n	8012668 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012644:	685b      	ldr	r3, [r3, #4]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d00e      	beq.n	8012668 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012650:	685b      	ldr	r3, [r3, #4]
 8012652:	687a      	ldr	r2, [r7, #4]
 8012654:	6852      	ldr	r2, [r2, #4]
 8012656:	b2d2      	uxtb	r2, r2
 8012658:	4611      	mov	r1, r2
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	4798      	blx	r3
 801265e:	4603      	mov	r3, r0
 8012660:	2b00      	cmp	r3, #0
 8012662:	d001      	beq.n	8012668 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8012664:	2303      	movs	r3, #3
 8012666:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012668:	2340      	movs	r3, #64	@ 0x40
 801266a:	2200      	movs	r2, #0
 801266c:	2100      	movs	r1, #0
 801266e:	6878      	ldr	r0, [r7, #4]
 8012670:	f001 fc83 	bl	8013f7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	2201      	movs	r2, #1
 8012678:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	2240      	movs	r2, #64	@ 0x40
 8012680:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012684:	2340      	movs	r3, #64	@ 0x40
 8012686:	2200      	movs	r2, #0
 8012688:	2180      	movs	r1, #128	@ 0x80
 801268a:	6878      	ldr	r0, [r7, #4]
 801268c:	f001 fc75 	bl	8013f7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	2201      	movs	r2, #1
 8012694:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	2240      	movs	r2, #64	@ 0x40
 801269a:	621a      	str	r2, [r3, #32]

  return ret;
 801269c:	7bfb      	ldrb	r3, [r7, #15]
}
 801269e:	4618      	mov	r0, r3
 80126a0:	3710      	adds	r7, #16
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}

080126a6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80126a6:	b480      	push	{r7}
 80126a8:	b083      	sub	sp, #12
 80126aa:	af00      	add	r7, sp, #0
 80126ac:	6078      	str	r0, [r7, #4]
 80126ae:	460b      	mov	r3, r1
 80126b0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	78fa      	ldrb	r2, [r7, #3]
 80126b6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80126b8:	2300      	movs	r3, #0
}
 80126ba:	4618      	mov	r0, r3
 80126bc:	370c      	adds	r7, #12
 80126be:	46bd      	mov	sp, r7
 80126c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c4:	4770      	bx	lr

080126c6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80126c6:	b480      	push	{r7}
 80126c8:	b083      	sub	sp, #12
 80126ca:	af00      	add	r7, sp, #0
 80126cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80126d4:	b2db      	uxtb	r3, r3
 80126d6:	2b04      	cmp	r3, #4
 80126d8:	d006      	beq.n	80126e8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80126e0:	b2da      	uxtb	r2, r3
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	2204      	movs	r2, #4
 80126ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80126f0:	2300      	movs	r3, #0
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	370c      	adds	r7, #12
 80126f6:	46bd      	mov	sp, r7
 80126f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fc:	4770      	bx	lr

080126fe <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80126fe:	b480      	push	{r7}
 8012700:	b083      	sub	sp, #12
 8012702:	af00      	add	r7, sp, #0
 8012704:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801270c:	b2db      	uxtb	r3, r3
 801270e:	2b04      	cmp	r3, #4
 8012710:	d106      	bne.n	8012720 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8012718:	b2da      	uxtb	r2, r3
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8012720:	2300      	movs	r3, #0
}
 8012722:	4618      	mov	r0, r3
 8012724:	370c      	adds	r7, #12
 8012726:	46bd      	mov	sp, r7
 8012728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272c:	4770      	bx	lr

0801272e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801272e:	b580      	push	{r7, lr}
 8012730:	b082      	sub	sp, #8
 8012732:	af00      	add	r7, sp, #0
 8012734:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801273c:	b2db      	uxtb	r3, r3
 801273e:	2b03      	cmp	r3, #3
 8012740:	d110      	bne.n	8012764 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012748:	2b00      	cmp	r3, #0
 801274a:	d00b      	beq.n	8012764 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012752:	69db      	ldr	r3, [r3, #28]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d005      	beq.n	8012764 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801275e:	69db      	ldr	r3, [r3, #28]
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8012764:	2300      	movs	r3, #0
}
 8012766:	4618      	mov	r0, r3
 8012768:	3708      	adds	r7, #8
 801276a:	46bd      	mov	sp, r7
 801276c:	bd80      	pop	{r7, pc}

0801276e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801276e:	b580      	push	{r7, lr}
 8012770:	b082      	sub	sp, #8
 8012772:	af00      	add	r7, sp, #0
 8012774:	6078      	str	r0, [r7, #4]
 8012776:	460b      	mov	r3, r1
 8012778:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	32ae      	adds	r2, #174	@ 0xae
 8012784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d101      	bne.n	8012790 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801278c:	2303      	movs	r3, #3
 801278e:	e01c      	b.n	80127ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012796:	b2db      	uxtb	r3, r3
 8012798:	2b03      	cmp	r3, #3
 801279a:	d115      	bne.n	80127c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	32ae      	adds	r2, #174	@ 0xae
 80127a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127aa:	6a1b      	ldr	r3, [r3, #32]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d00b      	beq.n	80127c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	32ae      	adds	r2, #174	@ 0xae
 80127ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127be:	6a1b      	ldr	r3, [r3, #32]
 80127c0:	78fa      	ldrb	r2, [r7, #3]
 80127c2:	4611      	mov	r1, r2
 80127c4:	6878      	ldr	r0, [r7, #4]
 80127c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80127c8:	2300      	movs	r3, #0
}
 80127ca:	4618      	mov	r0, r3
 80127cc:	3708      	adds	r7, #8
 80127ce:	46bd      	mov	sp, r7
 80127d0:	bd80      	pop	{r7, pc}

080127d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80127d2:	b580      	push	{r7, lr}
 80127d4:	b082      	sub	sp, #8
 80127d6:	af00      	add	r7, sp, #0
 80127d8:	6078      	str	r0, [r7, #4]
 80127da:	460b      	mov	r3, r1
 80127dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	32ae      	adds	r2, #174	@ 0xae
 80127e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d101      	bne.n	80127f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80127f0:	2303      	movs	r3, #3
 80127f2:	e01c      	b.n	801282e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80127fa:	b2db      	uxtb	r3, r3
 80127fc:	2b03      	cmp	r3, #3
 80127fe:	d115      	bne.n	801282c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	32ae      	adds	r2, #174	@ 0xae
 801280a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801280e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012810:	2b00      	cmp	r3, #0
 8012812:	d00b      	beq.n	801282c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	32ae      	adds	r2, #174	@ 0xae
 801281e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012824:	78fa      	ldrb	r2, [r7, #3]
 8012826:	4611      	mov	r1, r2
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801282c:	2300      	movs	r3, #0
}
 801282e:	4618      	mov	r0, r3
 8012830:	3708      	adds	r7, #8
 8012832:	46bd      	mov	sp, r7
 8012834:	bd80      	pop	{r7, pc}

08012836 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012836:	b480      	push	{r7}
 8012838:	b083      	sub	sp, #12
 801283a:	af00      	add	r7, sp, #0
 801283c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801283e:	2300      	movs	r3, #0
}
 8012840:	4618      	mov	r0, r3
 8012842:	370c      	adds	r7, #12
 8012844:	46bd      	mov	sp, r7
 8012846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284a:	4770      	bx	lr

0801284c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b084      	sub	sp, #16
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8012854:	2300      	movs	r3, #0
 8012856:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2201      	movs	r2, #1
 801285c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012866:	2b00      	cmp	r3, #0
 8012868:	d00e      	beq.n	8012888 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012870:	685b      	ldr	r3, [r3, #4]
 8012872:	687a      	ldr	r2, [r7, #4]
 8012874:	6852      	ldr	r2, [r2, #4]
 8012876:	b2d2      	uxtb	r2, r2
 8012878:	4611      	mov	r1, r2
 801287a:	6878      	ldr	r0, [r7, #4]
 801287c:	4798      	blx	r3
 801287e:	4603      	mov	r3, r0
 8012880:	2b00      	cmp	r3, #0
 8012882:	d001      	beq.n	8012888 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8012884:	2303      	movs	r3, #3
 8012886:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012888:	7bfb      	ldrb	r3, [r7, #15]
}
 801288a:	4618      	mov	r0, r3
 801288c:	3710      	adds	r7, #16
 801288e:	46bd      	mov	sp, r7
 8012890:	bd80      	pop	{r7, pc}

08012892 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012892:	b480      	push	{r7}
 8012894:	b083      	sub	sp, #12
 8012896:	af00      	add	r7, sp, #0
 8012898:	6078      	str	r0, [r7, #4]
 801289a:	460b      	mov	r3, r1
 801289c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801289e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80128a0:	4618      	mov	r0, r3
 80128a2:	370c      	adds	r7, #12
 80128a4:	46bd      	mov	sp, r7
 80128a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128aa:	4770      	bx	lr

080128ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80128ac:	b480      	push	{r7}
 80128ae:	b083      	sub	sp, #12
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
 80128b4:	460b      	mov	r3, r1
 80128b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80128b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	370c      	adds	r7, #12
 80128be:	46bd      	mov	sp, r7
 80128c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c4:	4770      	bx	lr

080128c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80128c6:	b580      	push	{r7, lr}
 80128c8:	b086      	sub	sp, #24
 80128ca:	af00      	add	r7, sp, #0
 80128cc:	6078      	str	r0, [r7, #4]
 80128ce:	460b      	mov	r3, r1
 80128d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80128da:	2300      	movs	r3, #0
 80128dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	885b      	ldrh	r3, [r3, #2]
 80128e2:	b29b      	uxth	r3, r3
 80128e4:	68fa      	ldr	r2, [r7, #12]
 80128e6:	7812      	ldrb	r2, [r2, #0]
 80128e8:	4293      	cmp	r3, r2
 80128ea:	d91f      	bls.n	801292c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	781b      	ldrb	r3, [r3, #0]
 80128f0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80128f2:	e013      	b.n	801291c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80128f4:	f107 030a 	add.w	r3, r7, #10
 80128f8:	4619      	mov	r1, r3
 80128fa:	6978      	ldr	r0, [r7, #20]
 80128fc:	f000 f81b 	bl	8012936 <USBD_GetNextDesc>
 8012900:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8012902:	697b      	ldr	r3, [r7, #20]
 8012904:	785b      	ldrb	r3, [r3, #1]
 8012906:	2b05      	cmp	r3, #5
 8012908:	d108      	bne.n	801291c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801290a:	697b      	ldr	r3, [r7, #20]
 801290c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801290e:	693b      	ldr	r3, [r7, #16]
 8012910:	789b      	ldrb	r3, [r3, #2]
 8012912:	78fa      	ldrb	r2, [r7, #3]
 8012914:	429a      	cmp	r2, r3
 8012916:	d008      	beq.n	801292a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8012918:	2300      	movs	r3, #0
 801291a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	885b      	ldrh	r3, [r3, #2]
 8012920:	b29a      	uxth	r2, r3
 8012922:	897b      	ldrh	r3, [r7, #10]
 8012924:	429a      	cmp	r2, r3
 8012926:	d8e5      	bhi.n	80128f4 <USBD_GetEpDesc+0x2e>
 8012928:	e000      	b.n	801292c <USBD_GetEpDesc+0x66>
          break;
 801292a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801292c:	693b      	ldr	r3, [r7, #16]
}
 801292e:	4618      	mov	r0, r3
 8012930:	3718      	adds	r7, #24
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}

08012936 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8012936:	b480      	push	{r7}
 8012938:	b085      	sub	sp, #20
 801293a:	af00      	add	r7, sp, #0
 801293c:	6078      	str	r0, [r7, #4]
 801293e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8012944:	683b      	ldr	r3, [r7, #0]
 8012946:	881b      	ldrh	r3, [r3, #0]
 8012948:	68fa      	ldr	r2, [r7, #12]
 801294a:	7812      	ldrb	r2, [r2, #0]
 801294c:	4413      	add	r3, r2
 801294e:	b29a      	uxth	r2, r3
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	781b      	ldrb	r3, [r3, #0]
 8012958:	461a      	mov	r2, r3
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	4413      	add	r3, r2
 801295e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8012960:	68fb      	ldr	r3, [r7, #12]
}
 8012962:	4618      	mov	r0, r3
 8012964:	3714      	adds	r7, #20
 8012966:	46bd      	mov	sp, r7
 8012968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296c:	4770      	bx	lr

0801296e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801296e:	b480      	push	{r7}
 8012970:	b087      	sub	sp, #28
 8012972:	af00      	add	r7, sp, #0
 8012974:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	781b      	ldrb	r3, [r3, #0]
 801297e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	3301      	adds	r3, #1
 8012984:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	781b      	ldrb	r3, [r3, #0]
 801298a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801298c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012990:	021b      	lsls	r3, r3, #8
 8012992:	b21a      	sxth	r2, r3
 8012994:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012998:	4313      	orrs	r3, r2
 801299a:	b21b      	sxth	r3, r3
 801299c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801299e:	89fb      	ldrh	r3, [r7, #14]
}
 80129a0:	4618      	mov	r0, r3
 80129a2:	371c      	adds	r7, #28
 80129a4:	46bd      	mov	sp, r7
 80129a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129aa:	4770      	bx	lr

080129ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b084      	sub	sp, #16
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
 80129b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80129b6:	2300      	movs	r3, #0
 80129b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	781b      	ldrb	r3, [r3, #0]
 80129be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80129c2:	2b40      	cmp	r3, #64	@ 0x40
 80129c4:	d005      	beq.n	80129d2 <USBD_StdDevReq+0x26>
 80129c6:	2b40      	cmp	r3, #64	@ 0x40
 80129c8:	d857      	bhi.n	8012a7a <USBD_StdDevReq+0xce>
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d00f      	beq.n	80129ee <USBD_StdDevReq+0x42>
 80129ce:	2b20      	cmp	r3, #32
 80129d0:	d153      	bne.n	8012a7a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	32ae      	adds	r2, #174	@ 0xae
 80129dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129e0:	689b      	ldr	r3, [r3, #8]
 80129e2:	6839      	ldr	r1, [r7, #0]
 80129e4:	6878      	ldr	r0, [r7, #4]
 80129e6:	4798      	blx	r3
 80129e8:	4603      	mov	r3, r0
 80129ea:	73fb      	strb	r3, [r7, #15]
      break;
 80129ec:	e04a      	b.n	8012a84 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80129ee:	683b      	ldr	r3, [r7, #0]
 80129f0:	785b      	ldrb	r3, [r3, #1]
 80129f2:	2b09      	cmp	r3, #9
 80129f4:	d83b      	bhi.n	8012a6e <USBD_StdDevReq+0xc2>
 80129f6:	a201      	add	r2, pc, #4	@ (adr r2, 80129fc <USBD_StdDevReq+0x50>)
 80129f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129fc:	08012a51 	.word	0x08012a51
 8012a00:	08012a65 	.word	0x08012a65
 8012a04:	08012a6f 	.word	0x08012a6f
 8012a08:	08012a5b 	.word	0x08012a5b
 8012a0c:	08012a6f 	.word	0x08012a6f
 8012a10:	08012a2f 	.word	0x08012a2f
 8012a14:	08012a25 	.word	0x08012a25
 8012a18:	08012a6f 	.word	0x08012a6f
 8012a1c:	08012a47 	.word	0x08012a47
 8012a20:	08012a39 	.word	0x08012a39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012a24:	6839      	ldr	r1, [r7, #0]
 8012a26:	6878      	ldr	r0, [r7, #4]
 8012a28:	f000 fa3c 	bl	8012ea4 <USBD_GetDescriptor>
          break;
 8012a2c:	e024      	b.n	8012a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012a2e:	6839      	ldr	r1, [r7, #0]
 8012a30:	6878      	ldr	r0, [r7, #4]
 8012a32:	f000 fbcb 	bl	80131cc <USBD_SetAddress>
          break;
 8012a36:	e01f      	b.n	8012a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012a38:	6839      	ldr	r1, [r7, #0]
 8012a3a:	6878      	ldr	r0, [r7, #4]
 8012a3c:	f000 fc0a 	bl	8013254 <USBD_SetConfig>
 8012a40:	4603      	mov	r3, r0
 8012a42:	73fb      	strb	r3, [r7, #15]
          break;
 8012a44:	e018      	b.n	8012a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012a46:	6839      	ldr	r1, [r7, #0]
 8012a48:	6878      	ldr	r0, [r7, #4]
 8012a4a:	f000 fcad 	bl	80133a8 <USBD_GetConfig>
          break;
 8012a4e:	e013      	b.n	8012a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012a50:	6839      	ldr	r1, [r7, #0]
 8012a52:	6878      	ldr	r0, [r7, #4]
 8012a54:	f000 fcde 	bl	8013414 <USBD_GetStatus>
          break;
 8012a58:	e00e      	b.n	8012a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012a5a:	6839      	ldr	r1, [r7, #0]
 8012a5c:	6878      	ldr	r0, [r7, #4]
 8012a5e:	f000 fd0d 	bl	801347c <USBD_SetFeature>
          break;
 8012a62:	e009      	b.n	8012a78 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012a64:	6839      	ldr	r1, [r7, #0]
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f000 fd31 	bl	80134ce <USBD_ClrFeature>
          break;
 8012a6c:	e004      	b.n	8012a78 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8012a6e:	6839      	ldr	r1, [r7, #0]
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f000 fd88 	bl	8013586 <USBD_CtlError>
          break;
 8012a76:	bf00      	nop
      }
      break;
 8012a78:	e004      	b.n	8012a84 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8012a7a:	6839      	ldr	r1, [r7, #0]
 8012a7c:	6878      	ldr	r0, [r7, #4]
 8012a7e:	f000 fd82 	bl	8013586 <USBD_CtlError>
      break;
 8012a82:	bf00      	nop
  }

  return ret;
 8012a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a86:	4618      	mov	r0, r3
 8012a88:	3710      	adds	r7, #16
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd80      	pop	{r7, pc}
 8012a8e:	bf00      	nop

08012a90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b084      	sub	sp, #16
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
 8012a98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	781b      	ldrb	r3, [r3, #0]
 8012aa2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012aa6:	2b40      	cmp	r3, #64	@ 0x40
 8012aa8:	d005      	beq.n	8012ab6 <USBD_StdItfReq+0x26>
 8012aaa:	2b40      	cmp	r3, #64	@ 0x40
 8012aac:	d852      	bhi.n	8012b54 <USBD_StdItfReq+0xc4>
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d001      	beq.n	8012ab6 <USBD_StdItfReq+0x26>
 8012ab2:	2b20      	cmp	r3, #32
 8012ab4:	d14e      	bne.n	8012b54 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012abc:	b2db      	uxtb	r3, r3
 8012abe:	3b01      	subs	r3, #1
 8012ac0:	2b02      	cmp	r3, #2
 8012ac2:	d840      	bhi.n	8012b46 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012ac4:	683b      	ldr	r3, [r7, #0]
 8012ac6:	889b      	ldrh	r3, [r3, #4]
 8012ac8:	b2db      	uxtb	r3, r3
 8012aca:	2b01      	cmp	r3, #1
 8012acc:	d836      	bhi.n	8012b3c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8012ace:	683b      	ldr	r3, [r7, #0]
 8012ad0:	889b      	ldrh	r3, [r3, #4]
 8012ad2:	b2db      	uxtb	r3, r3
 8012ad4:	4619      	mov	r1, r3
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f7ff fedb 	bl	8012892 <USBD_CoreFindIF>
 8012adc:	4603      	mov	r3, r0
 8012ade:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012ae0:	7bbb      	ldrb	r3, [r7, #14]
 8012ae2:	2bff      	cmp	r3, #255	@ 0xff
 8012ae4:	d01d      	beq.n	8012b22 <USBD_StdItfReq+0x92>
 8012ae6:	7bbb      	ldrb	r3, [r7, #14]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d11a      	bne.n	8012b22 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8012aec:	7bba      	ldrb	r2, [r7, #14]
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	32ae      	adds	r2, #174	@ 0xae
 8012af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012af6:	689b      	ldr	r3, [r3, #8]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d00f      	beq.n	8012b1c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8012afc:	7bba      	ldrb	r2, [r7, #14]
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012b04:	7bba      	ldrb	r2, [r7, #14]
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	32ae      	adds	r2, #174	@ 0xae
 8012b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b0e:	689b      	ldr	r3, [r3, #8]
 8012b10:	6839      	ldr	r1, [r7, #0]
 8012b12:	6878      	ldr	r0, [r7, #4]
 8012b14:	4798      	blx	r3
 8012b16:	4603      	mov	r3, r0
 8012b18:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012b1a:	e004      	b.n	8012b26 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8012b1c:	2303      	movs	r3, #3
 8012b1e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012b20:	e001      	b.n	8012b26 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8012b22:	2303      	movs	r3, #3
 8012b24:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012b26:	683b      	ldr	r3, [r7, #0]
 8012b28:	88db      	ldrh	r3, [r3, #6]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d110      	bne.n	8012b50 <USBD_StdItfReq+0xc0>
 8012b2e:	7bfb      	ldrb	r3, [r7, #15]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d10d      	bne.n	8012b50 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012b34:	6878      	ldr	r0, [r7, #4]
 8012b36:	f000 fdfd 	bl	8013734 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012b3a:	e009      	b.n	8012b50 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8012b3c:	6839      	ldr	r1, [r7, #0]
 8012b3e:	6878      	ldr	r0, [r7, #4]
 8012b40:	f000 fd21 	bl	8013586 <USBD_CtlError>
          break;
 8012b44:	e004      	b.n	8012b50 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8012b46:	6839      	ldr	r1, [r7, #0]
 8012b48:	6878      	ldr	r0, [r7, #4]
 8012b4a:	f000 fd1c 	bl	8013586 <USBD_CtlError>
          break;
 8012b4e:	e000      	b.n	8012b52 <USBD_StdItfReq+0xc2>
          break;
 8012b50:	bf00      	nop
      }
      break;
 8012b52:	e004      	b.n	8012b5e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8012b54:	6839      	ldr	r1, [r7, #0]
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f000 fd15 	bl	8013586 <USBD_CtlError>
      break;
 8012b5c:	bf00      	nop
  }

  return ret;
 8012b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	3710      	adds	r7, #16
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd80      	pop	{r7, pc}

08012b68 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b084      	sub	sp, #16
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
 8012b70:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8012b72:	2300      	movs	r3, #0
 8012b74:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	889b      	ldrh	r3, [r3, #4]
 8012b7a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	781b      	ldrb	r3, [r3, #0]
 8012b80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012b84:	2b40      	cmp	r3, #64	@ 0x40
 8012b86:	d007      	beq.n	8012b98 <USBD_StdEPReq+0x30>
 8012b88:	2b40      	cmp	r3, #64	@ 0x40
 8012b8a:	f200 817f 	bhi.w	8012e8c <USBD_StdEPReq+0x324>
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d02a      	beq.n	8012be8 <USBD_StdEPReq+0x80>
 8012b92:	2b20      	cmp	r3, #32
 8012b94:	f040 817a 	bne.w	8012e8c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8012b98:	7bbb      	ldrb	r3, [r7, #14]
 8012b9a:	4619      	mov	r1, r3
 8012b9c:	6878      	ldr	r0, [r7, #4]
 8012b9e:	f7ff fe85 	bl	80128ac <USBD_CoreFindEP>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012ba6:	7b7b      	ldrb	r3, [r7, #13]
 8012ba8:	2bff      	cmp	r3, #255	@ 0xff
 8012baa:	f000 8174 	beq.w	8012e96 <USBD_StdEPReq+0x32e>
 8012bae:	7b7b      	ldrb	r3, [r7, #13]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	f040 8170 	bne.w	8012e96 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8012bb6:	7b7a      	ldrb	r2, [r7, #13]
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8012bbe:	7b7a      	ldrb	r2, [r7, #13]
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	32ae      	adds	r2, #174	@ 0xae
 8012bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bc8:	689b      	ldr	r3, [r3, #8]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	f000 8163 	beq.w	8012e96 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8012bd0:	7b7a      	ldrb	r2, [r7, #13]
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	32ae      	adds	r2, #174	@ 0xae
 8012bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bda:	689b      	ldr	r3, [r3, #8]
 8012bdc:	6839      	ldr	r1, [r7, #0]
 8012bde:	6878      	ldr	r0, [r7, #4]
 8012be0:	4798      	blx	r3
 8012be2:	4603      	mov	r3, r0
 8012be4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012be6:	e156      	b.n	8012e96 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012be8:	683b      	ldr	r3, [r7, #0]
 8012bea:	785b      	ldrb	r3, [r3, #1]
 8012bec:	2b03      	cmp	r3, #3
 8012bee:	d008      	beq.n	8012c02 <USBD_StdEPReq+0x9a>
 8012bf0:	2b03      	cmp	r3, #3
 8012bf2:	f300 8145 	bgt.w	8012e80 <USBD_StdEPReq+0x318>
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	f000 809b 	beq.w	8012d32 <USBD_StdEPReq+0x1ca>
 8012bfc:	2b01      	cmp	r3, #1
 8012bfe:	d03c      	beq.n	8012c7a <USBD_StdEPReq+0x112>
 8012c00:	e13e      	b.n	8012e80 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012c08:	b2db      	uxtb	r3, r3
 8012c0a:	2b02      	cmp	r3, #2
 8012c0c:	d002      	beq.n	8012c14 <USBD_StdEPReq+0xac>
 8012c0e:	2b03      	cmp	r3, #3
 8012c10:	d016      	beq.n	8012c40 <USBD_StdEPReq+0xd8>
 8012c12:	e02c      	b.n	8012c6e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012c14:	7bbb      	ldrb	r3, [r7, #14]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d00d      	beq.n	8012c36 <USBD_StdEPReq+0xce>
 8012c1a:	7bbb      	ldrb	r3, [r7, #14]
 8012c1c:	2b80      	cmp	r3, #128	@ 0x80
 8012c1e:	d00a      	beq.n	8012c36 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012c20:	7bbb      	ldrb	r3, [r7, #14]
 8012c22:	4619      	mov	r1, r3
 8012c24:	6878      	ldr	r0, [r7, #4]
 8012c26:	f001 f9ed 	bl	8014004 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012c2a:	2180      	movs	r1, #128	@ 0x80
 8012c2c:	6878      	ldr	r0, [r7, #4]
 8012c2e:	f001 f9e9 	bl	8014004 <USBD_LL_StallEP>
 8012c32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012c34:	e020      	b.n	8012c78 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8012c36:	6839      	ldr	r1, [r7, #0]
 8012c38:	6878      	ldr	r0, [r7, #4]
 8012c3a:	f000 fca4 	bl	8013586 <USBD_CtlError>
              break;
 8012c3e:	e01b      	b.n	8012c78 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	885b      	ldrh	r3, [r3, #2]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d10e      	bne.n	8012c66 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012c48:	7bbb      	ldrb	r3, [r7, #14]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d00b      	beq.n	8012c66 <USBD_StdEPReq+0xfe>
 8012c4e:	7bbb      	ldrb	r3, [r7, #14]
 8012c50:	2b80      	cmp	r3, #128	@ 0x80
 8012c52:	d008      	beq.n	8012c66 <USBD_StdEPReq+0xfe>
 8012c54:	683b      	ldr	r3, [r7, #0]
 8012c56:	88db      	ldrh	r3, [r3, #6]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d104      	bne.n	8012c66 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012c5c:	7bbb      	ldrb	r3, [r7, #14]
 8012c5e:	4619      	mov	r1, r3
 8012c60:	6878      	ldr	r0, [r7, #4]
 8012c62:	f001 f9cf 	bl	8014004 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012c66:	6878      	ldr	r0, [r7, #4]
 8012c68:	f000 fd64 	bl	8013734 <USBD_CtlSendStatus>

              break;
 8012c6c:	e004      	b.n	8012c78 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8012c6e:	6839      	ldr	r1, [r7, #0]
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f000 fc88 	bl	8013586 <USBD_CtlError>
              break;
 8012c76:	bf00      	nop
          }
          break;
 8012c78:	e107      	b.n	8012e8a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012c80:	b2db      	uxtb	r3, r3
 8012c82:	2b02      	cmp	r3, #2
 8012c84:	d002      	beq.n	8012c8c <USBD_StdEPReq+0x124>
 8012c86:	2b03      	cmp	r3, #3
 8012c88:	d016      	beq.n	8012cb8 <USBD_StdEPReq+0x150>
 8012c8a:	e04b      	b.n	8012d24 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012c8c:	7bbb      	ldrb	r3, [r7, #14]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d00d      	beq.n	8012cae <USBD_StdEPReq+0x146>
 8012c92:	7bbb      	ldrb	r3, [r7, #14]
 8012c94:	2b80      	cmp	r3, #128	@ 0x80
 8012c96:	d00a      	beq.n	8012cae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012c98:	7bbb      	ldrb	r3, [r7, #14]
 8012c9a:	4619      	mov	r1, r3
 8012c9c:	6878      	ldr	r0, [r7, #4]
 8012c9e:	f001 f9b1 	bl	8014004 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012ca2:	2180      	movs	r1, #128	@ 0x80
 8012ca4:	6878      	ldr	r0, [r7, #4]
 8012ca6:	f001 f9ad 	bl	8014004 <USBD_LL_StallEP>
 8012caa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012cac:	e040      	b.n	8012d30 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8012cae:	6839      	ldr	r1, [r7, #0]
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	f000 fc68 	bl	8013586 <USBD_CtlError>
              break;
 8012cb6:	e03b      	b.n	8012d30 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012cb8:	683b      	ldr	r3, [r7, #0]
 8012cba:	885b      	ldrh	r3, [r3, #2]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d136      	bne.n	8012d2e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012cc0:	7bbb      	ldrb	r3, [r7, #14]
 8012cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d004      	beq.n	8012cd4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012cca:	7bbb      	ldrb	r3, [r7, #14]
 8012ccc:	4619      	mov	r1, r3
 8012cce:	6878      	ldr	r0, [r7, #4]
 8012cd0:	f001 f9b7 	bl	8014042 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012cd4:	6878      	ldr	r0, [r7, #4]
 8012cd6:	f000 fd2d 	bl	8013734 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8012cda:	7bbb      	ldrb	r3, [r7, #14]
 8012cdc:	4619      	mov	r1, r3
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f7ff fde4 	bl	80128ac <USBD_CoreFindEP>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012ce8:	7b7b      	ldrb	r3, [r7, #13]
 8012cea:	2bff      	cmp	r3, #255	@ 0xff
 8012cec:	d01f      	beq.n	8012d2e <USBD_StdEPReq+0x1c6>
 8012cee:	7b7b      	ldrb	r3, [r7, #13]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d11c      	bne.n	8012d2e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8012cf4:	7b7a      	ldrb	r2, [r7, #13]
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8012cfc:	7b7a      	ldrb	r2, [r7, #13]
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	32ae      	adds	r2, #174	@ 0xae
 8012d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d06:	689b      	ldr	r3, [r3, #8]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d010      	beq.n	8012d2e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012d0c:	7b7a      	ldrb	r2, [r7, #13]
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	32ae      	adds	r2, #174	@ 0xae
 8012d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d16:	689b      	ldr	r3, [r3, #8]
 8012d18:	6839      	ldr	r1, [r7, #0]
 8012d1a:	6878      	ldr	r0, [r7, #4]
 8012d1c:	4798      	blx	r3
 8012d1e:	4603      	mov	r3, r0
 8012d20:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8012d22:	e004      	b.n	8012d2e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8012d24:	6839      	ldr	r1, [r7, #0]
 8012d26:	6878      	ldr	r0, [r7, #4]
 8012d28:	f000 fc2d 	bl	8013586 <USBD_CtlError>
              break;
 8012d2c:	e000      	b.n	8012d30 <USBD_StdEPReq+0x1c8>
              break;
 8012d2e:	bf00      	nop
          }
          break;
 8012d30:	e0ab      	b.n	8012e8a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012d38:	b2db      	uxtb	r3, r3
 8012d3a:	2b02      	cmp	r3, #2
 8012d3c:	d002      	beq.n	8012d44 <USBD_StdEPReq+0x1dc>
 8012d3e:	2b03      	cmp	r3, #3
 8012d40:	d032      	beq.n	8012da8 <USBD_StdEPReq+0x240>
 8012d42:	e097      	b.n	8012e74 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012d44:	7bbb      	ldrb	r3, [r7, #14]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d007      	beq.n	8012d5a <USBD_StdEPReq+0x1f2>
 8012d4a:	7bbb      	ldrb	r3, [r7, #14]
 8012d4c:	2b80      	cmp	r3, #128	@ 0x80
 8012d4e:	d004      	beq.n	8012d5a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8012d50:	6839      	ldr	r1, [r7, #0]
 8012d52:	6878      	ldr	r0, [r7, #4]
 8012d54:	f000 fc17 	bl	8013586 <USBD_CtlError>
                break;
 8012d58:	e091      	b.n	8012e7e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012d5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	da0b      	bge.n	8012d7a <USBD_StdEPReq+0x212>
 8012d62:	7bbb      	ldrb	r3, [r7, #14]
 8012d64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012d68:	4613      	mov	r3, r2
 8012d6a:	009b      	lsls	r3, r3, #2
 8012d6c:	4413      	add	r3, r2
 8012d6e:	009b      	lsls	r3, r3, #2
 8012d70:	3310      	adds	r3, #16
 8012d72:	687a      	ldr	r2, [r7, #4]
 8012d74:	4413      	add	r3, r2
 8012d76:	3304      	adds	r3, #4
 8012d78:	e00b      	b.n	8012d92 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012d7a:	7bbb      	ldrb	r3, [r7, #14]
 8012d7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012d80:	4613      	mov	r3, r2
 8012d82:	009b      	lsls	r3, r3, #2
 8012d84:	4413      	add	r3, r2
 8012d86:	009b      	lsls	r3, r3, #2
 8012d88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012d8c:	687a      	ldr	r2, [r7, #4]
 8012d8e:	4413      	add	r3, r2
 8012d90:	3304      	adds	r3, #4
 8012d92:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012d94:	68bb      	ldr	r3, [r7, #8]
 8012d96:	2200      	movs	r2, #0
 8012d98:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012d9a:	68bb      	ldr	r3, [r7, #8]
 8012d9c:	2202      	movs	r2, #2
 8012d9e:	4619      	mov	r1, r3
 8012da0:	6878      	ldr	r0, [r7, #4]
 8012da2:	f000 fc6d 	bl	8013680 <USBD_CtlSendData>
              break;
 8012da6:	e06a      	b.n	8012e7e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012da8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	da11      	bge.n	8012dd4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012db0:	7bbb      	ldrb	r3, [r7, #14]
 8012db2:	f003 020f 	and.w	r2, r3, #15
 8012db6:	6879      	ldr	r1, [r7, #4]
 8012db8:	4613      	mov	r3, r2
 8012dba:	009b      	lsls	r3, r3, #2
 8012dbc:	4413      	add	r3, r2
 8012dbe:	009b      	lsls	r3, r3, #2
 8012dc0:	440b      	add	r3, r1
 8012dc2:	3324      	adds	r3, #36	@ 0x24
 8012dc4:	881b      	ldrh	r3, [r3, #0]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d117      	bne.n	8012dfa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012dca:	6839      	ldr	r1, [r7, #0]
 8012dcc:	6878      	ldr	r0, [r7, #4]
 8012dce:	f000 fbda 	bl	8013586 <USBD_CtlError>
                  break;
 8012dd2:	e054      	b.n	8012e7e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012dd4:	7bbb      	ldrb	r3, [r7, #14]
 8012dd6:	f003 020f 	and.w	r2, r3, #15
 8012dda:	6879      	ldr	r1, [r7, #4]
 8012ddc:	4613      	mov	r3, r2
 8012dde:	009b      	lsls	r3, r3, #2
 8012de0:	4413      	add	r3, r2
 8012de2:	009b      	lsls	r3, r3, #2
 8012de4:	440b      	add	r3, r1
 8012de6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012dea:	881b      	ldrh	r3, [r3, #0]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d104      	bne.n	8012dfa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012df0:	6839      	ldr	r1, [r7, #0]
 8012df2:	6878      	ldr	r0, [r7, #4]
 8012df4:	f000 fbc7 	bl	8013586 <USBD_CtlError>
                  break;
 8012df8:	e041      	b.n	8012e7e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012dfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	da0b      	bge.n	8012e1a <USBD_StdEPReq+0x2b2>
 8012e02:	7bbb      	ldrb	r3, [r7, #14]
 8012e04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012e08:	4613      	mov	r3, r2
 8012e0a:	009b      	lsls	r3, r3, #2
 8012e0c:	4413      	add	r3, r2
 8012e0e:	009b      	lsls	r3, r3, #2
 8012e10:	3310      	adds	r3, #16
 8012e12:	687a      	ldr	r2, [r7, #4]
 8012e14:	4413      	add	r3, r2
 8012e16:	3304      	adds	r3, #4
 8012e18:	e00b      	b.n	8012e32 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012e1a:	7bbb      	ldrb	r3, [r7, #14]
 8012e1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012e20:	4613      	mov	r3, r2
 8012e22:	009b      	lsls	r3, r3, #2
 8012e24:	4413      	add	r3, r2
 8012e26:	009b      	lsls	r3, r3, #2
 8012e28:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012e2c:	687a      	ldr	r2, [r7, #4]
 8012e2e:	4413      	add	r3, r2
 8012e30:	3304      	adds	r3, #4
 8012e32:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012e34:	7bbb      	ldrb	r3, [r7, #14]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d002      	beq.n	8012e40 <USBD_StdEPReq+0x2d8>
 8012e3a:	7bbb      	ldrb	r3, [r7, #14]
 8012e3c:	2b80      	cmp	r3, #128	@ 0x80
 8012e3e:	d103      	bne.n	8012e48 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	2200      	movs	r2, #0
 8012e44:	601a      	str	r2, [r3, #0]
 8012e46:	e00e      	b.n	8012e66 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012e48:	7bbb      	ldrb	r3, [r7, #14]
 8012e4a:	4619      	mov	r1, r3
 8012e4c:	6878      	ldr	r0, [r7, #4]
 8012e4e:	f001 f917 	bl	8014080 <USBD_LL_IsStallEP>
 8012e52:	4603      	mov	r3, r0
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d003      	beq.n	8012e60 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8012e58:	68bb      	ldr	r3, [r7, #8]
 8012e5a:	2201      	movs	r2, #1
 8012e5c:	601a      	str	r2, [r3, #0]
 8012e5e:	e002      	b.n	8012e66 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	2200      	movs	r2, #0
 8012e64:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	2202      	movs	r2, #2
 8012e6a:	4619      	mov	r1, r3
 8012e6c:	6878      	ldr	r0, [r7, #4]
 8012e6e:	f000 fc07 	bl	8013680 <USBD_CtlSendData>
              break;
 8012e72:	e004      	b.n	8012e7e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8012e74:	6839      	ldr	r1, [r7, #0]
 8012e76:	6878      	ldr	r0, [r7, #4]
 8012e78:	f000 fb85 	bl	8013586 <USBD_CtlError>
              break;
 8012e7c:	bf00      	nop
          }
          break;
 8012e7e:	e004      	b.n	8012e8a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8012e80:	6839      	ldr	r1, [r7, #0]
 8012e82:	6878      	ldr	r0, [r7, #4]
 8012e84:	f000 fb7f 	bl	8013586 <USBD_CtlError>
          break;
 8012e88:	bf00      	nop
      }
      break;
 8012e8a:	e005      	b.n	8012e98 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8012e8c:	6839      	ldr	r1, [r7, #0]
 8012e8e:	6878      	ldr	r0, [r7, #4]
 8012e90:	f000 fb79 	bl	8013586 <USBD_CtlError>
      break;
 8012e94:	e000      	b.n	8012e98 <USBD_StdEPReq+0x330>
      break;
 8012e96:	bf00      	nop
  }

  return ret;
 8012e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	3710      	adds	r7, #16
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd80      	pop	{r7, pc}
	...

08012ea4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b084      	sub	sp, #16
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
 8012eac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012eae:	2300      	movs	r3, #0
 8012eb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012eba:	683b      	ldr	r3, [r7, #0]
 8012ebc:	885b      	ldrh	r3, [r3, #2]
 8012ebe:	0a1b      	lsrs	r3, r3, #8
 8012ec0:	b29b      	uxth	r3, r3
 8012ec2:	3b01      	subs	r3, #1
 8012ec4:	2b0e      	cmp	r3, #14
 8012ec6:	f200 8152 	bhi.w	801316e <USBD_GetDescriptor+0x2ca>
 8012eca:	a201      	add	r2, pc, #4	@ (adr r2, 8012ed0 <USBD_GetDescriptor+0x2c>)
 8012ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ed0:	08012f41 	.word	0x08012f41
 8012ed4:	08012f59 	.word	0x08012f59
 8012ed8:	08012f99 	.word	0x08012f99
 8012edc:	0801316f 	.word	0x0801316f
 8012ee0:	0801316f 	.word	0x0801316f
 8012ee4:	0801310f 	.word	0x0801310f
 8012ee8:	0801313b 	.word	0x0801313b
 8012eec:	0801316f 	.word	0x0801316f
 8012ef0:	0801316f 	.word	0x0801316f
 8012ef4:	0801316f 	.word	0x0801316f
 8012ef8:	0801316f 	.word	0x0801316f
 8012efc:	0801316f 	.word	0x0801316f
 8012f00:	0801316f 	.word	0x0801316f
 8012f04:	0801316f 	.word	0x0801316f
 8012f08:	08012f0d 	.word	0x08012f0d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012f12:	69db      	ldr	r3, [r3, #28]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d00b      	beq.n	8012f30 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012f1e:	69db      	ldr	r3, [r3, #28]
 8012f20:	687a      	ldr	r2, [r7, #4]
 8012f22:	7c12      	ldrb	r2, [r2, #16]
 8012f24:	f107 0108 	add.w	r1, r7, #8
 8012f28:	4610      	mov	r0, r2
 8012f2a:	4798      	blx	r3
 8012f2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012f2e:	e126      	b.n	801317e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012f30:	6839      	ldr	r1, [r7, #0]
 8012f32:	6878      	ldr	r0, [r7, #4]
 8012f34:	f000 fb27 	bl	8013586 <USBD_CtlError>
        err++;
 8012f38:	7afb      	ldrb	r3, [r7, #11]
 8012f3a:	3301      	adds	r3, #1
 8012f3c:	72fb      	strb	r3, [r7, #11]
      break;
 8012f3e:	e11e      	b.n	801317e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	687a      	ldr	r2, [r7, #4]
 8012f4a:	7c12      	ldrb	r2, [r2, #16]
 8012f4c:	f107 0108 	add.w	r1, r7, #8
 8012f50:	4610      	mov	r0, r2
 8012f52:	4798      	blx	r3
 8012f54:	60f8      	str	r0, [r7, #12]
      break;
 8012f56:	e112      	b.n	801317e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	7c1b      	ldrb	r3, [r3, #16]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d10d      	bne.n	8012f7c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f68:	f107 0208 	add.w	r2, r7, #8
 8012f6c:	4610      	mov	r0, r2
 8012f6e:	4798      	blx	r3
 8012f70:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	3301      	adds	r3, #1
 8012f76:	2202      	movs	r2, #2
 8012f78:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012f7a:	e100      	b.n	801317e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f84:	f107 0208 	add.w	r2, r7, #8
 8012f88:	4610      	mov	r0, r2
 8012f8a:	4798      	blx	r3
 8012f8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	3301      	adds	r3, #1
 8012f92:	2202      	movs	r2, #2
 8012f94:	701a      	strb	r2, [r3, #0]
      break;
 8012f96:	e0f2      	b.n	801317e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	885b      	ldrh	r3, [r3, #2]
 8012f9c:	b2db      	uxtb	r3, r3
 8012f9e:	2b05      	cmp	r3, #5
 8012fa0:	f200 80ac 	bhi.w	80130fc <USBD_GetDescriptor+0x258>
 8012fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8012fac <USBD_GetDescriptor+0x108>)
 8012fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012faa:	bf00      	nop
 8012fac:	08012fc5 	.word	0x08012fc5
 8012fb0:	08012ff9 	.word	0x08012ff9
 8012fb4:	0801302d 	.word	0x0801302d
 8012fb8:	08013061 	.word	0x08013061
 8012fbc:	08013095 	.word	0x08013095
 8012fc0:	080130c9 	.word	0x080130c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012fca:	685b      	ldr	r3, [r3, #4]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d00b      	beq.n	8012fe8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012fd6:	685b      	ldr	r3, [r3, #4]
 8012fd8:	687a      	ldr	r2, [r7, #4]
 8012fda:	7c12      	ldrb	r2, [r2, #16]
 8012fdc:	f107 0108 	add.w	r1, r7, #8
 8012fe0:	4610      	mov	r0, r2
 8012fe2:	4798      	blx	r3
 8012fe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012fe6:	e091      	b.n	801310c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012fe8:	6839      	ldr	r1, [r7, #0]
 8012fea:	6878      	ldr	r0, [r7, #4]
 8012fec:	f000 facb 	bl	8013586 <USBD_CtlError>
            err++;
 8012ff0:	7afb      	ldrb	r3, [r7, #11]
 8012ff2:	3301      	adds	r3, #1
 8012ff4:	72fb      	strb	r3, [r7, #11]
          break;
 8012ff6:	e089      	b.n	801310c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012ffe:	689b      	ldr	r3, [r3, #8]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d00b      	beq.n	801301c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801300a:	689b      	ldr	r3, [r3, #8]
 801300c:	687a      	ldr	r2, [r7, #4]
 801300e:	7c12      	ldrb	r2, [r2, #16]
 8013010:	f107 0108 	add.w	r1, r7, #8
 8013014:	4610      	mov	r0, r2
 8013016:	4798      	blx	r3
 8013018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801301a:	e077      	b.n	801310c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801301c:	6839      	ldr	r1, [r7, #0]
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f000 fab1 	bl	8013586 <USBD_CtlError>
            err++;
 8013024:	7afb      	ldrb	r3, [r7, #11]
 8013026:	3301      	adds	r3, #1
 8013028:	72fb      	strb	r3, [r7, #11]
          break;
 801302a:	e06f      	b.n	801310c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013032:	68db      	ldr	r3, [r3, #12]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d00b      	beq.n	8013050 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801303e:	68db      	ldr	r3, [r3, #12]
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	7c12      	ldrb	r2, [r2, #16]
 8013044:	f107 0108 	add.w	r1, r7, #8
 8013048:	4610      	mov	r0, r2
 801304a:	4798      	blx	r3
 801304c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801304e:	e05d      	b.n	801310c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013050:	6839      	ldr	r1, [r7, #0]
 8013052:	6878      	ldr	r0, [r7, #4]
 8013054:	f000 fa97 	bl	8013586 <USBD_CtlError>
            err++;
 8013058:	7afb      	ldrb	r3, [r7, #11]
 801305a:	3301      	adds	r3, #1
 801305c:	72fb      	strb	r3, [r7, #11]
          break;
 801305e:	e055      	b.n	801310c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013066:	691b      	ldr	r3, [r3, #16]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d00b      	beq.n	8013084 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013072:	691b      	ldr	r3, [r3, #16]
 8013074:	687a      	ldr	r2, [r7, #4]
 8013076:	7c12      	ldrb	r2, [r2, #16]
 8013078:	f107 0108 	add.w	r1, r7, #8
 801307c:	4610      	mov	r0, r2
 801307e:	4798      	blx	r3
 8013080:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013082:	e043      	b.n	801310c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013084:	6839      	ldr	r1, [r7, #0]
 8013086:	6878      	ldr	r0, [r7, #4]
 8013088:	f000 fa7d 	bl	8013586 <USBD_CtlError>
            err++;
 801308c:	7afb      	ldrb	r3, [r7, #11]
 801308e:	3301      	adds	r3, #1
 8013090:	72fb      	strb	r3, [r7, #11]
          break;
 8013092:	e03b      	b.n	801310c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801309a:	695b      	ldr	r3, [r3, #20]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d00b      	beq.n	80130b8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80130a6:	695b      	ldr	r3, [r3, #20]
 80130a8:	687a      	ldr	r2, [r7, #4]
 80130aa:	7c12      	ldrb	r2, [r2, #16]
 80130ac:	f107 0108 	add.w	r1, r7, #8
 80130b0:	4610      	mov	r0, r2
 80130b2:	4798      	blx	r3
 80130b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80130b6:	e029      	b.n	801310c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80130b8:	6839      	ldr	r1, [r7, #0]
 80130ba:	6878      	ldr	r0, [r7, #4]
 80130bc:	f000 fa63 	bl	8013586 <USBD_CtlError>
            err++;
 80130c0:	7afb      	ldrb	r3, [r7, #11]
 80130c2:	3301      	adds	r3, #1
 80130c4:	72fb      	strb	r3, [r7, #11]
          break;
 80130c6:	e021      	b.n	801310c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80130ce:	699b      	ldr	r3, [r3, #24]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d00b      	beq.n	80130ec <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80130da:	699b      	ldr	r3, [r3, #24]
 80130dc:	687a      	ldr	r2, [r7, #4]
 80130de:	7c12      	ldrb	r2, [r2, #16]
 80130e0:	f107 0108 	add.w	r1, r7, #8
 80130e4:	4610      	mov	r0, r2
 80130e6:	4798      	blx	r3
 80130e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80130ea:	e00f      	b.n	801310c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80130ec:	6839      	ldr	r1, [r7, #0]
 80130ee:	6878      	ldr	r0, [r7, #4]
 80130f0:	f000 fa49 	bl	8013586 <USBD_CtlError>
            err++;
 80130f4:	7afb      	ldrb	r3, [r7, #11]
 80130f6:	3301      	adds	r3, #1
 80130f8:	72fb      	strb	r3, [r7, #11]
          break;
 80130fa:	e007      	b.n	801310c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80130fc:	6839      	ldr	r1, [r7, #0]
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	f000 fa41 	bl	8013586 <USBD_CtlError>
          err++;
 8013104:	7afb      	ldrb	r3, [r7, #11]
 8013106:	3301      	adds	r3, #1
 8013108:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801310a:	bf00      	nop
      }
      break;
 801310c:	e037      	b.n	801317e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	7c1b      	ldrb	r3, [r3, #16]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d109      	bne.n	801312a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801311c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801311e:	f107 0208 	add.w	r2, r7, #8
 8013122:	4610      	mov	r0, r2
 8013124:	4798      	blx	r3
 8013126:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013128:	e029      	b.n	801317e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801312a:	6839      	ldr	r1, [r7, #0]
 801312c:	6878      	ldr	r0, [r7, #4]
 801312e:	f000 fa2a 	bl	8013586 <USBD_CtlError>
        err++;
 8013132:	7afb      	ldrb	r3, [r7, #11]
 8013134:	3301      	adds	r3, #1
 8013136:	72fb      	strb	r3, [r7, #11]
      break;
 8013138:	e021      	b.n	801317e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	7c1b      	ldrb	r3, [r3, #16]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d10d      	bne.n	801315e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801314a:	f107 0208 	add.w	r2, r7, #8
 801314e:	4610      	mov	r0, r2
 8013150:	4798      	blx	r3
 8013152:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	3301      	adds	r3, #1
 8013158:	2207      	movs	r2, #7
 801315a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801315c:	e00f      	b.n	801317e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801315e:	6839      	ldr	r1, [r7, #0]
 8013160:	6878      	ldr	r0, [r7, #4]
 8013162:	f000 fa10 	bl	8013586 <USBD_CtlError>
        err++;
 8013166:	7afb      	ldrb	r3, [r7, #11]
 8013168:	3301      	adds	r3, #1
 801316a:	72fb      	strb	r3, [r7, #11]
      break;
 801316c:	e007      	b.n	801317e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801316e:	6839      	ldr	r1, [r7, #0]
 8013170:	6878      	ldr	r0, [r7, #4]
 8013172:	f000 fa08 	bl	8013586 <USBD_CtlError>
      err++;
 8013176:	7afb      	ldrb	r3, [r7, #11]
 8013178:	3301      	adds	r3, #1
 801317a:	72fb      	strb	r3, [r7, #11]
      break;
 801317c:	bf00      	nop
  }

  if (err != 0U)
 801317e:	7afb      	ldrb	r3, [r7, #11]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d11e      	bne.n	80131c2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8013184:	683b      	ldr	r3, [r7, #0]
 8013186:	88db      	ldrh	r3, [r3, #6]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d016      	beq.n	80131ba <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801318c:	893b      	ldrh	r3, [r7, #8]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d00e      	beq.n	80131b0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8013192:	683b      	ldr	r3, [r7, #0]
 8013194:	88da      	ldrh	r2, [r3, #6]
 8013196:	893b      	ldrh	r3, [r7, #8]
 8013198:	4293      	cmp	r3, r2
 801319a:	bf28      	it	cs
 801319c:	4613      	movcs	r3, r2
 801319e:	b29b      	uxth	r3, r3
 80131a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80131a2:	893b      	ldrh	r3, [r7, #8]
 80131a4:	461a      	mov	r2, r3
 80131a6:	68f9      	ldr	r1, [r7, #12]
 80131a8:	6878      	ldr	r0, [r7, #4]
 80131aa:	f000 fa69 	bl	8013680 <USBD_CtlSendData>
 80131ae:	e009      	b.n	80131c4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80131b0:	6839      	ldr	r1, [r7, #0]
 80131b2:	6878      	ldr	r0, [r7, #4]
 80131b4:	f000 f9e7 	bl	8013586 <USBD_CtlError>
 80131b8:	e004      	b.n	80131c4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80131ba:	6878      	ldr	r0, [r7, #4]
 80131bc:	f000 faba 	bl	8013734 <USBD_CtlSendStatus>
 80131c0:	e000      	b.n	80131c4 <USBD_GetDescriptor+0x320>
    return;
 80131c2:	bf00      	nop
  }
}
 80131c4:	3710      	adds	r7, #16
 80131c6:	46bd      	mov	sp, r7
 80131c8:	bd80      	pop	{r7, pc}
 80131ca:	bf00      	nop

080131cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b084      	sub	sp, #16
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
 80131d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	889b      	ldrh	r3, [r3, #4]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d131      	bne.n	8013242 <USBD_SetAddress+0x76>
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	88db      	ldrh	r3, [r3, #6]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d12d      	bne.n	8013242 <USBD_SetAddress+0x76>
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	885b      	ldrh	r3, [r3, #2]
 80131ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80131ec:	d829      	bhi.n	8013242 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	885b      	ldrh	r3, [r3, #2]
 80131f2:	b2db      	uxtb	r3, r3
 80131f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80131f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013200:	b2db      	uxtb	r3, r3
 8013202:	2b03      	cmp	r3, #3
 8013204:	d104      	bne.n	8013210 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013206:	6839      	ldr	r1, [r7, #0]
 8013208:	6878      	ldr	r0, [r7, #4]
 801320a:	f000 f9bc 	bl	8013586 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801320e:	e01d      	b.n	801324c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	7bfa      	ldrb	r2, [r7, #15]
 8013214:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013218:	7bfb      	ldrb	r3, [r7, #15]
 801321a:	4619      	mov	r1, r3
 801321c:	6878      	ldr	r0, [r7, #4]
 801321e:	f000 ff5b 	bl	80140d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013222:	6878      	ldr	r0, [r7, #4]
 8013224:	f000 fa86 	bl	8013734 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013228:	7bfb      	ldrb	r3, [r7, #15]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d004      	beq.n	8013238 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	2202      	movs	r2, #2
 8013232:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013236:	e009      	b.n	801324c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	2201      	movs	r2, #1
 801323c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013240:	e004      	b.n	801324c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013242:	6839      	ldr	r1, [r7, #0]
 8013244:	6878      	ldr	r0, [r7, #4]
 8013246:	f000 f99e 	bl	8013586 <USBD_CtlError>
  }
}
 801324a:	bf00      	nop
 801324c:	bf00      	nop
 801324e:	3710      	adds	r7, #16
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}

08013254 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b084      	sub	sp, #16
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
 801325c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801325e:	2300      	movs	r3, #0
 8013260:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013262:	683b      	ldr	r3, [r7, #0]
 8013264:	885b      	ldrh	r3, [r3, #2]
 8013266:	b2da      	uxtb	r2, r3
 8013268:	4b4e      	ldr	r3, [pc, #312]	@ (80133a4 <USBD_SetConfig+0x150>)
 801326a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801326c:	4b4d      	ldr	r3, [pc, #308]	@ (80133a4 <USBD_SetConfig+0x150>)
 801326e:	781b      	ldrb	r3, [r3, #0]
 8013270:	2b01      	cmp	r3, #1
 8013272:	d905      	bls.n	8013280 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013274:	6839      	ldr	r1, [r7, #0]
 8013276:	6878      	ldr	r0, [r7, #4]
 8013278:	f000 f985 	bl	8013586 <USBD_CtlError>
    return USBD_FAIL;
 801327c:	2303      	movs	r3, #3
 801327e:	e08c      	b.n	801339a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013286:	b2db      	uxtb	r3, r3
 8013288:	2b02      	cmp	r3, #2
 801328a:	d002      	beq.n	8013292 <USBD_SetConfig+0x3e>
 801328c:	2b03      	cmp	r3, #3
 801328e:	d029      	beq.n	80132e4 <USBD_SetConfig+0x90>
 8013290:	e075      	b.n	801337e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8013292:	4b44      	ldr	r3, [pc, #272]	@ (80133a4 <USBD_SetConfig+0x150>)
 8013294:	781b      	ldrb	r3, [r3, #0]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d020      	beq.n	80132dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801329a:	4b42      	ldr	r3, [pc, #264]	@ (80133a4 <USBD_SetConfig+0x150>)
 801329c:	781b      	ldrb	r3, [r3, #0]
 801329e:	461a      	mov	r2, r3
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80132a4:	4b3f      	ldr	r3, [pc, #252]	@ (80133a4 <USBD_SetConfig+0x150>)
 80132a6:	781b      	ldrb	r3, [r3, #0]
 80132a8:	4619      	mov	r1, r3
 80132aa:	6878      	ldr	r0, [r7, #4]
 80132ac:	f7fe ffb9 	bl	8012222 <USBD_SetClassConfig>
 80132b0:	4603      	mov	r3, r0
 80132b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80132b4:	7bfb      	ldrb	r3, [r7, #15]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d008      	beq.n	80132cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80132ba:	6839      	ldr	r1, [r7, #0]
 80132bc:	6878      	ldr	r0, [r7, #4]
 80132be:	f000 f962 	bl	8013586 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	2202      	movs	r2, #2
 80132c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80132ca:	e065      	b.n	8013398 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80132cc:	6878      	ldr	r0, [r7, #4]
 80132ce:	f000 fa31 	bl	8013734 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	2203      	movs	r2, #3
 80132d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80132da:	e05d      	b.n	8013398 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80132dc:	6878      	ldr	r0, [r7, #4]
 80132de:	f000 fa29 	bl	8013734 <USBD_CtlSendStatus>
      break;
 80132e2:	e059      	b.n	8013398 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80132e4:	4b2f      	ldr	r3, [pc, #188]	@ (80133a4 <USBD_SetConfig+0x150>)
 80132e6:	781b      	ldrb	r3, [r3, #0]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d112      	bne.n	8013312 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	2202      	movs	r2, #2
 80132f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80132f4:	4b2b      	ldr	r3, [pc, #172]	@ (80133a4 <USBD_SetConfig+0x150>)
 80132f6:	781b      	ldrb	r3, [r3, #0]
 80132f8:	461a      	mov	r2, r3
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80132fe:	4b29      	ldr	r3, [pc, #164]	@ (80133a4 <USBD_SetConfig+0x150>)
 8013300:	781b      	ldrb	r3, [r3, #0]
 8013302:	4619      	mov	r1, r3
 8013304:	6878      	ldr	r0, [r7, #4]
 8013306:	f7fe ffa8 	bl	801225a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801330a:	6878      	ldr	r0, [r7, #4]
 801330c:	f000 fa12 	bl	8013734 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013310:	e042      	b.n	8013398 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8013312:	4b24      	ldr	r3, [pc, #144]	@ (80133a4 <USBD_SetConfig+0x150>)
 8013314:	781b      	ldrb	r3, [r3, #0]
 8013316:	461a      	mov	r2, r3
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	685b      	ldr	r3, [r3, #4]
 801331c:	429a      	cmp	r2, r3
 801331e:	d02a      	beq.n	8013376 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	685b      	ldr	r3, [r3, #4]
 8013324:	b2db      	uxtb	r3, r3
 8013326:	4619      	mov	r1, r3
 8013328:	6878      	ldr	r0, [r7, #4]
 801332a:	f7fe ff96 	bl	801225a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801332e:	4b1d      	ldr	r3, [pc, #116]	@ (80133a4 <USBD_SetConfig+0x150>)
 8013330:	781b      	ldrb	r3, [r3, #0]
 8013332:	461a      	mov	r2, r3
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013338:	4b1a      	ldr	r3, [pc, #104]	@ (80133a4 <USBD_SetConfig+0x150>)
 801333a:	781b      	ldrb	r3, [r3, #0]
 801333c:	4619      	mov	r1, r3
 801333e:	6878      	ldr	r0, [r7, #4]
 8013340:	f7fe ff6f 	bl	8012222 <USBD_SetClassConfig>
 8013344:	4603      	mov	r3, r0
 8013346:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013348:	7bfb      	ldrb	r3, [r7, #15]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d00f      	beq.n	801336e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801334e:	6839      	ldr	r1, [r7, #0]
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	f000 f918 	bl	8013586 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	685b      	ldr	r3, [r3, #4]
 801335a:	b2db      	uxtb	r3, r3
 801335c:	4619      	mov	r1, r3
 801335e:	6878      	ldr	r0, [r7, #4]
 8013360:	f7fe ff7b 	bl	801225a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	2202      	movs	r2, #2
 8013368:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801336c:	e014      	b.n	8013398 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f000 f9e0 	bl	8013734 <USBD_CtlSendStatus>
      break;
 8013374:	e010      	b.n	8013398 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013376:	6878      	ldr	r0, [r7, #4]
 8013378:	f000 f9dc 	bl	8013734 <USBD_CtlSendStatus>
      break;
 801337c:	e00c      	b.n	8013398 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801337e:	6839      	ldr	r1, [r7, #0]
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f000 f900 	bl	8013586 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013386:	4b07      	ldr	r3, [pc, #28]	@ (80133a4 <USBD_SetConfig+0x150>)
 8013388:	781b      	ldrb	r3, [r3, #0]
 801338a:	4619      	mov	r1, r3
 801338c:	6878      	ldr	r0, [r7, #4]
 801338e:	f7fe ff64 	bl	801225a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013392:	2303      	movs	r3, #3
 8013394:	73fb      	strb	r3, [r7, #15]
      break;
 8013396:	bf00      	nop
  }

  return ret;
 8013398:	7bfb      	ldrb	r3, [r7, #15]
}
 801339a:	4618      	mov	r0, r3
 801339c:	3710      	adds	r7, #16
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}
 80133a2:	bf00      	nop
 80133a4:	24002d3c 	.word	0x24002d3c

080133a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b082      	sub	sp, #8
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
 80133b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80133b2:	683b      	ldr	r3, [r7, #0]
 80133b4:	88db      	ldrh	r3, [r3, #6]
 80133b6:	2b01      	cmp	r3, #1
 80133b8:	d004      	beq.n	80133c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80133ba:	6839      	ldr	r1, [r7, #0]
 80133bc:	6878      	ldr	r0, [r7, #4]
 80133be:	f000 f8e2 	bl	8013586 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80133c2:	e023      	b.n	801340c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80133ca:	b2db      	uxtb	r3, r3
 80133cc:	2b02      	cmp	r3, #2
 80133ce:	dc02      	bgt.n	80133d6 <USBD_GetConfig+0x2e>
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	dc03      	bgt.n	80133dc <USBD_GetConfig+0x34>
 80133d4:	e015      	b.n	8013402 <USBD_GetConfig+0x5a>
 80133d6:	2b03      	cmp	r3, #3
 80133d8:	d00b      	beq.n	80133f2 <USBD_GetConfig+0x4a>
 80133da:	e012      	b.n	8013402 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	2200      	movs	r2, #0
 80133e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	3308      	adds	r3, #8
 80133e6:	2201      	movs	r2, #1
 80133e8:	4619      	mov	r1, r3
 80133ea:	6878      	ldr	r0, [r7, #4]
 80133ec:	f000 f948 	bl	8013680 <USBD_CtlSendData>
        break;
 80133f0:	e00c      	b.n	801340c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	3304      	adds	r3, #4
 80133f6:	2201      	movs	r2, #1
 80133f8:	4619      	mov	r1, r3
 80133fa:	6878      	ldr	r0, [r7, #4]
 80133fc:	f000 f940 	bl	8013680 <USBD_CtlSendData>
        break;
 8013400:	e004      	b.n	801340c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8013402:	6839      	ldr	r1, [r7, #0]
 8013404:	6878      	ldr	r0, [r7, #4]
 8013406:	f000 f8be 	bl	8013586 <USBD_CtlError>
        break;
 801340a:	bf00      	nop
}
 801340c:	bf00      	nop
 801340e:	3708      	adds	r7, #8
 8013410:	46bd      	mov	sp, r7
 8013412:	bd80      	pop	{r7, pc}

08013414 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b082      	sub	sp, #8
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
 801341c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013424:	b2db      	uxtb	r3, r3
 8013426:	3b01      	subs	r3, #1
 8013428:	2b02      	cmp	r3, #2
 801342a:	d81e      	bhi.n	801346a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	88db      	ldrh	r3, [r3, #6]
 8013430:	2b02      	cmp	r3, #2
 8013432:	d004      	beq.n	801343e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013434:	6839      	ldr	r1, [r7, #0]
 8013436:	6878      	ldr	r0, [r7, #4]
 8013438:	f000 f8a5 	bl	8013586 <USBD_CtlError>
        break;
 801343c:	e01a      	b.n	8013474 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	2201      	movs	r2, #1
 8013442:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801344a:	2b00      	cmp	r3, #0
 801344c:	d005      	beq.n	801345a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	68db      	ldr	r3, [r3, #12]
 8013452:	f043 0202 	orr.w	r2, r3, #2
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	330c      	adds	r3, #12
 801345e:	2202      	movs	r2, #2
 8013460:	4619      	mov	r1, r3
 8013462:	6878      	ldr	r0, [r7, #4]
 8013464:	f000 f90c 	bl	8013680 <USBD_CtlSendData>
      break;
 8013468:	e004      	b.n	8013474 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801346a:	6839      	ldr	r1, [r7, #0]
 801346c:	6878      	ldr	r0, [r7, #4]
 801346e:	f000 f88a 	bl	8013586 <USBD_CtlError>
      break;
 8013472:	bf00      	nop
  }
}
 8013474:	bf00      	nop
 8013476:	3708      	adds	r7, #8
 8013478:	46bd      	mov	sp, r7
 801347a:	bd80      	pop	{r7, pc}

0801347c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801347c:	b580      	push	{r7, lr}
 801347e:	b082      	sub	sp, #8
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
 8013484:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013486:	683b      	ldr	r3, [r7, #0]
 8013488:	885b      	ldrh	r3, [r3, #2]
 801348a:	2b01      	cmp	r3, #1
 801348c:	d107      	bne.n	801349e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	2201      	movs	r2, #1
 8013492:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8013496:	6878      	ldr	r0, [r7, #4]
 8013498:	f000 f94c 	bl	8013734 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801349c:	e013      	b.n	80134c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	885b      	ldrh	r3, [r3, #2]
 80134a2:	2b02      	cmp	r3, #2
 80134a4:	d10b      	bne.n	80134be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80134a6:	683b      	ldr	r3, [r7, #0]
 80134a8:	889b      	ldrh	r3, [r3, #4]
 80134aa:	0a1b      	lsrs	r3, r3, #8
 80134ac:	b29b      	uxth	r3, r3
 80134ae:	b2da      	uxtb	r2, r3
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80134b6:	6878      	ldr	r0, [r7, #4]
 80134b8:	f000 f93c 	bl	8013734 <USBD_CtlSendStatus>
}
 80134bc:	e003      	b.n	80134c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80134be:	6839      	ldr	r1, [r7, #0]
 80134c0:	6878      	ldr	r0, [r7, #4]
 80134c2:	f000 f860 	bl	8013586 <USBD_CtlError>
}
 80134c6:	bf00      	nop
 80134c8:	3708      	adds	r7, #8
 80134ca:	46bd      	mov	sp, r7
 80134cc:	bd80      	pop	{r7, pc}

080134ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80134ce:	b580      	push	{r7, lr}
 80134d0:	b082      	sub	sp, #8
 80134d2:	af00      	add	r7, sp, #0
 80134d4:	6078      	str	r0, [r7, #4]
 80134d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80134de:	b2db      	uxtb	r3, r3
 80134e0:	3b01      	subs	r3, #1
 80134e2:	2b02      	cmp	r3, #2
 80134e4:	d80b      	bhi.n	80134fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	885b      	ldrh	r3, [r3, #2]
 80134ea:	2b01      	cmp	r3, #1
 80134ec:	d10c      	bne.n	8013508 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	2200      	movs	r2, #0
 80134f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80134f6:	6878      	ldr	r0, [r7, #4]
 80134f8:	f000 f91c 	bl	8013734 <USBD_CtlSendStatus>
      }
      break;
 80134fc:	e004      	b.n	8013508 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80134fe:	6839      	ldr	r1, [r7, #0]
 8013500:	6878      	ldr	r0, [r7, #4]
 8013502:	f000 f840 	bl	8013586 <USBD_CtlError>
      break;
 8013506:	e000      	b.n	801350a <USBD_ClrFeature+0x3c>
      break;
 8013508:	bf00      	nop
  }
}
 801350a:	bf00      	nop
 801350c:	3708      	adds	r7, #8
 801350e:	46bd      	mov	sp, r7
 8013510:	bd80      	pop	{r7, pc}

08013512 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013512:	b580      	push	{r7, lr}
 8013514:	b084      	sub	sp, #16
 8013516:	af00      	add	r7, sp, #0
 8013518:	6078      	str	r0, [r7, #4]
 801351a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801351c:	683b      	ldr	r3, [r7, #0]
 801351e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	781a      	ldrb	r2, [r3, #0]
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	3301      	adds	r3, #1
 801352c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	781a      	ldrb	r2, [r3, #0]
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	3301      	adds	r3, #1
 801353a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801353c:	68f8      	ldr	r0, [r7, #12]
 801353e:	f7ff fa16 	bl	801296e <SWAPBYTE>
 8013542:	4603      	mov	r3, r0
 8013544:	461a      	mov	r2, r3
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	3301      	adds	r3, #1
 801354e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	3301      	adds	r3, #1
 8013554:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8013556:	68f8      	ldr	r0, [r7, #12]
 8013558:	f7ff fa09 	bl	801296e <SWAPBYTE>
 801355c:	4603      	mov	r3, r0
 801355e:	461a      	mov	r2, r3
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	3301      	adds	r3, #1
 8013568:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	3301      	adds	r3, #1
 801356e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8013570:	68f8      	ldr	r0, [r7, #12]
 8013572:	f7ff f9fc 	bl	801296e <SWAPBYTE>
 8013576:	4603      	mov	r3, r0
 8013578:	461a      	mov	r2, r3
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	80da      	strh	r2, [r3, #6]
}
 801357e:	bf00      	nop
 8013580:	3710      	adds	r7, #16
 8013582:	46bd      	mov	sp, r7
 8013584:	bd80      	pop	{r7, pc}

08013586 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013586:	b580      	push	{r7, lr}
 8013588:	b082      	sub	sp, #8
 801358a:	af00      	add	r7, sp, #0
 801358c:	6078      	str	r0, [r7, #4]
 801358e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013590:	2180      	movs	r1, #128	@ 0x80
 8013592:	6878      	ldr	r0, [r7, #4]
 8013594:	f000 fd36 	bl	8014004 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013598:	2100      	movs	r1, #0
 801359a:	6878      	ldr	r0, [r7, #4]
 801359c:	f000 fd32 	bl	8014004 <USBD_LL_StallEP>
}
 80135a0:	bf00      	nop
 80135a2:	3708      	adds	r7, #8
 80135a4:	46bd      	mov	sp, r7
 80135a6:	bd80      	pop	{r7, pc}

080135a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b086      	sub	sp, #24
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	60f8      	str	r0, [r7, #12]
 80135b0:	60b9      	str	r1, [r7, #8]
 80135b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80135b4:	2300      	movs	r3, #0
 80135b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d042      	beq.n	8013644 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80135c2:	6938      	ldr	r0, [r7, #16]
 80135c4:	f000 f842 	bl	801364c <USBD_GetLen>
 80135c8:	4603      	mov	r3, r0
 80135ca:	3301      	adds	r3, #1
 80135cc:	005b      	lsls	r3, r3, #1
 80135ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80135d2:	d808      	bhi.n	80135e6 <USBD_GetString+0x3e>
 80135d4:	6938      	ldr	r0, [r7, #16]
 80135d6:	f000 f839 	bl	801364c <USBD_GetLen>
 80135da:	4603      	mov	r3, r0
 80135dc:	3301      	adds	r3, #1
 80135de:	b29b      	uxth	r3, r3
 80135e0:	005b      	lsls	r3, r3, #1
 80135e2:	b29a      	uxth	r2, r3
 80135e4:	e001      	b.n	80135ea <USBD_GetString+0x42>
 80135e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80135ee:	7dfb      	ldrb	r3, [r7, #23]
 80135f0:	68ba      	ldr	r2, [r7, #8]
 80135f2:	4413      	add	r3, r2
 80135f4:	687a      	ldr	r2, [r7, #4]
 80135f6:	7812      	ldrb	r2, [r2, #0]
 80135f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80135fa:	7dfb      	ldrb	r3, [r7, #23]
 80135fc:	3301      	adds	r3, #1
 80135fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8013600:	7dfb      	ldrb	r3, [r7, #23]
 8013602:	68ba      	ldr	r2, [r7, #8]
 8013604:	4413      	add	r3, r2
 8013606:	2203      	movs	r2, #3
 8013608:	701a      	strb	r2, [r3, #0]
  idx++;
 801360a:	7dfb      	ldrb	r3, [r7, #23]
 801360c:	3301      	adds	r3, #1
 801360e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8013610:	e013      	b.n	801363a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8013612:	7dfb      	ldrb	r3, [r7, #23]
 8013614:	68ba      	ldr	r2, [r7, #8]
 8013616:	4413      	add	r3, r2
 8013618:	693a      	ldr	r2, [r7, #16]
 801361a:	7812      	ldrb	r2, [r2, #0]
 801361c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801361e:	693b      	ldr	r3, [r7, #16]
 8013620:	3301      	adds	r3, #1
 8013622:	613b      	str	r3, [r7, #16]
    idx++;
 8013624:	7dfb      	ldrb	r3, [r7, #23]
 8013626:	3301      	adds	r3, #1
 8013628:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801362a:	7dfb      	ldrb	r3, [r7, #23]
 801362c:	68ba      	ldr	r2, [r7, #8]
 801362e:	4413      	add	r3, r2
 8013630:	2200      	movs	r2, #0
 8013632:	701a      	strb	r2, [r3, #0]
    idx++;
 8013634:	7dfb      	ldrb	r3, [r7, #23]
 8013636:	3301      	adds	r3, #1
 8013638:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801363a:	693b      	ldr	r3, [r7, #16]
 801363c:	781b      	ldrb	r3, [r3, #0]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d1e7      	bne.n	8013612 <USBD_GetString+0x6a>
 8013642:	e000      	b.n	8013646 <USBD_GetString+0x9e>
    return;
 8013644:	bf00      	nop
  }
}
 8013646:	3718      	adds	r7, #24
 8013648:	46bd      	mov	sp, r7
 801364a:	bd80      	pop	{r7, pc}

0801364c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801364c:	b480      	push	{r7}
 801364e:	b085      	sub	sp, #20
 8013650:	af00      	add	r7, sp, #0
 8013652:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013654:	2300      	movs	r3, #0
 8013656:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801365c:	e005      	b.n	801366a <USBD_GetLen+0x1e>
  {
    len++;
 801365e:	7bfb      	ldrb	r3, [r7, #15]
 8013660:	3301      	adds	r3, #1
 8013662:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	3301      	adds	r3, #1
 8013668:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801366a:	68bb      	ldr	r3, [r7, #8]
 801366c:	781b      	ldrb	r3, [r3, #0]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d1f5      	bne.n	801365e <USBD_GetLen+0x12>
  }

  return len;
 8013672:	7bfb      	ldrb	r3, [r7, #15]
}
 8013674:	4618      	mov	r0, r3
 8013676:	3714      	adds	r7, #20
 8013678:	46bd      	mov	sp, r7
 801367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801367e:	4770      	bx	lr

08013680 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b084      	sub	sp, #16
 8013684:	af00      	add	r7, sp, #0
 8013686:	60f8      	str	r0, [r7, #12]
 8013688:	60b9      	str	r1, [r7, #8]
 801368a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	2202      	movs	r2, #2
 8013690:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	687a      	ldr	r2, [r7, #4]
 8013698:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	687a      	ldr	r2, [r7, #4]
 801369e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	68ba      	ldr	r2, [r7, #8]
 80136a4:	2100      	movs	r1, #0
 80136a6:	68f8      	ldr	r0, [r7, #12]
 80136a8:	f000 fd35 	bl	8014116 <USBD_LL_Transmit>

  return USBD_OK;
 80136ac:	2300      	movs	r3, #0
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	3710      	adds	r7, #16
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bd80      	pop	{r7, pc}

080136b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80136b6:	b580      	push	{r7, lr}
 80136b8:	b084      	sub	sp, #16
 80136ba:	af00      	add	r7, sp, #0
 80136bc:	60f8      	str	r0, [r7, #12]
 80136be:	60b9      	str	r1, [r7, #8]
 80136c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	68ba      	ldr	r2, [r7, #8]
 80136c6:	2100      	movs	r1, #0
 80136c8:	68f8      	ldr	r0, [r7, #12]
 80136ca:	f000 fd24 	bl	8014116 <USBD_LL_Transmit>

  return USBD_OK;
 80136ce:	2300      	movs	r3, #0
}
 80136d0:	4618      	mov	r0, r3
 80136d2:	3710      	adds	r7, #16
 80136d4:	46bd      	mov	sp, r7
 80136d6:	bd80      	pop	{r7, pc}

080136d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80136d8:	b580      	push	{r7, lr}
 80136da:	b084      	sub	sp, #16
 80136dc:	af00      	add	r7, sp, #0
 80136de:	60f8      	str	r0, [r7, #12]
 80136e0:	60b9      	str	r1, [r7, #8]
 80136e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	2203      	movs	r2, #3
 80136e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	687a      	ldr	r2, [r7, #4]
 80136f0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	687a      	ldr	r2, [r7, #4]
 80136f8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	68ba      	ldr	r2, [r7, #8]
 8013700:	2100      	movs	r1, #0
 8013702:	68f8      	ldr	r0, [r7, #12]
 8013704:	f000 fd28 	bl	8014158 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013708:	2300      	movs	r3, #0
}
 801370a:	4618      	mov	r0, r3
 801370c:	3710      	adds	r7, #16
 801370e:	46bd      	mov	sp, r7
 8013710:	bd80      	pop	{r7, pc}

08013712 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8013712:	b580      	push	{r7, lr}
 8013714:	b084      	sub	sp, #16
 8013716:	af00      	add	r7, sp, #0
 8013718:	60f8      	str	r0, [r7, #12]
 801371a:	60b9      	str	r1, [r7, #8]
 801371c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	68ba      	ldr	r2, [r7, #8]
 8013722:	2100      	movs	r1, #0
 8013724:	68f8      	ldr	r0, [r7, #12]
 8013726:	f000 fd17 	bl	8014158 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801372a:	2300      	movs	r3, #0
}
 801372c:	4618      	mov	r0, r3
 801372e:	3710      	adds	r7, #16
 8013730:	46bd      	mov	sp, r7
 8013732:	bd80      	pop	{r7, pc}

08013734 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b082      	sub	sp, #8
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	2204      	movs	r2, #4
 8013740:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013744:	2300      	movs	r3, #0
 8013746:	2200      	movs	r2, #0
 8013748:	2100      	movs	r1, #0
 801374a:	6878      	ldr	r0, [r7, #4]
 801374c:	f000 fce3 	bl	8014116 <USBD_LL_Transmit>

  return USBD_OK;
 8013750:	2300      	movs	r3, #0
}
 8013752:	4618      	mov	r0, r3
 8013754:	3708      	adds	r7, #8
 8013756:	46bd      	mov	sp, r7
 8013758:	bd80      	pop	{r7, pc}

0801375a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801375a:	b580      	push	{r7, lr}
 801375c:	b082      	sub	sp, #8
 801375e:	af00      	add	r7, sp, #0
 8013760:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	2205      	movs	r2, #5
 8013766:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801376a:	2300      	movs	r3, #0
 801376c:	2200      	movs	r2, #0
 801376e:	2100      	movs	r1, #0
 8013770:	6878      	ldr	r0, [r7, #4]
 8013772:	f000 fcf1 	bl	8014158 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013776:	2300      	movs	r3, #0
}
 8013778:	4618      	mov	r0, r3
 801377a:	3708      	adds	r7, #8
 801377c:	46bd      	mov	sp, r7
 801377e:	bd80      	pop	{r7, pc}

08013780 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8013784:	2201      	movs	r2, #1
 8013786:	4913      	ldr	r1, [pc, #76]	@ (80137d4 <MX_USB_DEVICE_Init+0x54>)
 8013788:	4813      	ldr	r0, [pc, #76]	@ (80137d8 <MX_USB_DEVICE_Init+0x58>)
 801378a:	f7fe fccd 	bl	8012128 <USBD_Init>
 801378e:	4603      	mov	r3, r0
 8013790:	2b00      	cmp	r3, #0
 8013792:	d001      	beq.n	8013798 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013794:	f7ed fd7c 	bl	8001290 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8013798:	4910      	ldr	r1, [pc, #64]	@ (80137dc <MX_USB_DEVICE_Init+0x5c>)
 801379a:	480f      	ldr	r0, [pc, #60]	@ (80137d8 <MX_USB_DEVICE_Init+0x58>)
 801379c:	f7fe fcf4 	bl	8012188 <USBD_RegisterClass>
 80137a0:	4603      	mov	r3, r0
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d001      	beq.n	80137aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80137a6:	f7ed fd73 	bl	8001290 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80137aa:	490d      	ldr	r1, [pc, #52]	@ (80137e0 <MX_USB_DEVICE_Init+0x60>)
 80137ac:	480a      	ldr	r0, [pc, #40]	@ (80137d8 <MX_USB_DEVICE_Init+0x58>)
 80137ae:	f7fe fbeb 	bl	8011f88 <USBD_CDC_RegisterInterface>
 80137b2:	4603      	mov	r3, r0
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d001      	beq.n	80137bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80137b8:	f7ed fd6a 	bl	8001290 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80137bc:	4806      	ldr	r0, [pc, #24]	@ (80137d8 <MX_USB_DEVICE_Init+0x58>)
 80137be:	f7fe fd19 	bl	80121f4 <USBD_Start>
 80137c2:	4603      	mov	r3, r0
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d001      	beq.n	80137cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80137c8:	f7ed fd62 	bl	8001290 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80137cc:	f7f5 fd9c 	bl	8009308 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80137d0:	bf00      	nop
 80137d2:	bd80      	pop	{r7, pc}
 80137d4:	240000b0 	.word	0x240000b0
 80137d8:	24002d40 	.word	0x24002d40
 80137dc:	2400001c 	.word	0x2400001c
 80137e0:	2400009c 	.word	0x2400009c

080137e4 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80137e8:	2200      	movs	r2, #0
 80137ea:	4905      	ldr	r1, [pc, #20]	@ (8013800 <CDC_Init_HS+0x1c>)
 80137ec:	4805      	ldr	r0, [pc, #20]	@ (8013804 <CDC_Init_HS+0x20>)
 80137ee:	f7fe fbe5 	bl	8011fbc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80137f2:	4905      	ldr	r1, [pc, #20]	@ (8013808 <CDC_Init_HS+0x24>)
 80137f4:	4803      	ldr	r0, [pc, #12]	@ (8013804 <CDC_Init_HS+0x20>)
 80137f6:	f7fe fc03 	bl	8012000 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80137fa:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80137fc:	4618      	mov	r0, r3
 80137fe:	bd80      	pop	{r7, pc}
 8013800:	24003820 	.word	0x24003820
 8013804:	24002d40 	.word	0x24002d40
 8013808:	24003020 	.word	0x24003020

0801380c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801380c:	b480      	push	{r7}
 801380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8013810:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8013812:	4618      	mov	r0, r3
 8013814:	46bd      	mov	sp, r7
 8013816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801381a:	4770      	bx	lr

0801381c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801381c:	b480      	push	{r7}
 801381e:	b083      	sub	sp, #12
 8013820:	af00      	add	r7, sp, #0
 8013822:	4603      	mov	r3, r0
 8013824:	6039      	str	r1, [r7, #0]
 8013826:	71fb      	strb	r3, [r7, #7]
 8013828:	4613      	mov	r3, r2
 801382a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801382c:	79fb      	ldrb	r3, [r7, #7]
 801382e:	2b23      	cmp	r3, #35	@ 0x23
 8013830:	d84a      	bhi.n	80138c8 <CDC_Control_HS+0xac>
 8013832:	a201      	add	r2, pc, #4	@ (adr r2, 8013838 <CDC_Control_HS+0x1c>)
 8013834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013838:	080138c9 	.word	0x080138c9
 801383c:	080138c9 	.word	0x080138c9
 8013840:	080138c9 	.word	0x080138c9
 8013844:	080138c9 	.word	0x080138c9
 8013848:	080138c9 	.word	0x080138c9
 801384c:	080138c9 	.word	0x080138c9
 8013850:	080138c9 	.word	0x080138c9
 8013854:	080138c9 	.word	0x080138c9
 8013858:	080138c9 	.word	0x080138c9
 801385c:	080138c9 	.word	0x080138c9
 8013860:	080138c9 	.word	0x080138c9
 8013864:	080138c9 	.word	0x080138c9
 8013868:	080138c9 	.word	0x080138c9
 801386c:	080138c9 	.word	0x080138c9
 8013870:	080138c9 	.word	0x080138c9
 8013874:	080138c9 	.word	0x080138c9
 8013878:	080138c9 	.word	0x080138c9
 801387c:	080138c9 	.word	0x080138c9
 8013880:	080138c9 	.word	0x080138c9
 8013884:	080138c9 	.word	0x080138c9
 8013888:	080138c9 	.word	0x080138c9
 801388c:	080138c9 	.word	0x080138c9
 8013890:	080138c9 	.word	0x080138c9
 8013894:	080138c9 	.word	0x080138c9
 8013898:	080138c9 	.word	0x080138c9
 801389c:	080138c9 	.word	0x080138c9
 80138a0:	080138c9 	.word	0x080138c9
 80138a4:	080138c9 	.word	0x080138c9
 80138a8:	080138c9 	.word	0x080138c9
 80138ac:	080138c9 	.word	0x080138c9
 80138b0:	080138c9 	.word	0x080138c9
 80138b4:	080138c9 	.word	0x080138c9
 80138b8:	080138c9 	.word	0x080138c9
 80138bc:	080138c9 	.word	0x080138c9
 80138c0:	080138c9 	.word	0x080138c9
 80138c4:	080138c9 	.word	0x080138c9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80138c8:	bf00      	nop
  }

  return (USBD_OK);
 80138ca:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80138cc:	4618      	mov	r0, r3
 80138ce:	370c      	adds	r7, #12
 80138d0:	46bd      	mov	sp, r7
 80138d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d6:	4770      	bx	lr

080138d8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b082      	sub	sp, #8
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
 80138e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80138e2:	6879      	ldr	r1, [r7, #4]
 80138e4:	4808      	ldr	r0, [pc, #32]	@ (8013908 <CDC_Receive_HS+0x30>)
 80138e6:	f7fe fb8b 	bl	8012000 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80138ea:	4807      	ldr	r0, [pc, #28]	@ (8013908 <CDC_Receive_HS+0x30>)
 80138ec:	f7fe fbe6 	bl	80120bc <USBD_CDC_ReceivePacket>

  usbReceivedFlag = true;
 80138f0:	4b06      	ldr	r3, [pc, #24]	@ (801390c <CDC_Receive_HS+0x34>)
 80138f2:	2201      	movs	r2, #1
 80138f4:	701a      	strb	r2, [r3, #0]
  receiveDataToBuffer(Buf,Len);
 80138f6:	6839      	ldr	r1, [r7, #0]
 80138f8:	6878      	ldr	r0, [r7, #4]
 80138fa:	f000 f841 	bl	8013980 <receiveDataToBuffer>

  return (USBD_OK);
 80138fe:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8013900:	4618      	mov	r0, r3
 8013902:	3708      	adds	r7, #8
 8013904:	46bd      	mov	sp, r7
 8013906:	bd80      	pop	{r7, pc}
 8013908:	24002d40 	.word	0x24002d40
 801390c:	2400301c 	.word	0x2400301c

08013910 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b084      	sub	sp, #16
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	460b      	mov	r3, r1
 801391a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801391c:	2300      	movs	r3, #0
 801391e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8013920:	4b0d      	ldr	r3, [pc, #52]	@ (8013958 <CDC_Transmit_HS+0x48>)
 8013922:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8013926:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801392e:	2b00      	cmp	r3, #0
 8013930:	d001      	beq.n	8013936 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8013932:	2301      	movs	r3, #1
 8013934:	e00b      	b.n	801394e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8013936:	887b      	ldrh	r3, [r7, #2]
 8013938:	461a      	mov	r2, r3
 801393a:	6879      	ldr	r1, [r7, #4]
 801393c:	4806      	ldr	r0, [pc, #24]	@ (8013958 <CDC_Transmit_HS+0x48>)
 801393e:	f7fe fb3d 	bl	8011fbc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8013942:	4805      	ldr	r0, [pc, #20]	@ (8013958 <CDC_Transmit_HS+0x48>)
 8013944:	f7fe fb7a 	bl	801203c <USBD_CDC_TransmitPacket>
 8013948:	4603      	mov	r3, r0
 801394a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801394c:	7bfb      	ldrb	r3, [r7, #15]
}
 801394e:	4618      	mov	r0, r3
 8013950:	3710      	adds	r7, #16
 8013952:	46bd      	mov	sp, r7
 8013954:	bd80      	pop	{r7, pc}
 8013956:	bf00      	nop
 8013958:	24002d40 	.word	0x24002d40

0801395c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801395c:	b480      	push	{r7}
 801395e:	b087      	sub	sp, #28
 8013960:	af00      	add	r7, sp, #0
 8013962:	60f8      	str	r0, [r7, #12]
 8013964:	60b9      	str	r1, [r7, #8]
 8013966:	4613      	mov	r3, r2
 8013968:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801396a:	2300      	movs	r3, #0
 801396c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801396e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013972:	4618      	mov	r0, r3
 8013974:	371c      	adds	r7, #28
 8013976:	46bd      	mov	sp, r7
 8013978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397c:	4770      	bx	lr
	...

08013980 <receiveDataToBuffer>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void receiveDataToBuffer(uint8_t* Buf, uint32_t *Len)
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b084      	sub	sp, #16
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
 8013988:	6039      	str	r1, [r7, #0]
  uint8_t len = (uint8_t)* Len;
 801398a:	683b      	ldr	r3, [r7, #0]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	73fb      	strb	r3, [r7, #15]
  memset(UsbRxDataBuffer, '\0', USB_RX_BUFF_SIZE);
 8013990:	220f      	movs	r2, #15
 8013992:	2100      	movs	r1, #0
 8013994:	4809      	ldr	r0, [pc, #36]	@ (80139bc <receiveDataToBuffer+0x3c>)
 8013996:	f001 fedb 	bl	8015750 <memset>
  memcpy(UsbRxDataBuffer, Buf, len);
 801399a:	7bfb      	ldrb	r3, [r7, #15]
 801399c:	461a      	mov	r2, r3
 801399e:	6879      	ldr	r1, [r7, #4]
 80139a0:	4806      	ldr	r0, [pc, #24]	@ (80139bc <receiveDataToBuffer+0x3c>)
 80139a2:	f001 ff50 	bl	8015846 <memcpy>
  memset(Buf, '\0', len);
 80139a6:	7bfb      	ldrb	r3, [r7, #15]
 80139a8:	461a      	mov	r2, r3
 80139aa:	2100      	movs	r1, #0
 80139ac:	6878      	ldr	r0, [r7, #4]
 80139ae:	f001 fecf 	bl	8015750 <memset>

}
 80139b2:	bf00      	nop
 80139b4:	3710      	adds	r7, #16
 80139b6:	46bd      	mov	sp, r7
 80139b8:	bd80      	pop	{r7, pc}
 80139ba:	bf00      	nop
 80139bc:	24002d28 	.word	0x24002d28

080139c0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80139c0:	b480      	push	{r7}
 80139c2:	b083      	sub	sp, #12
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	4603      	mov	r3, r0
 80139c8:	6039      	str	r1, [r7, #0]
 80139ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80139cc:	683b      	ldr	r3, [r7, #0]
 80139ce:	2212      	movs	r2, #18
 80139d0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80139d2:	4b03      	ldr	r3, [pc, #12]	@ (80139e0 <USBD_HS_DeviceDescriptor+0x20>)
}
 80139d4:	4618      	mov	r0, r3
 80139d6:	370c      	adds	r7, #12
 80139d8:	46bd      	mov	sp, r7
 80139da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139de:	4770      	bx	lr
 80139e0:	240000d0 	.word	0x240000d0

080139e4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80139e4:	b480      	push	{r7}
 80139e6:	b083      	sub	sp, #12
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	4603      	mov	r3, r0
 80139ec:	6039      	str	r1, [r7, #0]
 80139ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80139f0:	683b      	ldr	r3, [r7, #0]
 80139f2:	2204      	movs	r2, #4
 80139f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80139f6:	4b03      	ldr	r3, [pc, #12]	@ (8013a04 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80139f8:	4618      	mov	r0, r3
 80139fa:	370c      	adds	r7, #12
 80139fc:	46bd      	mov	sp, r7
 80139fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a02:	4770      	bx	lr
 8013a04:	240000e4 	.word	0x240000e4

08013a08 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	b082      	sub	sp, #8
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	4603      	mov	r3, r0
 8013a10:	6039      	str	r1, [r7, #0]
 8013a12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013a14:	79fb      	ldrb	r3, [r7, #7]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d105      	bne.n	8013a26 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8013a1a:	683a      	ldr	r2, [r7, #0]
 8013a1c:	4907      	ldr	r1, [pc, #28]	@ (8013a3c <USBD_HS_ProductStrDescriptor+0x34>)
 8013a1e:	4808      	ldr	r0, [pc, #32]	@ (8013a40 <USBD_HS_ProductStrDescriptor+0x38>)
 8013a20:	f7ff fdc2 	bl	80135a8 <USBD_GetString>
 8013a24:	e004      	b.n	8013a30 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8013a26:	683a      	ldr	r2, [r7, #0]
 8013a28:	4904      	ldr	r1, [pc, #16]	@ (8013a3c <USBD_HS_ProductStrDescriptor+0x34>)
 8013a2a:	4805      	ldr	r0, [pc, #20]	@ (8013a40 <USBD_HS_ProductStrDescriptor+0x38>)
 8013a2c:	f7ff fdbc 	bl	80135a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013a30:	4b02      	ldr	r3, [pc, #8]	@ (8013a3c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8013a32:	4618      	mov	r0, r3
 8013a34:	3708      	adds	r7, #8
 8013a36:	46bd      	mov	sp, r7
 8013a38:	bd80      	pop	{r7, pc}
 8013a3a:	bf00      	nop
 8013a3c:	24004020 	.word	0x24004020
 8013a40:	08016398 	.word	0x08016398

08013a44 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013a44:	b580      	push	{r7, lr}
 8013a46:	b082      	sub	sp, #8
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	6039      	str	r1, [r7, #0]
 8013a4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013a50:	683a      	ldr	r2, [r7, #0]
 8013a52:	4904      	ldr	r1, [pc, #16]	@ (8013a64 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8013a54:	4804      	ldr	r0, [pc, #16]	@ (8013a68 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8013a56:	f7ff fda7 	bl	80135a8 <USBD_GetString>
  return USBD_StrDesc;
 8013a5a:	4b02      	ldr	r3, [pc, #8]	@ (8013a64 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	3708      	adds	r7, #8
 8013a60:	46bd      	mov	sp, r7
 8013a62:	bd80      	pop	{r7, pc}
 8013a64:	24004020 	.word	0x24004020
 8013a68:	080163b0 	.word	0x080163b0

08013a6c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b082      	sub	sp, #8
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	4603      	mov	r3, r0
 8013a74:	6039      	str	r1, [r7, #0]
 8013a76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013a78:	683b      	ldr	r3, [r7, #0]
 8013a7a:	221a      	movs	r2, #26
 8013a7c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013a7e:	f000 f843 	bl	8013b08 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8013a82:	4b02      	ldr	r3, [pc, #8]	@ (8013a8c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8013a84:	4618      	mov	r0, r3
 8013a86:	3708      	adds	r7, #8
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd80      	pop	{r7, pc}
 8013a8c:	240000e8 	.word	0x240000e8

08013a90 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b082      	sub	sp, #8
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	4603      	mov	r3, r0
 8013a98:	6039      	str	r1, [r7, #0]
 8013a9a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013a9c:	79fb      	ldrb	r3, [r7, #7]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d105      	bne.n	8013aae <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8013aa2:	683a      	ldr	r2, [r7, #0]
 8013aa4:	4907      	ldr	r1, [pc, #28]	@ (8013ac4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8013aa6:	4808      	ldr	r0, [pc, #32]	@ (8013ac8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8013aa8:	f7ff fd7e 	bl	80135a8 <USBD_GetString>
 8013aac:	e004      	b.n	8013ab8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8013aae:	683a      	ldr	r2, [r7, #0]
 8013ab0:	4904      	ldr	r1, [pc, #16]	@ (8013ac4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8013ab2:	4805      	ldr	r0, [pc, #20]	@ (8013ac8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8013ab4:	f7ff fd78 	bl	80135a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013ab8:	4b02      	ldr	r3, [pc, #8]	@ (8013ac4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8013aba:	4618      	mov	r0, r3
 8013abc:	3708      	adds	r7, #8
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	bd80      	pop	{r7, pc}
 8013ac2:	bf00      	nop
 8013ac4:	24004020 	.word	0x24004020
 8013ac8:	080163c4 	.word	0x080163c4

08013acc <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b082      	sub	sp, #8
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	6039      	str	r1, [r7, #0]
 8013ad6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013ad8:	79fb      	ldrb	r3, [r7, #7]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d105      	bne.n	8013aea <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8013ade:	683a      	ldr	r2, [r7, #0]
 8013ae0:	4907      	ldr	r1, [pc, #28]	@ (8013b00 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8013ae2:	4808      	ldr	r0, [pc, #32]	@ (8013b04 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8013ae4:	f7ff fd60 	bl	80135a8 <USBD_GetString>
 8013ae8:	e004      	b.n	8013af4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8013aea:	683a      	ldr	r2, [r7, #0]
 8013aec:	4904      	ldr	r1, [pc, #16]	@ (8013b00 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8013aee:	4805      	ldr	r0, [pc, #20]	@ (8013b04 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8013af0:	f7ff fd5a 	bl	80135a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013af4:	4b02      	ldr	r3, [pc, #8]	@ (8013b00 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8013af6:	4618      	mov	r0, r3
 8013af8:	3708      	adds	r7, #8
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bd80      	pop	{r7, pc}
 8013afe:	bf00      	nop
 8013b00:	24004020 	.word	0x24004020
 8013b04:	080163d0 	.word	0x080163d0

08013b08 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b084      	sub	sp, #16
 8013b0c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8013b4c <Get_SerialNum+0x44>)
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013b14:	4b0e      	ldr	r3, [pc, #56]	@ (8013b50 <Get_SerialNum+0x48>)
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8013b54 <Get_SerialNum+0x4c>)
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013b20:	68fa      	ldr	r2, [r7, #12]
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	4413      	add	r3, r2
 8013b26:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d009      	beq.n	8013b42 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013b2e:	2208      	movs	r2, #8
 8013b30:	4909      	ldr	r1, [pc, #36]	@ (8013b58 <Get_SerialNum+0x50>)
 8013b32:	68f8      	ldr	r0, [r7, #12]
 8013b34:	f000 f814 	bl	8013b60 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013b38:	2204      	movs	r2, #4
 8013b3a:	4908      	ldr	r1, [pc, #32]	@ (8013b5c <Get_SerialNum+0x54>)
 8013b3c:	68b8      	ldr	r0, [r7, #8]
 8013b3e:	f000 f80f 	bl	8013b60 <IntToUnicode>
  }
}
 8013b42:	bf00      	nop
 8013b44:	3710      	adds	r7, #16
 8013b46:	46bd      	mov	sp, r7
 8013b48:	bd80      	pop	{r7, pc}
 8013b4a:	bf00      	nop
 8013b4c:	1ff1e800 	.word	0x1ff1e800
 8013b50:	1ff1e804 	.word	0x1ff1e804
 8013b54:	1ff1e808 	.word	0x1ff1e808
 8013b58:	240000ea 	.word	0x240000ea
 8013b5c:	240000fa 	.word	0x240000fa

08013b60 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013b60:	b480      	push	{r7}
 8013b62:	b087      	sub	sp, #28
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	60f8      	str	r0, [r7, #12]
 8013b68:	60b9      	str	r1, [r7, #8]
 8013b6a:	4613      	mov	r3, r2
 8013b6c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013b6e:	2300      	movs	r3, #0
 8013b70:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013b72:	2300      	movs	r3, #0
 8013b74:	75fb      	strb	r3, [r7, #23]
 8013b76:	e027      	b.n	8013bc8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	0f1b      	lsrs	r3, r3, #28
 8013b7c:	2b09      	cmp	r3, #9
 8013b7e:	d80b      	bhi.n	8013b98 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	0f1b      	lsrs	r3, r3, #28
 8013b84:	b2da      	uxtb	r2, r3
 8013b86:	7dfb      	ldrb	r3, [r7, #23]
 8013b88:	005b      	lsls	r3, r3, #1
 8013b8a:	4619      	mov	r1, r3
 8013b8c:	68bb      	ldr	r3, [r7, #8]
 8013b8e:	440b      	add	r3, r1
 8013b90:	3230      	adds	r2, #48	@ 0x30
 8013b92:	b2d2      	uxtb	r2, r2
 8013b94:	701a      	strb	r2, [r3, #0]
 8013b96:	e00a      	b.n	8013bae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	0f1b      	lsrs	r3, r3, #28
 8013b9c:	b2da      	uxtb	r2, r3
 8013b9e:	7dfb      	ldrb	r3, [r7, #23]
 8013ba0:	005b      	lsls	r3, r3, #1
 8013ba2:	4619      	mov	r1, r3
 8013ba4:	68bb      	ldr	r3, [r7, #8]
 8013ba6:	440b      	add	r3, r1
 8013ba8:	3237      	adds	r2, #55	@ 0x37
 8013baa:	b2d2      	uxtb	r2, r2
 8013bac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	011b      	lsls	r3, r3, #4
 8013bb2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013bb4:	7dfb      	ldrb	r3, [r7, #23]
 8013bb6:	005b      	lsls	r3, r3, #1
 8013bb8:	3301      	adds	r3, #1
 8013bba:	68ba      	ldr	r2, [r7, #8]
 8013bbc:	4413      	add	r3, r2
 8013bbe:	2200      	movs	r2, #0
 8013bc0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013bc2:	7dfb      	ldrb	r3, [r7, #23]
 8013bc4:	3301      	adds	r3, #1
 8013bc6:	75fb      	strb	r3, [r7, #23]
 8013bc8:	7dfa      	ldrb	r2, [r7, #23]
 8013bca:	79fb      	ldrb	r3, [r7, #7]
 8013bcc:	429a      	cmp	r2, r3
 8013bce:	d3d3      	bcc.n	8013b78 <IntToUnicode+0x18>
  }
}
 8013bd0:	bf00      	nop
 8013bd2:	bf00      	nop
 8013bd4:	371c      	adds	r7, #28
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bdc:	4770      	bx	lr
	...

08013be0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b0b8      	sub	sp, #224	@ 0xe0
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013be8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8013bec:	2200      	movs	r2, #0
 8013bee:	601a      	str	r2, [r3, #0]
 8013bf0:	605a      	str	r2, [r3, #4]
 8013bf2:	609a      	str	r2, [r3, #8]
 8013bf4:	60da      	str	r2, [r3, #12]
 8013bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013bf8:	f107 0310 	add.w	r3, r7, #16
 8013bfc:	22b8      	movs	r2, #184	@ 0xb8
 8013bfe:	2100      	movs	r1, #0
 8013c00:	4618      	mov	r0, r3
 8013c02:	f001 fda5 	bl	8015750 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	4a29      	ldr	r2, [pc, #164]	@ (8013cb0 <HAL_PCD_MspInit+0xd0>)
 8013c0c:	4293      	cmp	r3, r2
 8013c0e:	d14b      	bne.n	8013ca8 <HAL_PCD_MspInit+0xc8>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8013c10:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8013c14:	f04f 0300 	mov.w	r3, #0
 8013c18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8013c1c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8013c20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013c24:	f107 0310 	add.w	r3, r7, #16
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f7f6 fae3 	bl	800a1f4 <HAL_RCCEx_PeriphCLKConfig>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d001      	beq.n	8013c38 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8013c34:	f7ed fb2c 	bl	8001290 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8013c38:	f7f5 fb66 	bl	8009308 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8013cb4 <HAL_PCD_MspInit+0xd4>)
 8013c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8013c42:	4a1c      	ldr	r2, [pc, #112]	@ (8013cb4 <HAL_PCD_MspInit+0xd4>)
 8013c44:	f043 0301 	orr.w	r3, r3, #1
 8013c48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8013c4c:	4b19      	ldr	r3, [pc, #100]	@ (8013cb4 <HAL_PCD_MspInit+0xd4>)
 8013c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8013c52:	f003 0301 	and.w	r3, r3, #1
 8013c56:	60fb      	str	r3, [r7, #12]
 8013c58:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8013c5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013c5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013c62:	2300      	movs	r3, #0
 8013c64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c68:	2300      	movs	r3, #0
 8013c6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013c6e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8013c72:	4619      	mov	r1, r3
 8013c74:	4810      	ldr	r0, [pc, #64]	@ (8013cb8 <HAL_PCD_MspInit+0xd8>)
 8013c76:	f7f3 fd41 	bl	80076fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8013c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8013cb4 <HAL_PCD_MspInit+0xd4>)
 8013c7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013c80:	4a0c      	ldr	r2, [pc, #48]	@ (8013cb4 <HAL_PCD_MspInit+0xd4>)
 8013c82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8013c86:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8013c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8013cb4 <HAL_PCD_MspInit+0xd4>)
 8013c8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8013c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013c94:	60bb      	str	r3, [r7, #8]
 8013c96:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8013c98:	2200      	movs	r2, #0
 8013c9a:	2100      	movs	r1, #0
 8013c9c:	204d      	movs	r0, #77	@ 0x4d
 8013c9e:	f7f1 f8f6 	bl	8004e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8013ca2:	204d      	movs	r0, #77	@ 0x4d
 8013ca4:	f7f1 f90d 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8013ca8:	bf00      	nop
 8013caa:	37e0      	adds	r7, #224	@ 0xe0
 8013cac:	46bd      	mov	sp, r7
 8013cae:	bd80      	pop	{r7, pc}
 8013cb0:	40040000 	.word	0x40040000
 8013cb4:	58024400 	.word	0x58024400
 8013cb8:	58020000 	.word	0x58020000

08013cbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	b082      	sub	sp, #8
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8013cd0:	4619      	mov	r1, r3
 8013cd2:	4610      	mov	r0, r2
 8013cd4:	f7fe fadb 	bl	801228e <USBD_LL_SetupStage>
}
 8013cd8:	bf00      	nop
 8013cda:	3708      	adds	r7, #8
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bd80      	pop	{r7, pc}

08013ce0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b082      	sub	sp, #8
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
 8013ce8:	460b      	mov	r3, r1
 8013cea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8013cf2:	78fa      	ldrb	r2, [r7, #3]
 8013cf4:	6879      	ldr	r1, [r7, #4]
 8013cf6:	4613      	mov	r3, r2
 8013cf8:	00db      	lsls	r3, r3, #3
 8013cfa:	4413      	add	r3, r2
 8013cfc:	009b      	lsls	r3, r3, #2
 8013cfe:	440b      	add	r3, r1
 8013d00:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013d04:	681a      	ldr	r2, [r3, #0]
 8013d06:	78fb      	ldrb	r3, [r7, #3]
 8013d08:	4619      	mov	r1, r3
 8013d0a:	f7fe fb15 	bl	8012338 <USBD_LL_DataOutStage>
}
 8013d0e:	bf00      	nop
 8013d10:	3708      	adds	r7, #8
 8013d12:	46bd      	mov	sp, r7
 8013d14:	bd80      	pop	{r7, pc}

08013d16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013d16:	b580      	push	{r7, lr}
 8013d18:	b082      	sub	sp, #8
 8013d1a:	af00      	add	r7, sp, #0
 8013d1c:	6078      	str	r0, [r7, #4]
 8013d1e:	460b      	mov	r3, r1
 8013d20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8013d28:	78fa      	ldrb	r2, [r7, #3]
 8013d2a:	6879      	ldr	r1, [r7, #4]
 8013d2c:	4613      	mov	r3, r2
 8013d2e:	00db      	lsls	r3, r3, #3
 8013d30:	4413      	add	r3, r2
 8013d32:	009b      	lsls	r3, r3, #2
 8013d34:	440b      	add	r3, r1
 8013d36:	3320      	adds	r3, #32
 8013d38:	681a      	ldr	r2, [r3, #0]
 8013d3a:	78fb      	ldrb	r3, [r7, #3]
 8013d3c:	4619      	mov	r1, r3
 8013d3e:	f7fe fbae 	bl	801249e <USBD_LL_DataInStage>
}
 8013d42:	bf00      	nop
 8013d44:	3708      	adds	r7, #8
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bd80      	pop	{r7, pc}

08013d4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013d4a:	b580      	push	{r7, lr}
 8013d4c:	b082      	sub	sp, #8
 8013d4e:	af00      	add	r7, sp, #0
 8013d50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f7fe fce8 	bl	801272e <USBD_LL_SOF>
}
 8013d5e:	bf00      	nop
 8013d60:	3708      	adds	r7, #8
 8013d62:	46bd      	mov	sp, r7
 8013d64:	bd80      	pop	{r7, pc}

08013d66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013d66:	b580      	push	{r7, lr}
 8013d68:	b084      	sub	sp, #16
 8013d6a:	af00      	add	r7, sp, #0
 8013d6c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013d6e:	2301      	movs	r3, #1
 8013d70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	79db      	ldrb	r3, [r3, #7]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d102      	bne.n	8013d80 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	73fb      	strb	r3, [r7, #15]
 8013d7e:	e008      	b.n	8013d92 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	79db      	ldrb	r3, [r3, #7]
 8013d84:	2b02      	cmp	r3, #2
 8013d86:	d102      	bne.n	8013d8e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8013d88:	2301      	movs	r3, #1
 8013d8a:	73fb      	strb	r3, [r7, #15]
 8013d8c:	e001      	b.n	8013d92 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8013d8e:	f7ed fa7f 	bl	8001290 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013d98:	7bfa      	ldrb	r2, [r7, #15]
 8013d9a:	4611      	mov	r1, r2
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f7fe fc82 	bl	80126a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013da8:	4618      	mov	r0, r3
 8013daa:	f7fe fc2a 	bl	8012602 <USBD_LL_Reset>
}
 8013dae:	bf00      	nop
 8013db0:	3710      	adds	r7, #16
 8013db2:	46bd      	mov	sp, r7
 8013db4:	bd80      	pop	{r7, pc}
	...

08013db8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013db8:	b580      	push	{r7, lr}
 8013dba:	b082      	sub	sp, #8
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	f7fe fc7d 	bl	80126c6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	687a      	ldr	r2, [r7, #4]
 8013dd8:	6812      	ldr	r2, [r2, #0]
 8013dda:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8013dde:	f043 0301 	orr.w	r3, r3, #1
 8013de2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	7adb      	ldrb	r3, [r3, #11]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d005      	beq.n	8013df8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013dec:	4b04      	ldr	r3, [pc, #16]	@ (8013e00 <HAL_PCD_SuspendCallback+0x48>)
 8013dee:	691b      	ldr	r3, [r3, #16]
 8013df0:	4a03      	ldr	r2, [pc, #12]	@ (8013e00 <HAL_PCD_SuspendCallback+0x48>)
 8013df2:	f043 0306 	orr.w	r3, r3, #6
 8013df6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013df8:	bf00      	nop
 8013dfa:	3708      	adds	r7, #8
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd80      	pop	{r7, pc}
 8013e00:	e000ed00 	.word	0xe000ed00

08013e04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b082      	sub	sp, #8
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013e12:	4618      	mov	r0, r3
 8013e14:	f7fe fc73 	bl	80126fe <USBD_LL_Resume>
}
 8013e18:	bf00      	nop
 8013e1a:	3708      	adds	r7, #8
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	bd80      	pop	{r7, pc}

08013e20 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b082      	sub	sp, #8
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
 8013e28:	460b      	mov	r3, r1
 8013e2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013e32:	78fa      	ldrb	r2, [r7, #3]
 8013e34:	4611      	mov	r1, r2
 8013e36:	4618      	mov	r0, r3
 8013e38:	f7fe fccb 	bl	80127d2 <USBD_LL_IsoOUTIncomplete>
}
 8013e3c:	bf00      	nop
 8013e3e:	3708      	adds	r7, #8
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd80      	pop	{r7, pc}

08013e44 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b082      	sub	sp, #8
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
 8013e4c:	460b      	mov	r3, r1
 8013e4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013e56:	78fa      	ldrb	r2, [r7, #3]
 8013e58:	4611      	mov	r1, r2
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	f7fe fc87 	bl	801276e <USBD_LL_IsoINIncomplete>
}
 8013e60:	bf00      	nop
 8013e62:	3708      	adds	r7, #8
 8013e64:	46bd      	mov	sp, r7
 8013e66:	bd80      	pop	{r7, pc}

08013e68 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b082      	sub	sp, #8
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013e76:	4618      	mov	r0, r3
 8013e78:	f7fe fcdd 	bl	8012836 <USBD_LL_DevConnected>
}
 8013e7c:	bf00      	nop
 8013e7e:	3708      	adds	r7, #8
 8013e80:	46bd      	mov	sp, r7
 8013e82:	bd80      	pop	{r7, pc}

08013e84 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b082      	sub	sp, #8
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7fe fcda 	bl	801284c <USBD_LL_DevDisconnected>
}
 8013e98:	bf00      	nop
 8013e9a:	3708      	adds	r7, #8
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd80      	pop	{r7, pc}

08013ea0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b082      	sub	sp, #8
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	781b      	ldrb	r3, [r3, #0]
 8013eac:	2b01      	cmp	r3, #1
 8013eae:	d140      	bne.n	8013f32 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8013eb0:	4a22      	ldr	r2, [pc, #136]	@ (8013f3c <USBD_LL_Init+0x9c>)
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	4a20      	ldr	r2, [pc, #128]	@ (8013f3c <USBD_LL_Init+0x9c>)
 8013ebc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8013ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8013f3c <USBD_LL_Init+0x9c>)
 8013ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8013f40 <USBD_LL_Init+0xa0>)
 8013ec4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8013ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8013f3c <USBD_LL_Init+0x9c>)
 8013ec8:	2209      	movs	r2, #9
 8013eca:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8013ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8013f3c <USBD_LL_Init+0x9c>)
 8013ece:	2202      	movs	r2, #2
 8013ed0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8013ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8013f3c <USBD_LL_Init+0x9c>)
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8013ed8:	4b18      	ldr	r3, [pc, #96]	@ (8013f3c <USBD_LL_Init+0x9c>)
 8013eda:	2202      	movs	r2, #2
 8013edc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8013ede:	4b17      	ldr	r3, [pc, #92]	@ (8013f3c <USBD_LL_Init+0x9c>)
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8013ee4:	4b15      	ldr	r3, [pc, #84]	@ (8013f3c <USBD_LL_Init+0x9c>)
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8013eea:	4b14      	ldr	r3, [pc, #80]	@ (8013f3c <USBD_LL_Init+0x9c>)
 8013eec:	2200      	movs	r2, #0
 8013eee:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8013ef0:	4b12      	ldr	r3, [pc, #72]	@ (8013f3c <USBD_LL_Init+0x9c>)
 8013ef2:	2201      	movs	r2, #1
 8013ef4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8013ef6:	4b11      	ldr	r3, [pc, #68]	@ (8013f3c <USBD_LL_Init+0x9c>)
 8013ef8:	2200      	movs	r2, #0
 8013efa:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8013efc:	4b0f      	ldr	r3, [pc, #60]	@ (8013f3c <USBD_LL_Init+0x9c>)
 8013efe:	2200      	movs	r2, #0
 8013f00:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8013f02:	480e      	ldr	r0, [pc, #56]	@ (8013f3c <USBD_LL_Init+0x9c>)
 8013f04:	f7f3 ff26 	bl	8007d54 <HAL_PCD_Init>
 8013f08:	4603      	mov	r3, r0
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d001      	beq.n	8013f12 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8013f0e:	f7ed f9bf 	bl	8001290 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8013f12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8013f16:	4809      	ldr	r0, [pc, #36]	@ (8013f3c <USBD_LL_Init+0x9c>)
 8013f18:	f7f5 f97b 	bl	8009212 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8013f1c:	2280      	movs	r2, #128	@ 0x80
 8013f1e:	2100      	movs	r1, #0
 8013f20:	4806      	ldr	r0, [pc, #24]	@ (8013f3c <USBD_LL_Init+0x9c>)
 8013f22:	f7f5 f92f 	bl	8009184 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8013f26:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8013f2a:	2101      	movs	r1, #1
 8013f2c:	4803      	ldr	r0, [pc, #12]	@ (8013f3c <USBD_LL_Init+0x9c>)
 8013f2e:	f7f5 f929 	bl	8009184 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8013f32:	2300      	movs	r3, #0
}
 8013f34:	4618      	mov	r0, r3
 8013f36:	3708      	adds	r7, #8
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}
 8013f3c:	24004220 	.word	0x24004220
 8013f40:	40040000 	.word	0x40040000

08013f44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b084      	sub	sp, #16
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013f50:	2300      	movs	r3, #0
 8013f52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	f7f4 f806 	bl	8007f6c <HAL_PCD_Start>
 8013f60:	4603      	mov	r3, r0
 8013f62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013f64:	7bfb      	ldrb	r3, [r7, #15]
 8013f66:	4618      	mov	r0, r3
 8013f68:	f000 f942 	bl	80141f0 <USBD_Get_USB_Status>
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013f70:	7bbb      	ldrb	r3, [r7, #14]
}
 8013f72:	4618      	mov	r0, r3
 8013f74:	3710      	adds	r7, #16
 8013f76:	46bd      	mov	sp, r7
 8013f78:	bd80      	pop	{r7, pc}

08013f7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013f7a:	b580      	push	{r7, lr}
 8013f7c:	b084      	sub	sp, #16
 8013f7e:	af00      	add	r7, sp, #0
 8013f80:	6078      	str	r0, [r7, #4]
 8013f82:	4608      	mov	r0, r1
 8013f84:	4611      	mov	r1, r2
 8013f86:	461a      	mov	r2, r3
 8013f88:	4603      	mov	r3, r0
 8013f8a:	70fb      	strb	r3, [r7, #3]
 8013f8c:	460b      	mov	r3, r1
 8013f8e:	70bb      	strb	r3, [r7, #2]
 8013f90:	4613      	mov	r3, r2
 8013f92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013f94:	2300      	movs	r3, #0
 8013f96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013f98:	2300      	movs	r3, #0
 8013f9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013fa2:	78bb      	ldrb	r3, [r7, #2]
 8013fa4:	883a      	ldrh	r2, [r7, #0]
 8013fa6:	78f9      	ldrb	r1, [r7, #3]
 8013fa8:	f7f4 fd07 	bl	80089ba <HAL_PCD_EP_Open>
 8013fac:	4603      	mov	r3, r0
 8013fae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013fb0:	7bfb      	ldrb	r3, [r7, #15]
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	f000 f91c 	bl	80141f0 <USBD_Get_USB_Status>
 8013fb8:	4603      	mov	r3, r0
 8013fba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013fbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	3710      	adds	r7, #16
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}

08013fc6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013fc6:	b580      	push	{r7, lr}
 8013fc8:	b084      	sub	sp, #16
 8013fca:	af00      	add	r7, sp, #0
 8013fcc:	6078      	str	r0, [r7, #4]
 8013fce:	460b      	mov	r3, r1
 8013fd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013fe0:	78fa      	ldrb	r2, [r7, #3]
 8013fe2:	4611      	mov	r1, r2
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	f7f4 fd52 	bl	8008a8e <HAL_PCD_EP_Close>
 8013fea:	4603      	mov	r3, r0
 8013fec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013fee:	7bfb      	ldrb	r3, [r7, #15]
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	f000 f8fd 	bl	80141f0 <USBD_Get_USB_Status>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013ffa:	7bbb      	ldrb	r3, [r7, #14]
}
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	3710      	adds	r7, #16
 8014000:	46bd      	mov	sp, r7
 8014002:	bd80      	pop	{r7, pc}

08014004 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014004:	b580      	push	{r7, lr}
 8014006:	b084      	sub	sp, #16
 8014008:	af00      	add	r7, sp, #0
 801400a:	6078      	str	r0, [r7, #4]
 801400c:	460b      	mov	r3, r1
 801400e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014010:	2300      	movs	r3, #0
 8014012:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014014:	2300      	movs	r3, #0
 8014016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801401e:	78fa      	ldrb	r2, [r7, #3]
 8014020:	4611      	mov	r1, r2
 8014022:	4618      	mov	r0, r3
 8014024:	f7f4 fe0a 	bl	8008c3c <HAL_PCD_EP_SetStall>
 8014028:	4603      	mov	r3, r0
 801402a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801402c:	7bfb      	ldrb	r3, [r7, #15]
 801402e:	4618      	mov	r0, r3
 8014030:	f000 f8de 	bl	80141f0 <USBD_Get_USB_Status>
 8014034:	4603      	mov	r3, r0
 8014036:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014038:	7bbb      	ldrb	r3, [r7, #14]
}
 801403a:	4618      	mov	r0, r3
 801403c:	3710      	adds	r7, #16
 801403e:	46bd      	mov	sp, r7
 8014040:	bd80      	pop	{r7, pc}

08014042 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014042:	b580      	push	{r7, lr}
 8014044:	b084      	sub	sp, #16
 8014046:	af00      	add	r7, sp, #0
 8014048:	6078      	str	r0, [r7, #4]
 801404a:	460b      	mov	r3, r1
 801404c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801404e:	2300      	movs	r3, #0
 8014050:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014052:	2300      	movs	r3, #0
 8014054:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801405c:	78fa      	ldrb	r2, [r7, #3]
 801405e:	4611      	mov	r1, r2
 8014060:	4618      	mov	r0, r3
 8014062:	f7f4 fe4e 	bl	8008d02 <HAL_PCD_EP_ClrStall>
 8014066:	4603      	mov	r3, r0
 8014068:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801406a:	7bfb      	ldrb	r3, [r7, #15]
 801406c:	4618      	mov	r0, r3
 801406e:	f000 f8bf 	bl	80141f0 <USBD_Get_USB_Status>
 8014072:	4603      	mov	r3, r0
 8014074:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014076:	7bbb      	ldrb	r3, [r7, #14]
}
 8014078:	4618      	mov	r0, r3
 801407a:	3710      	adds	r7, #16
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}

08014080 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014080:	b480      	push	{r7}
 8014082:	b085      	sub	sp, #20
 8014084:	af00      	add	r7, sp, #0
 8014086:	6078      	str	r0, [r7, #4]
 8014088:	460b      	mov	r3, r1
 801408a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014092:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014094:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014098:	2b00      	cmp	r3, #0
 801409a:	da0b      	bge.n	80140b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801409c:	78fb      	ldrb	r3, [r7, #3]
 801409e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80140a2:	68f9      	ldr	r1, [r7, #12]
 80140a4:	4613      	mov	r3, r2
 80140a6:	00db      	lsls	r3, r3, #3
 80140a8:	4413      	add	r3, r2
 80140aa:	009b      	lsls	r3, r3, #2
 80140ac:	440b      	add	r3, r1
 80140ae:	3316      	adds	r3, #22
 80140b0:	781b      	ldrb	r3, [r3, #0]
 80140b2:	e00b      	b.n	80140cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80140b4:	78fb      	ldrb	r3, [r7, #3]
 80140b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80140ba:	68f9      	ldr	r1, [r7, #12]
 80140bc:	4613      	mov	r3, r2
 80140be:	00db      	lsls	r3, r3, #3
 80140c0:	4413      	add	r3, r2
 80140c2:	009b      	lsls	r3, r3, #2
 80140c4:	440b      	add	r3, r1
 80140c6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80140ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80140cc:	4618      	mov	r0, r3
 80140ce:	3714      	adds	r7, #20
 80140d0:	46bd      	mov	sp, r7
 80140d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d6:	4770      	bx	lr

080140d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	b084      	sub	sp, #16
 80140dc:	af00      	add	r7, sp, #0
 80140de:	6078      	str	r0, [r7, #4]
 80140e0:	460b      	mov	r3, r1
 80140e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80140e4:	2300      	movs	r3, #0
 80140e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80140e8:	2300      	movs	r3, #0
 80140ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80140f2:	78fa      	ldrb	r2, [r7, #3]
 80140f4:	4611      	mov	r1, r2
 80140f6:	4618      	mov	r0, r3
 80140f8:	f7f4 fc3b 	bl	8008972 <HAL_PCD_SetAddress>
 80140fc:	4603      	mov	r3, r0
 80140fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014100:	7bfb      	ldrb	r3, [r7, #15]
 8014102:	4618      	mov	r0, r3
 8014104:	f000 f874 	bl	80141f0 <USBD_Get_USB_Status>
 8014108:	4603      	mov	r3, r0
 801410a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801410c:	7bbb      	ldrb	r3, [r7, #14]
}
 801410e:	4618      	mov	r0, r3
 8014110:	3710      	adds	r7, #16
 8014112:	46bd      	mov	sp, r7
 8014114:	bd80      	pop	{r7, pc}

08014116 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014116:	b580      	push	{r7, lr}
 8014118:	b086      	sub	sp, #24
 801411a:	af00      	add	r7, sp, #0
 801411c:	60f8      	str	r0, [r7, #12]
 801411e:	607a      	str	r2, [r7, #4]
 8014120:	603b      	str	r3, [r7, #0]
 8014122:	460b      	mov	r3, r1
 8014124:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014126:	2300      	movs	r3, #0
 8014128:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801412a:	2300      	movs	r3, #0
 801412c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014134:	7af9      	ldrb	r1, [r7, #11]
 8014136:	683b      	ldr	r3, [r7, #0]
 8014138:	687a      	ldr	r2, [r7, #4]
 801413a:	f7f4 fd45 	bl	8008bc8 <HAL_PCD_EP_Transmit>
 801413e:	4603      	mov	r3, r0
 8014140:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014142:	7dfb      	ldrb	r3, [r7, #23]
 8014144:	4618      	mov	r0, r3
 8014146:	f000 f853 	bl	80141f0 <USBD_Get_USB_Status>
 801414a:	4603      	mov	r3, r0
 801414c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801414e:	7dbb      	ldrb	r3, [r7, #22]
}
 8014150:	4618      	mov	r0, r3
 8014152:	3718      	adds	r7, #24
 8014154:	46bd      	mov	sp, r7
 8014156:	bd80      	pop	{r7, pc}

08014158 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b086      	sub	sp, #24
 801415c:	af00      	add	r7, sp, #0
 801415e:	60f8      	str	r0, [r7, #12]
 8014160:	607a      	str	r2, [r7, #4]
 8014162:	603b      	str	r3, [r7, #0]
 8014164:	460b      	mov	r3, r1
 8014166:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014168:	2300      	movs	r3, #0
 801416a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801416c:	2300      	movs	r3, #0
 801416e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014176:	7af9      	ldrb	r1, [r7, #11]
 8014178:	683b      	ldr	r3, [r7, #0]
 801417a:	687a      	ldr	r2, [r7, #4]
 801417c:	f7f4 fcd1 	bl	8008b22 <HAL_PCD_EP_Receive>
 8014180:	4603      	mov	r3, r0
 8014182:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014184:	7dfb      	ldrb	r3, [r7, #23]
 8014186:	4618      	mov	r0, r3
 8014188:	f000 f832 	bl	80141f0 <USBD_Get_USB_Status>
 801418c:	4603      	mov	r3, r0
 801418e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014190:	7dbb      	ldrb	r3, [r7, #22]
}
 8014192:	4618      	mov	r0, r3
 8014194:	3718      	adds	r7, #24
 8014196:	46bd      	mov	sp, r7
 8014198:	bd80      	pop	{r7, pc}

0801419a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801419a:	b580      	push	{r7, lr}
 801419c:	b082      	sub	sp, #8
 801419e:	af00      	add	r7, sp, #0
 80141a0:	6078      	str	r0, [r7, #4]
 80141a2:	460b      	mov	r3, r1
 80141a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80141ac:	78fa      	ldrb	r2, [r7, #3]
 80141ae:	4611      	mov	r1, r2
 80141b0:	4618      	mov	r0, r3
 80141b2:	f7f4 fcf1 	bl	8008b98 <HAL_PCD_EP_GetRxCount>
 80141b6:	4603      	mov	r3, r0
}
 80141b8:	4618      	mov	r0, r3
 80141ba:	3708      	adds	r7, #8
 80141bc:	46bd      	mov	sp, r7
 80141be:	bd80      	pop	{r7, pc}

080141c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80141c0:	b480      	push	{r7}
 80141c2:	b083      	sub	sp, #12
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80141c8:	4b03      	ldr	r3, [pc, #12]	@ (80141d8 <USBD_static_malloc+0x18>)
}
 80141ca:	4618      	mov	r0, r3
 80141cc:	370c      	adds	r7, #12
 80141ce:	46bd      	mov	sp, r7
 80141d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d4:	4770      	bx	lr
 80141d6:	bf00      	nop
 80141d8:	24004704 	.word	0x24004704

080141dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80141dc:	b480      	push	{r7}
 80141de:	b083      	sub	sp, #12
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80141e4:	bf00      	nop
 80141e6:	370c      	adds	r7, #12
 80141e8:	46bd      	mov	sp, r7
 80141ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ee:	4770      	bx	lr

080141f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80141f0:	b480      	push	{r7}
 80141f2:	b085      	sub	sp, #20
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	4603      	mov	r3, r0
 80141f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80141fa:	2300      	movs	r3, #0
 80141fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80141fe:	79fb      	ldrb	r3, [r7, #7]
 8014200:	2b03      	cmp	r3, #3
 8014202:	d817      	bhi.n	8014234 <USBD_Get_USB_Status+0x44>
 8014204:	a201      	add	r2, pc, #4	@ (adr r2, 801420c <USBD_Get_USB_Status+0x1c>)
 8014206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801420a:	bf00      	nop
 801420c:	0801421d 	.word	0x0801421d
 8014210:	08014223 	.word	0x08014223
 8014214:	08014229 	.word	0x08014229
 8014218:	0801422f 	.word	0x0801422f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801421c:	2300      	movs	r3, #0
 801421e:	73fb      	strb	r3, [r7, #15]
    break;
 8014220:	e00b      	b.n	801423a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014222:	2303      	movs	r3, #3
 8014224:	73fb      	strb	r3, [r7, #15]
    break;
 8014226:	e008      	b.n	801423a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014228:	2301      	movs	r3, #1
 801422a:	73fb      	strb	r3, [r7, #15]
    break;
 801422c:	e005      	b.n	801423a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801422e:	2303      	movs	r3, #3
 8014230:	73fb      	strb	r3, [r7, #15]
    break;
 8014232:	e002      	b.n	801423a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014234:	2303      	movs	r3, #3
 8014236:	73fb      	strb	r3, [r7, #15]
    break;
 8014238:	bf00      	nop
  }
  return usb_status;
 801423a:	7bfb      	ldrb	r3, [r7, #15]
}
 801423c:	4618      	mov	r0, r3
 801423e:	3714      	adds	r7, #20
 8014240:	46bd      	mov	sp, r7
 8014242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014246:	4770      	bx	lr

08014248 <arm_rfft_fast_init_f32>:
 8014248:	084b      	lsrs	r3, r1, #1
 801424a:	2b80      	cmp	r3, #128	@ 0x80
 801424c:	b430      	push	{r4, r5}
 801424e:	8201      	strh	r1, [r0, #16]
 8014250:	8003      	strh	r3, [r0, #0]
 8014252:	d06f      	beq.n	8014334 <arm_rfft_fast_init_f32+0xec>
 8014254:	d916      	bls.n	8014284 <arm_rfft_fast_init_f32+0x3c>
 8014256:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801425a:	d05e      	beq.n	801431a <arm_rfft_fast_init_f32+0xd2>
 801425c:	d935      	bls.n	80142ca <arm_rfft_fast_init_f32+0x82>
 801425e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014262:	d025      	beq.n	80142b0 <arm_rfft_fast_init_f32+0x68>
 8014264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014268:	d112      	bne.n	8014290 <arm_rfft_fast_init_f32+0x48>
 801426a:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 801426e:	4c37      	ldr	r4, [pc, #220]	@ (801434c <arm_rfft_fast_init_f32+0x104>)
 8014270:	4937      	ldr	r1, [pc, #220]	@ (8014350 <arm_rfft_fast_init_f32+0x108>)
 8014272:	2300      	movs	r3, #0
 8014274:	4a37      	ldr	r2, [pc, #220]	@ (8014354 <arm_rfft_fast_init_f32+0x10c>)
 8014276:	8185      	strh	r5, [r0, #12]
 8014278:	6084      	str	r4, [r0, #8]
 801427a:	6041      	str	r1, [r0, #4]
 801427c:	6142      	str	r2, [r0, #20]
 801427e:	b258      	sxtb	r0, r3
 8014280:	bc30      	pop	{r4, r5}
 8014282:	4770      	bx	lr
 8014284:	2b20      	cmp	r3, #32
 8014286:	d030      	beq.n	80142ea <arm_rfft_fast_init_f32+0xa2>
 8014288:	2b40      	cmp	r3, #64	@ 0x40
 801428a:	d005      	beq.n	8014298 <arm_rfft_fast_init_f32+0x50>
 801428c:	2b10      	cmp	r3, #16
 801428e:	d038      	beq.n	8014302 <arm_rfft_fast_init_f32+0xba>
 8014290:	23ff      	movs	r3, #255	@ 0xff
 8014292:	bc30      	pop	{r4, r5}
 8014294:	b258      	sxtb	r0, r3
 8014296:	4770      	bx	lr
 8014298:	2538      	movs	r5, #56	@ 0x38
 801429a:	4c2f      	ldr	r4, [pc, #188]	@ (8014358 <arm_rfft_fast_init_f32+0x110>)
 801429c:	492f      	ldr	r1, [pc, #188]	@ (801435c <arm_rfft_fast_init_f32+0x114>)
 801429e:	2300      	movs	r3, #0
 80142a0:	4a2f      	ldr	r2, [pc, #188]	@ (8014360 <arm_rfft_fast_init_f32+0x118>)
 80142a2:	8185      	strh	r5, [r0, #12]
 80142a4:	6084      	str	r4, [r0, #8]
 80142a6:	6041      	str	r1, [r0, #4]
 80142a8:	6142      	str	r2, [r0, #20]
 80142aa:	b258      	sxtb	r0, r3
 80142ac:	bc30      	pop	{r4, r5}
 80142ae:	4770      	bx	lr
 80142b0:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 80142b4:	4c2b      	ldr	r4, [pc, #172]	@ (8014364 <arm_rfft_fast_init_f32+0x11c>)
 80142b6:	492c      	ldr	r1, [pc, #176]	@ (8014368 <arm_rfft_fast_init_f32+0x120>)
 80142b8:	2300      	movs	r3, #0
 80142ba:	4a2c      	ldr	r2, [pc, #176]	@ (801436c <arm_rfft_fast_init_f32+0x124>)
 80142bc:	8185      	strh	r5, [r0, #12]
 80142be:	6084      	str	r4, [r0, #8]
 80142c0:	6041      	str	r1, [r0, #4]
 80142c2:	6142      	str	r2, [r0, #20]
 80142c4:	b258      	sxtb	r0, r3
 80142c6:	bc30      	pop	{r4, r5}
 80142c8:	4770      	bx	lr
 80142ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80142ce:	d1df      	bne.n	8014290 <arm_rfft_fast_init_f32+0x48>
 80142d0:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 80142d4:	4c26      	ldr	r4, [pc, #152]	@ (8014370 <arm_rfft_fast_init_f32+0x128>)
 80142d6:	4927      	ldr	r1, [pc, #156]	@ (8014374 <arm_rfft_fast_init_f32+0x12c>)
 80142d8:	2300      	movs	r3, #0
 80142da:	4a27      	ldr	r2, [pc, #156]	@ (8014378 <arm_rfft_fast_init_f32+0x130>)
 80142dc:	8185      	strh	r5, [r0, #12]
 80142de:	6084      	str	r4, [r0, #8]
 80142e0:	6041      	str	r1, [r0, #4]
 80142e2:	6142      	str	r2, [r0, #20]
 80142e4:	b258      	sxtb	r0, r3
 80142e6:	bc30      	pop	{r4, r5}
 80142e8:	4770      	bx	lr
 80142ea:	2530      	movs	r5, #48	@ 0x30
 80142ec:	4c23      	ldr	r4, [pc, #140]	@ (801437c <arm_rfft_fast_init_f32+0x134>)
 80142ee:	4924      	ldr	r1, [pc, #144]	@ (8014380 <arm_rfft_fast_init_f32+0x138>)
 80142f0:	2300      	movs	r3, #0
 80142f2:	4a24      	ldr	r2, [pc, #144]	@ (8014384 <arm_rfft_fast_init_f32+0x13c>)
 80142f4:	8185      	strh	r5, [r0, #12]
 80142f6:	6084      	str	r4, [r0, #8]
 80142f8:	6041      	str	r1, [r0, #4]
 80142fa:	6142      	str	r2, [r0, #20]
 80142fc:	b258      	sxtb	r0, r3
 80142fe:	bc30      	pop	{r4, r5}
 8014300:	4770      	bx	lr
 8014302:	2514      	movs	r5, #20
 8014304:	4c20      	ldr	r4, [pc, #128]	@ (8014388 <arm_rfft_fast_init_f32+0x140>)
 8014306:	4921      	ldr	r1, [pc, #132]	@ (801438c <arm_rfft_fast_init_f32+0x144>)
 8014308:	2300      	movs	r3, #0
 801430a:	4a21      	ldr	r2, [pc, #132]	@ (8014390 <arm_rfft_fast_init_f32+0x148>)
 801430c:	8185      	strh	r5, [r0, #12]
 801430e:	6084      	str	r4, [r0, #8]
 8014310:	6041      	str	r1, [r0, #4]
 8014312:	6142      	str	r2, [r0, #20]
 8014314:	b258      	sxtb	r0, r3
 8014316:	bc30      	pop	{r4, r5}
 8014318:	4770      	bx	lr
 801431a:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 801431e:	4c1d      	ldr	r4, [pc, #116]	@ (8014394 <arm_rfft_fast_init_f32+0x14c>)
 8014320:	491d      	ldr	r1, [pc, #116]	@ (8014398 <arm_rfft_fast_init_f32+0x150>)
 8014322:	2300      	movs	r3, #0
 8014324:	4a1d      	ldr	r2, [pc, #116]	@ (801439c <arm_rfft_fast_init_f32+0x154>)
 8014326:	8185      	strh	r5, [r0, #12]
 8014328:	6084      	str	r4, [r0, #8]
 801432a:	6041      	str	r1, [r0, #4]
 801432c:	6142      	str	r2, [r0, #20]
 801432e:	b258      	sxtb	r0, r3
 8014330:	bc30      	pop	{r4, r5}
 8014332:	4770      	bx	lr
 8014334:	25d0      	movs	r5, #208	@ 0xd0
 8014336:	4c1a      	ldr	r4, [pc, #104]	@ (80143a0 <arm_rfft_fast_init_f32+0x158>)
 8014338:	491a      	ldr	r1, [pc, #104]	@ (80143a4 <arm_rfft_fast_init_f32+0x15c>)
 801433a:	2300      	movs	r3, #0
 801433c:	4a1a      	ldr	r2, [pc, #104]	@ (80143a8 <arm_rfft_fast_init_f32+0x160>)
 801433e:	8185      	strh	r5, [r0, #12]
 8014340:	6084      	str	r4, [r0, #8]
 8014342:	6041      	str	r1, [r0, #4]
 8014344:	6142      	str	r2, [r0, #20]
 8014346:	b258      	sxtb	r0, r3
 8014348:	bc30      	pop	{r4, r5}
 801434a:	4770      	bx	lr
 801434c:	08025a2c 	.word	0x08025a2c
 8014350:	08016420 	.word	0x08016420
 8014354:	0801c590 	.word	0x0801c590
 8014358:	0801a520 	.word	0x0801a520
 801435c:	080277ec 	.word	0x080277ec
 8014360:	08029cdc 	.word	0x08029cdc
 8014364:	08022f10 	.word	0x08022f10
 8014368:	08020e10 	.word	0x08020e10
 801436c:	0801a590 	.word	0x0801a590
 8014370:	0802996c 	.word	0x0802996c
 8014374:	08020590 	.word	0x08020590
 8014378:	080279ec 	.word	0x080279ec
 801437c:	08023dc8 	.word	0x08023dc8
 8014380:	08022e10 	.word	0x08022e10
 8014384:	0801a420 	.word	0x0801a420
 8014388:	08023d20 	.word	0x08023d20
 801438c:	08020d90 	.word	0x08020d90
 8014390:	08023d48 	.word	0x08023d48
 8014394:	080281ec 	.word	0x080281ec
 8014398:	08024a2c 	.word	0x08024a2c
 801439c:	0802856c 	.word	0x0802856c
 80143a0:	08029edc 	.word	0x08029edc
 80143a4:	0802462c 	.word	0x0802462c
 80143a8:	0802956c 	.word	0x0802956c

080143ac <arm_rfft_fast_f32>:
 80143ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143b0:	8a05      	ldrh	r5, [r0, #16]
 80143b2:	4606      	mov	r6, r0
 80143b4:	4690      	mov	r8, r2
 80143b6:	460c      	mov	r4, r1
 80143b8:	086d      	lsrs	r5, r5, #1
 80143ba:	8005      	strh	r5, [r0, #0]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d15e      	bne.n	801447e <arm_rfft_fast_f32+0xd2>
 80143c0:	461a      	mov	r2, r3
 80143c2:	2301      	movs	r3, #1
 80143c4:	f000 fbe0 	bl	8014b88 <arm_cfft_f32>
 80143c8:	edd4 7a00 	vldr	s15, [r4]
 80143cc:	ed94 7a01 	vldr	s14, [r4, #4]
 80143d0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80143d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80143d8:	8837      	ldrh	r7, [r6, #0]
 80143da:	ee37 7a07 	vadd.f32	s14, s14, s14
 80143de:	6975      	ldr	r5, [r6, #20]
 80143e0:	3f01      	subs	r7, #1
 80143e2:	eef0 3a46 	vmov.f32	s7, s12
 80143e6:	3510      	adds	r5, #16
 80143e8:	f108 0610 	add.w	r6, r8, #16
 80143ec:	ee77 6a87 	vadd.f32	s13, s15, s14
 80143f0:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 80143f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80143f8:	f104 0310 	add.w	r3, r4, #16
 80143fc:	3808      	subs	r0, #8
 80143fe:	ee26 7a86 	vmul.f32	s14, s13, s12
 8014402:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014406:	ed88 7a00 	vstr	s14, [r8]
 801440a:	edc8 7a01 	vstr	s15, [r8, #4]
 801440e:	edd0 6a02 	vldr	s13, [r0, #8]
 8014412:	3f01      	subs	r7, #1
 8014414:	ed13 5a02 	vldr	s10, [r3, #-8]
 8014418:	f1a0 0008 	sub.w	r0, r0, #8
 801441c:	ed13 7a01 	vldr	s14, [r3, #-4]
 8014420:	f105 0508 	add.w	r5, r5, #8
 8014424:	ee76 7ac5 	vsub.f32	s15, s13, s10
 8014428:	ed15 6a04 	vldr	s12, [r5, #-16]
 801442c:	edd0 5a05 	vldr	s11, [r0, #20]
 8014430:	ee36 5a85 	vadd.f32	s10, s13, s10
 8014434:	ed55 6a03 	vldr	s13, [r5, #-12]
 8014438:	f103 0308 	add.w	r3, r3, #8
 801443c:	ee35 4a87 	vadd.f32	s8, s11, s14
 8014440:	f106 0608 	add.w	r6, r6, #8
 8014444:	ee66 4a27 	vmul.f32	s9, s12, s15
 8014448:	ee77 5a65 	vsub.f32	s11, s14, s11
 801444c:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8014450:	ee34 5a85 	vadd.f32	s10, s9, s10
 8014454:	ee26 6a04 	vmul.f32	s12, s12, s8
 8014458:	ee66 6a84 	vmul.f32	s13, s13, s8
 801445c:	ee77 7a25 	vadd.f32	s15, s14, s11
 8014460:	ee76 6a85 	vadd.f32	s13, s13, s10
 8014464:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014468:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801446c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8014470:	ed46 6a04 	vstr	s13, [r6, #-16]
 8014474:	ed46 7a03 	vstr	s15, [r6, #-12]
 8014478:	d1c9      	bne.n	801440e <arm_rfft_fast_f32+0x62>
 801447a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801447e:	edd1 7a00 	vldr	s15, [r1]
 8014482:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8014486:	edd1 6a01 	vldr	s13, [r1, #4]
 801448a:	1e68      	subs	r0, r5, #1
 801448c:	6975      	ldr	r5, [r6, #20]
 801448e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014492:	00c1      	lsls	r1, r0, #3
 8014494:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014498:	ee27 7a23 	vmul.f32	s14, s14, s7
 801449c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80144a0:	ed82 7a00 	vstr	s14, [r2]
 80144a4:	edc2 7a01 	vstr	s15, [r2, #4]
 80144a8:	b3e0      	cbz	r0, 8014524 <arm_rfft_fast_f32+0x178>
 80144aa:	3908      	subs	r1, #8
 80144ac:	f104 0210 	add.w	r2, r4, #16
 80144b0:	3510      	adds	r5, #16
 80144b2:	440c      	add	r4, r1
 80144b4:	f108 0110 	add.w	r1, r8, #16
 80144b8:	ed94 7a02 	vldr	s14, [r4, #8]
 80144bc:	3801      	subs	r0, #1
 80144be:	ed52 6a02 	vldr	s13, [r2, #-8]
 80144c2:	f1a4 0408 	sub.w	r4, r4, #8
 80144c6:	ed15 6a02 	vldr	s12, [r5, #-8]
 80144ca:	f102 0208 	add.w	r2, r2, #8
 80144ce:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80144d2:	ed94 4a05 	vldr	s8, [r4, #20]
 80144d6:	ed12 5a03 	vldr	s10, [r2, #-12]
 80144da:	ee77 6a26 	vadd.f32	s13, s14, s13
 80144de:	ed55 5a01 	vldr	s11, [r5, #-4]
 80144e2:	f101 0108 	add.w	r1, r1, #8
 80144e6:	ee26 3a27 	vmul.f32	s6, s12, s15
 80144ea:	f105 0508 	add.w	r5, r5, #8
 80144ee:	ee74 4a05 	vadd.f32	s9, s8, s10
 80144f2:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80144f6:	ee35 5a44 	vsub.f32	s10, s10, s8
 80144fa:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80144fe:	ee26 6a24 	vmul.f32	s12, s12, s9
 8014502:	ee77 7a05 	vadd.f32	s15, s14, s10
 8014506:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801450a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801450e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8014512:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8014516:	ee27 7a23 	vmul.f32	s14, s14, s7
 801451a:	ed41 7a03 	vstr	s15, [r1, #-12]
 801451e:	ed01 7a04 	vstr	s14, [r1, #-16]
 8014522:	d1c9      	bne.n	80144b8 <arm_rfft_fast_f32+0x10c>
 8014524:	4630      	mov	r0, r6
 8014526:	4641      	mov	r1, r8
 8014528:	461a      	mov	r2, r3
 801452a:	2301      	movs	r3, #1
 801452c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014530:	f000 bb2a 	b.w	8014b88 <arm_cfft_f32>

08014534 <arm_cfft_radix8by2_f32>:
 8014534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014538:	ed2d 8b06 	vpush	{d8-d10}
 801453c:	f8b0 e000 	ldrh.w	lr, [r0]
 8014540:	4607      	mov	r7, r0
 8014542:	6842      	ldr	r2, [r0, #4]
 8014544:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8014548:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 801454c:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8014550:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8014554:	f000 80af 	beq.w	80146b6 <arm_cfft_radix8by2_f32+0x182>
 8014558:	3310      	adds	r3, #16
 801455a:	3210      	adds	r2, #16
 801455c:	f101 0610 	add.w	r6, r1, #16
 8014560:	f108 0510 	add.w	r5, r8, #16
 8014564:	18cc      	adds	r4, r1, r3
 8014566:	4443      	add	r3, r8
 8014568:	ed55 6a04 	vldr	s13, [r5, #-16]
 801456c:	f1be 0e01 	subs.w	lr, lr, #1
 8014570:	ed56 4a04 	vldr	s9, [r6, #-16]
 8014574:	f104 0410 	add.w	r4, r4, #16
 8014578:	ed55 7a02 	vldr	s15, [r5, #-8]
 801457c:	f106 0610 	add.w	r6, r6, #16
 8014580:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8014584:	ed53 0a04 	vldr	s1, [r3, #-16]
 8014588:	ed13 5a03 	vldr	s10, [r3, #-12]
 801458c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8014590:	ed13 3a02 	vldr	s6, [r3, #-8]
 8014594:	f102 0210 	add.w	r2, r2, #16
 8014598:	ed15 7a03 	vldr	s14, [r5, #-12]
 801459c:	f103 0310 	add.w	r3, r3, #16
 80145a0:	ed55 2a01 	vldr	s5, [r5, #-4]
 80145a4:	f105 0510 	add.w	r5, r5, #16
 80145a8:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 80145ac:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 80145b0:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 80145b4:	ee33 8a83 	vadd.f32	s16, s7, s6
 80145b8:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 80145bc:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 80145c0:	ee34 0a06 	vadd.f32	s0, s8, s12
 80145c4:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 80145c8:	ee76 aa87 	vadd.f32	s21, s13, s14
 80145cc:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 80145d0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80145d4:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 80145d8:	ee35 9aa0 	vadd.f32	s18, s11, s1
 80145dc:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 80145e0:	ee71 8a05 	vadd.f32	s17, s2, s10
 80145e4:	ee31 aaa7 	vadd.f32	s20, s3, s15
 80145e8:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 80145ec:	ee72 9a22 	vadd.f32	s19, s4, s5
 80145f0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80145f4:	ee35 5a41 	vsub.f32	s10, s10, s2
 80145f8:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 80145fc:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 8014600:	ee36 6a44 	vsub.f32	s12, s12, s8
 8014604:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 8014608:	ee71 1ae7 	vsub.f32	s3, s3, s15
 801460c:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 8014610:	ee72 7a62 	vsub.f32	s15, s4, s5
 8014614:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 8014618:	ee73 2a63 	vsub.f32	s5, s6, s7
 801461c:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 8014620:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 8014624:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 8014628:	ee24 3a84 	vmul.f32	s6, s9, s8
 801462c:	ee27 2a26 	vmul.f32	s4, s14, s13
 8014630:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8014634:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8014638:	ee27 7a04 	vmul.f32	s14, s14, s8
 801463c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8014640:	ee65 6a26 	vmul.f32	s13, s10, s13
 8014644:	ee25 5a04 	vmul.f32	s10, s10, s8
 8014648:	ee37 7a64 	vsub.f32	s14, s14, s9
 801464c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014650:	ee33 4a02 	vadd.f32	s8, s6, s4
 8014654:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8014658:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 801465c:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 8014660:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 8014664:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 8014668:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 801466c:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8014670:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8014674:	ee27 4a87 	vmul.f32	s8, s15, s14
 8014678:	ee61 5a87 	vmul.f32	s11, s3, s14
 801467c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014680:	ee22 5a87 	vmul.f32	s10, s5, s14
 8014684:	ee26 7a07 	vmul.f32	s14, s12, s14
 8014688:	ee26 6a26 	vmul.f32	s12, s12, s13
 801468c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8014690:	ee74 4a84 	vadd.f32	s9, s9, s8
 8014694:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8014698:	ee35 6a46 	vsub.f32	s12, s10, s12
 801469c:	ee37 7a26 	vadd.f32	s14, s14, s13
 80146a0:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 80146a4:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 80146a8:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 80146ac:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 80146b0:	f47f af5a 	bne.w	8014568 <arm_cfft_radix8by2_f32+0x34>
 80146b4:	687a      	ldr	r2, [r7, #4]
 80146b6:	fa1f f48c 	uxth.w	r4, ip
 80146ba:	4608      	mov	r0, r1
 80146bc:	2302      	movs	r3, #2
 80146be:	4621      	mov	r1, r4
 80146c0:	f000 fb1e 	bl	8014d00 <arm_radix8_butterfly_f32>
 80146c4:	4640      	mov	r0, r8
 80146c6:	4621      	mov	r1, r4
 80146c8:	687a      	ldr	r2, [r7, #4]
 80146ca:	2302      	movs	r3, #2
 80146cc:	ecbd 8b06 	vpop	{d8-d10}
 80146d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146d4:	f000 bb14 	b.w	8014d00 <arm_radix8_butterfly_f32>

080146d8 <arm_cfft_radix8by4_f32>:
 80146d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146dc:	ed2d 8b06 	vpush	{d8-d10}
 80146e0:	8804      	ldrh	r4, [r0, #0]
 80146e2:	b08f      	sub	sp, #60	@ 0x3c
 80146e4:	ed91 6a00 	vldr	s12, [r1]
 80146e8:	460a      	mov	r2, r1
 80146ea:	0864      	lsrs	r4, r4, #1
 80146ec:	ed91 7a01 	vldr	s14, [r1, #4]
 80146f0:	9101      	str	r1, [sp, #4]
 80146f2:	00a3      	lsls	r3, r4, #2
 80146f4:	9104      	str	r1, [sp, #16]
 80146f6:	0864      	lsrs	r4, r4, #1
 80146f8:	6841      	ldr	r1, [r0, #4]
 80146fa:	900c      	str	r0, [sp, #48]	@ 0x30
 80146fc:	4625      	mov	r5, r4
 80146fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014700:	f101 0408 	add.w	r4, r1, #8
 8014704:	f101 0610 	add.w	r6, r1, #16
 8014708:	9406      	str	r4, [sp, #24]
 801470a:	18d4      	adds	r4, r2, r3
 801470c:	1eaa      	subs	r2, r5, #2
 801470e:	f101 0518 	add.w	r5, r1, #24
 8014712:	18e0      	adds	r0, r4, r3
 8014714:	ed94 4a00 	vldr	s8, [r4]
 8014718:	edd4 3a01 	vldr	s7, [r4, #4]
 801471c:	46a6      	mov	lr, r4
 801471e:	edd0 6a00 	vldr	s13, [r0]
 8014722:	18c7      	adds	r7, r0, r3
 8014724:	edd0 7a01 	vldr	s15, [r0, #4]
 8014728:	46a0      	mov	r8, r4
 801472a:	ee76 5a26 	vadd.f32	s11, s12, s13
 801472e:	edd7 4a00 	vldr	s9, [r7]
 8014732:	9402      	str	r4, [sp, #8]
 8014734:	4604      	mov	r4, r0
 8014736:	9507      	str	r5, [sp, #28]
 8014738:	4605      	mov	r5, r0
 801473a:	ee75 2a84 	vadd.f32	s5, s11, s8
 801473e:	900a      	str	r0, [sp, #40]	@ 0x28
 8014740:	9801      	ldr	r0, [sp, #4]
 8014742:	ee76 6a66 	vsub.f32	s13, s12, s13
 8014746:	ee37 6a27 	vadd.f32	s12, s14, s15
 801474a:	ed97 5a01 	vldr	s10, [r7, #4]
 801474e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8014752:	46bc      	mov	ip, r7
 8014754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014758:	9605      	str	r6, [sp, #20]
 801475a:	ee36 7a63 	vsub.f32	s14, s12, s7
 801475e:	9703      	str	r7, [sp, #12]
 8014760:	ee12 9a90 	vmov	r9, s5
 8014764:	ee33 3aa6 	vadd.f32	s6, s7, s13
 8014768:	ee75 5ac4 	vsub.f32	s11, s11, s8
 801476c:	1f3e      	subs	r6, r7, #4
 801476e:	f840 9b08 	str.w	r9, [r0], #8
 8014772:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8014776:	edde 2a01 	vldr	s5, [lr, #4]
 801477a:	ee77 3ac4 	vsub.f32	s7, s15, s8
 801477e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014782:	ed9c 4a01 	vldr	s8, [ip, #4]
 8014786:	ee36 6a22 	vadd.f32	s12, s12, s5
 801478a:	9001      	str	r0, [sp, #4]
 801478c:	ee37 7a45 	vsub.f32	s14, s14, s10
 8014790:	9804      	ldr	r0, [sp, #16]
 8014792:	ee75 6a26 	vadd.f32	s13, s10, s13
 8014796:	f1ae 0704 	sub.w	r7, lr, #4
 801479a:	ee36 6a04 	vadd.f32	s12, s12, s8
 801479e:	ee33 4a45 	vsub.f32	s8, s6, s10
 80147a2:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80147a6:	ee33 5aa4 	vadd.f32	s10, s7, s9
 80147aa:	ed80 6a01 	vstr	s12, [r0, #4]
 80147ae:	ee14 9a10 	vmov	r9, s8
 80147b2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80147b6:	f848 9b08 	str.w	r9, [r8], #8
 80147ba:	ed8e 5a01 	vstr	s10, [lr, #4]
 80147be:	ee15 ea90 	vmov	lr, s11
 80147c2:	f844 eb08 	str.w	lr, [r4], #8
 80147c6:	ee16 ea90 	vmov	lr, s13
 80147ca:	9408      	str	r4, [sp, #32]
 80147cc:	462c      	mov	r4, r5
 80147ce:	ed85 7a01 	vstr	s14, [r5, #4]
 80147d2:	9d03      	ldr	r5, [sp, #12]
 80147d4:	f84c eb08 	str.w	lr, [ip], #8
 80147d8:	edc5 7a01 	vstr	s15, [r5, #4]
 80147dc:	0855      	lsrs	r5, r2, #1
 80147de:	9509      	str	r5, [sp, #36]	@ 0x24
 80147e0:	f000 8130 	beq.w	8014a44 <arm_cfft_radix8by4_f32+0x36c>
 80147e4:	9804      	ldr	r0, [sp, #16]
 80147e6:	3b08      	subs	r3, #8
 80147e8:	46ab      	mov	fp, r5
 80147ea:	f1a4 020c 	sub.w	r2, r4, #12
 80147ee:	f100 0510 	add.w	r5, r0, #16
 80147f2:	f101 0920 	add.w	r9, r1, #32
 80147f6:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 80147fa:	f8dd a014 	ldr.w	sl, [sp, #20]
 80147fe:	4433      	add	r3, r6
 8014800:	3410      	adds	r4, #16
 8014802:	4660      	mov	r0, ip
 8014804:	4641      	mov	r1, r8
 8014806:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 801480a:	ed54 6a02 	vldr	s13, [r4, #-8]
 801480e:	f1bb 0b01 	subs.w	fp, fp, #1
 8014812:	ed55 5a02 	vldr	s11, [r5, #-8]
 8014816:	f10a 0a08 	add.w	sl, sl, #8
 801481a:	edd1 7a00 	vldr	s15, [r1]
 801481e:	f105 0508 	add.w	r5, r5, #8
 8014822:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8014826:	edd0 2a00 	vldr	s5, [r0]
 801482a:	ed14 7a01 	vldr	s14, [r4, #-4]
 801482e:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8014832:	ed55 6a03 	vldr	s13, [r5, #-12]
 8014836:	f1a2 0208 	sub.w	r2, r2, #8
 801483a:	ee73 4aa7 	vadd.f32	s9, s7, s15
 801483e:	ed90 2a01 	vldr	s4, [r0, #4]
 8014842:	ee36 5a87 	vadd.f32	s10, s13, s14
 8014846:	ed91 6a01 	vldr	s12, [r1, #4]
 801484a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801484e:	f109 0910 	add.w	r9, r9, #16
 8014852:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8014856:	f104 0408 	add.w	r4, r4, #8
 801485a:	ee73 3ae7 	vsub.f32	s7, s7, s15
 801485e:	f10e 0e18 	add.w	lr, lr, #24
 8014862:	ee37 3a67 	vsub.f32	s6, s14, s15
 8014866:	f1a3 0308 	sub.w	r3, r3, #8
 801486a:	ed45 6a04 	vstr	s13, [r5, #-16]
 801486e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014872:	edd1 6a01 	vldr	s13, [r1, #4]
 8014876:	ee76 1a25 	vadd.f32	s3, s12, s11
 801487a:	edd0 4a01 	vldr	s9, [r0, #4]
 801487e:	ee33 3a22 	vadd.f32	s6, s6, s5
 8014882:	ee75 6a26 	vadd.f32	s13, s10, s13
 8014886:	ee35 5a46 	vsub.f32	s10, s10, s12
 801488a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801488e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8014892:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8014896:	ee35 5a42 	vsub.f32	s10, s10, s4
 801489a:	ed45 6a03 	vstr	s13, [r5, #-12]
 801489e:	ee32 2a06 	vadd.f32	s4, s4, s12
 80148a2:	edd6 7a00 	vldr	s15, [r6]
 80148a6:	ee73 3ae2 	vsub.f32	s7, s7, s5
 80148aa:	ed97 1a00 	vldr	s2, [r7]
 80148ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 80148b2:	ed92 8a04 	vldr	s16, [r2, #16]
 80148b6:	ee71 8a27 	vadd.f32	s17, s2, s15
 80148ba:	ed93 aa04 	vldr	s20, [r3, #16]
 80148be:	ed16 7a01 	vldr	s14, [r6, #-4]
 80148c2:	ee71 7a67 	vsub.f32	s15, s2, s15
 80148c6:	ed57 0a01 	vldr	s1, [r7, #-4]
 80148ca:	ee38 1a4a 	vsub.f32	s2, s16, s20
 80148ce:	ee38 6a88 	vadd.f32	s12, s17, s16
 80148d2:	edd3 9a03 	vldr	s19, [r3, #12]
 80148d6:	ee30 0a87 	vadd.f32	s0, s1, s14
 80148da:	ed92 9a03 	vldr	s18, [r2, #12]
 80148de:	ee78 5ac8 	vsub.f32	s11, s17, s16
 80148e2:	ee3a 6a06 	vadd.f32	s12, s20, s12
 80148e6:	ee30 7ac7 	vsub.f32	s14, s1, s14
 80148ea:	ee37 4ac9 	vsub.f32	s8, s15, s18
 80148ee:	ee16 ca10 	vmov	ip, s12
 80148f2:	ee30 6a49 	vsub.f32	s12, s0, s18
 80148f6:	ee71 4a07 	vadd.f32	s9, s2, s14
 80148fa:	f847 c908 	str.w	ip, [r7], #-8
 80148fe:	ee34 4a29 	vadd.f32	s8, s8, s19
 8014902:	edd2 8a03 	vldr	s17, [r2, #12]
 8014906:	ee39 9ac9 	vsub.f32	s18, s19, s18
 801490a:	ed93 8a03 	vldr	s16, [r3, #12]
 801490e:	ee71 0a47 	vsub.f32	s1, s2, s14
 8014912:	ee30 0a28 	vadd.f32	s0, s0, s17
 8014916:	ee39 1a67 	vsub.f32	s2, s18, s15
 801491a:	ee36 6a69 	vsub.f32	s12, s12, s19
 801491e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8014922:	ee75 5aca 	vsub.f32	s11, s11, s20
 8014926:	ed87 0a01 	vstr	s0, [r7, #4]
 801492a:	ed1a 0a04 	vldr	s0, [sl, #-16]
 801492e:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8014932:	ee21 8a80 	vmul.f32	s16, s3, s0
 8014936:	ee23 7a26 	vmul.f32	s14, s6, s13
 801493a:	ee64 7a26 	vmul.f32	s15, s8, s13
 801493e:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8014942:	ee24 4a00 	vmul.f32	s8, s8, s0
 8014946:	ee23 3a00 	vmul.f32	s6, s6, s0
 801494a:	ee64 6aa6 	vmul.f32	s13, s9, s13
 801494e:	ee24 0a80 	vmul.f32	s0, s9, s0
 8014952:	ee38 7a07 	vadd.f32	s14, s16, s14
 8014956:	ee76 6a84 	vadd.f32	s13, s13, s8
 801495a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801495e:	ee33 3a61 	vsub.f32	s6, s6, s3
 8014962:	ee17 ca10 	vmov	ip, s14
 8014966:	f841 cb08 	str.w	ip, [r1], #8
 801496a:	ed01 3a01 	vstr	s6, [r1, #-4]
 801496e:	ed82 0a04 	vstr	s0, [r2, #16]
 8014972:	edc2 6a03 	vstr	s13, [r2, #12]
 8014976:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 801497a:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 801497e:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8014982:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8014986:	ee65 4a27 	vmul.f32	s9, s10, s15
 801498a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801498e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8014992:	ee66 7a27 	vmul.f32	s15, s12, s15
 8014996:	ee25 5a26 	vmul.f32	s10, s10, s13
 801499a:	ee66 6a26 	vmul.f32	s13, s12, s13
 801499e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80149a2:	ee34 6a24 	vadd.f32	s12, s8, s9
 80149a6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80149aa:	ee35 5a63 	vsub.f32	s10, s10, s7
 80149ae:	ee17 ca90 	vmov	ip, s15
 80149b2:	ed04 6a04 	vstr	s12, [r4, #-16]
 80149b6:	ed04 5a03 	vstr	s10, [r4, #-12]
 80149ba:	f846 c908 	str.w	ip, [r6], #-8
 80149be:	edc6 6a01 	vstr	s13, [r6, #4]
 80149c2:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 80149c6:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 80149ca:	ee62 5a27 	vmul.f32	s11, s4, s15
 80149ce:	ee22 6a87 	vmul.f32	s12, s5, s14
 80149d2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80149d6:	ee62 2aa7 	vmul.f32	s5, s5, s15
 80149da:	ee61 6a07 	vmul.f32	s13, s2, s14
 80149de:	ee20 7a87 	vmul.f32	s14, s1, s14
 80149e2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80149e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80149ea:	ee35 6a86 	vadd.f32	s12, s11, s12
 80149ee:	ee72 2ac2 	vsub.f32	s5, s5, s4
 80149f2:	ee76 0ae0 	vsub.f32	s1, s13, s1
 80149f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149fa:	ee16 ca10 	vmov	ip, s12
 80149fe:	f840 cb08 	str.w	ip, [r0], #8
 8014a02:	ed40 2a01 	vstr	s5, [r0, #-4]
 8014a06:	edc3 0a04 	vstr	s1, [r3, #16]
 8014a0a:	edc3 7a03 	vstr	s15, [r3, #12]
 8014a0e:	f47f aefc 	bne.w	801480a <arm_cfft_radix8by4_f32+0x132>
 8014a12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014a14:	9805      	ldr	r0, [sp, #20]
 8014a16:	00cb      	lsls	r3, r1, #3
 8014a18:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 8014a1c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8014a20:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8014a24:	4498      	add	r8, r3
 8014a26:	449c      	add	ip, r3
 8014a28:	9105      	str	r1, [sp, #20]
 8014a2a:	9901      	ldr	r1, [sp, #4]
 8014a2c:	4419      	add	r1, r3
 8014a2e:	9101      	str	r1, [sp, #4]
 8014a30:	9906      	ldr	r1, [sp, #24]
 8014a32:	4419      	add	r1, r3
 8014a34:	9106      	str	r1, [sp, #24]
 8014a36:	9908      	ldr	r1, [sp, #32]
 8014a38:	4419      	add	r1, r3
 8014a3a:	9b07      	ldr	r3, [sp, #28]
 8014a3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014a40:	9108      	str	r1, [sp, #32]
 8014a42:	9307      	str	r3, [sp, #28]
 8014a44:	9a01      	ldr	r2, [sp, #4]
 8014a46:	2304      	movs	r3, #4
 8014a48:	9e08      	ldr	r6, [sp, #32]
 8014a4a:	edd2 6a00 	vldr	s13, [r2]
 8014a4e:	ed96 4a00 	vldr	s8, [r6]
 8014a52:	edd8 7a00 	vldr	s15, [r8]
 8014a56:	ee36 6a84 	vadd.f32	s12, s13, s8
 8014a5a:	eddc 2a00 	vldr	s5, [ip]
 8014a5e:	ed96 7a01 	vldr	s14, [r6, #4]
 8014a62:	ee36 4ac4 	vsub.f32	s8, s13, s8
 8014a66:	edd2 6a01 	vldr	s13, [r2, #4]
 8014a6a:	ee76 4a27 	vadd.f32	s9, s12, s15
 8014a6e:	ed98 2a01 	vldr	s4, [r8, #4]
 8014a72:	ee76 5a87 	vadd.f32	s11, s13, s14
 8014a76:	ed9c 5a01 	vldr	s10, [ip, #4]
 8014a7a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8014a7e:	9d05      	ldr	r5, [sp, #20]
 8014a80:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8014a84:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8014a88:	ee72 3a04 	vadd.f32	s7, s4, s8
 8014a8c:	9804      	ldr	r0, [sp, #16]
 8014a8e:	ee77 4a67 	vsub.f32	s9, s14, s15
 8014a92:	4621      	mov	r1, r4
 8014a94:	edc2 6a00 	vstr	s13, [r2]
 8014a98:	ee76 6a67 	vsub.f32	s13, s12, s15
 8014a9c:	ed98 3a01 	vldr	s6, [r8, #4]
 8014aa0:	ee35 6ac2 	vsub.f32	s12, s11, s4
 8014aa4:	eddc 1a01 	vldr	s3, [ip, #4]
 8014aa8:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8014aac:	ee35 3a83 	vadd.f32	s6, s11, s6
 8014ab0:	ee34 4a42 	vsub.f32	s8, s8, s4
 8014ab4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8014ab8:	ee73 5a21 	vadd.f32	s11, s6, s3
 8014abc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014ac0:	ee36 6a45 	vsub.f32	s12, s12, s10
 8014ac4:	edc2 5a01 	vstr	s11, [r2, #4]
 8014ac8:	ee35 5a04 	vadd.f32	s10, s10, s8
 8014acc:	9a06      	ldr	r2, [sp, #24]
 8014ace:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8014ad2:	edd2 7a00 	vldr	s15, [r2]
 8014ad6:	edd2 5a01 	vldr	s11, [r2, #4]
 8014ada:	ee23 4aa7 	vmul.f32	s8, s7, s15
 8014ade:	ee63 3aa5 	vmul.f32	s7, s7, s11
 8014ae2:	ee64 5aa5 	vmul.f32	s11, s9, s11
 8014ae6:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8014aea:	ee77 7a62 	vsub.f32	s15, s14, s5
 8014aee:	ee74 5a25 	vadd.f32	s11, s8, s11
 8014af2:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8014af6:	edc8 5a00 	vstr	s11, [r8]
 8014afa:	edc8 4a01 	vstr	s9, [r8, #4]
 8014afe:	edd5 4a01 	vldr	s9, [r5, #4]
 8014b02:	ed95 7a00 	vldr	s14, [r5]
 8014b06:	9d07      	ldr	r5, [sp, #28]
 8014b08:	ee66 5a87 	vmul.f32	s11, s13, s14
 8014b0c:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8014b10:	ee26 7a07 	vmul.f32	s14, s12, s14
 8014b14:	ee26 6a24 	vmul.f32	s12, s12, s9
 8014b18:	ee77 6a66 	vsub.f32	s13, s14, s13
 8014b1c:	ee35 6a86 	vadd.f32	s12, s11, s12
 8014b20:	edc6 6a01 	vstr	s13, [r6, #4]
 8014b24:	ed86 6a00 	vstr	s12, [r6]
 8014b28:	ed95 6a01 	vldr	s12, [r5, #4]
 8014b2c:	ed95 7a00 	vldr	s14, [r5]
 8014b30:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014b32:	ee65 6a07 	vmul.f32	s13, s10, s14
 8014b36:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014b3a:	ee25 5a06 	vmul.f32	s10, s10, s12
 8014b3e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014b42:	ee37 5a45 	vsub.f32	s10, s14, s10
 8014b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014b4a:	ed8c 5a01 	vstr	s10, [ip, #4]
 8014b4e:	edcc 7a00 	vstr	s15, [ip]
 8014b52:	6872      	ldr	r2, [r6, #4]
 8014b54:	f000 f8d4 	bl	8014d00 <arm_radix8_butterfly_f32>
 8014b58:	9802      	ldr	r0, [sp, #8]
 8014b5a:	4621      	mov	r1, r4
 8014b5c:	6872      	ldr	r2, [r6, #4]
 8014b5e:	2304      	movs	r3, #4
 8014b60:	f000 f8ce 	bl	8014d00 <arm_radix8_butterfly_f32>
 8014b64:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8014b66:	4621      	mov	r1, r4
 8014b68:	6872      	ldr	r2, [r6, #4]
 8014b6a:	2304      	movs	r3, #4
 8014b6c:	f000 f8c8 	bl	8014d00 <arm_radix8_butterfly_f32>
 8014b70:	9803      	ldr	r0, [sp, #12]
 8014b72:	4621      	mov	r1, r4
 8014b74:	6872      	ldr	r2, [r6, #4]
 8014b76:	2304      	movs	r3, #4
 8014b78:	b00f      	add	sp, #60	@ 0x3c
 8014b7a:	ecbd 8b06 	vpop	{d8-d10}
 8014b7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b82:	f000 b8bd 	b.w	8014d00 <arm_radix8_butterfly_f32>
 8014b86:	bf00      	nop

08014b88 <arm_cfft_f32>:
 8014b88:	2a01      	cmp	r2, #1
 8014b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b8e:	4606      	mov	r6, r0
 8014b90:	4617      	mov	r7, r2
 8014b92:	460c      	mov	r4, r1
 8014b94:	4698      	mov	r8, r3
 8014b96:	8805      	ldrh	r5, [r0, #0]
 8014b98:	d053      	beq.n	8014c42 <arm_cfft_f32+0xba>
 8014b9a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8014b9e:	d04b      	beq.n	8014c38 <arm_cfft_f32+0xb0>
 8014ba0:	d916      	bls.n	8014bd0 <arm_cfft_f32+0x48>
 8014ba2:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8014ba6:	d01a      	beq.n	8014bde <arm_cfft_f32+0x56>
 8014ba8:	d95a      	bls.n	8014c60 <arm_cfft_f32+0xd8>
 8014baa:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8014bae:	d043      	beq.n	8014c38 <arm_cfft_f32+0xb0>
 8014bb0:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8014bb4:	d105      	bne.n	8014bc2 <arm_cfft_f32+0x3a>
 8014bb6:	4620      	mov	r0, r4
 8014bb8:	4629      	mov	r1, r5
 8014bba:	6872      	ldr	r2, [r6, #4]
 8014bbc:	2301      	movs	r3, #1
 8014bbe:	f000 f89f 	bl	8014d00 <arm_radix8_butterfly_f32>
 8014bc2:	f1b8 0f00 	cmp.w	r8, #0
 8014bc6:	d111      	bne.n	8014bec <arm_cfft_f32+0x64>
 8014bc8:	2f01      	cmp	r7, #1
 8014bca:	d016      	beq.n	8014bfa <arm_cfft_f32+0x72>
 8014bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bd0:	2d20      	cmp	r5, #32
 8014bd2:	d031      	beq.n	8014c38 <arm_cfft_f32+0xb0>
 8014bd4:	d948      	bls.n	8014c68 <arm_cfft_f32+0xe0>
 8014bd6:	2d40      	cmp	r5, #64	@ 0x40
 8014bd8:	d0ed      	beq.n	8014bb6 <arm_cfft_f32+0x2e>
 8014bda:	2d80      	cmp	r5, #128	@ 0x80
 8014bdc:	d1f1      	bne.n	8014bc2 <arm_cfft_f32+0x3a>
 8014bde:	4630      	mov	r0, r6
 8014be0:	4621      	mov	r1, r4
 8014be2:	f7ff fca7 	bl	8014534 <arm_cfft_radix8by2_f32>
 8014be6:	f1b8 0f00 	cmp.w	r8, #0
 8014bea:	d0ed      	beq.n	8014bc8 <arm_cfft_f32+0x40>
 8014bec:	4620      	mov	r0, r4
 8014bee:	89b1      	ldrh	r1, [r6, #12]
 8014bf0:	68b2      	ldr	r2, [r6, #8]
 8014bf2:	f7eb fb8d 	bl	8000310 <arm_bitreversal_32>
 8014bf6:	2f01      	cmp	r7, #1
 8014bf8:	d1e8      	bne.n	8014bcc <arm_cfft_f32+0x44>
 8014bfa:	ee07 5a90 	vmov	s15, r5
 8014bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014c02:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014c06:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8014c0a:	2d00      	cmp	r5, #0
 8014c0c:	d0de      	beq.n	8014bcc <arm_cfft_f32+0x44>
 8014c0e:	f104 0108 	add.w	r1, r4, #8
 8014c12:	2300      	movs	r3, #0
 8014c14:	ed11 7a02 	vldr	s14, [r1, #-8]
 8014c18:	3301      	adds	r3, #1
 8014c1a:	ed51 7a01 	vldr	s15, [r1, #-4]
 8014c1e:	3108      	adds	r1, #8
 8014c20:	429d      	cmp	r5, r3
 8014c22:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014c26:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8014c2a:	ed01 7a04 	vstr	s14, [r1, #-16]
 8014c2e:	ed41 7a03 	vstr	s15, [r1, #-12]
 8014c32:	d1ef      	bne.n	8014c14 <arm_cfft_f32+0x8c>
 8014c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c38:	4630      	mov	r0, r6
 8014c3a:	4621      	mov	r1, r4
 8014c3c:	f7ff fd4c 	bl	80146d8 <arm_cfft_radix8by4_f32>
 8014c40:	e7bf      	b.n	8014bc2 <arm_cfft_f32+0x3a>
 8014c42:	b1a5      	cbz	r5, 8014c6e <arm_cfft_f32+0xe6>
 8014c44:	f101 030c 	add.w	r3, r1, #12
 8014c48:	2200      	movs	r2, #0
 8014c4a:	ed53 7a02 	vldr	s15, [r3, #-8]
 8014c4e:	3201      	adds	r2, #1
 8014c50:	3308      	adds	r3, #8
 8014c52:	eef1 7a67 	vneg.f32	s15, s15
 8014c56:	4295      	cmp	r5, r2
 8014c58:	ed43 7a04 	vstr	s15, [r3, #-16]
 8014c5c:	d1f5      	bne.n	8014c4a <arm_cfft_f32+0xc2>
 8014c5e:	e79c      	b.n	8014b9a <arm_cfft_f32+0x12>
 8014c60:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8014c64:	d0a7      	beq.n	8014bb6 <arm_cfft_f32+0x2e>
 8014c66:	e7ac      	b.n	8014bc2 <arm_cfft_f32+0x3a>
 8014c68:	2d10      	cmp	r5, #16
 8014c6a:	d0b8      	beq.n	8014bde <arm_cfft_f32+0x56>
 8014c6c:	e7a9      	b.n	8014bc2 <arm_cfft_f32+0x3a>
 8014c6e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8014c72:	d896      	bhi.n	8014ba2 <arm_cfft_f32+0x1a>
 8014c74:	e7ac      	b.n	8014bd0 <arm_cfft_f32+0x48>
 8014c76:	bf00      	nop

08014c78 <arm_sin_f32>:
 8014c78:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014c7c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8014cf4 <arm_sin_f32+0x7c>
 8014c80:	ee20 7a07 	vmul.f32	s14, s0, s14
 8014c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c88:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8014c8c:	d42c      	bmi.n	8014ce8 <arm_sin_f32+0x70>
 8014c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c92:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8014cf8 <arm_sin_f32+0x80>
 8014c96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014c9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014c9e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ca6:	db01      	blt.n	8014cac <arm_sin_f32+0x34>
 8014ca8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014cac:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8014cb0:	4a12      	ldr	r2, [pc, #72]	@ (8014cfc <arm_sin_f32+0x84>)
 8014cb2:	ee17 3a10 	vmov	r3, s14
 8014cb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014cbe:	ee06 3a90 	vmov	s13, r3
 8014cc2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8014cc6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8014cca:	ed91 0a00 	vldr	s0, [r1]
 8014cce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014cd2:	edd1 6a01 	vldr	s13, [r1, #4]
 8014cd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014cda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014cde:	ee27 0a00 	vmul.f32	s0, s14, s0
 8014ce2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014ce6:	4770      	bx	lr
 8014ce8:	ee17 3a90 	vmov	r3, s15
 8014cec:	3b01      	subs	r3, #1
 8014cee:	ee07 3a90 	vmov	s15, r3
 8014cf2:	e7cc      	b.n	8014c8e <arm_sin_f32+0x16>
 8014cf4:	3e22f983 	.word	0x3e22f983
 8014cf8:	44000000 	.word	0x44000000
 8014cfc:	08023e28 	.word	0x08023e28

08014d00 <arm_radix8_butterfly_f32>:
 8014d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d04:	469e      	mov	lr, r3
 8014d06:	1d03      	adds	r3, r0, #4
 8014d08:	4683      	mov	fp, r0
 8014d0a:	468a      	mov	sl, r1
 8014d0c:	4688      	mov	r8, r1
 8014d0e:	469c      	mov	ip, r3
 8014d10:	ed2d 8b10 	vpush	{d8-d15}
 8014d14:	ed9f 9ac4 	vldr	s18, [pc, #784]	@ 8015028 <arm_radix8_butterfly_f32+0x328>
 8014d18:	b09f      	sub	sp, #124	@ 0x7c
 8014d1a:	921c      	str	r2, [sp, #112]	@ 0x70
 8014d1c:	931d      	str	r3, [sp, #116]	@ 0x74
 8014d1e:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 8014d22:	f04f 0900 	mov.w	r9, #0
 8014d26:	461a      	mov	r2, r3
 8014d28:	930e      	str	r3, [sp, #56]	@ 0x38
 8014d2a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8014d2e:	0051      	lsls	r1, r2, #1
 8014d30:	4608      	mov	r0, r1
 8014d32:	9103      	str	r1, [sp, #12]
 8014d34:	00d1      	lsls	r1, r2, #3
 8014d36:	1885      	adds	r5, r0, r2
 8014d38:	0110      	lsls	r0, r2, #4
 8014d3a:	eb0b 0601 	add.w	r6, fp, r1
 8014d3e:	9101      	str	r1, [sp, #4]
 8014d40:	18ac      	adds	r4, r5, r2
 8014d42:	9002      	str	r0, [sp, #8]
 8014d44:	1877      	adds	r7, r6, r1
 8014d46:	4611      	mov	r1, r2
 8014d48:	4422      	add	r2, r4
 8014d4a:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8014d4e:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8014d52:	1850      	adds	r0, r2, r1
 8014d54:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8014d58:	4401      	add	r1, r0
 8014d5a:	3204      	adds	r2, #4
 8014d5c:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8014d60:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 8014d64:	3104      	adds	r1, #4
 8014d66:	ed1c 7a01 	vldr	s14, [ip, #-4]
 8014d6a:	44c1      	add	r9, r8
 8014d6c:	edd4 6a00 	vldr	s13, [r4]
 8014d70:	ed97 6a00 	vldr	s12, [r7]
 8014d74:	45ca      	cmp	sl, r9
 8014d76:	edd0 7a00 	vldr	s15, [r0]
 8014d7a:	ee37 5a66 	vsub.f32	s10, s14, s13
 8014d7e:	edd6 5a00 	vldr	s11, [r6]
 8014d82:	ee37 2a26 	vadd.f32	s4, s14, s13
 8014d86:	ee76 2a67 	vsub.f32	s5, s12, s15
 8014d8a:	edd5 6a00 	vldr	s13, [r5]
 8014d8e:	ed12 7a01 	vldr	s14, [r2, #-4]
 8014d92:	ee76 4a27 	vadd.f32	s9, s12, s15
 8014d96:	ed11 6a01 	vldr	s12, [r1, #-4]
 8014d9a:	ee75 1a87 	vadd.f32	s3, s11, s14
 8014d9e:	ee36 4a86 	vadd.f32	s8, s13, s12
 8014da2:	ee72 7a24 	vadd.f32	s15, s4, s9
 8014da6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8014daa:	ee76 5ac6 	vsub.f32	s11, s13, s12
 8014dae:	ee31 6a84 	vadd.f32	s12, s3, s8
 8014db2:	ee32 2a64 	vsub.f32	s4, s4, s9
 8014db6:	ee77 6a65 	vsub.f32	s13, s14, s11
 8014dba:	ee77 4a86 	vadd.f32	s9, s15, s12
 8014dbe:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014dc2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8014dc6:	ed4c 4a01 	vstr	s9, [ip, #-4]
 8014dca:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8014dce:	edc4 7a00 	vstr	s15, [r4]
 8014dd2:	ee66 6a89 	vmul.f32	s13, s13, s18
 8014dd6:	edd6 5a01 	vldr	s11, [r6, #4]
 8014dda:	ee27 6a09 	vmul.f32	s12, s14, s18
 8014dde:	edd5 3a01 	vldr	s7, [r5, #4]
 8014de2:	ed92 4a00 	vldr	s8, [r2]
 8014de6:	ee35 1a26 	vadd.f32	s2, s10, s13
 8014dea:	edd1 4a00 	vldr	s9, [r1]
 8014dee:	ee75 6a66 	vsub.f32	s13, s10, s13
 8014df2:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8014df6:	ed94 0a01 	vldr	s0, [r4, #4]
 8014dfa:	ee73 7ae4 	vsub.f32	s15, s7, s9
 8014dfe:	ed9c 7a00 	vldr	s14, [ip]
 8014e02:	edd0 0a01 	vldr	s1, [r0, #4]
 8014e06:	ee35 4a84 	vadd.f32	s8, s11, s8
 8014e0a:	ed97 5a01 	vldr	s10, [r7, #4]
 8014e0e:	ee73 4aa4 	vadd.f32	s9, s7, s9
 8014e12:	ee73 5a27 	vadd.f32	s11, s6, s15
 8014e16:	ee77 3a00 	vadd.f32	s7, s14, s0
 8014e1a:	ee33 3a67 	vsub.f32	s6, s6, s15
 8014e1e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8014e22:	ee35 0a20 	vadd.f32	s0, s10, s1
 8014e26:	ee63 7a09 	vmul.f32	s15, s6, s18
 8014e2a:	ee35 5a60 	vsub.f32	s10, s10, s1
 8014e2e:	ee33 3a80 	vadd.f32	s6, s7, s0
 8014e32:	ee74 0a24 	vadd.f32	s1, s8, s9
 8014e36:	ee65 5a89 	vmul.f32	s11, s11, s18
 8014e3a:	ee74 4a64 	vsub.f32	s9, s8, s9
 8014e3e:	ee33 4ac0 	vsub.f32	s8, s7, s0
 8014e42:	ee75 3a25 	vadd.f32	s7, s10, s11
 8014e46:	ee75 5a65 	vsub.f32	s11, s10, s11
 8014e4a:	ee37 5a27 	vadd.f32	s10, s14, s15
 8014e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014e52:	ee32 7a86 	vadd.f32	s14, s5, s12
 8014e56:	ee32 6ac6 	vsub.f32	s12, s5, s12
 8014e5a:	ee73 2a20 	vadd.f32	s5, s6, s1
 8014e5e:	ee33 3a60 	vsub.f32	s6, s6, s1
 8014e62:	ee72 0a24 	vadd.f32	s1, s4, s9
 8014e66:	edcc 2a00 	vstr	s5, [ip]
 8014e6a:	ee72 4a64 	vsub.f32	s9, s4, s9
 8014e6e:	ed84 3a01 	vstr	s6, [r4, #4]
 8014e72:	ee74 2a61 	vsub.f32	s5, s8, s3
 8014e76:	ee31 3a23 	vadd.f32	s6, s2, s7
 8014e7a:	edc7 0a00 	vstr	s1, [r7]
 8014e7e:	ee31 1a63 	vsub.f32	s2, s2, s7
 8014e82:	edc0 4a00 	vstr	s9, [r0]
 8014e86:	ee76 3aa5 	vadd.f32	s7, s13, s11
 8014e8a:	edc7 2a01 	vstr	s5, [r7, #4]
 8014e8e:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8014e92:	441c      	add	r4, r3
 8014e94:	ee75 5a47 	vsub.f32	s11, s10, s14
 8014e98:	449c      	add	ip, r3
 8014e9a:	ee35 5a07 	vadd.f32	s10, s10, s14
 8014e9e:	441f      	add	r7, r3
 8014ea0:	ee37 7ac6 	vsub.f32	s14, s15, s12
 8014ea4:	ee34 4a21 	vadd.f32	s8, s8, s3
 8014ea8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8014eac:	ed80 4a01 	vstr	s8, [r0, #4]
 8014eb0:	4418      	add	r0, r3
 8014eb2:	ed86 3a00 	vstr	s6, [r6]
 8014eb6:	ed01 1a01 	vstr	s2, [r1, #-4]
 8014eba:	ed42 3a01 	vstr	s7, [r2, #-4]
 8014ebe:	edc5 6a00 	vstr	s13, [r5]
 8014ec2:	edc6 5a01 	vstr	s11, [r6, #4]
 8014ec6:	441e      	add	r6, r3
 8014ec8:	ed81 5a00 	vstr	s10, [r1]
 8014ecc:	4419      	add	r1, r3
 8014ece:	ed82 7a00 	vstr	s14, [r2]
 8014ed2:	441a      	add	r2, r3
 8014ed4:	edc5 7a01 	vstr	s15, [r5, #4]
 8014ed8:	441d      	add	r5, r3
 8014eda:	f63f af44 	bhi.w	8014d66 <arm_radix8_butterfly_f32+0x66>
 8014ede:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8014ee0:	2f07      	cmp	r7, #7
 8014ee2:	f240 81e8 	bls.w	80152b6 <arm_radix8_butterfly_f32+0x5b6>
 8014ee6:	9903      	ldr	r1, [sp, #12]
 8014ee8:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 8014eec:	9e01      	ldr	r6, [sp, #4]
 8014eee:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 8014ef2:	19ca      	adds	r2, r1, r7
 8014ef4:	1c4c      	adds	r4, r1, #1
 8014ef6:	eb05 010e 	add.w	r1, r5, lr
 8014efa:	00ed      	lsls	r5, r5, #3
 8014efc:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8014f00:	3608      	adds	r6, #8
 8014f02:	950f      	str	r5, [sp, #60]	@ 0x3c
 8014f04:	eb01 050e 	add.w	r5, r1, lr
 8014f08:	00c9      	lsls	r1, r1, #3
 8014f0a:	443c      	add	r4, r7
 8014f0c:	9618      	str	r6, [sp, #96]	@ 0x60
 8014f0e:	00ee      	lsls	r6, r5, #3
 8014f10:	460f      	mov	r7, r1
 8014f12:	9114      	str	r1, [sp, #80]	@ 0x50
 8014f14:	9902      	ldr	r1, [sp, #8]
 8014f16:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8014f1a:	9611      	str	r6, [sp, #68]	@ 0x44
 8014f1c:	00c0      	lsls	r0, r0, #3
 8014f1e:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8014f20:	3108      	adds	r1, #8
 8014f22:	3404      	adds	r4, #4
 8014f24:	f04f 0901 	mov.w	r9, #1
 8014f28:	9119      	str	r1, [sp, #100]	@ 0x64
 8014f2a:	eb05 010e 	add.w	r1, r5, lr
 8014f2e:	4635      	mov	r5, r6
 8014f30:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014f32:	9301      	str	r3, [sp, #4]
 8014f34:	443d      	add	r5, r7
 8014f36:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8014f38:	9507      	str	r5, [sp, #28]
 8014f3a:	eb01 050e 	add.w	r5, r1, lr
 8014f3e:	00c9      	lsls	r1, r1, #3
 8014f40:	19f7      	adds	r7, r6, r7
 8014f42:	00ed      	lsls	r5, r5, #3
 8014f44:	9110      	str	r1, [sp, #64]	@ 0x40
 8014f46:	00d1      	lsls	r1, r2, #3
 8014f48:	970a      	str	r7, [sp, #40]	@ 0x28
 8014f4a:	462f      	mov	r7, r5
 8014f4c:	9515      	str	r5, [sp, #84]	@ 0x54
 8014f4e:	0112      	lsls	r2, r2, #4
 8014f50:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8014f52:	19f4      	adds	r4, r6, r7
 8014f54:	320c      	adds	r2, #12
 8014f56:	3108      	adds	r1, #8
 8014f58:	1975      	adds	r5, r6, r5
 8014f5a:	9408      	str	r4, [sp, #32]
 8014f5c:	9217      	str	r2, [sp, #92]	@ 0x5c
 8014f5e:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8014f62:	9509      	str	r5, [sp, #36]	@ 0x24
 8014f64:	f100 020c 	add.w	r2, r0, #12
 8014f68:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8014f6a:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8014f6c:	1975      	adds	r5, r6, r5
 8014f6e:	9216      	str	r2, [sp, #88]	@ 0x58
 8014f70:	1932      	adds	r2, r6, r4
 8014f72:	911b      	str	r1, [sp, #108]	@ 0x6c
 8014f74:	9505      	str	r5, [sp, #20]
 8014f76:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8014f7a:	0179      	lsls	r1, r7, #5
 8014f7c:	9204      	str	r2, [sp, #16]
 8014f7e:	1972      	adds	r2, r6, r5
 8014f80:	9412      	str	r4, [sp, #72]	@ 0x48
 8014f82:	9513      	str	r5, [sp, #76]	@ 0x4c
 8014f84:	9206      	str	r2, [sp, #24]
 8014f86:	f101 0208 	add.w	r2, r1, #8
 8014f8a:	921a      	str	r2, [sp, #104]	@ 0x68
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	f102 0108 	add.w	r1, r2, #8
 8014f92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014f94:	46cc      	mov	ip, r9
 8014f96:	460f      	mov	r7, r1
 8014f98:	910c      	str	r1, [sp, #48]	@ 0x30
 8014f9a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014f9c:	eb0b 0e07 	add.w	lr, fp, r7
 8014fa0:	9f04      	ldr	r7, [sp, #16]
 8014fa2:	188e      	adds	r6, r1, r2
 8014fa4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014fa6:	edd7 fa00 	vldr	s31, [r7]
 8014faa:	9f06      	ldr	r7, [sp, #24]
 8014fac:	188d      	adds	r5, r1, r2
 8014fae:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8014fb0:	445e      	add	r6, fp
 8014fb2:	ed97 fa00 	vldr	s30, [r7]
 8014fb6:	445d      	add	r5, fp
 8014fb8:	9f05      	ldr	r7, [sp, #20]
 8014fba:	188c      	adds	r4, r1, r2
 8014fbc:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8014fbe:	edd7 ea00 	vldr	s29, [r7]
 8014fc2:	445c      	add	r4, fp
 8014fc4:	9f07      	ldr	r7, [sp, #28]
 8014fc6:	1888      	adds	r0, r1, r2
 8014fc8:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8014fca:	ed97 ea00 	vldr	s28, [r7]
 8014fce:	4458      	add	r0, fp
 8014fd0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8014fd2:	4411      	add	r1, r2
 8014fd4:	441a      	add	r2, r3
 8014fd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014fd8:	edd7 da00 	vldr	s27, [r7]
 8014fdc:	4459      	add	r1, fp
 8014fde:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8014fe0:	445a      	add	r2, fp
 8014fe2:	930d      	str	r3, [sp, #52]	@ 0x34
 8014fe4:	ed97 da00 	vldr	s26, [r7]
 8014fe8:	9f08      	ldr	r7, [sp, #32]
 8014fea:	edd7 ca00 	vldr	s25, [r7]
 8014fee:	9f04      	ldr	r7, [sp, #16]
 8014ff0:	ed97 ca01 	vldr	s24, [r7, #4]
 8014ff4:	9f06      	ldr	r7, [sp, #24]
 8014ff6:	edd7 ba01 	vldr	s23, [r7, #4]
 8014ffa:	9f05      	ldr	r7, [sp, #20]
 8014ffc:	ed97 ba01 	vldr	s22, [r7, #4]
 8015000:	9f07      	ldr	r7, [sp, #28]
 8015002:	edd7 aa01 	vldr	s21, [r7, #4]
 8015006:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8015008:	ed97 aa01 	vldr	s20, [r7, #4]
 801500c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801500e:	9b01      	ldr	r3, [sp, #4]
 8015010:	edd7 7a01 	vldr	s15, [r7, #4]
 8015014:	9f08      	ldr	r7, [sp, #32]
 8015016:	edcd 7a02 	vstr	s15, [sp, #8]
 801501a:	edd7 7a01 	vldr	s15, [r7, #4]
 801501e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8015020:	edcd 7a03 	vstr	s15, [sp, #12]
 8015024:	e002      	b.n	801502c <arm_radix8_butterfly_f32+0x32c>
 8015026:	bf00      	nop
 8015028:	3f3504f3 	.word	0x3f3504f3
 801502c:	ed90 2a00 	vldr	s4, [r0]
 8015030:	44c4      	add	ip, r8
 8015032:	ed96 7a00 	vldr	s14, [r6]
 8015036:	ed94 8a00 	vldr	s16, [r4]
 801503a:	45e2      	cmp	sl, ip
 801503c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8015040:	ed95 5a00 	vldr	s10, [r5]
 8015044:	ed51 5a01 	vldr	s11, [r1, #-4]
 8015048:	ee38 6a27 	vadd.f32	s12, s16, s15
 801504c:	ed9e 1a00 	vldr	s2, [lr]
 8015050:	ee78 2a67 	vsub.f32	s5, s16, s15
 8015054:	ed17 4a01 	vldr	s8, [r7, #-4]
 8015058:	ee75 3a25 	vadd.f32	s7, s10, s11
 801505c:	ee31 3a07 	vadd.f32	s6, s2, s14
 8015060:	edde 4a01 	vldr	s9, [lr, #4]
 8015064:	ee72 6a04 	vadd.f32	s13, s4, s8
 8015068:	ee75 5a65 	vsub.f32	s11, s10, s11
 801506c:	ee73 1a06 	vadd.f32	s3, s6, s12
 8015070:	ee33 5aa6 	vadd.f32	s10, s7, s13
 8015074:	ee32 4a44 	vsub.f32	s8, s4, s8
 8015078:	ee31 1a47 	vsub.f32	s2, s2, s14
 801507c:	ee31 7a85 	vadd.f32	s14, s3, s10
 8015080:	ee75 7a84 	vadd.f32	s15, s11, s8
 8015084:	ee33 3a46 	vsub.f32	s6, s6, s12
 8015088:	ed8e 7a00 	vstr	s14, [lr]
 801508c:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8015090:	ee67 7a89 	vmul.f32	s15, s15, s18
 8015094:	ed90 2a01 	vldr	s4, [r0, #4]
 8015098:	ed95 7a01 	vldr	s14, [r5, #4]
 801509c:	ee35 4ac4 	vsub.f32	s8, s11, s8
 80150a0:	ed91 6a00 	vldr	s12, [r1]
 80150a4:	ee31 5ac5 	vsub.f32	s10, s3, s10
 80150a8:	edd7 8a00 	vldr	s17, [r7]
 80150ac:	ee32 8ae7 	vsub.f32	s16, s5, s15
 80150b0:	ee72 5aa7 	vadd.f32	s11, s5, s15
 80150b4:	edd2 0a00 	vldr	s1, [r2]
 80150b8:	ee72 6a68 	vsub.f32	s13, s4, s17
 80150bc:	edd6 7a01 	vldr	s15, [r6, #4]
 80150c0:	ee77 2a46 	vsub.f32	s5, s14, s12
 80150c4:	ee37 0a06 	vadd.f32	s0, s14, s12
 80150c8:	ed94 7a01 	vldr	s14, [r4, #4]
 80150cc:	ee32 6a28 	vadd.f32	s12, s4, s17
 80150d0:	ee72 9ae6 	vsub.f32	s19, s5, s13
 80150d4:	ee34 2aa7 	vadd.f32	s4, s9, s15
 80150d8:	ee72 2aa6 	vadd.f32	s5, s5, s13
 80150dc:	ee77 6a20 	vadd.f32	s13, s14, s1
 80150e0:	ee74 4ae7 	vsub.f32	s9, s9, s15
 80150e4:	ee37 7a60 	vsub.f32	s14, s14, s1
 80150e8:	ee24 4a09 	vmul.f32	s8, s8, s18
 80150ec:	ee70 0a06 	vadd.f32	s1, s0, s12
 80150f0:	ee69 7a89 	vmul.f32	s15, s19, s18
 80150f4:	ee62 2a89 	vmul.f32	s5, s5, s18
 80150f8:	ee30 6a46 	vsub.f32	s12, s0, s12
 80150fc:	ee32 0a26 	vadd.f32	s0, s4, s13
 8015100:	ee72 6a66 	vsub.f32	s13, s4, s13
 8015104:	ee77 8a62 	vsub.f32	s17, s14, s5
 8015108:	ee34 2aa7 	vadd.f32	s4, s9, s15
 801510c:	ee74 7ae7 	vsub.f32	s15, s9, s15
 8015110:	ee77 4a22 	vadd.f32	s9, s14, s5
 8015114:	ee71 2a04 	vadd.f32	s5, s2, s8
 8015118:	ee31 7a44 	vsub.f32	s14, s2, s8
 801511c:	ee30 1a60 	vsub.f32	s2, s0, s1
 8015120:	ee73 1a06 	vadd.f32	s3, s6, s12
 8015124:	ee33 6a46 	vsub.f32	s12, s6, s12
 8015128:	ee36 3ae3 	vsub.f32	s6, s13, s7
 801512c:	ee37 4ac8 	vsub.f32	s8, s15, s16
 8015130:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015134:	ee77 7a88 	vadd.f32	s15, s15, s16
 8015138:	ee72 3a65 	vsub.f32	s7, s4, s11
 801513c:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8015140:	ee72 5a25 	vadd.f32	s11, s4, s11
 8015144:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8015148:	ee32 2aa4 	vadd.f32	s4, s5, s9
 801514c:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8015150:	ee77 2a28 	vadd.f32	s5, s14, s17
 8015154:	ee37 7a68 	vsub.f32	s14, s14, s17
 8015158:	ee6e 8a05 	vmul.f32	s17, s28, s10
 801515c:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8015160:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8015164:	ee70 0a20 	vadd.f32	s1, s0, s1
 8015168:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 801516c:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8015170:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8015174:	edce 0a01 	vstr	s1, [lr, #4]
 8015178:	ee38 8a88 	vadd.f32	s16, s17, s16
 801517c:	449e      	add	lr, r3
 801517e:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8015182:	ee31 5a45 	vsub.f32	s10, s2, s10
 8015186:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 801518a:	ed86 8a00 	vstr	s16, [r6]
 801518e:	ee39 0a80 	vadd.f32	s0, s19, s0
 8015192:	ee33 3a61 	vsub.f32	s6, s6, s3
 8015196:	ed86 5a01 	vstr	s10, [r6, #4]
 801519a:	ee6f 0a82 	vmul.f32	s1, s31, s4
 801519e:	edcd 3a01 	vstr	s7, [sp, #4]
 80151a2:	ed9d 5a03 	vldr	s10, [sp, #12]
 80151a6:	ee2d 8a06 	vmul.f32	s16, s26, s12
 80151aa:	eddd 3a02 	vldr	s7, [sp, #8]
 80151ae:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 80151b2:	ed84 0a00 	vstr	s0, [r4]
 80151b6:	ee65 4a24 	vmul.f32	s9, s10, s9
 80151ba:	ed84 3a01 	vstr	s6, [r4, #4]
 80151be:	ee23 1aa6 	vmul.f32	s2, s7, s13
 80151c2:	ee23 6a86 	vmul.f32	s12, s7, s12
 80151c6:	eddd 3a01 	vldr	s7, [sp, #4]
 80151ca:	ee25 5a25 	vmul.f32	s10, s10, s11
 80151ce:	441e      	add	r6, r3
 80151d0:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 80151d4:	441c      	add	r4, r3
 80151d6:	ee6a 1a04 	vmul.f32	s3, s20, s8
 80151da:	ee70 0aa8 	vadd.f32	s1, s1, s17
 80151de:	ee2e 3a87 	vmul.f32	s6, s29, s14
 80151e2:	ee6b 8a27 	vmul.f32	s17, s22, s15
 80151e6:	ee2c 2a02 	vmul.f32	s4, s24, s4
 80151ea:	ee6d 6a26 	vmul.f32	s13, s26, s13
 80151ee:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 80151f2:	ee6a 2a22 	vmul.f32	s5, s20, s5
 80151f6:	ee2d 4a84 	vmul.f32	s8, s27, s8
 80151fa:	ee2b 7a07 	vmul.f32	s14, s22, s14
 80151fe:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8015202:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8015206:	ee38 8a01 	vadd.f32	s16, s16, s2
 801520a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801520e:	ee39 5a85 	vadd.f32	s10, s19, s10
 8015212:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8015216:	ed02 8a01 	vstr	s16, [r2, #-4]
 801521a:	ee30 0a21 	vadd.f32	s0, s0, s3
 801521e:	ed82 6a00 	vstr	s12, [r2]
 8015222:	ee74 2a62 	vsub.f32	s5, s8, s5
 8015226:	edc5 0a00 	vstr	s1, [r5]
 801522a:	ee33 3a28 	vadd.f32	s6, s6, s17
 801522e:	edc5 3a01 	vstr	s7, [r5, #4]
 8015232:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8015236:	ed07 5a01 	vstr	s10, [r7, #-4]
 801523a:	edc7 4a00 	vstr	s9, [r7]
 801523e:	441d      	add	r5, r3
 8015240:	ed01 0a01 	vstr	s0, [r1, #-4]
 8015244:	441a      	add	r2, r3
 8015246:	edc1 2a00 	vstr	s5, [r1]
 801524a:	441f      	add	r7, r3
 801524c:	ed80 3a00 	vstr	s6, [r0]
 8015250:	4419      	add	r1, r3
 8015252:	ed80 7a01 	vstr	s14, [r0, #4]
 8015256:	4418      	add	r0, r3
 8015258:	f63f aee8 	bhi.w	801502c <arm_radix8_butterfly_f32+0x32c>
 801525c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801525e:	f109 0901 	add.w	r9, r9, #1
 8015262:	9301      	str	r3, [sp, #4]
 8015264:	9b04      	ldr	r3, [sp, #16]
 8015266:	4413      	add	r3, r2
 8015268:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801526a:	9304      	str	r3, [sp, #16]
 801526c:	9b06      	ldr	r3, [sp, #24]
 801526e:	4413      	add	r3, r2
 8015270:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015272:	9306      	str	r3, [sp, #24]
 8015274:	9b05      	ldr	r3, [sp, #20]
 8015276:	4413      	add	r3, r2
 8015278:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801527a:	9305      	str	r3, [sp, #20]
 801527c:	9b07      	ldr	r3, [sp, #28]
 801527e:	4413      	add	r3, r2
 8015280:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015282:	9307      	str	r3, [sp, #28]
 8015284:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015286:	4413      	add	r3, r2
 8015288:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801528a:	930a      	str	r3, [sp, #40]	@ 0x28
 801528c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801528e:	4413      	add	r3, r2
 8015290:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8015292:	9309      	str	r3, [sp, #36]	@ 0x24
 8015294:	9b08      	ldr	r3, [sp, #32]
 8015296:	4413      	add	r3, r2
 8015298:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801529a:	9308      	str	r3, [sp, #32]
 801529c:	3208      	adds	r2, #8
 801529e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80152a0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80152a2:	4599      	cmp	r9, r3
 80152a4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80152a6:	f47f ae72 	bne.w	8014f8e <arm_radix8_butterfly_f32+0x28e>
 80152aa:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 80152ae:	46c8      	mov	r8, r9
 80152b0:	f8dd c074 	ldr.w	ip, [sp, #116]	@ 0x74
 80152b4:	e533      	b.n	8014d1e <arm_radix8_butterfly_f32+0x1e>
 80152b6:	b01f      	add	sp, #124	@ 0x7c
 80152b8:	ecbd 8b10 	vpop	{d8-d15}
 80152bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080152c0 <std>:
 80152c0:	2300      	movs	r3, #0
 80152c2:	b510      	push	{r4, lr}
 80152c4:	4604      	mov	r4, r0
 80152c6:	e9c0 3300 	strd	r3, r3, [r0]
 80152ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80152ce:	6083      	str	r3, [r0, #8]
 80152d0:	8181      	strh	r1, [r0, #12]
 80152d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80152d4:	81c2      	strh	r2, [r0, #14]
 80152d6:	6183      	str	r3, [r0, #24]
 80152d8:	4619      	mov	r1, r3
 80152da:	2208      	movs	r2, #8
 80152dc:	305c      	adds	r0, #92	@ 0x5c
 80152de:	f000 fa37 	bl	8015750 <memset>
 80152e2:	4b0d      	ldr	r3, [pc, #52]	@ (8015318 <std+0x58>)
 80152e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80152e6:	4b0d      	ldr	r3, [pc, #52]	@ (801531c <std+0x5c>)
 80152e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80152ea:	4b0d      	ldr	r3, [pc, #52]	@ (8015320 <std+0x60>)
 80152ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80152ee:	4b0d      	ldr	r3, [pc, #52]	@ (8015324 <std+0x64>)
 80152f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80152f2:	4b0d      	ldr	r3, [pc, #52]	@ (8015328 <std+0x68>)
 80152f4:	6224      	str	r4, [r4, #32]
 80152f6:	429c      	cmp	r4, r3
 80152f8:	d006      	beq.n	8015308 <std+0x48>
 80152fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80152fe:	4294      	cmp	r4, r2
 8015300:	d002      	beq.n	8015308 <std+0x48>
 8015302:	33d0      	adds	r3, #208	@ 0xd0
 8015304:	429c      	cmp	r4, r3
 8015306:	d105      	bne.n	8015314 <std+0x54>
 8015308:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801530c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015310:	f000 ba96 	b.w	8015840 <__retarget_lock_init_recursive>
 8015314:	bd10      	pop	{r4, pc}
 8015316:	bf00      	nop
 8015318:	0801556d 	.word	0x0801556d
 801531c:	0801558f 	.word	0x0801558f
 8015320:	080155c7 	.word	0x080155c7
 8015324:	080155eb 	.word	0x080155eb
 8015328:	24004924 	.word	0x24004924

0801532c <stdio_exit_handler>:
 801532c:	4a02      	ldr	r2, [pc, #8]	@ (8015338 <stdio_exit_handler+0xc>)
 801532e:	4903      	ldr	r1, [pc, #12]	@ (801533c <stdio_exit_handler+0x10>)
 8015330:	4803      	ldr	r0, [pc, #12]	@ (8015340 <stdio_exit_handler+0x14>)
 8015332:	f000 b869 	b.w	8015408 <_fwalk_sglue>
 8015336:	bf00      	nop
 8015338:	24000104 	.word	0x24000104
 801533c:	08016125 	.word	0x08016125
 8015340:	24000114 	.word	0x24000114

08015344 <cleanup_stdio>:
 8015344:	6841      	ldr	r1, [r0, #4]
 8015346:	4b0c      	ldr	r3, [pc, #48]	@ (8015378 <cleanup_stdio+0x34>)
 8015348:	4299      	cmp	r1, r3
 801534a:	b510      	push	{r4, lr}
 801534c:	4604      	mov	r4, r0
 801534e:	d001      	beq.n	8015354 <cleanup_stdio+0x10>
 8015350:	f000 fee8 	bl	8016124 <_fflush_r>
 8015354:	68a1      	ldr	r1, [r4, #8]
 8015356:	4b09      	ldr	r3, [pc, #36]	@ (801537c <cleanup_stdio+0x38>)
 8015358:	4299      	cmp	r1, r3
 801535a:	d002      	beq.n	8015362 <cleanup_stdio+0x1e>
 801535c:	4620      	mov	r0, r4
 801535e:	f000 fee1 	bl	8016124 <_fflush_r>
 8015362:	68e1      	ldr	r1, [r4, #12]
 8015364:	4b06      	ldr	r3, [pc, #24]	@ (8015380 <cleanup_stdio+0x3c>)
 8015366:	4299      	cmp	r1, r3
 8015368:	d004      	beq.n	8015374 <cleanup_stdio+0x30>
 801536a:	4620      	mov	r0, r4
 801536c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015370:	f000 bed8 	b.w	8016124 <_fflush_r>
 8015374:	bd10      	pop	{r4, pc}
 8015376:	bf00      	nop
 8015378:	24004924 	.word	0x24004924
 801537c:	2400498c 	.word	0x2400498c
 8015380:	240049f4 	.word	0x240049f4

08015384 <global_stdio_init.part.0>:
 8015384:	b510      	push	{r4, lr}
 8015386:	4b0b      	ldr	r3, [pc, #44]	@ (80153b4 <global_stdio_init.part.0+0x30>)
 8015388:	4c0b      	ldr	r4, [pc, #44]	@ (80153b8 <global_stdio_init.part.0+0x34>)
 801538a:	4a0c      	ldr	r2, [pc, #48]	@ (80153bc <global_stdio_init.part.0+0x38>)
 801538c:	601a      	str	r2, [r3, #0]
 801538e:	4620      	mov	r0, r4
 8015390:	2200      	movs	r2, #0
 8015392:	2104      	movs	r1, #4
 8015394:	f7ff ff94 	bl	80152c0 <std>
 8015398:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801539c:	2201      	movs	r2, #1
 801539e:	2109      	movs	r1, #9
 80153a0:	f7ff ff8e 	bl	80152c0 <std>
 80153a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80153a8:	2202      	movs	r2, #2
 80153aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80153ae:	2112      	movs	r1, #18
 80153b0:	f7ff bf86 	b.w	80152c0 <std>
 80153b4:	24004a5c 	.word	0x24004a5c
 80153b8:	24004924 	.word	0x24004924
 80153bc:	0801532d 	.word	0x0801532d

080153c0 <__sfp_lock_acquire>:
 80153c0:	4801      	ldr	r0, [pc, #4]	@ (80153c8 <__sfp_lock_acquire+0x8>)
 80153c2:	f000 ba3e 	b.w	8015842 <__retarget_lock_acquire_recursive>
 80153c6:	bf00      	nop
 80153c8:	24004a65 	.word	0x24004a65

080153cc <__sfp_lock_release>:
 80153cc:	4801      	ldr	r0, [pc, #4]	@ (80153d4 <__sfp_lock_release+0x8>)
 80153ce:	f000 ba39 	b.w	8015844 <__retarget_lock_release_recursive>
 80153d2:	bf00      	nop
 80153d4:	24004a65 	.word	0x24004a65

080153d8 <__sinit>:
 80153d8:	b510      	push	{r4, lr}
 80153da:	4604      	mov	r4, r0
 80153dc:	f7ff fff0 	bl	80153c0 <__sfp_lock_acquire>
 80153e0:	6a23      	ldr	r3, [r4, #32]
 80153e2:	b11b      	cbz	r3, 80153ec <__sinit+0x14>
 80153e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80153e8:	f7ff bff0 	b.w	80153cc <__sfp_lock_release>
 80153ec:	4b04      	ldr	r3, [pc, #16]	@ (8015400 <__sinit+0x28>)
 80153ee:	6223      	str	r3, [r4, #32]
 80153f0:	4b04      	ldr	r3, [pc, #16]	@ (8015404 <__sinit+0x2c>)
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d1f5      	bne.n	80153e4 <__sinit+0xc>
 80153f8:	f7ff ffc4 	bl	8015384 <global_stdio_init.part.0>
 80153fc:	e7f2      	b.n	80153e4 <__sinit+0xc>
 80153fe:	bf00      	nop
 8015400:	08015345 	.word	0x08015345
 8015404:	24004a5c 	.word	0x24004a5c

08015408 <_fwalk_sglue>:
 8015408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801540c:	4607      	mov	r7, r0
 801540e:	4688      	mov	r8, r1
 8015410:	4614      	mov	r4, r2
 8015412:	2600      	movs	r6, #0
 8015414:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015418:	f1b9 0901 	subs.w	r9, r9, #1
 801541c:	d505      	bpl.n	801542a <_fwalk_sglue+0x22>
 801541e:	6824      	ldr	r4, [r4, #0]
 8015420:	2c00      	cmp	r4, #0
 8015422:	d1f7      	bne.n	8015414 <_fwalk_sglue+0xc>
 8015424:	4630      	mov	r0, r6
 8015426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801542a:	89ab      	ldrh	r3, [r5, #12]
 801542c:	2b01      	cmp	r3, #1
 801542e:	d907      	bls.n	8015440 <_fwalk_sglue+0x38>
 8015430:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015434:	3301      	adds	r3, #1
 8015436:	d003      	beq.n	8015440 <_fwalk_sglue+0x38>
 8015438:	4629      	mov	r1, r5
 801543a:	4638      	mov	r0, r7
 801543c:	47c0      	blx	r8
 801543e:	4306      	orrs	r6, r0
 8015440:	3568      	adds	r5, #104	@ 0x68
 8015442:	e7e9      	b.n	8015418 <_fwalk_sglue+0x10>

08015444 <_puts_r>:
 8015444:	6a03      	ldr	r3, [r0, #32]
 8015446:	b570      	push	{r4, r5, r6, lr}
 8015448:	6884      	ldr	r4, [r0, #8]
 801544a:	4605      	mov	r5, r0
 801544c:	460e      	mov	r6, r1
 801544e:	b90b      	cbnz	r3, 8015454 <_puts_r+0x10>
 8015450:	f7ff ffc2 	bl	80153d8 <__sinit>
 8015454:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015456:	07db      	lsls	r3, r3, #31
 8015458:	d405      	bmi.n	8015466 <_puts_r+0x22>
 801545a:	89a3      	ldrh	r3, [r4, #12]
 801545c:	0598      	lsls	r0, r3, #22
 801545e:	d402      	bmi.n	8015466 <_puts_r+0x22>
 8015460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015462:	f000 f9ee 	bl	8015842 <__retarget_lock_acquire_recursive>
 8015466:	89a3      	ldrh	r3, [r4, #12]
 8015468:	0719      	lsls	r1, r3, #28
 801546a:	d502      	bpl.n	8015472 <_puts_r+0x2e>
 801546c:	6923      	ldr	r3, [r4, #16]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d135      	bne.n	80154de <_puts_r+0x9a>
 8015472:	4621      	mov	r1, r4
 8015474:	4628      	mov	r0, r5
 8015476:	f000 f8fb 	bl	8015670 <__swsetup_r>
 801547a:	b380      	cbz	r0, 80154de <_puts_r+0x9a>
 801547c:	f04f 35ff 	mov.w	r5, #4294967295
 8015480:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015482:	07da      	lsls	r2, r3, #31
 8015484:	d405      	bmi.n	8015492 <_puts_r+0x4e>
 8015486:	89a3      	ldrh	r3, [r4, #12]
 8015488:	059b      	lsls	r3, r3, #22
 801548a:	d402      	bmi.n	8015492 <_puts_r+0x4e>
 801548c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801548e:	f000 f9d9 	bl	8015844 <__retarget_lock_release_recursive>
 8015492:	4628      	mov	r0, r5
 8015494:	bd70      	pop	{r4, r5, r6, pc}
 8015496:	2b00      	cmp	r3, #0
 8015498:	da04      	bge.n	80154a4 <_puts_r+0x60>
 801549a:	69a2      	ldr	r2, [r4, #24]
 801549c:	429a      	cmp	r2, r3
 801549e:	dc17      	bgt.n	80154d0 <_puts_r+0x8c>
 80154a0:	290a      	cmp	r1, #10
 80154a2:	d015      	beq.n	80154d0 <_puts_r+0x8c>
 80154a4:	6823      	ldr	r3, [r4, #0]
 80154a6:	1c5a      	adds	r2, r3, #1
 80154a8:	6022      	str	r2, [r4, #0]
 80154aa:	7019      	strb	r1, [r3, #0]
 80154ac:	68a3      	ldr	r3, [r4, #8]
 80154ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80154b2:	3b01      	subs	r3, #1
 80154b4:	60a3      	str	r3, [r4, #8]
 80154b6:	2900      	cmp	r1, #0
 80154b8:	d1ed      	bne.n	8015496 <_puts_r+0x52>
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	da11      	bge.n	80154e2 <_puts_r+0x9e>
 80154be:	4622      	mov	r2, r4
 80154c0:	210a      	movs	r1, #10
 80154c2:	4628      	mov	r0, r5
 80154c4:	f000 f895 	bl	80155f2 <__swbuf_r>
 80154c8:	3001      	adds	r0, #1
 80154ca:	d0d7      	beq.n	801547c <_puts_r+0x38>
 80154cc:	250a      	movs	r5, #10
 80154ce:	e7d7      	b.n	8015480 <_puts_r+0x3c>
 80154d0:	4622      	mov	r2, r4
 80154d2:	4628      	mov	r0, r5
 80154d4:	f000 f88d 	bl	80155f2 <__swbuf_r>
 80154d8:	3001      	adds	r0, #1
 80154da:	d1e7      	bne.n	80154ac <_puts_r+0x68>
 80154dc:	e7ce      	b.n	801547c <_puts_r+0x38>
 80154de:	3e01      	subs	r6, #1
 80154e0:	e7e4      	b.n	80154ac <_puts_r+0x68>
 80154e2:	6823      	ldr	r3, [r4, #0]
 80154e4:	1c5a      	adds	r2, r3, #1
 80154e6:	6022      	str	r2, [r4, #0]
 80154e8:	220a      	movs	r2, #10
 80154ea:	701a      	strb	r2, [r3, #0]
 80154ec:	e7ee      	b.n	80154cc <_puts_r+0x88>
	...

080154f0 <puts>:
 80154f0:	4b02      	ldr	r3, [pc, #8]	@ (80154fc <puts+0xc>)
 80154f2:	4601      	mov	r1, r0
 80154f4:	6818      	ldr	r0, [r3, #0]
 80154f6:	f7ff bfa5 	b.w	8015444 <_puts_r>
 80154fa:	bf00      	nop
 80154fc:	24000110 	.word	0x24000110

08015500 <sniprintf>:
 8015500:	b40c      	push	{r2, r3}
 8015502:	b530      	push	{r4, r5, lr}
 8015504:	4b18      	ldr	r3, [pc, #96]	@ (8015568 <sniprintf+0x68>)
 8015506:	1e0c      	subs	r4, r1, #0
 8015508:	681d      	ldr	r5, [r3, #0]
 801550a:	b09d      	sub	sp, #116	@ 0x74
 801550c:	da08      	bge.n	8015520 <sniprintf+0x20>
 801550e:	238b      	movs	r3, #139	@ 0x8b
 8015510:	602b      	str	r3, [r5, #0]
 8015512:	f04f 30ff 	mov.w	r0, #4294967295
 8015516:	b01d      	add	sp, #116	@ 0x74
 8015518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801551c:	b002      	add	sp, #8
 801551e:	4770      	bx	lr
 8015520:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015524:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015528:	f04f 0300 	mov.w	r3, #0
 801552c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801552e:	bf14      	ite	ne
 8015530:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015534:	4623      	moveq	r3, r4
 8015536:	9304      	str	r3, [sp, #16]
 8015538:	9307      	str	r3, [sp, #28]
 801553a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801553e:	9002      	str	r0, [sp, #8]
 8015540:	9006      	str	r0, [sp, #24]
 8015542:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015546:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015548:	ab21      	add	r3, sp, #132	@ 0x84
 801554a:	a902      	add	r1, sp, #8
 801554c:	4628      	mov	r0, r5
 801554e:	9301      	str	r3, [sp, #4]
 8015550:	f000 fadc 	bl	8015b0c <_svfiprintf_r>
 8015554:	1c43      	adds	r3, r0, #1
 8015556:	bfbc      	itt	lt
 8015558:	238b      	movlt	r3, #139	@ 0x8b
 801555a:	602b      	strlt	r3, [r5, #0]
 801555c:	2c00      	cmp	r4, #0
 801555e:	d0da      	beq.n	8015516 <sniprintf+0x16>
 8015560:	9b02      	ldr	r3, [sp, #8]
 8015562:	2200      	movs	r2, #0
 8015564:	701a      	strb	r2, [r3, #0]
 8015566:	e7d6      	b.n	8015516 <sniprintf+0x16>
 8015568:	24000110 	.word	0x24000110

0801556c <__sread>:
 801556c:	b510      	push	{r4, lr}
 801556e:	460c      	mov	r4, r1
 8015570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015574:	f000 f916 	bl	80157a4 <_read_r>
 8015578:	2800      	cmp	r0, #0
 801557a:	bfab      	itete	ge
 801557c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801557e:	89a3      	ldrhlt	r3, [r4, #12]
 8015580:	181b      	addge	r3, r3, r0
 8015582:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015586:	bfac      	ite	ge
 8015588:	6563      	strge	r3, [r4, #84]	@ 0x54
 801558a:	81a3      	strhlt	r3, [r4, #12]
 801558c:	bd10      	pop	{r4, pc}

0801558e <__swrite>:
 801558e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015592:	461f      	mov	r7, r3
 8015594:	898b      	ldrh	r3, [r1, #12]
 8015596:	05db      	lsls	r3, r3, #23
 8015598:	4605      	mov	r5, r0
 801559a:	460c      	mov	r4, r1
 801559c:	4616      	mov	r6, r2
 801559e:	d505      	bpl.n	80155ac <__swrite+0x1e>
 80155a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80155a4:	2302      	movs	r3, #2
 80155a6:	2200      	movs	r2, #0
 80155a8:	f000 f8ea 	bl	8015780 <_lseek_r>
 80155ac:	89a3      	ldrh	r3, [r4, #12]
 80155ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80155b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80155b6:	81a3      	strh	r3, [r4, #12]
 80155b8:	4632      	mov	r2, r6
 80155ba:	463b      	mov	r3, r7
 80155bc:	4628      	mov	r0, r5
 80155be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80155c2:	f000 b901 	b.w	80157c8 <_write_r>

080155c6 <__sseek>:
 80155c6:	b510      	push	{r4, lr}
 80155c8:	460c      	mov	r4, r1
 80155ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80155ce:	f000 f8d7 	bl	8015780 <_lseek_r>
 80155d2:	1c43      	adds	r3, r0, #1
 80155d4:	89a3      	ldrh	r3, [r4, #12]
 80155d6:	bf15      	itete	ne
 80155d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80155da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80155de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80155e2:	81a3      	strheq	r3, [r4, #12]
 80155e4:	bf18      	it	ne
 80155e6:	81a3      	strhne	r3, [r4, #12]
 80155e8:	bd10      	pop	{r4, pc}

080155ea <__sclose>:
 80155ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80155ee:	f000 b8b7 	b.w	8015760 <_close_r>

080155f2 <__swbuf_r>:
 80155f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155f4:	460e      	mov	r6, r1
 80155f6:	4614      	mov	r4, r2
 80155f8:	4605      	mov	r5, r0
 80155fa:	b118      	cbz	r0, 8015604 <__swbuf_r+0x12>
 80155fc:	6a03      	ldr	r3, [r0, #32]
 80155fe:	b90b      	cbnz	r3, 8015604 <__swbuf_r+0x12>
 8015600:	f7ff feea 	bl	80153d8 <__sinit>
 8015604:	69a3      	ldr	r3, [r4, #24]
 8015606:	60a3      	str	r3, [r4, #8]
 8015608:	89a3      	ldrh	r3, [r4, #12]
 801560a:	071a      	lsls	r2, r3, #28
 801560c:	d501      	bpl.n	8015612 <__swbuf_r+0x20>
 801560e:	6923      	ldr	r3, [r4, #16]
 8015610:	b943      	cbnz	r3, 8015624 <__swbuf_r+0x32>
 8015612:	4621      	mov	r1, r4
 8015614:	4628      	mov	r0, r5
 8015616:	f000 f82b 	bl	8015670 <__swsetup_r>
 801561a:	b118      	cbz	r0, 8015624 <__swbuf_r+0x32>
 801561c:	f04f 37ff 	mov.w	r7, #4294967295
 8015620:	4638      	mov	r0, r7
 8015622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015624:	6823      	ldr	r3, [r4, #0]
 8015626:	6922      	ldr	r2, [r4, #16]
 8015628:	1a98      	subs	r0, r3, r2
 801562a:	6963      	ldr	r3, [r4, #20]
 801562c:	b2f6      	uxtb	r6, r6
 801562e:	4283      	cmp	r3, r0
 8015630:	4637      	mov	r7, r6
 8015632:	dc05      	bgt.n	8015640 <__swbuf_r+0x4e>
 8015634:	4621      	mov	r1, r4
 8015636:	4628      	mov	r0, r5
 8015638:	f000 fd74 	bl	8016124 <_fflush_r>
 801563c:	2800      	cmp	r0, #0
 801563e:	d1ed      	bne.n	801561c <__swbuf_r+0x2a>
 8015640:	68a3      	ldr	r3, [r4, #8]
 8015642:	3b01      	subs	r3, #1
 8015644:	60a3      	str	r3, [r4, #8]
 8015646:	6823      	ldr	r3, [r4, #0]
 8015648:	1c5a      	adds	r2, r3, #1
 801564a:	6022      	str	r2, [r4, #0]
 801564c:	701e      	strb	r6, [r3, #0]
 801564e:	6962      	ldr	r2, [r4, #20]
 8015650:	1c43      	adds	r3, r0, #1
 8015652:	429a      	cmp	r2, r3
 8015654:	d004      	beq.n	8015660 <__swbuf_r+0x6e>
 8015656:	89a3      	ldrh	r3, [r4, #12]
 8015658:	07db      	lsls	r3, r3, #31
 801565a:	d5e1      	bpl.n	8015620 <__swbuf_r+0x2e>
 801565c:	2e0a      	cmp	r6, #10
 801565e:	d1df      	bne.n	8015620 <__swbuf_r+0x2e>
 8015660:	4621      	mov	r1, r4
 8015662:	4628      	mov	r0, r5
 8015664:	f000 fd5e 	bl	8016124 <_fflush_r>
 8015668:	2800      	cmp	r0, #0
 801566a:	d0d9      	beq.n	8015620 <__swbuf_r+0x2e>
 801566c:	e7d6      	b.n	801561c <__swbuf_r+0x2a>
	...

08015670 <__swsetup_r>:
 8015670:	b538      	push	{r3, r4, r5, lr}
 8015672:	4b29      	ldr	r3, [pc, #164]	@ (8015718 <__swsetup_r+0xa8>)
 8015674:	4605      	mov	r5, r0
 8015676:	6818      	ldr	r0, [r3, #0]
 8015678:	460c      	mov	r4, r1
 801567a:	b118      	cbz	r0, 8015684 <__swsetup_r+0x14>
 801567c:	6a03      	ldr	r3, [r0, #32]
 801567e:	b90b      	cbnz	r3, 8015684 <__swsetup_r+0x14>
 8015680:	f7ff feaa 	bl	80153d8 <__sinit>
 8015684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015688:	0719      	lsls	r1, r3, #28
 801568a:	d422      	bmi.n	80156d2 <__swsetup_r+0x62>
 801568c:	06da      	lsls	r2, r3, #27
 801568e:	d407      	bmi.n	80156a0 <__swsetup_r+0x30>
 8015690:	2209      	movs	r2, #9
 8015692:	602a      	str	r2, [r5, #0]
 8015694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015698:	81a3      	strh	r3, [r4, #12]
 801569a:	f04f 30ff 	mov.w	r0, #4294967295
 801569e:	e033      	b.n	8015708 <__swsetup_r+0x98>
 80156a0:	0758      	lsls	r0, r3, #29
 80156a2:	d512      	bpl.n	80156ca <__swsetup_r+0x5a>
 80156a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80156a6:	b141      	cbz	r1, 80156ba <__swsetup_r+0x4a>
 80156a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80156ac:	4299      	cmp	r1, r3
 80156ae:	d002      	beq.n	80156b6 <__swsetup_r+0x46>
 80156b0:	4628      	mov	r0, r5
 80156b2:	f000 f8d7 	bl	8015864 <_free_r>
 80156b6:	2300      	movs	r3, #0
 80156b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80156ba:	89a3      	ldrh	r3, [r4, #12]
 80156bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80156c0:	81a3      	strh	r3, [r4, #12]
 80156c2:	2300      	movs	r3, #0
 80156c4:	6063      	str	r3, [r4, #4]
 80156c6:	6923      	ldr	r3, [r4, #16]
 80156c8:	6023      	str	r3, [r4, #0]
 80156ca:	89a3      	ldrh	r3, [r4, #12]
 80156cc:	f043 0308 	orr.w	r3, r3, #8
 80156d0:	81a3      	strh	r3, [r4, #12]
 80156d2:	6923      	ldr	r3, [r4, #16]
 80156d4:	b94b      	cbnz	r3, 80156ea <__swsetup_r+0x7a>
 80156d6:	89a3      	ldrh	r3, [r4, #12]
 80156d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80156dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80156e0:	d003      	beq.n	80156ea <__swsetup_r+0x7a>
 80156e2:	4621      	mov	r1, r4
 80156e4:	4628      	mov	r0, r5
 80156e6:	f000 fd6b 	bl	80161c0 <__smakebuf_r>
 80156ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80156ee:	f013 0201 	ands.w	r2, r3, #1
 80156f2:	d00a      	beq.n	801570a <__swsetup_r+0x9a>
 80156f4:	2200      	movs	r2, #0
 80156f6:	60a2      	str	r2, [r4, #8]
 80156f8:	6962      	ldr	r2, [r4, #20]
 80156fa:	4252      	negs	r2, r2
 80156fc:	61a2      	str	r2, [r4, #24]
 80156fe:	6922      	ldr	r2, [r4, #16]
 8015700:	b942      	cbnz	r2, 8015714 <__swsetup_r+0xa4>
 8015702:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015706:	d1c5      	bne.n	8015694 <__swsetup_r+0x24>
 8015708:	bd38      	pop	{r3, r4, r5, pc}
 801570a:	0799      	lsls	r1, r3, #30
 801570c:	bf58      	it	pl
 801570e:	6962      	ldrpl	r2, [r4, #20]
 8015710:	60a2      	str	r2, [r4, #8]
 8015712:	e7f4      	b.n	80156fe <__swsetup_r+0x8e>
 8015714:	2000      	movs	r0, #0
 8015716:	e7f7      	b.n	8015708 <__swsetup_r+0x98>
 8015718:	24000110 	.word	0x24000110

0801571c <memmove>:
 801571c:	4288      	cmp	r0, r1
 801571e:	b510      	push	{r4, lr}
 8015720:	eb01 0402 	add.w	r4, r1, r2
 8015724:	d902      	bls.n	801572c <memmove+0x10>
 8015726:	4284      	cmp	r4, r0
 8015728:	4623      	mov	r3, r4
 801572a:	d807      	bhi.n	801573c <memmove+0x20>
 801572c:	1e43      	subs	r3, r0, #1
 801572e:	42a1      	cmp	r1, r4
 8015730:	d008      	beq.n	8015744 <memmove+0x28>
 8015732:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015736:	f803 2f01 	strb.w	r2, [r3, #1]!
 801573a:	e7f8      	b.n	801572e <memmove+0x12>
 801573c:	4402      	add	r2, r0
 801573e:	4601      	mov	r1, r0
 8015740:	428a      	cmp	r2, r1
 8015742:	d100      	bne.n	8015746 <memmove+0x2a>
 8015744:	bd10      	pop	{r4, pc}
 8015746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801574a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801574e:	e7f7      	b.n	8015740 <memmove+0x24>

08015750 <memset>:
 8015750:	4402      	add	r2, r0
 8015752:	4603      	mov	r3, r0
 8015754:	4293      	cmp	r3, r2
 8015756:	d100      	bne.n	801575a <memset+0xa>
 8015758:	4770      	bx	lr
 801575a:	f803 1b01 	strb.w	r1, [r3], #1
 801575e:	e7f9      	b.n	8015754 <memset+0x4>

08015760 <_close_r>:
 8015760:	b538      	push	{r3, r4, r5, lr}
 8015762:	4d06      	ldr	r5, [pc, #24]	@ (801577c <_close_r+0x1c>)
 8015764:	2300      	movs	r3, #0
 8015766:	4604      	mov	r4, r0
 8015768:	4608      	mov	r0, r1
 801576a:	602b      	str	r3, [r5, #0]
 801576c:	f7eb ffe5 	bl	800173a <_close>
 8015770:	1c43      	adds	r3, r0, #1
 8015772:	d102      	bne.n	801577a <_close_r+0x1a>
 8015774:	682b      	ldr	r3, [r5, #0]
 8015776:	b103      	cbz	r3, 801577a <_close_r+0x1a>
 8015778:	6023      	str	r3, [r4, #0]
 801577a:	bd38      	pop	{r3, r4, r5, pc}
 801577c:	24004a60 	.word	0x24004a60

08015780 <_lseek_r>:
 8015780:	b538      	push	{r3, r4, r5, lr}
 8015782:	4d07      	ldr	r5, [pc, #28]	@ (80157a0 <_lseek_r+0x20>)
 8015784:	4604      	mov	r4, r0
 8015786:	4608      	mov	r0, r1
 8015788:	4611      	mov	r1, r2
 801578a:	2200      	movs	r2, #0
 801578c:	602a      	str	r2, [r5, #0]
 801578e:	461a      	mov	r2, r3
 8015790:	f7eb fffa 	bl	8001788 <_lseek>
 8015794:	1c43      	adds	r3, r0, #1
 8015796:	d102      	bne.n	801579e <_lseek_r+0x1e>
 8015798:	682b      	ldr	r3, [r5, #0]
 801579a:	b103      	cbz	r3, 801579e <_lseek_r+0x1e>
 801579c:	6023      	str	r3, [r4, #0]
 801579e:	bd38      	pop	{r3, r4, r5, pc}
 80157a0:	24004a60 	.word	0x24004a60

080157a4 <_read_r>:
 80157a4:	b538      	push	{r3, r4, r5, lr}
 80157a6:	4d07      	ldr	r5, [pc, #28]	@ (80157c4 <_read_r+0x20>)
 80157a8:	4604      	mov	r4, r0
 80157aa:	4608      	mov	r0, r1
 80157ac:	4611      	mov	r1, r2
 80157ae:	2200      	movs	r2, #0
 80157b0:	602a      	str	r2, [r5, #0]
 80157b2:	461a      	mov	r2, r3
 80157b4:	f7eb ffa4 	bl	8001700 <_read>
 80157b8:	1c43      	adds	r3, r0, #1
 80157ba:	d102      	bne.n	80157c2 <_read_r+0x1e>
 80157bc:	682b      	ldr	r3, [r5, #0]
 80157be:	b103      	cbz	r3, 80157c2 <_read_r+0x1e>
 80157c0:	6023      	str	r3, [r4, #0]
 80157c2:	bd38      	pop	{r3, r4, r5, pc}
 80157c4:	24004a60 	.word	0x24004a60

080157c8 <_write_r>:
 80157c8:	b538      	push	{r3, r4, r5, lr}
 80157ca:	4d07      	ldr	r5, [pc, #28]	@ (80157e8 <_write_r+0x20>)
 80157cc:	4604      	mov	r4, r0
 80157ce:	4608      	mov	r0, r1
 80157d0:	4611      	mov	r1, r2
 80157d2:	2200      	movs	r2, #0
 80157d4:	602a      	str	r2, [r5, #0]
 80157d6:	461a      	mov	r2, r3
 80157d8:	f7ec fbda 	bl	8001f90 <_write>
 80157dc:	1c43      	adds	r3, r0, #1
 80157de:	d102      	bne.n	80157e6 <_write_r+0x1e>
 80157e0:	682b      	ldr	r3, [r5, #0]
 80157e2:	b103      	cbz	r3, 80157e6 <_write_r+0x1e>
 80157e4:	6023      	str	r3, [r4, #0]
 80157e6:	bd38      	pop	{r3, r4, r5, pc}
 80157e8:	24004a60 	.word	0x24004a60

080157ec <__errno>:
 80157ec:	4b01      	ldr	r3, [pc, #4]	@ (80157f4 <__errno+0x8>)
 80157ee:	6818      	ldr	r0, [r3, #0]
 80157f0:	4770      	bx	lr
 80157f2:	bf00      	nop
 80157f4:	24000110 	.word	0x24000110

080157f8 <__libc_init_array>:
 80157f8:	b570      	push	{r4, r5, r6, lr}
 80157fa:	4d0d      	ldr	r5, [pc, #52]	@ (8015830 <__libc_init_array+0x38>)
 80157fc:	4c0d      	ldr	r4, [pc, #52]	@ (8015834 <__libc_init_array+0x3c>)
 80157fe:	1b64      	subs	r4, r4, r5
 8015800:	10a4      	asrs	r4, r4, #2
 8015802:	2600      	movs	r6, #0
 8015804:	42a6      	cmp	r6, r4
 8015806:	d109      	bne.n	801581c <__libc_init_array+0x24>
 8015808:	4d0b      	ldr	r5, [pc, #44]	@ (8015838 <__libc_init_array+0x40>)
 801580a:	4c0c      	ldr	r4, [pc, #48]	@ (801583c <__libc_init_array+0x44>)
 801580c:	f000 fd7c 	bl	8016308 <_init>
 8015810:	1b64      	subs	r4, r4, r5
 8015812:	10a4      	asrs	r4, r4, #2
 8015814:	2600      	movs	r6, #0
 8015816:	42a6      	cmp	r6, r4
 8015818:	d105      	bne.n	8015826 <__libc_init_array+0x2e>
 801581a:	bd70      	pop	{r4, r5, r6, pc}
 801581c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015820:	4798      	blx	r3
 8015822:	3601      	adds	r6, #1
 8015824:	e7ee      	b.n	8015804 <__libc_init_array+0xc>
 8015826:	f855 3b04 	ldr.w	r3, [r5], #4
 801582a:	4798      	blx	r3
 801582c:	3601      	adds	r6, #1
 801582e:	e7f2      	b.n	8015816 <__libc_init_array+0x1e>
 8015830:	0802a0b8 	.word	0x0802a0b8
 8015834:	0802a0b8 	.word	0x0802a0b8
 8015838:	0802a0b8 	.word	0x0802a0b8
 801583c:	0802a0c0 	.word	0x0802a0c0

08015840 <__retarget_lock_init_recursive>:
 8015840:	4770      	bx	lr

08015842 <__retarget_lock_acquire_recursive>:
 8015842:	4770      	bx	lr

08015844 <__retarget_lock_release_recursive>:
 8015844:	4770      	bx	lr

08015846 <memcpy>:
 8015846:	440a      	add	r2, r1
 8015848:	4291      	cmp	r1, r2
 801584a:	f100 33ff 	add.w	r3, r0, #4294967295
 801584e:	d100      	bne.n	8015852 <memcpy+0xc>
 8015850:	4770      	bx	lr
 8015852:	b510      	push	{r4, lr}
 8015854:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015858:	f803 4f01 	strb.w	r4, [r3, #1]!
 801585c:	4291      	cmp	r1, r2
 801585e:	d1f9      	bne.n	8015854 <memcpy+0xe>
 8015860:	bd10      	pop	{r4, pc}
	...

08015864 <_free_r>:
 8015864:	b538      	push	{r3, r4, r5, lr}
 8015866:	4605      	mov	r5, r0
 8015868:	2900      	cmp	r1, #0
 801586a:	d041      	beq.n	80158f0 <_free_r+0x8c>
 801586c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015870:	1f0c      	subs	r4, r1, #4
 8015872:	2b00      	cmp	r3, #0
 8015874:	bfb8      	it	lt
 8015876:	18e4      	addlt	r4, r4, r3
 8015878:	f000 f8e0 	bl	8015a3c <__malloc_lock>
 801587c:	4a1d      	ldr	r2, [pc, #116]	@ (80158f4 <_free_r+0x90>)
 801587e:	6813      	ldr	r3, [r2, #0]
 8015880:	b933      	cbnz	r3, 8015890 <_free_r+0x2c>
 8015882:	6063      	str	r3, [r4, #4]
 8015884:	6014      	str	r4, [r2, #0]
 8015886:	4628      	mov	r0, r5
 8015888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801588c:	f000 b8dc 	b.w	8015a48 <__malloc_unlock>
 8015890:	42a3      	cmp	r3, r4
 8015892:	d908      	bls.n	80158a6 <_free_r+0x42>
 8015894:	6820      	ldr	r0, [r4, #0]
 8015896:	1821      	adds	r1, r4, r0
 8015898:	428b      	cmp	r3, r1
 801589a:	bf01      	itttt	eq
 801589c:	6819      	ldreq	r1, [r3, #0]
 801589e:	685b      	ldreq	r3, [r3, #4]
 80158a0:	1809      	addeq	r1, r1, r0
 80158a2:	6021      	streq	r1, [r4, #0]
 80158a4:	e7ed      	b.n	8015882 <_free_r+0x1e>
 80158a6:	461a      	mov	r2, r3
 80158a8:	685b      	ldr	r3, [r3, #4]
 80158aa:	b10b      	cbz	r3, 80158b0 <_free_r+0x4c>
 80158ac:	42a3      	cmp	r3, r4
 80158ae:	d9fa      	bls.n	80158a6 <_free_r+0x42>
 80158b0:	6811      	ldr	r1, [r2, #0]
 80158b2:	1850      	adds	r0, r2, r1
 80158b4:	42a0      	cmp	r0, r4
 80158b6:	d10b      	bne.n	80158d0 <_free_r+0x6c>
 80158b8:	6820      	ldr	r0, [r4, #0]
 80158ba:	4401      	add	r1, r0
 80158bc:	1850      	adds	r0, r2, r1
 80158be:	4283      	cmp	r3, r0
 80158c0:	6011      	str	r1, [r2, #0]
 80158c2:	d1e0      	bne.n	8015886 <_free_r+0x22>
 80158c4:	6818      	ldr	r0, [r3, #0]
 80158c6:	685b      	ldr	r3, [r3, #4]
 80158c8:	6053      	str	r3, [r2, #4]
 80158ca:	4408      	add	r0, r1
 80158cc:	6010      	str	r0, [r2, #0]
 80158ce:	e7da      	b.n	8015886 <_free_r+0x22>
 80158d0:	d902      	bls.n	80158d8 <_free_r+0x74>
 80158d2:	230c      	movs	r3, #12
 80158d4:	602b      	str	r3, [r5, #0]
 80158d6:	e7d6      	b.n	8015886 <_free_r+0x22>
 80158d8:	6820      	ldr	r0, [r4, #0]
 80158da:	1821      	adds	r1, r4, r0
 80158dc:	428b      	cmp	r3, r1
 80158de:	bf04      	itt	eq
 80158e0:	6819      	ldreq	r1, [r3, #0]
 80158e2:	685b      	ldreq	r3, [r3, #4]
 80158e4:	6063      	str	r3, [r4, #4]
 80158e6:	bf04      	itt	eq
 80158e8:	1809      	addeq	r1, r1, r0
 80158ea:	6021      	streq	r1, [r4, #0]
 80158ec:	6054      	str	r4, [r2, #4]
 80158ee:	e7ca      	b.n	8015886 <_free_r+0x22>
 80158f0:	bd38      	pop	{r3, r4, r5, pc}
 80158f2:	bf00      	nop
 80158f4:	24004a6c 	.word	0x24004a6c

080158f8 <sbrk_aligned>:
 80158f8:	b570      	push	{r4, r5, r6, lr}
 80158fa:	4e0f      	ldr	r6, [pc, #60]	@ (8015938 <sbrk_aligned+0x40>)
 80158fc:	460c      	mov	r4, r1
 80158fe:	6831      	ldr	r1, [r6, #0]
 8015900:	4605      	mov	r5, r0
 8015902:	b911      	cbnz	r1, 801590a <sbrk_aligned+0x12>
 8015904:	f000 fcba 	bl	801627c <_sbrk_r>
 8015908:	6030      	str	r0, [r6, #0]
 801590a:	4621      	mov	r1, r4
 801590c:	4628      	mov	r0, r5
 801590e:	f000 fcb5 	bl	801627c <_sbrk_r>
 8015912:	1c43      	adds	r3, r0, #1
 8015914:	d103      	bne.n	801591e <sbrk_aligned+0x26>
 8015916:	f04f 34ff 	mov.w	r4, #4294967295
 801591a:	4620      	mov	r0, r4
 801591c:	bd70      	pop	{r4, r5, r6, pc}
 801591e:	1cc4      	adds	r4, r0, #3
 8015920:	f024 0403 	bic.w	r4, r4, #3
 8015924:	42a0      	cmp	r0, r4
 8015926:	d0f8      	beq.n	801591a <sbrk_aligned+0x22>
 8015928:	1a21      	subs	r1, r4, r0
 801592a:	4628      	mov	r0, r5
 801592c:	f000 fca6 	bl	801627c <_sbrk_r>
 8015930:	3001      	adds	r0, #1
 8015932:	d1f2      	bne.n	801591a <sbrk_aligned+0x22>
 8015934:	e7ef      	b.n	8015916 <sbrk_aligned+0x1e>
 8015936:	bf00      	nop
 8015938:	24004a68 	.word	0x24004a68

0801593c <_malloc_r>:
 801593c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015940:	1ccd      	adds	r5, r1, #3
 8015942:	f025 0503 	bic.w	r5, r5, #3
 8015946:	3508      	adds	r5, #8
 8015948:	2d0c      	cmp	r5, #12
 801594a:	bf38      	it	cc
 801594c:	250c      	movcc	r5, #12
 801594e:	2d00      	cmp	r5, #0
 8015950:	4606      	mov	r6, r0
 8015952:	db01      	blt.n	8015958 <_malloc_r+0x1c>
 8015954:	42a9      	cmp	r1, r5
 8015956:	d904      	bls.n	8015962 <_malloc_r+0x26>
 8015958:	230c      	movs	r3, #12
 801595a:	6033      	str	r3, [r6, #0]
 801595c:	2000      	movs	r0, #0
 801595e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015962:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015a38 <_malloc_r+0xfc>
 8015966:	f000 f869 	bl	8015a3c <__malloc_lock>
 801596a:	f8d8 3000 	ldr.w	r3, [r8]
 801596e:	461c      	mov	r4, r3
 8015970:	bb44      	cbnz	r4, 80159c4 <_malloc_r+0x88>
 8015972:	4629      	mov	r1, r5
 8015974:	4630      	mov	r0, r6
 8015976:	f7ff ffbf 	bl	80158f8 <sbrk_aligned>
 801597a:	1c43      	adds	r3, r0, #1
 801597c:	4604      	mov	r4, r0
 801597e:	d158      	bne.n	8015a32 <_malloc_r+0xf6>
 8015980:	f8d8 4000 	ldr.w	r4, [r8]
 8015984:	4627      	mov	r7, r4
 8015986:	2f00      	cmp	r7, #0
 8015988:	d143      	bne.n	8015a12 <_malloc_r+0xd6>
 801598a:	2c00      	cmp	r4, #0
 801598c:	d04b      	beq.n	8015a26 <_malloc_r+0xea>
 801598e:	6823      	ldr	r3, [r4, #0]
 8015990:	4639      	mov	r1, r7
 8015992:	4630      	mov	r0, r6
 8015994:	eb04 0903 	add.w	r9, r4, r3
 8015998:	f000 fc70 	bl	801627c <_sbrk_r>
 801599c:	4581      	cmp	r9, r0
 801599e:	d142      	bne.n	8015a26 <_malloc_r+0xea>
 80159a0:	6821      	ldr	r1, [r4, #0]
 80159a2:	1a6d      	subs	r5, r5, r1
 80159a4:	4629      	mov	r1, r5
 80159a6:	4630      	mov	r0, r6
 80159a8:	f7ff ffa6 	bl	80158f8 <sbrk_aligned>
 80159ac:	3001      	adds	r0, #1
 80159ae:	d03a      	beq.n	8015a26 <_malloc_r+0xea>
 80159b0:	6823      	ldr	r3, [r4, #0]
 80159b2:	442b      	add	r3, r5
 80159b4:	6023      	str	r3, [r4, #0]
 80159b6:	f8d8 3000 	ldr.w	r3, [r8]
 80159ba:	685a      	ldr	r2, [r3, #4]
 80159bc:	bb62      	cbnz	r2, 8015a18 <_malloc_r+0xdc>
 80159be:	f8c8 7000 	str.w	r7, [r8]
 80159c2:	e00f      	b.n	80159e4 <_malloc_r+0xa8>
 80159c4:	6822      	ldr	r2, [r4, #0]
 80159c6:	1b52      	subs	r2, r2, r5
 80159c8:	d420      	bmi.n	8015a0c <_malloc_r+0xd0>
 80159ca:	2a0b      	cmp	r2, #11
 80159cc:	d917      	bls.n	80159fe <_malloc_r+0xc2>
 80159ce:	1961      	adds	r1, r4, r5
 80159d0:	42a3      	cmp	r3, r4
 80159d2:	6025      	str	r5, [r4, #0]
 80159d4:	bf18      	it	ne
 80159d6:	6059      	strne	r1, [r3, #4]
 80159d8:	6863      	ldr	r3, [r4, #4]
 80159da:	bf08      	it	eq
 80159dc:	f8c8 1000 	streq.w	r1, [r8]
 80159e0:	5162      	str	r2, [r4, r5]
 80159e2:	604b      	str	r3, [r1, #4]
 80159e4:	4630      	mov	r0, r6
 80159e6:	f000 f82f 	bl	8015a48 <__malloc_unlock>
 80159ea:	f104 000b 	add.w	r0, r4, #11
 80159ee:	1d23      	adds	r3, r4, #4
 80159f0:	f020 0007 	bic.w	r0, r0, #7
 80159f4:	1ac2      	subs	r2, r0, r3
 80159f6:	bf1c      	itt	ne
 80159f8:	1a1b      	subne	r3, r3, r0
 80159fa:	50a3      	strne	r3, [r4, r2]
 80159fc:	e7af      	b.n	801595e <_malloc_r+0x22>
 80159fe:	6862      	ldr	r2, [r4, #4]
 8015a00:	42a3      	cmp	r3, r4
 8015a02:	bf0c      	ite	eq
 8015a04:	f8c8 2000 	streq.w	r2, [r8]
 8015a08:	605a      	strne	r2, [r3, #4]
 8015a0a:	e7eb      	b.n	80159e4 <_malloc_r+0xa8>
 8015a0c:	4623      	mov	r3, r4
 8015a0e:	6864      	ldr	r4, [r4, #4]
 8015a10:	e7ae      	b.n	8015970 <_malloc_r+0x34>
 8015a12:	463c      	mov	r4, r7
 8015a14:	687f      	ldr	r7, [r7, #4]
 8015a16:	e7b6      	b.n	8015986 <_malloc_r+0x4a>
 8015a18:	461a      	mov	r2, r3
 8015a1a:	685b      	ldr	r3, [r3, #4]
 8015a1c:	42a3      	cmp	r3, r4
 8015a1e:	d1fb      	bne.n	8015a18 <_malloc_r+0xdc>
 8015a20:	2300      	movs	r3, #0
 8015a22:	6053      	str	r3, [r2, #4]
 8015a24:	e7de      	b.n	80159e4 <_malloc_r+0xa8>
 8015a26:	230c      	movs	r3, #12
 8015a28:	6033      	str	r3, [r6, #0]
 8015a2a:	4630      	mov	r0, r6
 8015a2c:	f000 f80c 	bl	8015a48 <__malloc_unlock>
 8015a30:	e794      	b.n	801595c <_malloc_r+0x20>
 8015a32:	6005      	str	r5, [r0, #0]
 8015a34:	e7d6      	b.n	80159e4 <_malloc_r+0xa8>
 8015a36:	bf00      	nop
 8015a38:	24004a6c 	.word	0x24004a6c

08015a3c <__malloc_lock>:
 8015a3c:	4801      	ldr	r0, [pc, #4]	@ (8015a44 <__malloc_lock+0x8>)
 8015a3e:	f7ff bf00 	b.w	8015842 <__retarget_lock_acquire_recursive>
 8015a42:	bf00      	nop
 8015a44:	24004a64 	.word	0x24004a64

08015a48 <__malloc_unlock>:
 8015a48:	4801      	ldr	r0, [pc, #4]	@ (8015a50 <__malloc_unlock+0x8>)
 8015a4a:	f7ff befb 	b.w	8015844 <__retarget_lock_release_recursive>
 8015a4e:	bf00      	nop
 8015a50:	24004a64 	.word	0x24004a64

08015a54 <__ssputs_r>:
 8015a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a58:	688e      	ldr	r6, [r1, #8]
 8015a5a:	461f      	mov	r7, r3
 8015a5c:	42be      	cmp	r6, r7
 8015a5e:	680b      	ldr	r3, [r1, #0]
 8015a60:	4682      	mov	sl, r0
 8015a62:	460c      	mov	r4, r1
 8015a64:	4690      	mov	r8, r2
 8015a66:	d82d      	bhi.n	8015ac4 <__ssputs_r+0x70>
 8015a68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015a6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015a70:	d026      	beq.n	8015ac0 <__ssputs_r+0x6c>
 8015a72:	6965      	ldr	r5, [r4, #20]
 8015a74:	6909      	ldr	r1, [r1, #16]
 8015a76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015a7a:	eba3 0901 	sub.w	r9, r3, r1
 8015a7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015a82:	1c7b      	adds	r3, r7, #1
 8015a84:	444b      	add	r3, r9
 8015a86:	106d      	asrs	r5, r5, #1
 8015a88:	429d      	cmp	r5, r3
 8015a8a:	bf38      	it	cc
 8015a8c:	461d      	movcc	r5, r3
 8015a8e:	0553      	lsls	r3, r2, #21
 8015a90:	d527      	bpl.n	8015ae2 <__ssputs_r+0x8e>
 8015a92:	4629      	mov	r1, r5
 8015a94:	f7ff ff52 	bl	801593c <_malloc_r>
 8015a98:	4606      	mov	r6, r0
 8015a9a:	b360      	cbz	r0, 8015af6 <__ssputs_r+0xa2>
 8015a9c:	6921      	ldr	r1, [r4, #16]
 8015a9e:	464a      	mov	r2, r9
 8015aa0:	f7ff fed1 	bl	8015846 <memcpy>
 8015aa4:	89a3      	ldrh	r3, [r4, #12]
 8015aa6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015aae:	81a3      	strh	r3, [r4, #12]
 8015ab0:	6126      	str	r6, [r4, #16]
 8015ab2:	6165      	str	r5, [r4, #20]
 8015ab4:	444e      	add	r6, r9
 8015ab6:	eba5 0509 	sub.w	r5, r5, r9
 8015aba:	6026      	str	r6, [r4, #0]
 8015abc:	60a5      	str	r5, [r4, #8]
 8015abe:	463e      	mov	r6, r7
 8015ac0:	42be      	cmp	r6, r7
 8015ac2:	d900      	bls.n	8015ac6 <__ssputs_r+0x72>
 8015ac4:	463e      	mov	r6, r7
 8015ac6:	6820      	ldr	r0, [r4, #0]
 8015ac8:	4632      	mov	r2, r6
 8015aca:	4641      	mov	r1, r8
 8015acc:	f7ff fe26 	bl	801571c <memmove>
 8015ad0:	68a3      	ldr	r3, [r4, #8]
 8015ad2:	1b9b      	subs	r3, r3, r6
 8015ad4:	60a3      	str	r3, [r4, #8]
 8015ad6:	6823      	ldr	r3, [r4, #0]
 8015ad8:	4433      	add	r3, r6
 8015ada:	6023      	str	r3, [r4, #0]
 8015adc:	2000      	movs	r0, #0
 8015ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ae2:	462a      	mov	r2, r5
 8015ae4:	f000 fbda 	bl	801629c <_realloc_r>
 8015ae8:	4606      	mov	r6, r0
 8015aea:	2800      	cmp	r0, #0
 8015aec:	d1e0      	bne.n	8015ab0 <__ssputs_r+0x5c>
 8015aee:	6921      	ldr	r1, [r4, #16]
 8015af0:	4650      	mov	r0, sl
 8015af2:	f7ff feb7 	bl	8015864 <_free_r>
 8015af6:	230c      	movs	r3, #12
 8015af8:	f8ca 3000 	str.w	r3, [sl]
 8015afc:	89a3      	ldrh	r3, [r4, #12]
 8015afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015b02:	81a3      	strh	r3, [r4, #12]
 8015b04:	f04f 30ff 	mov.w	r0, #4294967295
 8015b08:	e7e9      	b.n	8015ade <__ssputs_r+0x8a>
	...

08015b0c <_svfiprintf_r>:
 8015b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b10:	4698      	mov	r8, r3
 8015b12:	898b      	ldrh	r3, [r1, #12]
 8015b14:	061b      	lsls	r3, r3, #24
 8015b16:	b09d      	sub	sp, #116	@ 0x74
 8015b18:	4607      	mov	r7, r0
 8015b1a:	460d      	mov	r5, r1
 8015b1c:	4614      	mov	r4, r2
 8015b1e:	d510      	bpl.n	8015b42 <_svfiprintf_r+0x36>
 8015b20:	690b      	ldr	r3, [r1, #16]
 8015b22:	b973      	cbnz	r3, 8015b42 <_svfiprintf_r+0x36>
 8015b24:	2140      	movs	r1, #64	@ 0x40
 8015b26:	f7ff ff09 	bl	801593c <_malloc_r>
 8015b2a:	6028      	str	r0, [r5, #0]
 8015b2c:	6128      	str	r0, [r5, #16]
 8015b2e:	b930      	cbnz	r0, 8015b3e <_svfiprintf_r+0x32>
 8015b30:	230c      	movs	r3, #12
 8015b32:	603b      	str	r3, [r7, #0]
 8015b34:	f04f 30ff 	mov.w	r0, #4294967295
 8015b38:	b01d      	add	sp, #116	@ 0x74
 8015b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b3e:	2340      	movs	r3, #64	@ 0x40
 8015b40:	616b      	str	r3, [r5, #20]
 8015b42:	2300      	movs	r3, #0
 8015b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8015b46:	2320      	movs	r3, #32
 8015b48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015b50:	2330      	movs	r3, #48	@ 0x30
 8015b52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015cf0 <_svfiprintf_r+0x1e4>
 8015b56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015b5a:	f04f 0901 	mov.w	r9, #1
 8015b5e:	4623      	mov	r3, r4
 8015b60:	469a      	mov	sl, r3
 8015b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015b66:	b10a      	cbz	r2, 8015b6c <_svfiprintf_r+0x60>
 8015b68:	2a25      	cmp	r2, #37	@ 0x25
 8015b6a:	d1f9      	bne.n	8015b60 <_svfiprintf_r+0x54>
 8015b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8015b70:	d00b      	beq.n	8015b8a <_svfiprintf_r+0x7e>
 8015b72:	465b      	mov	r3, fp
 8015b74:	4622      	mov	r2, r4
 8015b76:	4629      	mov	r1, r5
 8015b78:	4638      	mov	r0, r7
 8015b7a:	f7ff ff6b 	bl	8015a54 <__ssputs_r>
 8015b7e:	3001      	adds	r0, #1
 8015b80:	f000 80a7 	beq.w	8015cd2 <_svfiprintf_r+0x1c6>
 8015b84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015b86:	445a      	add	r2, fp
 8015b88:	9209      	str	r2, [sp, #36]	@ 0x24
 8015b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	f000 809f 	beq.w	8015cd2 <_svfiprintf_r+0x1c6>
 8015b94:	2300      	movs	r3, #0
 8015b96:	f04f 32ff 	mov.w	r2, #4294967295
 8015b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015b9e:	f10a 0a01 	add.w	sl, sl, #1
 8015ba2:	9304      	str	r3, [sp, #16]
 8015ba4:	9307      	str	r3, [sp, #28]
 8015ba6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015baa:	931a      	str	r3, [sp, #104]	@ 0x68
 8015bac:	4654      	mov	r4, sl
 8015bae:	2205      	movs	r2, #5
 8015bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bb4:	484e      	ldr	r0, [pc, #312]	@ (8015cf0 <_svfiprintf_r+0x1e4>)
 8015bb6:	f7ea fc13 	bl	80003e0 <memchr>
 8015bba:	9a04      	ldr	r2, [sp, #16]
 8015bbc:	b9d8      	cbnz	r0, 8015bf6 <_svfiprintf_r+0xea>
 8015bbe:	06d0      	lsls	r0, r2, #27
 8015bc0:	bf44      	itt	mi
 8015bc2:	2320      	movmi	r3, #32
 8015bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015bc8:	0711      	lsls	r1, r2, #28
 8015bca:	bf44      	itt	mi
 8015bcc:	232b      	movmi	r3, #43	@ 0x2b
 8015bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8015bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8015bd8:	d015      	beq.n	8015c06 <_svfiprintf_r+0xfa>
 8015bda:	9a07      	ldr	r2, [sp, #28]
 8015bdc:	4654      	mov	r4, sl
 8015bde:	2000      	movs	r0, #0
 8015be0:	f04f 0c0a 	mov.w	ip, #10
 8015be4:	4621      	mov	r1, r4
 8015be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015bea:	3b30      	subs	r3, #48	@ 0x30
 8015bec:	2b09      	cmp	r3, #9
 8015bee:	d94b      	bls.n	8015c88 <_svfiprintf_r+0x17c>
 8015bf0:	b1b0      	cbz	r0, 8015c20 <_svfiprintf_r+0x114>
 8015bf2:	9207      	str	r2, [sp, #28]
 8015bf4:	e014      	b.n	8015c20 <_svfiprintf_r+0x114>
 8015bf6:	eba0 0308 	sub.w	r3, r0, r8
 8015bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8015bfe:	4313      	orrs	r3, r2
 8015c00:	9304      	str	r3, [sp, #16]
 8015c02:	46a2      	mov	sl, r4
 8015c04:	e7d2      	b.n	8015bac <_svfiprintf_r+0xa0>
 8015c06:	9b03      	ldr	r3, [sp, #12]
 8015c08:	1d19      	adds	r1, r3, #4
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	9103      	str	r1, [sp, #12]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	bfbb      	ittet	lt
 8015c12:	425b      	neglt	r3, r3
 8015c14:	f042 0202 	orrlt.w	r2, r2, #2
 8015c18:	9307      	strge	r3, [sp, #28]
 8015c1a:	9307      	strlt	r3, [sp, #28]
 8015c1c:	bfb8      	it	lt
 8015c1e:	9204      	strlt	r2, [sp, #16]
 8015c20:	7823      	ldrb	r3, [r4, #0]
 8015c22:	2b2e      	cmp	r3, #46	@ 0x2e
 8015c24:	d10a      	bne.n	8015c3c <_svfiprintf_r+0x130>
 8015c26:	7863      	ldrb	r3, [r4, #1]
 8015c28:	2b2a      	cmp	r3, #42	@ 0x2a
 8015c2a:	d132      	bne.n	8015c92 <_svfiprintf_r+0x186>
 8015c2c:	9b03      	ldr	r3, [sp, #12]
 8015c2e:	1d1a      	adds	r2, r3, #4
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	9203      	str	r2, [sp, #12]
 8015c34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015c38:	3402      	adds	r4, #2
 8015c3a:	9305      	str	r3, [sp, #20]
 8015c3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015d00 <_svfiprintf_r+0x1f4>
 8015c40:	7821      	ldrb	r1, [r4, #0]
 8015c42:	2203      	movs	r2, #3
 8015c44:	4650      	mov	r0, sl
 8015c46:	f7ea fbcb 	bl	80003e0 <memchr>
 8015c4a:	b138      	cbz	r0, 8015c5c <_svfiprintf_r+0x150>
 8015c4c:	9b04      	ldr	r3, [sp, #16]
 8015c4e:	eba0 000a 	sub.w	r0, r0, sl
 8015c52:	2240      	movs	r2, #64	@ 0x40
 8015c54:	4082      	lsls	r2, r0
 8015c56:	4313      	orrs	r3, r2
 8015c58:	3401      	adds	r4, #1
 8015c5a:	9304      	str	r3, [sp, #16]
 8015c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c60:	4824      	ldr	r0, [pc, #144]	@ (8015cf4 <_svfiprintf_r+0x1e8>)
 8015c62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015c66:	2206      	movs	r2, #6
 8015c68:	f7ea fbba 	bl	80003e0 <memchr>
 8015c6c:	2800      	cmp	r0, #0
 8015c6e:	d036      	beq.n	8015cde <_svfiprintf_r+0x1d2>
 8015c70:	4b21      	ldr	r3, [pc, #132]	@ (8015cf8 <_svfiprintf_r+0x1ec>)
 8015c72:	bb1b      	cbnz	r3, 8015cbc <_svfiprintf_r+0x1b0>
 8015c74:	9b03      	ldr	r3, [sp, #12]
 8015c76:	3307      	adds	r3, #7
 8015c78:	f023 0307 	bic.w	r3, r3, #7
 8015c7c:	3308      	adds	r3, #8
 8015c7e:	9303      	str	r3, [sp, #12]
 8015c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015c82:	4433      	add	r3, r6
 8015c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8015c86:	e76a      	b.n	8015b5e <_svfiprintf_r+0x52>
 8015c88:	fb0c 3202 	mla	r2, ip, r2, r3
 8015c8c:	460c      	mov	r4, r1
 8015c8e:	2001      	movs	r0, #1
 8015c90:	e7a8      	b.n	8015be4 <_svfiprintf_r+0xd8>
 8015c92:	2300      	movs	r3, #0
 8015c94:	3401      	adds	r4, #1
 8015c96:	9305      	str	r3, [sp, #20]
 8015c98:	4619      	mov	r1, r3
 8015c9a:	f04f 0c0a 	mov.w	ip, #10
 8015c9e:	4620      	mov	r0, r4
 8015ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ca4:	3a30      	subs	r2, #48	@ 0x30
 8015ca6:	2a09      	cmp	r2, #9
 8015ca8:	d903      	bls.n	8015cb2 <_svfiprintf_r+0x1a6>
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d0c6      	beq.n	8015c3c <_svfiprintf_r+0x130>
 8015cae:	9105      	str	r1, [sp, #20]
 8015cb0:	e7c4      	b.n	8015c3c <_svfiprintf_r+0x130>
 8015cb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8015cb6:	4604      	mov	r4, r0
 8015cb8:	2301      	movs	r3, #1
 8015cba:	e7f0      	b.n	8015c9e <_svfiprintf_r+0x192>
 8015cbc:	ab03      	add	r3, sp, #12
 8015cbe:	9300      	str	r3, [sp, #0]
 8015cc0:	462a      	mov	r2, r5
 8015cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8015cfc <_svfiprintf_r+0x1f0>)
 8015cc4:	a904      	add	r1, sp, #16
 8015cc6:	4638      	mov	r0, r7
 8015cc8:	f3af 8000 	nop.w
 8015ccc:	1c42      	adds	r2, r0, #1
 8015cce:	4606      	mov	r6, r0
 8015cd0:	d1d6      	bne.n	8015c80 <_svfiprintf_r+0x174>
 8015cd2:	89ab      	ldrh	r3, [r5, #12]
 8015cd4:	065b      	lsls	r3, r3, #25
 8015cd6:	f53f af2d 	bmi.w	8015b34 <_svfiprintf_r+0x28>
 8015cda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015cdc:	e72c      	b.n	8015b38 <_svfiprintf_r+0x2c>
 8015cde:	ab03      	add	r3, sp, #12
 8015ce0:	9300      	str	r3, [sp, #0]
 8015ce2:	462a      	mov	r2, r5
 8015ce4:	4b05      	ldr	r3, [pc, #20]	@ (8015cfc <_svfiprintf_r+0x1f0>)
 8015ce6:	a904      	add	r1, sp, #16
 8015ce8:	4638      	mov	r0, r7
 8015cea:	f000 f879 	bl	8015de0 <_printf_i>
 8015cee:	e7ed      	b.n	8015ccc <_svfiprintf_r+0x1c0>
 8015cf0:	0802a07c 	.word	0x0802a07c
 8015cf4:	0802a086 	.word	0x0802a086
 8015cf8:	00000000 	.word	0x00000000
 8015cfc:	08015a55 	.word	0x08015a55
 8015d00:	0802a082 	.word	0x0802a082

08015d04 <_printf_common>:
 8015d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d08:	4616      	mov	r6, r2
 8015d0a:	4698      	mov	r8, r3
 8015d0c:	688a      	ldr	r2, [r1, #8]
 8015d0e:	690b      	ldr	r3, [r1, #16]
 8015d10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015d14:	4293      	cmp	r3, r2
 8015d16:	bfb8      	it	lt
 8015d18:	4613      	movlt	r3, r2
 8015d1a:	6033      	str	r3, [r6, #0]
 8015d1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015d20:	4607      	mov	r7, r0
 8015d22:	460c      	mov	r4, r1
 8015d24:	b10a      	cbz	r2, 8015d2a <_printf_common+0x26>
 8015d26:	3301      	adds	r3, #1
 8015d28:	6033      	str	r3, [r6, #0]
 8015d2a:	6823      	ldr	r3, [r4, #0]
 8015d2c:	0699      	lsls	r1, r3, #26
 8015d2e:	bf42      	ittt	mi
 8015d30:	6833      	ldrmi	r3, [r6, #0]
 8015d32:	3302      	addmi	r3, #2
 8015d34:	6033      	strmi	r3, [r6, #0]
 8015d36:	6825      	ldr	r5, [r4, #0]
 8015d38:	f015 0506 	ands.w	r5, r5, #6
 8015d3c:	d106      	bne.n	8015d4c <_printf_common+0x48>
 8015d3e:	f104 0a19 	add.w	sl, r4, #25
 8015d42:	68e3      	ldr	r3, [r4, #12]
 8015d44:	6832      	ldr	r2, [r6, #0]
 8015d46:	1a9b      	subs	r3, r3, r2
 8015d48:	42ab      	cmp	r3, r5
 8015d4a:	dc26      	bgt.n	8015d9a <_printf_common+0x96>
 8015d4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015d50:	6822      	ldr	r2, [r4, #0]
 8015d52:	3b00      	subs	r3, #0
 8015d54:	bf18      	it	ne
 8015d56:	2301      	movne	r3, #1
 8015d58:	0692      	lsls	r2, r2, #26
 8015d5a:	d42b      	bmi.n	8015db4 <_printf_common+0xb0>
 8015d5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015d60:	4641      	mov	r1, r8
 8015d62:	4638      	mov	r0, r7
 8015d64:	47c8      	blx	r9
 8015d66:	3001      	adds	r0, #1
 8015d68:	d01e      	beq.n	8015da8 <_printf_common+0xa4>
 8015d6a:	6823      	ldr	r3, [r4, #0]
 8015d6c:	6922      	ldr	r2, [r4, #16]
 8015d6e:	f003 0306 	and.w	r3, r3, #6
 8015d72:	2b04      	cmp	r3, #4
 8015d74:	bf02      	ittt	eq
 8015d76:	68e5      	ldreq	r5, [r4, #12]
 8015d78:	6833      	ldreq	r3, [r6, #0]
 8015d7a:	1aed      	subeq	r5, r5, r3
 8015d7c:	68a3      	ldr	r3, [r4, #8]
 8015d7e:	bf0c      	ite	eq
 8015d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015d84:	2500      	movne	r5, #0
 8015d86:	4293      	cmp	r3, r2
 8015d88:	bfc4      	itt	gt
 8015d8a:	1a9b      	subgt	r3, r3, r2
 8015d8c:	18ed      	addgt	r5, r5, r3
 8015d8e:	2600      	movs	r6, #0
 8015d90:	341a      	adds	r4, #26
 8015d92:	42b5      	cmp	r5, r6
 8015d94:	d11a      	bne.n	8015dcc <_printf_common+0xc8>
 8015d96:	2000      	movs	r0, #0
 8015d98:	e008      	b.n	8015dac <_printf_common+0xa8>
 8015d9a:	2301      	movs	r3, #1
 8015d9c:	4652      	mov	r2, sl
 8015d9e:	4641      	mov	r1, r8
 8015da0:	4638      	mov	r0, r7
 8015da2:	47c8      	blx	r9
 8015da4:	3001      	adds	r0, #1
 8015da6:	d103      	bne.n	8015db0 <_printf_common+0xac>
 8015da8:	f04f 30ff 	mov.w	r0, #4294967295
 8015dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015db0:	3501      	adds	r5, #1
 8015db2:	e7c6      	b.n	8015d42 <_printf_common+0x3e>
 8015db4:	18e1      	adds	r1, r4, r3
 8015db6:	1c5a      	adds	r2, r3, #1
 8015db8:	2030      	movs	r0, #48	@ 0x30
 8015dba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015dbe:	4422      	add	r2, r4
 8015dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015dc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015dc8:	3302      	adds	r3, #2
 8015dca:	e7c7      	b.n	8015d5c <_printf_common+0x58>
 8015dcc:	2301      	movs	r3, #1
 8015dce:	4622      	mov	r2, r4
 8015dd0:	4641      	mov	r1, r8
 8015dd2:	4638      	mov	r0, r7
 8015dd4:	47c8      	blx	r9
 8015dd6:	3001      	adds	r0, #1
 8015dd8:	d0e6      	beq.n	8015da8 <_printf_common+0xa4>
 8015dda:	3601      	adds	r6, #1
 8015ddc:	e7d9      	b.n	8015d92 <_printf_common+0x8e>
	...

08015de0 <_printf_i>:
 8015de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015de4:	7e0f      	ldrb	r7, [r1, #24]
 8015de6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015de8:	2f78      	cmp	r7, #120	@ 0x78
 8015dea:	4691      	mov	r9, r2
 8015dec:	4680      	mov	r8, r0
 8015dee:	460c      	mov	r4, r1
 8015df0:	469a      	mov	sl, r3
 8015df2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015df6:	d807      	bhi.n	8015e08 <_printf_i+0x28>
 8015df8:	2f62      	cmp	r7, #98	@ 0x62
 8015dfa:	d80a      	bhi.n	8015e12 <_printf_i+0x32>
 8015dfc:	2f00      	cmp	r7, #0
 8015dfe:	f000 80d1 	beq.w	8015fa4 <_printf_i+0x1c4>
 8015e02:	2f58      	cmp	r7, #88	@ 0x58
 8015e04:	f000 80b8 	beq.w	8015f78 <_printf_i+0x198>
 8015e08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015e0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015e10:	e03a      	b.n	8015e88 <_printf_i+0xa8>
 8015e12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015e16:	2b15      	cmp	r3, #21
 8015e18:	d8f6      	bhi.n	8015e08 <_printf_i+0x28>
 8015e1a:	a101      	add	r1, pc, #4	@ (adr r1, 8015e20 <_printf_i+0x40>)
 8015e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015e20:	08015e79 	.word	0x08015e79
 8015e24:	08015e8d 	.word	0x08015e8d
 8015e28:	08015e09 	.word	0x08015e09
 8015e2c:	08015e09 	.word	0x08015e09
 8015e30:	08015e09 	.word	0x08015e09
 8015e34:	08015e09 	.word	0x08015e09
 8015e38:	08015e8d 	.word	0x08015e8d
 8015e3c:	08015e09 	.word	0x08015e09
 8015e40:	08015e09 	.word	0x08015e09
 8015e44:	08015e09 	.word	0x08015e09
 8015e48:	08015e09 	.word	0x08015e09
 8015e4c:	08015f8b 	.word	0x08015f8b
 8015e50:	08015eb7 	.word	0x08015eb7
 8015e54:	08015f45 	.word	0x08015f45
 8015e58:	08015e09 	.word	0x08015e09
 8015e5c:	08015e09 	.word	0x08015e09
 8015e60:	08015fad 	.word	0x08015fad
 8015e64:	08015e09 	.word	0x08015e09
 8015e68:	08015eb7 	.word	0x08015eb7
 8015e6c:	08015e09 	.word	0x08015e09
 8015e70:	08015e09 	.word	0x08015e09
 8015e74:	08015f4d 	.word	0x08015f4d
 8015e78:	6833      	ldr	r3, [r6, #0]
 8015e7a:	1d1a      	adds	r2, r3, #4
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	6032      	str	r2, [r6, #0]
 8015e80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015e84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015e88:	2301      	movs	r3, #1
 8015e8a:	e09c      	b.n	8015fc6 <_printf_i+0x1e6>
 8015e8c:	6833      	ldr	r3, [r6, #0]
 8015e8e:	6820      	ldr	r0, [r4, #0]
 8015e90:	1d19      	adds	r1, r3, #4
 8015e92:	6031      	str	r1, [r6, #0]
 8015e94:	0606      	lsls	r6, r0, #24
 8015e96:	d501      	bpl.n	8015e9c <_printf_i+0xbc>
 8015e98:	681d      	ldr	r5, [r3, #0]
 8015e9a:	e003      	b.n	8015ea4 <_printf_i+0xc4>
 8015e9c:	0645      	lsls	r5, r0, #25
 8015e9e:	d5fb      	bpl.n	8015e98 <_printf_i+0xb8>
 8015ea0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015ea4:	2d00      	cmp	r5, #0
 8015ea6:	da03      	bge.n	8015eb0 <_printf_i+0xd0>
 8015ea8:	232d      	movs	r3, #45	@ 0x2d
 8015eaa:	426d      	negs	r5, r5
 8015eac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015eb0:	4858      	ldr	r0, [pc, #352]	@ (8016014 <_printf_i+0x234>)
 8015eb2:	230a      	movs	r3, #10
 8015eb4:	e011      	b.n	8015eda <_printf_i+0xfa>
 8015eb6:	6821      	ldr	r1, [r4, #0]
 8015eb8:	6833      	ldr	r3, [r6, #0]
 8015eba:	0608      	lsls	r0, r1, #24
 8015ebc:	f853 5b04 	ldr.w	r5, [r3], #4
 8015ec0:	d402      	bmi.n	8015ec8 <_printf_i+0xe8>
 8015ec2:	0649      	lsls	r1, r1, #25
 8015ec4:	bf48      	it	mi
 8015ec6:	b2ad      	uxthmi	r5, r5
 8015ec8:	2f6f      	cmp	r7, #111	@ 0x6f
 8015eca:	4852      	ldr	r0, [pc, #328]	@ (8016014 <_printf_i+0x234>)
 8015ecc:	6033      	str	r3, [r6, #0]
 8015ece:	bf14      	ite	ne
 8015ed0:	230a      	movne	r3, #10
 8015ed2:	2308      	moveq	r3, #8
 8015ed4:	2100      	movs	r1, #0
 8015ed6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015eda:	6866      	ldr	r6, [r4, #4]
 8015edc:	60a6      	str	r6, [r4, #8]
 8015ede:	2e00      	cmp	r6, #0
 8015ee0:	db05      	blt.n	8015eee <_printf_i+0x10e>
 8015ee2:	6821      	ldr	r1, [r4, #0]
 8015ee4:	432e      	orrs	r6, r5
 8015ee6:	f021 0104 	bic.w	r1, r1, #4
 8015eea:	6021      	str	r1, [r4, #0]
 8015eec:	d04b      	beq.n	8015f86 <_printf_i+0x1a6>
 8015eee:	4616      	mov	r6, r2
 8015ef0:	fbb5 f1f3 	udiv	r1, r5, r3
 8015ef4:	fb03 5711 	mls	r7, r3, r1, r5
 8015ef8:	5dc7      	ldrb	r7, [r0, r7]
 8015efa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015efe:	462f      	mov	r7, r5
 8015f00:	42bb      	cmp	r3, r7
 8015f02:	460d      	mov	r5, r1
 8015f04:	d9f4      	bls.n	8015ef0 <_printf_i+0x110>
 8015f06:	2b08      	cmp	r3, #8
 8015f08:	d10b      	bne.n	8015f22 <_printf_i+0x142>
 8015f0a:	6823      	ldr	r3, [r4, #0]
 8015f0c:	07df      	lsls	r7, r3, #31
 8015f0e:	d508      	bpl.n	8015f22 <_printf_i+0x142>
 8015f10:	6923      	ldr	r3, [r4, #16]
 8015f12:	6861      	ldr	r1, [r4, #4]
 8015f14:	4299      	cmp	r1, r3
 8015f16:	bfde      	ittt	le
 8015f18:	2330      	movle	r3, #48	@ 0x30
 8015f1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015f1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015f22:	1b92      	subs	r2, r2, r6
 8015f24:	6122      	str	r2, [r4, #16]
 8015f26:	f8cd a000 	str.w	sl, [sp]
 8015f2a:	464b      	mov	r3, r9
 8015f2c:	aa03      	add	r2, sp, #12
 8015f2e:	4621      	mov	r1, r4
 8015f30:	4640      	mov	r0, r8
 8015f32:	f7ff fee7 	bl	8015d04 <_printf_common>
 8015f36:	3001      	adds	r0, #1
 8015f38:	d14a      	bne.n	8015fd0 <_printf_i+0x1f0>
 8015f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8015f3e:	b004      	add	sp, #16
 8015f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f44:	6823      	ldr	r3, [r4, #0]
 8015f46:	f043 0320 	orr.w	r3, r3, #32
 8015f4a:	6023      	str	r3, [r4, #0]
 8015f4c:	4832      	ldr	r0, [pc, #200]	@ (8016018 <_printf_i+0x238>)
 8015f4e:	2778      	movs	r7, #120	@ 0x78
 8015f50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015f54:	6823      	ldr	r3, [r4, #0]
 8015f56:	6831      	ldr	r1, [r6, #0]
 8015f58:	061f      	lsls	r7, r3, #24
 8015f5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8015f5e:	d402      	bmi.n	8015f66 <_printf_i+0x186>
 8015f60:	065f      	lsls	r7, r3, #25
 8015f62:	bf48      	it	mi
 8015f64:	b2ad      	uxthmi	r5, r5
 8015f66:	6031      	str	r1, [r6, #0]
 8015f68:	07d9      	lsls	r1, r3, #31
 8015f6a:	bf44      	itt	mi
 8015f6c:	f043 0320 	orrmi.w	r3, r3, #32
 8015f70:	6023      	strmi	r3, [r4, #0]
 8015f72:	b11d      	cbz	r5, 8015f7c <_printf_i+0x19c>
 8015f74:	2310      	movs	r3, #16
 8015f76:	e7ad      	b.n	8015ed4 <_printf_i+0xf4>
 8015f78:	4826      	ldr	r0, [pc, #152]	@ (8016014 <_printf_i+0x234>)
 8015f7a:	e7e9      	b.n	8015f50 <_printf_i+0x170>
 8015f7c:	6823      	ldr	r3, [r4, #0]
 8015f7e:	f023 0320 	bic.w	r3, r3, #32
 8015f82:	6023      	str	r3, [r4, #0]
 8015f84:	e7f6      	b.n	8015f74 <_printf_i+0x194>
 8015f86:	4616      	mov	r6, r2
 8015f88:	e7bd      	b.n	8015f06 <_printf_i+0x126>
 8015f8a:	6833      	ldr	r3, [r6, #0]
 8015f8c:	6825      	ldr	r5, [r4, #0]
 8015f8e:	6961      	ldr	r1, [r4, #20]
 8015f90:	1d18      	adds	r0, r3, #4
 8015f92:	6030      	str	r0, [r6, #0]
 8015f94:	062e      	lsls	r6, r5, #24
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	d501      	bpl.n	8015f9e <_printf_i+0x1be>
 8015f9a:	6019      	str	r1, [r3, #0]
 8015f9c:	e002      	b.n	8015fa4 <_printf_i+0x1c4>
 8015f9e:	0668      	lsls	r0, r5, #25
 8015fa0:	d5fb      	bpl.n	8015f9a <_printf_i+0x1ba>
 8015fa2:	8019      	strh	r1, [r3, #0]
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	6123      	str	r3, [r4, #16]
 8015fa8:	4616      	mov	r6, r2
 8015faa:	e7bc      	b.n	8015f26 <_printf_i+0x146>
 8015fac:	6833      	ldr	r3, [r6, #0]
 8015fae:	1d1a      	adds	r2, r3, #4
 8015fb0:	6032      	str	r2, [r6, #0]
 8015fb2:	681e      	ldr	r6, [r3, #0]
 8015fb4:	6862      	ldr	r2, [r4, #4]
 8015fb6:	2100      	movs	r1, #0
 8015fb8:	4630      	mov	r0, r6
 8015fba:	f7ea fa11 	bl	80003e0 <memchr>
 8015fbe:	b108      	cbz	r0, 8015fc4 <_printf_i+0x1e4>
 8015fc0:	1b80      	subs	r0, r0, r6
 8015fc2:	6060      	str	r0, [r4, #4]
 8015fc4:	6863      	ldr	r3, [r4, #4]
 8015fc6:	6123      	str	r3, [r4, #16]
 8015fc8:	2300      	movs	r3, #0
 8015fca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015fce:	e7aa      	b.n	8015f26 <_printf_i+0x146>
 8015fd0:	6923      	ldr	r3, [r4, #16]
 8015fd2:	4632      	mov	r2, r6
 8015fd4:	4649      	mov	r1, r9
 8015fd6:	4640      	mov	r0, r8
 8015fd8:	47d0      	blx	sl
 8015fda:	3001      	adds	r0, #1
 8015fdc:	d0ad      	beq.n	8015f3a <_printf_i+0x15a>
 8015fde:	6823      	ldr	r3, [r4, #0]
 8015fe0:	079b      	lsls	r3, r3, #30
 8015fe2:	d413      	bmi.n	801600c <_printf_i+0x22c>
 8015fe4:	68e0      	ldr	r0, [r4, #12]
 8015fe6:	9b03      	ldr	r3, [sp, #12]
 8015fe8:	4298      	cmp	r0, r3
 8015fea:	bfb8      	it	lt
 8015fec:	4618      	movlt	r0, r3
 8015fee:	e7a6      	b.n	8015f3e <_printf_i+0x15e>
 8015ff0:	2301      	movs	r3, #1
 8015ff2:	4632      	mov	r2, r6
 8015ff4:	4649      	mov	r1, r9
 8015ff6:	4640      	mov	r0, r8
 8015ff8:	47d0      	blx	sl
 8015ffa:	3001      	adds	r0, #1
 8015ffc:	d09d      	beq.n	8015f3a <_printf_i+0x15a>
 8015ffe:	3501      	adds	r5, #1
 8016000:	68e3      	ldr	r3, [r4, #12]
 8016002:	9903      	ldr	r1, [sp, #12]
 8016004:	1a5b      	subs	r3, r3, r1
 8016006:	42ab      	cmp	r3, r5
 8016008:	dcf2      	bgt.n	8015ff0 <_printf_i+0x210>
 801600a:	e7eb      	b.n	8015fe4 <_printf_i+0x204>
 801600c:	2500      	movs	r5, #0
 801600e:	f104 0619 	add.w	r6, r4, #25
 8016012:	e7f5      	b.n	8016000 <_printf_i+0x220>
 8016014:	0802a08d 	.word	0x0802a08d
 8016018:	0802a09e 	.word	0x0802a09e

0801601c <__sflush_r>:
 801601c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016024:	0716      	lsls	r6, r2, #28
 8016026:	4605      	mov	r5, r0
 8016028:	460c      	mov	r4, r1
 801602a:	d454      	bmi.n	80160d6 <__sflush_r+0xba>
 801602c:	684b      	ldr	r3, [r1, #4]
 801602e:	2b00      	cmp	r3, #0
 8016030:	dc02      	bgt.n	8016038 <__sflush_r+0x1c>
 8016032:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016034:	2b00      	cmp	r3, #0
 8016036:	dd48      	ble.n	80160ca <__sflush_r+0xae>
 8016038:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801603a:	2e00      	cmp	r6, #0
 801603c:	d045      	beq.n	80160ca <__sflush_r+0xae>
 801603e:	2300      	movs	r3, #0
 8016040:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016044:	682f      	ldr	r7, [r5, #0]
 8016046:	6a21      	ldr	r1, [r4, #32]
 8016048:	602b      	str	r3, [r5, #0]
 801604a:	d030      	beq.n	80160ae <__sflush_r+0x92>
 801604c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801604e:	89a3      	ldrh	r3, [r4, #12]
 8016050:	0759      	lsls	r1, r3, #29
 8016052:	d505      	bpl.n	8016060 <__sflush_r+0x44>
 8016054:	6863      	ldr	r3, [r4, #4]
 8016056:	1ad2      	subs	r2, r2, r3
 8016058:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801605a:	b10b      	cbz	r3, 8016060 <__sflush_r+0x44>
 801605c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801605e:	1ad2      	subs	r2, r2, r3
 8016060:	2300      	movs	r3, #0
 8016062:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016064:	6a21      	ldr	r1, [r4, #32]
 8016066:	4628      	mov	r0, r5
 8016068:	47b0      	blx	r6
 801606a:	1c43      	adds	r3, r0, #1
 801606c:	89a3      	ldrh	r3, [r4, #12]
 801606e:	d106      	bne.n	801607e <__sflush_r+0x62>
 8016070:	6829      	ldr	r1, [r5, #0]
 8016072:	291d      	cmp	r1, #29
 8016074:	d82b      	bhi.n	80160ce <__sflush_r+0xb2>
 8016076:	4a2a      	ldr	r2, [pc, #168]	@ (8016120 <__sflush_r+0x104>)
 8016078:	40ca      	lsrs	r2, r1
 801607a:	07d6      	lsls	r6, r2, #31
 801607c:	d527      	bpl.n	80160ce <__sflush_r+0xb2>
 801607e:	2200      	movs	r2, #0
 8016080:	6062      	str	r2, [r4, #4]
 8016082:	04d9      	lsls	r1, r3, #19
 8016084:	6922      	ldr	r2, [r4, #16]
 8016086:	6022      	str	r2, [r4, #0]
 8016088:	d504      	bpl.n	8016094 <__sflush_r+0x78>
 801608a:	1c42      	adds	r2, r0, #1
 801608c:	d101      	bne.n	8016092 <__sflush_r+0x76>
 801608e:	682b      	ldr	r3, [r5, #0]
 8016090:	b903      	cbnz	r3, 8016094 <__sflush_r+0x78>
 8016092:	6560      	str	r0, [r4, #84]	@ 0x54
 8016094:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016096:	602f      	str	r7, [r5, #0]
 8016098:	b1b9      	cbz	r1, 80160ca <__sflush_r+0xae>
 801609a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801609e:	4299      	cmp	r1, r3
 80160a0:	d002      	beq.n	80160a8 <__sflush_r+0x8c>
 80160a2:	4628      	mov	r0, r5
 80160a4:	f7ff fbde 	bl	8015864 <_free_r>
 80160a8:	2300      	movs	r3, #0
 80160aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80160ac:	e00d      	b.n	80160ca <__sflush_r+0xae>
 80160ae:	2301      	movs	r3, #1
 80160b0:	4628      	mov	r0, r5
 80160b2:	47b0      	blx	r6
 80160b4:	4602      	mov	r2, r0
 80160b6:	1c50      	adds	r0, r2, #1
 80160b8:	d1c9      	bne.n	801604e <__sflush_r+0x32>
 80160ba:	682b      	ldr	r3, [r5, #0]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d0c6      	beq.n	801604e <__sflush_r+0x32>
 80160c0:	2b1d      	cmp	r3, #29
 80160c2:	d001      	beq.n	80160c8 <__sflush_r+0xac>
 80160c4:	2b16      	cmp	r3, #22
 80160c6:	d11e      	bne.n	8016106 <__sflush_r+0xea>
 80160c8:	602f      	str	r7, [r5, #0]
 80160ca:	2000      	movs	r0, #0
 80160cc:	e022      	b.n	8016114 <__sflush_r+0xf8>
 80160ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80160d2:	b21b      	sxth	r3, r3
 80160d4:	e01b      	b.n	801610e <__sflush_r+0xf2>
 80160d6:	690f      	ldr	r7, [r1, #16]
 80160d8:	2f00      	cmp	r7, #0
 80160da:	d0f6      	beq.n	80160ca <__sflush_r+0xae>
 80160dc:	0793      	lsls	r3, r2, #30
 80160de:	680e      	ldr	r6, [r1, #0]
 80160e0:	bf08      	it	eq
 80160e2:	694b      	ldreq	r3, [r1, #20]
 80160e4:	600f      	str	r7, [r1, #0]
 80160e6:	bf18      	it	ne
 80160e8:	2300      	movne	r3, #0
 80160ea:	eba6 0807 	sub.w	r8, r6, r7
 80160ee:	608b      	str	r3, [r1, #8]
 80160f0:	f1b8 0f00 	cmp.w	r8, #0
 80160f4:	dde9      	ble.n	80160ca <__sflush_r+0xae>
 80160f6:	6a21      	ldr	r1, [r4, #32]
 80160f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80160fa:	4643      	mov	r3, r8
 80160fc:	463a      	mov	r2, r7
 80160fe:	4628      	mov	r0, r5
 8016100:	47b0      	blx	r6
 8016102:	2800      	cmp	r0, #0
 8016104:	dc08      	bgt.n	8016118 <__sflush_r+0xfc>
 8016106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801610a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801610e:	81a3      	strh	r3, [r4, #12]
 8016110:	f04f 30ff 	mov.w	r0, #4294967295
 8016114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016118:	4407      	add	r7, r0
 801611a:	eba8 0800 	sub.w	r8, r8, r0
 801611e:	e7e7      	b.n	80160f0 <__sflush_r+0xd4>
 8016120:	20400001 	.word	0x20400001

08016124 <_fflush_r>:
 8016124:	b538      	push	{r3, r4, r5, lr}
 8016126:	690b      	ldr	r3, [r1, #16]
 8016128:	4605      	mov	r5, r0
 801612a:	460c      	mov	r4, r1
 801612c:	b913      	cbnz	r3, 8016134 <_fflush_r+0x10>
 801612e:	2500      	movs	r5, #0
 8016130:	4628      	mov	r0, r5
 8016132:	bd38      	pop	{r3, r4, r5, pc}
 8016134:	b118      	cbz	r0, 801613e <_fflush_r+0x1a>
 8016136:	6a03      	ldr	r3, [r0, #32]
 8016138:	b90b      	cbnz	r3, 801613e <_fflush_r+0x1a>
 801613a:	f7ff f94d 	bl	80153d8 <__sinit>
 801613e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d0f3      	beq.n	801612e <_fflush_r+0xa>
 8016146:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016148:	07d0      	lsls	r0, r2, #31
 801614a:	d404      	bmi.n	8016156 <_fflush_r+0x32>
 801614c:	0599      	lsls	r1, r3, #22
 801614e:	d402      	bmi.n	8016156 <_fflush_r+0x32>
 8016150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016152:	f7ff fb76 	bl	8015842 <__retarget_lock_acquire_recursive>
 8016156:	4628      	mov	r0, r5
 8016158:	4621      	mov	r1, r4
 801615a:	f7ff ff5f 	bl	801601c <__sflush_r>
 801615e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016160:	07da      	lsls	r2, r3, #31
 8016162:	4605      	mov	r5, r0
 8016164:	d4e4      	bmi.n	8016130 <_fflush_r+0xc>
 8016166:	89a3      	ldrh	r3, [r4, #12]
 8016168:	059b      	lsls	r3, r3, #22
 801616a:	d4e1      	bmi.n	8016130 <_fflush_r+0xc>
 801616c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801616e:	f7ff fb69 	bl	8015844 <__retarget_lock_release_recursive>
 8016172:	e7dd      	b.n	8016130 <_fflush_r+0xc>

08016174 <__swhatbuf_r>:
 8016174:	b570      	push	{r4, r5, r6, lr}
 8016176:	460c      	mov	r4, r1
 8016178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801617c:	2900      	cmp	r1, #0
 801617e:	b096      	sub	sp, #88	@ 0x58
 8016180:	4615      	mov	r5, r2
 8016182:	461e      	mov	r6, r3
 8016184:	da0d      	bge.n	80161a2 <__swhatbuf_r+0x2e>
 8016186:	89a3      	ldrh	r3, [r4, #12]
 8016188:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801618c:	f04f 0100 	mov.w	r1, #0
 8016190:	bf14      	ite	ne
 8016192:	2340      	movne	r3, #64	@ 0x40
 8016194:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016198:	2000      	movs	r0, #0
 801619a:	6031      	str	r1, [r6, #0]
 801619c:	602b      	str	r3, [r5, #0]
 801619e:	b016      	add	sp, #88	@ 0x58
 80161a0:	bd70      	pop	{r4, r5, r6, pc}
 80161a2:	466a      	mov	r2, sp
 80161a4:	f000 f848 	bl	8016238 <_fstat_r>
 80161a8:	2800      	cmp	r0, #0
 80161aa:	dbec      	blt.n	8016186 <__swhatbuf_r+0x12>
 80161ac:	9901      	ldr	r1, [sp, #4]
 80161ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80161b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80161b6:	4259      	negs	r1, r3
 80161b8:	4159      	adcs	r1, r3
 80161ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80161be:	e7eb      	b.n	8016198 <__swhatbuf_r+0x24>

080161c0 <__smakebuf_r>:
 80161c0:	898b      	ldrh	r3, [r1, #12]
 80161c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80161c4:	079d      	lsls	r5, r3, #30
 80161c6:	4606      	mov	r6, r0
 80161c8:	460c      	mov	r4, r1
 80161ca:	d507      	bpl.n	80161dc <__smakebuf_r+0x1c>
 80161cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80161d0:	6023      	str	r3, [r4, #0]
 80161d2:	6123      	str	r3, [r4, #16]
 80161d4:	2301      	movs	r3, #1
 80161d6:	6163      	str	r3, [r4, #20]
 80161d8:	b003      	add	sp, #12
 80161da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161dc:	ab01      	add	r3, sp, #4
 80161de:	466a      	mov	r2, sp
 80161e0:	f7ff ffc8 	bl	8016174 <__swhatbuf_r>
 80161e4:	9f00      	ldr	r7, [sp, #0]
 80161e6:	4605      	mov	r5, r0
 80161e8:	4639      	mov	r1, r7
 80161ea:	4630      	mov	r0, r6
 80161ec:	f7ff fba6 	bl	801593c <_malloc_r>
 80161f0:	b948      	cbnz	r0, 8016206 <__smakebuf_r+0x46>
 80161f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80161f6:	059a      	lsls	r2, r3, #22
 80161f8:	d4ee      	bmi.n	80161d8 <__smakebuf_r+0x18>
 80161fa:	f023 0303 	bic.w	r3, r3, #3
 80161fe:	f043 0302 	orr.w	r3, r3, #2
 8016202:	81a3      	strh	r3, [r4, #12]
 8016204:	e7e2      	b.n	80161cc <__smakebuf_r+0xc>
 8016206:	89a3      	ldrh	r3, [r4, #12]
 8016208:	6020      	str	r0, [r4, #0]
 801620a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801620e:	81a3      	strh	r3, [r4, #12]
 8016210:	9b01      	ldr	r3, [sp, #4]
 8016212:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016216:	b15b      	cbz	r3, 8016230 <__smakebuf_r+0x70>
 8016218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801621c:	4630      	mov	r0, r6
 801621e:	f000 f81d 	bl	801625c <_isatty_r>
 8016222:	b128      	cbz	r0, 8016230 <__smakebuf_r+0x70>
 8016224:	89a3      	ldrh	r3, [r4, #12]
 8016226:	f023 0303 	bic.w	r3, r3, #3
 801622a:	f043 0301 	orr.w	r3, r3, #1
 801622e:	81a3      	strh	r3, [r4, #12]
 8016230:	89a3      	ldrh	r3, [r4, #12]
 8016232:	431d      	orrs	r5, r3
 8016234:	81a5      	strh	r5, [r4, #12]
 8016236:	e7cf      	b.n	80161d8 <__smakebuf_r+0x18>

08016238 <_fstat_r>:
 8016238:	b538      	push	{r3, r4, r5, lr}
 801623a:	4d07      	ldr	r5, [pc, #28]	@ (8016258 <_fstat_r+0x20>)
 801623c:	2300      	movs	r3, #0
 801623e:	4604      	mov	r4, r0
 8016240:	4608      	mov	r0, r1
 8016242:	4611      	mov	r1, r2
 8016244:	602b      	str	r3, [r5, #0]
 8016246:	f7eb fa84 	bl	8001752 <_fstat>
 801624a:	1c43      	adds	r3, r0, #1
 801624c:	d102      	bne.n	8016254 <_fstat_r+0x1c>
 801624e:	682b      	ldr	r3, [r5, #0]
 8016250:	b103      	cbz	r3, 8016254 <_fstat_r+0x1c>
 8016252:	6023      	str	r3, [r4, #0]
 8016254:	bd38      	pop	{r3, r4, r5, pc}
 8016256:	bf00      	nop
 8016258:	24004a60 	.word	0x24004a60

0801625c <_isatty_r>:
 801625c:	b538      	push	{r3, r4, r5, lr}
 801625e:	4d06      	ldr	r5, [pc, #24]	@ (8016278 <_isatty_r+0x1c>)
 8016260:	2300      	movs	r3, #0
 8016262:	4604      	mov	r4, r0
 8016264:	4608      	mov	r0, r1
 8016266:	602b      	str	r3, [r5, #0]
 8016268:	f7eb fa83 	bl	8001772 <_isatty>
 801626c:	1c43      	adds	r3, r0, #1
 801626e:	d102      	bne.n	8016276 <_isatty_r+0x1a>
 8016270:	682b      	ldr	r3, [r5, #0]
 8016272:	b103      	cbz	r3, 8016276 <_isatty_r+0x1a>
 8016274:	6023      	str	r3, [r4, #0]
 8016276:	bd38      	pop	{r3, r4, r5, pc}
 8016278:	24004a60 	.word	0x24004a60

0801627c <_sbrk_r>:
 801627c:	b538      	push	{r3, r4, r5, lr}
 801627e:	4d06      	ldr	r5, [pc, #24]	@ (8016298 <_sbrk_r+0x1c>)
 8016280:	2300      	movs	r3, #0
 8016282:	4604      	mov	r4, r0
 8016284:	4608      	mov	r0, r1
 8016286:	602b      	str	r3, [r5, #0]
 8016288:	f7eb fa8c 	bl	80017a4 <_sbrk>
 801628c:	1c43      	adds	r3, r0, #1
 801628e:	d102      	bne.n	8016296 <_sbrk_r+0x1a>
 8016290:	682b      	ldr	r3, [r5, #0]
 8016292:	b103      	cbz	r3, 8016296 <_sbrk_r+0x1a>
 8016294:	6023      	str	r3, [r4, #0]
 8016296:	bd38      	pop	{r3, r4, r5, pc}
 8016298:	24004a60 	.word	0x24004a60

0801629c <_realloc_r>:
 801629c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162a0:	4607      	mov	r7, r0
 80162a2:	4614      	mov	r4, r2
 80162a4:	460d      	mov	r5, r1
 80162a6:	b921      	cbnz	r1, 80162b2 <_realloc_r+0x16>
 80162a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80162ac:	4611      	mov	r1, r2
 80162ae:	f7ff bb45 	b.w	801593c <_malloc_r>
 80162b2:	b92a      	cbnz	r2, 80162c0 <_realloc_r+0x24>
 80162b4:	f7ff fad6 	bl	8015864 <_free_r>
 80162b8:	4625      	mov	r5, r4
 80162ba:	4628      	mov	r0, r5
 80162bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162c0:	f000 f81a 	bl	80162f8 <_malloc_usable_size_r>
 80162c4:	4284      	cmp	r4, r0
 80162c6:	4606      	mov	r6, r0
 80162c8:	d802      	bhi.n	80162d0 <_realloc_r+0x34>
 80162ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80162ce:	d8f4      	bhi.n	80162ba <_realloc_r+0x1e>
 80162d0:	4621      	mov	r1, r4
 80162d2:	4638      	mov	r0, r7
 80162d4:	f7ff fb32 	bl	801593c <_malloc_r>
 80162d8:	4680      	mov	r8, r0
 80162da:	b908      	cbnz	r0, 80162e0 <_realloc_r+0x44>
 80162dc:	4645      	mov	r5, r8
 80162de:	e7ec      	b.n	80162ba <_realloc_r+0x1e>
 80162e0:	42b4      	cmp	r4, r6
 80162e2:	4622      	mov	r2, r4
 80162e4:	4629      	mov	r1, r5
 80162e6:	bf28      	it	cs
 80162e8:	4632      	movcs	r2, r6
 80162ea:	f7ff faac 	bl	8015846 <memcpy>
 80162ee:	4629      	mov	r1, r5
 80162f0:	4638      	mov	r0, r7
 80162f2:	f7ff fab7 	bl	8015864 <_free_r>
 80162f6:	e7f1      	b.n	80162dc <_realloc_r+0x40>

080162f8 <_malloc_usable_size_r>:
 80162f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80162fc:	1f18      	subs	r0, r3, #4
 80162fe:	2b00      	cmp	r3, #0
 8016300:	bfbc      	itt	lt
 8016302:	580b      	ldrlt	r3, [r1, r0]
 8016304:	18c0      	addlt	r0, r0, r3
 8016306:	4770      	bx	lr

08016308 <_init>:
 8016308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801630a:	bf00      	nop
 801630c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801630e:	bc08      	pop	{r3}
 8016310:	469e      	mov	lr, r3
 8016312:	4770      	bx	lr

08016314 <_fini>:
 8016314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016316:	bf00      	nop
 8016318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801631a:	bc08      	pop	{r3}
 801631c:	469e      	mov	lr, r3
 801631e:	4770      	bx	lr
