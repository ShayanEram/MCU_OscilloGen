
OscilloGen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e7c  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08013148  08013148  00014148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080131d0  080131d0  000141d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080131d8  080131d8  000141d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080131dc  080131dc  000141dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000104  24000000  080131e0  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002324  24000104  080132e4  00015104  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24002428  080132e4  00015428  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00015104  2**0
                  CONTENTS, READONLY
 10 .debug_info   00038c15  00000000  00000000  00015132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006e5c  00000000  00000000  0004dd47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000024a8  00000000  00000000  00054ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001c31  00000000  00000000  00057050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e754  00000000  00000000  00058c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003b685  00000000  00000000  000973d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017b45a  00000000  00000000  000d2a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0024deb4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009ac4  00000000  00000000  0024def8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  002579bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000104 	.word	0x24000104
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08013130 	.word	0x08013130

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000108 	.word	0x24000108
 8000308:	08013130 	.word	0x08013130

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b988 	b.w	8000634 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	468e      	mov	lr, r1
 8000344:	4604      	mov	r4, r0
 8000346:	4688      	mov	r8, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4617      	mov	r7, r2
 8000350:	d962      	bls.n	8000418 <__udivmoddi4+0xdc>
 8000352:	fab2 f682 	clz	r6, r2
 8000356:	b14e      	cbz	r6, 800036c <__udivmoddi4+0x30>
 8000358:	f1c6 0320 	rsb	r3, r6, #32
 800035c:	fa01 f806 	lsl.w	r8, r1, r6
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	40b7      	lsls	r7, r6
 8000366:	ea43 0808 	orr.w	r8, r3, r8
 800036a:	40b4      	lsls	r4, r6
 800036c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fbb8 f1fe 	udiv	r1, r8, lr
 8000378:	0c23      	lsrs	r3, r4, #16
 800037a:	fb0e 8811 	mls	r8, lr, r1, r8
 800037e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000382:	fb01 f20c 	mul.w	r2, r1, ip
 8000386:	429a      	cmp	r2, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x62>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000390:	f080 80ea 	bcs.w	8000568 <__udivmoddi4+0x22c>
 8000394:	429a      	cmp	r2, r3
 8000396:	f240 80e7 	bls.w	8000568 <__udivmoddi4+0x22c>
 800039a:	3902      	subs	r1, #2
 800039c:	443b      	add	r3, r7
 800039e:	1a9a      	subs	r2, r3, r2
 80003a0:	b2a3      	uxth	r3, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003ae:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b2:	459c      	cmp	ip, r3
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0x8e>
 80003b6:	18fb      	adds	r3, r7, r3
 80003b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003bc:	f080 80d6 	bcs.w	800056c <__udivmoddi4+0x230>
 80003c0:	459c      	cmp	ip, r3
 80003c2:	f240 80d3 	bls.w	800056c <__udivmoddi4+0x230>
 80003c6:	443b      	add	r3, r7
 80003c8:	3802      	subs	r0, #2
 80003ca:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003ce:	eba3 030c 	sub.w	r3, r3, ip
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11d      	cbz	r5, 80003de <__udivmoddi4+0xa2>
 80003d6:	40f3      	lsrs	r3, r6
 80003d8:	2200      	movs	r2, #0
 80003da:	e9c5 3200 	strd	r3, r2, [r5]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d905      	bls.n	80003f2 <__udivmoddi4+0xb6>
 80003e6:	b10d      	cbz	r5, 80003ec <__udivmoddi4+0xb0>
 80003e8:	e9c5 0100 	strd	r0, r1, [r5]
 80003ec:	2100      	movs	r1, #0
 80003ee:	4608      	mov	r0, r1
 80003f0:	e7f5      	b.n	80003de <__udivmoddi4+0xa2>
 80003f2:	fab3 f183 	clz	r1, r3
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d146      	bne.n	8000488 <__udivmoddi4+0x14c>
 80003fa:	4573      	cmp	r3, lr
 80003fc:	d302      	bcc.n	8000404 <__udivmoddi4+0xc8>
 80003fe:	4282      	cmp	r2, r0
 8000400:	f200 8105 	bhi.w	800060e <__udivmoddi4+0x2d2>
 8000404:	1a84      	subs	r4, r0, r2
 8000406:	eb6e 0203 	sbc.w	r2, lr, r3
 800040a:	2001      	movs	r0, #1
 800040c:	4690      	mov	r8, r2
 800040e:	2d00      	cmp	r5, #0
 8000410:	d0e5      	beq.n	80003de <__udivmoddi4+0xa2>
 8000412:	e9c5 4800 	strd	r4, r8, [r5]
 8000416:	e7e2      	b.n	80003de <__udivmoddi4+0xa2>
 8000418:	2a00      	cmp	r2, #0
 800041a:	f000 8090 	beq.w	800053e <__udivmoddi4+0x202>
 800041e:	fab2 f682 	clz	r6, r2
 8000422:	2e00      	cmp	r6, #0
 8000424:	f040 80a4 	bne.w	8000570 <__udivmoddi4+0x234>
 8000428:	1a8a      	subs	r2, r1, r2
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000430:	b280      	uxth	r0, r0
 8000432:	b2bc      	uxth	r4, r7
 8000434:	2101      	movs	r1, #1
 8000436:	fbb2 fcfe 	udiv	ip, r2, lr
 800043a:	fb0e 221c 	mls	r2, lr, ip, r2
 800043e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000442:	fb04 f20c 	mul.w	r2, r4, ip
 8000446:	429a      	cmp	r2, r3
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x11e>
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000450:	d202      	bcs.n	8000458 <__udivmoddi4+0x11c>
 8000452:	429a      	cmp	r2, r3
 8000454:	f200 80e0 	bhi.w	8000618 <__udivmoddi4+0x2dc>
 8000458:	46c4      	mov	ip, r8
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000460:	fb0e 3312 	mls	r3, lr, r2, r3
 8000464:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000468:	fb02 f404 	mul.w	r4, r2, r4
 800046c:	429c      	cmp	r4, r3
 800046e:	d907      	bls.n	8000480 <__udivmoddi4+0x144>
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	f102 30ff 	add.w	r0, r2, #4294967295
 8000476:	d202      	bcs.n	800047e <__udivmoddi4+0x142>
 8000478:	429c      	cmp	r4, r3
 800047a:	f200 80ca 	bhi.w	8000612 <__udivmoddi4+0x2d6>
 800047e:	4602      	mov	r2, r0
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000486:	e7a5      	b.n	80003d4 <__udivmoddi4+0x98>
 8000488:	f1c1 0620 	rsb	r6, r1, #32
 800048c:	408b      	lsls	r3, r1
 800048e:	fa22 f706 	lsr.w	r7, r2, r6
 8000492:	431f      	orrs	r7, r3
 8000494:	fa0e f401 	lsl.w	r4, lr, r1
 8000498:	fa20 f306 	lsr.w	r3, r0, r6
 800049c:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a4:	4323      	orrs	r3, r4
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	fa1f fc87 	uxth.w	ip, r7
 80004ae:	fbbe f0f9 	udiv	r0, lr, r9
 80004b2:	0c1c      	lsrs	r4, r3, #16
 80004b4:	fb09 ee10 	mls	lr, r9, r0, lr
 80004b8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004bc:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c0:	45a6      	cmp	lr, r4
 80004c2:	fa02 f201 	lsl.w	r2, r2, r1
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x1a0>
 80004c8:	193c      	adds	r4, r7, r4
 80004ca:	f100 3aff 	add.w	sl, r0, #4294967295
 80004ce:	f080 809c 	bcs.w	800060a <__udivmoddi4+0x2ce>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	f240 8099 	bls.w	800060a <__udivmoddi4+0x2ce>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	eba4 040e 	sub.w	r4, r4, lr
 80004e0:	fa1f fe83 	uxth.w	lr, r3
 80004e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004e8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ec:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f0:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f4:	45a4      	cmp	ip, r4
 80004f6:	d908      	bls.n	800050a <__udivmoddi4+0x1ce>
 80004f8:	193c      	adds	r4, r7, r4
 80004fa:	f103 3eff 	add.w	lr, r3, #4294967295
 80004fe:	f080 8082 	bcs.w	8000606 <__udivmoddi4+0x2ca>
 8000502:	45a4      	cmp	ip, r4
 8000504:	d97f      	bls.n	8000606 <__udivmoddi4+0x2ca>
 8000506:	3b02      	subs	r3, #2
 8000508:	443c      	add	r4, r7
 800050a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800050e:	eba4 040c 	sub.w	r4, r4, ip
 8000512:	fba0 ec02 	umull	lr, ip, r0, r2
 8000516:	4564      	cmp	r4, ip
 8000518:	4673      	mov	r3, lr
 800051a:	46e1      	mov	r9, ip
 800051c:	d362      	bcc.n	80005e4 <__udivmoddi4+0x2a8>
 800051e:	d05f      	beq.n	80005e0 <__udivmoddi4+0x2a4>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x1fe>
 8000522:	ebb8 0203 	subs.w	r2, r8, r3
 8000526:	eb64 0409 	sbc.w	r4, r4, r9
 800052a:	fa04 f606 	lsl.w	r6, r4, r6
 800052e:	fa22 f301 	lsr.w	r3, r2, r1
 8000532:	431e      	orrs	r6, r3
 8000534:	40cc      	lsrs	r4, r1
 8000536:	e9c5 6400 	strd	r6, r4, [r5]
 800053a:	2100      	movs	r1, #0
 800053c:	e74f      	b.n	80003de <__udivmoddi4+0xa2>
 800053e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000542:	0c01      	lsrs	r1, r0, #16
 8000544:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000548:	b280      	uxth	r0, r0
 800054a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800054e:	463b      	mov	r3, r7
 8000550:	4638      	mov	r0, r7
 8000552:	463c      	mov	r4, r7
 8000554:	46b8      	mov	r8, r7
 8000556:	46be      	mov	lr, r7
 8000558:	2620      	movs	r6, #32
 800055a:	fbb1 f1f7 	udiv	r1, r1, r7
 800055e:	eba2 0208 	sub.w	r2, r2, r8
 8000562:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000566:	e766      	b.n	8000436 <__udivmoddi4+0xfa>
 8000568:	4601      	mov	r1, r0
 800056a:	e718      	b.n	800039e <__udivmoddi4+0x62>
 800056c:	4610      	mov	r0, r2
 800056e:	e72c      	b.n	80003ca <__udivmoddi4+0x8e>
 8000570:	f1c6 0220 	rsb	r2, r6, #32
 8000574:	fa2e f302 	lsr.w	r3, lr, r2
 8000578:	40b7      	lsls	r7, r6
 800057a:	40b1      	lsls	r1, r6
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000584:	430a      	orrs	r2, r1
 8000586:	fbb3 f8fe 	udiv	r8, r3, lr
 800058a:	b2bc      	uxth	r4, r7
 800058c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000590:	0c11      	lsrs	r1, r2, #16
 8000592:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000596:	fb08 f904 	mul.w	r9, r8, r4
 800059a:	40b0      	lsls	r0, r6
 800059c:	4589      	cmp	r9, r1
 800059e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a2:	b280      	uxth	r0, r0
 80005a4:	d93e      	bls.n	8000624 <__udivmoddi4+0x2e8>
 80005a6:	1879      	adds	r1, r7, r1
 80005a8:	f108 3cff 	add.w	ip, r8, #4294967295
 80005ac:	d201      	bcs.n	80005b2 <__udivmoddi4+0x276>
 80005ae:	4589      	cmp	r9, r1
 80005b0:	d81f      	bhi.n	80005f2 <__udivmoddi4+0x2b6>
 80005b2:	eba1 0109 	sub.w	r1, r1, r9
 80005b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005ba:	fb09 f804 	mul.w	r8, r9, r4
 80005be:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c2:	b292      	uxth	r2, r2
 80005c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005c8:	4542      	cmp	r2, r8
 80005ca:	d229      	bcs.n	8000620 <__udivmoddi4+0x2e4>
 80005cc:	18ba      	adds	r2, r7, r2
 80005ce:	f109 31ff 	add.w	r1, r9, #4294967295
 80005d2:	d2c4      	bcs.n	800055e <__udivmoddi4+0x222>
 80005d4:	4542      	cmp	r2, r8
 80005d6:	d2c2      	bcs.n	800055e <__udivmoddi4+0x222>
 80005d8:	f1a9 0102 	sub.w	r1, r9, #2
 80005dc:	443a      	add	r2, r7
 80005de:	e7be      	b.n	800055e <__udivmoddi4+0x222>
 80005e0:	45f0      	cmp	r8, lr
 80005e2:	d29d      	bcs.n	8000520 <__udivmoddi4+0x1e4>
 80005e4:	ebbe 0302 	subs.w	r3, lr, r2
 80005e8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005ec:	3801      	subs	r0, #1
 80005ee:	46e1      	mov	r9, ip
 80005f0:	e796      	b.n	8000520 <__udivmoddi4+0x1e4>
 80005f2:	eba7 0909 	sub.w	r9, r7, r9
 80005f6:	4449      	add	r1, r9
 80005f8:	f1a8 0c02 	sub.w	ip, r8, #2
 80005fc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000600:	fb09 f804 	mul.w	r8, r9, r4
 8000604:	e7db      	b.n	80005be <__udivmoddi4+0x282>
 8000606:	4673      	mov	r3, lr
 8000608:	e77f      	b.n	800050a <__udivmoddi4+0x1ce>
 800060a:	4650      	mov	r0, sl
 800060c:	e766      	b.n	80004dc <__udivmoddi4+0x1a0>
 800060e:	4608      	mov	r0, r1
 8000610:	e6fd      	b.n	800040e <__udivmoddi4+0xd2>
 8000612:	443b      	add	r3, r7
 8000614:	3a02      	subs	r2, #2
 8000616:	e733      	b.n	8000480 <__udivmoddi4+0x144>
 8000618:	f1ac 0c02 	sub.w	ip, ip, #2
 800061c:	443b      	add	r3, r7
 800061e:	e71c      	b.n	800045a <__udivmoddi4+0x11e>
 8000620:	4649      	mov	r1, r9
 8000622:	e79c      	b.n	800055e <__udivmoddi4+0x222>
 8000624:	eba1 0109 	sub.w	r1, r1, r9
 8000628:	46c4      	mov	ip, r8
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	e7c4      	b.n	80005be <__udivmoddi4+0x282>

08000634 <__aeabi_idiv0>:
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08c      	sub	sp, #48	@ 0x30
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800063e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	463b      	mov	r3, r7
 800064c:	2224      	movs	r2, #36	@ 0x24
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f012 fd33 	bl	80130bc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000656:	4b32      	ldr	r3, [pc, #200]	@ (8000720 <MX_ADC1_Init+0xe8>)
 8000658:	4a32      	ldr	r2, [pc, #200]	@ (8000724 <MX_ADC1_Init+0xec>)
 800065a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800065c:	4b30      	ldr	r3, [pc, #192]	@ (8000720 <MX_ADC1_Init+0xe8>)
 800065e:	2200      	movs	r2, #0
 8000660:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000662:	4b2f      	ldr	r3, [pc, #188]	@ (8000720 <MX_ADC1_Init+0xe8>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000668:	4b2d      	ldr	r3, [pc, #180]	@ (8000720 <MX_ADC1_Init+0xe8>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800066e:	4b2c      	ldr	r3, [pc, #176]	@ (8000720 <MX_ADC1_Init+0xe8>)
 8000670:	2204      	movs	r2, #4
 8000672:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000674:	4b2a      	ldr	r3, [pc, #168]	@ (8000720 <MX_ADC1_Init+0xe8>)
 8000676:	2200      	movs	r2, #0
 8000678:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800067a:	4b29      	ldr	r3, [pc, #164]	@ (8000720 <MX_ADC1_Init+0xe8>)
 800067c:	2201      	movs	r2, #1
 800067e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000680:	4b27      	ldr	r3, [pc, #156]	@ (8000720 <MX_ADC1_Init+0xe8>)
 8000682:	2201      	movs	r2, #1
 8000684:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000686:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <MX_ADC1_Init+0xe8>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800068e:	4b24      	ldr	r3, [pc, #144]	@ (8000720 <MX_ADC1_Init+0xe8>)
 8000690:	2200      	movs	r2, #0
 8000692:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000694:	4b22      	ldr	r3, [pc, #136]	@ (8000720 <MX_ADC1_Init+0xe8>)
 8000696:	2200      	movs	r2, #0
 8000698:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800069a:	4b21      	ldr	r3, [pc, #132]	@ (8000720 <MX_ADC1_Init+0xe8>)
 800069c:	2203      	movs	r2, #3
 800069e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <MX_ADC1_Init+0xe8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000720 <MX_ADC1_Init+0xe8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80006ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000720 <MX_ADC1_Init+0xe8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80006b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <MX_ADC1_Init+0xe8>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ba:	4819      	ldr	r0, [pc, #100]	@ (8000720 <MX_ADC1_Init+0xe8>)
 80006bc:	f001 fe7e 	bl	80023bc <HAL_ADC_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006c6:	f000 fd29 	bl	800111c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006ca:	2300      	movs	r3, #0
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006d2:	4619      	mov	r1, r3
 80006d4:	4812      	ldr	r0, [pc, #72]	@ (8000720 <MX_ADC1_Init+0xe8>)
 80006d6:	f003 f8eb 	bl	80038b0 <HAL_ADCEx_MultiModeConfigChannel>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006e0:	f000 fd1c 	bl	800111c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006e4:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <MX_ADC1_Init+0xf0>)
 80006e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006e8:	2306      	movs	r3, #6
 80006ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006f0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80006f4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006f6:	2304      	movs	r3, #4
 80006f8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_ADC1_Init+0xe8>)
 800070a:	f002 fab7 	bl	8002c7c <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000714:	f000 fd02 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	3730      	adds	r7, #48	@ 0x30
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	24000120 	.word	0x24000120
 8000724:	40022000 	.word	0x40022000
 8000728:	0c900008 	.word	0x0c900008

0800072c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b0b8      	sub	sp, #224	@ 0xe0
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	22b8      	movs	r2, #184	@ 0xb8
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f012 fcb5 	bl	80130bc <memset>
  if(adcHandle->Instance==ADC1)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a48      	ldr	r2, [pc, #288]	@ (8000878 <HAL_ADC_MspInit+0x14c>)
 8000758:	4293      	cmp	r3, r2
 800075a:	f040 8088 	bne.w	800086e <HAL_ADC_MspInit+0x142>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800075e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000762:	f04f 0300 	mov.w	r3, #0
 8000766:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800076a:	2304      	movs	r3, #4
 800076c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 800076e:	230c      	movs	r3, #12
 8000770:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000772:	2302      	movs	r3, #2
 8000774:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000776:	2302      	movs	r3, #2
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800077e:	23c0      	movs	r3, #192	@ 0xc0
 8000780:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000782:	2300      	movs	r3, #0
 8000784:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8000786:	2300      	movs	r3, #0
 8000788:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800078a:	2300      	movs	r3, #0
 800078c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	4618      	mov	r0, r3
 8000796:	f008 fcd1 	bl	800913c <HAL_RCCEx_PeriphCLKConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80007a0:	f000 fcbc 	bl	800111c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007a4:	4b35      	ldr	r3, [pc, #212]	@ (800087c <HAL_ADC_MspInit+0x150>)
 80007a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007aa:	4a34      	ldr	r2, [pc, #208]	@ (800087c <HAL_ADC_MspInit+0x150>)
 80007ac:	f043 0320 	orr.w	r3, r3, #32
 80007b0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80007b4:	4b31      	ldr	r3, [pc, #196]	@ (800087c <HAL_ADC_MspInit+0x150>)
 80007b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007ba:	f003 0320 	and.w	r3, r3, #32
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b2e      	ldr	r3, [pc, #184]	@ (800087c <HAL_ADC_MspInit+0x150>)
 80007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c8:	4a2c      	ldr	r2, [pc, #176]	@ (800087c <HAL_ADC_MspInit+0x150>)
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d2:	4b2a      	ldr	r3, [pc, #168]	@ (800087c <HAL_ADC_MspInit+0x150>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007e0:	2340      	movs	r3, #64	@ 0x40
 80007e2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e6:	2303      	movs	r3, #3
 80007e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80007f6:	4619      	mov	r1, r3
 80007f8:	4821      	ldr	r0, [pc, #132]	@ (8000880 <HAL_ADC_MspInit+0x154>)
 80007fa:	f005 ff23 	bl	8006644 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 80007fe:	4b21      	ldr	r3, [pc, #132]	@ (8000884 <HAL_ADC_MspInit+0x158>)
 8000800:	4a21      	ldr	r2, [pc, #132]	@ (8000888 <HAL_ADC_MspInit+0x15c>)
 8000802:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000804:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <HAL_ADC_MspInit+0x158>)
 8000806:	2209      	movs	r2, #9
 8000808:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800080a:	4b1e      	ldr	r3, [pc, #120]	@ (8000884 <HAL_ADC_MspInit+0x158>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000810:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <HAL_ADC_MspInit+0x158>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000816:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <HAL_ADC_MspInit+0x158>)
 8000818:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800081c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800081e:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <HAL_ADC_MspInit+0x158>)
 8000820:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000824:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000826:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <HAL_ADC_MspInit+0x158>)
 8000828:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800082c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800082e:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <HAL_ADC_MspInit+0x158>)
 8000830:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000834:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000836:	4b13      	ldr	r3, [pc, #76]	@ (8000884 <HAL_ADC_MspInit+0x158>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <HAL_ADC_MspInit+0x158>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000842:	4810      	ldr	r0, [pc, #64]	@ (8000884 <HAL_ADC_MspInit+0x158>)
 8000844:	f003 fcdc 	bl	8004200 <HAL_DMA_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <HAL_ADC_MspInit+0x126>
    {
      Error_Handler();
 800084e:	f000 fc65 	bl	800111c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a0b      	ldr	r2, [pc, #44]	@ (8000884 <HAL_ADC_MspInit+0x158>)
 8000856:	659a      	str	r2, [r3, #88]	@ 0x58
 8000858:	4a0a      	ldr	r2, [pc, #40]	@ (8000884 <HAL_ADC_MspInit+0x158>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	2012      	movs	r0, #18
 8000864:	f003 fab7 	bl	8003dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000868:	2012      	movs	r0, #18
 800086a:	f003 face 	bl	8003e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800086e:	bf00      	nop
 8000870:	37e0      	adds	r7, #224	@ 0xe0
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40022000 	.word	0x40022000
 800087c:	58024400 	.word	0x58024400
 8000880:	58020000 	.word	0x58020000
 8000884:	24000190 	.word	0x24000190
 8000888:	40020088 	.word	0x40020088

0800088c <MX_CORDIC_Init>:
DMA_HandleTypeDef hdma_cordic_rd;
DMA_HandleTypeDef hdma_cordic_wr;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_CORDIC_Init+0x20>)
 8000892:	4a07      	ldr	r2, [pc, #28]	@ (80008b0 <MX_CORDIC_Init+0x24>)
 8000894:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_CORDIC_Init+0x20>)
 8000898:	f003 f8ec 	bl	8003a74 <HAL_CORDIC_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80008a2:	f000 fc3b 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	24000208 	.word	0x24000208
 80008b0:	48024400 	.word	0x48024400

080008b4 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a3c      	ldr	r2, [pc, #240]	@ (80009b4 <HAL_CORDIC_MspInit+0x100>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d172      	bne.n	80009ac <HAL_CORDIC_MspInit+0xf8>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80008c6:	4b3c      	ldr	r3, [pc, #240]	@ (80009b8 <HAL_CORDIC_MspInit+0x104>)
 80008c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80008cc:	4a3a      	ldr	r2, [pc, #232]	@ (80009b8 <HAL_CORDIC_MspInit+0x104>)
 80008ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008d2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80008d6:	4b38      	ldr	r3, [pc, #224]	@ (80009b8 <HAL_CORDIC_MspInit+0x104>)
 80008d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80008dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]

    /* CORDIC DMA Init */
    /* CORDIC_RD Init */
    hdma_cordic_rd.Instance = DMA1_Stream7;
 80008e4:	4b35      	ldr	r3, [pc, #212]	@ (80009bc <HAL_CORDIC_MspInit+0x108>)
 80008e6:	4a36      	ldr	r2, [pc, #216]	@ (80009c0 <HAL_CORDIC_MspInit+0x10c>)
 80008e8:	601a      	str	r2, [r3, #0]
    hdma_cordic_rd.Init.Request = DMA_REQUEST_CORDIC_READ;
 80008ea:	4b34      	ldr	r3, [pc, #208]	@ (80009bc <HAL_CORDIC_MspInit+0x108>)
 80008ec:	227a      	movs	r2, #122	@ 0x7a
 80008ee:	605a      	str	r2, [r3, #4]
    hdma_cordic_rd.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008f0:	4b32      	ldr	r3, [pc, #200]	@ (80009bc <HAL_CORDIC_MspInit+0x108>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
    hdma_cordic_rd.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f6:	4b31      	ldr	r3, [pc, #196]	@ (80009bc <HAL_CORDIC_MspInit+0x108>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
    hdma_cordic_rd.Init.MemInc = DMA_MINC_ENABLE;
 80008fc:	4b2f      	ldr	r3, [pc, #188]	@ (80009bc <HAL_CORDIC_MspInit+0x108>)
 80008fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000902:	611a      	str	r2, [r3, #16]
    hdma_cordic_rd.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000904:	4b2d      	ldr	r3, [pc, #180]	@ (80009bc <HAL_CORDIC_MspInit+0x108>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
    hdma_cordic_rd.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800090a:	4b2c      	ldr	r3, [pc, #176]	@ (80009bc <HAL_CORDIC_MspInit+0x108>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
    hdma_cordic_rd.Init.Mode = DMA_CIRCULAR;
 8000910:	4b2a      	ldr	r3, [pc, #168]	@ (80009bc <HAL_CORDIC_MspInit+0x108>)
 8000912:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000916:	61da      	str	r2, [r3, #28]
    hdma_cordic_rd.Init.Priority = DMA_PRIORITY_LOW;
 8000918:	4b28      	ldr	r3, [pc, #160]	@ (80009bc <HAL_CORDIC_MspInit+0x108>)
 800091a:	2200      	movs	r2, #0
 800091c:	621a      	str	r2, [r3, #32]
    hdma_cordic_rd.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800091e:	4b27      	ldr	r3, [pc, #156]	@ (80009bc <HAL_CORDIC_MspInit+0x108>)
 8000920:	2200      	movs	r2, #0
 8000922:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_cordic_rd) != HAL_OK)
 8000924:	4825      	ldr	r0, [pc, #148]	@ (80009bc <HAL_CORDIC_MspInit+0x108>)
 8000926:	f003 fc6b 	bl	8004200 <HAL_DMA_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <HAL_CORDIC_MspInit+0x80>
    {
      Error_Handler();
 8000930:	f000 fbf4 	bl	800111c <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaIn,hdma_cordic_rd);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a21      	ldr	r2, [pc, #132]	@ (80009bc <HAL_CORDIC_MspInit+0x108>)
 8000938:	619a      	str	r2, [r3, #24]
 800093a:	4a20      	ldr	r2, [pc, #128]	@ (80009bc <HAL_CORDIC_MspInit+0x108>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* CORDIC_WR Init */
    hdma_cordic_wr.Instance = DMA2_Stream0;
 8000940:	4b20      	ldr	r3, [pc, #128]	@ (80009c4 <HAL_CORDIC_MspInit+0x110>)
 8000942:	4a21      	ldr	r2, [pc, #132]	@ (80009c8 <HAL_CORDIC_MspInit+0x114>)
 8000944:	601a      	str	r2, [r3, #0]
    hdma_cordic_wr.Init.Request = DMA_REQUEST_CORDIC_WRITE;
 8000946:	4b1f      	ldr	r3, [pc, #124]	@ (80009c4 <HAL_CORDIC_MspInit+0x110>)
 8000948:	227b      	movs	r2, #123	@ 0x7b
 800094a:	605a      	str	r2, [r3, #4]
    hdma_cordic_wr.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800094c:	4b1d      	ldr	r3, [pc, #116]	@ (80009c4 <HAL_CORDIC_MspInit+0x110>)
 800094e:	2240      	movs	r2, #64	@ 0x40
 8000950:	609a      	str	r2, [r3, #8]
    hdma_cordic_wr.Init.PeriphInc = DMA_PINC_DISABLE;
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <HAL_CORDIC_MspInit+0x110>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
    hdma_cordic_wr.Init.MemInc = DMA_MINC_ENABLE;
 8000958:	4b1a      	ldr	r3, [pc, #104]	@ (80009c4 <HAL_CORDIC_MspInit+0x110>)
 800095a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800095e:	611a      	str	r2, [r3, #16]
    hdma_cordic_wr.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000960:	4b18      	ldr	r3, [pc, #96]	@ (80009c4 <HAL_CORDIC_MspInit+0x110>)
 8000962:	2200      	movs	r2, #0
 8000964:	615a      	str	r2, [r3, #20]
    hdma_cordic_wr.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000966:	4b17      	ldr	r3, [pc, #92]	@ (80009c4 <HAL_CORDIC_MspInit+0x110>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
    hdma_cordic_wr.Init.Mode = DMA_CIRCULAR;
 800096c:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <HAL_CORDIC_MspInit+0x110>)
 800096e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000972:	61da      	str	r2, [r3, #28]
    hdma_cordic_wr.Init.Priority = DMA_PRIORITY_LOW;
 8000974:	4b13      	ldr	r3, [pc, #76]	@ (80009c4 <HAL_CORDIC_MspInit+0x110>)
 8000976:	2200      	movs	r2, #0
 8000978:	621a      	str	r2, [r3, #32]
    hdma_cordic_wr.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800097a:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <HAL_CORDIC_MspInit+0x110>)
 800097c:	2200      	movs	r2, #0
 800097e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_cordic_wr) != HAL_OK)
 8000980:	4810      	ldr	r0, [pc, #64]	@ (80009c4 <HAL_CORDIC_MspInit+0x110>)
 8000982:	f003 fc3d 	bl	8004200 <HAL_DMA_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <HAL_CORDIC_MspInit+0xdc>
    {
      Error_Handler();
 800098c:	f000 fbc6 	bl	800111c <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaOut,hdma_cordic_wr);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a0c      	ldr	r2, [pc, #48]	@ (80009c4 <HAL_CORDIC_MspInit+0x110>)
 8000994:	61da      	str	r2, [r3, #28]
 8000996:	4a0b      	ldr	r2, [pc, #44]	@ (80009c4 <HAL_CORDIC_MspInit+0x110>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* CORDIC interrupt Init */
    HAL_NVIC_SetPriority(CORDIC_IRQn, 0, 0);
 800099c:	2200      	movs	r2, #0
 800099e:	2100      	movs	r1, #0
 80009a0:	209a      	movs	r0, #154	@ 0x9a
 80009a2:	f003 fa18 	bl	8003dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CORDIC_IRQn);
 80009a6:	209a      	movs	r0, #154	@ 0x9a
 80009a8:	f003 fa2f 	bl	8003e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	48024400 	.word	0x48024400
 80009b8:	58024400 	.word	0x58024400
 80009bc:	24000230 	.word	0x24000230
 80009c0:	400200b8 	.word	0x400200b8
 80009c4:	240002a8 	.word	0x240002a8
 80009c8:	40020410 	.word	0x40020410

080009cc <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	@ 0x28
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2224      	movs	r2, #36	@ 0x24
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f012 fb6f 	bl	80130bc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80009de:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <MX_DAC1_Init+0x5c>)
 80009e0:	4a12      	ldr	r2, [pc, #72]	@ (8000a2c <MX_DAC1_Init+0x60>)
 80009e2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80009e4:	4810      	ldr	r0, [pc, #64]	@ (8000a28 <MX_DAC1_Init+0x5c>)
 80009e6:	f003 faa3 	bl	8003f30 <HAL_DAC_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80009f0:	f000 fb94 	bl	800111c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80009f8:	230a      	movs	r3, #10
 80009fa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000a00:	2301      	movs	r3, #1
 8000a02:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4806      	ldr	r0, [pc, #24]	@ (8000a28 <MX_DAC1_Init+0x5c>)
 8000a10:	f003 fab0 	bl	8003f74 <HAL_DAC_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000a1a:	f000 fb7f 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	@ 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	24000320 	.word	0x24000320
 8000a2c:	40007400 	.word	0x40007400

08000a30 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	@ 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a30      	ldr	r2, [pc, #192]	@ (8000b10 <HAL_DAC_MspInit+0xe0>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d159      	bne.n	8000b06 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000a52:	4b30      	ldr	r3, [pc, #192]	@ (8000b14 <HAL_DAC_MspInit+0xe4>)
 8000a54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a58:	4a2e      	ldr	r2, [pc, #184]	@ (8000b14 <HAL_DAC_MspInit+0xe4>)
 8000a5a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000a5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000a62:	4b2c      	ldr	r3, [pc, #176]	@ (8000b14 <HAL_DAC_MspInit+0xe4>)
 8000a64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a70:	4b28      	ldr	r3, [pc, #160]	@ (8000b14 <HAL_DAC_MspInit+0xe4>)
 8000a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a76:	4a27      	ldr	r2, [pc, #156]	@ (8000b14 <HAL_DAC_MspInit+0xe4>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a80:	4b24      	ldr	r3, [pc, #144]	@ (8000b14 <HAL_DAC_MspInit+0xe4>)
 8000a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a8e:	2310      	movs	r3, #16
 8000a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a92:	2303      	movs	r3, #3
 8000a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	481d      	ldr	r0, [pc, #116]	@ (8000b18 <HAL_DAC_MspInit+0xe8>)
 8000aa2:	f005 fdcf 	bl	8006644 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream6;
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b1c <HAL_DAC_MspInit+0xec>)
 8000aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b20 <HAL_DAC_MspInit+0xf0>)
 8000aaa:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	@ (8000b1c <HAL_DAC_MspInit+0xec>)
 8000aae:	2243      	movs	r2, #67	@ 0x43
 8000ab0:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b1c <HAL_DAC_MspInit+0xec>)
 8000ab4:	2240      	movs	r2, #64	@ 0x40
 8000ab6:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ab8:	4b18      	ldr	r3, [pc, #96]	@ (8000b1c <HAL_DAC_MspInit+0xec>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000abe:	4b17      	ldr	r3, [pc, #92]	@ (8000b1c <HAL_DAC_MspInit+0xec>)
 8000ac0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ac4:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ac6:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <HAL_DAC_MspInit+0xec>)
 8000ac8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000acc:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ace:	4b13      	ldr	r3, [pc, #76]	@ (8000b1c <HAL_DAC_MspInit+0xec>)
 8000ad0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ad4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <HAL_DAC_MspInit+0xec>)
 8000ad8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000adc:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000ade:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <HAL_DAC_MspInit+0xec>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b1c <HAL_DAC_MspInit+0xec>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000aea:	480c      	ldr	r0, [pc, #48]	@ (8000b1c <HAL_DAC_MspInit+0xec>)
 8000aec:	f003 fb88 	bl	8004200 <HAL_DMA_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000af6:	f000 fb11 	bl	800111c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a07      	ldr	r2, [pc, #28]	@ (8000b1c <HAL_DAC_MspInit+0xec>)
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	4a06      	ldr	r2, [pc, #24]	@ (8000b1c <HAL_DAC_MspInit+0xec>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000b06:	bf00      	nop
 8000b08:	3728      	adds	r7, #40	@ 0x28
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40007400 	.word	0x40007400
 8000b14:	58024400 	.word	0x58024400
 8000b18:	58020000 	.word	0x58020000
 8000b1c:	24000334 	.word	0x24000334
 8000b20:	400200a0 	.word	0x400200a0

08000b24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b2a:	4b35      	ldr	r3, [pc, #212]	@ (8000c00 <MX_DMA_Init+0xdc>)
 8000b2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b30:	4a33      	ldr	r2, [pc, #204]	@ (8000c00 <MX_DMA_Init+0xdc>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b3a:	4b31      	ldr	r3, [pc, #196]	@ (8000c00 <MX_DMA_Init+0xdc>)
 8000b3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b48:	4b2d      	ldr	r3, [pc, #180]	@ (8000c00 <MX_DMA_Init+0xdc>)
 8000b4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b4e:	4a2c      	ldr	r2, [pc, #176]	@ (8000c00 <MX_DMA_Init+0xdc>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b58:	4b29      	ldr	r3, [pc, #164]	@ (8000c00 <MX_DMA_Init+0xdc>)
 8000b5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	200b      	movs	r0, #11
 8000b6c:	f003 f933 	bl	8003dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b70:	200b      	movs	r0, #11
 8000b72:	f003 f94a 	bl	8003e0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	200c      	movs	r0, #12
 8000b7c:	f003 f92b 	bl	8003dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b80:	200c      	movs	r0, #12
 8000b82:	f003 f942 	bl	8003e0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	200d      	movs	r0, #13
 8000b8c:	f003 f923 	bl	8003dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000b90:	200d      	movs	r0, #13
 8000b92:	f003 f93a 	bl	8003e0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	200e      	movs	r0, #14
 8000b9c:	f003 f91b 	bl	8003dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ba0:	200e      	movs	r0, #14
 8000ba2:	f003 f932 	bl	8003e0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	200f      	movs	r0, #15
 8000bac:	f003 f913 	bl	8003dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000bb0:	200f      	movs	r0, #15
 8000bb2:	f003 f92a 	bl	8003e0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	2010      	movs	r0, #16
 8000bbc:	f003 f90b 	bl	8003dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000bc0:	2010      	movs	r0, #16
 8000bc2:	f003 f922 	bl	8003e0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2011      	movs	r0, #17
 8000bcc:	f003 f903 	bl	8003dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000bd0:	2011      	movs	r0, #17
 8000bd2:	f003 f91a 	bl	8003e0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	202f      	movs	r0, #47	@ 0x2f
 8000bdc:	f003 f8fb 	bl	8003dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000be0:	202f      	movs	r0, #47	@ 0x2f
 8000be2:	f003 f912 	bl	8003e0a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	2038      	movs	r0, #56	@ 0x38
 8000bec:	f003 f8f3 	bl	8003dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bf0:	2038      	movs	r0, #56	@ 0x38
 8000bf2:	f003 f90a 	bl	8003e0a <HAL_NVIC_EnableIRQ>

}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	58024400 	.word	0x58024400

08000c04 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08e      	sub	sp, #56	@ 0x38
 8000c08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c1a:	4b71      	ldr	r3, [pc, #452]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c20:	4a6f      	ldr	r2, [pc, #444]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000c22:	f043 0310 	orr.w	r3, r3, #16
 8000c26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c30:	f003 0310 	and.w	r3, r3, #16
 8000c34:	623b      	str	r3, [r7, #32]
 8000c36:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c38:	4b69      	ldr	r3, [pc, #420]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3e:	4a68      	ldr	r2, [pc, #416]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c48:	4b65      	ldr	r3, [pc, #404]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4e:	f003 0304 	and.w	r3, r3, #4
 8000c52:	61fb      	str	r3, [r7, #28]
 8000c54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c56:	4b62      	ldr	r3, [pc, #392]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5c:	4a60      	ldr	r2, [pc, #384]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000c5e:	f043 0320 	orr.w	r3, r3, #32
 8000c62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c66:	4b5e      	ldr	r3, [pc, #376]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6c:	f003 0320 	and.w	r3, r3, #32
 8000c70:	61bb      	str	r3, [r7, #24]
 8000c72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c74:	4b5a      	ldr	r3, [pc, #360]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7a:	4a59      	ldr	r2, [pc, #356]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c84:	4b56      	ldr	r3, [pc, #344]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b53      	ldr	r3, [pc, #332]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c98:	4a51      	ldr	r2, [pc, #324]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca2:	4b4f      	ldr	r3, [pc, #316]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb0:	4b4b      	ldr	r3, [pc, #300]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb6:	4a4a      	ldr	r2, [pc, #296]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc0:	4b47      	ldr	r3, [pc, #284]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cce:	4b44      	ldr	r3, [pc, #272]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd4:	4a42      	ldr	r2, [pc, #264]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cde:	4b40      	ldr	r3, [pc, #256]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cec:	4b3c      	ldr	r3, [pc, #240]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf2:	4a3b      	ldr	r2, [pc, #236]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000cf4:	f043 0308 	orr.w	r3, r3, #8
 8000cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cfc:	4b38      	ldr	r3, [pc, #224]	@ (8000de0 <MX_GPIO_Init+0x1dc>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE10
                           PE11 PE12 PE13 PE14
                           PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000d0a:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d10:	2303      	movs	r3, #3
 8000d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4831      	ldr	r0, [pc, #196]	@ (8000de4 <MX_GPIO_Init+0x1e0>)
 8000d20:	f005 fc90 	bl	8006644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8000d24:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d36:	4619      	mov	r1, r3
 8000d38:	482b      	ldr	r0, [pc, #172]	@ (8000de8 <MX_GPIO_Init+0x1e4>)
 8000d3a:	f005 fc83 	bl	8006644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d44:	2303      	movs	r3, #3
 8000d46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	4826      	ldr	r0, [pc, #152]	@ (8000dec <MX_GPIO_Init+0x1e8>)
 8000d54:	f005 fc76 	bl	8006644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4821      	ldr	r0, [pc, #132]	@ (8000df0 <MX_GPIO_Init+0x1ec>)
 8000d6c:	f005 fc6a 	bl	8006644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_10;
 8000d70:	f240 5303 	movw	r3, #1283	@ 0x503
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d76:	2303      	movs	r3, #3
 8000d78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d82:	4619      	mov	r1, r3
 8000d84:	481b      	ldr	r0, [pc, #108]	@ (8000df4 <MX_GPIO_Init+0x1f0>)
 8000d86:	f005 fc5d 	bl	8006644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000d8a:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d90:	2303      	movs	r3, #3
 8000d92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4816      	ldr	r0, [pc, #88]	@ (8000df8 <MX_GPIO_Init+0x1f4>)
 8000da0:	f005 fc50 	bl	8006644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG8 PG10 PG11 PG12
                           PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000da4:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000daa:	2303      	movs	r3, #3
 8000dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db6:	4619      	mov	r1, r3
 8000db8:	4810      	ldr	r0, [pc, #64]	@ (8000dfc <MX_GPIO_Init+0x1f8>)
 8000dba:	f005 fc43 	bl	8006644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000dbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480b      	ldr	r0, [pc, #44]	@ (8000e00 <MX_GPIO_Init+0x1fc>)
 8000dd4:	f005 fc36 	bl	8006644 <HAL_GPIO_Init>

}
 8000dd8:	bf00      	nop
 8000dda:	3738      	adds	r7, #56	@ 0x38
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	58024400 	.word	0x58024400
 8000de4:	58021000 	.word	0x58021000
 8000de8:	58020800 	.word	0x58020800
 8000dec:	58021400 	.word	0x58021400
 8000df0:	58021c00 	.word	0x58021c00
 8000df4:	58020000 	.word	0x58020000
 8000df8:	58020400 	.word	0x58020400
 8000dfc:	58021800 	.word	0x58021800
 8000e00:	58020c00 	.word	0x58020c00

08000e04 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e08:	4b1b      	ldr	r3, [pc, #108]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000e7c <MX_I2C1_Init+0x78>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0BBFF;
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e10:	4a1b      	ldr	r2, [pc, #108]	@ (8000e80 <MX_I2C1_Init+0x7c>)
 8000e12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e14:	4b18      	ldr	r3, [pc, #96]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e20:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e26:	4b14      	ldr	r3, [pc, #80]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e32:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e3e:	480e      	ldr	r0, [pc, #56]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e40:	f005 fda8 	bl	8006994 <HAL_I2C_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e4a:	f000 f967 	bl	800111c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4809      	ldr	r0, [pc, #36]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e52:	f005 fe3b 	bl	8006acc <HAL_I2CEx_ConfigAnalogFilter>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e5c:	f000 f95e 	bl	800111c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e60:	2100      	movs	r1, #0
 8000e62:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <MX_I2C1_Init+0x74>)
 8000e64:	f005 fe7d 	bl	8006b62 <HAL_I2CEx_ConfigDigitalFilter>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e6e:	f000 f955 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	240003ac 	.word	0x240003ac
 8000e7c:	40005400 	.word	0x40005400
 8000e80:	20b0bbff 	.word	0x20b0bbff

08000e84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b0b8      	sub	sp, #224	@ 0xe0
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e9c:	f107 0310 	add.w	r3, r7, #16
 8000ea0:	22b8      	movs	r2, #184	@ 0xb8
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f012 f909 	bl	80130bc <memset>
  if(i2cHandle->Instance==I2C1)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a26      	ldr	r2, [pc, #152]	@ (8000f48 <HAL_I2C_MspInit+0xc4>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d145      	bne.n	8000f40 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000eb4:	f04f 0208 	mov.w	r2, #8
 8000eb8:	f04f 0300 	mov.w	r3, #0
 8000ebc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f008 f936 	bl	800913c <HAL_RCCEx_PeriphCLKConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000ed6:	f000 f921 	bl	800111c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eda:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <HAL_I2C_MspInit+0xc8>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8000f4c <HAL_I2C_MspInit+0xc8>)
 8000ee2:	f043 0302 	orr.w	r3, r3, #2
 8000ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eea:	4b18      	ldr	r3, [pc, #96]	@ (8000f4c <HAL_I2C_MspInit+0xc8>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ef8:	23c0      	movs	r3, #192	@ 0xc0
 8000efa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000efe:	2312      	movs	r3, #18
 8000f00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f10:	2304      	movs	r3, #4
 8000f12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	480c      	ldr	r0, [pc, #48]	@ (8000f50 <HAL_I2C_MspInit+0xcc>)
 8000f1e:	f005 fb91 	bl	8006644 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f22:	4b0a      	ldr	r3, [pc, #40]	@ (8000f4c <HAL_I2C_MspInit+0xc8>)
 8000f24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f28:	4a08      	ldr	r2, [pc, #32]	@ (8000f4c <HAL_I2C_MspInit+0xc8>)
 8000f2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f2e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_I2C_MspInit+0xc8>)
 8000f34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f40:	bf00      	nop
 8000f42:	37e0      	adds	r7, #224	@ 0xe0
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40005400 	.word	0x40005400
 8000f4c:	58024400 	.word	0x58024400
 8000f50:	58020400 	.word	0x58020400

08000f54 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 8000f58:	4b0b      	ldr	r3, [pc, #44]	@ (8000f88 <MX_IWDG1_Init+0x34>)
 8000f5a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f8c <MX_IWDG1_Init+0x38>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <MX_IWDG1_Init+0x34>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 200;
 8000f64:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <MX_IWDG1_Init+0x34>)
 8000f66:	22c8      	movs	r2, #200	@ 0xc8
 8000f68:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 420;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	@ (8000f88 <MX_IWDG1_Init+0x34>)
 8000f6c:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8000f70:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <MX_IWDG1_Init+0x34>)
 8000f74:	f005 fe41 	bl	8006bfa <HAL_IWDG_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_IWDG1_Init+0x2e>
  {
    Error_Handler();
 8000f7e:	f000 f8cd 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	24000400 	.word	0x24000400
 8000f8c:	58004800 	.word	0x58004800

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000f94:	f000 f896 	bl	80010c4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f98:	f000 fe98 	bl	8001ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9c:	f000 f81e 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa0:	f7ff fe30 	bl	8000c04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fa4:	f7ff fdbe 	bl	8000b24 <MX_DMA_Init>
  MX_TIM1_Init();
 8000fa8:	f000 fb98 	bl	80016dc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000fac:	f000 fd3c 	bl	8001a28 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000fb0:	f000 f8ba 	bl	8001128 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000fb4:	f7ff ff26 	bl	8000e04 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000fb8:	f011 fb46 	bl	8012648 <MX_USB_DEVICE_Init>
  MX_IWDG1_Init();
 8000fbc:	f7ff ffca 	bl	8000f54 <MX_IWDG1_Init>
  MX_ADC1_Init();
 8000fc0:	f7ff fb3a 	bl	8000638 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000fc4:	f7ff fd02 	bl	80009cc <MX_DAC1_Init>
  MX_TIM2_Init();
 8000fc8:	f000 fc34 	bl	8001834 <MX_TIM2_Init>
  MX_CORDIC_Init();
 8000fcc:	f7ff fc5e 	bl	800088c <MX_CORDIC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MainCpp();
 8000fd0:	f000 fe77 	bl	8001cc2 <MainCpp>
 8000fd4:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b09c      	sub	sp, #112	@ 0x70
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe6:	224c      	movs	r2, #76	@ 0x4c
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f012 f866 	bl	80130bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2220      	movs	r2, #32
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f012 f860 	bl	80130bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f007 f8ed 	bl	80081dc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	4b2e      	ldr	r3, [pc, #184]	@ (80010c0 <SystemClock_Config+0xe4>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	4a2d      	ldr	r2, [pc, #180]	@ (80010c0 <SystemClock_Config+0xe4>)
 800100c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001010:	6193      	str	r3, [r2, #24]
 8001012:	4b2b      	ldr	r3, [pc, #172]	@ (80010c0 <SystemClock_Config+0xe4>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800101e:	bf00      	nop
 8001020:	4b27      	ldr	r3, [pc, #156]	@ (80010c0 <SystemClock_Config+0xe4>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001028:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800102c:	d1f8      	bne.n	8001020 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800102e:	232a      	movs	r3, #42	@ 0x2a
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001032:	2301      	movs	r3, #1
 8001034:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001036:	2340      	movs	r3, #64	@ 0x40
 8001038:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800103a:	2301      	movs	r3, #1
 800103c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800103e:	2301      	movs	r3, #1
 8001040:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001042:	2302      	movs	r3, #2
 8001044:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001046:	2300      	movs	r3, #0
 8001048:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800104a:	2304      	movs	r3, #4
 800104c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 33;
 800104e:	2321      	movs	r3, #33	@ 0x21
 8001050:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001052:	2301      	movs	r3, #1
 8001054:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001056:	2303      	movs	r3, #3
 8001058:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800105a:	2302      	movs	r3, #2
 800105c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800105e:	230c      	movs	r3, #12
 8001060:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001062:	2300      	movs	r3, #0
 8001064:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001066:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800106a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001070:	4618      	mov	r0, r3
 8001072:	f007 f8fd 	bl	8008270 <HAL_RCC_OscConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800107c:	f000 f84e 	bl	800111c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001080:	233f      	movs	r3, #63	@ 0x3f
 8001082:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001084:	2303      	movs	r3, #3
 8001086:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800108c:	2308      	movs	r3, #8
 800108e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001090:	2340      	movs	r3, #64	@ 0x40
 8001092:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001094:	2340      	movs	r3, #64	@ 0x40
 8001096:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001098:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800109c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800109e:	2340      	movs	r3, #64	@ 0x40
 80010a0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2103      	movs	r1, #3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f007 fcbc 	bl	8008a24 <HAL_RCC_ClockConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80010b2:	f000 f833 	bl	800111c <Error_Handler>
  }
}
 80010b6:	bf00      	nop
 80010b8:	3770      	adds	r7, #112	@ 0x70
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	58024800 	.word	0x58024800

080010c4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010ca:	463b      	mov	r3, r7
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010d6:	f002 feb3 	bl	8003e40 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80010da:	2301      	movs	r3, #1
 80010dc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80010de:	2300      	movs	r3, #0
 80010e0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80010e6:	231f      	movs	r3, #31
 80010e8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80010ea:	2387      	movs	r3, #135	@ 0x87
 80010ec:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80010f2:	2300      	movs	r3, #0
 80010f4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80010f6:	2301      	movs	r3, #1
 80010f8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80010fa:	2301      	movs	r3, #1
 80010fc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001106:	463b      	mov	r3, r7
 8001108:	4618      	mov	r0, r3
 800110a:	f002 fed1 	bl	8003eb0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800110e:	2004      	movs	r0, #4
 8001110:	f002 feae 	bl	8003e70 <HAL_MPU_Enable>

}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001120:	b672      	cpsid	i
}
 8001122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <Error_Handler+0x8>

08001128 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800112c:	4b27      	ldr	r3, [pc, #156]	@ (80011cc <MX_SPI1_Init+0xa4>)
 800112e:	4a28      	ldr	r2, [pc, #160]	@ (80011d0 <MX_SPI1_Init+0xa8>)
 8001130:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001132:	4b26      	ldr	r3, [pc, #152]	@ (80011cc <MX_SPI1_Init+0xa4>)
 8001134:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001138:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800113a:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <MX_SPI1_Init+0xa4>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_32BIT;
 8001140:	4b22      	ldr	r3, [pc, #136]	@ (80011cc <MX_SPI1_Init+0xa4>)
 8001142:	221f      	movs	r2, #31
 8001144:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001146:	4b21      	ldr	r3, [pc, #132]	@ (80011cc <MX_SPI1_Init+0xa4>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800114c:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <MX_SPI1_Init+0xa4>)
 800114e:	2200      	movs	r2, #0
 8001150:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001152:	4b1e      	ldr	r3, [pc, #120]	@ (80011cc <MX_SPI1_Init+0xa4>)
 8001154:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001158:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800115a:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <MX_SPI1_Init+0xa4>)
 800115c:	2200      	movs	r2, #0
 800115e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001160:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <MX_SPI1_Init+0xa4>)
 8001162:	2200      	movs	r2, #0
 8001164:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001166:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <MX_SPI1_Init+0xa4>)
 8001168:	2200      	movs	r2, #0
 800116a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800116c:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <MX_SPI1_Init+0xa4>)
 800116e:	2200      	movs	r2, #0
 8001170:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001172:	4b16      	ldr	r3, [pc, #88]	@ (80011cc <MX_SPI1_Init+0xa4>)
 8001174:	2200      	movs	r2, #0
 8001176:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001178:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <MX_SPI1_Init+0xa4>)
 800117a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800117e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <MX_SPI1_Init+0xa4>)
 8001182:	2200      	movs	r2, #0
 8001184:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <MX_SPI1_Init+0xa4>)
 8001188:	2200      	movs	r2, #0
 800118a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800118c:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <MX_SPI1_Init+0xa4>)
 800118e:	2200      	movs	r2, #0
 8001190:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <MX_SPI1_Init+0xa4>)
 8001194:	2200      	movs	r2, #0
 8001196:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001198:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <MX_SPI1_Init+0xa4>)
 800119a:	2200      	movs	r2, #0
 800119c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800119e:	4b0b      	ldr	r3, [pc, #44]	@ (80011cc <MX_SPI1_Init+0xa4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011a4:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <MX_SPI1_Init+0xa4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011aa:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <MX_SPI1_Init+0xa4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <MX_SPI1_Init+0xa4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011b6:	4805      	ldr	r0, [pc, #20]	@ (80011cc <MX_SPI1_Init+0xa4>)
 80011b8:	f00a fba6 	bl	800b908 <HAL_SPI_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80011c2:	f7ff ffab 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	24000410 	.word	0x24000410
 80011d0:	40013000 	.word	0x40013000

080011d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b0ba      	sub	sp, #232	@ 0xe8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ec:	f107 0318 	add.w	r3, r7, #24
 80011f0:	22b8      	movs	r2, #184	@ 0xb8
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f011 ff61 	bl	80130bc <memset>
  if(spiHandle->Instance==SPI1)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a6b      	ldr	r2, [pc, #428]	@ (80013ac <HAL_SPI_MspInit+0x1d8>)
 8001200:	4293      	cmp	r3, r2
 8001202:	f040 80cf 	bne.w	80013a4 <HAL_SPI_MspInit+0x1d0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001206:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800120a:	f04f 0300 	mov.w	r3, #0
 800120e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001212:	2300      	movs	r3, #0
 8001214:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	4618      	mov	r0, r3
 800121c:	f007 ff8e 	bl	800913c <HAL_RCCEx_PeriphCLKConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001226:	f7ff ff79 	bl	800111c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800122a:	4b61      	ldr	r3, [pc, #388]	@ (80013b0 <HAL_SPI_MspInit+0x1dc>)
 800122c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001230:	4a5f      	ldr	r2, [pc, #380]	@ (80013b0 <HAL_SPI_MspInit+0x1dc>)
 8001232:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001236:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800123a:	4b5d      	ldr	r3, [pc, #372]	@ (80013b0 <HAL_SPI_MspInit+0x1dc>)
 800123c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001240:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b59      	ldr	r3, [pc, #356]	@ (80013b0 <HAL_SPI_MspInit+0x1dc>)
 800124a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800124e:	4a58      	ldr	r2, [pc, #352]	@ (80013b0 <HAL_SPI_MspInit+0x1dc>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001258:	4b55      	ldr	r3, [pc, #340]	@ (80013b0 <HAL_SPI_MspInit+0x1dc>)
 800125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001266:	4b52      	ldr	r3, [pc, #328]	@ (80013b0 <HAL_SPI_MspInit+0x1dc>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126c:	4a50      	ldr	r2, [pc, #320]	@ (80013b0 <HAL_SPI_MspInit+0x1dc>)
 800126e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001272:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001276:	4b4e      	ldr	r3, [pc, #312]	@ (80013b0 <HAL_SPI_MspInit+0x1dc>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800127c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15(JTDI)     ------> SPI1_NSS
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15;
 8001284:	f248 03a0 	movw	r3, #32928	@ 0x80a0
 8001288:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800129e:	2305      	movs	r3, #5
 80012a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012a8:	4619      	mov	r1, r3
 80012aa:	4842      	ldr	r0, [pc, #264]	@ (80013b4 <HAL_SPI_MspInit+0x1e0>)
 80012ac:	f005 f9ca 	bl	8006644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ca:	2305      	movs	r3, #5
 80012cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012d0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012d4:	4619      	mov	r1, r3
 80012d6:	4838      	ldr	r0, [pc, #224]	@ (80013b8 <HAL_SPI_MspInit+0x1e4>)
 80012d8:	f005 f9b4 	bl	8006644 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream3;
 80012dc:	4b37      	ldr	r3, [pc, #220]	@ (80013bc <HAL_SPI_MspInit+0x1e8>)
 80012de:	4a38      	ldr	r2, [pc, #224]	@ (80013c0 <HAL_SPI_MspInit+0x1ec>)
 80012e0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80012e2:	4b36      	ldr	r3, [pc, #216]	@ (80013bc <HAL_SPI_MspInit+0x1e8>)
 80012e4:	2226      	movs	r2, #38	@ 0x26
 80012e6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012e8:	4b34      	ldr	r3, [pc, #208]	@ (80013bc <HAL_SPI_MspInit+0x1e8>)
 80012ea:	2240      	movs	r2, #64	@ 0x40
 80012ec:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ee:	4b33      	ldr	r3, [pc, #204]	@ (80013bc <HAL_SPI_MspInit+0x1e8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012f4:	4b31      	ldr	r3, [pc, #196]	@ (80013bc <HAL_SPI_MspInit+0x1e8>)
 80012f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012fa:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012fc:	4b2f      	ldr	r3, [pc, #188]	@ (80013bc <HAL_SPI_MspInit+0x1e8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001302:	4b2e      	ldr	r3, [pc, #184]	@ (80013bc <HAL_SPI_MspInit+0x1e8>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001308:	4b2c      	ldr	r3, [pc, #176]	@ (80013bc <HAL_SPI_MspInit+0x1e8>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800130e:	4b2b      	ldr	r3, [pc, #172]	@ (80013bc <HAL_SPI_MspInit+0x1e8>)
 8001310:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001314:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001316:	4b29      	ldr	r3, [pc, #164]	@ (80013bc <HAL_SPI_MspInit+0x1e8>)
 8001318:	2200      	movs	r2, #0
 800131a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800131c:	4827      	ldr	r0, [pc, #156]	@ (80013bc <HAL_SPI_MspInit+0x1e8>)
 800131e:	f002 ff6f 	bl	8004200 <HAL_DMA_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8001328:	f7ff fef8 	bl	800111c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a23      	ldr	r2, [pc, #140]	@ (80013bc <HAL_SPI_MspInit+0x1e8>)
 8001330:	679a      	str	r2, [r3, #120]	@ 0x78
 8001332:	4a22      	ldr	r2, [pc, #136]	@ (80013bc <HAL_SPI_MspInit+0x1e8>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8001338:	4b22      	ldr	r3, [pc, #136]	@ (80013c4 <HAL_SPI_MspInit+0x1f0>)
 800133a:	4a23      	ldr	r2, [pc, #140]	@ (80013c8 <HAL_SPI_MspInit+0x1f4>)
 800133c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800133e:	4b21      	ldr	r3, [pc, #132]	@ (80013c4 <HAL_SPI_MspInit+0x1f0>)
 8001340:	2225      	movs	r2, #37	@ 0x25
 8001342:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001344:	4b1f      	ldr	r3, [pc, #124]	@ (80013c4 <HAL_SPI_MspInit+0x1f0>)
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800134a:	4b1e      	ldr	r3, [pc, #120]	@ (80013c4 <HAL_SPI_MspInit+0x1f0>)
 800134c:	2200      	movs	r2, #0
 800134e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001350:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <HAL_SPI_MspInit+0x1f0>)
 8001352:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001356:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001358:	4b1a      	ldr	r3, [pc, #104]	@ (80013c4 <HAL_SPI_MspInit+0x1f0>)
 800135a:	2200      	movs	r2, #0
 800135c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800135e:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <HAL_SPI_MspInit+0x1f0>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001364:	4b17      	ldr	r3, [pc, #92]	@ (80013c4 <HAL_SPI_MspInit+0x1f0>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800136a:	4b16      	ldr	r3, [pc, #88]	@ (80013c4 <HAL_SPI_MspInit+0x1f0>)
 800136c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001370:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001372:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <HAL_SPI_MspInit+0x1f0>)
 8001374:	2200      	movs	r2, #0
 8001376:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001378:	4812      	ldr	r0, [pc, #72]	@ (80013c4 <HAL_SPI_MspInit+0x1f0>)
 800137a:	f002 ff41 	bl	8004200 <HAL_DMA_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_SPI_MspInit+0x1b4>
    {
      Error_Handler();
 8001384:	f7ff feca 	bl	800111c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a0e      	ldr	r2, [pc, #56]	@ (80013c4 <HAL_SPI_MspInit+0x1f0>)
 800138c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800138e:	4a0d      	ldr	r2, [pc, #52]	@ (80013c4 <HAL_SPI_MspInit+0x1f0>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001394:	2200      	movs	r2, #0
 8001396:	2100      	movs	r1, #0
 8001398:	2023      	movs	r0, #35	@ 0x23
 800139a:	f002 fd1c 	bl	8003dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800139e:	2023      	movs	r0, #35	@ 0x23
 80013a0:	f002 fd33 	bl	8003e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80013a4:	bf00      	nop
 80013a6:	37e8      	adds	r7, #232	@ 0xe8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40013000 	.word	0x40013000
 80013b0:	58024400 	.word	0x58024400
 80013b4:	58020000 	.word	0x58020000
 80013b8:	58021800 	.word	0x58021800
 80013bc:	24000498 	.word	0x24000498
 80013c0:	40020058 	.word	0x40020058
 80013c4:	24000510 	.word	0x24000510
 80013c8:	40020070 	.word	0x40020070

080013cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <HAL_MspInit+0x30>)
 80013d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013d8:	4a08      	ldr	r2, [pc, #32]	@ (80013fc <HAL_MspInit+0x30>)
 80013da:	f043 0302 	orr.w	r3, r3, #2
 80013de:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013e2:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <HAL_MspInit+0x30>)
 80013e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	58024400 	.word	0x58024400

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <NMI_Handler+0x4>

08001408 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <HardFault_Handler+0x4>

08001410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <MemManage_Handler+0x4>

08001418 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <BusFault_Handler+0x4>

08001420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <UsageFault_Handler+0x4>

08001428 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001456:	f000 fcab 	bl	8001db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001464:	4802      	ldr	r0, [pc, #8]	@ (8001470 <DMA1_Stream0_IRQHandler+0x10>)
 8001466:	f003 ff87 	bl	8005378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	24000620 	.word	0x24000620

08001474 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001478:	4802      	ldr	r0, [pc, #8]	@ (8001484 <DMA1_Stream1_IRQHandler+0x10>)
 800147a:	f003 ff7d 	bl	8005378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	2400072c 	.word	0x2400072c

08001488 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800148c:	4802      	ldr	r0, [pc, #8]	@ (8001498 <DMA1_Stream2_IRQHandler+0x10>)
 800148e:	f003 ff73 	bl	8005378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	240007a4 	.word	0x240007a4

0800149c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80014a0:	4802      	ldr	r0, [pc, #8]	@ (80014ac <DMA1_Stream3_IRQHandler+0x10>)
 80014a2:	f003 ff69 	bl	8005378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	24000498 	.word	0x24000498

080014b0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80014b4:	4802      	ldr	r0, [pc, #8]	@ (80014c0 <DMA1_Stream4_IRQHandler+0x10>)
 80014b6:	f003 ff5f 	bl	8005378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	24000510 	.word	0x24000510

080014c4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014c8:	4802      	ldr	r0, [pc, #8]	@ (80014d4 <DMA1_Stream5_IRQHandler+0x10>)
 80014ca:	f003 ff55 	bl	8005378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	24000190 	.word	0x24000190

080014d8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80014dc:	4802      	ldr	r0, [pc, #8]	@ (80014e8 <DMA1_Stream6_IRQHandler+0x10>)
 80014de:	f003 ff4b 	bl	8005378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	24000334 	.word	0x24000334

080014ec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014f0:	4802      	ldr	r0, [pc, #8]	@ (80014fc <ADC_IRQHandler+0x10>)
 80014f2:	f001 f96b 	bl	80027cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	24000120 	.word	0x24000120

08001500 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001504:	4802      	ldr	r0, [pc, #8]	@ (8001510 <TIM2_IRQHandler+0x10>)
 8001506:	f00a feb0 	bl	800c26a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	240005d4 	.word	0x240005d4

08001514 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001518:	4802      	ldr	r0, [pc, #8]	@ (8001524 <SPI1_IRQHandler+0x10>)
 800151a:	f00a fb19 	bl	800bb50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	24000410 	.word	0x24000410

08001528 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800152c:	4802      	ldr	r0, [pc, #8]	@ (8001538 <USART2_IRQHandler+0x10>)
 800152e:	f00b ff97 	bl	800d460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	24000698 	.word	0x24000698

0800153c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_rd);
 8001540:	4802      	ldr	r0, [pc, #8]	@ (800154c <DMA1_Stream7_IRQHandler+0x10>)
 8001542:	f003 ff19 	bl	8005378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	24000230 	.word	0x24000230

08001550 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_wr);
 8001554:	4802      	ldr	r0, [pc, #8]	@ (8001560 <DMA2_Stream0_IRQHandler+0x10>)
 8001556:	f003 ff0f 	bl	8005378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	240002a8 	.word	0x240002a8

08001564 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001568:	4802      	ldr	r0, [pc, #8]	@ (8001574 <OTG_HS_IRQHandler+0x10>)
 800156a:	f005 fcd8 	bl	8006f1e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	24001d24 	.word	0x24001d24

08001578 <CORDIC_IRQHandler>:

/**
  * @brief This function handles CORDIC interrupt.
  */
void CORDIC_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CORDIC_IRQn 0 */

  /* USER CODE END CORDIC_IRQn 0 */
  HAL_CORDIC_IRQHandler(&hcordic);
 800157c:	4802      	ldr	r0, [pc, #8]	@ (8001588 <CORDIC_IRQHandler+0x10>)
 800157e:	f002 fab4 	bl	8003aea <HAL_CORDIC_IRQHandler>
  /* USER CODE BEGIN CORDIC_IRQn 1 */

  /* USER CODE END CORDIC_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	24000208 	.word	0x24000208

0800158c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001590:	4b3e      	ldr	r3, [pc, #248]	@ (800168c <SystemInit+0x100>)
 8001592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001596:	4a3d      	ldr	r2, [pc, #244]	@ (800168c <SystemInit+0x100>)
 8001598:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800159c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001690 <SystemInit+0x104>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 030f 	and.w	r3, r3, #15
 80015a8:	2b06      	cmp	r3, #6
 80015aa:	d807      	bhi.n	80015bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015ac:	4b38      	ldr	r3, [pc, #224]	@ (8001690 <SystemInit+0x104>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f023 030f 	bic.w	r3, r3, #15
 80015b4:	4a36      	ldr	r2, [pc, #216]	@ (8001690 <SystemInit+0x104>)
 80015b6:	f043 0307 	orr.w	r3, r3, #7
 80015ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015bc:	4b35      	ldr	r3, [pc, #212]	@ (8001694 <SystemInit+0x108>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a34      	ldr	r2, [pc, #208]	@ (8001694 <SystemInit+0x108>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015c8:	4b32      	ldr	r3, [pc, #200]	@ (8001694 <SystemInit+0x108>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015ce:	4b31      	ldr	r3, [pc, #196]	@ (8001694 <SystemInit+0x108>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4930      	ldr	r1, [pc, #192]	@ (8001694 <SystemInit+0x108>)
 80015d4:	4b30      	ldr	r3, [pc, #192]	@ (8001698 <SystemInit+0x10c>)
 80015d6:	4013      	ands	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015da:	4b2d      	ldr	r3, [pc, #180]	@ (8001690 <SystemInit+0x104>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d007      	beq.n	80015f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001690 <SystemInit+0x104>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f023 030f 	bic.w	r3, r3, #15
 80015ee:	4a28      	ldr	r2, [pc, #160]	@ (8001690 <SystemInit+0x104>)
 80015f0:	f043 0307 	orr.w	r3, r3, #7
 80015f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015f6:	4b27      	ldr	r3, [pc, #156]	@ (8001694 <SystemInit+0x108>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015fc:	4b25      	ldr	r3, [pc, #148]	@ (8001694 <SystemInit+0x108>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001602:	4b24      	ldr	r3, [pc, #144]	@ (8001694 <SystemInit+0x108>)
 8001604:	2200      	movs	r2, #0
 8001606:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001608:	4b22      	ldr	r3, [pc, #136]	@ (8001694 <SystemInit+0x108>)
 800160a:	4a24      	ldr	r2, [pc, #144]	@ (800169c <SystemInit+0x110>)
 800160c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800160e:	4b21      	ldr	r3, [pc, #132]	@ (8001694 <SystemInit+0x108>)
 8001610:	4a23      	ldr	r2, [pc, #140]	@ (80016a0 <SystemInit+0x114>)
 8001612:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001614:	4b1f      	ldr	r3, [pc, #124]	@ (8001694 <SystemInit+0x108>)
 8001616:	4a23      	ldr	r2, [pc, #140]	@ (80016a4 <SystemInit+0x118>)
 8001618:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800161a:	4b1e      	ldr	r3, [pc, #120]	@ (8001694 <SystemInit+0x108>)
 800161c:	2200      	movs	r2, #0
 800161e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001620:	4b1c      	ldr	r3, [pc, #112]	@ (8001694 <SystemInit+0x108>)
 8001622:	4a20      	ldr	r2, [pc, #128]	@ (80016a4 <SystemInit+0x118>)
 8001624:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001626:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <SystemInit+0x108>)
 8001628:	2200      	movs	r2, #0
 800162a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800162c:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <SystemInit+0x108>)
 800162e:	4a1d      	ldr	r2, [pc, #116]	@ (80016a4 <SystemInit+0x118>)
 8001630:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001632:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <SystemInit+0x108>)
 8001634:	2200      	movs	r2, #0
 8001636:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001638:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <SystemInit+0x108>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a15      	ldr	r2, [pc, #84]	@ (8001694 <SystemInit+0x108>)
 800163e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001642:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001644:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <SystemInit+0x108>)
 8001646:	2200      	movs	r2, #0
 8001648:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800164a:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <SystemInit+0x108>)
 800164c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001650:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d113      	bne.n	8001680 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <SystemInit+0x108>)
 800165a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800165e:	4a0d      	ldr	r2, [pc, #52]	@ (8001694 <SystemInit+0x108>)
 8001660:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001664:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001668:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <SystemInit+0x11c>)
 800166a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800166e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <SystemInit+0x108>)
 8001672:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001676:	4a07      	ldr	r2, [pc, #28]	@ (8001694 <SystemInit+0x108>)
 8001678:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800167c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000ed00 	.word	0xe000ed00
 8001690:	52002000 	.word	0x52002000
 8001694:	58024400 	.word	0x58024400
 8001698:	eaf6ed7f 	.word	0xeaf6ed7f
 800169c:	02020200 	.word	0x02020200
 80016a0:	01ff0000 	.word	0x01ff0000
 80016a4:	01010280 	.word	0x01010280
 80016a8:	52004000 	.word	0x52004000

080016ac <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80016b0:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <ExitRun0Mode+0x2c>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	4a08      	ldr	r2, [pc, #32]	@ (80016d8 <ExitRun0Mode+0x2c>)
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80016bc:	bf00      	nop
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <ExitRun0Mode+0x2c>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f9      	beq.n	80016be <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80016ca:	bf00      	nop
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	58024800 	.word	0x58024800

080016dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b09c      	sub	sp, #112	@ 0x70
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
 800170c:	615a      	str	r2, [r3, #20]
 800170e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2234      	movs	r2, #52	@ 0x34
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f011 fcd0 	bl	80130bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800171c:	4b43      	ldr	r3, [pc, #268]	@ (800182c <MX_TIM1_Init+0x150>)
 800171e:	4a44      	ldr	r2, [pc, #272]	@ (8001830 <MX_TIM1_Init+0x154>)
 8001720:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1020-1;
 8001722:	4b42      	ldr	r3, [pc, #264]	@ (800182c <MX_TIM1_Init+0x150>)
 8001724:	f240 32fb 	movw	r2, #1019	@ 0x3fb
 8001728:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172a:	4b40      	ldr	r3, [pc, #256]	@ (800182c <MX_TIM1_Init+0x150>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 8001730:	4b3e      	ldr	r3, [pc, #248]	@ (800182c <MX_TIM1_Init+0x150>)
 8001732:	2209      	movs	r2, #9
 8001734:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001736:	4b3d      	ldr	r3, [pc, #244]	@ (800182c <MX_TIM1_Init+0x150>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800173c:	4b3b      	ldr	r3, [pc, #236]	@ (800182c <MX_TIM1_Init+0x150>)
 800173e:	2200      	movs	r2, #0
 8001740:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001742:	4b3a      	ldr	r3, [pc, #232]	@ (800182c <MX_TIM1_Init+0x150>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001748:	4838      	ldr	r0, [pc, #224]	@ (800182c <MX_TIM1_Init+0x150>)
 800174a:	f00a fcd6 	bl	800c0fa <HAL_TIM_Base_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001754:	f7ff fce2 	bl	800111c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001758:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800175c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800175e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001762:	4619      	mov	r1, r3
 8001764:	4831      	ldr	r0, [pc, #196]	@ (800182c <MX_TIM1_Init+0x150>)
 8001766:	f00a ff9b 	bl	800c6a0 <HAL_TIM_ConfigClockSource>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001770:	f7ff fcd4 	bl	800111c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001774:	482d      	ldr	r0, [pc, #180]	@ (800182c <MX_TIM1_Init+0x150>)
 8001776:	f00a fd17 	bl	800c1a8 <HAL_TIM_PWM_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001780:	f7ff fccc 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001788:	2300      	movs	r3, #0
 800178a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001790:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001794:	4619      	mov	r1, r3
 8001796:	4825      	ldr	r0, [pc, #148]	@ (800182c <MX_TIM1_Init+0x150>)
 8001798:	f00b fccc 	bl	800d134 <HAL_TIMEx_MasterConfigSynchronization>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80017a2:	f7ff fcbb 	bl	800111c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a6:	2360      	movs	r3, #96	@ 0x60
 80017a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ae:	2300      	movs	r3, #0
 80017b0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017b2:	2300      	movs	r3, #0
 80017b4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017be:	2300      	movs	r3, #0
 80017c0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80017c6:	2200      	movs	r2, #0
 80017c8:	4619      	mov	r1, r3
 80017ca:	4818      	ldr	r0, [pc, #96]	@ (800182c <MX_TIM1_Init+0x150>)
 80017cc:	f00a fe54 	bl	800c478 <HAL_TIM_PWM_ConfigChannel>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80017d6:	f7ff fca1 	bl	800111c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001800:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	4619      	mov	r1, r3
 800180e:	4807      	ldr	r0, [pc, #28]	@ (800182c <MX_TIM1_Init+0x150>)
 8001810:	f00b fd2c 	bl	800d26c <HAL_TIMEx_ConfigBreakDeadTime>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800181a:	f7ff fc7f 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800181e:	4803      	ldr	r0, [pc, #12]	@ (800182c <MX_TIM1_Init+0x150>)
 8001820:	f000 f8c6 	bl	80019b0 <HAL_TIM_MspPostInit>

}
 8001824:	bf00      	nop
 8001826:	3770      	adds	r7, #112	@ 0x70
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	24000588 	.word	0x24000588
 8001830:	40010000 	.word	0x40010000

08001834 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183a:	f107 0310 	add.w	r3, r7, #16
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001852:	4b1e      	ldr	r3, [pc, #120]	@ (80018cc <MX_TIM2_Init+0x98>)
 8001854:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001858:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 270-1;
 800185a:	4b1c      	ldr	r3, [pc, #112]	@ (80018cc <MX_TIM2_Init+0x98>)
 800185c:	f240 120d 	movw	r2, #269	@ 0x10d
 8001860:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001862:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <MX_TIM2_Init+0x98>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001868:	4b18      	ldr	r3, [pc, #96]	@ (80018cc <MX_TIM2_Init+0x98>)
 800186a:	2263      	movs	r2, #99	@ 0x63
 800186c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186e:	4b17      	ldr	r3, [pc, #92]	@ (80018cc <MX_TIM2_Init+0x98>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001874:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <MX_TIM2_Init+0x98>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800187a:	4814      	ldr	r0, [pc, #80]	@ (80018cc <MX_TIM2_Init+0x98>)
 800187c:	f00a fc3d 	bl	800c0fa <HAL_TIM_Base_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001886:	f7ff fc49 	bl	800111c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800188e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	4619      	mov	r1, r3
 8001896:	480d      	ldr	r0, [pc, #52]	@ (80018cc <MX_TIM2_Init+0x98>)
 8001898:	f00a ff02 	bl	800c6a0 <HAL_TIM_ConfigClockSource>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80018a2:	f7ff fc3b 	bl	800111c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018a6:	2320      	movs	r3, #32
 80018a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	4619      	mov	r1, r3
 80018b2:	4806      	ldr	r0, [pc, #24]	@ (80018cc <MX_TIM2_Init+0x98>)
 80018b4:	f00b fc3e 	bl	800d134 <HAL_TIMEx_MasterConfigSynchronization>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80018be:	f7ff fc2d 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	3720      	adds	r7, #32
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	240005d4 	.word	0x240005d4

080018d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a30      	ldr	r2, [pc, #192]	@ (80019a0 <HAL_TIM_Base_MspInit+0xd0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d13e      	bne.n	8001960 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018e2:	4b30      	ldr	r3, [pc, #192]	@ (80019a4 <HAL_TIM_Base_MspInit+0xd4>)
 80018e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018e8:	4a2e      	ldr	r2, [pc, #184]	@ (80019a4 <HAL_TIM_Base_MspInit+0xd4>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80018f2:	4b2c      	ldr	r3, [pc, #176]	@ (80019a4 <HAL_TIM_Base_MspInit+0xd4>)
 80018f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream0;
 8001900:	4b29      	ldr	r3, [pc, #164]	@ (80019a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001902:	4a2a      	ldr	r2, [pc, #168]	@ (80019ac <HAL_TIM_Base_MspInit+0xdc>)
 8001904:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8001906:	4b28      	ldr	r3, [pc, #160]	@ (80019a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001908:	220b      	movs	r2, #11
 800190a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800190c:	4b26      	ldr	r3, [pc, #152]	@ (80019a8 <HAL_TIM_Base_MspInit+0xd8>)
 800190e:	2240      	movs	r2, #64	@ 0x40
 8001910:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001912:	4b25      	ldr	r3, [pc, #148]	@ (80019a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001914:	2200      	movs	r2, #0
 8001916:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001918:	4b23      	ldr	r3, [pc, #140]	@ (80019a8 <HAL_TIM_Base_MspInit+0xd8>)
 800191a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800191e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001920:	4b21      	ldr	r3, [pc, #132]	@ (80019a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001922:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001926:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001928:	4b1f      	ldr	r3, [pc, #124]	@ (80019a8 <HAL_TIM_Base_MspInit+0xd8>)
 800192a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800192e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001930:	4b1d      	ldr	r3, [pc, #116]	@ (80019a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001936:	4b1c      	ldr	r3, [pc, #112]	@ (80019a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001938:	2200      	movs	r2, #0
 800193a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800193c:	4b1a      	ldr	r3, [pc, #104]	@ (80019a8 <HAL_TIM_Base_MspInit+0xd8>)
 800193e:	2200      	movs	r2, #0
 8001940:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001942:	4819      	ldr	r0, [pc, #100]	@ (80019a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001944:	f002 fc5c 	bl	8004200 <HAL_DMA_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800194e:	f7ff fbe5 	bl	800111c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a14      	ldr	r2, [pc, #80]	@ (80019a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001956:	625a      	str	r2, [r3, #36]	@ 0x24
 8001958:	4a13      	ldr	r2, [pc, #76]	@ (80019a8 <HAL_TIM_Base_MspInit+0xd8>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800195e:	e01b      	b.n	8001998 <HAL_TIM_Base_MspInit+0xc8>
  else if(tim_baseHandle->Instance==TIM2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001968:	d116      	bne.n	8001998 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800196a:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <HAL_TIM_Base_MspInit+0xd4>)
 800196c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001970:	4a0c      	ldr	r2, [pc, #48]	@ (80019a4 <HAL_TIM_Base_MspInit+0xd4>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800197a:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <HAL_TIM_Base_MspInit+0xd4>)
 800197c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	2100      	movs	r1, #0
 800198c:	201c      	movs	r0, #28
 800198e:	f002 fa22 	bl	8003dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001992:	201c      	movs	r0, #28
 8001994:	f002 fa39 	bl	8003e0a <HAL_NVIC_EnableIRQ>
}
 8001998:	bf00      	nop
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40010000 	.word	0x40010000
 80019a4:	58024400 	.word	0x58024400
 80019a8:	24000620 	.word	0x24000620
 80019ac:	40020010 	.word	0x40020010

080019b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a13      	ldr	r2, [pc, #76]	@ (8001a1c <HAL_TIM_MspPostInit+0x6c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d11f      	bne.n	8001a12 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019d2:	4b13      	ldr	r3, [pc, #76]	@ (8001a20 <HAL_TIM_MspPostInit+0x70>)
 80019d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019d8:	4a11      	ldr	r2, [pc, #68]	@ (8001a20 <HAL_TIM_MspPostInit+0x70>)
 80019da:	f043 0310 	orr.w	r3, r3, #16
 80019de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a20 <HAL_TIM_MspPostInit+0x70>)
 80019e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019e8:	f003 0310 	and.w	r3, r3, #16
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a02:	2301      	movs	r3, #1
 8001a04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4805      	ldr	r0, [pc, #20]	@ (8001a24 <HAL_TIM_MspPostInit+0x74>)
 8001a0e:	f004 fe19 	bl	8006644 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a12:	bf00      	nop
 8001a14:	3720      	adds	r7, #32
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40010000 	.word	0x40010000
 8001a20:	58024400 	.word	0x58024400
 8001a24:	58021000 	.word	0x58021000

08001a28 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a2c:	4b22      	ldr	r3, [pc, #136]	@ (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a2e:	4a23      	ldr	r2, [pc, #140]	@ (8001abc <MX_USART2_UART_Init+0x94>)
 8001a30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a32:	4b21      	ldr	r3, [pc, #132]	@ (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a40:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a46:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a4e:	220c      	movs	r2, #12
 8001a50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a52:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a58:	4b17      	ldr	r3, [pc, #92]	@ (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a5e:	4b16      	ldr	r3, [pc, #88]	@ (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a64:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a6a:	4b13      	ldr	r3, [pc, #76]	@ (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a70:	4811      	ldr	r0, [pc, #68]	@ (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a72:	f00b fca5 	bl	800d3c0 <HAL_UART_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001a7c:	f7ff fb4e 	bl	800111c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a80:	2100      	movs	r1, #0
 8001a82:	480d      	ldr	r0, [pc, #52]	@ (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a84:	f00d fa02 	bl	800ee8c <HAL_UARTEx_SetTxFifoThreshold>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001a8e:	f7ff fb45 	bl	800111c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a92:	2100      	movs	r1, #0
 8001a94:	4808      	ldr	r0, [pc, #32]	@ (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001a96:	f00d fa37 	bl	800ef08 <HAL_UARTEx_SetRxFifoThreshold>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001aa0:	f7ff fb3c 	bl	800111c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001aa4:	4804      	ldr	r0, [pc, #16]	@ (8001ab8 <MX_USART2_UART_Init+0x90>)
 8001aa6:	f00d f9b8 	bl	800ee1a <HAL_UARTEx_DisableFifoMode>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ab0:	f7ff fb34 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	24000698 	.word	0x24000698
 8001abc:	40004400 	.word	0x40004400

08001ac0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b0b8      	sub	sp, #224	@ 0xe0
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	22b8      	movs	r2, #184	@ 0xb8
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f011 faeb 	bl	80130bc <memset>
  if(uartHandle->Instance==USART2)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a59      	ldr	r2, [pc, #356]	@ (8001c50 <HAL_UART_MspInit+0x190>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	f040 80ab 	bne.w	8001c48 <HAL_UART_MspInit+0x188>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001af2:	f04f 0202 	mov.w	r2, #2
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b04:	f107 0310 	add.w	r3, r7, #16
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f007 fb17 	bl	800913c <HAL_RCCEx_PeriphCLKConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001b14:	f7ff fb02 	bl	800111c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b18:	4b4e      	ldr	r3, [pc, #312]	@ (8001c54 <HAL_UART_MspInit+0x194>)
 8001b1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b1e:	4a4d      	ldr	r2, [pc, #308]	@ (8001c54 <HAL_UART_MspInit+0x194>)
 8001b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b24:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b28:	4b4a      	ldr	r3, [pc, #296]	@ (8001c54 <HAL_UART_MspInit+0x194>)
 8001b2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	4b47      	ldr	r3, [pc, #284]	@ (8001c54 <HAL_UART_MspInit+0x194>)
 8001b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b3c:	4a45      	ldr	r2, [pc, #276]	@ (8001c54 <HAL_UART_MspInit+0x194>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b46:	4b43      	ldr	r3, [pc, #268]	@ (8001c54 <HAL_UART_MspInit+0x194>)
 8001b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b54:	230c      	movs	r3, #12
 8001b56:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b6c:	2307      	movs	r3, #7
 8001b6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b72:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001b76:	4619      	mov	r1, r3
 8001b78:	4837      	ldr	r0, [pc, #220]	@ (8001c58 <HAL_UART_MspInit+0x198>)
 8001b7a:	f004 fd63 	bl	8006644 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream1;
 8001b7e:	4b37      	ldr	r3, [pc, #220]	@ (8001c5c <HAL_UART_MspInit+0x19c>)
 8001b80:	4a37      	ldr	r2, [pc, #220]	@ (8001c60 <HAL_UART_MspInit+0x1a0>)
 8001b82:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001b84:	4b35      	ldr	r3, [pc, #212]	@ (8001c5c <HAL_UART_MspInit+0x19c>)
 8001b86:	222c      	movs	r2, #44	@ 0x2c
 8001b88:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b8a:	4b34      	ldr	r3, [pc, #208]	@ (8001c5c <HAL_UART_MspInit+0x19c>)
 8001b8c:	2240      	movs	r2, #64	@ 0x40
 8001b8e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b90:	4b32      	ldr	r3, [pc, #200]	@ (8001c5c <HAL_UART_MspInit+0x19c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b96:	4b31      	ldr	r3, [pc, #196]	@ (8001c5c <HAL_UART_MspInit+0x19c>)
 8001b98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b9c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c5c <HAL_UART_MspInit+0x19c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ba4:	4b2d      	ldr	r3, [pc, #180]	@ (8001c5c <HAL_UART_MspInit+0x19c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001baa:	4b2c      	ldr	r3, [pc, #176]	@ (8001c5c <HAL_UART_MspInit+0x19c>)
 8001bac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bb0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c5c <HAL_UART_MspInit+0x19c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bb8:	4b28      	ldr	r3, [pc, #160]	@ (8001c5c <HAL_UART_MspInit+0x19c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001bbe:	4827      	ldr	r0, [pc, #156]	@ (8001c5c <HAL_UART_MspInit+0x19c>)
 8001bc0:	f002 fb1e 	bl	8004200 <HAL_DMA_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001bca:	f7ff faa7 	bl	800111c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a22      	ldr	r2, [pc, #136]	@ (8001c5c <HAL_UART_MspInit+0x19c>)
 8001bd2:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001bd4:	4a21      	ldr	r2, [pc, #132]	@ (8001c5c <HAL_UART_MspInit+0x19c>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream2;
 8001bda:	4b22      	ldr	r3, [pc, #136]	@ (8001c64 <HAL_UART_MspInit+0x1a4>)
 8001bdc:	4a22      	ldr	r2, [pc, #136]	@ (8001c68 <HAL_UART_MspInit+0x1a8>)
 8001bde:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001be0:	4b20      	ldr	r3, [pc, #128]	@ (8001c64 <HAL_UART_MspInit+0x1a4>)
 8001be2:	222b      	movs	r2, #43	@ 0x2b
 8001be4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001be6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c64 <HAL_UART_MspInit+0x1a4>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bec:	4b1d      	ldr	r3, [pc, #116]	@ (8001c64 <HAL_UART_MspInit+0x1a4>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c64 <HAL_UART_MspInit+0x1a4>)
 8001bf4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bf8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001c64 <HAL_UART_MspInit+0x1a4>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c00:	4b18      	ldr	r3, [pc, #96]	@ (8001c64 <HAL_UART_MspInit+0x1a4>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001c06:	4b17      	ldr	r3, [pc, #92]	@ (8001c64 <HAL_UART_MspInit+0x1a4>)
 8001c08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c0c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c0e:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <HAL_UART_MspInit+0x1a4>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c14:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <HAL_UART_MspInit+0x1a4>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c1a:	4812      	ldr	r0, [pc, #72]	@ (8001c64 <HAL_UART_MspInit+0x1a4>)
 8001c1c:	f002 faf0 	bl	8004200 <HAL_DMA_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8001c26:	f7ff fa79 	bl	800111c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c64 <HAL_UART_MspInit+0x1a4>)
 8001c2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001c32:	4a0c      	ldr	r2, [pc, #48]	@ (8001c64 <HAL_UART_MspInit+0x1a4>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	2026      	movs	r0, #38	@ 0x26
 8001c3e:	f002 f8ca 	bl	8003dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c42:	2026      	movs	r0, #38	@ 0x26
 8001c44:	f002 f8e1 	bl	8003e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c48:	bf00      	nop
 8001c4a:	37e0      	adds	r7, #224	@ 0xe0
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40004400 	.word	0x40004400
 8001c54:	58024400 	.word	0x58024400
 8001c58:	58020000 	.word	0x58020000
 8001c5c:	2400072c 	.word	0x2400072c
 8001c60:	40020028 	.word	0x40020028
 8001c64:	240007a4 	.word	0x240007a4
 8001c68:	40020040 	.word	0x40020040

08001c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c6c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001ca8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001c70:	f7ff fd1c 	bl	80016ac <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c74:	f7ff fc8a 	bl	800158c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c78:	480c      	ldr	r0, [pc, #48]	@ (8001cac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c7a:	490d      	ldr	r1, [pc, #52]	@ (8001cb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c80:	e002      	b.n	8001c88 <LoopCopyDataInit>

08001c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c86:	3304      	adds	r3, #4

08001c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c8c:	d3f9      	bcc.n	8001c82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c90:	4c0a      	ldr	r4, [pc, #40]	@ (8001cbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c94:	e001      	b.n	8001c9a <LoopFillZerobss>

08001c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c98:	3204      	adds	r2, #4

08001c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c9c:	d3fb      	bcc.n	8001c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c9e:	f011 fa15 	bl	80130cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ca2:	f7ff f975 	bl	8000f90 <main>
  bx  lr
 8001ca6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ca8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001cac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001cb0:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8001cb4:	080131e0 	.word	0x080131e0
  ldr r2, =_sbss
 8001cb8:	24000104 	.word	0x24000104
  ldr r4, =_ebss
 8001cbc:	24002428 	.word	0x24002428

08001cc0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc0:	e7fe      	b.n	8001cc0 <ADC3_IRQHandler>

08001cc2 <MainCpp>:
constexpr uint8_t Major_Version{1};
constexpr uint8_t Minor_Version{0};


__attribute__((noreturn)) void MainCpp()
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0

	while(true)
 8001cc6:	bf00      	nop
 8001cc8:	e7fd      	b.n	8001cc6 <MainCpp+0x4>
	...

08001ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd2:	2003      	movs	r0, #3
 8001cd4:	f002 f874 	bl	8003dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cd8:	f007 f85a 	bl	8008d90 <HAL_RCC_GetSysClockFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <HAL_Init+0x68>)
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	f003 030f 	and.w	r3, r3, #15
 8001ce8:	4913      	ldr	r1, [pc, #76]	@ (8001d38 <HAL_Init+0x6c>)
 8001cea:	5ccb      	ldrb	r3, [r1, r3]
 8001cec:	f003 031f 	and.w	r3, r3, #31
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d34 <HAL_Init+0x68>)
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	4a0e      	ldr	r2, [pc, #56]	@ (8001d38 <HAL_Init+0x6c>)
 8001d00:	5cd3      	ldrb	r3, [r2, r3]
 8001d02:	f003 031f 	and.w	r3, r3, #31
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d3c <HAL_Init+0x70>)
 8001d0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d10:	4a0b      	ldr	r2, [pc, #44]	@ (8001d40 <HAL_Init+0x74>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d16:	2000      	movs	r0, #0
 8001d18:	f000 f814 	bl	8001d44 <HAL_InitTick>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e002      	b.n	8001d2c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d26:	f7ff fb51 	bl	80013cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	58024400 	.word	0x58024400
 8001d38:	08013190 	.word	0x08013190
 8001d3c:	24000004 	.word	0x24000004
 8001d40:	24000000 	.word	0x24000000

08001d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d4c:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <HAL_InitTick+0x60>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e021      	b.n	8001d9c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d58:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <HAL_InitTick+0x64>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <HAL_InitTick+0x60>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4619      	mov	r1, r3
 8001d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f002 f859 	bl	8003e26 <HAL_SYSTICK_Config>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00e      	b.n	8001d9c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b0f      	cmp	r3, #15
 8001d82:	d80a      	bhi.n	8001d9a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d84:	2200      	movs	r2, #0
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f002 f823 	bl	8003dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d90:	4a06      	ldr	r2, [pc, #24]	@ (8001dac <HAL_InitTick+0x68>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e000      	b.n	8001d9c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	2400000c 	.word	0x2400000c
 8001da8:	24000000 	.word	0x24000000
 8001dac:	24000008 	.word	0x24000008

08001db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <HAL_IncTick+0x20>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <HAL_IncTick+0x24>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4a04      	ldr	r2, [pc, #16]	@ (8001dd4 <HAL_IncTick+0x24>)
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	2400000c 	.word	0x2400000c
 8001dd4:	24000840 	.word	0x24000840

08001dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return uwTick;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	@ (8001dec <HAL_GetTick+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	24000840 	.word	0x24000840

08001df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff ffee 	bl	8001dd8 <HAL_GetTick>
 8001dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e08:	d005      	beq.n	8001e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <HAL_Delay+0x44>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e16:	bf00      	nop
 8001e18:	f7ff ffde 	bl	8001dd8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d8f7      	bhi.n	8001e18 <HAL_Delay+0x28>
  {
  }
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	2400000c 	.word	0x2400000c

08001e38 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	609a      	str	r2, [r3, #8]
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	609a      	str	r2, [r3, #8]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a18      	ldr	r2, [pc, #96]	@ (8001f10 <LL_ADC_SetChannelPreselection+0x70>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d027      	beq.n	8001f02 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d107      	bne.n	8001ecc <LL_ADC_SetChannelPreselection+0x2c>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	0e9b      	lsrs	r3, r3, #26
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	e015      	b.n	8001ef8 <LL_ADC_SetChannelPreselection+0x58>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	e003      	b.n	8001eee <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	f003 031f 	and.w	r3, r3, #31
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	69d2      	ldr	r2, [r2, #28]
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8001f02:	bf00      	nop
 8001f04:	371c      	adds	r7, #28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	58026000 	.word	0x58026000

08001f14 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
 8001f20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	3360      	adds	r3, #96	@ 0x60
 8001f26:	461a      	mov	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4a10      	ldr	r2, [pc, #64]	@ (8001f74 <LL_ADC_SetOffset+0x60>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d10b      	bne.n	8001f50 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001f4e:	e00b      	b.n	8001f68 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	430b      	orrs	r3, r1
 8001f62:	431a      	orrs	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	601a      	str	r2, [r3, #0]
}
 8001f68:	bf00      	nop
 8001f6a:	371c      	adds	r7, #28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	58026000 	.word	0x58026000

08001f78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3360      	adds	r3, #96	@ 0x60
 8001f86:	461a      	mov	r2, r3
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	f003 031f 	and.w	r3, r3, #31
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	611a      	str	r2, [r3, #16]
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8002018 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d00e      	beq.n	800200a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	3360      	adds	r3, #96	@ 0x60
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	431a      	orrs	r2, r3
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	601a      	str	r2, [r3, #0]
  }
}
 800200a:	bf00      	nop
 800200c:	371c      	adds	r7, #28
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	58026000 	.word	0x58026000

0800201c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800201c:	b480      	push	{r7}
 800201e:	b087      	sub	sp, #28
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4a0c      	ldr	r2, [pc, #48]	@ (800205c <LL_ADC_SetOffsetSaturation+0x40>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d10e      	bne.n	800204e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3360      	adds	r3, #96	@ 0x60
 8002034:	461a      	mov	r2, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	431a      	orrs	r2, r3
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800204e:	bf00      	nop
 8002050:	371c      	adds	r7, #28
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	58026000 	.word	0x58026000

08002060 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4a0c      	ldr	r2, [pc, #48]	@ (80020a0 <LL_ADC_SetOffsetSign+0x40>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d10e      	bne.n	8002092 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	3360      	adds	r3, #96	@ 0x60
 8002078:	461a      	mov	r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	431a      	orrs	r2, r3
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002092:	bf00      	nop
 8002094:	371c      	adds	r7, #28
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	58026000 	.word	0x58026000

080020a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3360      	adds	r3, #96	@ 0x60
 80020b4:	461a      	mov	r2, r3
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4a0c      	ldr	r2, [pc, #48]	@ (80020f4 <LL_ADC_SetOffsetState+0x50>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d108      	bne.n	80020d8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	431a      	orrs	r2, r3
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80020d6:	e007      	b.n	80020e8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	601a      	str	r2, [r3, #0]
}
 80020e8:	bf00      	nop
 80020ea:	371c      	adds	r7, #28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	58026000 	.word	0x58026000

080020f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800211e:	b480      	push	{r7}
 8002120:	b087      	sub	sp, #28
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	3330      	adds	r3, #48	@ 0x30
 800212e:	461a      	mov	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	0a1b      	lsrs	r3, r3, #8
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	4413      	add	r3, r2
 800213c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	211f      	movs	r1, #31
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	401a      	ands	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	0e9b      	lsrs	r3, r3, #26
 8002156:	f003 011f 	and.w	r1, r3, #31
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	431a      	orrs	r2, r3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800216a:	bf00      	nop
 800216c:	371c      	adds	r7, #28
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002182:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3314      	adds	r3, #20
 80021ac:	461a      	mov	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	0e5b      	lsrs	r3, r3, #25
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	4413      	add	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	0d1b      	lsrs	r3, r3, #20
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	2107      	movs	r1, #7
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	401a      	ands	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	0d1b      	lsrs	r3, r3, #20
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	431a      	orrs	r2, r3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021e6:	bf00      	nop
 80021e8:	371c      	adds	r7, #28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4a1a      	ldr	r2, [pc, #104]	@ (800226c <LL_ADC_SetChannelSingleDiff+0x78>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d115      	bne.n	8002234 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002214:	43db      	mvns	r3, r3
 8002216:	401a      	ands	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f003 0318 	and.w	r3, r3, #24
 800221e:	4914      	ldr	r1, [pc, #80]	@ (8002270 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002220:	40d9      	lsrs	r1, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	400b      	ands	r3, r1
 8002226:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800222a:	431a      	orrs	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002232:	e014      	b.n	800225e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002240:	43db      	mvns	r3, r3
 8002242:	401a      	ands	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f003 0318 	and.w	r3, r3, #24
 800224a:	4909      	ldr	r1, [pc, #36]	@ (8002270 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800224c:	40d9      	lsrs	r1, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	400b      	ands	r3, r1
 8002252:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002256:	431a      	orrs	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	58026000 	.word	0x58026000
 8002270:	000fffff 	.word	0x000fffff

08002274 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 031f 	and.w	r3, r3, #31
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	4b04      	ldr	r3, [pc, #16]	@ (80022cc <LL_ADC_DisableDeepPowerDown+0x20>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6093      	str	r3, [r2, #8]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	5fffffc0 	.word	0x5fffffc0

080022d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022e4:	d101      	bne.n	80022ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	4b05      	ldr	r3, [pc, #20]	@ (800231c <LL_ADC_EnableInternalRegulator+0x24>)
 8002306:	4013      	ands	r3, r2
 8002308:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	6fffffc0 	.word	0x6fffffc0

08002320 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002330:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002334:	d101      	bne.n	800233a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <LL_ADC_IsEnabled+0x18>
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <LL_ADC_IsEnabled+0x1a>
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	2b04      	cmp	r3, #4
 8002380:	d101      	bne.n	8002386 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d101      	bne.n	80023ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b089      	sub	sp, #36	@ 0x24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e1ee      	b.n	80027b4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d109      	bne.n	80023f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7fe f9a1 	bl	800072c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff67 	bl	80022d0 <LL_ADC_IsDeepPowerDownEnabled>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d004      	beq.n	8002412 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff4d 	bl	80022ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ff82 	bl	8002320 <LL_ADC_IsInternalRegulatorEnabled>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d114      	bne.n	800244c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff ff66 	bl	80022f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800242c:	4b8e      	ldr	r3, [pc, #568]	@ (8002668 <HAL_ADC_Init+0x2ac>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	099b      	lsrs	r3, r3, #6
 8002432:	4a8e      	ldr	r2, [pc, #568]	@ (800266c <HAL_ADC_Init+0x2b0>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	099b      	lsrs	r3, r3, #6
 800243a:	3301      	adds	r3, #1
 800243c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800243e:	e002      	b.n	8002446 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	3b01      	subs	r3, #1
 8002444:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1f9      	bne.n	8002440 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff65 	bl	8002320 <LL_ADC_IsInternalRegulatorEnabled>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10d      	bne.n	8002478 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002460:	f043 0210 	orr.w	r2, r3, #16
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800246c:	f043 0201 	orr.w	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff76 	bl	800236e <LL_ADC_REG_IsConversionOngoing>
 8002482:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b00      	cmp	r3, #0
 800248e:	f040 8188 	bne.w	80027a2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2b00      	cmp	r3, #0
 8002496:	f040 8184 	bne.w	80027a2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800249e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80024a2:	f043 0202 	orr.w	r2, r3, #2
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff ff4a 	bl	8002348 <LL_ADC_IsEnabled>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d136      	bne.n	8002528 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a6c      	ldr	r2, [pc, #432]	@ (8002670 <HAL_ADC_Init+0x2b4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d004      	beq.n	80024ce <HAL_ADC_Init+0x112>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a6a      	ldr	r2, [pc, #424]	@ (8002674 <HAL_ADC_Init+0x2b8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d10e      	bne.n	80024ec <HAL_ADC_Init+0x130>
 80024ce:	4868      	ldr	r0, [pc, #416]	@ (8002670 <HAL_ADC_Init+0x2b4>)
 80024d0:	f7ff ff3a 	bl	8002348 <LL_ADC_IsEnabled>
 80024d4:	4604      	mov	r4, r0
 80024d6:	4867      	ldr	r0, [pc, #412]	@ (8002674 <HAL_ADC_Init+0x2b8>)
 80024d8:	f7ff ff36 	bl	8002348 <LL_ADC_IsEnabled>
 80024dc:	4603      	mov	r3, r0
 80024de:	4323      	orrs	r3, r4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	e008      	b.n	80024fe <HAL_ADC_Init+0x142>
 80024ec:	4862      	ldr	r0, [pc, #392]	@ (8002678 <HAL_ADC_Init+0x2bc>)
 80024ee:	f7ff ff2b 	bl	8002348 <LL_ADC_IsEnabled>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	bf0c      	ite	eq
 80024f8:	2301      	moveq	r3, #1
 80024fa:	2300      	movne	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d012      	beq.n	8002528 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a5a      	ldr	r2, [pc, #360]	@ (8002670 <HAL_ADC_Init+0x2b4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d004      	beq.n	8002516 <HAL_ADC_Init+0x15a>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a58      	ldr	r2, [pc, #352]	@ (8002674 <HAL_ADC_Init+0x2b8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d101      	bne.n	800251a <HAL_ADC_Init+0x15e>
 8002516:	4a59      	ldr	r2, [pc, #356]	@ (800267c <HAL_ADC_Init+0x2c0>)
 8002518:	e000      	b.n	800251c <HAL_ADC_Init+0x160>
 800251a:	4a59      	ldr	r2, [pc, #356]	@ (8002680 <HAL_ADC_Init+0x2c4>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4619      	mov	r1, r3
 8002522:	4610      	mov	r0, r2
 8002524:	f7ff fc88 	bl	8001e38 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a52      	ldr	r2, [pc, #328]	@ (8002678 <HAL_ADC_Init+0x2bc>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d129      	bne.n	8002586 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	7e5b      	ldrb	r3, [r3, #25]
 8002536:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800253c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002542:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b08      	cmp	r3, #8
 800254a:	d013      	beq.n	8002574 <HAL_ADC_Init+0x1b8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b0c      	cmp	r3, #12
 8002552:	d00d      	beq.n	8002570 <HAL_ADC_Init+0x1b4>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b1c      	cmp	r3, #28
 800255a:	d007      	beq.n	800256c <HAL_ADC_Init+0x1b0>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	2b18      	cmp	r3, #24
 8002562:	d101      	bne.n	8002568 <HAL_ADC_Init+0x1ac>
 8002564:	2318      	movs	r3, #24
 8002566:	e006      	b.n	8002576 <HAL_ADC_Init+0x1ba>
 8002568:	2300      	movs	r3, #0
 800256a:	e004      	b.n	8002576 <HAL_ADC_Init+0x1ba>
 800256c:	2310      	movs	r3, #16
 800256e:	e002      	b.n	8002576 <HAL_ADC_Init+0x1ba>
 8002570:	2308      	movs	r3, #8
 8002572:	e000      	b.n	8002576 <HAL_ADC_Init+0x1ba>
 8002574:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002576:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800257e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
 8002584:	e00e      	b.n	80025a4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	7e5b      	ldrb	r3, [r3, #25]
 800258a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002590:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002596:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800259e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d106      	bne.n	80025bc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b2:	3b01      	subs	r3, #1
 80025b4:	045b      	lsls	r3, r3, #17
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d009      	beq.n	80025d8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a26      	ldr	r2, [pc, #152]	@ (8002678 <HAL_ADC_Init+0x2bc>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d115      	bne.n	800260e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	4b26      	ldr	r3, [pc, #152]	@ (8002684 <HAL_ADC_Init+0x2c8>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	69b9      	ldr	r1, [r7, #24]
 80025f2:	430b      	orrs	r3, r1
 80025f4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	611a      	str	r2, [r3, #16]
 800260c:	e009      	b.n	8002622 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	4b1c      	ldr	r3, [pc, #112]	@ (8002688 <HAL_ADC_Init+0x2cc>)
 8002616:	4013      	ands	r3, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	69b9      	ldr	r1, [r7, #24]
 800261e:	430b      	orrs	r3, r1
 8002620:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fea1 	bl	800236e <LL_ADC_REG_IsConversionOngoing>
 800262c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff feae 	bl	8002394 <LL_ADC_INJ_IsConversionOngoing>
 8002638:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	2b00      	cmp	r3, #0
 800263e:	f040 808e 	bne.w	800275e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	f040 808a 	bne.w	800275e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a0a      	ldr	r2, [pc, #40]	@ (8002678 <HAL_ADC_Init+0x2bc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d11b      	bne.n	800268c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	7e1b      	ldrb	r3, [r3, #24]
 8002658:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002660:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	e018      	b.n	800269a <HAL_ADC_Init+0x2de>
 8002668:	24000000 	.word	0x24000000
 800266c:	053e2d63 	.word	0x053e2d63
 8002670:	40022000 	.word	0x40022000
 8002674:	40022100 	.word	0x40022100
 8002678:	58026000 	.word	0x58026000
 800267c:	40022300 	.word	0x40022300
 8002680:	58026300 	.word	0x58026300
 8002684:	fff04007 	.word	0xfff04007
 8002688:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	7e1b      	ldrb	r3, [r3, #24]
 8002690:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	4b46      	ldr	r3, [pc, #280]	@ (80027bc <HAL_ADC_Init+0x400>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	69b9      	ldr	r1, [r7, #24]
 80026aa:	430b      	orrs	r3, r1
 80026ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d137      	bne.n	8002728 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026bc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a3f      	ldr	r2, [pc, #252]	@ (80027c0 <HAL_ADC_Init+0x404>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d116      	bne.n	80026f6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	4b3d      	ldr	r3, [pc, #244]	@ (80027c4 <HAL_ADC_Init+0x408>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80026da:	4311      	orrs	r1, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80026e0:	4311      	orrs	r1, r2
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80026e6:	430a      	orrs	r2, r1
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	611a      	str	r2, [r3, #16]
 80026f4:	e020      	b.n	8002738 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	4b32      	ldr	r3, [pc, #200]	@ (80027c8 <HAL_ADC_Init+0x40c>)
 80026fe:	4013      	ands	r3, r2
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002704:	3a01      	subs	r2, #1
 8002706:	0411      	lsls	r1, r2, #16
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800270c:	4311      	orrs	r1, r2
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002712:	4311      	orrs	r1, r2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002718:	430a      	orrs	r2, r1
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0201 	orr.w	r2, r2, #1
 8002724:	611a      	str	r2, [r3, #16]
 8002726:	e007      	b.n	8002738 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a1b      	ldr	r2, [pc, #108]	@ (80027c0 <HAL_ADC_Init+0x404>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d002      	beq.n	800275e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 ff63 	bl	8003624 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d10c      	bne.n	8002780 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276c:	f023 010f 	bic.w	r1, r3, #15
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	1e5a      	subs	r2, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	631a      	str	r2, [r3, #48]	@ 0x30
 800277e:	e007      	b.n	8002790 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 020f 	bic.w	r2, r2, #15
 800278e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002794:	f023 0303 	bic.w	r3, r3, #3
 8002798:	f043 0201 	orr.w	r2, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	661a      	str	r2, [r3, #96]	@ 0x60
 80027a0:	e007      	b.n	80027b2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a6:	f043 0210 	orr.w	r2, r3, #16
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3724      	adds	r7, #36	@ 0x24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd90      	pop	{r4, r7, pc}
 80027bc:	ffffbffc 	.word	0xffffbffc
 80027c0:	58026000 	.word	0x58026000
 80027c4:	fc00f81f 	.word	0xfc00f81f
 80027c8:	fc00f81e 	.word	0xfc00f81e

080027cc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08a      	sub	sp, #40	@ 0x28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a87      	ldr	r2, [pc, #540]	@ (8002a0c <HAL_ADC_IRQHandler+0x240>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d004      	beq.n	80027fc <HAL_ADC_IRQHandler+0x30>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a86      	ldr	r2, [pc, #536]	@ (8002a10 <HAL_ADC_IRQHandler+0x244>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d101      	bne.n	8002800 <HAL_ADC_IRQHandler+0x34>
 80027fc:	4b85      	ldr	r3, [pc, #532]	@ (8002a14 <HAL_ADC_IRQHandler+0x248>)
 80027fe:	e000      	b.n	8002802 <HAL_ADC_IRQHandler+0x36>
 8002800:	4b85      	ldr	r3, [pc, #532]	@ (8002a18 <HAL_ADC_IRQHandler+0x24c>)
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fd36 	bl	8002274 <LL_ADC_GetMultimode>
 8002808:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d017      	beq.n	8002844 <HAL_ADC_IRQHandler+0x78>
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d012      	beq.n	8002844 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b00      	cmp	r3, #0
 8002828:	d105      	bne.n	8002836 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800282e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f001 f830 	bl	800389c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2202      	movs	r2, #2
 8002842:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	d004      	beq.n	8002858 <HAL_ADC_IRQHandler+0x8c>
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10a      	bne.n	800286e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8083 	beq.w	800296a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d07d      	beq.n	800296a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	2b00      	cmp	r3, #0
 8002878:	d105      	bne.n	8002886 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800287e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fc34 	bl	80020f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d062      	beq.n	800295c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a5d      	ldr	r2, [pc, #372]	@ (8002a10 <HAL_ADC_IRQHandler+0x244>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d002      	beq.n	80028a6 <HAL_ADC_IRQHandler+0xda>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	e000      	b.n	80028a8 <HAL_ADC_IRQHandler+0xdc>
 80028a6:	4b59      	ldr	r3, [pc, #356]	@ (8002a0c <HAL_ADC_IRQHandler+0x240>)
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d008      	beq.n	80028c2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d002      	beq.n	80028c2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	2b09      	cmp	r3, #9
 80028c0:	d104      	bne.n	80028cc <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	623b      	str	r3, [r7, #32]
 80028ca:	e00c      	b.n	80028e6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002a10 <HAL_ADC_IRQHandler+0x244>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d002      	beq.n	80028dc <HAL_ADC_IRQHandler+0x110>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	e000      	b.n	80028de <HAL_ADC_IRQHandler+0x112>
 80028dc:	4b4b      	ldr	r3, [pc, #300]	@ (8002a0c <HAL_ADC_IRQHandler+0x240>)
 80028de:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d135      	bne.n	800295c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d12e      	bne.n	800295c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fd33 	bl	800236e <LL_ADC_REG_IsConversionOngoing>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d11a      	bne.n	8002944 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 020c 	bic.w	r2, r2, #12
 800291c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002922:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800292e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d112      	bne.n	800295c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800293a:	f043 0201 	orr.w	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	661a      	str	r2, [r3, #96]	@ 0x60
 8002942:	e00b      	b.n	800295c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002948:	f043 0210 	orr.w	r2, r3, #16
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002954:	f043 0201 	orr.w	r2, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f96f 	bl	8002c40 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	220c      	movs	r2, #12
 8002968:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b00      	cmp	r3, #0
 8002972:	d004      	beq.n	800297e <HAL_ADC_IRQHandler+0x1b2>
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	f003 0320 	and.w	r3, r3, #32
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10b      	bne.n	8002996 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80a0 	beq.w	8002aca <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 809a 	beq.w	8002aca <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d105      	bne.n	80029ae <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029a6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fbdf 	bl	8002176 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80029b8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fb9a 	bl	80020f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80029c4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a11      	ldr	r2, [pc, #68]	@ (8002a10 <HAL_ADC_IRQHandler+0x244>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d002      	beq.n	80029d6 <HAL_ADC_IRQHandler+0x20a>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	e000      	b.n	80029d8 <HAL_ADC_IRQHandler+0x20c>
 80029d6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a0c <HAL_ADC_IRQHandler+0x240>)
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	4293      	cmp	r3, r2
 80029de:	d008      	beq.n	80029f2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d005      	beq.n	80029f2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b06      	cmp	r3, #6
 80029ea:	d002      	beq.n	80029f2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b07      	cmp	r3, #7
 80029f0:	d104      	bne.n	80029fc <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	623b      	str	r3, [r7, #32]
 80029fa:	e014      	b.n	8002a26 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a03      	ldr	r2, [pc, #12]	@ (8002a10 <HAL_ADC_IRQHandler+0x244>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00a      	beq.n	8002a1c <HAL_ADC_IRQHandler+0x250>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	e008      	b.n	8002a1e <HAL_ADC_IRQHandler+0x252>
 8002a0c:	40022000 	.word	0x40022000
 8002a10:	40022100 	.word	0x40022100
 8002a14:	40022300 	.word	0x40022300
 8002a18:	58026300 	.word	0x58026300
 8002a1c:	4b84      	ldr	r3, [pc, #528]	@ (8002c30 <HAL_ADC_IRQHandler+0x464>)
 8002a1e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d047      	beq.n	8002abc <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <HAL_ADC_IRQHandler+0x27a>
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d03f      	beq.n	8002abc <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d13a      	bne.n	8002abc <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a50:	2b40      	cmp	r3, #64	@ 0x40
 8002a52:	d133      	bne.n	8002abc <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d12e      	bne.n	8002abc <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fc96 	bl	8002394 <LL_ADC_INJ_IsConversionOngoing>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d11a      	bne.n	8002aa4 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a7c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d112      	bne.n	8002abc <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a9a:	f043 0201 	orr.w	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	661a      	str	r2, [r3, #96]	@ 0x60
 8002aa2:	e00b      	b.n	8002abc <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa8:	f043 0210 	orr.w	r2, r3, #16
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ab4:	f043 0201 	orr.w	r2, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 fec5 	bl	800384c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2260      	movs	r2, #96	@ 0x60
 8002ac8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d011      	beq.n	8002af8 <HAL_ADC_IRQHandler+0x32c>
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00c      	beq.n	8002af8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ae2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f8b2 	bl	8002c54 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2280      	movs	r2, #128	@ 0x80
 8002af6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d012      	beq.n	8002b28 <HAL_ADC_IRQHandler+0x35c>
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00d      	beq.n	8002b28 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b10:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 feab 	bl	8003874 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b26:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d012      	beq.n	8002b58 <HAL_ADC_IRQHandler+0x38c>
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00d      	beq.n	8002b58 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b40:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 fe9d 	bl	8003888 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0310 	and.w	r3, r3, #16
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d043      	beq.n	8002bea <HAL_ADC_IRQHandler+0x41e>
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d03e      	beq.n	8002bea <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8002b74:	2301      	movs	r3, #1
 8002b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b78:	e021      	b.n	8002bbe <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d015      	beq.n	8002bac <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a2a      	ldr	r2, [pc, #168]	@ (8002c30 <HAL_ADC_IRQHandler+0x464>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d004      	beq.n	8002b94 <HAL_ADC_IRQHandler+0x3c8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a29      	ldr	r2, [pc, #164]	@ (8002c34 <HAL_ADC_IRQHandler+0x468>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d101      	bne.n	8002b98 <HAL_ADC_IRQHandler+0x3cc>
 8002b94:	4b28      	ldr	r3, [pc, #160]	@ (8002c38 <HAL_ADC_IRQHandler+0x46c>)
 8002b96:	e000      	b.n	8002b9a <HAL_ADC_IRQHandler+0x3ce>
 8002b98:	4b28      	ldr	r3, [pc, #160]	@ (8002c3c <HAL_ADC_IRQHandler+0x470>)
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff fb78 	bl	8002290 <LL_ADC_GetMultiDMATransfer>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00b      	beq.n	8002bbe <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002baa:	e008      	b.n	8002bbe <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d10e      	bne.n	8002be2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bd4:	f043 0202 	orr.w	r2, r3, #2
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f843 	bl	8002c68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2210      	movs	r2, #16
 8002be8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d018      	beq.n	8002c26 <HAL_ADC_IRQHandler+0x45a>
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d013      	beq.n	8002c26 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c02:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c0e:	f043 0208 	orr.w	r2, r3, #8
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c1e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fe1d 	bl	8003860 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002c26:	bf00      	nop
 8002c28:	3728      	adds	r7, #40	@ 0x28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40022000 	.word	0x40022000
 8002c34:	40022100 	.word	0x40022100
 8002c38:	40022300 	.word	0x40022300
 8002c3c:	58026300 	.word	0x58026300

08002c40 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c7c:	b590      	push	{r4, r7, lr}
 8002c7e:	b0a5      	sub	sp, #148	@ 0x94
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c96:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	4aa4      	ldr	r2, [pc, #656]	@ (8002f30 <HAL_ADC_ConfigChannel+0x2b4>)
 8002c9e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d102      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x34>
 8002caa:	2302      	movs	r3, #2
 8002cac:	f000 bca2 	b.w	80035f4 <HAL_ADC_ConfigChannel+0x978>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fb56 	bl	800236e <LL_ADC_REG_IsConversionOngoing>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f040 8486 	bne.w	80035d6 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	db31      	blt.n	8002d36 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a97      	ldr	r2, [pc, #604]	@ (8002f34 <HAL_ADC_ConfigChannel+0x2b8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d02c      	beq.n	8002d36 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d108      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x7e>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	0e9b      	lsrs	r3, r3, #26
 8002cee:	f003 031f 	and.w	r3, r3, #31
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	e016      	b.n	8002d28 <HAL_ADC_ConfigChannel+0xac>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002d08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d0a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002d0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8002d12:	2320      	movs	r3, #32
 8002d14:	e003      	b.n	8002d1e <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8002d16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d18:	fab3 f383 	clz	r3, r3
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	2201      	movs	r2, #1
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	69d1      	ldr	r1, [r2, #28]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	430b      	orrs	r3, r1
 8002d34:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f7ff f9eb 	bl	800211e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fb0e 	bl	800236e <LL_ADC_REG_IsConversionOngoing>
 8002d52:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fb1a 	bl	8002394 <LL_ADC_INJ_IsConversionOngoing>
 8002d60:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f040 824a 	bne.w	8003202 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f040 8245 	bne.w	8003202 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6819      	ldr	r1, [r3, #0]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	461a      	mov	r2, r3
 8002d86:	f7ff fa09 	bl	800219c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a69      	ldr	r2, [pc, #420]	@ (8002f34 <HAL_ADC_ConfigChannel+0x2b8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d10d      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	08db      	lsrs	r3, r3, #3
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002dae:	e032      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002db0:	4b61      	ldr	r3, [pc, #388]	@ (8002f38 <HAL_ADC_ConfigChannel+0x2bc>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002db8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dbc:	d10b      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x15a>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	089b      	lsrs	r3, r3, #2
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	e01d      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x196>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0310 	and.w	r3, r3, #16
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10b      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x180>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	089b      	lsrs	r3, r3, #2
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	e00a      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x196>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	089b      	lsrs	r3, r3, #2
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d048      	beq.n	8002eb0 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	6919      	ldr	r1, [r3, #16]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e2e:	f7ff f871 	bl	8001f14 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a3f      	ldr	r2, [pc, #252]	@ (8002f34 <HAL_ADC_ConfigChannel+0x2b8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d119      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	6919      	ldr	r1, [r3, #16]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	f7ff f909 	bl	8002060 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	6919      	ldr	r1, [r3, #16]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d102      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x1ea>
 8002e60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e64:	e000      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x1ec>
 8002e66:	2300      	movs	r3, #0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	f7ff f8d7 	bl	800201c <LL_ADC_SetOffsetSaturation>
 8002e6e:	e1c8      	b.n	8003202 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6919      	ldr	r1, [r3, #16]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d102      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x20c>
 8002e82:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002e86:	e000      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x20e>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f7ff f8a4 	bl	8001fd8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	6919      	ldr	r1, [r3, #16]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	7e1b      	ldrb	r3, [r3, #24]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d102      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x22a>
 8002ea0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ea4:	e000      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x22c>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f7ff f87b 	bl	8001fa4 <LL_ADC_SetDataRightShift>
 8002eae:	e1a8      	b.n	8003202 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1f      	ldr	r2, [pc, #124]	@ (8002f34 <HAL_ADC_ConfigChannel+0x2b8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	f040 815b 	bne.w	8003172 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff f858 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10a      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x26c>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff f84d 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	0e9b      	lsrs	r3, r3, #26
 8002ee2:	f003 021f 	and.w	r2, r3, #31
 8002ee6:	e017      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x29c>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff f842 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002f00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f02:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002f04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002f0a:	2320      	movs	r3, #32
 8002f0c:	e003      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8002f0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f10:	fab3 f383 	clz	r3, r3
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	461a      	mov	r2, r3
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10b      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x2c0>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	0e9b      	lsrs	r3, r3, #26
 8002f2a:	f003 031f 	and.w	r3, r3, #31
 8002f2e:	e017      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x2e4>
 8002f30:	47ff0000 	.word	0x47ff0000
 8002f34:	58026000 	.word	0x58026000
 8002f38:	5c001000 	.word	0x5c001000
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002f4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f4c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002f4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002f54:	2320      	movs	r3, #32
 8002f56:	e003      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002f58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f5a:	fab3 f383 	clz	r3, r3
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d106      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff f899 	bl	80020a4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2101      	movs	r1, #1
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fe fffd 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x322>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe fff2 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 8002f94:	4603      	mov	r3, r0
 8002f96:	0e9b      	lsrs	r3, r3, #26
 8002f98:	f003 021f 	and.w	r2, r3, #31
 8002f9c:	e017      	b.n	8002fce <HAL_ADC_ConfigChannel+0x352>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fe ffe7 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 8002faa:	4603      	mov	r3, r0
 8002fac:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fb0:	fa93 f3a3 	rbit	r3, r3
 8002fb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002fb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fb8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8002fc0:	2320      	movs	r3, #32
 8002fc2:	e003      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8002fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc6:	fab3 f383 	clz	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d105      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x36a>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	0e9b      	lsrs	r3, r3, #26
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	e011      	b.n	800300a <HAL_ADC_ConfigChannel+0x38e>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002ff8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002ffe:	2320      	movs	r3, #32
 8003000:	e003      	b.n	800300a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003002:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003004:	fab3 f383 	clz	r3, r3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	429a      	cmp	r2, r3
 800300c:	d106      	bne.n	800301c <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2200      	movs	r2, #0
 8003014:	2101      	movs	r1, #1
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff f844 	bl	80020a4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2102      	movs	r1, #2
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe ffa8 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 8003028:	4603      	mov	r3, r0
 800302a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10a      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x3cc>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2102      	movs	r1, #2
 8003038:	4618      	mov	r0, r3
 800303a:	f7fe ff9d 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 800303e:	4603      	mov	r3, r0
 8003040:	0e9b      	lsrs	r3, r3, #26
 8003042:	f003 021f 	and.w	r2, r3, #31
 8003046:	e017      	b.n	8003078 <HAL_ADC_ConfigChannel+0x3fc>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2102      	movs	r1, #2
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe ff92 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 8003054:	4603      	mov	r3, r0
 8003056:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800306a:	2320      	movs	r3, #32
 800306c:	e003      	b.n	8003076 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800306e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003080:	2b00      	cmp	r3, #0
 8003082:	d105      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x414>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	0e9b      	lsrs	r3, r3, #26
 800308a:	f003 031f 	and.w	r3, r3, #31
 800308e:	e011      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x438>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003098:	fa93 f3a3 	rbit	r3, r3
 800309c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800309e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80030a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80030a8:	2320      	movs	r3, #32
 80030aa:	e003      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80030ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d106      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2200      	movs	r2, #0
 80030be:	2102      	movs	r1, #2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fe ffef 	bl	80020a4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2103      	movs	r1, #3
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fe ff53 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10a      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x476>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2103      	movs	r1, #3
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe ff48 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 80030e8:	4603      	mov	r3, r0
 80030ea:	0e9b      	lsrs	r3, r3, #26
 80030ec:	f003 021f 	and.w	r2, r3, #31
 80030f0:	e017      	b.n	8003122 <HAL_ADC_ConfigChannel+0x4a6>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2103      	movs	r1, #3
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fe ff3d 	bl	8001f78 <LL_ADC_GetOffsetChannel>
 80030fe:	4603      	mov	r3, r0
 8003100:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	fa93 f3a3 	rbit	r3, r3
 8003108:	61fb      	str	r3, [r7, #28]
  return result;
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800310e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003114:	2320      	movs	r3, #32
 8003116:	e003      	b.n	8003120 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311a:	fab3 f383 	clz	r3, r3
 800311e:	b2db      	uxtb	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800312a:	2b00      	cmp	r3, #0
 800312c:	d105      	bne.n	800313a <HAL_ADC_ConfigChannel+0x4be>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	0e9b      	lsrs	r3, r3, #26
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	e011      	b.n	800315e <HAL_ADC_ConfigChannel+0x4e2>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	613b      	str	r3, [r7, #16]
  return result;
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8003152:	2320      	movs	r3, #32
 8003154:	e003      	b.n	800315e <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	fab3 f383 	clz	r3, r3
 800315c:	b2db      	uxtb	r3, r3
 800315e:	429a      	cmp	r2, r3
 8003160:	d14f      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	2103      	movs	r1, #3
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe ff9a 	bl	80020a4 <LL_ADC_SetOffsetState>
 8003170:	e047      	b.n	8003202 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003178:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	069b      	lsls	r3, r3, #26
 8003182:	429a      	cmp	r2, r3
 8003184:	d107      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003194:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800319c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	069b      	lsls	r3, r3, #26
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d107      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80031b8:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	069b      	lsls	r3, r3, #26
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d107      	bne.n	80031de <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80031dc:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	069b      	lsls	r3, r3, #26
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d107      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003200:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff f89e 	bl	8002348 <LL_ADC_IsEnabled>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	f040 81ea 	bne.w	80035e8 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	6819      	ldr	r1, [r3, #0]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	461a      	mov	r2, r3
 8003222:	f7fe ffe7 	bl	80021f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	4a7a      	ldr	r2, [pc, #488]	@ (8003414 <HAL_ADC_ConfigChannel+0x798>)
 800322c:	4293      	cmp	r3, r2
 800322e:	f040 80e0 	bne.w	80033f2 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4977      	ldr	r1, [pc, #476]	@ (8003418 <HAL_ADC_ConfigChannel+0x79c>)
 800323c:	428b      	cmp	r3, r1
 800323e:	d147      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x654>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4975      	ldr	r1, [pc, #468]	@ (800341c <HAL_ADC_ConfigChannel+0x7a0>)
 8003246:	428b      	cmp	r3, r1
 8003248:	d040      	beq.n	80032cc <HAL_ADC_ConfigChannel+0x650>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4974      	ldr	r1, [pc, #464]	@ (8003420 <HAL_ADC_ConfigChannel+0x7a4>)
 8003250:	428b      	cmp	r3, r1
 8003252:	d039      	beq.n	80032c8 <HAL_ADC_ConfigChannel+0x64c>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4972      	ldr	r1, [pc, #456]	@ (8003424 <HAL_ADC_ConfigChannel+0x7a8>)
 800325a:	428b      	cmp	r3, r1
 800325c:	d032      	beq.n	80032c4 <HAL_ADC_ConfigChannel+0x648>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4971      	ldr	r1, [pc, #452]	@ (8003428 <HAL_ADC_ConfigChannel+0x7ac>)
 8003264:	428b      	cmp	r3, r1
 8003266:	d02b      	beq.n	80032c0 <HAL_ADC_ConfigChannel+0x644>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	496f      	ldr	r1, [pc, #444]	@ (800342c <HAL_ADC_ConfigChannel+0x7b0>)
 800326e:	428b      	cmp	r3, r1
 8003270:	d024      	beq.n	80032bc <HAL_ADC_ConfigChannel+0x640>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	496e      	ldr	r1, [pc, #440]	@ (8003430 <HAL_ADC_ConfigChannel+0x7b4>)
 8003278:	428b      	cmp	r3, r1
 800327a:	d01d      	beq.n	80032b8 <HAL_ADC_ConfigChannel+0x63c>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	496c      	ldr	r1, [pc, #432]	@ (8003434 <HAL_ADC_ConfigChannel+0x7b8>)
 8003282:	428b      	cmp	r3, r1
 8003284:	d016      	beq.n	80032b4 <HAL_ADC_ConfigChannel+0x638>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	496b      	ldr	r1, [pc, #428]	@ (8003438 <HAL_ADC_ConfigChannel+0x7bc>)
 800328c:	428b      	cmp	r3, r1
 800328e:	d00f      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0x634>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4969      	ldr	r1, [pc, #420]	@ (800343c <HAL_ADC_ConfigChannel+0x7c0>)
 8003296:	428b      	cmp	r3, r1
 8003298:	d008      	beq.n	80032ac <HAL_ADC_ConfigChannel+0x630>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4968      	ldr	r1, [pc, #416]	@ (8003440 <HAL_ADC_ConfigChannel+0x7c4>)
 80032a0:	428b      	cmp	r3, r1
 80032a2:	d101      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x62c>
 80032a4:	4b67      	ldr	r3, [pc, #412]	@ (8003444 <HAL_ADC_ConfigChannel+0x7c8>)
 80032a6:	e0a0      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 80032a8:	2300      	movs	r3, #0
 80032aa:	e09e      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 80032ac:	4b66      	ldr	r3, [pc, #408]	@ (8003448 <HAL_ADC_ConfigChannel+0x7cc>)
 80032ae:	e09c      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 80032b0:	4b66      	ldr	r3, [pc, #408]	@ (800344c <HAL_ADC_ConfigChannel+0x7d0>)
 80032b2:	e09a      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 80032b4:	4b60      	ldr	r3, [pc, #384]	@ (8003438 <HAL_ADC_ConfigChannel+0x7bc>)
 80032b6:	e098      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 80032b8:	4b5e      	ldr	r3, [pc, #376]	@ (8003434 <HAL_ADC_ConfigChannel+0x7b8>)
 80032ba:	e096      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 80032bc:	4b64      	ldr	r3, [pc, #400]	@ (8003450 <HAL_ADC_ConfigChannel+0x7d4>)
 80032be:	e094      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 80032c0:	4b64      	ldr	r3, [pc, #400]	@ (8003454 <HAL_ADC_ConfigChannel+0x7d8>)
 80032c2:	e092      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 80032c4:	4b64      	ldr	r3, [pc, #400]	@ (8003458 <HAL_ADC_ConfigChannel+0x7dc>)
 80032c6:	e090      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 80032c8:	4b64      	ldr	r3, [pc, #400]	@ (800345c <HAL_ADC_ConfigChannel+0x7e0>)
 80032ca:	e08e      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e08c      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4962      	ldr	r1, [pc, #392]	@ (8003460 <HAL_ADC_ConfigChannel+0x7e4>)
 80032d6:	428b      	cmp	r3, r1
 80032d8:	d140      	bne.n	800335c <HAL_ADC_ConfigChannel+0x6e0>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	494f      	ldr	r1, [pc, #316]	@ (800341c <HAL_ADC_ConfigChannel+0x7a0>)
 80032e0:	428b      	cmp	r3, r1
 80032e2:	d039      	beq.n	8003358 <HAL_ADC_ConfigChannel+0x6dc>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	494d      	ldr	r1, [pc, #308]	@ (8003420 <HAL_ADC_ConfigChannel+0x7a4>)
 80032ea:	428b      	cmp	r3, r1
 80032ec:	d032      	beq.n	8003354 <HAL_ADC_ConfigChannel+0x6d8>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	494c      	ldr	r1, [pc, #304]	@ (8003424 <HAL_ADC_ConfigChannel+0x7a8>)
 80032f4:	428b      	cmp	r3, r1
 80032f6:	d02b      	beq.n	8003350 <HAL_ADC_ConfigChannel+0x6d4>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	494a      	ldr	r1, [pc, #296]	@ (8003428 <HAL_ADC_ConfigChannel+0x7ac>)
 80032fe:	428b      	cmp	r3, r1
 8003300:	d024      	beq.n	800334c <HAL_ADC_ConfigChannel+0x6d0>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4949      	ldr	r1, [pc, #292]	@ (800342c <HAL_ADC_ConfigChannel+0x7b0>)
 8003308:	428b      	cmp	r3, r1
 800330a:	d01d      	beq.n	8003348 <HAL_ADC_ConfigChannel+0x6cc>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4947      	ldr	r1, [pc, #284]	@ (8003430 <HAL_ADC_ConfigChannel+0x7b4>)
 8003312:	428b      	cmp	r3, r1
 8003314:	d016      	beq.n	8003344 <HAL_ADC_ConfigChannel+0x6c8>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4946      	ldr	r1, [pc, #280]	@ (8003434 <HAL_ADC_ConfigChannel+0x7b8>)
 800331c:	428b      	cmp	r3, r1
 800331e:	d00f      	beq.n	8003340 <HAL_ADC_ConfigChannel+0x6c4>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4944      	ldr	r1, [pc, #272]	@ (8003438 <HAL_ADC_ConfigChannel+0x7bc>)
 8003326:	428b      	cmp	r3, r1
 8003328:	d008      	beq.n	800333c <HAL_ADC_ConfigChannel+0x6c0>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4944      	ldr	r1, [pc, #272]	@ (8003440 <HAL_ADC_ConfigChannel+0x7c4>)
 8003330:	428b      	cmp	r3, r1
 8003332:	d101      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x6bc>
 8003334:	4b43      	ldr	r3, [pc, #268]	@ (8003444 <HAL_ADC_ConfigChannel+0x7c8>)
 8003336:	e058      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 8003338:	2300      	movs	r3, #0
 800333a:	e056      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 800333c:	4b43      	ldr	r3, [pc, #268]	@ (800344c <HAL_ADC_ConfigChannel+0x7d0>)
 800333e:	e054      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 8003340:	4b3d      	ldr	r3, [pc, #244]	@ (8003438 <HAL_ADC_ConfigChannel+0x7bc>)
 8003342:	e052      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 8003344:	4b3b      	ldr	r3, [pc, #236]	@ (8003434 <HAL_ADC_ConfigChannel+0x7b8>)
 8003346:	e050      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 8003348:	4b41      	ldr	r3, [pc, #260]	@ (8003450 <HAL_ADC_ConfigChannel+0x7d4>)
 800334a:	e04e      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 800334c:	4b41      	ldr	r3, [pc, #260]	@ (8003454 <HAL_ADC_ConfigChannel+0x7d8>)
 800334e:	e04c      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 8003350:	4b41      	ldr	r3, [pc, #260]	@ (8003458 <HAL_ADC_ConfigChannel+0x7dc>)
 8003352:	e04a      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 8003354:	4b41      	ldr	r3, [pc, #260]	@ (800345c <HAL_ADC_ConfigChannel+0x7e0>)
 8003356:	e048      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 8003358:	2301      	movs	r3, #1
 800335a:	e046      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4940      	ldr	r1, [pc, #256]	@ (8003464 <HAL_ADC_ConfigChannel+0x7e8>)
 8003362:	428b      	cmp	r3, r1
 8003364:	d140      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x76c>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	492c      	ldr	r1, [pc, #176]	@ (800341c <HAL_ADC_ConfigChannel+0x7a0>)
 800336c:	428b      	cmp	r3, r1
 800336e:	d039      	beq.n	80033e4 <HAL_ADC_ConfigChannel+0x768>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	492a      	ldr	r1, [pc, #168]	@ (8003420 <HAL_ADC_ConfigChannel+0x7a4>)
 8003376:	428b      	cmp	r3, r1
 8003378:	d032      	beq.n	80033e0 <HAL_ADC_ConfigChannel+0x764>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4929      	ldr	r1, [pc, #164]	@ (8003424 <HAL_ADC_ConfigChannel+0x7a8>)
 8003380:	428b      	cmp	r3, r1
 8003382:	d02b      	beq.n	80033dc <HAL_ADC_ConfigChannel+0x760>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4927      	ldr	r1, [pc, #156]	@ (8003428 <HAL_ADC_ConfigChannel+0x7ac>)
 800338a:	428b      	cmp	r3, r1
 800338c:	d024      	beq.n	80033d8 <HAL_ADC_ConfigChannel+0x75c>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4926      	ldr	r1, [pc, #152]	@ (800342c <HAL_ADC_ConfigChannel+0x7b0>)
 8003394:	428b      	cmp	r3, r1
 8003396:	d01d      	beq.n	80033d4 <HAL_ADC_ConfigChannel+0x758>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4924      	ldr	r1, [pc, #144]	@ (8003430 <HAL_ADC_ConfigChannel+0x7b4>)
 800339e:	428b      	cmp	r3, r1
 80033a0:	d016      	beq.n	80033d0 <HAL_ADC_ConfigChannel+0x754>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4923      	ldr	r1, [pc, #140]	@ (8003434 <HAL_ADC_ConfigChannel+0x7b8>)
 80033a8:	428b      	cmp	r3, r1
 80033aa:	d00f      	beq.n	80033cc <HAL_ADC_ConfigChannel+0x750>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4926      	ldr	r1, [pc, #152]	@ (800344c <HAL_ADC_ConfigChannel+0x7d0>)
 80033b2:	428b      	cmp	r3, r1
 80033b4:	d008      	beq.n	80033c8 <HAL_ADC_ConfigChannel+0x74c>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	492b      	ldr	r1, [pc, #172]	@ (8003468 <HAL_ADC_ConfigChannel+0x7ec>)
 80033bc:	428b      	cmp	r3, r1
 80033be:	d101      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x748>
 80033c0:	4b2a      	ldr	r3, [pc, #168]	@ (800346c <HAL_ADC_ConfigChannel+0x7f0>)
 80033c2:	e012      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 80033c4:	2300      	movs	r3, #0
 80033c6:	e010      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 80033c8:	4b27      	ldr	r3, [pc, #156]	@ (8003468 <HAL_ADC_ConfigChannel+0x7ec>)
 80033ca:	e00e      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 80033cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003438 <HAL_ADC_ConfigChannel+0x7bc>)
 80033ce:	e00c      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 80033d0:	4b18      	ldr	r3, [pc, #96]	@ (8003434 <HAL_ADC_ConfigChannel+0x7b8>)
 80033d2:	e00a      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 80033d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003450 <HAL_ADC_ConfigChannel+0x7d4>)
 80033d6:	e008      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 80033d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003454 <HAL_ADC_ConfigChannel+0x7d8>)
 80033da:	e006      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 80033dc:	4b1e      	ldr	r3, [pc, #120]	@ (8003458 <HAL_ADC_ConfigChannel+0x7dc>)
 80033de:	e004      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 80033e0:	4b1e      	ldr	r3, [pc, #120]	@ (800345c <HAL_ADC_ConfigChannel+0x7e0>)
 80033e2:	e002      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <HAL_ADC_ConfigChannel+0x76e>
 80033e8:	2300      	movs	r3, #0
 80033ea:	4619      	mov	r1, r3
 80033ec:	4610      	mov	r0, r2
 80033ee:	f7fe fd57 	bl	8001ea0 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f280 80f6 	bge.w	80035e8 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a05      	ldr	r2, [pc, #20]	@ (8003418 <HAL_ADC_ConfigChannel+0x79c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d004      	beq.n	8003410 <HAL_ADC_ConfigChannel+0x794>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a15      	ldr	r2, [pc, #84]	@ (8003460 <HAL_ADC_ConfigChannel+0x7e4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d131      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x7f8>
 8003410:	4b17      	ldr	r3, [pc, #92]	@ (8003470 <HAL_ADC_ConfigChannel+0x7f4>)
 8003412:	e030      	b.n	8003476 <HAL_ADC_ConfigChannel+0x7fa>
 8003414:	47ff0000 	.word	0x47ff0000
 8003418:	40022000 	.word	0x40022000
 800341c:	04300002 	.word	0x04300002
 8003420:	08600004 	.word	0x08600004
 8003424:	0c900008 	.word	0x0c900008
 8003428:	10c00010 	.word	0x10c00010
 800342c:	14f00020 	.word	0x14f00020
 8003430:	2a000400 	.word	0x2a000400
 8003434:	2e300800 	.word	0x2e300800
 8003438:	32601000 	.word	0x32601000
 800343c:	43210000 	.word	0x43210000
 8003440:	4b840000 	.word	0x4b840000
 8003444:	4fb80000 	.word	0x4fb80000
 8003448:	47520000 	.word	0x47520000
 800344c:	36902000 	.word	0x36902000
 8003450:	25b00200 	.word	0x25b00200
 8003454:	21800100 	.word	0x21800100
 8003458:	1d500080 	.word	0x1d500080
 800345c:	19200040 	.word	0x19200040
 8003460:	40022100 	.word	0x40022100
 8003464:	58026000 	.word	0x58026000
 8003468:	3ac04000 	.word	0x3ac04000
 800346c:	3ef08000 	.word	0x3ef08000
 8003470:	40022300 	.word	0x40022300
 8003474:	4b61      	ldr	r3, [pc, #388]	@ (80035fc <HAL_ADC_ConfigChannel+0x980>)
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe fd04 	bl	8001e84 <LL_ADC_GetCommonPathInternalCh>
 800347c:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a5f      	ldr	r2, [pc, #380]	@ (8003600 <HAL_ADC_ConfigChannel+0x984>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d004      	beq.n	8003492 <HAL_ADC_ConfigChannel+0x816>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a5d      	ldr	r2, [pc, #372]	@ (8003604 <HAL_ADC_ConfigChannel+0x988>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d10e      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x834>
 8003492:	485b      	ldr	r0, [pc, #364]	@ (8003600 <HAL_ADC_ConfigChannel+0x984>)
 8003494:	f7fe ff58 	bl	8002348 <LL_ADC_IsEnabled>
 8003498:	4604      	mov	r4, r0
 800349a:	485a      	ldr	r0, [pc, #360]	@ (8003604 <HAL_ADC_ConfigChannel+0x988>)
 800349c:	f7fe ff54 	bl	8002348 <LL_ADC_IsEnabled>
 80034a0:	4603      	mov	r3, r0
 80034a2:	4323      	orrs	r3, r4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	bf0c      	ite	eq
 80034a8:	2301      	moveq	r3, #1
 80034aa:	2300      	movne	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	e008      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x846>
 80034b0:	4855      	ldr	r0, [pc, #340]	@ (8003608 <HAL_ADC_ConfigChannel+0x98c>)
 80034b2:	f7fe ff49 	bl	8002348 <LL_ADC_IsEnabled>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d07d      	beq.n	80035c2 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a50      	ldr	r2, [pc, #320]	@ (800360c <HAL_ADC_ConfigChannel+0x990>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d130      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x8b6>
 80034d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d12b      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a4a      	ldr	r2, [pc, #296]	@ (8003608 <HAL_ADC_ConfigChannel+0x98c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	f040 8081 	bne.w	80035e8 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a45      	ldr	r2, [pc, #276]	@ (8003600 <HAL_ADC_ConfigChannel+0x984>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d004      	beq.n	80034fa <HAL_ADC_ConfigChannel+0x87e>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a43      	ldr	r2, [pc, #268]	@ (8003604 <HAL_ADC_ConfigChannel+0x988>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d101      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x882>
 80034fa:	4a45      	ldr	r2, [pc, #276]	@ (8003610 <HAL_ADC_ConfigChannel+0x994>)
 80034fc:	e000      	b.n	8003500 <HAL_ADC_ConfigChannel+0x884>
 80034fe:	4a3f      	ldr	r2, [pc, #252]	@ (80035fc <HAL_ADC_ConfigChannel+0x980>)
 8003500:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003502:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003506:	4619      	mov	r1, r3
 8003508:	4610      	mov	r0, r2
 800350a:	f7fe fca8 	bl	8001e5e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800350e:	4b41      	ldr	r3, [pc, #260]	@ (8003614 <HAL_ADC_ConfigChannel+0x998>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	099b      	lsrs	r3, r3, #6
 8003514:	4a40      	ldr	r2, [pc, #256]	@ (8003618 <HAL_ADC_ConfigChannel+0x99c>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	099b      	lsrs	r3, r3, #6
 800351c:	3301      	adds	r3, #1
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003522:	e002      	b.n	800352a <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	3b01      	subs	r3, #1
 8003528:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1f9      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003530:	e05a      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a39      	ldr	r2, [pc, #228]	@ (800361c <HAL_ADC_ConfigChannel+0x9a0>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d11e      	bne.n	800357a <HAL_ADC_ConfigChannel+0x8fe>
 800353c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800353e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d119      	bne.n	800357a <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a2f      	ldr	r2, [pc, #188]	@ (8003608 <HAL_ADC_ConfigChannel+0x98c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d14b      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a2a      	ldr	r2, [pc, #168]	@ (8003600 <HAL_ADC_ConfigChannel+0x984>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d004      	beq.n	8003564 <HAL_ADC_ConfigChannel+0x8e8>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a29      	ldr	r2, [pc, #164]	@ (8003604 <HAL_ADC_ConfigChannel+0x988>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d101      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x8ec>
 8003564:	4a2a      	ldr	r2, [pc, #168]	@ (8003610 <HAL_ADC_ConfigChannel+0x994>)
 8003566:	e000      	b.n	800356a <HAL_ADC_ConfigChannel+0x8ee>
 8003568:	4a24      	ldr	r2, [pc, #144]	@ (80035fc <HAL_ADC_ConfigChannel+0x980>)
 800356a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800356c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003570:	4619      	mov	r1, r3
 8003572:	4610      	mov	r0, r2
 8003574:	f7fe fc73 	bl	8001e5e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003578:	e036      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a28      	ldr	r2, [pc, #160]	@ (8003620 <HAL_ADC_ConfigChannel+0x9a4>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d131      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x96c>
 8003584:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d12c      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1d      	ldr	r2, [pc, #116]	@ (8003608 <HAL_ADC_ConfigChannel+0x98c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d127      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a18      	ldr	r2, [pc, #96]	@ (8003600 <HAL_ADC_ConfigChannel+0x984>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d004      	beq.n	80035ac <HAL_ADC_ConfigChannel+0x930>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a17      	ldr	r2, [pc, #92]	@ (8003604 <HAL_ADC_ConfigChannel+0x988>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d101      	bne.n	80035b0 <HAL_ADC_ConfigChannel+0x934>
 80035ac:	4a18      	ldr	r2, [pc, #96]	@ (8003610 <HAL_ADC_ConfigChannel+0x994>)
 80035ae:	e000      	b.n	80035b2 <HAL_ADC_ConfigChannel+0x936>
 80035b0:	4a12      	ldr	r2, [pc, #72]	@ (80035fc <HAL_ADC_ConfigChannel+0x980>)
 80035b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035b8:	4619      	mov	r1, r3
 80035ba:	4610      	mov	r0, r2
 80035bc:	f7fe fc4f 	bl	8001e5e <LL_ADC_SetCommonPathInternalCh>
 80035c0:	e012      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c6:	f043 0220 	orr.w	r2, r3, #32
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80035d4:	e008      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035da:	f043 0220 	orr.w	r2, r3, #32
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80035f0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3794      	adds	r7, #148	@ 0x94
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd90      	pop	{r4, r7, pc}
 80035fc:	58026300 	.word	0x58026300
 8003600:	40022000 	.word	0x40022000
 8003604:	40022100 	.word	0x40022100
 8003608:	58026000 	.word	0x58026000
 800360c:	c7520000 	.word	0xc7520000
 8003610:	40022300 	.word	0x40022300
 8003614:	24000000 	.word	0x24000000
 8003618:	053e2d63 	.word	0x053e2d63
 800361c:	c3210000 	.word	0xc3210000
 8003620:	cb840000 	.word	0xcb840000

08003624 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a6c      	ldr	r2, [pc, #432]	@ (80037e4 <ADC_ConfigureBoostMode+0x1c0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d004      	beq.n	8003640 <ADC_ConfigureBoostMode+0x1c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a6b      	ldr	r2, [pc, #428]	@ (80037e8 <ADC_ConfigureBoostMode+0x1c4>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d109      	bne.n	8003654 <ADC_ConfigureBoostMode+0x30>
 8003640:	4b6a      	ldr	r3, [pc, #424]	@ (80037ec <ADC_ConfigureBoostMode+0x1c8>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003648:	2b00      	cmp	r3, #0
 800364a:	bf14      	ite	ne
 800364c:	2301      	movne	r3, #1
 800364e:	2300      	moveq	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	e008      	b.n	8003666 <ADC_ConfigureBoostMode+0x42>
 8003654:	4b66      	ldr	r3, [pc, #408]	@ (80037f0 <ADC_ConfigureBoostMode+0x1cc>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf14      	ite	ne
 8003660:	2301      	movne	r3, #1
 8003662:	2300      	moveq	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d01c      	beq.n	80036a4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800366a:	f005 fd0b 	bl	8009084 <HAL_RCC_GetHCLKFreq>
 800366e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003678:	d010      	beq.n	800369c <ADC_ConfigureBoostMode+0x78>
 800367a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800367e:	d873      	bhi.n	8003768 <ADC_ConfigureBoostMode+0x144>
 8003680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003684:	d002      	beq.n	800368c <ADC_ConfigureBoostMode+0x68>
 8003686:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800368a:	d16d      	bne.n	8003768 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	0c1b      	lsrs	r3, r3, #16
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	fbb2 f3f3 	udiv	r3, r2, r3
 8003698:	60fb      	str	r3, [r7, #12]
        break;
 800369a:	e068      	b.n	800376e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	089b      	lsrs	r3, r3, #2
 80036a0:	60fb      	str	r3, [r7, #12]
        break;
 80036a2:	e064      	b.n	800376e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80036a4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80036a8:	f04f 0100 	mov.w	r1, #0
 80036ac:	f006 fee6 	bl	800a47c <HAL_RCCEx_GetPeriphCLKFreq>
 80036b0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80036ba:	d051      	beq.n	8003760 <ADC_ConfigureBoostMode+0x13c>
 80036bc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80036c0:	d854      	bhi.n	800376c <ADC_ConfigureBoostMode+0x148>
 80036c2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80036c6:	d047      	beq.n	8003758 <ADC_ConfigureBoostMode+0x134>
 80036c8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80036cc:	d84e      	bhi.n	800376c <ADC_ConfigureBoostMode+0x148>
 80036ce:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80036d2:	d03d      	beq.n	8003750 <ADC_ConfigureBoostMode+0x12c>
 80036d4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80036d8:	d848      	bhi.n	800376c <ADC_ConfigureBoostMode+0x148>
 80036da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036de:	d033      	beq.n	8003748 <ADC_ConfigureBoostMode+0x124>
 80036e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036e4:	d842      	bhi.n	800376c <ADC_ConfigureBoostMode+0x148>
 80036e6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80036ea:	d029      	beq.n	8003740 <ADC_ConfigureBoostMode+0x11c>
 80036ec:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80036f0:	d83c      	bhi.n	800376c <ADC_ConfigureBoostMode+0x148>
 80036f2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80036f6:	d01a      	beq.n	800372e <ADC_ConfigureBoostMode+0x10a>
 80036f8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80036fc:	d836      	bhi.n	800376c <ADC_ConfigureBoostMode+0x148>
 80036fe:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003702:	d014      	beq.n	800372e <ADC_ConfigureBoostMode+0x10a>
 8003704:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003708:	d830      	bhi.n	800376c <ADC_ConfigureBoostMode+0x148>
 800370a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800370e:	d00e      	beq.n	800372e <ADC_ConfigureBoostMode+0x10a>
 8003710:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003714:	d82a      	bhi.n	800376c <ADC_ConfigureBoostMode+0x148>
 8003716:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800371a:	d008      	beq.n	800372e <ADC_ConfigureBoostMode+0x10a>
 800371c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003720:	d824      	bhi.n	800376c <ADC_ConfigureBoostMode+0x148>
 8003722:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003726:	d002      	beq.n	800372e <ADC_ConfigureBoostMode+0x10a>
 8003728:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800372c:	d11e      	bne.n	800376c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	0c9b      	lsrs	r3, r3, #18
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	fbb2 f3f3 	udiv	r3, r2, r3
 800373c:	60fb      	str	r3, [r7, #12]
        break;
 800373e:	e016      	b.n	800376e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	091b      	lsrs	r3, r3, #4
 8003744:	60fb      	str	r3, [r7, #12]
        break;
 8003746:	e012      	b.n	800376e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	60fb      	str	r3, [r7, #12]
        break;
 800374e:	e00e      	b.n	800376e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	099b      	lsrs	r3, r3, #6
 8003754:	60fb      	str	r3, [r7, #12]
        break;
 8003756:	e00a      	b.n	800376e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	09db      	lsrs	r3, r3, #7
 800375c:	60fb      	str	r3, [r7, #12]
        break;
 800375e:	e006      	b.n	800376e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	0a1b      	lsrs	r3, r3, #8
 8003764:	60fb      	str	r3, [r7, #12]
        break;
 8003766:	e002      	b.n	800376e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003768:	bf00      	nop
 800376a:	e000      	b.n	800376e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800376c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	085b      	lsrs	r3, r3, #1
 8003772:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4a1f      	ldr	r2, [pc, #124]	@ (80037f4 <ADC_ConfigureBoostMode+0x1d0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d808      	bhi.n	800378e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800378a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800378c:	e025      	b.n	80037da <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4a19      	ldr	r2, [pc, #100]	@ (80037f8 <ADC_ConfigureBoostMode+0x1d4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d80a      	bhi.n	80037ac <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037a8:	609a      	str	r2, [r3, #8]
}
 80037aa:	e016      	b.n	80037da <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4a13      	ldr	r2, [pc, #76]	@ (80037fc <ADC_ConfigureBoostMode+0x1d8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d80a      	bhi.n	80037ca <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037c6:	609a      	str	r2, [r3, #8]
}
 80037c8:	e007      	b.n	80037da <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80037d8:	609a      	str	r2, [r3, #8]
}
 80037da:	bf00      	nop
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40022000 	.word	0x40022000
 80037e8:	40022100 	.word	0x40022100
 80037ec:	40022300 	.word	0x40022300
 80037f0:	58026300 	.word	0x58026300
 80037f4:	005f5e10 	.word	0x005f5e10
 80037f8:	00bebc20 	.word	0x00bebc20
 80037fc:	017d7840 	.word	0x017d7840

08003800 <LL_ADC_IsEnabled>:
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <LL_ADC_IsEnabled+0x18>
 8003814:	2301      	movs	r3, #1
 8003816:	e000      	b.n	800381a <LL_ADC_IsEnabled+0x1a>
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <LL_ADC_REG_IsConversionOngoing>:
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	2b04      	cmp	r3, #4
 8003838:	d101      	bne.n	800383e <LL_ADC_REG_IsConversionOngoing+0x18>
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80038b0:	b590      	push	{r4, r7, lr}
 80038b2:	b0a3      	sub	sp, #140	@ 0x8c
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e0c1      	b.n	8003a52 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80038d6:	2300      	movs	r3, #0
 80038d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80038da:	2300      	movs	r3, #0
 80038dc:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a5e      	ldr	r2, [pc, #376]	@ (8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d102      	bne.n	80038ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80038e8:	4b5d      	ldr	r3, [pc, #372]	@ (8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	e001      	b.n	80038f2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10b      	bne.n	8003910 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038fc:	f043 0220 	orr.w	r2, r3, #32
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0a0      	b.n	8003a52 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff ff87 	bl	8003826 <LL_ADC_REG_IsConversionOngoing>
 8003918:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff ff80 	bl	8003826 <LL_ADC_REG_IsConversionOngoing>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	f040 8081 	bne.w	8003a30 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800392e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003932:	2b00      	cmp	r3, #0
 8003934:	d17c      	bne.n	8003a30 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a48      	ldr	r2, [pc, #288]	@ (8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d004      	beq.n	800394a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a46      	ldr	r2, [pc, #280]	@ (8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d101      	bne.n	800394e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800394a:	4b46      	ldr	r3, [pc, #280]	@ (8003a64 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800394c:	e000      	b.n	8003950 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800394e:	4b46      	ldr	r3, [pc, #280]	@ (8003a68 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003950:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d039      	beq.n	80039ce <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800395a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	431a      	orrs	r2, r3
 8003968:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800396a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a3a      	ldr	r2, [pc, #232]	@ (8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d004      	beq.n	8003980 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a39      	ldr	r2, [pc, #228]	@ (8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d10e      	bne.n	800399e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003980:	4836      	ldr	r0, [pc, #216]	@ (8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003982:	f7ff ff3d 	bl	8003800 <LL_ADC_IsEnabled>
 8003986:	4604      	mov	r4, r0
 8003988:	4835      	ldr	r0, [pc, #212]	@ (8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800398a:	f7ff ff39 	bl	8003800 <LL_ADC_IsEnabled>
 800398e:	4603      	mov	r3, r0
 8003990:	4323      	orrs	r3, r4
 8003992:	2b00      	cmp	r3, #0
 8003994:	bf0c      	ite	eq
 8003996:	2301      	moveq	r3, #1
 8003998:	2300      	movne	r3, #0
 800399a:	b2db      	uxtb	r3, r3
 800399c:	e008      	b.n	80039b0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800399e:	4833      	ldr	r0, [pc, #204]	@ (8003a6c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80039a0:	f7ff ff2e 	bl	8003800 <LL_ADC_IsEnabled>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	bf0c      	ite	eq
 80039aa:	2301      	moveq	r3, #1
 80039ac:	2300      	movne	r3, #0
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d047      	beq.n	8003a44 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80039b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003a70 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	6811      	ldr	r1, [r2, #0]
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	6892      	ldr	r2, [r2, #8]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	431a      	orrs	r2, r3
 80039c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039ca:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039cc:	e03a      	b.n	8003a44 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80039ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039d8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a1f      	ldr	r2, [pc, #124]	@ (8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d004      	beq.n	80039ee <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d10e      	bne.n	8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80039ee:	481b      	ldr	r0, [pc, #108]	@ (8003a5c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80039f0:	f7ff ff06 	bl	8003800 <LL_ADC_IsEnabled>
 80039f4:	4604      	mov	r4, r0
 80039f6:	481a      	ldr	r0, [pc, #104]	@ (8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80039f8:	f7ff ff02 	bl	8003800 <LL_ADC_IsEnabled>
 80039fc:	4603      	mov	r3, r0
 80039fe:	4323      	orrs	r3, r4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bf0c      	ite	eq
 8003a04:	2301      	moveq	r3, #1
 8003a06:	2300      	movne	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	e008      	b.n	8003a1e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003a0c:	4817      	ldr	r0, [pc, #92]	@ (8003a6c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003a0e:	f7ff fef7 	bl	8003800 <LL_ADC_IsEnabled>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf0c      	ite	eq
 8003a18:	2301      	moveq	r3, #1
 8003a1a:	2300      	movne	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d010      	beq.n	8003a44 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	4b12      	ldr	r3, [pc, #72]	@ (8003a70 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003a2c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a2e:	e009      	b.n	8003a44 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a34:	f043 0220 	orr.w	r2, r3, #32
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003a42:	e000      	b.n	8003a46 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003a4e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	378c      	adds	r7, #140	@ 0x8c
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd90      	pop	{r4, r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40022000 	.word	0x40022000
 8003a60:	40022100 	.word	0x40022100
 8003a64:	40022300 	.word	0x40022300
 8003a68:	58026300 	.word	0x58026300
 8003a6c:	58026000 	.word	0x58026000
 8003a70:	fffff0e0 	.word	0xfffff0e0

08003a74 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e023      	b.n	8003ace <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d106      	bne.n	8003aa0 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7fc ff0a 	bl	80008b4 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_CORDIC_CalculateCpltCallback>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
__weak void HAL_CORDIC_CalculateCpltCallback(CORDIC_HandleTypeDef *hcordic)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  UNUSED(hcordic);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CORDIC_CalculateCpltCallback can be implemented in the user file
   */
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <HAL_CORDIC_IRQHandler>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
void HAL_CORDIC_IRQHandler(CORDIC_HandleTypeDef *hcordic)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  /* Check if calculation complete interrupt is enabled and if result ready
     flag is raised */
  if (__HAL_CORDIC_GET_IT_SOURCE(hcordic, CORDIC_IT_IEN) != 0U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d039      	beq.n	8003b74 <HAL_CORDIC_IRQHandler+0x8a>
  {
    if (__HAL_CORDIC_GET_FLAG(hcordic, CORDIC_FLAG_RRDY) != 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b0e:	d101      	bne.n	8003b14 <HAL_CORDIC_IRQHandler+0x2a>
 8003b10:	2301      	movs	r3, #1
 8003b12:	e000      	b.n	8003b16 <HAL_CORDIC_IRQHandler+0x2c>
 8003b14:	2300      	movs	r3, #0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d02c      	beq.n	8003b74 <HAL_CORDIC_IRQHandler+0x8a>
    {
      /* Decrement number of calculations to get */
      hcordic->NbCalcToGet--;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	1e5a      	subs	r2, r3, #1
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	611a      	str	r2, [r3, #16]

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &(hcordic->pOutBuff));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3308      	adds	r3, #8
 8003b28:	4619      	mov	r1, r3
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f84f 	bl	8003bce <CORDIC_ReadOutDataIncrementPtr>

      /* Check if calculations are still to be ordered */
      if (hcordic->NbCalcToOrder > 0U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <HAL_CORDIC_IRQHandler+0x64>
      {
        /* Decrement number of calculations to order */
        hcordic->NbCalcToOrder--;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	1e5a      	subs	r2, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	60da      	str	r2, [r3, #12]

        /* Continue the processing by providing another write of input data
           in the Write Data register, and increment input buffer pointer */
        CORDIC_WriteInDataIncrementPtr(hcordic, &(hcordic->pInBuff));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3304      	adds	r3, #4
 8003b46:	4619      	mov	r1, r3
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f817 	bl	8003b7c <CORDIC_WriteInDataIncrementPtr>
      }

      /* Check if all calculations results are got */
      if (hcordic->NbCalcToGet == 0U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10e      	bne.n	8003b74 <HAL_CORDIC_IRQHandler+0x8a>
      {
        /* Disable Result Ready Interrupt */
        __HAL_CORDIC_DISABLE_IT(hcordic, CORDIC_IT_IEN);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003b64:	601a      	str	r2, [r3, #0]

        /* Change the CORDIC state */
        hcordic->State = HAL_CORDIC_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
#if USE_HAL_CORDIC_REGISTER_CALLBACKS == 1
        /*Call registered callback*/
        hcordic->CalculateCpltCallback(hcordic);
#else
        /*Call legacy weak callback*/
        HAL_CORDIC_CalculateCpltCallback(hcordic);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff ffb1 	bl	8003ad6 <HAL_CORDIC_CalculateCpltCallback>
#endif /* USE_HAL_CORDIC_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003b74:	bf00      	nop
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, const int32_t **ppInBuff)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	1d1a      	adds	r2, r3, #4
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ba6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003baa:	d10a      	bne.n	8003bc2 <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	1d1a      	adds	r2, r3, #4
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	601a      	str	r2, [r3, #0]
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	1d1a      	adds	r2, r3, #4
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bf8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003bfc:	d10a      	bne.n	8003c14 <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	1d1a      	adds	r2, r3, #4
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	601a      	str	r2, [r3, #0]
  }
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c30:	4b0b      	ldr	r3, [pc, #44]	@ (8003c60 <__NVIC_SetPriorityGrouping+0x40>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c48:	4b06      	ldr	r3, [pc, #24]	@ (8003c64 <__NVIC_SetPriorityGrouping+0x44>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c4e:	4a04      	ldr	r2, [pc, #16]	@ (8003c60 <__NVIC_SetPriorityGrouping+0x40>)
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	60d3      	str	r3, [r2, #12]
}
 8003c54:	bf00      	nop
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	e000ed00 	.word	0xe000ed00
 8003c64:	05fa0000 	.word	0x05fa0000

08003c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c6c:	4b04      	ldr	r3, [pc, #16]	@ (8003c80 <__NVIC_GetPriorityGrouping+0x18>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	0a1b      	lsrs	r3, r3, #8
 8003c72:	f003 0307 	and.w	r3, r3, #7
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	e000ed00 	.word	0xe000ed00

08003c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	db0b      	blt.n	8003cae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	f003 021f 	and.w	r2, r3, #31
 8003c9c:	4907      	ldr	r1, [pc, #28]	@ (8003cbc <__NVIC_EnableIRQ+0x38>)
 8003c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8003caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	e000e100 	.word	0xe000e100

08003cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	6039      	str	r1, [r7, #0]
 8003cca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	db0a      	blt.n	8003cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	490c      	ldr	r1, [pc, #48]	@ (8003d0c <__NVIC_SetPriority+0x4c>)
 8003cda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cde:	0112      	lsls	r2, r2, #4
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ce8:	e00a      	b.n	8003d00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	4908      	ldr	r1, [pc, #32]	@ (8003d10 <__NVIC_SetPriority+0x50>)
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	3b04      	subs	r3, #4
 8003cf8:	0112      	lsls	r2, r2, #4
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	761a      	strb	r2, [r3, #24]
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	e000e100 	.word	0xe000e100
 8003d10:	e000ed00 	.word	0xe000ed00

08003d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b089      	sub	sp, #36	@ 0x24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f1c3 0307 	rsb	r3, r3, #7
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	bf28      	it	cs
 8003d32:	2304      	movcs	r3, #4
 8003d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	2b06      	cmp	r3, #6
 8003d3c:	d902      	bls.n	8003d44 <NVIC_EncodePriority+0x30>
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3b03      	subs	r3, #3
 8003d42:	e000      	b.n	8003d46 <NVIC_EncodePriority+0x32>
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d48:	f04f 32ff 	mov.w	r2, #4294967295
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43da      	mvns	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	401a      	ands	r2, r3
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	fa01 f303 	lsl.w	r3, r1, r3
 8003d66:	43d9      	mvns	r1, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d6c:	4313      	orrs	r3, r2
         );
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3724      	adds	r7, #36	@ 0x24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
	...

08003d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d8c:	d301      	bcc.n	8003d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e00f      	b.n	8003db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d92:	4a0a      	ldr	r2, [pc, #40]	@ (8003dbc <SysTick_Config+0x40>)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d9a:	210f      	movs	r1, #15
 8003d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003da0:	f7ff ff8e 	bl	8003cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003da4:	4b05      	ldr	r3, [pc, #20]	@ (8003dbc <SysTick_Config+0x40>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003daa:	4b04      	ldr	r3, [pc, #16]	@ (8003dbc <SysTick_Config+0x40>)
 8003dac:	2207      	movs	r2, #7
 8003dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	e000e010 	.word	0xe000e010

08003dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff ff29 	bl	8003c20 <__NVIC_SetPriorityGrouping>
}
 8003dce:	bf00      	nop
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b086      	sub	sp, #24
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	4603      	mov	r3, r0
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
 8003de2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003de4:	f7ff ff40 	bl	8003c68 <__NVIC_GetPriorityGrouping>
 8003de8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	6978      	ldr	r0, [r7, #20]
 8003df0:	f7ff ff90 	bl	8003d14 <NVIC_EncodePriority>
 8003df4:	4602      	mov	r2, r0
 8003df6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff5f 	bl	8003cc0 <__NVIC_SetPriority>
}
 8003e02:	bf00      	nop
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	4603      	mov	r3, r0
 8003e12:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff ff33 	bl	8003c84 <__NVIC_EnableIRQ>
}
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff ffa4 	bl	8003d7c <SysTick_Config>
 8003e34:	4603      	mov	r3, r0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003e44:	f3bf 8f5f 	dmb	sy
}
 8003e48:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003e4a:	4b07      	ldr	r3, [pc, #28]	@ (8003e68 <HAL_MPU_Disable+0x28>)
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4e:	4a06      	ldr	r2, [pc, #24]	@ (8003e68 <HAL_MPU_Disable+0x28>)
 8003e50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e54:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003e56:	4b05      	ldr	r3, [pc, #20]	@ (8003e6c <HAL_MPU_Disable+0x2c>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	605a      	str	r2, [r3, #4]
}
 8003e5c:	bf00      	nop
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	e000ed00 	.word	0xe000ed00
 8003e6c:	e000ed90 	.word	0xe000ed90

08003e70 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003e78:	4a0b      	ldr	r2, [pc, #44]	@ (8003ea8 <HAL_MPU_Enable+0x38>)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003e82:	4b0a      	ldr	r3, [pc, #40]	@ (8003eac <HAL_MPU_Enable+0x3c>)
 8003e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e86:	4a09      	ldr	r2, [pc, #36]	@ (8003eac <HAL_MPU_Enable+0x3c>)
 8003e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e8c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003e8e:	f3bf 8f4f 	dsb	sy
}
 8003e92:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e94:	f3bf 8f6f 	isb	sy
}
 8003e98:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	e000ed90 	.word	0xe000ed90
 8003eac:	e000ed00 	.word	0xe000ed00

08003eb0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	785a      	ldrb	r2, [r3, #1]
 8003ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f2c <HAL_MPU_ConfigRegion+0x7c>)
 8003ebe:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8003f2c <HAL_MPU_ConfigRegion+0x7c>)
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	4a19      	ldr	r2, [pc, #100]	@ (8003f2c <HAL_MPU_ConfigRegion+0x7c>)
 8003ec6:	f023 0301 	bic.w	r3, r3, #1
 8003eca:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003ecc:	4a17      	ldr	r2, [pc, #92]	@ (8003f2c <HAL_MPU_ConfigRegion+0x7c>)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	7b1b      	ldrb	r3, [r3, #12]
 8003ed8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	7adb      	ldrb	r3, [r3, #11]
 8003ede:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ee0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	7a9b      	ldrb	r3, [r3, #10]
 8003ee6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003ee8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	7b5b      	ldrb	r3, [r3, #13]
 8003eee:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003ef0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	7b9b      	ldrb	r3, [r3, #14]
 8003ef6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003ef8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	7bdb      	ldrb	r3, [r3, #15]
 8003efe:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003f00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	7a5b      	ldrb	r3, [r3, #9]
 8003f06:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003f08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	7a1b      	ldrb	r3, [r3, #8]
 8003f0e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003f10:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	7812      	ldrb	r2, [r2, #0]
 8003f16:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003f18:	4a04      	ldr	r2, [pc, #16]	@ (8003f2c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003f1a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003f1c:	6113      	str	r3, [r2, #16]
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	e000ed90 	.word	0xe000ed90

08003f30 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e014      	b.n	8003f6c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	791b      	ldrb	r3, [r3, #4]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d105      	bne.n	8003f58 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fc fd6c 	bl	8000a30 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08a      	sub	sp, #40	@ 0x28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_DAC_ConfigChannel+0x1e>
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e12d      	b.n	80041f2 <HAL_DAC_ConfigChannel+0x27e>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b04      	cmp	r3, #4
    }
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	795b      	ldrb	r3, [r3, #5]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_DAC_ConfigChannel+0x34>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e124      	b.n	80041f2 <HAL_DAC_ConfigChannel+0x27e>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d17a      	bne.n	80040b2 <HAL_DAC_ConfigChannel+0x13e>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003fbc:	f7fd ff0c 	bl	8001dd8 <HAL_GetTick>
 8003fc0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d13d      	bne.n	8004044 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003fc8:	e018      	b.n	8003ffc <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003fca:	f7fd ff05 	bl	8001dd8 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d911      	bls.n	8003ffc <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fde:	4b87      	ldr	r3, [pc, #540]	@ (80041fc <HAL_DAC_ConfigChannel+0x288>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f043 0208 	orr.w	r2, r3, #8
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e0fa      	b.n	80041f2 <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004002:	4b7e      	ldr	r3, [pc, #504]	@ (80041fc <HAL_DAC_ConfigChannel+0x288>)
 8004004:	4013      	ands	r3, r2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1df      	bne.n	8003fca <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	6992      	ldr	r2, [r2, #24]
 8004012:	641a      	str	r2, [r3, #64]	@ 0x40
 8004014:	e020      	b.n	8004058 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004016:	f7fd fedf 	bl	8001dd8 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b01      	cmp	r3, #1
 8004022:	d90f      	bls.n	8004044 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800402a:	2b00      	cmp	r3, #0
 800402c:	da0a      	bge.n	8004044 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f043 0208 	orr.w	r2, r3, #8
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2203      	movs	r2, #3
 800403e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e0d6      	b.n	80041f2 <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800404a:	2b00      	cmp	r3, #0
 800404c:	dbe3      	blt.n	8004016 <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	6992      	ldr	r2, [r2, #24]
 8004056:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f003 0310 	and.w	r3, r3, #16
 8004064:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004068:	fa01 f303 	lsl.w	r3, r1, r3
 800406c:	43db      	mvns	r3, r3
 800406e:	ea02 0103 	and.w	r1, r2, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	69da      	ldr	r2, [r3, #28]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f003 0310 	and.w	r3, r3, #16
 800407c:	409a      	lsls	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	21ff      	movs	r1, #255	@ 0xff
 8004094:	fa01 f303 	lsl.w	r3, r1, r3
 8004098:	43db      	mvns	r3, r3
 800409a:	ea02 0103 	and.w	r1, r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	6a1a      	ldr	r2, [r3, #32]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	409a      	lsls	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d11d      	bne.n	80040f6 <HAL_DAC_ConfigChannel+0x182>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c0:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f003 0310 	and.w	r3, r3, #16
 80040c8:	221f      	movs	r2, #31
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43db      	mvns	r3, r3
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	4013      	ands	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f003 0310 	and.w	r3, r3, #16
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040fc:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f003 0310 	and.w	r3, r3, #16
 8004104:	2207      	movs	r2, #7
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43db      	mvns	r3, r3
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	4013      	ands	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d102      	bne.n	8004120 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = 0x00000000UL;
 800411a:	2300      	movs	r3, #0
 800411c:	627b      	str	r3, [r7, #36]	@ 0x24
 800411e:	e00f      	b.n	8004140 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d102      	bne.n	800412e <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004128:	2301      	movs	r3, #1
 800412a:	627b      	str	r3, [r7, #36]	@ 0x24
 800412c:	e008      	b.n	8004140 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d102      	bne.n	800413c <HAL_DAC_ConfigChannel+0x1c8>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004136:	2301      	movs	r3, #1
 8004138:	627b      	str	r3, [r7, #36]	@ 0x24
 800413a:	e001      	b.n	8004140 <HAL_DAC_ConfigChannel+0x1cc>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800413c:	2300      	movs	r3, #0
 800413e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	4313      	orrs	r3, r2
 800414a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4313      	orrs	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6819      	ldr	r1, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f003 0310 	and.w	r3, r3, #16
 8004176:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	43da      	mvns	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	400a      	ands	r2, r1
 8004186:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	43db      	mvns	r3, r3
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	4013      	ands	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f003 0310 	and.w	r3, r3, #16
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6819      	ldr	r1, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f003 0310 	and.w	r3, r3, #16
 80041d2:	22c0      	movs	r2, #192	@ 0xc0
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	43da      	mvns	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	400a      	ands	r2, r1
 80041e0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2201      	movs	r2, #1
 80041e6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80041ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3728      	adds	r7, #40	@ 0x28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20008000 	.word	0x20008000

08004200 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004208:	f7fd fde6 	bl	8001dd8 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e312      	b.n	800483e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a66      	ldr	r2, [pc, #408]	@ (80043b8 <HAL_DMA_Init+0x1b8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d04a      	beq.n	80042b8 <HAL_DMA_Init+0xb8>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a65      	ldr	r2, [pc, #404]	@ (80043bc <HAL_DMA_Init+0x1bc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d045      	beq.n	80042b8 <HAL_DMA_Init+0xb8>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a63      	ldr	r2, [pc, #396]	@ (80043c0 <HAL_DMA_Init+0x1c0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d040      	beq.n	80042b8 <HAL_DMA_Init+0xb8>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a62      	ldr	r2, [pc, #392]	@ (80043c4 <HAL_DMA_Init+0x1c4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d03b      	beq.n	80042b8 <HAL_DMA_Init+0xb8>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a60      	ldr	r2, [pc, #384]	@ (80043c8 <HAL_DMA_Init+0x1c8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d036      	beq.n	80042b8 <HAL_DMA_Init+0xb8>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a5f      	ldr	r2, [pc, #380]	@ (80043cc <HAL_DMA_Init+0x1cc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d031      	beq.n	80042b8 <HAL_DMA_Init+0xb8>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a5d      	ldr	r2, [pc, #372]	@ (80043d0 <HAL_DMA_Init+0x1d0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d02c      	beq.n	80042b8 <HAL_DMA_Init+0xb8>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a5c      	ldr	r2, [pc, #368]	@ (80043d4 <HAL_DMA_Init+0x1d4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d027      	beq.n	80042b8 <HAL_DMA_Init+0xb8>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a5a      	ldr	r2, [pc, #360]	@ (80043d8 <HAL_DMA_Init+0x1d8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d022      	beq.n	80042b8 <HAL_DMA_Init+0xb8>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a59      	ldr	r2, [pc, #356]	@ (80043dc <HAL_DMA_Init+0x1dc>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d01d      	beq.n	80042b8 <HAL_DMA_Init+0xb8>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a57      	ldr	r2, [pc, #348]	@ (80043e0 <HAL_DMA_Init+0x1e0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d018      	beq.n	80042b8 <HAL_DMA_Init+0xb8>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a56      	ldr	r2, [pc, #344]	@ (80043e4 <HAL_DMA_Init+0x1e4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d013      	beq.n	80042b8 <HAL_DMA_Init+0xb8>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a54      	ldr	r2, [pc, #336]	@ (80043e8 <HAL_DMA_Init+0x1e8>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d00e      	beq.n	80042b8 <HAL_DMA_Init+0xb8>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a53      	ldr	r2, [pc, #332]	@ (80043ec <HAL_DMA_Init+0x1ec>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d009      	beq.n	80042b8 <HAL_DMA_Init+0xb8>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a51      	ldr	r2, [pc, #324]	@ (80043f0 <HAL_DMA_Init+0x1f0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d004      	beq.n	80042b8 <HAL_DMA_Init+0xb8>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a50      	ldr	r2, [pc, #320]	@ (80043f4 <HAL_DMA_Init+0x1f4>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d101      	bne.n	80042bc <HAL_DMA_Init+0xbc>
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <HAL_DMA_Init+0xbe>
 80042bc:	2300      	movs	r3, #0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 813c 	beq.w	800453c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a37      	ldr	r2, [pc, #220]	@ (80043b8 <HAL_DMA_Init+0x1b8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d04a      	beq.n	8004374 <HAL_DMA_Init+0x174>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a36      	ldr	r2, [pc, #216]	@ (80043bc <HAL_DMA_Init+0x1bc>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d045      	beq.n	8004374 <HAL_DMA_Init+0x174>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a34      	ldr	r2, [pc, #208]	@ (80043c0 <HAL_DMA_Init+0x1c0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d040      	beq.n	8004374 <HAL_DMA_Init+0x174>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a33      	ldr	r2, [pc, #204]	@ (80043c4 <HAL_DMA_Init+0x1c4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d03b      	beq.n	8004374 <HAL_DMA_Init+0x174>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a31      	ldr	r2, [pc, #196]	@ (80043c8 <HAL_DMA_Init+0x1c8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d036      	beq.n	8004374 <HAL_DMA_Init+0x174>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a30      	ldr	r2, [pc, #192]	@ (80043cc <HAL_DMA_Init+0x1cc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d031      	beq.n	8004374 <HAL_DMA_Init+0x174>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a2e      	ldr	r2, [pc, #184]	@ (80043d0 <HAL_DMA_Init+0x1d0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d02c      	beq.n	8004374 <HAL_DMA_Init+0x174>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a2d      	ldr	r2, [pc, #180]	@ (80043d4 <HAL_DMA_Init+0x1d4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d027      	beq.n	8004374 <HAL_DMA_Init+0x174>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a2b      	ldr	r2, [pc, #172]	@ (80043d8 <HAL_DMA_Init+0x1d8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d022      	beq.n	8004374 <HAL_DMA_Init+0x174>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a2a      	ldr	r2, [pc, #168]	@ (80043dc <HAL_DMA_Init+0x1dc>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d01d      	beq.n	8004374 <HAL_DMA_Init+0x174>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a28      	ldr	r2, [pc, #160]	@ (80043e0 <HAL_DMA_Init+0x1e0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d018      	beq.n	8004374 <HAL_DMA_Init+0x174>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a27      	ldr	r2, [pc, #156]	@ (80043e4 <HAL_DMA_Init+0x1e4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d013      	beq.n	8004374 <HAL_DMA_Init+0x174>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a25      	ldr	r2, [pc, #148]	@ (80043e8 <HAL_DMA_Init+0x1e8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d00e      	beq.n	8004374 <HAL_DMA_Init+0x174>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a24      	ldr	r2, [pc, #144]	@ (80043ec <HAL_DMA_Init+0x1ec>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d009      	beq.n	8004374 <HAL_DMA_Init+0x174>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a22      	ldr	r2, [pc, #136]	@ (80043f0 <HAL_DMA_Init+0x1f0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d004      	beq.n	8004374 <HAL_DMA_Init+0x174>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a21      	ldr	r2, [pc, #132]	@ (80043f4 <HAL_DMA_Init+0x1f4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d108      	bne.n	8004386 <HAL_DMA_Init+0x186>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0201 	bic.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	e007      	b.n	8004396 <HAL_DMA_Init+0x196>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0201 	bic.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004396:	e02f      	b.n	80043f8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004398:	f7fd fd1e 	bl	8001dd8 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b05      	cmp	r3, #5
 80043a4:	d928      	bls.n	80043f8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2203      	movs	r2, #3
 80043b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e242      	b.n	800483e <HAL_DMA_Init+0x63e>
 80043b8:	40020010 	.word	0x40020010
 80043bc:	40020028 	.word	0x40020028
 80043c0:	40020040 	.word	0x40020040
 80043c4:	40020058 	.word	0x40020058
 80043c8:	40020070 	.word	0x40020070
 80043cc:	40020088 	.word	0x40020088
 80043d0:	400200a0 	.word	0x400200a0
 80043d4:	400200b8 	.word	0x400200b8
 80043d8:	40020410 	.word	0x40020410
 80043dc:	40020428 	.word	0x40020428
 80043e0:	40020440 	.word	0x40020440
 80043e4:	40020458 	.word	0x40020458
 80043e8:	40020470 	.word	0x40020470
 80043ec:	40020488 	.word	0x40020488
 80043f0:	400204a0 	.word	0x400204a0
 80043f4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1c8      	bne.n	8004398 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4b83      	ldr	r3, [pc, #524]	@ (8004620 <HAL_DMA_Init+0x420>)
 8004412:	4013      	ands	r3, r2
 8004414:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800441e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800442a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004436:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	4313      	orrs	r3, r2
 8004442:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004448:	2b04      	cmp	r3, #4
 800444a:	d107      	bne.n	800445c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004454:	4313      	orrs	r3, r2
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b28      	cmp	r3, #40	@ 0x28
 8004462:	d903      	bls.n	800446c <HAL_DMA_Init+0x26c>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b2e      	cmp	r3, #46	@ 0x2e
 800446a:	d91f      	bls.n	80044ac <HAL_DMA_Init+0x2ac>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b3e      	cmp	r3, #62	@ 0x3e
 8004472:	d903      	bls.n	800447c <HAL_DMA_Init+0x27c>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b42      	cmp	r3, #66	@ 0x42
 800447a:	d917      	bls.n	80044ac <HAL_DMA_Init+0x2ac>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b46      	cmp	r3, #70	@ 0x46
 8004482:	d903      	bls.n	800448c <HAL_DMA_Init+0x28c>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b48      	cmp	r3, #72	@ 0x48
 800448a:	d90f      	bls.n	80044ac <HAL_DMA_Init+0x2ac>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b4e      	cmp	r3, #78	@ 0x4e
 8004492:	d903      	bls.n	800449c <HAL_DMA_Init+0x29c>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b52      	cmp	r3, #82	@ 0x52
 800449a:	d907      	bls.n	80044ac <HAL_DMA_Init+0x2ac>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b73      	cmp	r3, #115	@ 0x73
 80044a2:	d905      	bls.n	80044b0 <HAL_DMA_Init+0x2b0>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b77      	cmp	r3, #119	@ 0x77
 80044aa:	d801      	bhi.n	80044b0 <HAL_DMA_Init+0x2b0>
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <HAL_DMA_Init+0x2b2>
 80044b0:	2300      	movs	r3, #0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044bc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f023 0307 	bic.w	r3, r3, #7
 80044d4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	4313      	orrs	r3, r2
 80044de:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d117      	bne.n	8004518 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00e      	beq.n	8004518 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f001 ff18 	bl	8006330 <DMA_CheckFifoParam>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d008      	beq.n	8004518 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2240      	movs	r2, #64	@ 0x40
 800450a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e192      	b.n	800483e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f001 fe53 	bl	80061cc <DMA_CalcBaseAndBitshift>
 8004526:	4603      	mov	r3, r0
 8004528:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800452e:	f003 031f 	and.w	r3, r3, #31
 8004532:	223f      	movs	r2, #63	@ 0x3f
 8004534:	409a      	lsls	r2, r3
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	609a      	str	r2, [r3, #8]
 800453a:	e0c8      	b.n	80046ce <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a38      	ldr	r2, [pc, #224]	@ (8004624 <HAL_DMA_Init+0x424>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d022      	beq.n	800458c <HAL_DMA_Init+0x38c>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a37      	ldr	r2, [pc, #220]	@ (8004628 <HAL_DMA_Init+0x428>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d01d      	beq.n	800458c <HAL_DMA_Init+0x38c>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a35      	ldr	r2, [pc, #212]	@ (800462c <HAL_DMA_Init+0x42c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d018      	beq.n	800458c <HAL_DMA_Init+0x38c>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a34      	ldr	r2, [pc, #208]	@ (8004630 <HAL_DMA_Init+0x430>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d013      	beq.n	800458c <HAL_DMA_Init+0x38c>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a32      	ldr	r2, [pc, #200]	@ (8004634 <HAL_DMA_Init+0x434>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d00e      	beq.n	800458c <HAL_DMA_Init+0x38c>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a31      	ldr	r2, [pc, #196]	@ (8004638 <HAL_DMA_Init+0x438>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d009      	beq.n	800458c <HAL_DMA_Init+0x38c>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a2f      	ldr	r2, [pc, #188]	@ (800463c <HAL_DMA_Init+0x43c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d004      	beq.n	800458c <HAL_DMA_Init+0x38c>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a2e      	ldr	r2, [pc, #184]	@ (8004640 <HAL_DMA_Init+0x440>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d101      	bne.n	8004590 <HAL_DMA_Init+0x390>
 800458c:	2301      	movs	r3, #1
 800458e:	e000      	b.n	8004592 <HAL_DMA_Init+0x392>
 8004590:	2300      	movs	r3, #0
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 8092 	beq.w	80046bc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a21      	ldr	r2, [pc, #132]	@ (8004624 <HAL_DMA_Init+0x424>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d021      	beq.n	80045e6 <HAL_DMA_Init+0x3e6>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a20      	ldr	r2, [pc, #128]	@ (8004628 <HAL_DMA_Init+0x428>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d01c      	beq.n	80045e6 <HAL_DMA_Init+0x3e6>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a1e      	ldr	r2, [pc, #120]	@ (800462c <HAL_DMA_Init+0x42c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d017      	beq.n	80045e6 <HAL_DMA_Init+0x3e6>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004630 <HAL_DMA_Init+0x430>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d012      	beq.n	80045e6 <HAL_DMA_Init+0x3e6>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004634 <HAL_DMA_Init+0x434>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00d      	beq.n	80045e6 <HAL_DMA_Init+0x3e6>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004638 <HAL_DMA_Init+0x438>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d008      	beq.n	80045e6 <HAL_DMA_Init+0x3e6>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a18      	ldr	r2, [pc, #96]	@ (800463c <HAL_DMA_Init+0x43c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d003      	beq.n	80045e6 <HAL_DMA_Init+0x3e6>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a17      	ldr	r2, [pc, #92]	@ (8004640 <HAL_DMA_Init+0x440>)
 80045e4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2202      	movs	r2, #2
 80045ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4b10      	ldr	r3, [pc, #64]	@ (8004644 <HAL_DMA_Init+0x444>)
 8004602:	4013      	ands	r3, r2
 8004604:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2b40      	cmp	r3, #64	@ 0x40
 800460c:	d01c      	beq.n	8004648 <HAL_DMA_Init+0x448>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b80      	cmp	r3, #128	@ 0x80
 8004614:	d102      	bne.n	800461c <HAL_DMA_Init+0x41c>
 8004616:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800461a:	e016      	b.n	800464a <HAL_DMA_Init+0x44a>
 800461c:	2300      	movs	r3, #0
 800461e:	e014      	b.n	800464a <HAL_DMA_Init+0x44a>
 8004620:	fe10803f 	.word	0xfe10803f
 8004624:	58025408 	.word	0x58025408
 8004628:	5802541c 	.word	0x5802541c
 800462c:	58025430 	.word	0x58025430
 8004630:	58025444 	.word	0x58025444
 8004634:	58025458 	.word	0x58025458
 8004638:	5802546c 	.word	0x5802546c
 800463c:	58025480 	.word	0x58025480
 8004640:	58025494 	.word	0x58025494
 8004644:	fffe000f 	.word	0xfffe000f
 8004648:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	68d2      	ldr	r2, [r2, #12]
 800464e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004650:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004658:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004660:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004668:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004670:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004678:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	4b6e      	ldr	r3, [pc, #440]	@ (8004848 <HAL_DMA_Init+0x648>)
 8004690:	4413      	add	r3, r2
 8004692:	4a6e      	ldr	r2, [pc, #440]	@ (800484c <HAL_DMA_Init+0x64c>)
 8004694:	fba2 2303 	umull	r2, r3, r2, r3
 8004698:	091b      	lsrs	r3, r3, #4
 800469a:	009a      	lsls	r2, r3, #2
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f001 fd93 	bl	80061cc <DMA_CalcBaseAndBitshift>
 80046a6:	4603      	mov	r3, r0
 80046a8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ae:	f003 031f 	and.w	r3, r3, #31
 80046b2:	2201      	movs	r2, #1
 80046b4:	409a      	lsls	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	605a      	str	r2, [r3, #4]
 80046ba:	e008      	b.n	80046ce <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2240      	movs	r2, #64	@ 0x40
 80046c0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2203      	movs	r2, #3
 80046c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e0b7      	b.n	800483e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a5f      	ldr	r2, [pc, #380]	@ (8004850 <HAL_DMA_Init+0x650>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d072      	beq.n	80047be <HAL_DMA_Init+0x5be>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a5d      	ldr	r2, [pc, #372]	@ (8004854 <HAL_DMA_Init+0x654>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d06d      	beq.n	80047be <HAL_DMA_Init+0x5be>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a5c      	ldr	r2, [pc, #368]	@ (8004858 <HAL_DMA_Init+0x658>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d068      	beq.n	80047be <HAL_DMA_Init+0x5be>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a5a      	ldr	r2, [pc, #360]	@ (800485c <HAL_DMA_Init+0x65c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d063      	beq.n	80047be <HAL_DMA_Init+0x5be>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a59      	ldr	r2, [pc, #356]	@ (8004860 <HAL_DMA_Init+0x660>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d05e      	beq.n	80047be <HAL_DMA_Init+0x5be>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a57      	ldr	r2, [pc, #348]	@ (8004864 <HAL_DMA_Init+0x664>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d059      	beq.n	80047be <HAL_DMA_Init+0x5be>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a56      	ldr	r2, [pc, #344]	@ (8004868 <HAL_DMA_Init+0x668>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d054      	beq.n	80047be <HAL_DMA_Init+0x5be>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a54      	ldr	r2, [pc, #336]	@ (800486c <HAL_DMA_Init+0x66c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d04f      	beq.n	80047be <HAL_DMA_Init+0x5be>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a53      	ldr	r2, [pc, #332]	@ (8004870 <HAL_DMA_Init+0x670>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d04a      	beq.n	80047be <HAL_DMA_Init+0x5be>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a51      	ldr	r2, [pc, #324]	@ (8004874 <HAL_DMA_Init+0x674>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d045      	beq.n	80047be <HAL_DMA_Init+0x5be>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a50      	ldr	r2, [pc, #320]	@ (8004878 <HAL_DMA_Init+0x678>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d040      	beq.n	80047be <HAL_DMA_Init+0x5be>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a4e      	ldr	r2, [pc, #312]	@ (800487c <HAL_DMA_Init+0x67c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d03b      	beq.n	80047be <HAL_DMA_Init+0x5be>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a4d      	ldr	r2, [pc, #308]	@ (8004880 <HAL_DMA_Init+0x680>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d036      	beq.n	80047be <HAL_DMA_Init+0x5be>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a4b      	ldr	r2, [pc, #300]	@ (8004884 <HAL_DMA_Init+0x684>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d031      	beq.n	80047be <HAL_DMA_Init+0x5be>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a4a      	ldr	r2, [pc, #296]	@ (8004888 <HAL_DMA_Init+0x688>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d02c      	beq.n	80047be <HAL_DMA_Init+0x5be>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a48      	ldr	r2, [pc, #288]	@ (800488c <HAL_DMA_Init+0x68c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d027      	beq.n	80047be <HAL_DMA_Init+0x5be>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a47      	ldr	r2, [pc, #284]	@ (8004890 <HAL_DMA_Init+0x690>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d022      	beq.n	80047be <HAL_DMA_Init+0x5be>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a45      	ldr	r2, [pc, #276]	@ (8004894 <HAL_DMA_Init+0x694>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d01d      	beq.n	80047be <HAL_DMA_Init+0x5be>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a44      	ldr	r2, [pc, #272]	@ (8004898 <HAL_DMA_Init+0x698>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d018      	beq.n	80047be <HAL_DMA_Init+0x5be>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a42      	ldr	r2, [pc, #264]	@ (800489c <HAL_DMA_Init+0x69c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d013      	beq.n	80047be <HAL_DMA_Init+0x5be>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a41      	ldr	r2, [pc, #260]	@ (80048a0 <HAL_DMA_Init+0x6a0>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00e      	beq.n	80047be <HAL_DMA_Init+0x5be>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a3f      	ldr	r2, [pc, #252]	@ (80048a4 <HAL_DMA_Init+0x6a4>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d009      	beq.n	80047be <HAL_DMA_Init+0x5be>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a3e      	ldr	r2, [pc, #248]	@ (80048a8 <HAL_DMA_Init+0x6a8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d004      	beq.n	80047be <HAL_DMA_Init+0x5be>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a3c      	ldr	r2, [pc, #240]	@ (80048ac <HAL_DMA_Init+0x6ac>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d101      	bne.n	80047c2 <HAL_DMA_Init+0x5c2>
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <HAL_DMA_Init+0x5c4>
 80047c2:	2300      	movs	r3, #0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d032      	beq.n	800482e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f001 fe2d 	bl	8006428 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	2b80      	cmp	r3, #128	@ 0x80
 80047d4:	d102      	bne.n	80047dc <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80047f0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d010      	beq.n	800481c <HAL_DMA_Init+0x61c>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d80c      	bhi.n	800481c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f001 feaa 	bl	800655c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004818:	605a      	str	r2, [r3, #4]
 800481a:	e008      	b.n	800482e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	a7fdabf8 	.word	0xa7fdabf8
 800484c:	cccccccd 	.word	0xcccccccd
 8004850:	40020010 	.word	0x40020010
 8004854:	40020028 	.word	0x40020028
 8004858:	40020040 	.word	0x40020040
 800485c:	40020058 	.word	0x40020058
 8004860:	40020070 	.word	0x40020070
 8004864:	40020088 	.word	0x40020088
 8004868:	400200a0 	.word	0x400200a0
 800486c:	400200b8 	.word	0x400200b8
 8004870:	40020410 	.word	0x40020410
 8004874:	40020428 	.word	0x40020428
 8004878:	40020440 	.word	0x40020440
 800487c:	40020458 	.word	0x40020458
 8004880:	40020470 	.word	0x40020470
 8004884:	40020488 	.word	0x40020488
 8004888:	400204a0 	.word	0x400204a0
 800488c:	400204b8 	.word	0x400204b8
 8004890:	58025408 	.word	0x58025408
 8004894:	5802541c 	.word	0x5802541c
 8004898:	58025430 	.word	0x58025430
 800489c:	58025444 	.word	0x58025444
 80048a0:	58025458 	.word	0x58025458
 80048a4:	5802546c 	.word	0x5802546c
 80048a8:	58025480 	.word	0x58025480
 80048ac:	58025494 	.word	0x58025494

080048b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80048b8:	f7fd fa8e 	bl	8001dd8 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e2dc      	b.n	8004e82 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d008      	beq.n	80048e6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2280      	movs	r2, #128	@ 0x80
 80048d8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e2cd      	b.n	8004e82 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a76      	ldr	r2, [pc, #472]	@ (8004ac4 <HAL_DMA_Abort+0x214>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d04a      	beq.n	8004986 <HAL_DMA_Abort+0xd6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a74      	ldr	r2, [pc, #464]	@ (8004ac8 <HAL_DMA_Abort+0x218>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d045      	beq.n	8004986 <HAL_DMA_Abort+0xd6>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a73      	ldr	r2, [pc, #460]	@ (8004acc <HAL_DMA_Abort+0x21c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d040      	beq.n	8004986 <HAL_DMA_Abort+0xd6>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a71      	ldr	r2, [pc, #452]	@ (8004ad0 <HAL_DMA_Abort+0x220>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d03b      	beq.n	8004986 <HAL_DMA_Abort+0xd6>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a70      	ldr	r2, [pc, #448]	@ (8004ad4 <HAL_DMA_Abort+0x224>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d036      	beq.n	8004986 <HAL_DMA_Abort+0xd6>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a6e      	ldr	r2, [pc, #440]	@ (8004ad8 <HAL_DMA_Abort+0x228>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d031      	beq.n	8004986 <HAL_DMA_Abort+0xd6>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a6d      	ldr	r2, [pc, #436]	@ (8004adc <HAL_DMA_Abort+0x22c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d02c      	beq.n	8004986 <HAL_DMA_Abort+0xd6>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a6b      	ldr	r2, [pc, #428]	@ (8004ae0 <HAL_DMA_Abort+0x230>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d027      	beq.n	8004986 <HAL_DMA_Abort+0xd6>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a6a      	ldr	r2, [pc, #424]	@ (8004ae4 <HAL_DMA_Abort+0x234>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d022      	beq.n	8004986 <HAL_DMA_Abort+0xd6>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a68      	ldr	r2, [pc, #416]	@ (8004ae8 <HAL_DMA_Abort+0x238>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d01d      	beq.n	8004986 <HAL_DMA_Abort+0xd6>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a67      	ldr	r2, [pc, #412]	@ (8004aec <HAL_DMA_Abort+0x23c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d018      	beq.n	8004986 <HAL_DMA_Abort+0xd6>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a65      	ldr	r2, [pc, #404]	@ (8004af0 <HAL_DMA_Abort+0x240>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d013      	beq.n	8004986 <HAL_DMA_Abort+0xd6>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a64      	ldr	r2, [pc, #400]	@ (8004af4 <HAL_DMA_Abort+0x244>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00e      	beq.n	8004986 <HAL_DMA_Abort+0xd6>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a62      	ldr	r2, [pc, #392]	@ (8004af8 <HAL_DMA_Abort+0x248>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d009      	beq.n	8004986 <HAL_DMA_Abort+0xd6>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a61      	ldr	r2, [pc, #388]	@ (8004afc <HAL_DMA_Abort+0x24c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d004      	beq.n	8004986 <HAL_DMA_Abort+0xd6>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a5f      	ldr	r2, [pc, #380]	@ (8004b00 <HAL_DMA_Abort+0x250>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d101      	bne.n	800498a <HAL_DMA_Abort+0xda>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <HAL_DMA_Abort+0xdc>
 800498a:	2300      	movs	r3, #0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d013      	beq.n	80049b8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 021e 	bic.w	r2, r2, #30
 800499e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695a      	ldr	r2, [r3, #20]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049ae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	e00a      	b.n	80049ce <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 020e 	bic.w	r2, r2, #14
 80049c6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a3c      	ldr	r2, [pc, #240]	@ (8004ac4 <HAL_DMA_Abort+0x214>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d072      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a3a      	ldr	r2, [pc, #232]	@ (8004ac8 <HAL_DMA_Abort+0x218>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d06d      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a39      	ldr	r2, [pc, #228]	@ (8004acc <HAL_DMA_Abort+0x21c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d068      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a37      	ldr	r2, [pc, #220]	@ (8004ad0 <HAL_DMA_Abort+0x220>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d063      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a36      	ldr	r2, [pc, #216]	@ (8004ad4 <HAL_DMA_Abort+0x224>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d05e      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a34      	ldr	r2, [pc, #208]	@ (8004ad8 <HAL_DMA_Abort+0x228>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d059      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a33      	ldr	r2, [pc, #204]	@ (8004adc <HAL_DMA_Abort+0x22c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d054      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a31      	ldr	r2, [pc, #196]	@ (8004ae0 <HAL_DMA_Abort+0x230>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d04f      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a30      	ldr	r2, [pc, #192]	@ (8004ae4 <HAL_DMA_Abort+0x234>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d04a      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a2e      	ldr	r2, [pc, #184]	@ (8004ae8 <HAL_DMA_Abort+0x238>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d045      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a2d      	ldr	r2, [pc, #180]	@ (8004aec <HAL_DMA_Abort+0x23c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d040      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a2b      	ldr	r2, [pc, #172]	@ (8004af0 <HAL_DMA_Abort+0x240>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d03b      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8004af4 <HAL_DMA_Abort+0x244>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d036      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a28      	ldr	r2, [pc, #160]	@ (8004af8 <HAL_DMA_Abort+0x248>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d031      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a27      	ldr	r2, [pc, #156]	@ (8004afc <HAL_DMA_Abort+0x24c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d02c      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a25      	ldr	r2, [pc, #148]	@ (8004b00 <HAL_DMA_Abort+0x250>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d027      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a24      	ldr	r2, [pc, #144]	@ (8004b04 <HAL_DMA_Abort+0x254>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d022      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a22      	ldr	r2, [pc, #136]	@ (8004b08 <HAL_DMA_Abort+0x258>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d01d      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a21      	ldr	r2, [pc, #132]	@ (8004b0c <HAL_DMA_Abort+0x25c>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d018      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1f      	ldr	r2, [pc, #124]	@ (8004b10 <HAL_DMA_Abort+0x260>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d013      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004b14 <HAL_DMA_Abort+0x264>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00e      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8004b18 <HAL_DMA_Abort+0x268>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d009      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a1b      	ldr	r2, [pc, #108]	@ (8004b1c <HAL_DMA_Abort+0x26c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d004      	beq.n	8004abe <HAL_DMA_Abort+0x20e>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a19      	ldr	r2, [pc, #100]	@ (8004b20 <HAL_DMA_Abort+0x270>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d132      	bne.n	8004b24 <HAL_DMA_Abort+0x274>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e031      	b.n	8004b26 <HAL_DMA_Abort+0x276>
 8004ac2:	bf00      	nop
 8004ac4:	40020010 	.word	0x40020010
 8004ac8:	40020028 	.word	0x40020028
 8004acc:	40020040 	.word	0x40020040
 8004ad0:	40020058 	.word	0x40020058
 8004ad4:	40020070 	.word	0x40020070
 8004ad8:	40020088 	.word	0x40020088
 8004adc:	400200a0 	.word	0x400200a0
 8004ae0:	400200b8 	.word	0x400200b8
 8004ae4:	40020410 	.word	0x40020410
 8004ae8:	40020428 	.word	0x40020428
 8004aec:	40020440 	.word	0x40020440
 8004af0:	40020458 	.word	0x40020458
 8004af4:	40020470 	.word	0x40020470
 8004af8:	40020488 	.word	0x40020488
 8004afc:	400204a0 	.word	0x400204a0
 8004b00:	400204b8 	.word	0x400204b8
 8004b04:	58025408 	.word	0x58025408
 8004b08:	5802541c 	.word	0x5802541c
 8004b0c:	58025430 	.word	0x58025430
 8004b10:	58025444 	.word	0x58025444
 8004b14:	58025458 	.word	0x58025458
 8004b18:	5802546c 	.word	0x5802546c
 8004b1c:	58025480 	.word	0x58025480
 8004b20:	58025494 	.word	0x58025494
 8004b24:	2300      	movs	r3, #0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d007      	beq.n	8004b3a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b38:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a6d      	ldr	r2, [pc, #436]	@ (8004cf4 <HAL_DMA_Abort+0x444>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d04a      	beq.n	8004bda <HAL_DMA_Abort+0x32a>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a6b      	ldr	r2, [pc, #428]	@ (8004cf8 <HAL_DMA_Abort+0x448>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d045      	beq.n	8004bda <HAL_DMA_Abort+0x32a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a6a      	ldr	r2, [pc, #424]	@ (8004cfc <HAL_DMA_Abort+0x44c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d040      	beq.n	8004bda <HAL_DMA_Abort+0x32a>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a68      	ldr	r2, [pc, #416]	@ (8004d00 <HAL_DMA_Abort+0x450>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d03b      	beq.n	8004bda <HAL_DMA_Abort+0x32a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a67      	ldr	r2, [pc, #412]	@ (8004d04 <HAL_DMA_Abort+0x454>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d036      	beq.n	8004bda <HAL_DMA_Abort+0x32a>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a65      	ldr	r2, [pc, #404]	@ (8004d08 <HAL_DMA_Abort+0x458>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d031      	beq.n	8004bda <HAL_DMA_Abort+0x32a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a64      	ldr	r2, [pc, #400]	@ (8004d0c <HAL_DMA_Abort+0x45c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d02c      	beq.n	8004bda <HAL_DMA_Abort+0x32a>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a62      	ldr	r2, [pc, #392]	@ (8004d10 <HAL_DMA_Abort+0x460>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d027      	beq.n	8004bda <HAL_DMA_Abort+0x32a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a61      	ldr	r2, [pc, #388]	@ (8004d14 <HAL_DMA_Abort+0x464>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d022      	beq.n	8004bda <HAL_DMA_Abort+0x32a>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a5f      	ldr	r2, [pc, #380]	@ (8004d18 <HAL_DMA_Abort+0x468>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d01d      	beq.n	8004bda <HAL_DMA_Abort+0x32a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a5e      	ldr	r2, [pc, #376]	@ (8004d1c <HAL_DMA_Abort+0x46c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d018      	beq.n	8004bda <HAL_DMA_Abort+0x32a>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a5c      	ldr	r2, [pc, #368]	@ (8004d20 <HAL_DMA_Abort+0x470>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d013      	beq.n	8004bda <HAL_DMA_Abort+0x32a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a5b      	ldr	r2, [pc, #364]	@ (8004d24 <HAL_DMA_Abort+0x474>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d00e      	beq.n	8004bda <HAL_DMA_Abort+0x32a>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a59      	ldr	r2, [pc, #356]	@ (8004d28 <HAL_DMA_Abort+0x478>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d009      	beq.n	8004bda <HAL_DMA_Abort+0x32a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a58      	ldr	r2, [pc, #352]	@ (8004d2c <HAL_DMA_Abort+0x47c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d004      	beq.n	8004bda <HAL_DMA_Abort+0x32a>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a56      	ldr	r2, [pc, #344]	@ (8004d30 <HAL_DMA_Abort+0x480>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d108      	bne.n	8004bec <HAL_DMA_Abort+0x33c>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0201 	bic.w	r2, r2, #1
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	e007      	b.n	8004bfc <HAL_DMA_Abort+0x34c>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0201 	bic.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004bfc:	e013      	b.n	8004c26 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bfe:	f7fd f8eb 	bl	8001dd8 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b05      	cmp	r3, #5
 8004c0a:	d90c      	bls.n	8004c26 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2220      	movs	r2, #32
 8004c10:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2203      	movs	r2, #3
 8004c16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e12d      	b.n	8004e82 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1e5      	bne.n	8004bfe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a2f      	ldr	r2, [pc, #188]	@ (8004cf4 <HAL_DMA_Abort+0x444>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d04a      	beq.n	8004cd2 <HAL_DMA_Abort+0x422>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a2d      	ldr	r2, [pc, #180]	@ (8004cf8 <HAL_DMA_Abort+0x448>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d045      	beq.n	8004cd2 <HAL_DMA_Abort+0x422>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a2c      	ldr	r2, [pc, #176]	@ (8004cfc <HAL_DMA_Abort+0x44c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d040      	beq.n	8004cd2 <HAL_DMA_Abort+0x422>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a2a      	ldr	r2, [pc, #168]	@ (8004d00 <HAL_DMA_Abort+0x450>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d03b      	beq.n	8004cd2 <HAL_DMA_Abort+0x422>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a29      	ldr	r2, [pc, #164]	@ (8004d04 <HAL_DMA_Abort+0x454>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d036      	beq.n	8004cd2 <HAL_DMA_Abort+0x422>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a27      	ldr	r2, [pc, #156]	@ (8004d08 <HAL_DMA_Abort+0x458>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d031      	beq.n	8004cd2 <HAL_DMA_Abort+0x422>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a26      	ldr	r2, [pc, #152]	@ (8004d0c <HAL_DMA_Abort+0x45c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d02c      	beq.n	8004cd2 <HAL_DMA_Abort+0x422>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a24      	ldr	r2, [pc, #144]	@ (8004d10 <HAL_DMA_Abort+0x460>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d027      	beq.n	8004cd2 <HAL_DMA_Abort+0x422>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a23      	ldr	r2, [pc, #140]	@ (8004d14 <HAL_DMA_Abort+0x464>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d022      	beq.n	8004cd2 <HAL_DMA_Abort+0x422>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a21      	ldr	r2, [pc, #132]	@ (8004d18 <HAL_DMA_Abort+0x468>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d01d      	beq.n	8004cd2 <HAL_DMA_Abort+0x422>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a20      	ldr	r2, [pc, #128]	@ (8004d1c <HAL_DMA_Abort+0x46c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d018      	beq.n	8004cd2 <HAL_DMA_Abort+0x422>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a1e      	ldr	r2, [pc, #120]	@ (8004d20 <HAL_DMA_Abort+0x470>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d013      	beq.n	8004cd2 <HAL_DMA_Abort+0x422>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1d      	ldr	r2, [pc, #116]	@ (8004d24 <HAL_DMA_Abort+0x474>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00e      	beq.n	8004cd2 <HAL_DMA_Abort+0x422>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8004d28 <HAL_DMA_Abort+0x478>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d009      	beq.n	8004cd2 <HAL_DMA_Abort+0x422>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a1a      	ldr	r2, [pc, #104]	@ (8004d2c <HAL_DMA_Abort+0x47c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d004      	beq.n	8004cd2 <HAL_DMA_Abort+0x422>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a18      	ldr	r2, [pc, #96]	@ (8004d30 <HAL_DMA_Abort+0x480>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d101      	bne.n	8004cd6 <HAL_DMA_Abort+0x426>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <HAL_DMA_Abort+0x428>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d02b      	beq.n	8004d34 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce6:	f003 031f 	and.w	r3, r3, #31
 8004cea:	223f      	movs	r2, #63	@ 0x3f
 8004cec:	409a      	lsls	r2, r3
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	609a      	str	r2, [r3, #8]
 8004cf2:	e02a      	b.n	8004d4a <HAL_DMA_Abort+0x49a>
 8004cf4:	40020010 	.word	0x40020010
 8004cf8:	40020028 	.word	0x40020028
 8004cfc:	40020040 	.word	0x40020040
 8004d00:	40020058 	.word	0x40020058
 8004d04:	40020070 	.word	0x40020070
 8004d08:	40020088 	.word	0x40020088
 8004d0c:	400200a0 	.word	0x400200a0
 8004d10:	400200b8 	.word	0x400200b8
 8004d14:	40020410 	.word	0x40020410
 8004d18:	40020428 	.word	0x40020428
 8004d1c:	40020440 	.word	0x40020440
 8004d20:	40020458 	.word	0x40020458
 8004d24:	40020470 	.word	0x40020470
 8004d28:	40020488 	.word	0x40020488
 8004d2c:	400204a0 	.word	0x400204a0
 8004d30:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d38:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d3e:	f003 031f 	and.w	r3, r3, #31
 8004d42:	2201      	movs	r2, #1
 8004d44:	409a      	lsls	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a4f      	ldr	r2, [pc, #316]	@ (8004e8c <HAL_DMA_Abort+0x5dc>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d072      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a4d      	ldr	r2, [pc, #308]	@ (8004e90 <HAL_DMA_Abort+0x5e0>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d06d      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a4c      	ldr	r2, [pc, #304]	@ (8004e94 <HAL_DMA_Abort+0x5e4>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d068      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a4a      	ldr	r2, [pc, #296]	@ (8004e98 <HAL_DMA_Abort+0x5e8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d063      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a49      	ldr	r2, [pc, #292]	@ (8004e9c <HAL_DMA_Abort+0x5ec>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d05e      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a47      	ldr	r2, [pc, #284]	@ (8004ea0 <HAL_DMA_Abort+0x5f0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d059      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a46      	ldr	r2, [pc, #280]	@ (8004ea4 <HAL_DMA_Abort+0x5f4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d054      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a44      	ldr	r2, [pc, #272]	@ (8004ea8 <HAL_DMA_Abort+0x5f8>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d04f      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a43      	ldr	r2, [pc, #268]	@ (8004eac <HAL_DMA_Abort+0x5fc>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d04a      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a41      	ldr	r2, [pc, #260]	@ (8004eb0 <HAL_DMA_Abort+0x600>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d045      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a40      	ldr	r2, [pc, #256]	@ (8004eb4 <HAL_DMA_Abort+0x604>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d040      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a3e      	ldr	r2, [pc, #248]	@ (8004eb8 <HAL_DMA_Abort+0x608>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d03b      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a3d      	ldr	r2, [pc, #244]	@ (8004ebc <HAL_DMA_Abort+0x60c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d036      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a3b      	ldr	r2, [pc, #236]	@ (8004ec0 <HAL_DMA_Abort+0x610>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d031      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a3a      	ldr	r2, [pc, #232]	@ (8004ec4 <HAL_DMA_Abort+0x614>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d02c      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a38      	ldr	r2, [pc, #224]	@ (8004ec8 <HAL_DMA_Abort+0x618>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d027      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a37      	ldr	r2, [pc, #220]	@ (8004ecc <HAL_DMA_Abort+0x61c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d022      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a35      	ldr	r2, [pc, #212]	@ (8004ed0 <HAL_DMA_Abort+0x620>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d01d      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a34      	ldr	r2, [pc, #208]	@ (8004ed4 <HAL_DMA_Abort+0x624>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d018      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a32      	ldr	r2, [pc, #200]	@ (8004ed8 <HAL_DMA_Abort+0x628>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d013      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a31      	ldr	r2, [pc, #196]	@ (8004edc <HAL_DMA_Abort+0x62c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00e      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a2f      	ldr	r2, [pc, #188]	@ (8004ee0 <HAL_DMA_Abort+0x630>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d009      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a2e      	ldr	r2, [pc, #184]	@ (8004ee4 <HAL_DMA_Abort+0x634>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d004      	beq.n	8004e3a <HAL_DMA_Abort+0x58a>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a2c      	ldr	r2, [pc, #176]	@ (8004ee8 <HAL_DMA_Abort+0x638>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d101      	bne.n	8004e3e <HAL_DMA_Abort+0x58e>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <HAL_DMA_Abort+0x590>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d015      	beq.n	8004e70 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004e4c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00c      	beq.n	8004e70 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e64:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e6e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40020010 	.word	0x40020010
 8004e90:	40020028 	.word	0x40020028
 8004e94:	40020040 	.word	0x40020040
 8004e98:	40020058 	.word	0x40020058
 8004e9c:	40020070 	.word	0x40020070
 8004ea0:	40020088 	.word	0x40020088
 8004ea4:	400200a0 	.word	0x400200a0
 8004ea8:	400200b8 	.word	0x400200b8
 8004eac:	40020410 	.word	0x40020410
 8004eb0:	40020428 	.word	0x40020428
 8004eb4:	40020440 	.word	0x40020440
 8004eb8:	40020458 	.word	0x40020458
 8004ebc:	40020470 	.word	0x40020470
 8004ec0:	40020488 	.word	0x40020488
 8004ec4:	400204a0 	.word	0x400204a0
 8004ec8:	400204b8 	.word	0x400204b8
 8004ecc:	58025408 	.word	0x58025408
 8004ed0:	5802541c 	.word	0x5802541c
 8004ed4:	58025430 	.word	0x58025430
 8004ed8:	58025444 	.word	0x58025444
 8004edc:	58025458 	.word	0x58025458
 8004ee0:	5802546c 	.word	0x5802546c
 8004ee4:	58025480 	.word	0x58025480
 8004ee8:	58025494 	.word	0x58025494

08004eec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e237      	b.n	800536e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d004      	beq.n	8004f14 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2280      	movs	r2, #128	@ 0x80
 8004f0e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e22c      	b.n	800536e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a5c      	ldr	r2, [pc, #368]	@ (800508c <HAL_DMA_Abort_IT+0x1a0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d04a      	beq.n	8004fb4 <HAL_DMA_Abort_IT+0xc8>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a5b      	ldr	r2, [pc, #364]	@ (8005090 <HAL_DMA_Abort_IT+0x1a4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d045      	beq.n	8004fb4 <HAL_DMA_Abort_IT+0xc8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a59      	ldr	r2, [pc, #356]	@ (8005094 <HAL_DMA_Abort_IT+0x1a8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d040      	beq.n	8004fb4 <HAL_DMA_Abort_IT+0xc8>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a58      	ldr	r2, [pc, #352]	@ (8005098 <HAL_DMA_Abort_IT+0x1ac>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d03b      	beq.n	8004fb4 <HAL_DMA_Abort_IT+0xc8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a56      	ldr	r2, [pc, #344]	@ (800509c <HAL_DMA_Abort_IT+0x1b0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d036      	beq.n	8004fb4 <HAL_DMA_Abort_IT+0xc8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a55      	ldr	r2, [pc, #340]	@ (80050a0 <HAL_DMA_Abort_IT+0x1b4>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d031      	beq.n	8004fb4 <HAL_DMA_Abort_IT+0xc8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a53      	ldr	r2, [pc, #332]	@ (80050a4 <HAL_DMA_Abort_IT+0x1b8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d02c      	beq.n	8004fb4 <HAL_DMA_Abort_IT+0xc8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a52      	ldr	r2, [pc, #328]	@ (80050a8 <HAL_DMA_Abort_IT+0x1bc>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d027      	beq.n	8004fb4 <HAL_DMA_Abort_IT+0xc8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a50      	ldr	r2, [pc, #320]	@ (80050ac <HAL_DMA_Abort_IT+0x1c0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d022      	beq.n	8004fb4 <HAL_DMA_Abort_IT+0xc8>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a4f      	ldr	r2, [pc, #316]	@ (80050b0 <HAL_DMA_Abort_IT+0x1c4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d01d      	beq.n	8004fb4 <HAL_DMA_Abort_IT+0xc8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a4d      	ldr	r2, [pc, #308]	@ (80050b4 <HAL_DMA_Abort_IT+0x1c8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d018      	beq.n	8004fb4 <HAL_DMA_Abort_IT+0xc8>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a4c      	ldr	r2, [pc, #304]	@ (80050b8 <HAL_DMA_Abort_IT+0x1cc>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d013      	beq.n	8004fb4 <HAL_DMA_Abort_IT+0xc8>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a4a      	ldr	r2, [pc, #296]	@ (80050bc <HAL_DMA_Abort_IT+0x1d0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00e      	beq.n	8004fb4 <HAL_DMA_Abort_IT+0xc8>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a49      	ldr	r2, [pc, #292]	@ (80050c0 <HAL_DMA_Abort_IT+0x1d4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d009      	beq.n	8004fb4 <HAL_DMA_Abort_IT+0xc8>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a47      	ldr	r2, [pc, #284]	@ (80050c4 <HAL_DMA_Abort_IT+0x1d8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d004      	beq.n	8004fb4 <HAL_DMA_Abort_IT+0xc8>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a46      	ldr	r2, [pc, #280]	@ (80050c8 <HAL_DMA_Abort_IT+0x1dc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d101      	bne.n	8004fb8 <HAL_DMA_Abort_IT+0xcc>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e000      	b.n	8004fba <HAL_DMA_Abort_IT+0xce>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 8086 	beq.w	80050cc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2204      	movs	r2, #4
 8004fc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a2f      	ldr	r2, [pc, #188]	@ (800508c <HAL_DMA_Abort_IT+0x1a0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d04a      	beq.n	8005068 <HAL_DMA_Abort_IT+0x17c>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a2e      	ldr	r2, [pc, #184]	@ (8005090 <HAL_DMA_Abort_IT+0x1a4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d045      	beq.n	8005068 <HAL_DMA_Abort_IT+0x17c>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a2c      	ldr	r2, [pc, #176]	@ (8005094 <HAL_DMA_Abort_IT+0x1a8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d040      	beq.n	8005068 <HAL_DMA_Abort_IT+0x17c>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a2b      	ldr	r2, [pc, #172]	@ (8005098 <HAL_DMA_Abort_IT+0x1ac>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d03b      	beq.n	8005068 <HAL_DMA_Abort_IT+0x17c>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a29      	ldr	r2, [pc, #164]	@ (800509c <HAL_DMA_Abort_IT+0x1b0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d036      	beq.n	8005068 <HAL_DMA_Abort_IT+0x17c>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a28      	ldr	r2, [pc, #160]	@ (80050a0 <HAL_DMA_Abort_IT+0x1b4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d031      	beq.n	8005068 <HAL_DMA_Abort_IT+0x17c>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a26      	ldr	r2, [pc, #152]	@ (80050a4 <HAL_DMA_Abort_IT+0x1b8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d02c      	beq.n	8005068 <HAL_DMA_Abort_IT+0x17c>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a25      	ldr	r2, [pc, #148]	@ (80050a8 <HAL_DMA_Abort_IT+0x1bc>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d027      	beq.n	8005068 <HAL_DMA_Abort_IT+0x17c>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a23      	ldr	r2, [pc, #140]	@ (80050ac <HAL_DMA_Abort_IT+0x1c0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d022      	beq.n	8005068 <HAL_DMA_Abort_IT+0x17c>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a22      	ldr	r2, [pc, #136]	@ (80050b0 <HAL_DMA_Abort_IT+0x1c4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d01d      	beq.n	8005068 <HAL_DMA_Abort_IT+0x17c>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a20      	ldr	r2, [pc, #128]	@ (80050b4 <HAL_DMA_Abort_IT+0x1c8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d018      	beq.n	8005068 <HAL_DMA_Abort_IT+0x17c>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a1f      	ldr	r2, [pc, #124]	@ (80050b8 <HAL_DMA_Abort_IT+0x1cc>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d013      	beq.n	8005068 <HAL_DMA_Abort_IT+0x17c>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1d      	ldr	r2, [pc, #116]	@ (80050bc <HAL_DMA_Abort_IT+0x1d0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00e      	beq.n	8005068 <HAL_DMA_Abort_IT+0x17c>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1c      	ldr	r2, [pc, #112]	@ (80050c0 <HAL_DMA_Abort_IT+0x1d4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d009      	beq.n	8005068 <HAL_DMA_Abort_IT+0x17c>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a1a      	ldr	r2, [pc, #104]	@ (80050c4 <HAL_DMA_Abort_IT+0x1d8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d004      	beq.n	8005068 <HAL_DMA_Abort_IT+0x17c>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a19      	ldr	r2, [pc, #100]	@ (80050c8 <HAL_DMA_Abort_IT+0x1dc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d108      	bne.n	800507a <HAL_DMA_Abort_IT+0x18e>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0201 	bic.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	e178      	b.n	800536c <HAL_DMA_Abort_IT+0x480>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0201 	bic.w	r2, r2, #1
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	e16f      	b.n	800536c <HAL_DMA_Abort_IT+0x480>
 800508c:	40020010 	.word	0x40020010
 8005090:	40020028 	.word	0x40020028
 8005094:	40020040 	.word	0x40020040
 8005098:	40020058 	.word	0x40020058
 800509c:	40020070 	.word	0x40020070
 80050a0:	40020088 	.word	0x40020088
 80050a4:	400200a0 	.word	0x400200a0
 80050a8:	400200b8 	.word	0x400200b8
 80050ac:	40020410 	.word	0x40020410
 80050b0:	40020428 	.word	0x40020428
 80050b4:	40020440 	.word	0x40020440
 80050b8:	40020458 	.word	0x40020458
 80050bc:	40020470 	.word	0x40020470
 80050c0:	40020488 	.word	0x40020488
 80050c4:	400204a0 	.word	0x400204a0
 80050c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 020e 	bic.w	r2, r2, #14
 80050da:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a6c      	ldr	r2, [pc, #432]	@ (8005294 <HAL_DMA_Abort_IT+0x3a8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d04a      	beq.n	800517c <HAL_DMA_Abort_IT+0x290>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a6b      	ldr	r2, [pc, #428]	@ (8005298 <HAL_DMA_Abort_IT+0x3ac>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d045      	beq.n	800517c <HAL_DMA_Abort_IT+0x290>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a69      	ldr	r2, [pc, #420]	@ (800529c <HAL_DMA_Abort_IT+0x3b0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d040      	beq.n	800517c <HAL_DMA_Abort_IT+0x290>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a68      	ldr	r2, [pc, #416]	@ (80052a0 <HAL_DMA_Abort_IT+0x3b4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d03b      	beq.n	800517c <HAL_DMA_Abort_IT+0x290>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a66      	ldr	r2, [pc, #408]	@ (80052a4 <HAL_DMA_Abort_IT+0x3b8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d036      	beq.n	800517c <HAL_DMA_Abort_IT+0x290>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a65      	ldr	r2, [pc, #404]	@ (80052a8 <HAL_DMA_Abort_IT+0x3bc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d031      	beq.n	800517c <HAL_DMA_Abort_IT+0x290>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a63      	ldr	r2, [pc, #396]	@ (80052ac <HAL_DMA_Abort_IT+0x3c0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d02c      	beq.n	800517c <HAL_DMA_Abort_IT+0x290>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a62      	ldr	r2, [pc, #392]	@ (80052b0 <HAL_DMA_Abort_IT+0x3c4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d027      	beq.n	800517c <HAL_DMA_Abort_IT+0x290>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a60      	ldr	r2, [pc, #384]	@ (80052b4 <HAL_DMA_Abort_IT+0x3c8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d022      	beq.n	800517c <HAL_DMA_Abort_IT+0x290>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a5f      	ldr	r2, [pc, #380]	@ (80052b8 <HAL_DMA_Abort_IT+0x3cc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d01d      	beq.n	800517c <HAL_DMA_Abort_IT+0x290>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a5d      	ldr	r2, [pc, #372]	@ (80052bc <HAL_DMA_Abort_IT+0x3d0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d018      	beq.n	800517c <HAL_DMA_Abort_IT+0x290>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a5c      	ldr	r2, [pc, #368]	@ (80052c0 <HAL_DMA_Abort_IT+0x3d4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d013      	beq.n	800517c <HAL_DMA_Abort_IT+0x290>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a5a      	ldr	r2, [pc, #360]	@ (80052c4 <HAL_DMA_Abort_IT+0x3d8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00e      	beq.n	800517c <HAL_DMA_Abort_IT+0x290>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a59      	ldr	r2, [pc, #356]	@ (80052c8 <HAL_DMA_Abort_IT+0x3dc>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d009      	beq.n	800517c <HAL_DMA_Abort_IT+0x290>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a57      	ldr	r2, [pc, #348]	@ (80052cc <HAL_DMA_Abort_IT+0x3e0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d004      	beq.n	800517c <HAL_DMA_Abort_IT+0x290>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a56      	ldr	r2, [pc, #344]	@ (80052d0 <HAL_DMA_Abort_IT+0x3e4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d108      	bne.n	800518e <HAL_DMA_Abort_IT+0x2a2>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0201 	bic.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	e007      	b.n	800519e <HAL_DMA_Abort_IT+0x2b2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0201 	bic.w	r2, r2, #1
 800519c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a3c      	ldr	r2, [pc, #240]	@ (8005294 <HAL_DMA_Abort_IT+0x3a8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d072      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a3a      	ldr	r2, [pc, #232]	@ (8005298 <HAL_DMA_Abort_IT+0x3ac>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d06d      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a39      	ldr	r2, [pc, #228]	@ (800529c <HAL_DMA_Abort_IT+0x3b0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d068      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a37      	ldr	r2, [pc, #220]	@ (80052a0 <HAL_DMA_Abort_IT+0x3b4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d063      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a36      	ldr	r2, [pc, #216]	@ (80052a4 <HAL_DMA_Abort_IT+0x3b8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d05e      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a34      	ldr	r2, [pc, #208]	@ (80052a8 <HAL_DMA_Abort_IT+0x3bc>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d059      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a33      	ldr	r2, [pc, #204]	@ (80052ac <HAL_DMA_Abort_IT+0x3c0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d054      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a31      	ldr	r2, [pc, #196]	@ (80052b0 <HAL_DMA_Abort_IT+0x3c4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d04f      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a30      	ldr	r2, [pc, #192]	@ (80052b4 <HAL_DMA_Abort_IT+0x3c8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d04a      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a2e      	ldr	r2, [pc, #184]	@ (80052b8 <HAL_DMA_Abort_IT+0x3cc>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d045      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a2d      	ldr	r2, [pc, #180]	@ (80052bc <HAL_DMA_Abort_IT+0x3d0>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d040      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a2b      	ldr	r2, [pc, #172]	@ (80052c0 <HAL_DMA_Abort_IT+0x3d4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d03b      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a2a      	ldr	r2, [pc, #168]	@ (80052c4 <HAL_DMA_Abort_IT+0x3d8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d036      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a28      	ldr	r2, [pc, #160]	@ (80052c8 <HAL_DMA_Abort_IT+0x3dc>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d031      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a27      	ldr	r2, [pc, #156]	@ (80052cc <HAL_DMA_Abort_IT+0x3e0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d02c      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a25      	ldr	r2, [pc, #148]	@ (80052d0 <HAL_DMA_Abort_IT+0x3e4>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d027      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a24      	ldr	r2, [pc, #144]	@ (80052d4 <HAL_DMA_Abort_IT+0x3e8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d022      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a22      	ldr	r2, [pc, #136]	@ (80052d8 <HAL_DMA_Abort_IT+0x3ec>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d01d      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a21      	ldr	r2, [pc, #132]	@ (80052dc <HAL_DMA_Abort_IT+0x3f0>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d018      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1f      	ldr	r2, [pc, #124]	@ (80052e0 <HAL_DMA_Abort_IT+0x3f4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d013      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1e      	ldr	r2, [pc, #120]	@ (80052e4 <HAL_DMA_Abort_IT+0x3f8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00e      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1c      	ldr	r2, [pc, #112]	@ (80052e8 <HAL_DMA_Abort_IT+0x3fc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d009      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1b      	ldr	r2, [pc, #108]	@ (80052ec <HAL_DMA_Abort_IT+0x400>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d004      	beq.n	800528e <HAL_DMA_Abort_IT+0x3a2>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a19      	ldr	r2, [pc, #100]	@ (80052f0 <HAL_DMA_Abort_IT+0x404>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d132      	bne.n	80052f4 <HAL_DMA_Abort_IT+0x408>
 800528e:	2301      	movs	r3, #1
 8005290:	e031      	b.n	80052f6 <HAL_DMA_Abort_IT+0x40a>
 8005292:	bf00      	nop
 8005294:	40020010 	.word	0x40020010
 8005298:	40020028 	.word	0x40020028
 800529c:	40020040 	.word	0x40020040
 80052a0:	40020058 	.word	0x40020058
 80052a4:	40020070 	.word	0x40020070
 80052a8:	40020088 	.word	0x40020088
 80052ac:	400200a0 	.word	0x400200a0
 80052b0:	400200b8 	.word	0x400200b8
 80052b4:	40020410 	.word	0x40020410
 80052b8:	40020428 	.word	0x40020428
 80052bc:	40020440 	.word	0x40020440
 80052c0:	40020458 	.word	0x40020458
 80052c4:	40020470 	.word	0x40020470
 80052c8:	40020488 	.word	0x40020488
 80052cc:	400204a0 	.word	0x400204a0
 80052d0:	400204b8 	.word	0x400204b8
 80052d4:	58025408 	.word	0x58025408
 80052d8:	5802541c 	.word	0x5802541c
 80052dc:	58025430 	.word	0x58025430
 80052e0:	58025444 	.word	0x58025444
 80052e4:	58025458 	.word	0x58025458
 80052e8:	5802546c 	.word	0x5802546c
 80052ec:	58025480 	.word	0x58025480
 80052f0:	58025494 	.word	0x58025494
 80052f4:	2300      	movs	r3, #0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d028      	beq.n	800534c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005304:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005308:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800530e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005314:	f003 031f 	and.w	r3, r3, #31
 8005318:	2201      	movs	r2, #1
 800531a:	409a      	lsls	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005328:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00c      	beq.n	800534c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800533c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005340:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800534a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop

08005378 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08a      	sub	sp, #40	@ 0x28
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005380:	2300      	movs	r3, #0
 8005382:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005384:	4b67      	ldr	r3, [pc, #412]	@ (8005524 <HAL_DMA_IRQHandler+0x1ac>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a67      	ldr	r2, [pc, #412]	@ (8005528 <HAL_DMA_IRQHandler+0x1b0>)
 800538a:	fba2 2303 	umull	r2, r3, r2, r3
 800538e:	0a9b      	lsrs	r3, r3, #10
 8005390:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005396:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a5f      	ldr	r2, [pc, #380]	@ (800552c <HAL_DMA_IRQHandler+0x1b4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d04a      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a5d      	ldr	r2, [pc, #372]	@ (8005530 <HAL_DMA_IRQHandler+0x1b8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d045      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a5c      	ldr	r2, [pc, #368]	@ (8005534 <HAL_DMA_IRQHandler+0x1bc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d040      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a5a      	ldr	r2, [pc, #360]	@ (8005538 <HAL_DMA_IRQHandler+0x1c0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d03b      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a59      	ldr	r2, [pc, #356]	@ (800553c <HAL_DMA_IRQHandler+0x1c4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d036      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a57      	ldr	r2, [pc, #348]	@ (8005540 <HAL_DMA_IRQHandler+0x1c8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d031      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a56      	ldr	r2, [pc, #344]	@ (8005544 <HAL_DMA_IRQHandler+0x1cc>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d02c      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a54      	ldr	r2, [pc, #336]	@ (8005548 <HAL_DMA_IRQHandler+0x1d0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d027      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a53      	ldr	r2, [pc, #332]	@ (800554c <HAL_DMA_IRQHandler+0x1d4>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d022      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a51      	ldr	r2, [pc, #324]	@ (8005550 <HAL_DMA_IRQHandler+0x1d8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d01d      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a50      	ldr	r2, [pc, #320]	@ (8005554 <HAL_DMA_IRQHandler+0x1dc>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d018      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a4e      	ldr	r2, [pc, #312]	@ (8005558 <HAL_DMA_IRQHandler+0x1e0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d013      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a4d      	ldr	r2, [pc, #308]	@ (800555c <HAL_DMA_IRQHandler+0x1e4>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00e      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a4b      	ldr	r2, [pc, #300]	@ (8005560 <HAL_DMA_IRQHandler+0x1e8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d009      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a4a      	ldr	r2, [pc, #296]	@ (8005564 <HAL_DMA_IRQHandler+0x1ec>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d004      	beq.n	800544a <HAL_DMA_IRQHandler+0xd2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a48      	ldr	r2, [pc, #288]	@ (8005568 <HAL_DMA_IRQHandler+0x1f0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d101      	bne.n	800544e <HAL_DMA_IRQHandler+0xd6>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <HAL_DMA_IRQHandler+0xd8>
 800544e:	2300      	movs	r3, #0
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 842b 	beq.w	8005cac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800545a:	f003 031f 	and.w	r3, r3, #31
 800545e:	2208      	movs	r2, #8
 8005460:	409a      	lsls	r2, r3
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	4013      	ands	r3, r2
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 80a2 	beq.w	80055b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a2e      	ldr	r2, [pc, #184]	@ (800552c <HAL_DMA_IRQHandler+0x1b4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d04a      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a2d      	ldr	r2, [pc, #180]	@ (8005530 <HAL_DMA_IRQHandler+0x1b8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d045      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a2b      	ldr	r2, [pc, #172]	@ (8005534 <HAL_DMA_IRQHandler+0x1bc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d040      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a2a      	ldr	r2, [pc, #168]	@ (8005538 <HAL_DMA_IRQHandler+0x1c0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d03b      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a28      	ldr	r2, [pc, #160]	@ (800553c <HAL_DMA_IRQHandler+0x1c4>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d036      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a27      	ldr	r2, [pc, #156]	@ (8005540 <HAL_DMA_IRQHandler+0x1c8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d031      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a25      	ldr	r2, [pc, #148]	@ (8005544 <HAL_DMA_IRQHandler+0x1cc>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d02c      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a24      	ldr	r2, [pc, #144]	@ (8005548 <HAL_DMA_IRQHandler+0x1d0>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d027      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a22      	ldr	r2, [pc, #136]	@ (800554c <HAL_DMA_IRQHandler+0x1d4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d022      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a21      	ldr	r2, [pc, #132]	@ (8005550 <HAL_DMA_IRQHandler+0x1d8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d01d      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005554 <HAL_DMA_IRQHandler+0x1dc>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d018      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a1e      	ldr	r2, [pc, #120]	@ (8005558 <HAL_DMA_IRQHandler+0x1e0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d013      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a1c      	ldr	r2, [pc, #112]	@ (800555c <HAL_DMA_IRQHandler+0x1e4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00e      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005560 <HAL_DMA_IRQHandler+0x1e8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d009      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a19      	ldr	r2, [pc, #100]	@ (8005564 <HAL_DMA_IRQHandler+0x1ec>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d004      	beq.n	800550c <HAL_DMA_IRQHandler+0x194>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a18      	ldr	r2, [pc, #96]	@ (8005568 <HAL_DMA_IRQHandler+0x1f0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d12f      	bne.n	800556c <HAL_DMA_IRQHandler+0x1f4>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0304 	and.w	r3, r3, #4
 8005516:	2b00      	cmp	r3, #0
 8005518:	bf14      	ite	ne
 800551a:	2301      	movne	r3, #1
 800551c:	2300      	moveq	r3, #0
 800551e:	b2db      	uxtb	r3, r3
 8005520:	e02e      	b.n	8005580 <HAL_DMA_IRQHandler+0x208>
 8005522:	bf00      	nop
 8005524:	24000000 	.word	0x24000000
 8005528:	1b4e81b5 	.word	0x1b4e81b5
 800552c:	40020010 	.word	0x40020010
 8005530:	40020028 	.word	0x40020028
 8005534:	40020040 	.word	0x40020040
 8005538:	40020058 	.word	0x40020058
 800553c:	40020070 	.word	0x40020070
 8005540:	40020088 	.word	0x40020088
 8005544:	400200a0 	.word	0x400200a0
 8005548:	400200b8 	.word	0x400200b8
 800554c:	40020410 	.word	0x40020410
 8005550:	40020428 	.word	0x40020428
 8005554:	40020440 	.word	0x40020440
 8005558:	40020458 	.word	0x40020458
 800555c:	40020470 	.word	0x40020470
 8005560:	40020488 	.word	0x40020488
 8005564:	400204a0 	.word	0x400204a0
 8005568:	400204b8 	.word	0x400204b8
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	bf14      	ite	ne
 800557a:	2301      	movne	r3, #1
 800557c:	2300      	moveq	r3, #0
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d015      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0204 	bic.w	r2, r2, #4
 8005592:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005598:	f003 031f 	and.w	r3, r3, #31
 800559c:	2208      	movs	r2, #8
 800559e:	409a      	lsls	r2, r3
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055a8:	f043 0201 	orr.w	r2, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b4:	f003 031f 	and.w	r3, r3, #31
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	fa22 f303 	lsr.w	r3, r2, r3
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d06e      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a69      	ldr	r2, [pc, #420]	@ (8005770 <HAL_DMA_IRQHandler+0x3f8>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d04a      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a67      	ldr	r2, [pc, #412]	@ (8005774 <HAL_DMA_IRQHandler+0x3fc>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d045      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a66      	ldr	r2, [pc, #408]	@ (8005778 <HAL_DMA_IRQHandler+0x400>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d040      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a64      	ldr	r2, [pc, #400]	@ (800577c <HAL_DMA_IRQHandler+0x404>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d03b      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a63      	ldr	r2, [pc, #396]	@ (8005780 <HAL_DMA_IRQHandler+0x408>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d036      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a61      	ldr	r2, [pc, #388]	@ (8005784 <HAL_DMA_IRQHandler+0x40c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d031      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a60      	ldr	r2, [pc, #384]	@ (8005788 <HAL_DMA_IRQHandler+0x410>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d02c      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a5e      	ldr	r2, [pc, #376]	@ (800578c <HAL_DMA_IRQHandler+0x414>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d027      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a5d      	ldr	r2, [pc, #372]	@ (8005790 <HAL_DMA_IRQHandler+0x418>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d022      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a5b      	ldr	r2, [pc, #364]	@ (8005794 <HAL_DMA_IRQHandler+0x41c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d01d      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a5a      	ldr	r2, [pc, #360]	@ (8005798 <HAL_DMA_IRQHandler+0x420>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d018      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a58      	ldr	r2, [pc, #352]	@ (800579c <HAL_DMA_IRQHandler+0x424>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d013      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a57      	ldr	r2, [pc, #348]	@ (80057a0 <HAL_DMA_IRQHandler+0x428>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00e      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a55      	ldr	r2, [pc, #340]	@ (80057a4 <HAL_DMA_IRQHandler+0x42c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d009      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a54      	ldr	r2, [pc, #336]	@ (80057a8 <HAL_DMA_IRQHandler+0x430>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d004      	beq.n	8005666 <HAL_DMA_IRQHandler+0x2ee>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a52      	ldr	r2, [pc, #328]	@ (80057ac <HAL_DMA_IRQHandler+0x434>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d10a      	bne.n	800567c <HAL_DMA_IRQHandler+0x304>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005670:	2b00      	cmp	r3, #0
 8005672:	bf14      	ite	ne
 8005674:	2301      	movne	r3, #1
 8005676:	2300      	moveq	r3, #0
 8005678:	b2db      	uxtb	r3, r3
 800567a:	e003      	b.n	8005684 <HAL_DMA_IRQHandler+0x30c>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2300      	movs	r3, #0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00d      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800568c:	f003 031f 	and.w	r3, r3, #31
 8005690:	2201      	movs	r2, #1
 8005692:	409a      	lsls	r2, r3
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800569c:	f043 0202 	orr.w	r2, r3, #2
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056a8:	f003 031f 	and.w	r3, r3, #31
 80056ac:	2204      	movs	r2, #4
 80056ae:	409a      	lsls	r2, r3
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	4013      	ands	r3, r2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 808f 	beq.w	80057d8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a2c      	ldr	r2, [pc, #176]	@ (8005770 <HAL_DMA_IRQHandler+0x3f8>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d04a      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a2a      	ldr	r2, [pc, #168]	@ (8005774 <HAL_DMA_IRQHandler+0x3fc>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d045      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a29      	ldr	r2, [pc, #164]	@ (8005778 <HAL_DMA_IRQHandler+0x400>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d040      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a27      	ldr	r2, [pc, #156]	@ (800577c <HAL_DMA_IRQHandler+0x404>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d03b      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a26      	ldr	r2, [pc, #152]	@ (8005780 <HAL_DMA_IRQHandler+0x408>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d036      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a24      	ldr	r2, [pc, #144]	@ (8005784 <HAL_DMA_IRQHandler+0x40c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d031      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a23      	ldr	r2, [pc, #140]	@ (8005788 <HAL_DMA_IRQHandler+0x410>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d02c      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a21      	ldr	r2, [pc, #132]	@ (800578c <HAL_DMA_IRQHandler+0x414>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d027      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a20      	ldr	r2, [pc, #128]	@ (8005790 <HAL_DMA_IRQHandler+0x418>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d022      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a1e      	ldr	r2, [pc, #120]	@ (8005794 <HAL_DMA_IRQHandler+0x41c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d01d      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1d      	ldr	r2, [pc, #116]	@ (8005798 <HAL_DMA_IRQHandler+0x420>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d018      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a1b      	ldr	r2, [pc, #108]	@ (800579c <HAL_DMA_IRQHandler+0x424>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d013      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a1a      	ldr	r2, [pc, #104]	@ (80057a0 <HAL_DMA_IRQHandler+0x428>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00e      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a18      	ldr	r2, [pc, #96]	@ (80057a4 <HAL_DMA_IRQHandler+0x42c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d009      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a17      	ldr	r2, [pc, #92]	@ (80057a8 <HAL_DMA_IRQHandler+0x430>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d004      	beq.n	800575a <HAL_DMA_IRQHandler+0x3e2>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a15      	ldr	r2, [pc, #84]	@ (80057ac <HAL_DMA_IRQHandler+0x434>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d12a      	bne.n	80057b0 <HAL_DMA_IRQHandler+0x438>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	bf14      	ite	ne
 8005768:	2301      	movne	r3, #1
 800576a:	2300      	moveq	r3, #0
 800576c:	b2db      	uxtb	r3, r3
 800576e:	e023      	b.n	80057b8 <HAL_DMA_IRQHandler+0x440>
 8005770:	40020010 	.word	0x40020010
 8005774:	40020028 	.word	0x40020028
 8005778:	40020040 	.word	0x40020040
 800577c:	40020058 	.word	0x40020058
 8005780:	40020070 	.word	0x40020070
 8005784:	40020088 	.word	0x40020088
 8005788:	400200a0 	.word	0x400200a0
 800578c:	400200b8 	.word	0x400200b8
 8005790:	40020410 	.word	0x40020410
 8005794:	40020428 	.word	0x40020428
 8005798:	40020440 	.word	0x40020440
 800579c:	40020458 	.word	0x40020458
 80057a0:	40020470 	.word	0x40020470
 80057a4:	40020488 	.word	0x40020488
 80057a8:	400204a0 	.word	0x400204a0
 80057ac:	400204b8 	.word	0x400204b8
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2300      	movs	r3, #0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00d      	beq.n	80057d8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057c0:	f003 031f 	and.w	r3, r3, #31
 80057c4:	2204      	movs	r2, #4
 80057c6:	409a      	lsls	r2, r3
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057d0:	f043 0204 	orr.w	r2, r3, #4
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057dc:	f003 031f 	and.w	r3, r3, #31
 80057e0:	2210      	movs	r2, #16
 80057e2:	409a      	lsls	r2, r3
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	4013      	ands	r3, r2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 80a6 	beq.w	800593a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a85      	ldr	r2, [pc, #532]	@ (8005a08 <HAL_DMA_IRQHandler+0x690>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d04a      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a83      	ldr	r2, [pc, #524]	@ (8005a0c <HAL_DMA_IRQHandler+0x694>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d045      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a82      	ldr	r2, [pc, #520]	@ (8005a10 <HAL_DMA_IRQHandler+0x698>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d040      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a80      	ldr	r2, [pc, #512]	@ (8005a14 <HAL_DMA_IRQHandler+0x69c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d03b      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a7f      	ldr	r2, [pc, #508]	@ (8005a18 <HAL_DMA_IRQHandler+0x6a0>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d036      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a7d      	ldr	r2, [pc, #500]	@ (8005a1c <HAL_DMA_IRQHandler+0x6a4>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d031      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a7c      	ldr	r2, [pc, #496]	@ (8005a20 <HAL_DMA_IRQHandler+0x6a8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d02c      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a7a      	ldr	r2, [pc, #488]	@ (8005a24 <HAL_DMA_IRQHandler+0x6ac>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d027      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a79      	ldr	r2, [pc, #484]	@ (8005a28 <HAL_DMA_IRQHandler+0x6b0>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d022      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a77      	ldr	r2, [pc, #476]	@ (8005a2c <HAL_DMA_IRQHandler+0x6b4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d01d      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a76      	ldr	r2, [pc, #472]	@ (8005a30 <HAL_DMA_IRQHandler+0x6b8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d018      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a74      	ldr	r2, [pc, #464]	@ (8005a34 <HAL_DMA_IRQHandler+0x6bc>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d013      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a73      	ldr	r2, [pc, #460]	@ (8005a38 <HAL_DMA_IRQHandler+0x6c0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00e      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a71      	ldr	r2, [pc, #452]	@ (8005a3c <HAL_DMA_IRQHandler+0x6c4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d009      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a70      	ldr	r2, [pc, #448]	@ (8005a40 <HAL_DMA_IRQHandler+0x6c8>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d004      	beq.n	800588e <HAL_DMA_IRQHandler+0x516>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a6e      	ldr	r2, [pc, #440]	@ (8005a44 <HAL_DMA_IRQHandler+0x6cc>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d10a      	bne.n	80058a4 <HAL_DMA_IRQHandler+0x52c>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	2b00      	cmp	r3, #0
 800589a:	bf14      	ite	ne
 800589c:	2301      	movne	r3, #1
 800589e:	2300      	moveq	r3, #0
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	e009      	b.n	80058b8 <HAL_DMA_IRQHandler+0x540>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	bf14      	ite	ne
 80058b2:	2301      	movne	r3, #1
 80058b4:	2300      	moveq	r3, #0
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d03e      	beq.n	800593a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c0:	f003 031f 	and.w	r3, r3, #31
 80058c4:	2210      	movs	r2, #16
 80058c6:	409a      	lsls	r2, r3
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d018      	beq.n	800590c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d108      	bne.n	80058fa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d024      	beq.n	800593a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	4798      	blx	r3
 80058f8:	e01f      	b.n	800593a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d01b      	beq.n	800593a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	4798      	blx	r3
 800590a:	e016      	b.n	800593a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005916:	2b00      	cmp	r3, #0
 8005918:	d107      	bne.n	800592a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0208 	bic.w	r2, r2, #8
 8005928:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800593e:	f003 031f 	and.w	r3, r3, #31
 8005942:	2220      	movs	r2, #32
 8005944:	409a      	lsls	r2, r3
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	4013      	ands	r3, r2
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 8110 	beq.w	8005b70 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a2c      	ldr	r2, [pc, #176]	@ (8005a08 <HAL_DMA_IRQHandler+0x690>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d04a      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a2b      	ldr	r2, [pc, #172]	@ (8005a0c <HAL_DMA_IRQHandler+0x694>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d045      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a29      	ldr	r2, [pc, #164]	@ (8005a10 <HAL_DMA_IRQHandler+0x698>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d040      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a28      	ldr	r2, [pc, #160]	@ (8005a14 <HAL_DMA_IRQHandler+0x69c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d03b      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a26      	ldr	r2, [pc, #152]	@ (8005a18 <HAL_DMA_IRQHandler+0x6a0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d036      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a25      	ldr	r2, [pc, #148]	@ (8005a1c <HAL_DMA_IRQHandler+0x6a4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d031      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a23      	ldr	r2, [pc, #140]	@ (8005a20 <HAL_DMA_IRQHandler+0x6a8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d02c      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a22      	ldr	r2, [pc, #136]	@ (8005a24 <HAL_DMA_IRQHandler+0x6ac>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d027      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a20      	ldr	r2, [pc, #128]	@ (8005a28 <HAL_DMA_IRQHandler+0x6b0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d022      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a1f      	ldr	r2, [pc, #124]	@ (8005a2c <HAL_DMA_IRQHandler+0x6b4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d01d      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a30 <HAL_DMA_IRQHandler+0x6b8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d018      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005a34 <HAL_DMA_IRQHandler+0x6bc>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d013      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a1a      	ldr	r2, [pc, #104]	@ (8005a38 <HAL_DMA_IRQHandler+0x6c0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00e      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a19      	ldr	r2, [pc, #100]	@ (8005a3c <HAL_DMA_IRQHandler+0x6c4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d009      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a17      	ldr	r2, [pc, #92]	@ (8005a40 <HAL_DMA_IRQHandler+0x6c8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d004      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x678>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a16      	ldr	r2, [pc, #88]	@ (8005a44 <HAL_DMA_IRQHandler+0x6cc>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d12b      	bne.n	8005a48 <HAL_DMA_IRQHandler+0x6d0>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0310 	and.w	r3, r3, #16
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	bf14      	ite	ne
 80059fe:	2301      	movne	r3, #1
 8005a00:	2300      	moveq	r3, #0
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	e02a      	b.n	8005a5c <HAL_DMA_IRQHandler+0x6e4>
 8005a06:	bf00      	nop
 8005a08:	40020010 	.word	0x40020010
 8005a0c:	40020028 	.word	0x40020028
 8005a10:	40020040 	.word	0x40020040
 8005a14:	40020058 	.word	0x40020058
 8005a18:	40020070 	.word	0x40020070
 8005a1c:	40020088 	.word	0x40020088
 8005a20:	400200a0 	.word	0x400200a0
 8005a24:	400200b8 	.word	0x400200b8
 8005a28:	40020410 	.word	0x40020410
 8005a2c:	40020428 	.word	0x40020428
 8005a30:	40020440 	.word	0x40020440
 8005a34:	40020458 	.word	0x40020458
 8005a38:	40020470 	.word	0x40020470
 8005a3c:	40020488 	.word	0x40020488
 8005a40:	400204a0 	.word	0x400204a0
 8005a44:	400204b8 	.word	0x400204b8
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	bf14      	ite	ne
 8005a56:	2301      	movne	r3, #1
 8005a58:	2300      	moveq	r3, #0
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 8087 	beq.w	8005b70 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a66:	f003 031f 	and.w	r3, r3, #31
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	409a      	lsls	r2, r3
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d139      	bne.n	8005af2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0216 	bic.w	r2, r2, #22
 8005a8c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	695a      	ldr	r2, [r3, #20]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a9c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d103      	bne.n	8005aae <HAL_DMA_IRQHandler+0x736>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d007      	beq.n	8005abe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0208 	bic.w	r2, r2, #8
 8005abc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac2:	f003 031f 	and.w	r3, r3, #31
 8005ac6:	223f      	movs	r2, #63	@ 0x3f
 8005ac8:	409a      	lsls	r2, r3
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 834a 	beq.w	800617c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	4798      	blx	r3
          }
          return;
 8005af0:	e344      	b.n	800617c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d018      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d108      	bne.n	8005b20 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d02c      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	4798      	blx	r3
 8005b1e:	e027      	b.n	8005b70 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d023      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	4798      	blx	r3
 8005b30:	e01e      	b.n	8005b70 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10f      	bne.n	8005b60 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0210 	bic.w	r2, r2, #16
 8005b4e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8306 	beq.w	8006186 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 8088 	beq.w	8005c98 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2204      	movs	r2, #4
 8005b8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a7a      	ldr	r2, [pc, #488]	@ (8005d80 <HAL_DMA_IRQHandler+0xa08>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d04a      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a79      	ldr	r2, [pc, #484]	@ (8005d84 <HAL_DMA_IRQHandler+0xa0c>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d045      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a77      	ldr	r2, [pc, #476]	@ (8005d88 <HAL_DMA_IRQHandler+0xa10>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d040      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a76      	ldr	r2, [pc, #472]	@ (8005d8c <HAL_DMA_IRQHandler+0xa14>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d03b      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a74      	ldr	r2, [pc, #464]	@ (8005d90 <HAL_DMA_IRQHandler+0xa18>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d036      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a73      	ldr	r2, [pc, #460]	@ (8005d94 <HAL_DMA_IRQHandler+0xa1c>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d031      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a71      	ldr	r2, [pc, #452]	@ (8005d98 <HAL_DMA_IRQHandler+0xa20>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d02c      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a70      	ldr	r2, [pc, #448]	@ (8005d9c <HAL_DMA_IRQHandler+0xa24>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d027      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a6e      	ldr	r2, [pc, #440]	@ (8005da0 <HAL_DMA_IRQHandler+0xa28>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d022      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a6d      	ldr	r2, [pc, #436]	@ (8005da4 <HAL_DMA_IRQHandler+0xa2c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d01d      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a6b      	ldr	r2, [pc, #428]	@ (8005da8 <HAL_DMA_IRQHandler+0xa30>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d018      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a6a      	ldr	r2, [pc, #424]	@ (8005dac <HAL_DMA_IRQHandler+0xa34>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d013      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a68      	ldr	r2, [pc, #416]	@ (8005db0 <HAL_DMA_IRQHandler+0xa38>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00e      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a67      	ldr	r2, [pc, #412]	@ (8005db4 <HAL_DMA_IRQHandler+0xa3c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d009      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a65      	ldr	r2, [pc, #404]	@ (8005db8 <HAL_DMA_IRQHandler+0xa40>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d004      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x8b8>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a64      	ldr	r2, [pc, #400]	@ (8005dbc <HAL_DMA_IRQHandler+0xa44>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d108      	bne.n	8005c42 <HAL_DMA_IRQHandler+0x8ca>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0201 	bic.w	r2, r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]
 8005c40:	e007      	b.n	8005c52 <HAL_DMA_IRQHandler+0x8da>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 0201 	bic.w	r2, r2, #1
 8005c50:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3301      	adds	r3, #1
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d307      	bcc.n	8005c6e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1f2      	bne.n	8005c52 <HAL_DMA_IRQHandler+0x8da>
 8005c6c:	e000      	b.n	8005c70 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005c6e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d004      	beq.n	8005c88 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2203      	movs	r2, #3
 8005c82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005c86:	e003      	b.n	8005c90 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 8272 	beq.w	8006186 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	4798      	blx	r3
 8005caa:	e26c      	b.n	8006186 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a43      	ldr	r2, [pc, #268]	@ (8005dc0 <HAL_DMA_IRQHandler+0xa48>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d022      	beq.n	8005cfc <HAL_DMA_IRQHandler+0x984>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a42      	ldr	r2, [pc, #264]	@ (8005dc4 <HAL_DMA_IRQHandler+0xa4c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d01d      	beq.n	8005cfc <HAL_DMA_IRQHandler+0x984>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a40      	ldr	r2, [pc, #256]	@ (8005dc8 <HAL_DMA_IRQHandler+0xa50>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d018      	beq.n	8005cfc <HAL_DMA_IRQHandler+0x984>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a3f      	ldr	r2, [pc, #252]	@ (8005dcc <HAL_DMA_IRQHandler+0xa54>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d013      	beq.n	8005cfc <HAL_DMA_IRQHandler+0x984>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a3d      	ldr	r2, [pc, #244]	@ (8005dd0 <HAL_DMA_IRQHandler+0xa58>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d00e      	beq.n	8005cfc <HAL_DMA_IRQHandler+0x984>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a3c      	ldr	r2, [pc, #240]	@ (8005dd4 <HAL_DMA_IRQHandler+0xa5c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d009      	beq.n	8005cfc <HAL_DMA_IRQHandler+0x984>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a3a      	ldr	r2, [pc, #232]	@ (8005dd8 <HAL_DMA_IRQHandler+0xa60>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d004      	beq.n	8005cfc <HAL_DMA_IRQHandler+0x984>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a39      	ldr	r2, [pc, #228]	@ (8005ddc <HAL_DMA_IRQHandler+0xa64>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d101      	bne.n	8005d00 <HAL_DMA_IRQHandler+0x988>
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e000      	b.n	8005d02 <HAL_DMA_IRQHandler+0x98a>
 8005d00:	2300      	movs	r3, #0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 823f 	beq.w	8006186 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d14:	f003 031f 	and.w	r3, r3, #31
 8005d18:	2204      	movs	r2, #4
 8005d1a:	409a      	lsls	r2, r3
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 80cd 	beq.w	8005ec0 <HAL_DMA_IRQHandler+0xb48>
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 80c7 	beq.w	8005ec0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d36:	f003 031f 	and.w	r3, r3, #31
 8005d3a:	2204      	movs	r2, #4
 8005d3c:	409a      	lsls	r2, r3
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d049      	beq.n	8005de0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d109      	bne.n	8005d6a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 8210 	beq.w	8006180 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d68:	e20a      	b.n	8006180 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 8206 	beq.w	8006180 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d7c:	e200      	b.n	8006180 <HAL_DMA_IRQHandler+0xe08>
 8005d7e:	bf00      	nop
 8005d80:	40020010 	.word	0x40020010
 8005d84:	40020028 	.word	0x40020028
 8005d88:	40020040 	.word	0x40020040
 8005d8c:	40020058 	.word	0x40020058
 8005d90:	40020070 	.word	0x40020070
 8005d94:	40020088 	.word	0x40020088
 8005d98:	400200a0 	.word	0x400200a0
 8005d9c:	400200b8 	.word	0x400200b8
 8005da0:	40020410 	.word	0x40020410
 8005da4:	40020428 	.word	0x40020428
 8005da8:	40020440 	.word	0x40020440
 8005dac:	40020458 	.word	0x40020458
 8005db0:	40020470 	.word	0x40020470
 8005db4:	40020488 	.word	0x40020488
 8005db8:	400204a0 	.word	0x400204a0
 8005dbc:	400204b8 	.word	0x400204b8
 8005dc0:	58025408 	.word	0x58025408
 8005dc4:	5802541c 	.word	0x5802541c
 8005dc8:	58025430 	.word	0x58025430
 8005dcc:	58025444 	.word	0x58025444
 8005dd0:	58025458 	.word	0x58025458
 8005dd4:	5802546c 	.word	0x5802546c
 8005dd8:	58025480 	.word	0x58025480
 8005ddc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d160      	bne.n	8005eac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a7f      	ldr	r2, [pc, #508]	@ (8005fec <HAL_DMA_IRQHandler+0xc74>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d04a      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a7d      	ldr	r2, [pc, #500]	@ (8005ff0 <HAL_DMA_IRQHandler+0xc78>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d045      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a7c      	ldr	r2, [pc, #496]	@ (8005ff4 <HAL_DMA_IRQHandler+0xc7c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d040      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a7a      	ldr	r2, [pc, #488]	@ (8005ff8 <HAL_DMA_IRQHandler+0xc80>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d03b      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a79      	ldr	r2, [pc, #484]	@ (8005ffc <HAL_DMA_IRQHandler+0xc84>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d036      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a77      	ldr	r2, [pc, #476]	@ (8006000 <HAL_DMA_IRQHandler+0xc88>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d031      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a76      	ldr	r2, [pc, #472]	@ (8006004 <HAL_DMA_IRQHandler+0xc8c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d02c      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a74      	ldr	r2, [pc, #464]	@ (8006008 <HAL_DMA_IRQHandler+0xc90>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d027      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a73      	ldr	r2, [pc, #460]	@ (800600c <HAL_DMA_IRQHandler+0xc94>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d022      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a71      	ldr	r2, [pc, #452]	@ (8006010 <HAL_DMA_IRQHandler+0xc98>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d01d      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a70      	ldr	r2, [pc, #448]	@ (8006014 <HAL_DMA_IRQHandler+0xc9c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d018      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a6e      	ldr	r2, [pc, #440]	@ (8006018 <HAL_DMA_IRQHandler+0xca0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d013      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a6d      	ldr	r2, [pc, #436]	@ (800601c <HAL_DMA_IRQHandler+0xca4>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00e      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a6b      	ldr	r2, [pc, #428]	@ (8006020 <HAL_DMA_IRQHandler+0xca8>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d009      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a6a      	ldr	r2, [pc, #424]	@ (8006024 <HAL_DMA_IRQHandler+0xcac>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d004      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xb12>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a68      	ldr	r2, [pc, #416]	@ (8006028 <HAL_DMA_IRQHandler+0xcb0>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d108      	bne.n	8005e9c <HAL_DMA_IRQHandler+0xb24>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0208 	bic.w	r2, r2, #8
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	e007      	b.n	8005eac <HAL_DMA_IRQHandler+0xb34>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 0204 	bic.w	r2, r2, #4
 8005eaa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 8165 	beq.w	8006180 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ebe:	e15f      	b.n	8006180 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ec4:	f003 031f 	and.w	r3, r3, #31
 8005ec8:	2202      	movs	r2, #2
 8005eca:	409a      	lsls	r2, r3
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	4013      	ands	r3, r2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 80c5 	beq.w	8006060 <HAL_DMA_IRQHandler+0xce8>
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 80bf 	beq.w	8006060 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ee6:	f003 031f 	and.w	r3, r3, #31
 8005eea:	2202      	movs	r2, #2
 8005eec:	409a      	lsls	r2, r3
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d018      	beq.n	8005f2e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d109      	bne.n	8005f1a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 813a 	beq.w	8006184 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f18:	e134      	b.n	8006184 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 8130 	beq.w	8006184 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f2c:	e12a      	b.n	8006184 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f003 0320 	and.w	r3, r3, #32
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f040 8089 	bne.w	800604c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a2b      	ldr	r2, [pc, #172]	@ (8005fec <HAL_DMA_IRQHandler+0xc74>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d04a      	beq.n	8005fda <HAL_DMA_IRQHandler+0xc62>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a29      	ldr	r2, [pc, #164]	@ (8005ff0 <HAL_DMA_IRQHandler+0xc78>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d045      	beq.n	8005fda <HAL_DMA_IRQHandler+0xc62>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a28      	ldr	r2, [pc, #160]	@ (8005ff4 <HAL_DMA_IRQHandler+0xc7c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d040      	beq.n	8005fda <HAL_DMA_IRQHandler+0xc62>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a26      	ldr	r2, [pc, #152]	@ (8005ff8 <HAL_DMA_IRQHandler+0xc80>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d03b      	beq.n	8005fda <HAL_DMA_IRQHandler+0xc62>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a25      	ldr	r2, [pc, #148]	@ (8005ffc <HAL_DMA_IRQHandler+0xc84>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d036      	beq.n	8005fda <HAL_DMA_IRQHandler+0xc62>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a23      	ldr	r2, [pc, #140]	@ (8006000 <HAL_DMA_IRQHandler+0xc88>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d031      	beq.n	8005fda <HAL_DMA_IRQHandler+0xc62>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a22      	ldr	r2, [pc, #136]	@ (8006004 <HAL_DMA_IRQHandler+0xc8c>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d02c      	beq.n	8005fda <HAL_DMA_IRQHandler+0xc62>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a20      	ldr	r2, [pc, #128]	@ (8006008 <HAL_DMA_IRQHandler+0xc90>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d027      	beq.n	8005fda <HAL_DMA_IRQHandler+0xc62>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800600c <HAL_DMA_IRQHandler+0xc94>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d022      	beq.n	8005fda <HAL_DMA_IRQHandler+0xc62>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a1d      	ldr	r2, [pc, #116]	@ (8006010 <HAL_DMA_IRQHandler+0xc98>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d01d      	beq.n	8005fda <HAL_DMA_IRQHandler+0xc62>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8006014 <HAL_DMA_IRQHandler+0xc9c>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d018      	beq.n	8005fda <HAL_DMA_IRQHandler+0xc62>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1a      	ldr	r2, [pc, #104]	@ (8006018 <HAL_DMA_IRQHandler+0xca0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d013      	beq.n	8005fda <HAL_DMA_IRQHandler+0xc62>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a19      	ldr	r2, [pc, #100]	@ (800601c <HAL_DMA_IRQHandler+0xca4>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d00e      	beq.n	8005fda <HAL_DMA_IRQHandler+0xc62>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a17      	ldr	r2, [pc, #92]	@ (8006020 <HAL_DMA_IRQHandler+0xca8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d009      	beq.n	8005fda <HAL_DMA_IRQHandler+0xc62>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a16      	ldr	r2, [pc, #88]	@ (8006024 <HAL_DMA_IRQHandler+0xcac>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d004      	beq.n	8005fda <HAL_DMA_IRQHandler+0xc62>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a14      	ldr	r2, [pc, #80]	@ (8006028 <HAL_DMA_IRQHandler+0xcb0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d128      	bne.n	800602c <HAL_DMA_IRQHandler+0xcb4>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0214 	bic.w	r2, r2, #20
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	e027      	b.n	800603c <HAL_DMA_IRQHandler+0xcc4>
 8005fec:	40020010 	.word	0x40020010
 8005ff0:	40020028 	.word	0x40020028
 8005ff4:	40020040 	.word	0x40020040
 8005ff8:	40020058 	.word	0x40020058
 8005ffc:	40020070 	.word	0x40020070
 8006000:	40020088 	.word	0x40020088
 8006004:	400200a0 	.word	0x400200a0
 8006008:	400200b8 	.word	0x400200b8
 800600c:	40020410 	.word	0x40020410
 8006010:	40020428 	.word	0x40020428
 8006014:	40020440 	.word	0x40020440
 8006018:	40020458 	.word	0x40020458
 800601c:	40020470 	.word	0x40020470
 8006020:	40020488 	.word	0x40020488
 8006024:	400204a0 	.word	0x400204a0
 8006028:	400204b8 	.word	0x400204b8
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 020a 	bic.w	r2, r2, #10
 800603a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 8097 	beq.w	8006184 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800605e:	e091      	b.n	8006184 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006064:	f003 031f 	and.w	r3, r3, #31
 8006068:	2208      	movs	r2, #8
 800606a:	409a      	lsls	r2, r3
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	4013      	ands	r3, r2
 8006070:	2b00      	cmp	r3, #0
 8006072:	f000 8088 	beq.w	8006186 <HAL_DMA_IRQHandler+0xe0e>
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f003 0308 	and.w	r3, r3, #8
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 8082 	beq.w	8006186 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a41      	ldr	r2, [pc, #260]	@ (800618c <HAL_DMA_IRQHandler+0xe14>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d04a      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a3f      	ldr	r2, [pc, #252]	@ (8006190 <HAL_DMA_IRQHandler+0xe18>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d045      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a3e      	ldr	r2, [pc, #248]	@ (8006194 <HAL_DMA_IRQHandler+0xe1c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d040      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a3c      	ldr	r2, [pc, #240]	@ (8006198 <HAL_DMA_IRQHandler+0xe20>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d03b      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a3b      	ldr	r2, [pc, #236]	@ (800619c <HAL_DMA_IRQHandler+0xe24>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d036      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a39      	ldr	r2, [pc, #228]	@ (80061a0 <HAL_DMA_IRQHandler+0xe28>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d031      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a38      	ldr	r2, [pc, #224]	@ (80061a4 <HAL_DMA_IRQHandler+0xe2c>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d02c      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a36      	ldr	r2, [pc, #216]	@ (80061a8 <HAL_DMA_IRQHandler+0xe30>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d027      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a35      	ldr	r2, [pc, #212]	@ (80061ac <HAL_DMA_IRQHandler+0xe34>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d022      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a33      	ldr	r2, [pc, #204]	@ (80061b0 <HAL_DMA_IRQHandler+0xe38>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d01d      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a32      	ldr	r2, [pc, #200]	@ (80061b4 <HAL_DMA_IRQHandler+0xe3c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d018      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a30      	ldr	r2, [pc, #192]	@ (80061b8 <HAL_DMA_IRQHandler+0xe40>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d013      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a2f      	ldr	r2, [pc, #188]	@ (80061bc <HAL_DMA_IRQHandler+0xe44>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00e      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a2d      	ldr	r2, [pc, #180]	@ (80061c0 <HAL_DMA_IRQHandler+0xe48>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d009      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a2c      	ldr	r2, [pc, #176]	@ (80061c4 <HAL_DMA_IRQHandler+0xe4c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d004      	beq.n	8006122 <HAL_DMA_IRQHandler+0xdaa>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a2a      	ldr	r2, [pc, #168]	@ (80061c8 <HAL_DMA_IRQHandler+0xe50>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d108      	bne.n	8006134 <HAL_DMA_IRQHandler+0xdbc>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 021c 	bic.w	r2, r2, #28
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	e007      	b.n	8006144 <HAL_DMA_IRQHandler+0xdcc>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 020e 	bic.w	r2, r2, #14
 8006142:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006148:	f003 031f 	and.w	r3, r3, #31
 800614c:	2201      	movs	r2, #1
 800614e:	409a      	lsls	r2, r3
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800616e:	2b00      	cmp	r3, #0
 8006170:	d009      	beq.n	8006186 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	4798      	blx	r3
 800617a:	e004      	b.n	8006186 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800617c:	bf00      	nop
 800617e:	e002      	b.n	8006186 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006180:	bf00      	nop
 8006182:	e000      	b.n	8006186 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006184:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006186:	3728      	adds	r7, #40	@ 0x28
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	40020010 	.word	0x40020010
 8006190:	40020028 	.word	0x40020028
 8006194:	40020040 	.word	0x40020040
 8006198:	40020058 	.word	0x40020058
 800619c:	40020070 	.word	0x40020070
 80061a0:	40020088 	.word	0x40020088
 80061a4:	400200a0 	.word	0x400200a0
 80061a8:	400200b8 	.word	0x400200b8
 80061ac:	40020410 	.word	0x40020410
 80061b0:	40020428 	.word	0x40020428
 80061b4:	40020440 	.word	0x40020440
 80061b8:	40020458 	.word	0x40020458
 80061bc:	40020470 	.word	0x40020470
 80061c0:	40020488 	.word	0x40020488
 80061c4:	400204a0 	.word	0x400204a0
 80061c8:	400204b8 	.word	0x400204b8

080061cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a42      	ldr	r2, [pc, #264]	@ (80062e4 <DMA_CalcBaseAndBitshift+0x118>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d04a      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a41      	ldr	r2, [pc, #260]	@ (80062e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d045      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a3f      	ldr	r2, [pc, #252]	@ (80062ec <DMA_CalcBaseAndBitshift+0x120>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d040      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a3e      	ldr	r2, [pc, #248]	@ (80062f0 <DMA_CalcBaseAndBitshift+0x124>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d03b      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a3c      	ldr	r2, [pc, #240]	@ (80062f4 <DMA_CalcBaseAndBitshift+0x128>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d036      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a3b      	ldr	r2, [pc, #236]	@ (80062f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d031      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a39      	ldr	r2, [pc, #228]	@ (80062fc <DMA_CalcBaseAndBitshift+0x130>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d02c      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a38      	ldr	r2, [pc, #224]	@ (8006300 <DMA_CalcBaseAndBitshift+0x134>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d027      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a36      	ldr	r2, [pc, #216]	@ (8006304 <DMA_CalcBaseAndBitshift+0x138>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d022      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a35      	ldr	r2, [pc, #212]	@ (8006308 <DMA_CalcBaseAndBitshift+0x13c>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d01d      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a33      	ldr	r2, [pc, #204]	@ (800630c <DMA_CalcBaseAndBitshift+0x140>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d018      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a32      	ldr	r2, [pc, #200]	@ (8006310 <DMA_CalcBaseAndBitshift+0x144>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d013      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a30      	ldr	r2, [pc, #192]	@ (8006314 <DMA_CalcBaseAndBitshift+0x148>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d00e      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a2f      	ldr	r2, [pc, #188]	@ (8006318 <DMA_CalcBaseAndBitshift+0x14c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d009      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a2d      	ldr	r2, [pc, #180]	@ (800631c <DMA_CalcBaseAndBitshift+0x150>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d004      	beq.n	8006274 <DMA_CalcBaseAndBitshift+0xa8>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a2c      	ldr	r2, [pc, #176]	@ (8006320 <DMA_CalcBaseAndBitshift+0x154>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d101      	bne.n	8006278 <DMA_CalcBaseAndBitshift+0xac>
 8006274:	2301      	movs	r3, #1
 8006276:	e000      	b.n	800627a <DMA_CalcBaseAndBitshift+0xae>
 8006278:	2300      	movs	r3, #0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d024      	beq.n	80062c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	b2db      	uxtb	r3, r3
 8006284:	3b10      	subs	r3, #16
 8006286:	4a27      	ldr	r2, [pc, #156]	@ (8006324 <DMA_CalcBaseAndBitshift+0x158>)
 8006288:	fba2 2303 	umull	r2, r3, r2, r3
 800628c:	091b      	lsrs	r3, r3, #4
 800628e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	4a24      	ldr	r2, [pc, #144]	@ (8006328 <DMA_CalcBaseAndBitshift+0x15c>)
 8006298:	5cd3      	ldrb	r3, [r2, r3]
 800629a:	461a      	mov	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d908      	bls.n	80062b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	4b1f      	ldr	r3, [pc, #124]	@ (800632c <DMA_CalcBaseAndBitshift+0x160>)
 80062ae:	4013      	ands	r3, r2
 80062b0:	1d1a      	adds	r2, r3, #4
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80062b6:	e00d      	b.n	80062d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	461a      	mov	r2, r3
 80062be:	4b1b      	ldr	r3, [pc, #108]	@ (800632c <DMA_CalcBaseAndBitshift+0x160>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80062c6:	e005      	b.n	80062d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	40020010 	.word	0x40020010
 80062e8:	40020028 	.word	0x40020028
 80062ec:	40020040 	.word	0x40020040
 80062f0:	40020058 	.word	0x40020058
 80062f4:	40020070 	.word	0x40020070
 80062f8:	40020088 	.word	0x40020088
 80062fc:	400200a0 	.word	0x400200a0
 8006300:	400200b8 	.word	0x400200b8
 8006304:	40020410 	.word	0x40020410
 8006308:	40020428 	.word	0x40020428
 800630c:	40020440 	.word	0x40020440
 8006310:	40020458 	.word	0x40020458
 8006314:	40020470 	.word	0x40020470
 8006318:	40020488 	.word	0x40020488
 800631c:	400204a0 	.word	0x400204a0
 8006320:	400204b8 	.word	0x400204b8
 8006324:	aaaaaaab 	.word	0xaaaaaaab
 8006328:	080131a0 	.word	0x080131a0
 800632c:	fffffc00 	.word	0xfffffc00

08006330 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006338:	2300      	movs	r3, #0
 800633a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d120      	bne.n	8006386 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006348:	2b03      	cmp	r3, #3
 800634a:	d858      	bhi.n	80063fe <DMA_CheckFifoParam+0xce>
 800634c:	a201      	add	r2, pc, #4	@ (adr r2, 8006354 <DMA_CheckFifoParam+0x24>)
 800634e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006352:	bf00      	nop
 8006354:	08006365 	.word	0x08006365
 8006358:	08006377 	.word	0x08006377
 800635c:	08006365 	.word	0x08006365
 8006360:	080063ff 	.word	0x080063ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006368:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d048      	beq.n	8006402 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006374:	e045      	b.n	8006402 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800637e:	d142      	bne.n	8006406 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006384:	e03f      	b.n	8006406 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800638e:	d123      	bne.n	80063d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006394:	2b03      	cmp	r3, #3
 8006396:	d838      	bhi.n	800640a <DMA_CheckFifoParam+0xda>
 8006398:	a201      	add	r2, pc, #4	@ (adr r2, 80063a0 <DMA_CheckFifoParam+0x70>)
 800639a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639e:	bf00      	nop
 80063a0:	080063b1 	.word	0x080063b1
 80063a4:	080063b7 	.word	0x080063b7
 80063a8:	080063b1 	.word	0x080063b1
 80063ac:	080063c9 	.word	0x080063c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	73fb      	strb	r3, [r7, #15]
        break;
 80063b4:	e030      	b.n	8006418 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d025      	beq.n	800640e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063c6:	e022      	b.n	800640e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80063d0:	d11f      	bne.n	8006412 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063d6:	e01c      	b.n	8006412 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d902      	bls.n	80063e6 <DMA_CheckFifoParam+0xb6>
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d003      	beq.n	80063ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80063e4:	e018      	b.n	8006418 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	73fb      	strb	r3, [r7, #15]
        break;
 80063ea:	e015      	b.n	8006418 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00e      	beq.n	8006416 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	73fb      	strb	r3, [r7, #15]
    break;
 80063fc:	e00b      	b.n	8006416 <DMA_CheckFifoParam+0xe6>
        break;
 80063fe:	bf00      	nop
 8006400:	e00a      	b.n	8006418 <DMA_CheckFifoParam+0xe8>
        break;
 8006402:	bf00      	nop
 8006404:	e008      	b.n	8006418 <DMA_CheckFifoParam+0xe8>
        break;
 8006406:	bf00      	nop
 8006408:	e006      	b.n	8006418 <DMA_CheckFifoParam+0xe8>
        break;
 800640a:	bf00      	nop
 800640c:	e004      	b.n	8006418 <DMA_CheckFifoParam+0xe8>
        break;
 800640e:	bf00      	nop
 8006410:	e002      	b.n	8006418 <DMA_CheckFifoParam+0xe8>
        break;
 8006412:	bf00      	nop
 8006414:	e000      	b.n	8006418 <DMA_CheckFifoParam+0xe8>
    break;
 8006416:	bf00      	nop
    }
  }

  return status;
 8006418:	7bfb      	ldrb	r3, [r7, #15]
}
 800641a:	4618      	mov	r0, r3
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop

08006428 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a38      	ldr	r2, [pc, #224]	@ (800651c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d022      	beq.n	8006486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a36      	ldr	r2, [pc, #216]	@ (8006520 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d01d      	beq.n	8006486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a35      	ldr	r2, [pc, #212]	@ (8006524 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d018      	beq.n	8006486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a33      	ldr	r2, [pc, #204]	@ (8006528 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d013      	beq.n	8006486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a32      	ldr	r2, [pc, #200]	@ (800652c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00e      	beq.n	8006486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a30      	ldr	r2, [pc, #192]	@ (8006530 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d009      	beq.n	8006486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a2f      	ldr	r2, [pc, #188]	@ (8006534 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d004      	beq.n	8006486 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a2d      	ldr	r2, [pc, #180]	@ (8006538 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d101      	bne.n	800648a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006486:	2301      	movs	r3, #1
 8006488:	e000      	b.n	800648c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800648a:	2300      	movs	r3, #0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01a      	beq.n	80064c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	3b08      	subs	r3, #8
 8006498:	4a28      	ldr	r2, [pc, #160]	@ (800653c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800649a:	fba2 2303 	umull	r2, r3, r2, r3
 800649e:	091b      	lsrs	r3, r3, #4
 80064a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4b26      	ldr	r3, [pc, #152]	@ (8006540 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80064a6:	4413      	add	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	461a      	mov	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a24      	ldr	r2, [pc, #144]	@ (8006544 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80064b4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f003 031f 	and.w	r3, r3, #31
 80064bc:	2201      	movs	r2, #1
 80064be:	409a      	lsls	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80064c4:	e024      	b.n	8006510 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	3b10      	subs	r3, #16
 80064ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006548 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80064d0:	fba2 2303 	umull	r2, r3, r2, r3
 80064d4:	091b      	lsrs	r3, r3, #4
 80064d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4a1c      	ldr	r2, [pc, #112]	@ (800654c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d806      	bhi.n	80064ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	4a1b      	ldr	r2, [pc, #108]	@ (8006550 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d902      	bls.n	80064ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3308      	adds	r3, #8
 80064ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	4b18      	ldr	r3, [pc, #96]	@ (8006554 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	461a      	mov	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a16      	ldr	r2, [pc, #88]	@ (8006558 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006500:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f003 031f 	and.w	r3, r3, #31
 8006508:	2201      	movs	r2, #1
 800650a:	409a      	lsls	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006510:	bf00      	nop
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	58025408 	.word	0x58025408
 8006520:	5802541c 	.word	0x5802541c
 8006524:	58025430 	.word	0x58025430
 8006528:	58025444 	.word	0x58025444
 800652c:	58025458 	.word	0x58025458
 8006530:	5802546c 	.word	0x5802546c
 8006534:	58025480 	.word	0x58025480
 8006538:	58025494 	.word	0x58025494
 800653c:	cccccccd 	.word	0xcccccccd
 8006540:	16009600 	.word	0x16009600
 8006544:	58025880 	.word	0x58025880
 8006548:	aaaaaaab 	.word	0xaaaaaaab
 800654c:	400204b8 	.word	0x400204b8
 8006550:	4002040f 	.word	0x4002040f
 8006554:	10008200 	.word	0x10008200
 8006558:	40020880 	.word	0x40020880

0800655c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	b2db      	uxtb	r3, r3
 800656a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d04a      	beq.n	8006608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2b08      	cmp	r3, #8
 8006576:	d847      	bhi.n	8006608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a25      	ldr	r2, [pc, #148]	@ (8006614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d022      	beq.n	80065c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a24      	ldr	r2, [pc, #144]	@ (8006618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d01d      	beq.n	80065c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a22      	ldr	r2, [pc, #136]	@ (800661c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d018      	beq.n	80065c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a21      	ldr	r2, [pc, #132]	@ (8006620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d013      	beq.n	80065c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00e      	beq.n	80065c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a1e      	ldr	r2, [pc, #120]	@ (8006628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d009      	beq.n	80065c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1c      	ldr	r2, [pc, #112]	@ (800662c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d004      	beq.n	80065c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1b      	ldr	r2, [pc, #108]	@ (8006630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d101      	bne.n	80065cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80065c8:	2301      	movs	r3, #1
 80065ca:	e000      	b.n	80065ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80065cc:	2300      	movs	r3, #0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4b17      	ldr	r3, [pc, #92]	@ (8006634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80065d6:	4413      	add	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	461a      	mov	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a15      	ldr	r2, [pc, #84]	@ (8006638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80065e4:	671a      	str	r2, [r3, #112]	@ 0x70
 80065e6:	e009      	b.n	80065fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	4b14      	ldr	r3, [pc, #80]	@ (800663c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80065ec:	4413      	add	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	461a      	mov	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a11      	ldr	r2, [pc, #68]	@ (8006640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80065fa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3b01      	subs	r3, #1
 8006600:	2201      	movs	r2, #1
 8006602:	409a      	lsls	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006608:	bf00      	nop
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	58025408 	.word	0x58025408
 8006618:	5802541c 	.word	0x5802541c
 800661c:	58025430 	.word	0x58025430
 8006620:	58025444 	.word	0x58025444
 8006624:	58025458 	.word	0x58025458
 8006628:	5802546c 	.word	0x5802546c
 800662c:	58025480 	.word	0x58025480
 8006630:	58025494 	.word	0x58025494
 8006634:	1600963f 	.word	0x1600963f
 8006638:	58025940 	.word	0x58025940
 800663c:	1000823f 	.word	0x1000823f
 8006640:	40020940 	.word	0x40020940

08006644 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006644:	b480      	push	{r7}
 8006646:	b089      	sub	sp, #36	@ 0x24
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800664e:	2300      	movs	r3, #0
 8006650:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006652:	4b86      	ldr	r3, [pc, #536]	@ (800686c <HAL_GPIO_Init+0x228>)
 8006654:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006656:	e18c      	b.n	8006972 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	2101      	movs	r1, #1
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	fa01 f303 	lsl.w	r3, r1, r3
 8006664:	4013      	ands	r3, r2
 8006666:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 817e 	beq.w	800696c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f003 0303 	and.w	r3, r3, #3
 8006678:	2b01      	cmp	r3, #1
 800667a:	d005      	beq.n	8006688 <HAL_GPIO_Init+0x44>
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f003 0303 	and.w	r3, r3, #3
 8006684:	2b02      	cmp	r3, #2
 8006686:	d130      	bne.n	80066ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	2203      	movs	r2, #3
 8006694:	fa02 f303 	lsl.w	r3, r2, r3
 8006698:	43db      	mvns	r3, r3
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	4013      	ands	r3, r2
 800669e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	68da      	ldr	r2, [r3, #12]
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066be:	2201      	movs	r2, #1
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	fa02 f303 	lsl.w	r3, r2, r3
 80066c6:	43db      	mvns	r3, r3
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	4013      	ands	r3, r2
 80066cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	091b      	lsrs	r3, r3, #4
 80066d4:	f003 0201 	and.w	r2, r3, #1
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	fa02 f303 	lsl.w	r3, r2, r3
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f003 0303 	and.w	r3, r3, #3
 80066f2:	2b03      	cmp	r3, #3
 80066f4:	d017      	beq.n	8006726 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	2203      	movs	r2, #3
 8006702:	fa02 f303 	lsl.w	r3, r2, r3
 8006706:	43db      	mvns	r3, r3
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	4013      	ands	r3, r2
 800670c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	fa02 f303 	lsl.w	r3, r2, r3
 800671a:	69ba      	ldr	r2, [r7, #24]
 800671c:	4313      	orrs	r3, r2
 800671e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d123      	bne.n	800677a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	08da      	lsrs	r2, r3, #3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3208      	adds	r2, #8
 800673a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	f003 0307 	and.w	r3, r3, #7
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	220f      	movs	r2, #15
 800674a:	fa02 f303 	lsl.w	r3, r2, r3
 800674e:	43db      	mvns	r3, r3
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	4013      	ands	r3, r2
 8006754:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	691a      	ldr	r2, [r3, #16]
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	f003 0307 	and.w	r3, r3, #7
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	fa02 f303 	lsl.w	r3, r2, r3
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	4313      	orrs	r3, r2
 800676a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	08da      	lsrs	r2, r3, #3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3208      	adds	r2, #8
 8006774:	69b9      	ldr	r1, [r7, #24]
 8006776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	2203      	movs	r2, #3
 8006786:	fa02 f303 	lsl.w	r3, r2, r3
 800678a:	43db      	mvns	r3, r3
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	4013      	ands	r3, r2
 8006790:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f003 0203 	and.w	r2, r3, #3
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	fa02 f303 	lsl.w	r3, r2, r3
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 80d8 	beq.w	800696c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067bc:	4b2c      	ldr	r3, [pc, #176]	@ (8006870 <HAL_GPIO_Init+0x22c>)
 80067be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067c2:	4a2b      	ldr	r2, [pc, #172]	@ (8006870 <HAL_GPIO_Init+0x22c>)
 80067c4:	f043 0302 	orr.w	r3, r3, #2
 80067c8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80067cc:	4b28      	ldr	r3, [pc, #160]	@ (8006870 <HAL_GPIO_Init+0x22c>)
 80067ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067da:	4a26      	ldr	r2, [pc, #152]	@ (8006874 <HAL_GPIO_Init+0x230>)
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	089b      	lsrs	r3, r3, #2
 80067e0:	3302      	adds	r3, #2
 80067e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	f003 0303 	and.w	r3, r3, #3
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	220f      	movs	r2, #15
 80067f2:	fa02 f303 	lsl.w	r3, r2, r3
 80067f6:	43db      	mvns	r3, r3
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	4013      	ands	r3, r2
 80067fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a1d      	ldr	r2, [pc, #116]	@ (8006878 <HAL_GPIO_Init+0x234>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d04a      	beq.n	800689c <HAL_GPIO_Init+0x258>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a1c      	ldr	r2, [pc, #112]	@ (800687c <HAL_GPIO_Init+0x238>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d02b      	beq.n	8006866 <HAL_GPIO_Init+0x222>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a1b      	ldr	r2, [pc, #108]	@ (8006880 <HAL_GPIO_Init+0x23c>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d025      	beq.n	8006862 <HAL_GPIO_Init+0x21e>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a1a      	ldr	r2, [pc, #104]	@ (8006884 <HAL_GPIO_Init+0x240>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d01f      	beq.n	800685e <HAL_GPIO_Init+0x21a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a19      	ldr	r2, [pc, #100]	@ (8006888 <HAL_GPIO_Init+0x244>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d019      	beq.n	800685a <HAL_GPIO_Init+0x216>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a18      	ldr	r2, [pc, #96]	@ (800688c <HAL_GPIO_Init+0x248>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d013      	beq.n	8006856 <HAL_GPIO_Init+0x212>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a17      	ldr	r2, [pc, #92]	@ (8006890 <HAL_GPIO_Init+0x24c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d00d      	beq.n	8006852 <HAL_GPIO_Init+0x20e>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a16      	ldr	r2, [pc, #88]	@ (8006894 <HAL_GPIO_Init+0x250>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d007      	beq.n	800684e <HAL_GPIO_Init+0x20a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a15      	ldr	r2, [pc, #84]	@ (8006898 <HAL_GPIO_Init+0x254>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d101      	bne.n	800684a <HAL_GPIO_Init+0x206>
 8006846:	2309      	movs	r3, #9
 8006848:	e029      	b.n	800689e <HAL_GPIO_Init+0x25a>
 800684a:	230a      	movs	r3, #10
 800684c:	e027      	b.n	800689e <HAL_GPIO_Init+0x25a>
 800684e:	2307      	movs	r3, #7
 8006850:	e025      	b.n	800689e <HAL_GPIO_Init+0x25a>
 8006852:	2306      	movs	r3, #6
 8006854:	e023      	b.n	800689e <HAL_GPIO_Init+0x25a>
 8006856:	2305      	movs	r3, #5
 8006858:	e021      	b.n	800689e <HAL_GPIO_Init+0x25a>
 800685a:	2304      	movs	r3, #4
 800685c:	e01f      	b.n	800689e <HAL_GPIO_Init+0x25a>
 800685e:	2303      	movs	r3, #3
 8006860:	e01d      	b.n	800689e <HAL_GPIO_Init+0x25a>
 8006862:	2302      	movs	r3, #2
 8006864:	e01b      	b.n	800689e <HAL_GPIO_Init+0x25a>
 8006866:	2301      	movs	r3, #1
 8006868:	e019      	b.n	800689e <HAL_GPIO_Init+0x25a>
 800686a:	bf00      	nop
 800686c:	58000080 	.word	0x58000080
 8006870:	58024400 	.word	0x58024400
 8006874:	58000400 	.word	0x58000400
 8006878:	58020000 	.word	0x58020000
 800687c:	58020400 	.word	0x58020400
 8006880:	58020800 	.word	0x58020800
 8006884:	58020c00 	.word	0x58020c00
 8006888:	58021000 	.word	0x58021000
 800688c:	58021400 	.word	0x58021400
 8006890:	58021800 	.word	0x58021800
 8006894:	58021c00 	.word	0x58021c00
 8006898:	58022400 	.word	0x58022400
 800689c:	2300      	movs	r3, #0
 800689e:	69fa      	ldr	r2, [r7, #28]
 80068a0:	f002 0203 	and.w	r2, r2, #3
 80068a4:	0092      	lsls	r2, r2, #2
 80068a6:	4093      	lsls	r3, r2
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80068ae:	4938      	ldr	r1, [pc, #224]	@ (8006990 <HAL_GPIO_Init+0x34c>)
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	089b      	lsrs	r3, r3, #2
 80068b4:	3302      	adds	r3, #2
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80068bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	43db      	mvns	r3, r3
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	4013      	ands	r3, r2
 80068cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	4313      	orrs	r3, r2
 80068e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80068e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80068ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	43db      	mvns	r3, r3
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	4013      	ands	r3, r2
 80068fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	4313      	orrs	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006910:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	43db      	mvns	r3, r3
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	4013      	ands	r3, r2
 8006926:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006934:	69ba      	ldr	r2, [r7, #24]
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	43db      	mvns	r3, r3
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	4013      	ands	r3, r2
 8006950:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	4313      	orrs	r3, r2
 8006964:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	3301      	adds	r3, #1
 8006970:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	fa22 f303 	lsr.w	r3, r2, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	f47f ae6b 	bne.w	8006658 <HAL_GPIO_Init+0x14>
  }
}
 8006982:	bf00      	nop
 8006984:	bf00      	nop
 8006986:	3724      	adds	r7, #36	@ 0x24
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	58000400 	.word	0x58000400

08006994 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e08b      	b.n	8006abe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d106      	bne.n	80069c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7fa fa62 	bl	8000e84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2224      	movs	r2, #36	@ 0x24
 80069c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 0201 	bic.w	r2, r2, #1
 80069d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80069e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689a      	ldr	r2, [r3, #8]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80069f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d107      	bne.n	8006a0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	689a      	ldr	r2, [r3, #8]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a0a:	609a      	str	r2, [r3, #8]
 8006a0c:	e006      	b.n	8006a1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689a      	ldr	r2, [r3, #8]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006a1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d108      	bne.n	8006a36 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a32:	605a      	str	r2, [r3, #4]
 8006a34:	e007      	b.n	8006a46 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6859      	ldr	r1, [r3, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	4b1d      	ldr	r3, [pc, #116]	@ (8006ac8 <HAL_I2C_Init+0x134>)
 8006a52:	430b      	orrs	r3, r1
 8006a54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68da      	ldr	r2, [r3, #12]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006a64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691a      	ldr	r2, [r3, #16]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	69d9      	ldr	r1, [r3, #28]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a1a      	ldr	r2, [r3, #32]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f042 0201 	orr.w	r2, r2, #1
 8006a9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	02008000 	.word	0x02008000

08006acc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b20      	cmp	r3, #32
 8006ae0:	d138      	bne.n	8006b54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d101      	bne.n	8006af0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006aec:	2302      	movs	r3, #2
 8006aee:	e032      	b.n	8006b56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2224      	movs	r2, #36	@ 0x24
 8006afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0201 	bic.w	r2, r2, #1
 8006b0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6819      	ldr	r1, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0201 	orr.w	r2, r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2220      	movs	r2, #32
 8006b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	e000      	b.n	8006b56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b54:	2302      	movs	r3, #2
  }
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b085      	sub	sp, #20
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b20      	cmp	r3, #32
 8006b76:	d139      	bne.n	8006bec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d101      	bne.n	8006b86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b82:	2302      	movs	r3, #2
 8006b84:	e033      	b.n	8006bee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2224      	movs	r2, #36	@ 0x24
 8006b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 0201 	bic.w	r2, r2, #1
 8006ba4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006bb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	021b      	lsls	r3, r3, #8
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f042 0201 	orr.w	r2, r2, #1
 8006bd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	e000      	b.n	8006bee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006bec:	2302      	movs	r3, #2
  }
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e043      	b.n	8006c94 <HAL_IWDG_Init+0x9a>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8006c14:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f245 5255 	movw	r2, #21845	@ 0x5555
 8006c1e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	6852      	ldr	r2, [r2, #4]
 8006c28:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	6892      	ldr	r2, [r2, #8]
 8006c32:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006c34:	f7fb f8d0 	bl	8001dd8 <HAL_GetTick>
 8006c38:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006c3a:	e011      	b.n	8006c60 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006c3c:	f7fb f8cc 	bl	8001dd8 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	f641 0201 	movw	r2, #6145	@ 0x1801
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d908      	bls.n	8006c60 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	f003 0307 	and.w	r3, r3, #7
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e019      	b.n	8006c94 <HAL_IWDG_Init+0x9a>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1e6      	bne.n	8006c3c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	691a      	ldr	r2, [r3, #16]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d005      	beq.n	8006c88 <HAL_IWDG_Init+0x8e>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	68d2      	ldr	r2, [r2, #12]
 8006c84:	611a      	str	r2, [r3, #16]
 8006c86:	e004      	b.n	8006c92 <HAL_IWDG_Init+0x98>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8006c90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af02      	add	r7, sp, #8
 8006ca2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e0fe      	b.n	8006eac <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d106      	bne.n	8006cc8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f00b fec6 	bl	8012a54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2203      	movs	r2, #3
 8006ccc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f008 fac8 	bl	800f26a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6818      	ldr	r0, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	7c1a      	ldrb	r2, [r3, #16]
 8006ce2:	f88d 2000 	strb.w	r2, [sp]
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cea:	f008 f999 	bl	800f020 <USB_CoreInit>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d005      	beq.n	8006d00 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e0d5      	b.n	8006eac <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2100      	movs	r1, #0
 8006d06:	4618      	mov	r0, r3
 8006d08:	f008 fac0 	bl	800f28c <USB_SetCurrentMode>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d005      	beq.n	8006d1e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2202      	movs	r2, #2
 8006d16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e0c6      	b.n	8006eac <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]
 8006d22:	e04a      	b.n	8006dba <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006d24:	7bfa      	ldrb	r2, [r7, #15]
 8006d26:	6879      	ldr	r1, [r7, #4]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	440b      	add	r3, r1
 8006d32:	3315      	adds	r3, #21
 8006d34:	2201      	movs	r2, #1
 8006d36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006d38:	7bfa      	ldrb	r2, [r7, #15]
 8006d3a:	6879      	ldr	r1, [r7, #4]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	00db      	lsls	r3, r3, #3
 8006d40:	4413      	add	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	440b      	add	r3, r1
 8006d46:	3314      	adds	r3, #20
 8006d48:	7bfa      	ldrb	r2, [r7, #15]
 8006d4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006d4c:	7bfa      	ldrb	r2, [r7, #15]
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	b298      	uxth	r0, r3
 8006d52:	6879      	ldr	r1, [r7, #4]
 8006d54:	4613      	mov	r3, r2
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	4413      	add	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	440b      	add	r3, r1
 8006d5e:	332e      	adds	r3, #46	@ 0x2e
 8006d60:	4602      	mov	r2, r0
 8006d62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006d64:	7bfa      	ldrb	r2, [r7, #15]
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	00db      	lsls	r3, r3, #3
 8006d6c:	4413      	add	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	440b      	add	r3, r1
 8006d72:	3318      	adds	r3, #24
 8006d74:	2200      	movs	r2, #0
 8006d76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006d78:	7bfa      	ldrb	r2, [r7, #15]
 8006d7a:	6879      	ldr	r1, [r7, #4]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	00db      	lsls	r3, r3, #3
 8006d80:	4413      	add	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	440b      	add	r3, r1
 8006d86:	331c      	adds	r3, #28
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006d8c:	7bfa      	ldrb	r2, [r7, #15]
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	4613      	mov	r3, r2
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	4413      	add	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	440b      	add	r3, r1
 8006d9a:	3320      	adds	r3, #32
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006da0:	7bfa      	ldrb	r2, [r7, #15]
 8006da2:	6879      	ldr	r1, [r7, #4]
 8006da4:	4613      	mov	r3, r2
 8006da6:	00db      	lsls	r3, r3, #3
 8006da8:	4413      	add	r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	440b      	add	r3, r1
 8006dae:	3324      	adds	r3, #36	@ 0x24
 8006db0:	2200      	movs	r2, #0
 8006db2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
 8006db6:	3301      	adds	r3, #1
 8006db8:	73fb      	strb	r3, [r7, #15]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	791b      	ldrb	r3, [r3, #4]
 8006dbe:	7bfa      	ldrb	r2, [r7, #15]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d3af      	bcc.n	8006d24 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	73fb      	strb	r3, [r7, #15]
 8006dc8:	e044      	b.n	8006e54 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006dca:	7bfa      	ldrb	r2, [r7, #15]
 8006dcc:	6879      	ldr	r1, [r7, #4]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	00db      	lsls	r3, r3, #3
 8006dd2:	4413      	add	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	440b      	add	r3, r1
 8006dd8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006ddc:	2200      	movs	r2, #0
 8006dde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006de0:	7bfa      	ldrb	r2, [r7, #15]
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	4613      	mov	r3, r2
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	440b      	add	r3, r1
 8006dee:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006df2:	7bfa      	ldrb	r2, [r7, #15]
 8006df4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006df6:	7bfa      	ldrb	r2, [r7, #15]
 8006df8:	6879      	ldr	r1, [r7, #4]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	4413      	add	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	440b      	add	r3, r1
 8006e04:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006e08:	2200      	movs	r2, #0
 8006e0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006e0c:	7bfa      	ldrb	r2, [r7, #15]
 8006e0e:	6879      	ldr	r1, [r7, #4]
 8006e10:	4613      	mov	r3, r2
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	440b      	add	r3, r1
 8006e1a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006e1e:	2200      	movs	r2, #0
 8006e20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006e22:	7bfa      	ldrb	r2, [r7, #15]
 8006e24:	6879      	ldr	r1, [r7, #4]
 8006e26:	4613      	mov	r3, r2
 8006e28:	00db      	lsls	r3, r3, #3
 8006e2a:	4413      	add	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	440b      	add	r3, r1
 8006e30:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006e34:	2200      	movs	r2, #0
 8006e36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006e38:	7bfa      	ldrb	r2, [r7, #15]
 8006e3a:	6879      	ldr	r1, [r7, #4]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	4413      	add	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	440b      	add	r3, r1
 8006e46:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
 8006e50:	3301      	adds	r3, #1
 8006e52:	73fb      	strb	r3, [r7, #15]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	791b      	ldrb	r3, [r3, #4]
 8006e58:	7bfa      	ldrb	r2, [r7, #15]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d3b5      	bcc.n	8006dca <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	7c1a      	ldrb	r2, [r3, #16]
 8006e66:	f88d 2000 	strb.w	r2, [sp]
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e6e:	f008 fa59 	bl	800f324 <USB_DevInit>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e013      	b.n	8006eac <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	7b1b      	ldrb	r3, [r3, #12]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d102      	bne.n	8006ea0 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f001 f96e 	bl	800817c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f009 fa9c 	bl	80103e2 <USB_DevDisconnect>

  return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <HAL_PCD_Start+0x1c>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e022      	b.n	8006f16 <HAL_PCD_Start+0x62>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d009      	beq.n	8006ef8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d105      	bne.n	8006ef8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f008 f9a3 	bl	800f248 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f009 fa4a 	bl	80103a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006f1e:	b590      	push	{r4, r7, lr}
 8006f20:	b08d      	sub	sp, #52	@ 0x34
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f009 fb08 	bl	801054a <USB_GetMode>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f040 84b9 	bne.w	80078b4 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f009 fa6c 	bl	8010424 <USB_ReadInterrupts>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 84af 	beq.w	80078b2 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	0a1b      	lsrs	r3, r3, #8
 8006f5e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f009 fa59 	bl	8010424 <USB_ReadInterrupts>
 8006f72:	4603      	mov	r3, r0
 8006f74:	f003 0302 	and.w	r3, r3, #2
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d107      	bne.n	8006f8c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	695a      	ldr	r2, [r3, #20]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f002 0202 	and.w	r2, r2, #2
 8006f8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f009 fa47 	bl	8010424 <USB_ReadInterrupts>
 8006f96:	4603      	mov	r3, r0
 8006f98:	f003 0310 	and.w	r3, r3, #16
 8006f9c:	2b10      	cmp	r3, #16
 8006f9e:	d161      	bne.n	8007064 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	699a      	ldr	r2, [r3, #24]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0210 	bic.w	r2, r2, #16
 8006fae:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	f003 020f 	and.w	r2, r3, #15
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	00db      	lsls	r3, r3, #3
 8006fc0:	4413      	add	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	4413      	add	r3, r2
 8006fcc:	3304      	adds	r3, #4
 8006fce:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006fd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006fda:	d124      	bne.n	8007026 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d035      	beq.n	8007054 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	091b      	lsrs	r3, r3, #4
 8006ff0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006ff2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	6a38      	ldr	r0, [r7, #32]
 8006ffc:	f009 f87e 	bl	80100fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	68da      	ldr	r2, [r3, #12]
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	091b      	lsrs	r3, r3, #4
 8007008:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800700c:	441a      	add	r2, r3
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	695a      	ldr	r2, [r3, #20]
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	091b      	lsrs	r3, r3, #4
 800701a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800701e:	441a      	add	r2, r3
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	615a      	str	r2, [r3, #20]
 8007024:	e016      	b.n	8007054 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800702c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007030:	d110      	bne.n	8007054 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007038:	2208      	movs	r2, #8
 800703a:	4619      	mov	r1, r3
 800703c:	6a38      	ldr	r0, [r7, #32]
 800703e:	f009 f85d 	bl	80100fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	695a      	ldr	r2, [r3, #20]
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	091b      	lsrs	r3, r3, #4
 800704a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800704e:	441a      	add	r2, r3
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	699a      	ldr	r2, [r3, #24]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f042 0210 	orr.w	r2, r2, #16
 8007062:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4618      	mov	r0, r3
 800706a:	f009 f9db 	bl	8010424 <USB_ReadInterrupts>
 800706e:	4603      	mov	r3, r0
 8007070:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007074:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007078:	f040 80a7 	bne.w	80071ca <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4618      	mov	r0, r3
 8007086:	f009 f9e0 	bl	801044a <USB_ReadDevAllOutEpInterrupt>
 800708a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800708c:	e099      	b.n	80071c2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800708e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 808e 	beq.w	80071b6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070a0:	b2d2      	uxtb	r2, r2
 80070a2:	4611      	mov	r1, r2
 80070a4:	4618      	mov	r0, r3
 80070a6:	f009 fa04 	bl	80104b2 <USB_ReadDevOutEPInterrupt>
 80070aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00c      	beq.n	80070d0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80070b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070c2:	461a      	mov	r2, r3
 80070c4:	2301      	movs	r3, #1
 80070c6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80070c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 fed0 	bl	8007e70 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	f003 0308 	and.w	r3, r3, #8
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00c      	beq.n	80070f4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80070da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070e6:	461a      	mov	r2, r3
 80070e8:	2308      	movs	r3, #8
 80070ea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80070ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 ffa6 	bl	8008040 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f003 0310 	and.w	r3, r3, #16
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d008      	beq.n	8007110 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80070fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800710a:	461a      	mov	r2, r3
 800710c:	2310      	movs	r3, #16
 800710e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d030      	beq.n	800717c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800711a:	6a3b      	ldr	r3, [r7, #32]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007122:	2b80      	cmp	r3, #128	@ 0x80
 8007124:	d109      	bne.n	800713a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	69fa      	ldr	r2, [r7, #28]
 8007130:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007134:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007138:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800713a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800713c:	4613      	mov	r3, r2
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	4413      	add	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	4413      	add	r3, r2
 800714c:	3304      	adds	r3, #4
 800714e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	78db      	ldrb	r3, [r3, #3]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d108      	bne.n	800716a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	2200      	movs	r2, #0
 800715c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800715e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007160:	b2db      	uxtb	r3, r3
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f00b fd95 	bl	8012c94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800716a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007176:	461a      	mov	r2, r3
 8007178:	2302      	movs	r3, #2
 800717a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	f003 0320 	and.w	r3, r3, #32
 8007182:	2b00      	cmp	r3, #0
 8007184:	d008      	beq.n	8007198 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	4413      	add	r3, r2
 800718e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007192:	461a      	mov	r2, r3
 8007194:	2320      	movs	r3, #32
 8007196:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d009      	beq.n	80071b6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80071a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ae:	461a      	mov	r2, r3
 80071b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80071b4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80071b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b8:	3301      	adds	r3, #1
 80071ba:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80071bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071be:	085b      	lsrs	r3, r3, #1
 80071c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80071c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f47f af62 	bne.w	800708e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f009 f928 	bl	8010424 <USB_ReadInterrupts>
 80071d4:	4603      	mov	r3, r0
 80071d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80071da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071de:	f040 80db 	bne.w	8007398 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f009 f949 	bl	801047e <USB_ReadDevAllInEpInterrupt>
 80071ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80071ee:	2300      	movs	r3, #0
 80071f0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80071f2:	e0cd      	b.n	8007390 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80071f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f6:	f003 0301 	and.w	r3, r3, #1
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 80c2 	beq.w	8007384 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007206:	b2d2      	uxtb	r2, r2
 8007208:	4611      	mov	r1, r2
 800720a:	4618      	mov	r0, r3
 800720c:	f009 f96f 	bl	80104ee <USB_ReadDevInEPInterrupt>
 8007210:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	2b00      	cmp	r3, #0
 800721a:	d057      	beq.n	80072cc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800721c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721e:	f003 030f 	and.w	r3, r3, #15
 8007222:	2201      	movs	r2, #1
 8007224:	fa02 f303 	lsl.w	r3, r2, r3
 8007228:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007230:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	43db      	mvns	r3, r3
 8007236:	69f9      	ldr	r1, [r7, #28]
 8007238:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800723c:	4013      	ands	r3, r2
 800723e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	4413      	add	r3, r2
 8007248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800724c:	461a      	mov	r2, r3
 800724e:	2301      	movs	r3, #1
 8007250:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	799b      	ldrb	r3, [r3, #6]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d132      	bne.n	80072c0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800725a:	6879      	ldr	r1, [r7, #4]
 800725c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800725e:	4613      	mov	r3, r2
 8007260:	00db      	lsls	r3, r3, #3
 8007262:	4413      	add	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	440b      	add	r3, r1
 8007268:	3320      	adds	r3, #32
 800726a:	6819      	ldr	r1, [r3, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007270:	4613      	mov	r3, r2
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	4413      	add	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4403      	add	r3, r0
 800727a:	331c      	adds	r3, #28
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4419      	add	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007284:	4613      	mov	r3, r2
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	4413      	add	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4403      	add	r3, r0
 800728e:	3320      	adds	r3, #32
 8007290:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007294:	2b00      	cmp	r3, #0
 8007296:	d113      	bne.n	80072c0 <HAL_PCD_IRQHandler+0x3a2>
 8007298:	6879      	ldr	r1, [r7, #4]
 800729a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800729c:	4613      	mov	r3, r2
 800729e:	00db      	lsls	r3, r3, #3
 80072a0:	4413      	add	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	440b      	add	r3, r1
 80072a6:	3324      	adds	r3, #36	@ 0x24
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d108      	bne.n	80072c0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6818      	ldr	r0, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80072b8:	461a      	mov	r2, r3
 80072ba:	2101      	movs	r1, #1
 80072bc:	f009 f978 	bl	80105b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80072c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f00b fc5f 	bl	8012b8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	f003 0308 	and.w	r3, r3, #8
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d008      	beq.n	80072e8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80072d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072e2:	461a      	mov	r2, r3
 80072e4:	2308      	movs	r3, #8
 80072e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	f003 0310 	and.w	r3, r3, #16
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d008      	beq.n	8007304 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80072f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072fe:	461a      	mov	r2, r3
 8007300:	2310      	movs	r3, #16
 8007302:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800730a:	2b00      	cmp	r3, #0
 800730c:	d008      	beq.n	8007320 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800730e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007310:	015a      	lsls	r2, r3, #5
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	4413      	add	r3, r2
 8007316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800731a:	461a      	mov	r2, r3
 800731c:	2340      	movs	r3, #64	@ 0x40
 800731e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d023      	beq.n	8007372 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800732a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800732c:	6a38      	ldr	r0, [r7, #32]
 800732e:	f008 f957 	bl	800f5e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007334:	4613      	mov	r3, r2
 8007336:	00db      	lsls	r3, r3, #3
 8007338:	4413      	add	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	3310      	adds	r3, #16
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	4413      	add	r3, r2
 8007342:	3304      	adds	r3, #4
 8007344:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	78db      	ldrb	r3, [r3, #3]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d108      	bne.n	8007360 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2200      	movs	r2, #0
 8007352:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007356:	b2db      	uxtb	r3, r3
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f00b fcac 	bl	8012cb8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007362:	015a      	lsls	r2, r3, #5
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	4413      	add	r3, r2
 8007368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800736c:	461a      	mov	r2, r3
 800736e:	2302      	movs	r3, #2
 8007370:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007378:	2b00      	cmp	r3, #0
 800737a:	d003      	beq.n	8007384 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800737c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fcea 	bl	8007d58 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007386:	3301      	adds	r3, #1
 8007388:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800738a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738c:	085b      	lsrs	r3, r3, #1
 800738e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007392:	2b00      	cmp	r3, #0
 8007394:	f47f af2e 	bne.w	80071f4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4618      	mov	r0, r3
 800739e:	f009 f841 	bl	8010424 <USB_ReadInterrupts>
 80073a2:	4603      	mov	r3, r0
 80073a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073ac:	d122      	bne.n	80073f4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	69fa      	ldr	r2, [r7, #28]
 80073b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073bc:	f023 0301 	bic.w	r3, r3, #1
 80073c0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d108      	bne.n	80073de <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80073d4:	2100      	movs	r1, #0
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fef4 	bl	80081c4 <HAL_PCDEx_LPM_Callback>
 80073dc:	e002      	b.n	80073e4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f00b fc4a 	bl	8012c78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	695a      	ldr	r2, [r3, #20]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80073f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f009 f813 	bl	8010424 <USB_ReadInterrupts>
 80073fe:	4603      	mov	r3, r0
 8007400:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007404:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007408:	d112      	bne.n	8007430 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b01      	cmp	r3, #1
 8007418:	d102      	bne.n	8007420 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f00b fc06 	bl	8012c2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	695a      	ldr	r2, [r3, #20]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800742e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4618      	mov	r0, r3
 8007436:	f008 fff5 	bl	8010424 <USB_ReadInterrupts>
 800743a:	4603      	mov	r3, r0
 800743c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007440:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007444:	d121      	bne.n	800748a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	695a      	ldr	r2, [r3, #20]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8007454:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800745c:	2b00      	cmp	r3, #0
 800745e:	d111      	bne.n	8007484 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800746e:	089b      	lsrs	r3, r3, #2
 8007470:	f003 020f 	and.w	r2, r3, #15
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800747a:	2101      	movs	r1, #1
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fea1 	bl	80081c4 <HAL_PCDEx_LPM_Callback>
 8007482:	e002      	b.n	800748a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f00b fbd1 	bl	8012c2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4618      	mov	r0, r3
 8007490:	f008 ffc8 	bl	8010424 <USB_ReadInterrupts>
 8007494:	4603      	mov	r3, r0
 8007496:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800749a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800749e:	f040 80b7 	bne.w	8007610 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	69fa      	ldr	r2, [r7, #28]
 80074ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074b0:	f023 0301 	bic.w	r3, r3, #1
 80074b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2110      	movs	r1, #16
 80074bc:	4618      	mov	r0, r3
 80074be:	f008 f88f 	bl	800f5e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074c2:	2300      	movs	r3, #0
 80074c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074c6:	e046      	b.n	8007556 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80074c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d4:	461a      	mov	r2, r3
 80074d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80074da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80074dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074ec:	0151      	lsls	r1, r2, #5
 80074ee:	69fa      	ldr	r2, [r7, #28]
 80074f0:	440a      	add	r2, r1
 80074f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80074fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80074fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074fe:	015a      	lsls	r2, r3, #5
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	4413      	add	r3, r2
 8007504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007508:	461a      	mov	r2, r3
 800750a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800750e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007512:	015a      	lsls	r2, r3, #5
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	4413      	add	r3, r2
 8007518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007520:	0151      	lsls	r1, r2, #5
 8007522:	69fa      	ldr	r2, [r7, #28]
 8007524:	440a      	add	r2, r1
 8007526:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800752a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800752e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007532:	015a      	lsls	r2, r3, #5
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	4413      	add	r3, r2
 8007538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007540:	0151      	lsls	r1, r2, #5
 8007542:	69fa      	ldr	r2, [r7, #28]
 8007544:	440a      	add	r2, r1
 8007546:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800754a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800754e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007552:	3301      	adds	r3, #1
 8007554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	791b      	ldrb	r3, [r3, #4]
 800755a:	461a      	mov	r2, r3
 800755c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800755e:	4293      	cmp	r3, r2
 8007560:	d3b2      	bcc.n	80074c8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	69fa      	ldr	r2, [r7, #28]
 800756c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007570:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007574:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	7bdb      	ldrb	r3, [r3, #15]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d016      	beq.n	80075ac <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007584:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007588:	69fa      	ldr	r2, [r7, #28]
 800758a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800758e:	f043 030b 	orr.w	r3, r3, #11
 8007592:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800759c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800759e:	69fa      	ldr	r2, [r7, #28]
 80075a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075a4:	f043 030b 	orr.w	r3, r3, #11
 80075a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80075aa:	e015      	b.n	80075d8 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075b2:	695a      	ldr	r2, [r3, #20]
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ba:	4619      	mov	r1, r3
 80075bc:	f242 032b 	movw	r3, #8235	@ 0x202b
 80075c0:	4313      	orrs	r3, r2
 80075c2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	69fa      	ldr	r2, [r7, #28]
 80075ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075d2:	f043 030b 	orr.w	r3, r3, #11
 80075d6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	69fa      	ldr	r2, [r7, #28]
 80075e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075e6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80075ea:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6818      	ldr	r0, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80075fa:	461a      	mov	r2, r3
 80075fc:	f008 ffd8 	bl	80105b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	695a      	ldr	r2, [r3, #20]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800760e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4618      	mov	r0, r3
 8007616:	f008 ff05 	bl	8010424 <USB_ReadInterrupts>
 800761a:	4603      	mov	r3, r0
 800761c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007620:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007624:	d123      	bne.n	800766e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4618      	mov	r0, r3
 800762c:	f008 ff9c 	bl	8010568 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4618      	mov	r0, r3
 8007636:	f008 f84c 	bl	800f6d2 <USB_GetDevSpeed>
 800763a:	4603      	mov	r3, r0
 800763c:	461a      	mov	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681c      	ldr	r4, [r3, #0]
 8007646:	f001 fd1d 	bl	8009084 <HAL_RCC_GetHCLKFreq>
 800764a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007650:	461a      	mov	r2, r3
 8007652:	4620      	mov	r0, r4
 8007654:	f007 fd56 	bl	800f104 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f00b fabe 	bl	8012bda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	695a      	ldr	r2, [r3, #20]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800766c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4618      	mov	r0, r3
 8007674:	f008 fed6 	bl	8010424 <USB_ReadInterrupts>
 8007678:	4603      	mov	r3, r0
 800767a:	f003 0308 	and.w	r3, r3, #8
 800767e:	2b08      	cmp	r3, #8
 8007680:	d10a      	bne.n	8007698 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f00b fa9b 	bl	8012bbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	695a      	ldr	r2, [r3, #20]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f002 0208 	and.w	r2, r2, #8
 8007696:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4618      	mov	r0, r3
 800769e:	f008 fec1 	bl	8010424 <USB_ReadInterrupts>
 80076a2:	4603      	mov	r3, r0
 80076a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076a8:	2b80      	cmp	r3, #128	@ 0x80
 80076aa:	d123      	bne.n	80076f4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80076b4:	6a3b      	ldr	r3, [r7, #32]
 80076b6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80076b8:	2301      	movs	r3, #1
 80076ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80076bc:	e014      	b.n	80076e8 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80076be:	6879      	ldr	r1, [r7, #4]
 80076c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076c2:	4613      	mov	r3, r2
 80076c4:	00db      	lsls	r3, r3, #3
 80076c6:	4413      	add	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	440b      	add	r3, r1
 80076cc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d105      	bne.n	80076e2 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80076d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fb0a 	bl	8007cf6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80076e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e4:	3301      	adds	r3, #1
 80076e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	791b      	ldrb	r3, [r3, #4]
 80076ec:	461a      	mov	r2, r3
 80076ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d3e4      	bcc.n	80076be <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4618      	mov	r0, r3
 80076fa:	f008 fe93 	bl	8010424 <USB_ReadInterrupts>
 80076fe:	4603      	mov	r3, r0
 8007700:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007704:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007708:	d13c      	bne.n	8007784 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800770a:	2301      	movs	r3, #1
 800770c:	627b      	str	r3, [r7, #36]	@ 0x24
 800770e:	e02b      	b.n	8007768 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	4413      	add	r3, r2
 8007718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007720:	6879      	ldr	r1, [r7, #4]
 8007722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007724:	4613      	mov	r3, r2
 8007726:	00db      	lsls	r3, r3, #3
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	440b      	add	r3, r1
 800772e:	3318      	adds	r3, #24
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d115      	bne.n	8007762 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007736:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007738:	2b00      	cmp	r3, #0
 800773a:	da12      	bge.n	8007762 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800773c:	6879      	ldr	r1, [r7, #4]
 800773e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007740:	4613      	mov	r3, r2
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	4413      	add	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	440b      	add	r3, r1
 800774a:	3317      	adds	r3, #23
 800774c:	2201      	movs	r2, #1
 800774e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007752:	b2db      	uxtb	r3, r3
 8007754:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007758:	b2db      	uxtb	r3, r3
 800775a:	4619      	mov	r1, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 faca 	bl	8007cf6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007764:	3301      	adds	r3, #1
 8007766:	627b      	str	r3, [r7, #36]	@ 0x24
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	791b      	ldrb	r3, [r3, #4]
 800776c:	461a      	mov	r2, r3
 800776e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007770:	4293      	cmp	r3, r2
 8007772:	d3cd      	bcc.n	8007710 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	695a      	ldr	r2, [r3, #20]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007782:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4618      	mov	r0, r3
 800778a:	f008 fe4b 	bl	8010424 <USB_ReadInterrupts>
 800778e:	4603      	mov	r3, r0
 8007790:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007794:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007798:	d156      	bne.n	8007848 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800779a:	2301      	movs	r3, #1
 800779c:	627b      	str	r3, [r7, #36]	@ 0x24
 800779e:	e045      	b.n	800782c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80077a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80077b0:	6879      	ldr	r1, [r7, #4]
 80077b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077b4:	4613      	mov	r3, r2
 80077b6:	00db      	lsls	r3, r3, #3
 80077b8:	4413      	add	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	440b      	add	r3, r1
 80077be:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d12e      	bne.n	8007826 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80077c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	da2b      	bge.n	8007826 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	0c1a      	lsrs	r2, r3, #16
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80077d8:	4053      	eors	r3, r2
 80077da:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d121      	bne.n	8007826 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80077e2:	6879      	ldr	r1, [r7, #4]
 80077e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077e6:	4613      	mov	r3, r2
 80077e8:	00db      	lsls	r3, r3, #3
 80077ea:	4413      	add	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	440b      	add	r3, r1
 80077f0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80077f4:	2201      	movs	r2, #1
 80077f6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10a      	bne.n	8007826 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	69fa      	ldr	r2, [r7, #28]
 800781a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800781e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007822:	6053      	str	r3, [r2, #4]
            break;
 8007824:	e008      	b.n	8007838 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007828:	3301      	adds	r3, #1
 800782a:	627b      	str	r3, [r7, #36]	@ 0x24
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	791b      	ldrb	r3, [r3, #4]
 8007830:	461a      	mov	r2, r3
 8007832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007834:	4293      	cmp	r3, r2
 8007836:	d3b3      	bcc.n	80077a0 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	695a      	ldr	r2, [r3, #20]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007846:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4618      	mov	r0, r3
 800784e:	f008 fde9 	bl	8010424 <USB_ReadInterrupts>
 8007852:	4603      	mov	r3, r0
 8007854:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800785c:	d10a      	bne.n	8007874 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f00b fa3c 	bl	8012cdc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	695a      	ldr	r2, [r3, #20]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007872:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4618      	mov	r0, r3
 800787a:	f008 fdd3 	bl	8010424 <USB_ReadInterrupts>
 800787e:	4603      	mov	r3, r0
 8007880:	f003 0304 	and.w	r3, r3, #4
 8007884:	2b04      	cmp	r3, #4
 8007886:	d115      	bne.n	80078b4 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	f003 0304 	and.w	r3, r3, #4
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f00b fa2c 	bl	8012cf8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6859      	ldr	r1, [r3, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	69ba      	ldr	r2, [r7, #24]
 80078ac:	430a      	orrs	r2, r1
 80078ae:	605a      	str	r2, [r3, #4]
 80078b0:	e000      	b.n	80078b4 <HAL_PCD_IRQHandler+0x996>
      return;
 80078b2:	bf00      	nop
    }
  }
}
 80078b4:	3734      	adds	r7, #52	@ 0x34
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd90      	pop	{r4, r7, pc}

080078ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b082      	sub	sp, #8
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	460b      	mov	r3, r1
 80078c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d101      	bne.n	80078d4 <HAL_PCD_SetAddress+0x1a>
 80078d0:	2302      	movs	r3, #2
 80078d2:	e012      	b.n	80078fa <HAL_PCD_SetAddress+0x40>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	78fa      	ldrb	r2, [r7, #3]
 80078e0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	78fa      	ldrb	r2, [r7, #3]
 80078e8:	4611      	mov	r1, r2
 80078ea:	4618      	mov	r0, r3
 80078ec:	f008 fd32 	bl	8010354 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	4608      	mov	r0, r1
 800790c:	4611      	mov	r1, r2
 800790e:	461a      	mov	r2, r3
 8007910:	4603      	mov	r3, r0
 8007912:	70fb      	strb	r3, [r7, #3]
 8007914:	460b      	mov	r3, r1
 8007916:	803b      	strh	r3, [r7, #0]
 8007918:	4613      	mov	r3, r2
 800791a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007920:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007924:	2b00      	cmp	r3, #0
 8007926:	da0f      	bge.n	8007948 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007928:	78fb      	ldrb	r3, [r7, #3]
 800792a:	f003 020f 	and.w	r2, r3, #15
 800792e:	4613      	mov	r3, r2
 8007930:	00db      	lsls	r3, r3, #3
 8007932:	4413      	add	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	3310      	adds	r3, #16
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	4413      	add	r3, r2
 800793c:	3304      	adds	r3, #4
 800793e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2201      	movs	r2, #1
 8007944:	705a      	strb	r2, [r3, #1]
 8007946:	e00f      	b.n	8007968 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007948:	78fb      	ldrb	r3, [r7, #3]
 800794a:	f003 020f 	and.w	r2, r3, #15
 800794e:	4613      	mov	r3, r2
 8007950:	00db      	lsls	r3, r3, #3
 8007952:	4413      	add	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	4413      	add	r3, r2
 800795e:	3304      	adds	r3, #4
 8007960:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007968:	78fb      	ldrb	r3, [r7, #3]
 800796a:	f003 030f 	and.w	r3, r3, #15
 800796e:	b2da      	uxtb	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007974:	883b      	ldrh	r3, [r7, #0]
 8007976:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	78ba      	ldrb	r2, [r7, #2]
 8007982:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	785b      	ldrb	r3, [r3, #1]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d004      	beq.n	8007996 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	461a      	mov	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007996:	78bb      	ldrb	r3, [r7, #2]
 8007998:	2b02      	cmp	r3, #2
 800799a:	d102      	bne.n	80079a2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d101      	bne.n	80079b0 <HAL_PCD_EP_Open+0xae>
 80079ac:	2302      	movs	r3, #2
 80079ae:	e00e      	b.n	80079ce <HAL_PCD_EP_Open+0xcc>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68f9      	ldr	r1, [r7, #12]
 80079be:	4618      	mov	r0, r3
 80079c0:	f007 feac 	bl	800f71c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80079cc:	7afb      	ldrb	r3, [r7, #11]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b084      	sub	sp, #16
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	460b      	mov	r3, r1
 80079e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80079e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	da0f      	bge.n	8007a0a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079ea:	78fb      	ldrb	r3, [r7, #3]
 80079ec:	f003 020f 	and.w	r2, r3, #15
 80079f0:	4613      	mov	r3, r2
 80079f2:	00db      	lsls	r3, r3, #3
 80079f4:	4413      	add	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	3310      	adds	r3, #16
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	4413      	add	r3, r2
 80079fe:	3304      	adds	r3, #4
 8007a00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2201      	movs	r2, #1
 8007a06:	705a      	strb	r2, [r3, #1]
 8007a08:	e00f      	b.n	8007a2a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a0a:	78fb      	ldrb	r3, [r7, #3]
 8007a0c:	f003 020f 	and.w	r2, r3, #15
 8007a10:	4613      	mov	r3, r2
 8007a12:	00db      	lsls	r3, r3, #3
 8007a14:	4413      	add	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	4413      	add	r3, r2
 8007a20:	3304      	adds	r3, #4
 8007a22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a2a:	78fb      	ldrb	r3, [r7, #3]
 8007a2c:	f003 030f 	and.w	r3, r3, #15
 8007a30:	b2da      	uxtb	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d101      	bne.n	8007a44 <HAL_PCD_EP_Close+0x6e>
 8007a40:	2302      	movs	r3, #2
 8007a42:	e00e      	b.n	8007a62 <HAL_PCD_EP_Close+0x8c>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68f9      	ldr	r1, [r7, #12]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f007 feea 	bl	800f82c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b086      	sub	sp, #24
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	607a      	str	r2, [r7, #4]
 8007a74:	603b      	str	r3, [r7, #0]
 8007a76:	460b      	mov	r3, r1
 8007a78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a7a:	7afb      	ldrb	r3, [r7, #11]
 8007a7c:	f003 020f 	and.w	r2, r3, #15
 8007a80:	4613      	mov	r3, r2
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	4413      	add	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	4413      	add	r3, r2
 8007a90:	3304      	adds	r3, #4
 8007a92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	683a      	ldr	r2, [r7, #0]
 8007a9e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007aac:	7afb      	ldrb	r3, [r7, #11]
 8007aae:	f003 030f 	and.w	r3, r3, #15
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	799b      	ldrb	r3, [r3, #6]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d102      	bne.n	8007ac6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6818      	ldr	r0, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	799b      	ldrb	r3, [r3, #6]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	6979      	ldr	r1, [r7, #20]
 8007ad2:	f007 ff87 	bl	800f9e4 <USB_EPStartXfer>

  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3718      	adds	r7, #24
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007aec:	78fb      	ldrb	r3, [r7, #3]
 8007aee:	f003 020f 	and.w	r2, r3, #15
 8007af2:	6879      	ldr	r1, [r7, #4]
 8007af4:	4613      	mov	r3, r2
 8007af6:	00db      	lsls	r3, r3, #3
 8007af8:	4413      	add	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	440b      	add	r3, r1
 8007afe:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007b02:	681b      	ldr	r3, [r3, #0]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	607a      	str	r2, [r7, #4]
 8007b1a:	603b      	str	r3, [r7, #0]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b20:	7afb      	ldrb	r3, [r7, #11]
 8007b22:	f003 020f 	and.w	r2, r3, #15
 8007b26:	4613      	mov	r3, r2
 8007b28:	00db      	lsls	r3, r3, #3
 8007b2a:	4413      	add	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	3310      	adds	r3, #16
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	4413      	add	r3, r2
 8007b34:	3304      	adds	r3, #4
 8007b36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	2200      	movs	r2, #0
 8007b48:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b50:	7afb      	ldrb	r3, [r7, #11]
 8007b52:	f003 030f 	and.w	r3, r3, #15
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	799b      	ldrb	r3, [r3, #6]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d102      	bne.n	8007b6a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6818      	ldr	r0, [r3, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	799b      	ldrb	r3, [r3, #6]
 8007b72:	461a      	mov	r2, r3
 8007b74:	6979      	ldr	r1, [r7, #20]
 8007b76:	f007 ff35 	bl	800f9e4 <USB_EPStartXfer>

  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3718      	adds	r7, #24
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007b90:	78fb      	ldrb	r3, [r7, #3]
 8007b92:	f003 030f 	and.w	r3, r3, #15
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	7912      	ldrb	r2, [r2, #4]
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d901      	bls.n	8007ba2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e04f      	b.n	8007c42 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007ba2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	da0f      	bge.n	8007bca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007baa:	78fb      	ldrb	r3, [r7, #3]
 8007bac:	f003 020f 	and.w	r2, r3, #15
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	00db      	lsls	r3, r3, #3
 8007bb4:	4413      	add	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	3310      	adds	r3, #16
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	705a      	strb	r2, [r3, #1]
 8007bc8:	e00d      	b.n	8007be6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007bca:	78fa      	ldrb	r2, [r7, #3]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	4413      	add	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	4413      	add	r3, r2
 8007bdc:	3304      	adds	r3, #4
 8007bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2201      	movs	r2, #1
 8007bea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007bec:	78fb      	ldrb	r3, [r7, #3]
 8007bee:	f003 030f 	and.w	r3, r3, #15
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d101      	bne.n	8007c06 <HAL_PCD_EP_SetStall+0x82>
 8007c02:	2302      	movs	r3, #2
 8007c04:	e01d      	b.n	8007c42 <HAL_PCD_EP_SetStall+0xbe>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68f9      	ldr	r1, [r7, #12]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f008 fac9 	bl	80101ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007c1a:	78fb      	ldrb	r3, [r7, #3]
 8007c1c:	f003 030f 	and.w	r3, r3, #15
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d109      	bne.n	8007c38 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6818      	ldr	r0, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	7999      	ldrb	r1, [r3, #6]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007c32:	461a      	mov	r2, r3
 8007c34:	f008 fcbc 	bl	80105b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
 8007c52:	460b      	mov	r3, r1
 8007c54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007c56:	78fb      	ldrb	r3, [r7, #3]
 8007c58:	f003 030f 	and.w	r3, r3, #15
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	7912      	ldrb	r2, [r2, #4]
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d901      	bls.n	8007c68 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e042      	b.n	8007cee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007c68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	da0f      	bge.n	8007c90 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c70:	78fb      	ldrb	r3, [r7, #3]
 8007c72:	f003 020f 	and.w	r2, r3, #15
 8007c76:	4613      	mov	r3, r2
 8007c78:	00db      	lsls	r3, r3, #3
 8007c7a:	4413      	add	r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	3310      	adds	r3, #16
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	4413      	add	r3, r2
 8007c84:	3304      	adds	r3, #4
 8007c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	705a      	strb	r2, [r3, #1]
 8007c8e:	e00f      	b.n	8007cb0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c90:	78fb      	ldrb	r3, [r7, #3]
 8007c92:	f003 020f 	and.w	r2, r3, #15
 8007c96:	4613      	mov	r3, r2
 8007c98:	00db      	lsls	r3, r3, #3
 8007c9a:	4413      	add	r3, r2
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007cb6:	78fb      	ldrb	r3, [r7, #3]
 8007cb8:	f003 030f 	and.w	r3, r3, #15
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d101      	bne.n	8007cd0 <HAL_PCD_EP_ClrStall+0x86>
 8007ccc:	2302      	movs	r3, #2
 8007cce:	e00e      	b.n	8007cee <HAL_PCD_EP_ClrStall+0xa4>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68f9      	ldr	r1, [r7, #12]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f008 fad2 	bl	8010288 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	460b      	mov	r3, r1
 8007d00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007d02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	da0c      	bge.n	8007d24 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d0a:	78fb      	ldrb	r3, [r7, #3]
 8007d0c:	f003 020f 	and.w	r2, r3, #15
 8007d10:	4613      	mov	r3, r2
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	4413      	add	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	3310      	adds	r3, #16
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	3304      	adds	r3, #4
 8007d20:	60fb      	str	r3, [r7, #12]
 8007d22:	e00c      	b.n	8007d3e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d24:	78fb      	ldrb	r3, [r7, #3]
 8007d26:	f003 020f 	and.w	r2, r3, #15
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	00db      	lsls	r3, r3, #3
 8007d2e:	4413      	add	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	4413      	add	r3, r2
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68f9      	ldr	r1, [r7, #12]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f008 f8f1 	bl	800ff2c <USB_EPStopXfer>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007d4e:	7afb      	ldrb	r3, [r7, #11]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08a      	sub	sp, #40	@ 0x28
 8007d5c:	af02      	add	r7, sp, #8
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	00db      	lsls	r3, r3, #3
 8007d72:	4413      	add	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	3310      	adds	r3, #16
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	695a      	ldr	r2, [r3, #20]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d901      	bls.n	8007d90 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e06b      	b.n	8007e68 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	691a      	ldr	r2, [r3, #16]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	69fa      	ldr	r2, [r7, #28]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d902      	bls.n	8007dac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	3303      	adds	r3, #3
 8007db0:	089b      	lsrs	r3, r3, #2
 8007db2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007db4:	e02a      	b.n	8007e0c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	691a      	ldr	r2, [r3, #16]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	69fa      	ldr	r2, [r7, #28]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d902      	bls.n	8007dd2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	3303      	adds	r3, #3
 8007dd6:	089b      	lsrs	r3, r3, #2
 8007dd8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	68d9      	ldr	r1, [r3, #12]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	4603      	mov	r3, r0
 8007dee:	6978      	ldr	r0, [r7, #20]
 8007df0:	f008 f946 	bl	8010080 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	68da      	ldr	r2, [r3, #12]
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	441a      	add	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	695a      	ldr	r2, [r3, #20]
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	441a      	add	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d809      	bhi.n	8007e36 <PCD_WriteEmptyTxFifo+0xde>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	695a      	ldr	r2, [r3, #20]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d203      	bcs.n	8007e36 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1bf      	bne.n	8007db6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	691a      	ldr	r2, [r3, #16]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d811      	bhi.n	8007e66 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	f003 030f 	and.w	r3, r3, #15
 8007e48:	2201      	movs	r2, #1
 8007e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	43db      	mvns	r3, r3
 8007e5c:	6939      	ldr	r1, [r7, #16]
 8007e5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e62:	4013      	ands	r3, r2
 8007e64:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3720      	adds	r7, #32
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b088      	sub	sp, #32
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	333c      	adds	r3, #60	@ 0x3c
 8007e88:	3304      	adds	r3, #4
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	799b      	ldrb	r3, [r3, #6]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d17b      	bne.n	8007f9e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	f003 0308 	and.w	r3, r3, #8
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d015      	beq.n	8007edc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	4a61      	ldr	r2, [pc, #388]	@ (8008038 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	f240 80b9 	bls.w	800802c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 80b3 	beq.w	800802c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ed8:	6093      	str	r3, [r2, #8]
 8007eda:	e0a7      	b.n	800802c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	f003 0320 	and.w	r3, r3, #32
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d009      	beq.n	8007efa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	015a      	lsls	r2, r3, #5
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	4413      	add	r3, r2
 8007eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	2320      	movs	r3, #32
 8007ef6:	6093      	str	r3, [r2, #8]
 8007ef8:	e098      	b.n	800802c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f040 8093 	bne.w	800802c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	4a4b      	ldr	r2, [pc, #300]	@ (8008038 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d90f      	bls.n	8007f2e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00a      	beq.n	8007f2e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	015a      	lsls	r2, r3, #5
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	4413      	add	r3, r2
 8007f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f24:	461a      	mov	r2, r3
 8007f26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f2a:	6093      	str	r3, [r2, #8]
 8007f2c:	e07e      	b.n	800802c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	4613      	mov	r3, r2
 8007f32:	00db      	lsls	r3, r3, #3
 8007f34:	4413      	add	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	4413      	add	r3, r2
 8007f40:	3304      	adds	r3, #4
 8007f42:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6a1a      	ldr	r2, [r3, #32]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	0159      	lsls	r1, r3, #5
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	440b      	add	r3, r1
 8007f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f5a:	1ad2      	subs	r2, r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d114      	bne.n	8007f90 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d109      	bne.n	8007f82 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6818      	ldr	r0, [r3, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007f78:	461a      	mov	r2, r3
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	f008 fb18 	bl	80105b0 <USB_EP0_OutStart>
 8007f80:	e006      	b.n	8007f90 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	68da      	ldr	r2, [r3, #12]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	441a      	add	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	4619      	mov	r1, r3
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f00a fddc 	bl	8012b54 <HAL_PCD_DataOutStageCallback>
 8007f9c:	e046      	b.n	800802c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	4a26      	ldr	r2, [pc, #152]	@ (800803c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d124      	bne.n	8007ff0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00a      	beq.n	8007fc6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fc2:	6093      	str	r3, [r2, #8]
 8007fc4:	e032      	b.n	800802c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f003 0320 	and.w	r3, r3, #32
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d008      	beq.n	8007fe2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fdc:	461a      	mov	r2, r3
 8007fde:	2320      	movs	r3, #32
 8007fe0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f00a fdb3 	bl	8012b54 <HAL_PCD_DataOutStageCallback>
 8007fee:	e01d      	b.n	800802c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d114      	bne.n	8008020 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007ff6:	6879      	ldr	r1, [r7, #4]
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	00db      	lsls	r3, r3, #3
 8007ffe:	4413      	add	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	440b      	add	r3, r1
 8008004:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d108      	bne.n	8008020 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6818      	ldr	r0, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008018:	461a      	mov	r2, r3
 800801a:	2100      	movs	r1, #0
 800801c:	f008 fac8 	bl	80105b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	b2db      	uxtb	r3, r3
 8008024:	4619      	mov	r1, r3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f00a fd94 	bl	8012b54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3720      	adds	r7, #32
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	4f54300a 	.word	0x4f54300a
 800803c:	4f54310a 	.word	0x4f54310a

08008040 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	333c      	adds	r3, #60	@ 0x3c
 8008058:	3304      	adds	r3, #4
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	4413      	add	r3, r2
 8008066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	4a15      	ldr	r2, [pc, #84]	@ (80080c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d90e      	bls.n	8008094 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800807c:	2b00      	cmp	r3, #0
 800807e:	d009      	beq.n	8008094 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800808c:	461a      	mov	r2, r3
 800808e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008092:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f00a fd4b 	bl	8012b30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	4a0a      	ldr	r2, [pc, #40]	@ (80080c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d90c      	bls.n	80080bc <PCD_EP_OutSetupPacket_int+0x7c>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	799b      	ldrb	r3, [r3, #6]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d108      	bne.n	80080bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6818      	ldr	r0, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80080b4:	461a      	mov	r2, r3
 80080b6:	2101      	movs	r1, #1
 80080b8:	f008 fa7a 	bl	80105b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3718      	adds	r7, #24
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	4f54300a 	.word	0x4f54300a

080080cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	460b      	mov	r3, r1
 80080d6:	70fb      	strb	r3, [r7, #3]
 80080d8:	4613      	mov	r3, r2
 80080da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80080e4:	78fb      	ldrb	r3, [r7, #3]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d107      	bne.n	80080fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80080ea:	883b      	ldrh	r3, [r7, #0]
 80080ec:	0419      	lsls	r1, r3, #16
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	430a      	orrs	r2, r1
 80080f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80080f8:	e028      	b.n	800814c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008100:	0c1b      	lsrs	r3, r3, #16
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	4413      	add	r3, r2
 8008106:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008108:	2300      	movs	r3, #0
 800810a:	73fb      	strb	r3, [r7, #15]
 800810c:	e00d      	b.n	800812a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	7bfb      	ldrb	r3, [r7, #15]
 8008114:	3340      	adds	r3, #64	@ 0x40
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	0c1b      	lsrs	r3, r3, #16
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	4413      	add	r3, r2
 8008122:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008124:	7bfb      	ldrb	r3, [r7, #15]
 8008126:	3301      	adds	r3, #1
 8008128:	73fb      	strb	r3, [r7, #15]
 800812a:	7bfa      	ldrb	r2, [r7, #15]
 800812c:	78fb      	ldrb	r3, [r7, #3]
 800812e:	3b01      	subs	r3, #1
 8008130:	429a      	cmp	r2, r3
 8008132:	d3ec      	bcc.n	800810e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008134:	883b      	ldrh	r3, [r7, #0]
 8008136:	0418      	lsls	r0, r3, #16
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6819      	ldr	r1, [r3, #0]
 800813c:	78fb      	ldrb	r3, [r7, #3]
 800813e:	3b01      	subs	r3, #1
 8008140:	68ba      	ldr	r2, [r7, #8]
 8008142:	4302      	orrs	r2, r0
 8008144:	3340      	adds	r3, #64	@ 0x40
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	440b      	add	r3, r1
 800814a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800815a:	b480      	push	{r7}
 800815c:	b083      	sub	sp, #12
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	460b      	mov	r3, r1
 8008164:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	887a      	ldrh	r2, [r7, #2]
 800816c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80081aa:	4b05      	ldr	r3, [pc, #20]	@ (80081c0 <HAL_PCDEx_ActivateLPM+0x44>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	10000003 	.word	0x10000003

080081c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80081e4:	4b19      	ldr	r3, [pc, #100]	@ (800824c <HAL_PWREx_ConfigSupply+0x70>)
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	f003 0304 	and.w	r3, r3, #4
 80081ec:	2b04      	cmp	r3, #4
 80081ee:	d00a      	beq.n	8008206 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80081f0:	4b16      	ldr	r3, [pc, #88]	@ (800824c <HAL_PWREx_ConfigSupply+0x70>)
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	f003 0307 	and.w	r3, r3, #7
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d001      	beq.n	8008202 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e01f      	b.n	8008242 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008202:	2300      	movs	r3, #0
 8008204:	e01d      	b.n	8008242 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008206:	4b11      	ldr	r3, [pc, #68]	@ (800824c <HAL_PWREx_ConfigSupply+0x70>)
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	f023 0207 	bic.w	r2, r3, #7
 800820e:	490f      	ldr	r1, [pc, #60]	@ (800824c <HAL_PWREx_ConfigSupply+0x70>)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4313      	orrs	r3, r2
 8008214:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008216:	f7f9 fddf 	bl	8001dd8 <HAL_GetTick>
 800821a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800821c:	e009      	b.n	8008232 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800821e:	f7f9 fddb 	bl	8001dd8 <HAL_GetTick>
 8008222:	4602      	mov	r2, r0
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800822c:	d901      	bls.n	8008232 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e007      	b.n	8008242 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008232:	4b06      	ldr	r3, [pc, #24]	@ (800824c <HAL_PWREx_ConfigSupply+0x70>)
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800823a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800823e:	d1ee      	bne.n	800821e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	58024800 	.word	0x58024800

08008250 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008250:	b480      	push	{r7}
 8008252:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008254:	4b05      	ldr	r3, [pc, #20]	@ (800826c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	4a04      	ldr	r2, [pc, #16]	@ (800826c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800825a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800825e:	60d3      	str	r3, [r2, #12]
}
 8008260:	bf00      	nop
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	58024800 	.word	0x58024800

08008270 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b08c      	sub	sp, #48	@ 0x30
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d101      	bne.n	8008282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e3c8      	b.n	8008a14 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 8087 	beq.w	800839e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008290:	4b88      	ldr	r3, [pc, #544]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008298:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800829a:	4b86      	ldr	r3, [pc, #536]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 800829c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800829e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80082a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082a2:	2b10      	cmp	r3, #16
 80082a4:	d007      	beq.n	80082b6 <HAL_RCC_OscConfig+0x46>
 80082a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082a8:	2b18      	cmp	r3, #24
 80082aa:	d110      	bne.n	80082ce <HAL_RCC_OscConfig+0x5e>
 80082ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ae:	f003 0303 	and.w	r3, r3, #3
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d10b      	bne.n	80082ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082b6:	4b7f      	ldr	r3, [pc, #508]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d06c      	beq.n	800839c <HAL_RCC_OscConfig+0x12c>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d168      	bne.n	800839c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e3a2      	b.n	8008a14 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082d6:	d106      	bne.n	80082e6 <HAL_RCC_OscConfig+0x76>
 80082d8:	4b76      	ldr	r3, [pc, #472]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a75      	ldr	r2, [pc, #468]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 80082de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082e2:	6013      	str	r3, [r2, #0]
 80082e4:	e02e      	b.n	8008344 <HAL_RCC_OscConfig+0xd4>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10c      	bne.n	8008308 <HAL_RCC_OscConfig+0x98>
 80082ee:	4b71      	ldr	r3, [pc, #452]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a70      	ldr	r2, [pc, #448]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 80082f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082f8:	6013      	str	r3, [r2, #0]
 80082fa:	4b6e      	ldr	r3, [pc, #440]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a6d      	ldr	r2, [pc, #436]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 8008300:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008304:	6013      	str	r3, [r2, #0]
 8008306:	e01d      	b.n	8008344 <HAL_RCC_OscConfig+0xd4>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008310:	d10c      	bne.n	800832c <HAL_RCC_OscConfig+0xbc>
 8008312:	4b68      	ldr	r3, [pc, #416]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a67      	ldr	r2, [pc, #412]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 8008318:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800831c:	6013      	str	r3, [r2, #0]
 800831e:	4b65      	ldr	r3, [pc, #404]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a64      	ldr	r2, [pc, #400]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 8008324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008328:	6013      	str	r3, [r2, #0]
 800832a:	e00b      	b.n	8008344 <HAL_RCC_OscConfig+0xd4>
 800832c:	4b61      	ldr	r3, [pc, #388]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a60      	ldr	r2, [pc, #384]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 8008332:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008336:	6013      	str	r3, [r2, #0]
 8008338:	4b5e      	ldr	r3, [pc, #376]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a5d      	ldr	r2, [pc, #372]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 800833e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d013      	beq.n	8008374 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800834c:	f7f9 fd44 	bl	8001dd8 <HAL_GetTick>
 8008350:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008352:	e008      	b.n	8008366 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008354:	f7f9 fd40 	bl	8001dd8 <HAL_GetTick>
 8008358:	4602      	mov	r2, r0
 800835a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	2b64      	cmp	r3, #100	@ 0x64
 8008360:	d901      	bls.n	8008366 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e356      	b.n	8008a14 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008366:	4b53      	ldr	r3, [pc, #332]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d0f0      	beq.n	8008354 <HAL_RCC_OscConfig+0xe4>
 8008372:	e014      	b.n	800839e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008374:	f7f9 fd30 	bl	8001dd8 <HAL_GetTick>
 8008378:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800837a:	e008      	b.n	800838e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800837c:	f7f9 fd2c 	bl	8001dd8 <HAL_GetTick>
 8008380:	4602      	mov	r2, r0
 8008382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	2b64      	cmp	r3, #100	@ 0x64
 8008388:	d901      	bls.n	800838e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e342      	b.n	8008a14 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800838e:	4b49      	ldr	r3, [pc, #292]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1f0      	bne.n	800837c <HAL_RCC_OscConfig+0x10c>
 800839a:	e000      	b.n	800839e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800839c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 0302 	and.w	r3, r3, #2
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f000 808c 	beq.w	80084c4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083ac:	4b41      	ldr	r3, [pc, #260]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80083b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80083b6:	4b3f      	ldr	r3, [pc, #252]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 80083b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80083bc:	6a3b      	ldr	r3, [r7, #32]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d007      	beq.n	80083d2 <HAL_RCC_OscConfig+0x162>
 80083c2:	6a3b      	ldr	r3, [r7, #32]
 80083c4:	2b18      	cmp	r3, #24
 80083c6:	d137      	bne.n	8008438 <HAL_RCC_OscConfig+0x1c8>
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	f003 0303 	and.w	r3, r3, #3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d132      	bne.n	8008438 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083d2:	4b38      	ldr	r3, [pc, #224]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 0304 	and.w	r3, r3, #4
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d005      	beq.n	80083ea <HAL_RCC_OscConfig+0x17a>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d101      	bne.n	80083ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	e314      	b.n	8008a14 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80083ea:	4b32      	ldr	r3, [pc, #200]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f023 0219 	bic.w	r2, r3, #25
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	492f      	ldr	r1, [pc, #188]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 80083f8:	4313      	orrs	r3, r2
 80083fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083fc:	f7f9 fcec 	bl	8001dd8 <HAL_GetTick>
 8008400:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008402:	e008      	b.n	8008416 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008404:	f7f9 fce8 	bl	8001dd8 <HAL_GetTick>
 8008408:	4602      	mov	r2, r0
 800840a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	2b02      	cmp	r3, #2
 8008410:	d901      	bls.n	8008416 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e2fe      	b.n	8008a14 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008416:	4b27      	ldr	r3, [pc, #156]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f003 0304 	and.w	r3, r3, #4
 800841e:	2b00      	cmp	r3, #0
 8008420:	d0f0      	beq.n	8008404 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008422:	4b24      	ldr	r3, [pc, #144]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	061b      	lsls	r3, r3, #24
 8008430:	4920      	ldr	r1, [pc, #128]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 8008432:	4313      	orrs	r3, r2
 8008434:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008436:	e045      	b.n	80084c4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d026      	beq.n	800848e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008440:	4b1c      	ldr	r3, [pc, #112]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f023 0219 	bic.w	r2, r3, #25
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	4919      	ldr	r1, [pc, #100]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 800844e:	4313      	orrs	r3, r2
 8008450:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008452:	f7f9 fcc1 	bl	8001dd8 <HAL_GetTick>
 8008456:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008458:	e008      	b.n	800846c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800845a:	f7f9 fcbd 	bl	8001dd8 <HAL_GetTick>
 800845e:	4602      	mov	r2, r0
 8008460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	2b02      	cmp	r3, #2
 8008466:	d901      	bls.n	800846c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008468:	2303      	movs	r3, #3
 800846a:	e2d3      	b.n	8008a14 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800846c:	4b11      	ldr	r3, [pc, #68]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0304 	and.w	r3, r3, #4
 8008474:	2b00      	cmp	r3, #0
 8008476:	d0f0      	beq.n	800845a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008478:	4b0e      	ldr	r3, [pc, #56]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	061b      	lsls	r3, r3, #24
 8008486:	490b      	ldr	r1, [pc, #44]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 8008488:	4313      	orrs	r3, r2
 800848a:	604b      	str	r3, [r1, #4]
 800848c:	e01a      	b.n	80084c4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800848e:	4b09      	ldr	r3, [pc, #36]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a08      	ldr	r2, [pc, #32]	@ (80084b4 <HAL_RCC_OscConfig+0x244>)
 8008494:	f023 0301 	bic.w	r3, r3, #1
 8008498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800849a:	f7f9 fc9d 	bl	8001dd8 <HAL_GetTick>
 800849e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80084a0:	e00a      	b.n	80084b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084a2:	f7f9 fc99 	bl	8001dd8 <HAL_GetTick>
 80084a6:	4602      	mov	r2, r0
 80084a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d903      	bls.n	80084b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e2af      	b.n	8008a14 <HAL_RCC_OscConfig+0x7a4>
 80084b4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80084b8:	4b96      	ldr	r3, [pc, #600]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0304 	and.w	r3, r3, #4
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1ee      	bne.n	80084a2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0310 	and.w	r3, r3, #16
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d06a      	beq.n	80085a6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084d0:	4b90      	ldr	r3, [pc, #576]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084d8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80084da:	4b8e      	ldr	r3, [pc, #568]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 80084dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084de:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	2b08      	cmp	r3, #8
 80084e4:	d007      	beq.n	80084f6 <HAL_RCC_OscConfig+0x286>
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	2b18      	cmp	r3, #24
 80084ea:	d11b      	bne.n	8008524 <HAL_RCC_OscConfig+0x2b4>
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	f003 0303 	and.w	r3, r3, #3
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d116      	bne.n	8008524 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084f6:	4b87      	ldr	r3, [pc, #540]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d005      	beq.n	800850e <HAL_RCC_OscConfig+0x29e>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	2b80      	cmp	r3, #128	@ 0x80
 8008508:	d001      	beq.n	800850e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e282      	b.n	8008a14 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800850e:	4b81      	ldr	r3, [pc, #516]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	061b      	lsls	r3, r3, #24
 800851c:	497d      	ldr	r1, [pc, #500]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 800851e:	4313      	orrs	r3, r2
 8008520:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008522:	e040      	b.n	80085a6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	69db      	ldr	r3, [r3, #28]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d023      	beq.n	8008574 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800852c:	4b79      	ldr	r3, [pc, #484]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a78      	ldr	r2, [pc, #480]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 8008532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008538:	f7f9 fc4e 	bl	8001dd8 <HAL_GetTick>
 800853c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800853e:	e008      	b.n	8008552 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008540:	f7f9 fc4a 	bl	8001dd8 <HAL_GetTick>
 8008544:	4602      	mov	r2, r0
 8008546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	2b02      	cmp	r3, #2
 800854c:	d901      	bls.n	8008552 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800854e:	2303      	movs	r3, #3
 8008550:	e260      	b.n	8008a14 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008552:	4b70      	ldr	r3, [pc, #448]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800855a:	2b00      	cmp	r3, #0
 800855c:	d0f0      	beq.n	8008540 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800855e:	4b6d      	ldr	r3, [pc, #436]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	061b      	lsls	r3, r3, #24
 800856c:	4969      	ldr	r1, [pc, #420]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 800856e:	4313      	orrs	r3, r2
 8008570:	60cb      	str	r3, [r1, #12]
 8008572:	e018      	b.n	80085a6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008574:	4b67      	ldr	r3, [pc, #412]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a66      	ldr	r2, [pc, #408]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 800857a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800857e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008580:	f7f9 fc2a 	bl	8001dd8 <HAL_GetTick>
 8008584:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008586:	e008      	b.n	800859a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008588:	f7f9 fc26 	bl	8001dd8 <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	2b02      	cmp	r3, #2
 8008594:	d901      	bls.n	800859a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e23c      	b.n	8008a14 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800859a:	4b5e      	ldr	r3, [pc, #376]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1f0      	bne.n	8008588 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 0308 	and.w	r3, r3, #8
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d036      	beq.n	8008620 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d019      	beq.n	80085ee <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085ba:	4b56      	ldr	r3, [pc, #344]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 80085bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085be:	4a55      	ldr	r2, [pc, #340]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 80085c0:	f043 0301 	orr.w	r3, r3, #1
 80085c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085c6:	f7f9 fc07 	bl	8001dd8 <HAL_GetTick>
 80085ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80085cc:	e008      	b.n	80085e0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085ce:	f7f9 fc03 	bl	8001dd8 <HAL_GetTick>
 80085d2:	4602      	mov	r2, r0
 80085d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d6:	1ad3      	subs	r3, r2, r3
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d901      	bls.n	80085e0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80085dc:	2303      	movs	r3, #3
 80085de:	e219      	b.n	8008a14 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80085e0:	4b4c      	ldr	r3, [pc, #304]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 80085e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085e4:	f003 0302 	and.w	r3, r3, #2
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d0f0      	beq.n	80085ce <HAL_RCC_OscConfig+0x35e>
 80085ec:	e018      	b.n	8008620 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085ee:	4b49      	ldr	r3, [pc, #292]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 80085f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085f2:	4a48      	ldr	r2, [pc, #288]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 80085f4:	f023 0301 	bic.w	r3, r3, #1
 80085f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085fa:	f7f9 fbed 	bl	8001dd8 <HAL_GetTick>
 80085fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008600:	e008      	b.n	8008614 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008602:	f7f9 fbe9 	bl	8001dd8 <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	2b02      	cmp	r3, #2
 800860e:	d901      	bls.n	8008614 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e1ff      	b.n	8008a14 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008614:	4b3f      	ldr	r3, [pc, #252]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 8008616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008618:	f003 0302 	and.w	r3, r3, #2
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1f0      	bne.n	8008602 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0320 	and.w	r3, r3, #32
 8008628:	2b00      	cmp	r3, #0
 800862a:	d036      	beq.n	800869a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	699b      	ldr	r3, [r3, #24]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d019      	beq.n	8008668 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008634:	4b37      	ldr	r3, [pc, #220]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a36      	ldr	r2, [pc, #216]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 800863a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800863e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008640:	f7f9 fbca 	bl	8001dd8 <HAL_GetTick>
 8008644:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008646:	e008      	b.n	800865a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008648:	f7f9 fbc6 	bl	8001dd8 <HAL_GetTick>
 800864c:	4602      	mov	r2, r0
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	2b02      	cmp	r3, #2
 8008654:	d901      	bls.n	800865a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008656:	2303      	movs	r3, #3
 8008658:	e1dc      	b.n	8008a14 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800865a:	4b2e      	ldr	r3, [pc, #184]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008662:	2b00      	cmp	r3, #0
 8008664:	d0f0      	beq.n	8008648 <HAL_RCC_OscConfig+0x3d8>
 8008666:	e018      	b.n	800869a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008668:	4b2a      	ldr	r3, [pc, #168]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a29      	ldr	r2, [pc, #164]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 800866e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008672:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008674:	f7f9 fbb0 	bl	8001dd8 <HAL_GetTick>
 8008678:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800867a:	e008      	b.n	800868e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800867c:	f7f9 fbac 	bl	8001dd8 <HAL_GetTick>
 8008680:	4602      	mov	r2, r0
 8008682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	2b02      	cmp	r3, #2
 8008688:	d901      	bls.n	800868e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e1c2      	b.n	8008a14 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800868e:	4b21      	ldr	r3, [pc, #132]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1f0      	bne.n	800867c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0304 	and.w	r3, r3, #4
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f000 8086 	beq.w	80087b4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80086a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008718 <HAL_RCC_OscConfig+0x4a8>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a1a      	ldr	r2, [pc, #104]	@ (8008718 <HAL_RCC_OscConfig+0x4a8>)
 80086ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80086b4:	f7f9 fb90 	bl	8001dd8 <HAL_GetTick>
 80086b8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086ba:	e008      	b.n	80086ce <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086bc:	f7f9 fb8c 	bl	8001dd8 <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	2b64      	cmp	r3, #100	@ 0x64
 80086c8:	d901      	bls.n	80086ce <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e1a2      	b.n	8008a14 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086ce:	4b12      	ldr	r3, [pc, #72]	@ (8008718 <HAL_RCC_OscConfig+0x4a8>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d0f0      	beq.n	80086bc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d106      	bne.n	80086f0 <HAL_RCC_OscConfig+0x480>
 80086e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 80086e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086e6:	4a0b      	ldr	r2, [pc, #44]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 80086e8:	f043 0301 	orr.w	r3, r3, #1
 80086ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80086ee:	e032      	b.n	8008756 <HAL_RCC_OscConfig+0x4e6>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d111      	bne.n	800871c <HAL_RCC_OscConfig+0x4ac>
 80086f8:	4b06      	ldr	r3, [pc, #24]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 80086fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086fc:	4a05      	ldr	r2, [pc, #20]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 80086fe:	f023 0301 	bic.w	r3, r3, #1
 8008702:	6713      	str	r3, [r2, #112]	@ 0x70
 8008704:	4b03      	ldr	r3, [pc, #12]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 8008706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008708:	4a02      	ldr	r2, [pc, #8]	@ (8008714 <HAL_RCC_OscConfig+0x4a4>)
 800870a:	f023 0304 	bic.w	r3, r3, #4
 800870e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008710:	e021      	b.n	8008756 <HAL_RCC_OscConfig+0x4e6>
 8008712:	bf00      	nop
 8008714:	58024400 	.word	0x58024400
 8008718:	58024800 	.word	0x58024800
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	2b05      	cmp	r3, #5
 8008722:	d10c      	bne.n	800873e <HAL_RCC_OscConfig+0x4ce>
 8008724:	4b83      	ldr	r3, [pc, #524]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 8008726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008728:	4a82      	ldr	r2, [pc, #520]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 800872a:	f043 0304 	orr.w	r3, r3, #4
 800872e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008730:	4b80      	ldr	r3, [pc, #512]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 8008732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008734:	4a7f      	ldr	r2, [pc, #508]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 8008736:	f043 0301 	orr.w	r3, r3, #1
 800873a:	6713      	str	r3, [r2, #112]	@ 0x70
 800873c:	e00b      	b.n	8008756 <HAL_RCC_OscConfig+0x4e6>
 800873e:	4b7d      	ldr	r3, [pc, #500]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 8008740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008742:	4a7c      	ldr	r2, [pc, #496]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 8008744:	f023 0301 	bic.w	r3, r3, #1
 8008748:	6713      	str	r3, [r2, #112]	@ 0x70
 800874a:	4b7a      	ldr	r3, [pc, #488]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 800874c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800874e:	4a79      	ldr	r2, [pc, #484]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 8008750:	f023 0304 	bic.w	r3, r3, #4
 8008754:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d015      	beq.n	800878a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800875e:	f7f9 fb3b 	bl	8001dd8 <HAL_GetTick>
 8008762:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008764:	e00a      	b.n	800877c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008766:	f7f9 fb37 	bl	8001dd8 <HAL_GetTick>
 800876a:	4602      	mov	r2, r0
 800876c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008774:	4293      	cmp	r3, r2
 8008776:	d901      	bls.n	800877c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	e14b      	b.n	8008a14 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800877c:	4b6d      	ldr	r3, [pc, #436]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 800877e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008780:	f003 0302 	and.w	r3, r3, #2
 8008784:	2b00      	cmp	r3, #0
 8008786:	d0ee      	beq.n	8008766 <HAL_RCC_OscConfig+0x4f6>
 8008788:	e014      	b.n	80087b4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800878a:	f7f9 fb25 	bl	8001dd8 <HAL_GetTick>
 800878e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008790:	e00a      	b.n	80087a8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008792:	f7f9 fb21 	bl	8001dd8 <HAL_GetTick>
 8008796:	4602      	mov	r2, r0
 8008798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d901      	bls.n	80087a8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e135      	b.n	8008a14 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80087a8:	4b62      	ldr	r3, [pc, #392]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 80087aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087ac:	f003 0302 	and.w	r3, r3, #2
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1ee      	bne.n	8008792 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f000 812a 	beq.w	8008a12 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80087be:	4b5d      	ldr	r3, [pc, #372]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80087c6:	2b18      	cmp	r3, #24
 80087c8:	f000 80ba 	beq.w	8008940 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	f040 8095 	bne.w	8008900 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087d6:	4b57      	ldr	r3, [pc, #348]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a56      	ldr	r2, [pc, #344]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 80087dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e2:	f7f9 faf9 	bl	8001dd8 <HAL_GetTick>
 80087e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087e8:	e008      	b.n	80087fc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087ea:	f7f9 faf5 	bl	8001dd8 <HAL_GetTick>
 80087ee:	4602      	mov	r2, r0
 80087f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d901      	bls.n	80087fc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80087f8:	2303      	movs	r3, #3
 80087fa:	e10b      	b.n	8008a14 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087fc:	4b4d      	ldr	r3, [pc, #308]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1f0      	bne.n	80087ea <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008808:	4b4a      	ldr	r3, [pc, #296]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 800880a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800880c:	4b4a      	ldr	r3, [pc, #296]	@ (8008938 <HAL_RCC_OscConfig+0x6c8>)
 800880e:	4013      	ands	r3, r2
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008818:	0112      	lsls	r2, r2, #4
 800881a:	430a      	orrs	r2, r1
 800881c:	4945      	ldr	r1, [pc, #276]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 800881e:	4313      	orrs	r3, r2
 8008820:	628b      	str	r3, [r1, #40]	@ 0x28
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008826:	3b01      	subs	r3, #1
 8008828:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008830:	3b01      	subs	r3, #1
 8008832:	025b      	lsls	r3, r3, #9
 8008834:	b29b      	uxth	r3, r3
 8008836:	431a      	orrs	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800883c:	3b01      	subs	r3, #1
 800883e:	041b      	lsls	r3, r3, #16
 8008840:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008844:	431a      	orrs	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800884a:	3b01      	subs	r3, #1
 800884c:	061b      	lsls	r3, r3, #24
 800884e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008852:	4938      	ldr	r1, [pc, #224]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 8008854:	4313      	orrs	r3, r2
 8008856:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008858:	4b36      	ldr	r3, [pc, #216]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 800885a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800885c:	4a35      	ldr	r2, [pc, #212]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 800885e:	f023 0301 	bic.w	r3, r3, #1
 8008862:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008864:	4b33      	ldr	r3, [pc, #204]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 8008866:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008868:	4b34      	ldr	r3, [pc, #208]	@ (800893c <HAL_RCC_OscConfig+0x6cc>)
 800886a:	4013      	ands	r3, r2
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008870:	00d2      	lsls	r2, r2, #3
 8008872:	4930      	ldr	r1, [pc, #192]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 8008874:	4313      	orrs	r3, r2
 8008876:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008878:	4b2e      	ldr	r3, [pc, #184]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 800887a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800887c:	f023 020c 	bic.w	r2, r3, #12
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008884:	492b      	ldr	r1, [pc, #172]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 8008886:	4313      	orrs	r3, r2
 8008888:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800888a:	4b2a      	ldr	r3, [pc, #168]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 800888c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800888e:	f023 0202 	bic.w	r2, r3, #2
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008896:	4927      	ldr	r1, [pc, #156]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 8008898:	4313      	orrs	r3, r2
 800889a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800889c:	4b25      	ldr	r3, [pc, #148]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 800889e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a0:	4a24      	ldr	r2, [pc, #144]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 80088a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088a8:	4b22      	ldr	r3, [pc, #136]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 80088aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ac:	4a21      	ldr	r2, [pc, #132]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 80088ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80088b4:	4b1f      	ldr	r3, [pc, #124]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 80088b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b8:	4a1e      	ldr	r2, [pc, #120]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 80088ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80088be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80088c0:	4b1c      	ldr	r3, [pc, #112]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 80088c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088c4:	4a1b      	ldr	r2, [pc, #108]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 80088c6:	f043 0301 	orr.w	r3, r3, #1
 80088ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088cc:	4b19      	ldr	r3, [pc, #100]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a18      	ldr	r2, [pc, #96]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 80088d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80088d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088d8:	f7f9 fa7e 	bl	8001dd8 <HAL_GetTick>
 80088dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80088de:	e008      	b.n	80088f2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088e0:	f7f9 fa7a 	bl	8001dd8 <HAL_GetTick>
 80088e4:	4602      	mov	r2, r0
 80088e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d901      	bls.n	80088f2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e090      	b.n	8008a14 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80088f2:	4b10      	ldr	r3, [pc, #64]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0f0      	beq.n	80088e0 <HAL_RCC_OscConfig+0x670>
 80088fe:	e088      	b.n	8008a12 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008900:	4b0c      	ldr	r3, [pc, #48]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a0b      	ldr	r2, [pc, #44]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 8008906:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800890a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800890c:	f7f9 fa64 	bl	8001dd8 <HAL_GetTick>
 8008910:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008912:	e008      	b.n	8008926 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008914:	f7f9 fa60 	bl	8001dd8 <HAL_GetTick>
 8008918:	4602      	mov	r2, r0
 800891a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	2b02      	cmp	r3, #2
 8008920:	d901      	bls.n	8008926 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e076      	b.n	8008a14 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008926:	4b03      	ldr	r3, [pc, #12]	@ (8008934 <HAL_RCC_OscConfig+0x6c4>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1f0      	bne.n	8008914 <HAL_RCC_OscConfig+0x6a4>
 8008932:	e06e      	b.n	8008a12 <HAL_RCC_OscConfig+0x7a2>
 8008934:	58024400 	.word	0x58024400
 8008938:	fffffc0c 	.word	0xfffffc0c
 800893c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008940:	4b36      	ldr	r3, [pc, #216]	@ (8008a1c <HAL_RCC_OscConfig+0x7ac>)
 8008942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008944:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008946:	4b35      	ldr	r3, [pc, #212]	@ (8008a1c <HAL_RCC_OscConfig+0x7ac>)
 8008948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800894a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008950:	2b01      	cmp	r3, #1
 8008952:	d031      	beq.n	80089b8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	f003 0203 	and.w	r2, r3, #3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800895e:	429a      	cmp	r2, r3
 8008960:	d12a      	bne.n	80089b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	091b      	lsrs	r3, r3, #4
 8008966:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800896e:	429a      	cmp	r2, r3
 8008970:	d122      	bne.n	80089b8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800897c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800897e:	429a      	cmp	r2, r3
 8008980:	d11a      	bne.n	80089b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	0a5b      	lsrs	r3, r3, #9
 8008986:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800898e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008990:	429a      	cmp	r2, r3
 8008992:	d111      	bne.n	80089b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	0c1b      	lsrs	r3, r3, #16
 8008998:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d108      	bne.n	80089b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	0e1b      	lsrs	r3, r3, #24
 80089aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d001      	beq.n	80089bc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e02b      	b.n	8008a14 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80089bc:	4b17      	ldr	r3, [pc, #92]	@ (8008a1c <HAL_RCC_OscConfig+0x7ac>)
 80089be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089c0:	08db      	lsrs	r3, r3, #3
 80089c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d01f      	beq.n	8008a12 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80089d2:	4b12      	ldr	r3, [pc, #72]	@ (8008a1c <HAL_RCC_OscConfig+0x7ac>)
 80089d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d6:	4a11      	ldr	r2, [pc, #68]	@ (8008a1c <HAL_RCC_OscConfig+0x7ac>)
 80089d8:	f023 0301 	bic.w	r3, r3, #1
 80089dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80089de:	f7f9 f9fb 	bl	8001dd8 <HAL_GetTick>
 80089e2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80089e4:	bf00      	nop
 80089e6:	f7f9 f9f7 	bl	8001dd8 <HAL_GetTick>
 80089ea:	4602      	mov	r2, r0
 80089ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d0f9      	beq.n	80089e6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80089f2:	4b0a      	ldr	r3, [pc, #40]	@ (8008a1c <HAL_RCC_OscConfig+0x7ac>)
 80089f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089f6:	4b0a      	ldr	r3, [pc, #40]	@ (8008a20 <HAL_RCC_OscConfig+0x7b0>)
 80089f8:	4013      	ands	r3, r2
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80089fe:	00d2      	lsls	r2, r2, #3
 8008a00:	4906      	ldr	r1, [pc, #24]	@ (8008a1c <HAL_RCC_OscConfig+0x7ac>)
 8008a02:	4313      	orrs	r3, r2
 8008a04:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008a06:	4b05      	ldr	r3, [pc, #20]	@ (8008a1c <HAL_RCC_OscConfig+0x7ac>)
 8008a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a0a:	4a04      	ldr	r2, [pc, #16]	@ (8008a1c <HAL_RCC_OscConfig+0x7ac>)
 8008a0c:	f043 0301 	orr.w	r3, r3, #1
 8008a10:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3730      	adds	r7, #48	@ 0x30
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	58024400 	.word	0x58024400
 8008a20:	ffff0007 	.word	0xffff0007

08008a24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d101      	bne.n	8008a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	e19c      	b.n	8008d72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008a38:	4b8a      	ldr	r3, [pc, #552]	@ (8008c64 <HAL_RCC_ClockConfig+0x240>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 030f 	and.w	r3, r3, #15
 8008a40:	683a      	ldr	r2, [r7, #0]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d910      	bls.n	8008a68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a46:	4b87      	ldr	r3, [pc, #540]	@ (8008c64 <HAL_RCC_ClockConfig+0x240>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f023 020f 	bic.w	r2, r3, #15
 8008a4e:	4985      	ldr	r1, [pc, #532]	@ (8008c64 <HAL_RCC_ClockConfig+0x240>)
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a56:	4b83      	ldr	r3, [pc, #524]	@ (8008c64 <HAL_RCC_ClockConfig+0x240>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 030f 	and.w	r3, r3, #15
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d001      	beq.n	8008a68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e184      	b.n	8008d72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0304 	and.w	r3, r3, #4
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d010      	beq.n	8008a96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	691a      	ldr	r2, [r3, #16]
 8008a78:	4b7b      	ldr	r3, [pc, #492]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d908      	bls.n	8008a96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a84:	4b78      	ldr	r3, [pc, #480]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	4975      	ldr	r1, [pc, #468]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008a92:	4313      	orrs	r3, r2
 8008a94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 0308 	and.w	r3, r3, #8
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d010      	beq.n	8008ac4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	695a      	ldr	r2, [r3, #20]
 8008aa6:	4b70      	ldr	r3, [pc, #448]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d908      	bls.n	8008ac4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ab2:	4b6d      	ldr	r3, [pc, #436]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	496a      	ldr	r1, [pc, #424]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 0310 	and.w	r3, r3, #16
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d010      	beq.n	8008af2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	699a      	ldr	r2, [r3, #24]
 8008ad4:	4b64      	ldr	r3, [pc, #400]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008ad6:	69db      	ldr	r3, [r3, #28]
 8008ad8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d908      	bls.n	8008af2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ae0:	4b61      	ldr	r3, [pc, #388]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008ae2:	69db      	ldr	r3, [r3, #28]
 8008ae4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	495e      	ldr	r1, [pc, #376]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 0320 	and.w	r3, r3, #32
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d010      	beq.n	8008b20 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	69da      	ldr	r2, [r3, #28]
 8008b02:	4b59      	ldr	r3, [pc, #356]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d908      	bls.n	8008b20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008b0e:	4b56      	ldr	r3, [pc, #344]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	69db      	ldr	r3, [r3, #28]
 8008b1a:	4953      	ldr	r1, [pc, #332]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 0302 	and.w	r3, r3, #2
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d010      	beq.n	8008b4e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68da      	ldr	r2, [r3, #12]
 8008b30:	4b4d      	ldr	r3, [pc, #308]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	f003 030f 	and.w	r3, r3, #15
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d908      	bls.n	8008b4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b3c:	4b4a      	ldr	r3, [pc, #296]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	f023 020f 	bic.w	r2, r3, #15
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	4947      	ldr	r1, [pc, #284]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d055      	beq.n	8008c06 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008b5a:	4b43      	ldr	r3, [pc, #268]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	4940      	ldr	r1, [pc, #256]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d107      	bne.n	8008b84 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b74:	4b3c      	ldr	r3, [pc, #240]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d121      	bne.n	8008bc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e0f6      	b.n	8008d72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d107      	bne.n	8008b9c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b8c:	4b36      	ldr	r3, [pc, #216]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d115      	bne.n	8008bc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e0ea      	b.n	8008d72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d107      	bne.n	8008bb4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ba4:	4b30      	ldr	r3, [pc, #192]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d109      	bne.n	8008bc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e0de      	b.n	8008d72 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008bb4:	4b2c      	ldr	r3, [pc, #176]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0304 	and.w	r3, r3, #4
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e0d6      	b.n	8008d72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008bc4:	4b28      	ldr	r3, [pc, #160]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	f023 0207 	bic.w	r2, r3, #7
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	4925      	ldr	r1, [pc, #148]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bd6:	f7f9 f8ff 	bl	8001dd8 <HAL_GetTick>
 8008bda:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bdc:	e00a      	b.n	8008bf4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bde:	f7f9 f8fb 	bl	8001dd8 <HAL_GetTick>
 8008be2:	4602      	mov	r2, r0
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	1ad3      	subs	r3, r2, r3
 8008be8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d901      	bls.n	8008bf4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e0be      	b.n	8008d72 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	00db      	lsls	r3, r3, #3
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d1eb      	bne.n	8008bde <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d010      	beq.n	8008c34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68da      	ldr	r2, [r3, #12]
 8008c16:	4b14      	ldr	r3, [pc, #80]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	f003 030f 	and.w	r3, r3, #15
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d208      	bcs.n	8008c34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c22:	4b11      	ldr	r3, [pc, #68]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	f023 020f 	bic.w	r2, r3, #15
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	490e      	ldr	r1, [pc, #56]	@ (8008c68 <HAL_RCC_ClockConfig+0x244>)
 8008c30:	4313      	orrs	r3, r2
 8008c32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008c34:	4b0b      	ldr	r3, [pc, #44]	@ (8008c64 <HAL_RCC_ClockConfig+0x240>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 030f 	and.w	r3, r3, #15
 8008c3c:	683a      	ldr	r2, [r7, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d214      	bcs.n	8008c6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c42:	4b08      	ldr	r3, [pc, #32]	@ (8008c64 <HAL_RCC_ClockConfig+0x240>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f023 020f 	bic.w	r2, r3, #15
 8008c4a:	4906      	ldr	r1, [pc, #24]	@ (8008c64 <HAL_RCC_ClockConfig+0x240>)
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c52:	4b04      	ldr	r3, [pc, #16]	@ (8008c64 <HAL_RCC_ClockConfig+0x240>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 030f 	and.w	r3, r3, #15
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d005      	beq.n	8008c6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e086      	b.n	8008d72 <HAL_RCC_ClockConfig+0x34e>
 8008c64:	52002000 	.word	0x52002000
 8008c68:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0304 	and.w	r3, r3, #4
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d010      	beq.n	8008c9a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	691a      	ldr	r2, [r3, #16]
 8008c7c:	4b3f      	ldr	r3, [pc, #252]	@ (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d208      	bcs.n	8008c9a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c88:	4b3c      	ldr	r3, [pc, #240]	@ (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	4939      	ldr	r1, [pc, #228]	@ (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008c96:	4313      	orrs	r3, r2
 8008c98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0308 	and.w	r3, r3, #8
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d010      	beq.n	8008cc8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	695a      	ldr	r2, [r3, #20]
 8008caa:	4b34      	ldr	r3, [pc, #208]	@ (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008cac:	69db      	ldr	r3, [r3, #28]
 8008cae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d208      	bcs.n	8008cc8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008cb6:	4b31      	ldr	r3, [pc, #196]	@ (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008cb8:	69db      	ldr	r3, [r3, #28]
 8008cba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	492e      	ldr	r1, [pc, #184]	@ (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 0310 	and.w	r3, r3, #16
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d010      	beq.n	8008cf6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	699a      	ldr	r2, [r3, #24]
 8008cd8:	4b28      	ldr	r3, [pc, #160]	@ (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008cda:	69db      	ldr	r3, [r3, #28]
 8008cdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d208      	bcs.n	8008cf6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ce4:	4b25      	ldr	r3, [pc, #148]	@ (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008ce6:	69db      	ldr	r3, [r3, #28]
 8008ce8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	4922      	ldr	r1, [pc, #136]	@ (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 0320 	and.w	r3, r3, #32
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d010      	beq.n	8008d24 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	69da      	ldr	r2, [r3, #28]
 8008d06:	4b1d      	ldr	r3, [pc, #116]	@ (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008d08:	6a1b      	ldr	r3, [r3, #32]
 8008d0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d208      	bcs.n	8008d24 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008d12:	4b1a      	ldr	r3, [pc, #104]	@ (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	69db      	ldr	r3, [r3, #28]
 8008d1e:	4917      	ldr	r1, [pc, #92]	@ (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008d20:	4313      	orrs	r3, r2
 8008d22:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008d24:	f000 f834 	bl	8008d90 <HAL_RCC_GetSysClockFreq>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	4b14      	ldr	r3, [pc, #80]	@ (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	0a1b      	lsrs	r3, r3, #8
 8008d30:	f003 030f 	and.w	r3, r3, #15
 8008d34:	4912      	ldr	r1, [pc, #72]	@ (8008d80 <HAL_RCC_ClockConfig+0x35c>)
 8008d36:	5ccb      	ldrb	r3, [r1, r3]
 8008d38:	f003 031f 	and.w	r3, r3, #31
 8008d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d40:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d42:	4b0e      	ldr	r3, [pc, #56]	@ (8008d7c <HAL_RCC_ClockConfig+0x358>)
 8008d44:	699b      	ldr	r3, [r3, #24]
 8008d46:	f003 030f 	and.w	r3, r3, #15
 8008d4a:	4a0d      	ldr	r2, [pc, #52]	@ (8008d80 <HAL_RCC_ClockConfig+0x35c>)
 8008d4c:	5cd3      	ldrb	r3, [r2, r3]
 8008d4e:	f003 031f 	and.w	r3, r3, #31
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	fa22 f303 	lsr.w	r3, r2, r3
 8008d58:	4a0a      	ldr	r2, [pc, #40]	@ (8008d84 <HAL_RCC_ClockConfig+0x360>)
 8008d5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8008d88 <HAL_RCC_ClockConfig+0x364>)
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008d62:	4b0a      	ldr	r3, [pc, #40]	@ (8008d8c <HAL_RCC_ClockConfig+0x368>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7f8 ffec 	bl	8001d44 <HAL_InitTick>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3718      	adds	r7, #24
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	58024400 	.word	0x58024400
 8008d80:	08013190 	.word	0x08013190
 8008d84:	24000004 	.word	0x24000004
 8008d88:	24000000 	.word	0x24000000
 8008d8c:	24000008 	.word	0x24000008

08008d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b089      	sub	sp, #36	@ 0x24
 8008d94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d96:	4bb3      	ldr	r3, [pc, #716]	@ (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d9e:	2b18      	cmp	r3, #24
 8008da0:	f200 8155 	bhi.w	800904e <HAL_RCC_GetSysClockFreq+0x2be>
 8008da4:	a201      	add	r2, pc, #4	@ (adr r2, 8008dac <HAL_RCC_GetSysClockFreq+0x1c>)
 8008da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008daa:	bf00      	nop
 8008dac:	08008e11 	.word	0x08008e11
 8008db0:	0800904f 	.word	0x0800904f
 8008db4:	0800904f 	.word	0x0800904f
 8008db8:	0800904f 	.word	0x0800904f
 8008dbc:	0800904f 	.word	0x0800904f
 8008dc0:	0800904f 	.word	0x0800904f
 8008dc4:	0800904f 	.word	0x0800904f
 8008dc8:	0800904f 	.word	0x0800904f
 8008dcc:	08008e37 	.word	0x08008e37
 8008dd0:	0800904f 	.word	0x0800904f
 8008dd4:	0800904f 	.word	0x0800904f
 8008dd8:	0800904f 	.word	0x0800904f
 8008ddc:	0800904f 	.word	0x0800904f
 8008de0:	0800904f 	.word	0x0800904f
 8008de4:	0800904f 	.word	0x0800904f
 8008de8:	0800904f 	.word	0x0800904f
 8008dec:	08008e3d 	.word	0x08008e3d
 8008df0:	0800904f 	.word	0x0800904f
 8008df4:	0800904f 	.word	0x0800904f
 8008df8:	0800904f 	.word	0x0800904f
 8008dfc:	0800904f 	.word	0x0800904f
 8008e00:	0800904f 	.word	0x0800904f
 8008e04:	0800904f 	.word	0x0800904f
 8008e08:	0800904f 	.word	0x0800904f
 8008e0c:	08008e43 	.word	0x08008e43
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e10:	4b94      	ldr	r3, [pc, #592]	@ (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 0320 	and.w	r3, r3, #32
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d009      	beq.n	8008e30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e1c:	4b91      	ldr	r3, [pc, #580]	@ (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	08db      	lsrs	r3, r3, #3
 8008e22:	f003 0303 	and.w	r3, r3, #3
 8008e26:	4a90      	ldr	r2, [pc, #576]	@ (8009068 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e28:	fa22 f303 	lsr.w	r3, r2, r3
 8008e2c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008e2e:	e111      	b.n	8009054 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008e30:	4b8d      	ldr	r3, [pc, #564]	@ (8009068 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e32:	61bb      	str	r3, [r7, #24]
      break;
 8008e34:	e10e      	b.n	8009054 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008e36:	4b8d      	ldr	r3, [pc, #564]	@ (800906c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008e38:	61bb      	str	r3, [r7, #24]
      break;
 8008e3a:	e10b      	b.n	8009054 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008e3c:	4b8c      	ldr	r3, [pc, #560]	@ (8009070 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008e3e:	61bb      	str	r3, [r7, #24]
      break;
 8008e40:	e108      	b.n	8009054 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e42:	4b88      	ldr	r3, [pc, #544]	@ (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e46:	f003 0303 	and.w	r3, r3, #3
 8008e4a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008e4c:	4b85      	ldr	r3, [pc, #532]	@ (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e50:	091b      	lsrs	r3, r3, #4
 8008e52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e56:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008e58:	4b82      	ldr	r3, [pc, #520]	@ (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e5c:	f003 0301 	and.w	r3, r3, #1
 8008e60:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008e62:	4b80      	ldr	r3, [pc, #512]	@ (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e66:	08db      	lsrs	r3, r3, #3
 8008e68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	fb02 f303 	mul.w	r3, r2, r3
 8008e72:	ee07 3a90 	vmov	s15, r3
 8008e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f000 80e1 	beq.w	8009048 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	f000 8083 	beq.w	8008f94 <HAL_RCC_GetSysClockFreq+0x204>
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	f200 80a1 	bhi.w	8008fd8 <HAL_RCC_GetSysClockFreq+0x248>
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d003      	beq.n	8008ea4 <HAL_RCC_GetSysClockFreq+0x114>
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d056      	beq.n	8008f50 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008ea2:	e099      	b.n	8008fd8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ea4:	4b6f      	ldr	r3, [pc, #444]	@ (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0320 	and.w	r3, r3, #32
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d02d      	beq.n	8008f0c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008eb0:	4b6c      	ldr	r3, [pc, #432]	@ (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	08db      	lsrs	r3, r3, #3
 8008eb6:	f003 0303 	and.w	r3, r3, #3
 8008eba:	4a6b      	ldr	r2, [pc, #428]	@ (8009068 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	ee07 3a90 	vmov	s15, r3
 8008ec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	ee07 3a90 	vmov	s15, r3
 8008ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eda:	4b62      	ldr	r3, [pc, #392]	@ (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ee2:	ee07 3a90 	vmov	s15, r3
 8008ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eea:	ed97 6a02 	vldr	s12, [r7, #8]
 8008eee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008efa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f06:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008f0a:	e087      	b.n	800901c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	ee07 3a90 	vmov	s15, r3
 8008f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f16:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009078 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f1e:	4b51      	ldr	r3, [pc, #324]	@ (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f26:	ee07 3a90 	vmov	s15, r3
 8008f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f32:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f4e:	e065      	b.n	800901c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	ee07 3a90 	vmov	s15, r3
 8008f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f5a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800907c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f62:	4b40      	ldr	r3, [pc, #256]	@ (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f6a:	ee07 3a90 	vmov	s15, r3
 8008f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f72:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f76:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f92:	e043      	b.n	800901c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	ee07 3a90 	vmov	s15, r3
 8008f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f9e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009080 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fa6:	4b2f      	ldr	r3, [pc, #188]	@ (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fae:	ee07 3a90 	vmov	s15, r3
 8008fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fd2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008fd6:	e021      	b.n	800901c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	ee07 3a90 	vmov	s15, r3
 8008fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fe2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800907c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fea:	4b1e      	ldr	r3, [pc, #120]	@ (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ff2:	ee07 3a90 	vmov	s15, r3
 8008ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ffa:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ffe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800900a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800900e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009016:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800901a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800901c:	4b11      	ldr	r3, [pc, #68]	@ (8009064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800901e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009020:	0a5b      	lsrs	r3, r3, #9
 8009022:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009026:	3301      	adds	r3, #1
 8009028:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	ee07 3a90 	vmov	s15, r3
 8009030:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009034:	edd7 6a07 	vldr	s13, [r7, #28]
 8009038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800903c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009040:	ee17 3a90 	vmov	r3, s15
 8009044:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009046:	e005      	b.n	8009054 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009048:	2300      	movs	r3, #0
 800904a:	61bb      	str	r3, [r7, #24]
      break;
 800904c:	e002      	b.n	8009054 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800904e:	4b07      	ldr	r3, [pc, #28]	@ (800906c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009050:	61bb      	str	r3, [r7, #24]
      break;
 8009052:	bf00      	nop
  }

  return sysclockfreq;
 8009054:	69bb      	ldr	r3, [r7, #24]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3724      	adds	r7, #36	@ 0x24
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	58024400 	.word	0x58024400
 8009068:	03d09000 	.word	0x03d09000
 800906c:	003d0900 	.word	0x003d0900
 8009070:	017d7840 	.word	0x017d7840
 8009074:	46000000 	.word	0x46000000
 8009078:	4c742400 	.word	0x4c742400
 800907c:	4a742400 	.word	0x4a742400
 8009080:	4bbebc20 	.word	0x4bbebc20

08009084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800908a:	f7ff fe81 	bl	8008d90 <HAL_RCC_GetSysClockFreq>
 800908e:	4602      	mov	r2, r0
 8009090:	4b10      	ldr	r3, [pc, #64]	@ (80090d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	0a1b      	lsrs	r3, r3, #8
 8009096:	f003 030f 	and.w	r3, r3, #15
 800909a:	490f      	ldr	r1, [pc, #60]	@ (80090d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800909c:	5ccb      	ldrb	r3, [r1, r3]
 800909e:	f003 031f 	and.w	r3, r3, #31
 80090a2:	fa22 f303 	lsr.w	r3, r2, r3
 80090a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80090a8:	4b0a      	ldr	r3, [pc, #40]	@ (80090d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	f003 030f 	and.w	r3, r3, #15
 80090b0:	4a09      	ldr	r2, [pc, #36]	@ (80090d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80090b2:	5cd3      	ldrb	r3, [r2, r3]
 80090b4:	f003 031f 	and.w	r3, r3, #31
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	fa22 f303 	lsr.w	r3, r2, r3
 80090be:	4a07      	ldr	r2, [pc, #28]	@ (80090dc <HAL_RCC_GetHCLKFreq+0x58>)
 80090c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80090c2:	4a07      	ldr	r2, [pc, #28]	@ (80090e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80090c8:	4b04      	ldr	r3, [pc, #16]	@ (80090dc <HAL_RCC_GetHCLKFreq+0x58>)
 80090ca:	681b      	ldr	r3, [r3, #0]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	58024400 	.word	0x58024400
 80090d8:	08013190 	.word	0x08013190
 80090dc:	24000004 	.word	0x24000004
 80090e0:	24000000 	.word	0x24000000

080090e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80090e8:	f7ff ffcc 	bl	8009084 <HAL_RCC_GetHCLKFreq>
 80090ec:	4602      	mov	r2, r0
 80090ee:	4b06      	ldr	r3, [pc, #24]	@ (8009108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80090f0:	69db      	ldr	r3, [r3, #28]
 80090f2:	091b      	lsrs	r3, r3, #4
 80090f4:	f003 0307 	and.w	r3, r3, #7
 80090f8:	4904      	ldr	r1, [pc, #16]	@ (800910c <HAL_RCC_GetPCLK1Freq+0x28>)
 80090fa:	5ccb      	ldrb	r3, [r1, r3]
 80090fc:	f003 031f 	and.w	r3, r3, #31
 8009100:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009104:	4618      	mov	r0, r3
 8009106:	bd80      	pop	{r7, pc}
 8009108:	58024400 	.word	0x58024400
 800910c:	08013190 	.word	0x08013190

08009110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009114:	f7ff ffb6 	bl	8009084 <HAL_RCC_GetHCLKFreq>
 8009118:	4602      	mov	r2, r0
 800911a:	4b06      	ldr	r3, [pc, #24]	@ (8009134 <HAL_RCC_GetPCLK2Freq+0x24>)
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	0a1b      	lsrs	r3, r3, #8
 8009120:	f003 0307 	and.w	r3, r3, #7
 8009124:	4904      	ldr	r1, [pc, #16]	@ (8009138 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009126:	5ccb      	ldrb	r3, [r1, r3]
 8009128:	f003 031f 	and.w	r3, r3, #31
 800912c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009130:	4618      	mov	r0, r3
 8009132:	bd80      	pop	{r7, pc}
 8009134:	58024400 	.word	0x58024400
 8009138:	08013190 	.word	0x08013190

0800913c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800913c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009140:	b0c6      	sub	sp, #280	@ 0x118
 8009142:	af00      	add	r7, sp, #0
 8009144:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009148:	2300      	movs	r3, #0
 800914a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800914e:	2300      	movs	r3, #0
 8009150:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009160:	2500      	movs	r5, #0
 8009162:	ea54 0305 	orrs.w	r3, r4, r5
 8009166:	d049      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800916c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800916e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009172:	d02f      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009174:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009178:	d828      	bhi.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800917a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800917e:	d01a      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009180:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009184:	d822      	bhi.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009186:	2b00      	cmp	r3, #0
 8009188:	d003      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800918a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800918e:	d007      	beq.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009190:	e01c      	b.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009192:	4bab      	ldr	r3, [pc, #684]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009196:	4aaa      	ldr	r2, [pc, #680]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800919c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800919e:	e01a      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091a4:	3308      	adds	r3, #8
 80091a6:	2102      	movs	r1, #2
 80091a8:	4618      	mov	r0, r3
 80091aa:	f002 fa49 	bl	800b640 <RCCEx_PLL2_Config>
 80091ae:	4603      	mov	r3, r0
 80091b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80091b4:	e00f      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80091b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ba:	3328      	adds	r3, #40	@ 0x28
 80091bc:	2102      	movs	r1, #2
 80091be:	4618      	mov	r0, r3
 80091c0:	f002 faf0 	bl	800b7a4 <RCCEx_PLL3_Config>
 80091c4:	4603      	mov	r3, r0
 80091c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80091ca:	e004      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80091d2:	e000      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80091d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10a      	bne.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80091de:	4b98      	ldr	r3, [pc, #608]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80091e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80091e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091ec:	4a94      	ldr	r2, [pc, #592]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80091ee:	430b      	orrs	r3, r1
 80091f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80091f2:	e003      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80091fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009204:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009208:	f04f 0900 	mov.w	r9, #0
 800920c:	ea58 0309 	orrs.w	r3, r8, r9
 8009210:	d047      	beq.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009218:	2b04      	cmp	r3, #4
 800921a:	d82a      	bhi.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800921c:	a201      	add	r2, pc, #4	@ (adr r2, 8009224 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800921e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009222:	bf00      	nop
 8009224:	08009239 	.word	0x08009239
 8009228:	08009247 	.word	0x08009247
 800922c:	0800925d 	.word	0x0800925d
 8009230:	0800927b 	.word	0x0800927b
 8009234:	0800927b 	.word	0x0800927b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009238:	4b81      	ldr	r3, [pc, #516]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800923a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800923c:	4a80      	ldr	r2, [pc, #512]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800923e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009242:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009244:	e01a      	b.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800924a:	3308      	adds	r3, #8
 800924c:	2100      	movs	r1, #0
 800924e:	4618      	mov	r0, r3
 8009250:	f002 f9f6 	bl	800b640 <RCCEx_PLL2_Config>
 8009254:	4603      	mov	r3, r0
 8009256:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800925a:	e00f      	b.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800925c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009260:	3328      	adds	r3, #40	@ 0x28
 8009262:	2100      	movs	r1, #0
 8009264:	4618      	mov	r0, r3
 8009266:	f002 fa9d 	bl	800b7a4 <RCCEx_PLL3_Config>
 800926a:	4603      	mov	r3, r0
 800926c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009270:	e004      	b.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009278:	e000      	b.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800927a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800927c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10a      	bne.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009284:	4b6e      	ldr	r3, [pc, #440]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009288:	f023 0107 	bic.w	r1, r3, #7
 800928c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009292:	4a6b      	ldr	r2, [pc, #428]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009294:	430b      	orrs	r3, r1
 8009296:	6513      	str	r3, [r2, #80]	@ 0x50
 8009298:	e003      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800929a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800929e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80092a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092aa:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80092ae:	f04f 0b00 	mov.w	fp, #0
 80092b2:	ea5a 030b 	orrs.w	r3, sl, fp
 80092b6:	d05b      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80092b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80092c0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80092c4:	d03b      	beq.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80092c6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80092ca:	d834      	bhi.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80092cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80092d0:	d037      	beq.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80092d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80092d6:	d82e      	bhi.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80092d8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80092dc:	d033      	beq.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80092de:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80092e2:	d828      	bhi.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80092e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80092e8:	d01a      	beq.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80092ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80092ee:	d822      	bhi.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d003      	beq.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80092f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80092f8:	d007      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80092fa:	e01c      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092fc:	4b50      	ldr	r3, [pc, #320]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80092fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009300:	4a4f      	ldr	r2, [pc, #316]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009306:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009308:	e01e      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800930a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800930e:	3308      	adds	r3, #8
 8009310:	2100      	movs	r1, #0
 8009312:	4618      	mov	r0, r3
 8009314:	f002 f994 	bl	800b640 <RCCEx_PLL2_Config>
 8009318:	4603      	mov	r3, r0
 800931a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800931e:	e013      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009320:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009324:	3328      	adds	r3, #40	@ 0x28
 8009326:	2100      	movs	r1, #0
 8009328:	4618      	mov	r0, r3
 800932a:	f002 fa3b 	bl	800b7a4 <RCCEx_PLL3_Config>
 800932e:	4603      	mov	r3, r0
 8009330:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009334:	e008      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800933c:	e004      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800933e:	bf00      	nop
 8009340:	e002      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009342:	bf00      	nop
 8009344:	e000      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8009346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009348:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800934c:	2b00      	cmp	r3, #0
 800934e:	d10b      	bne.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009350:	4b3b      	ldr	r3, [pc, #236]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009354:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800935c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009360:	4a37      	ldr	r2, [pc, #220]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009362:	430b      	orrs	r3, r1
 8009364:	6593      	str	r3, [r2, #88]	@ 0x58
 8009366:	e003      	b.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009368:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800936c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009378:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800937c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009380:	2300      	movs	r3, #0
 8009382:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009386:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800938a:	460b      	mov	r3, r1
 800938c:	4313      	orrs	r3, r2
 800938e:	d05d      	beq.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009394:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009398:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800939c:	d03b      	beq.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800939e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80093a2:	d834      	bhi.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80093a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80093a8:	d037      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80093aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80093ae:	d82e      	bhi.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80093b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80093b4:	d033      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80093b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80093ba:	d828      	bhi.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80093bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093c0:	d01a      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80093c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093c6:	d822      	bhi.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d003      	beq.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80093cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093d0:	d007      	beq.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80093d2:	e01c      	b.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093d4:	4b1a      	ldr	r3, [pc, #104]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80093d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d8:	4a19      	ldr	r2, [pc, #100]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80093da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093e0:	e01e      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093e6:	3308      	adds	r3, #8
 80093e8:	2100      	movs	r1, #0
 80093ea:	4618      	mov	r0, r3
 80093ec:	f002 f928 	bl	800b640 <RCCEx_PLL2_Config>
 80093f0:	4603      	mov	r3, r0
 80093f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80093f6:	e013      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093fc:	3328      	adds	r3, #40	@ 0x28
 80093fe:	2100      	movs	r1, #0
 8009400:	4618      	mov	r0, r3
 8009402:	f002 f9cf 	bl	800b7a4 <RCCEx_PLL3_Config>
 8009406:	4603      	mov	r3, r0
 8009408:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800940c:	e008      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009414:	e004      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009416:	bf00      	nop
 8009418:	e002      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800941a:	bf00      	nop
 800941c:	e000      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800941e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009420:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10d      	bne.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009428:	4b05      	ldr	r3, [pc, #20]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800942a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800942c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009434:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009438:	4a01      	ldr	r2, [pc, #4]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800943a:	430b      	orrs	r3, r1
 800943c:	6593      	str	r3, [r2, #88]	@ 0x58
 800943e:	e005      	b.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009440:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009444:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009448:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800944c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009454:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009458:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800945c:	2300      	movs	r3, #0
 800945e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009462:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009466:	460b      	mov	r3, r1
 8009468:	4313      	orrs	r3, r2
 800946a:	d03a      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800946c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009472:	2b30      	cmp	r3, #48	@ 0x30
 8009474:	d01f      	beq.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009476:	2b30      	cmp	r3, #48	@ 0x30
 8009478:	d819      	bhi.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x372>
 800947a:	2b20      	cmp	r3, #32
 800947c:	d00c      	beq.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800947e:	2b20      	cmp	r3, #32
 8009480:	d815      	bhi.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009482:	2b00      	cmp	r3, #0
 8009484:	d019      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009486:	2b10      	cmp	r3, #16
 8009488:	d111      	bne.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800948a:	4baa      	ldr	r3, [pc, #680]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800948c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800948e:	4aa9      	ldr	r2, [pc, #676]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009490:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009494:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009496:	e011      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800949c:	3308      	adds	r3, #8
 800949e:	2102      	movs	r1, #2
 80094a0:	4618      	mov	r0, r3
 80094a2:	f002 f8cd 	bl	800b640 <RCCEx_PLL2_Config>
 80094a6:	4603      	mov	r3, r0
 80094a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80094ac:	e006      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80094ae:	2301      	movs	r3, #1
 80094b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80094b4:	e002      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80094b6:	bf00      	nop
 80094b8:	e000      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80094ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d10a      	bne.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80094c4:	4b9b      	ldr	r3, [pc, #620]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80094c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80094cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094d2:	4a98      	ldr	r2, [pc, #608]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80094d4:	430b      	orrs	r3, r1
 80094d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80094d8:	e003      	b.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094de:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80094e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80094ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80094f2:	2300      	movs	r3, #0
 80094f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80094f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80094fc:	460b      	mov	r3, r1
 80094fe:	4313      	orrs	r3, r2
 8009500:	d051      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009508:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800950c:	d035      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800950e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009512:	d82e      	bhi.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009514:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009518:	d031      	beq.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800951a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800951e:	d828      	bhi.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009520:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009524:	d01a      	beq.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009526:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800952a:	d822      	bhi.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800952c:	2b00      	cmp	r3, #0
 800952e:	d003      	beq.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009530:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009534:	d007      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009536:	e01c      	b.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009538:	4b7e      	ldr	r3, [pc, #504]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800953a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800953c:	4a7d      	ldr	r2, [pc, #500]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800953e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009542:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009544:	e01c      	b.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800954a:	3308      	adds	r3, #8
 800954c:	2100      	movs	r1, #0
 800954e:	4618      	mov	r0, r3
 8009550:	f002 f876 	bl	800b640 <RCCEx_PLL2_Config>
 8009554:	4603      	mov	r3, r0
 8009556:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800955a:	e011      	b.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800955c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009560:	3328      	adds	r3, #40	@ 0x28
 8009562:	2100      	movs	r1, #0
 8009564:	4618      	mov	r0, r3
 8009566:	f002 f91d 	bl	800b7a4 <RCCEx_PLL3_Config>
 800956a:	4603      	mov	r3, r0
 800956c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009570:	e006      	b.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009578:	e002      	b.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800957a:	bf00      	nop
 800957c:	e000      	b.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800957e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009580:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10a      	bne.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009588:	4b6a      	ldr	r3, [pc, #424]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800958a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800958c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009596:	4a67      	ldr	r2, [pc, #412]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009598:	430b      	orrs	r3, r1
 800959a:	6513      	str	r3, [r2, #80]	@ 0x50
 800959c:	e003      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800959e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80095a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80095b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80095b6:	2300      	movs	r3, #0
 80095b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80095bc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80095c0:	460b      	mov	r3, r1
 80095c2:	4313      	orrs	r3, r2
 80095c4:	d053      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80095c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80095d0:	d033      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80095d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80095d6:	d82c      	bhi.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80095d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80095dc:	d02f      	beq.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80095de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80095e2:	d826      	bhi.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80095e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80095e8:	d02b      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80095ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80095ee:	d820      	bhi.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80095f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095f4:	d012      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80095f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095fa:	d81a      	bhi.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d022      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009604:	d115      	bne.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800960a:	3308      	adds	r3, #8
 800960c:	2101      	movs	r1, #1
 800960e:	4618      	mov	r0, r3
 8009610:	f002 f816 	bl	800b640 <RCCEx_PLL2_Config>
 8009614:	4603      	mov	r3, r0
 8009616:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800961a:	e015      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800961c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009620:	3328      	adds	r3, #40	@ 0x28
 8009622:	2101      	movs	r1, #1
 8009624:	4618      	mov	r0, r3
 8009626:	f002 f8bd 	bl	800b7a4 <RCCEx_PLL3_Config>
 800962a:	4603      	mov	r3, r0
 800962c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009630:	e00a      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009638:	e006      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800963a:	bf00      	nop
 800963c:	e004      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800963e:	bf00      	nop
 8009640:	e002      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009642:	bf00      	nop
 8009644:	e000      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009646:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009648:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10a      	bne.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009650:	4b38      	ldr	r3, [pc, #224]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009654:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800965c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800965e:	4a35      	ldr	r2, [pc, #212]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009660:	430b      	orrs	r3, r1
 8009662:	6513      	str	r3, [r2, #80]	@ 0x50
 8009664:	e003      	b.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009666:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800966a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800966e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009676:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800967a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800967e:	2300      	movs	r3, #0
 8009680:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009684:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009688:	460b      	mov	r3, r1
 800968a:	4313      	orrs	r3, r2
 800968c:	d058      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800968e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009692:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009696:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800969a:	d033      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800969c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80096a0:	d82c      	bhi.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80096a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096a6:	d02f      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80096a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096ac:	d826      	bhi.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80096ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80096b2:	d02b      	beq.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80096b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80096b8:	d820      	bhi.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80096ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096be:	d012      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80096c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096c4:	d81a      	bhi.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d022      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80096ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096ce:	d115      	bne.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096d4:	3308      	adds	r3, #8
 80096d6:	2101      	movs	r1, #1
 80096d8:	4618      	mov	r0, r3
 80096da:	f001 ffb1 	bl	800b640 <RCCEx_PLL2_Config>
 80096de:	4603      	mov	r3, r0
 80096e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80096e4:	e015      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ea:	3328      	adds	r3, #40	@ 0x28
 80096ec:	2101      	movs	r1, #1
 80096ee:	4618      	mov	r0, r3
 80096f0:	f002 f858 	bl	800b7a4 <RCCEx_PLL3_Config>
 80096f4:	4603      	mov	r3, r0
 80096f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80096fa:	e00a      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009702:	e006      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009704:	bf00      	nop
 8009706:	e004      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009708:	bf00      	nop
 800970a:	e002      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800970c:	bf00      	nop
 800970e:	e000      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009710:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009712:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009716:	2b00      	cmp	r3, #0
 8009718:	d10e      	bne.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800971a:	4b06      	ldr	r3, [pc, #24]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800971c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800971e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009726:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800972a:	4a02      	ldr	r2, [pc, #8]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800972c:	430b      	orrs	r3, r1
 800972e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009730:	e006      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009732:	bf00      	nop
 8009734:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009738:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800973c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009748:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800974c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009750:	2300      	movs	r3, #0
 8009752:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009756:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800975a:	460b      	mov	r3, r1
 800975c:	4313      	orrs	r3, r2
 800975e:	d037      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009764:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009766:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800976a:	d00e      	beq.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800976c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009770:	d816      	bhi.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009772:	2b00      	cmp	r3, #0
 8009774:	d018      	beq.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009776:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800977a:	d111      	bne.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800977c:	4bc4      	ldr	r3, [pc, #784]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800977e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009780:	4ac3      	ldr	r2, [pc, #780]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009782:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009786:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009788:	e00f      	b.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800978a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800978e:	3308      	adds	r3, #8
 8009790:	2101      	movs	r1, #1
 8009792:	4618      	mov	r0, r3
 8009794:	f001 ff54 	bl	800b640 <RCCEx_PLL2_Config>
 8009798:	4603      	mov	r3, r0
 800979a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800979e:	e004      	b.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80097a6:	e000      	b.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80097a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10a      	bne.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80097b2:	4bb7      	ldr	r3, [pc, #732]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80097b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097b6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80097ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097c0:	4ab3      	ldr	r2, [pc, #716]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80097c2:	430b      	orrs	r3, r1
 80097c4:	6513      	str	r3, [r2, #80]	@ 0x50
 80097c6:	e003      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80097d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80097dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80097e0:	2300      	movs	r3, #0
 80097e2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80097e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80097ea:	460b      	mov	r3, r1
 80097ec:	4313      	orrs	r3, r2
 80097ee:	d039      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80097f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097f6:	2b03      	cmp	r3, #3
 80097f8:	d81c      	bhi.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80097fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009800 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80097fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009800:	0800983d 	.word	0x0800983d
 8009804:	08009811 	.word	0x08009811
 8009808:	0800981f 	.word	0x0800981f
 800980c:	0800983d 	.word	0x0800983d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009810:	4b9f      	ldr	r3, [pc, #636]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009814:	4a9e      	ldr	r2, [pc, #632]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009816:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800981a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800981c:	e00f      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800981e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009822:	3308      	adds	r3, #8
 8009824:	2102      	movs	r1, #2
 8009826:	4618      	mov	r0, r3
 8009828:	f001 ff0a 	bl	800b640 <RCCEx_PLL2_Config>
 800982c:	4603      	mov	r3, r0
 800982e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009832:	e004      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800983a:	e000      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800983c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800983e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10a      	bne.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009846:	4b92      	ldr	r3, [pc, #584]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800984a:	f023 0103 	bic.w	r1, r3, #3
 800984e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009852:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009854:	4a8e      	ldr	r2, [pc, #568]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009856:	430b      	orrs	r3, r1
 8009858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800985a:	e003      	b.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800985c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009860:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009870:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009874:	2300      	movs	r3, #0
 8009876:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800987a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800987e:	460b      	mov	r3, r1
 8009880:	4313      	orrs	r3, r2
 8009882:	f000 8099 	beq.w	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009886:	4b83      	ldr	r3, [pc, #524]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a82      	ldr	r2, [pc, #520]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800988c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009890:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009892:	f7f8 faa1 	bl	8001dd8 <HAL_GetTick>
 8009896:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800989a:	e00b      	b.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800989c:	f7f8 fa9c 	bl	8001dd8 <HAL_GetTick>
 80098a0:	4602      	mov	r2, r0
 80098a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	2b64      	cmp	r3, #100	@ 0x64
 80098aa:	d903      	bls.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80098ac:	2303      	movs	r3, #3
 80098ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80098b2:	e005      	b.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80098b4:	4b77      	ldr	r3, [pc, #476]	@ (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d0ed      	beq.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80098c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d173      	bne.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80098c8:	4b71      	ldr	r3, [pc, #452]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80098ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80098cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80098d4:	4053      	eors	r3, r2
 80098d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d015      	beq.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80098de:	4b6c      	ldr	r3, [pc, #432]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80098e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098e6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80098ea:	4b69      	ldr	r3, [pc, #420]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80098ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098ee:	4a68      	ldr	r2, [pc, #416]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80098f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098f4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80098f6:	4b66      	ldr	r3, [pc, #408]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80098f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098fa:	4a65      	ldr	r2, [pc, #404]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80098fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009900:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009902:	4a63      	ldr	r2, [pc, #396]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009908:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800990a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800990e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009916:	d118      	bne.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009918:	f7f8 fa5e 	bl	8001dd8 <HAL_GetTick>
 800991c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009920:	e00d      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009922:	f7f8 fa59 	bl	8001dd8 <HAL_GetTick>
 8009926:	4602      	mov	r2, r0
 8009928:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800992c:	1ad2      	subs	r2, r2, r3
 800992e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009932:	429a      	cmp	r2, r3
 8009934:	d903      	bls.n	800993e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009936:	2303      	movs	r3, #3
 8009938:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800993c:	e005      	b.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800993e:	4b54      	ldr	r3, [pc, #336]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009942:	f003 0302 	and.w	r3, r3, #2
 8009946:	2b00      	cmp	r3, #0
 8009948:	d0eb      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800994a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800994e:	2b00      	cmp	r3, #0
 8009950:	d129      	bne.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009956:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800995a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800995e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009962:	d10e      	bne.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009964:	4b4a      	ldr	r3, [pc, #296]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800996c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009970:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009974:	091a      	lsrs	r2, r3, #4
 8009976:	4b48      	ldr	r3, [pc, #288]	@ (8009a98 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009978:	4013      	ands	r3, r2
 800997a:	4a45      	ldr	r2, [pc, #276]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800997c:	430b      	orrs	r3, r1
 800997e:	6113      	str	r3, [r2, #16]
 8009980:	e005      	b.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009982:	4b43      	ldr	r3, [pc, #268]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	4a42      	ldr	r2, [pc, #264]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009988:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800998c:	6113      	str	r3, [r2, #16]
 800998e:	4b40      	ldr	r3, [pc, #256]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009990:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009996:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800999a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800999e:	4a3c      	ldr	r2, [pc, #240]	@ (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80099a0:	430b      	orrs	r3, r1
 80099a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80099a4:	e008      	b.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80099a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80099ae:	e003      	b.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80099b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c0:	f002 0301 	and.w	r3, r2, #1
 80099c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80099c8:	2300      	movs	r3, #0
 80099ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80099ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80099d2:	460b      	mov	r3, r1
 80099d4:	4313      	orrs	r3, r2
 80099d6:	f000 808f 	beq.w	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80099da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80099e0:	2b28      	cmp	r3, #40	@ 0x28
 80099e2:	d871      	bhi.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80099e4:	a201      	add	r2, pc, #4	@ (adr r2, 80099ec <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80099e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ea:	bf00      	nop
 80099ec:	08009ad1 	.word	0x08009ad1
 80099f0:	08009ac9 	.word	0x08009ac9
 80099f4:	08009ac9 	.word	0x08009ac9
 80099f8:	08009ac9 	.word	0x08009ac9
 80099fc:	08009ac9 	.word	0x08009ac9
 8009a00:	08009ac9 	.word	0x08009ac9
 8009a04:	08009ac9 	.word	0x08009ac9
 8009a08:	08009ac9 	.word	0x08009ac9
 8009a0c:	08009a9d 	.word	0x08009a9d
 8009a10:	08009ac9 	.word	0x08009ac9
 8009a14:	08009ac9 	.word	0x08009ac9
 8009a18:	08009ac9 	.word	0x08009ac9
 8009a1c:	08009ac9 	.word	0x08009ac9
 8009a20:	08009ac9 	.word	0x08009ac9
 8009a24:	08009ac9 	.word	0x08009ac9
 8009a28:	08009ac9 	.word	0x08009ac9
 8009a2c:	08009ab3 	.word	0x08009ab3
 8009a30:	08009ac9 	.word	0x08009ac9
 8009a34:	08009ac9 	.word	0x08009ac9
 8009a38:	08009ac9 	.word	0x08009ac9
 8009a3c:	08009ac9 	.word	0x08009ac9
 8009a40:	08009ac9 	.word	0x08009ac9
 8009a44:	08009ac9 	.word	0x08009ac9
 8009a48:	08009ac9 	.word	0x08009ac9
 8009a4c:	08009ad1 	.word	0x08009ad1
 8009a50:	08009ac9 	.word	0x08009ac9
 8009a54:	08009ac9 	.word	0x08009ac9
 8009a58:	08009ac9 	.word	0x08009ac9
 8009a5c:	08009ac9 	.word	0x08009ac9
 8009a60:	08009ac9 	.word	0x08009ac9
 8009a64:	08009ac9 	.word	0x08009ac9
 8009a68:	08009ac9 	.word	0x08009ac9
 8009a6c:	08009ad1 	.word	0x08009ad1
 8009a70:	08009ac9 	.word	0x08009ac9
 8009a74:	08009ac9 	.word	0x08009ac9
 8009a78:	08009ac9 	.word	0x08009ac9
 8009a7c:	08009ac9 	.word	0x08009ac9
 8009a80:	08009ac9 	.word	0x08009ac9
 8009a84:	08009ac9 	.word	0x08009ac9
 8009a88:	08009ac9 	.word	0x08009ac9
 8009a8c:	08009ad1 	.word	0x08009ad1
 8009a90:	58024400 	.word	0x58024400
 8009a94:	58024800 	.word	0x58024800
 8009a98:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aa0:	3308      	adds	r3, #8
 8009aa2:	2101      	movs	r1, #1
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f001 fdcb 	bl	800b640 <RCCEx_PLL2_Config>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009ab0:	e00f      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ab6:	3328      	adds	r3, #40	@ 0x28
 8009ab8:	2101      	movs	r1, #1
 8009aba:	4618      	mov	r0, r3
 8009abc:	f001 fe72 	bl	800b7a4 <RCCEx_PLL3_Config>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009ac6:	e004      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009ace:	e000      	b.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8009ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ad2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d10a      	bne.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009ada:	4bbf      	ldr	r3, [pc, #764]	@ (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ade:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ae6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ae8:	4abb      	ldr	r2, [pc, #748]	@ (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009aea:	430b      	orrs	r3, r1
 8009aec:	6553      	str	r3, [r2, #84]	@ 0x54
 8009aee:	e003      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009af0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009af4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b00:	f002 0302 	and.w	r3, r2, #2
 8009b04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b08:	2300      	movs	r3, #0
 8009b0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b0e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009b12:	460b      	mov	r3, r1
 8009b14:	4313      	orrs	r3, r2
 8009b16:	d041      	beq.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b1e:	2b05      	cmp	r3, #5
 8009b20:	d824      	bhi.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009b22:	a201      	add	r2, pc, #4	@ (adr r2, 8009b28 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b28:	08009b75 	.word	0x08009b75
 8009b2c:	08009b41 	.word	0x08009b41
 8009b30:	08009b57 	.word	0x08009b57
 8009b34:	08009b75 	.word	0x08009b75
 8009b38:	08009b75 	.word	0x08009b75
 8009b3c:	08009b75 	.word	0x08009b75
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b44:	3308      	adds	r3, #8
 8009b46:	2101      	movs	r1, #1
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f001 fd79 	bl	800b640 <RCCEx_PLL2_Config>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009b54:	e00f      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b5a:	3328      	adds	r3, #40	@ 0x28
 8009b5c:	2101      	movs	r1, #1
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f001 fe20 	bl	800b7a4 <RCCEx_PLL3_Config>
 8009b64:	4603      	mov	r3, r0
 8009b66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009b6a:	e004      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009b72:	e000      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10a      	bne.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009b7e:	4b96      	ldr	r3, [pc, #600]	@ (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b82:	f023 0107 	bic.w	r1, r3, #7
 8009b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b8c:	4a92      	ldr	r2, [pc, #584]	@ (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009b8e:	430b      	orrs	r3, r1
 8009b90:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b92:	e003      	b.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba4:	f002 0304 	and.w	r3, r2, #4
 8009ba8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009bac:	2300      	movs	r3, #0
 8009bae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009bb2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	d044      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bc4:	2b05      	cmp	r3, #5
 8009bc6:	d825      	bhi.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bce:	bf00      	nop
 8009bd0:	08009c1d 	.word	0x08009c1d
 8009bd4:	08009be9 	.word	0x08009be9
 8009bd8:	08009bff 	.word	0x08009bff
 8009bdc:	08009c1d 	.word	0x08009c1d
 8009be0:	08009c1d 	.word	0x08009c1d
 8009be4:	08009c1d 	.word	0x08009c1d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bec:	3308      	adds	r3, #8
 8009bee:	2101      	movs	r1, #1
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f001 fd25 	bl	800b640 <RCCEx_PLL2_Config>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009bfc:	e00f      	b.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c02:	3328      	adds	r3, #40	@ 0x28
 8009c04:	2101      	movs	r1, #1
 8009c06:	4618      	mov	r0, r3
 8009c08:	f001 fdcc 	bl	800b7a4 <RCCEx_PLL3_Config>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009c12:	e004      	b.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009c1a:	e000      	b.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d10b      	bne.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c26:	4b6c      	ldr	r3, [pc, #432]	@ (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c2a:	f023 0107 	bic.w	r1, r3, #7
 8009c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c36:	4a68      	ldr	r2, [pc, #416]	@ (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009c38:	430b      	orrs	r3, r1
 8009c3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c3c:	e003      	b.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c42:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	f002 0320 	and.w	r3, r2, #32
 8009c52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009c56:	2300      	movs	r3, #0
 8009c58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009c5c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009c60:	460b      	mov	r3, r1
 8009c62:	4313      	orrs	r3, r2
 8009c64:	d055      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c72:	d033      	beq.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c78:	d82c      	bhi.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c7e:	d02f      	beq.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c84:	d826      	bhi.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009c86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009c8a:	d02b      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009c8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009c90:	d820      	bhi.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009c92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c96:	d012      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009c98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c9c:	d81a      	bhi.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d022      	beq.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009ca2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ca6:	d115      	bne.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cac:	3308      	adds	r3, #8
 8009cae:	2100      	movs	r1, #0
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f001 fcc5 	bl	800b640 <RCCEx_PLL2_Config>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009cbc:	e015      	b.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cc2:	3328      	adds	r3, #40	@ 0x28
 8009cc4:	2102      	movs	r1, #2
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f001 fd6c 	bl	800b7a4 <RCCEx_PLL3_Config>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009cd2:	e00a      	b.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009cda:	e006      	b.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009cdc:	bf00      	nop
 8009cde:	e004      	b.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009ce0:	bf00      	nop
 8009ce2:	e002      	b.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009ce4:	bf00      	nop
 8009ce6:	e000      	b.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d10b      	bne.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009cf2:	4b39      	ldr	r3, [pc, #228]	@ (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cf6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d02:	4a35      	ldr	r2, [pc, #212]	@ (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009d04:	430b      	orrs	r3, r1
 8009d06:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d08:	e003      	b.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009d0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009d1e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d22:	2300      	movs	r3, #0
 8009d24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d28:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	d058      	beq.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d3a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009d3e:	d033      	beq.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009d40:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009d44:	d82c      	bhi.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d4a:	d02f      	beq.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009d4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d50:	d826      	bhi.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009d52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d56:	d02b      	beq.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009d58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d5c:	d820      	bhi.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009d5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d62:	d012      	beq.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009d64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d68:	d81a      	bhi.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d022      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009d6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d72:	d115      	bne.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d78:	3308      	adds	r3, #8
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f001 fc5f 	bl	800b640 <RCCEx_PLL2_Config>
 8009d82:	4603      	mov	r3, r0
 8009d84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009d88:	e015      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d8e:	3328      	adds	r3, #40	@ 0x28
 8009d90:	2102      	movs	r1, #2
 8009d92:	4618      	mov	r0, r3
 8009d94:	f001 fd06 	bl	800b7a4 <RCCEx_PLL3_Config>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009d9e:	e00a      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009da6:	e006      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009da8:	bf00      	nop
 8009daa:	e004      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009dac:	bf00      	nop
 8009dae:	e002      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009db0:	bf00      	nop
 8009db2:	e000      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009db6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d10e      	bne.n	8009ddc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009dbe:	4b06      	ldr	r3, [pc, #24]	@ (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dc2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009dce:	4a02      	ldr	r2, [pc, #8]	@ (8009dd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009dd0:	430b      	orrs	r3, r1
 8009dd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8009dd4:	e006      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009dd6:	bf00      	nop
 8009dd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ddc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009de0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009df0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009df4:	2300      	movs	r3, #0
 8009df6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009dfa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009dfe:	460b      	mov	r3, r1
 8009e00:	4313      	orrs	r3, r2
 8009e02:	d055      	beq.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e0c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009e10:	d033      	beq.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009e12:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009e16:	d82c      	bhi.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009e18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e1c:	d02f      	beq.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009e1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e22:	d826      	bhi.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009e24:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009e28:	d02b      	beq.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8009e2a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009e2e:	d820      	bhi.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009e30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e34:	d012      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8009e36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e3a:	d81a      	bhi.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d022      	beq.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009e40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e44:	d115      	bne.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e4a:	3308      	adds	r3, #8
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f001 fbf6 	bl	800b640 <RCCEx_PLL2_Config>
 8009e54:	4603      	mov	r3, r0
 8009e56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009e5a:	e015      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e60:	3328      	adds	r3, #40	@ 0x28
 8009e62:	2102      	movs	r1, #2
 8009e64:	4618      	mov	r0, r3
 8009e66:	f001 fc9d 	bl	800b7a4 <RCCEx_PLL3_Config>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009e70:	e00a      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009e78:	e006      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009e7a:	bf00      	nop
 8009e7c:	e004      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009e7e:	bf00      	nop
 8009e80:	e002      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009e82:	bf00      	nop
 8009e84:	e000      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009e86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d10b      	bne.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e90:	4ba0      	ldr	r3, [pc, #640]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e94:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ea0:	4a9c      	ldr	r2, [pc, #624]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ea2:	430b      	orrs	r3, r1
 8009ea4:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ea6:	e003      	b.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ea8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009eac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb8:	f002 0308 	and.w	r3, r2, #8
 8009ebc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009ec6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009eca:	460b      	mov	r3, r1
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	d01e      	beq.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ed8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009edc:	d10c      	bne.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ee2:	3328      	adds	r3, #40	@ 0x28
 8009ee4:	2102      	movs	r1, #2
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f001 fc5c 	bl	800b7a4 <RCCEx_PLL3_Config>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d002      	beq.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009ef8:	4b86      	ldr	r3, [pc, #536]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009efc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f08:	4a82      	ldr	r2, [pc, #520]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009f0a:	430b      	orrs	r3, r1
 8009f0c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009f0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f16:	f002 0310 	and.w	r3, r2, #16
 8009f1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f1e:	2300      	movs	r3, #0
 8009f20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f24:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009f28:	460b      	mov	r3, r1
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	d01e      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f3a:	d10c      	bne.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f40:	3328      	adds	r3, #40	@ 0x28
 8009f42:	2102      	movs	r1, #2
 8009f44:	4618      	mov	r0, r3
 8009f46:	f001 fc2d 	bl	800b7a4 <RCCEx_PLL3_Config>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d002      	beq.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009f56:	4b6f      	ldr	r3, [pc, #444]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f5a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f66:	4a6b      	ldr	r2, [pc, #428]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009f68:	430b      	orrs	r3, r1
 8009f6a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009f78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f7e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009f82:	460b      	mov	r3, r1
 8009f84:	4313      	orrs	r3, r2
 8009f86:	d03e      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009f90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f94:	d022      	beq.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009f96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f9a:	d81b      	bhi.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d003      	beq.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fa4:	d00b      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009fa6:	e015      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fac:	3308      	adds	r3, #8
 8009fae:	2100      	movs	r1, #0
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f001 fb45 	bl	800b640 <RCCEx_PLL2_Config>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009fbc:	e00f      	b.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fc2:	3328      	adds	r3, #40	@ 0x28
 8009fc4:	2102      	movs	r1, #2
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f001 fbec 	bl	800b7a4 <RCCEx_PLL3_Config>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009fd2:	e004      	b.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009fda:	e000      	b.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d10b      	bne.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009fe6:	4b4b      	ldr	r3, [pc, #300]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ff2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009ff6:	4a47      	ldr	r2, [pc, #284]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009ff8:	430b      	orrs	r3, r1
 8009ffa:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ffc:	e003      	b.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ffe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a002:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a012:	673b      	str	r3, [r7, #112]	@ 0x70
 800a014:	2300      	movs	r3, #0
 800a016:	677b      	str	r3, [r7, #116]	@ 0x74
 800a018:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a01c:	460b      	mov	r3, r1
 800a01e:	4313      	orrs	r3, r2
 800a020:	d03b      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a026:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a02a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a02e:	d01f      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a030:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a034:	d818      	bhi.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a03a:	d003      	beq.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a03c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a040:	d007      	beq.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a042:	e011      	b.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a044:	4b33      	ldr	r3, [pc, #204]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a048:	4a32      	ldr	r2, [pc, #200]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a04a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a04e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a050:	e00f      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a056:	3328      	adds	r3, #40	@ 0x28
 800a058:	2101      	movs	r1, #1
 800a05a:	4618      	mov	r0, r3
 800a05c:	f001 fba2 	bl	800b7a4 <RCCEx_PLL3_Config>
 800a060:	4603      	mov	r3, r0
 800a062:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a066:	e004      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a06e:	e000      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a070:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a072:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10b      	bne.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a07a:	4b26      	ldr	r3, [pc, #152]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a07c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a07e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a086:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a08a:	4a22      	ldr	r2, [pc, #136]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a08c:	430b      	orrs	r3, r1
 800a08e:	6553      	str	r3, [r2, #84]	@ 0x54
 800a090:	e003      	b.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a092:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a096:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a09a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a0a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a0ac:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	d034      	beq.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d003      	beq.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a0c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0c4:	d007      	beq.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a0c6:	e011      	b.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0c8:	4b12      	ldr	r3, [pc, #72]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a0ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0cc:	4a11      	ldr	r2, [pc, #68]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a0ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a0d4:	e00e      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0da:	3308      	adds	r3, #8
 800a0dc:	2102      	movs	r1, #2
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f001 faae 	bl	800b640 <RCCEx_PLL2_Config>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a0ea:	e003      	b.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a0f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d10d      	bne.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a0fc:	4b05      	ldr	r3, [pc, #20]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a0fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a100:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a10a:	4a02      	ldr	r2, [pc, #8]	@ (800a114 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a10c:	430b      	orrs	r3, r1
 800a10e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a110:	e006      	b.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a112:	bf00      	nop
 800a114:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a118:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a11c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a128:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a12c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a12e:	2300      	movs	r3, #0
 800a130:	667b      	str	r3, [r7, #100]	@ 0x64
 800a132:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a136:	460b      	mov	r3, r1
 800a138:	4313      	orrs	r3, r2
 800a13a:	d00c      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a13c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a140:	3328      	adds	r3, #40	@ 0x28
 800a142:	2102      	movs	r1, #2
 800a144:	4618      	mov	r0, r3
 800a146:	f001 fb2d 	bl	800b7a4 <RCCEx_PLL3_Config>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d002      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a162:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a164:	2300      	movs	r3, #0
 800a166:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a168:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a16c:	460b      	mov	r3, r1
 800a16e:	4313      	orrs	r3, r2
 800a170:	d036      	beq.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a176:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a178:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a17c:	d018      	beq.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a17e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a182:	d811      	bhi.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a188:	d014      	beq.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a18a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a18e:	d80b      	bhi.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a190:	2b00      	cmp	r3, #0
 800a192:	d011      	beq.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a198:	d106      	bne.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a19a:	4bb7      	ldr	r3, [pc, #732]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a19c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a19e:	4ab6      	ldr	r2, [pc, #728]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a1a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a1a6:	e008      	b.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a1ae:	e004      	b.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a1b0:	bf00      	nop
 800a1b2:	e002      	b.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a1b4:	bf00      	nop
 800a1b6:	e000      	b.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a1b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10a      	bne.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a1c2:	4bad      	ldr	r3, [pc, #692]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a1c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a1d0:	4aa9      	ldr	r2, [pc, #676]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a1d2:	430b      	orrs	r3, r1
 800a1d4:	6553      	str	r3, [r2, #84]	@ 0x54
 800a1d6:	e003      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a1e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a1ec:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1f2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	d009      	beq.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a1fc:	4b9e      	ldr	r3, [pc, #632]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a1fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a200:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a204:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a20a:	4a9b      	ldr	r2, [pc, #620]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a20c:	430b      	orrs	r3, r1
 800a20e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a218:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a21c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a21e:	2300      	movs	r3, #0
 800a220:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a222:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a226:	460b      	mov	r3, r1
 800a228:	4313      	orrs	r3, r2
 800a22a:	d009      	beq.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a22c:	4b92      	ldr	r3, [pc, #584]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a22e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a230:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a238:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a23a:	4a8f      	ldr	r2, [pc, #572]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a23c:	430b      	orrs	r3, r1
 800a23e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a248:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a24c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a24e:	2300      	movs	r3, #0
 800a250:	647b      	str	r3, [r7, #68]	@ 0x44
 800a252:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a256:	460b      	mov	r3, r1
 800a258:	4313      	orrs	r3, r2
 800a25a:	d00e      	beq.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a25c:	4b86      	ldr	r3, [pc, #536]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	4a85      	ldr	r2, [pc, #532]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a262:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a266:	6113      	str	r3, [r2, #16]
 800a268:	4b83      	ldr	r3, [pc, #524]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a26a:	6919      	ldr	r1, [r3, #16]
 800a26c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a270:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a274:	4a80      	ldr	r2, [pc, #512]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a276:	430b      	orrs	r3, r1
 800a278:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a27a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a282:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a286:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a288:	2300      	movs	r3, #0
 800a28a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a28c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a290:	460b      	mov	r3, r1
 800a292:	4313      	orrs	r3, r2
 800a294:	d009      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a296:	4b78      	ldr	r3, [pc, #480]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a29a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a29e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2a4:	4a74      	ldr	r2, [pc, #464]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a2a6:	430b      	orrs	r3, r1
 800a2a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a2aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a2b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2bc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	d00a      	beq.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a2c6:	4b6c      	ldr	r3, [pc, #432]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a2c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2ca:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a2ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2d6:	4a68      	ldr	r2, [pc, #416]	@ (800a478 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a2d8:	430b      	orrs	r3, r1
 800a2da:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a2dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a2e8:	f003 0301 	and.w	r3, r3, #1
 800a2ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a2ee:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	d011      	beq.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2fc:	3308      	adds	r3, #8
 800a2fe:	2100      	movs	r1, #0
 800a300:	4618      	mov	r0, r3
 800a302:	f001 f99d 	bl	800b640 <RCCEx_PLL2_Config>
 800a306:	4603      	mov	r3, r0
 800a308:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a30c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a310:	2b00      	cmp	r3, #0
 800a312:	d003      	beq.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a314:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a318:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a31c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a324:	2100      	movs	r1, #0
 800a326:	6239      	str	r1, [r7, #32]
 800a328:	f003 0302 	and.w	r3, r3, #2
 800a32c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a32e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a332:	460b      	mov	r3, r1
 800a334:	4313      	orrs	r3, r2
 800a336:	d011      	beq.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a33c:	3308      	adds	r3, #8
 800a33e:	2101      	movs	r1, #1
 800a340:	4618      	mov	r0, r3
 800a342:	f001 f97d 	bl	800b640 <RCCEx_PLL2_Config>
 800a346:	4603      	mov	r3, r0
 800a348:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a34c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a350:	2b00      	cmp	r3, #0
 800a352:	d003      	beq.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a354:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a358:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a35c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a364:	2100      	movs	r1, #0
 800a366:	61b9      	str	r1, [r7, #24]
 800a368:	f003 0304 	and.w	r3, r3, #4
 800a36c:	61fb      	str	r3, [r7, #28]
 800a36e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a372:	460b      	mov	r3, r1
 800a374:	4313      	orrs	r3, r2
 800a376:	d011      	beq.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a37c:	3308      	adds	r3, #8
 800a37e:	2102      	movs	r1, #2
 800a380:	4618      	mov	r0, r3
 800a382:	f001 f95d 	bl	800b640 <RCCEx_PLL2_Config>
 800a386:	4603      	mov	r3, r0
 800a388:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a38c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a390:	2b00      	cmp	r3, #0
 800a392:	d003      	beq.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a394:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a398:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a39c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	6139      	str	r1, [r7, #16]
 800a3a8:	f003 0308 	and.w	r3, r3, #8
 800a3ac:	617b      	str	r3, [r7, #20]
 800a3ae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	d011      	beq.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a3b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3bc:	3328      	adds	r3, #40	@ 0x28
 800a3be:	2100      	movs	r1, #0
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f001 f9ef 	bl	800b7a4 <RCCEx_PLL3_Config>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800a3cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d003      	beq.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	2100      	movs	r1, #0
 800a3e6:	60b9      	str	r1, [r7, #8]
 800a3e8:	f003 0310 	and.w	r3, r3, #16
 800a3ec:	60fb      	str	r3, [r7, #12]
 800a3ee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	d011      	beq.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3fc:	3328      	adds	r3, #40	@ 0x28
 800a3fe:	2101      	movs	r1, #1
 800a400:	4618      	mov	r0, r3
 800a402:	f001 f9cf 	bl	800b7a4 <RCCEx_PLL3_Config>
 800a406:	4603      	mov	r3, r0
 800a408:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a40c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a410:	2b00      	cmp	r3, #0
 800a412:	d003      	beq.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a414:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a418:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a41c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a424:	2100      	movs	r1, #0
 800a426:	6039      	str	r1, [r7, #0]
 800a428:	f003 0320 	and.w	r3, r3, #32
 800a42c:	607b      	str	r3, [r7, #4]
 800a42e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a432:	460b      	mov	r3, r1
 800a434:	4313      	orrs	r3, r2
 800a436:	d011      	beq.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a43c:	3328      	adds	r3, #40	@ 0x28
 800a43e:	2102      	movs	r1, #2
 800a440:	4618      	mov	r0, r3
 800a442:	f001 f9af 	bl	800b7a4 <RCCEx_PLL3_Config>
 800a446:	4603      	mov	r3, r0
 800a448:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800a44c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a450:	2b00      	cmp	r3, #0
 800a452:	d003      	beq.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a454:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a458:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800a45c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800a460:	2b00      	cmp	r3, #0
 800a462:	d101      	bne.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800a464:	2300      	movs	r3, #0
 800a466:	e000      	b.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a470:	46bd      	mov	sp, r7
 800a472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a476:	bf00      	nop
 800a478:	58024400 	.word	0x58024400

0800a47c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b090      	sub	sp, #64	@ 0x40
 800a480:	af00      	add	r7, sp, #0
 800a482:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a486:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a48a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a48e:	430b      	orrs	r3, r1
 800a490:	f040 8094 	bne.w	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a494:	4b9b      	ldr	r3, [pc, #620]	@ (800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a498:	f003 0307 	and.w	r3, r3, #7
 800a49c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a0:	2b04      	cmp	r3, #4
 800a4a2:	f200 8087 	bhi.w	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a4a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ac:	0800a4c1 	.word	0x0800a4c1
 800a4b0:	0800a4e9 	.word	0x0800a4e9
 800a4b4:	0800a511 	.word	0x0800a511
 800a4b8:	0800a5ad 	.word	0x0800a5ad
 800a4bc:	0800a539 	.word	0x0800a539
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4c0:	4b90      	ldr	r3, [pc, #576]	@ (800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4cc:	d108      	bne.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f000 ff62 	bl	800b39c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4dc:	f000 bc93 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4e4:	f000 bc8f 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4e8:	4b86      	ldr	r3, [pc, #536]	@ (800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4f4:	d108      	bne.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4f6:	f107 0318 	add.w	r3, r7, #24
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f000 fca6 	bl	800ae4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a504:	f000 bc7f 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a508:	2300      	movs	r3, #0
 800a50a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a50c:	f000 bc7b 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a510:	4b7c      	ldr	r3, [pc, #496]	@ (800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a518:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a51c:	d108      	bne.n	800a530 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a51e:	f107 030c 	add.w	r3, r7, #12
 800a522:	4618      	mov	r0, r3
 800a524:	f000 fde6 	bl	800b0f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a52c:	f000 bc6b 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a530:	2300      	movs	r3, #0
 800a532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a534:	f000 bc67 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a538:	4b72      	ldr	r3, [pc, #456]	@ (800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a53a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a53c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a540:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a542:	4b70      	ldr	r3, [pc, #448]	@ (800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f003 0304 	and.w	r3, r3, #4
 800a54a:	2b04      	cmp	r3, #4
 800a54c:	d10c      	bne.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a54e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a550:	2b00      	cmp	r3, #0
 800a552:	d109      	bne.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a554:	4b6b      	ldr	r3, [pc, #428]	@ (800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	08db      	lsrs	r3, r3, #3
 800a55a:	f003 0303 	and.w	r3, r3, #3
 800a55e:	4a6a      	ldr	r2, [pc, #424]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a560:	fa22 f303 	lsr.w	r3, r2, r3
 800a564:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a566:	e01f      	b.n	800a5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a568:	4b66      	ldr	r3, [pc, #408]	@ (800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a574:	d106      	bne.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a578:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a57c:	d102      	bne.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a57e:	4b63      	ldr	r3, [pc, #396]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a580:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a582:	e011      	b.n	800a5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a584:	4b5f      	ldr	r3, [pc, #380]	@ (800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a58c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a590:	d106      	bne.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a594:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a598:	d102      	bne.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a59a:	4b5d      	ldr	r3, [pc, #372]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a59e:	e003      	b.n	800a5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a5a4:	f000 bc2f 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a5a8:	f000 bc2d 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a5ac:	4b59      	ldr	r3, [pc, #356]	@ (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b0:	f000 bc29 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b8:	f000 bc25 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a5bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5c0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a5c4:	430b      	orrs	r3, r1
 800a5c6:	f040 80a7 	bne.w	800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a5ca:	4b4e      	ldr	r3, [pc, #312]	@ (800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a5cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5ce:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a5d2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a5d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a5da:	d054      	beq.n	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800a5dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a5e2:	f200 808b 	bhi.w	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a5ec:	f000 8083 	beq.w	800a6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800a5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a5f6:	f200 8081 	bhi.w	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a600:	d02f      	beq.n	800a662 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a604:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a608:	d878      	bhi.n	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800a60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d004      	beq.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800a610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a612:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a616:	d012      	beq.n	800a63e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800a618:	e070      	b.n	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a61a:	4b3a      	ldr	r3, [pc, #232]	@ (800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a622:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a626:	d107      	bne.n	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a628:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a62c:	4618      	mov	r0, r3
 800a62e:	f000 feb5 	bl	800b39c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a636:	e3e6      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a638:	2300      	movs	r3, #0
 800a63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a63c:	e3e3      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a63e:	4b31      	ldr	r3, [pc, #196]	@ (800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a646:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a64a:	d107      	bne.n	800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a64c:	f107 0318 	add.w	r3, r7, #24
 800a650:	4618      	mov	r0, r3
 800a652:	f000 fbfb 	bl	800ae4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a65a:	e3d4      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a65c:	2300      	movs	r3, #0
 800a65e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a660:	e3d1      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a662:	4b28      	ldr	r3, [pc, #160]	@ (800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a66a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a66e:	d107      	bne.n	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a670:	f107 030c 	add.w	r3, r7, #12
 800a674:	4618      	mov	r0, r3
 800a676:	f000 fd3d 	bl	800b0f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a67e:	e3c2      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a680:	2300      	movs	r3, #0
 800a682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a684:	e3bf      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a686:	4b1f      	ldr	r3, [pc, #124]	@ (800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a68a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a68e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a690:	4b1c      	ldr	r3, [pc, #112]	@ (800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f003 0304 	and.w	r3, r3, #4
 800a698:	2b04      	cmp	r3, #4
 800a69a:	d10c      	bne.n	800a6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800a69c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d109      	bne.n	800a6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6a2:	4b18      	ldr	r3, [pc, #96]	@ (800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	08db      	lsrs	r3, r3, #3
 800a6a8:	f003 0303 	and.w	r3, r3, #3
 800a6ac:	4a16      	ldr	r2, [pc, #88]	@ (800a708 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800a6ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6b4:	e01e      	b.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6b6:	4b13      	ldr	r3, [pc, #76]	@ (800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6c2:	d106      	bne.n	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800a6c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6ca:	d102      	bne.n	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a6cc:	4b0f      	ldr	r3, [pc, #60]	@ (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800a6ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6d0:	e010      	b.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6d2:	4b0c      	ldr	r3, [pc, #48]	@ (800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6de:	d106      	bne.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800a6e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6e6:	d102      	bne.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6e8:	4b09      	ldr	r3, [pc, #36]	@ (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6ec:	e002      	b.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a6f2:	e388      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a6f4:	e387      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a6f6:	4b07      	ldr	r3, [pc, #28]	@ (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a6f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6fa:	e384      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a700:	e381      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a702:	bf00      	nop
 800a704:	58024400 	.word	0x58024400
 800a708:	03d09000 	.word	0x03d09000
 800a70c:	003d0900 	.word	0x003d0900
 800a710:	017d7840 	.word	0x017d7840
 800a714:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a71c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a720:	430b      	orrs	r3, r1
 800a722:	f040 809c 	bne.w	800a85e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a726:	4b9e      	ldr	r3, [pc, #632]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a72a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a72e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a732:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a736:	d054      	beq.n	800a7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a73e:	f200 808b 	bhi.w	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a744:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a748:	f000 8083 	beq.w	800a852 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800a74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a752:	f200 8081 	bhi.w	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a758:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a75c:	d02f      	beq.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a760:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a764:	d878      	bhi.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d004      	beq.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a772:	d012      	beq.n	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a774:	e070      	b.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a776:	4b8a      	ldr	r3, [pc, #552]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a77e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a782:	d107      	bne.n	800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a788:	4618      	mov	r0, r3
 800a78a:	f000 fe07 	bl	800b39c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a78e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a792:	e338      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a794:	2300      	movs	r3, #0
 800a796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a798:	e335      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a79a:	4b81      	ldr	r3, [pc, #516]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7a6:	d107      	bne.n	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7a8:	f107 0318 	add.w	r3, r7, #24
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f000 fb4d 	bl	800ae4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7b6:	e326      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7bc:	e323      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7be:	4b78      	ldr	r3, [pc, #480]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7ca:	d107      	bne.n	800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7cc:	f107 030c 	add.w	r3, r7, #12
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 fc8f 	bl	800b0f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7da:	e314      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7e0:	e311      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7e2:	4b6f      	ldr	r3, [pc, #444]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a7e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a7ea:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7ec:	4b6c      	ldr	r3, [pc, #432]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 0304 	and.w	r3, r3, #4
 800a7f4:	2b04      	cmp	r3, #4
 800a7f6:	d10c      	bne.n	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a7f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d109      	bne.n	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7fe:	4b68      	ldr	r3, [pc, #416]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	08db      	lsrs	r3, r3, #3
 800a804:	f003 0303 	and.w	r3, r3, #3
 800a808:	4a66      	ldr	r2, [pc, #408]	@ (800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a80a:	fa22 f303 	lsr.w	r3, r2, r3
 800a80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a810:	e01e      	b.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a812:	4b63      	ldr	r3, [pc, #396]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a81a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a81e:	d106      	bne.n	800a82e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a822:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a826:	d102      	bne.n	800a82e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a828:	4b5f      	ldr	r3, [pc, #380]	@ (800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a82c:	e010      	b.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a82e:	4b5c      	ldr	r3, [pc, #368]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a836:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a83a:	d106      	bne.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a83c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a83e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a842:	d102      	bne.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a844:	4b59      	ldr	r3, [pc, #356]	@ (800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a846:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a848:	e002      	b.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a84a:	2300      	movs	r3, #0
 800a84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a84e:	e2da      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a850:	e2d9      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a852:	4b57      	ldr	r3, [pc, #348]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a856:	e2d6      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a858:	2300      	movs	r3, #0
 800a85a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a85c:	e2d3      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a85e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a862:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a866:	430b      	orrs	r3, r1
 800a868:	f040 80a7 	bne.w	800a9ba <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a86c:	4b4c      	ldr	r3, [pc, #304]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a86e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a870:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a874:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a878:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a87c:	d055      	beq.n	800a92a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a87e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a880:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a884:	f200 8096 	bhi.w	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a88a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a88e:	f000 8084 	beq.w	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a894:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a898:	f200 808c 	bhi.w	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a89e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8a2:	d030      	beq.n	800a906 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8aa:	f200 8083 	bhi.w	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a8ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d004      	beq.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8ba:	d012      	beq.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a8bc:	e07a      	b.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8be:	4b38      	ldr	r3, [pc, #224]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8ca:	d107      	bne.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f000 fd63 	bl	800b39c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8da:	e294      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8e0:	e291      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8e2:	4b2f      	ldr	r3, [pc, #188]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8ee:	d107      	bne.n	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8f0:	f107 0318 	add.w	r3, r7, #24
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f000 faa9 	bl	800ae4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8fe:	e282      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a900:	2300      	movs	r3, #0
 800a902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a904:	e27f      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a906:	4b26      	ldr	r3, [pc, #152]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a90e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a912:	d107      	bne.n	800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a914:	f107 030c 	add.w	r3, r7, #12
 800a918:	4618      	mov	r0, r3
 800a91a:	f000 fbeb 	bl	800b0f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a922:	e270      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a924:	2300      	movs	r3, #0
 800a926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a928:	e26d      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a92a:	4b1d      	ldr	r3, [pc, #116]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a92c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a92e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a932:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a934:	4b1a      	ldr	r3, [pc, #104]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f003 0304 	and.w	r3, r3, #4
 800a93c:	2b04      	cmp	r3, #4
 800a93e:	d10c      	bne.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a942:	2b00      	cmp	r3, #0
 800a944:	d109      	bne.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a946:	4b16      	ldr	r3, [pc, #88]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	08db      	lsrs	r3, r3, #3
 800a94c:	f003 0303 	and.w	r3, r3, #3
 800a950:	4a14      	ldr	r2, [pc, #80]	@ (800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a952:	fa22 f303 	lsr.w	r3, r2, r3
 800a956:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a958:	e01e      	b.n	800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a95a:	4b11      	ldr	r3, [pc, #68]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a966:	d106      	bne.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a96a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a96e:	d102      	bne.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a970:	4b0d      	ldr	r3, [pc, #52]	@ (800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a972:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a974:	e010      	b.n	800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a976:	4b0a      	ldr	r3, [pc, #40]	@ (800a9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a97e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a982:	d106      	bne.n	800a992 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a986:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a98a:	d102      	bne.n	800a992 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a98c:	4b07      	ldr	r3, [pc, #28]	@ (800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a98e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a990:	e002      	b.n	800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a992:	2300      	movs	r3, #0
 800a994:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a996:	e236      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a998:	e235      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a99a:	4b05      	ldr	r3, [pc, #20]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a99e:	e232      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a9a0:	58024400 	.word	0x58024400
 800a9a4:	03d09000 	.word	0x03d09000
 800a9a8:	003d0900 	.word	0x003d0900
 800a9ac:	017d7840 	.word	0x017d7840
 800a9b0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9b8:	e225      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a9ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9be:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a9c2:	430b      	orrs	r3, r1
 800a9c4:	f040 8085 	bne.w	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a9c8:	4b9c      	ldr	r3, [pc, #624]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a9ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9cc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a9d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a9d8:	d06b      	beq.n	800aab2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a9e0:	d874      	bhi.n	800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a9e8:	d056      	beq.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a9f0:	d86c      	bhi.n	800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a9f8:	d03b      	beq.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa00:	d864      	bhi.n	800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aa02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa08:	d021      	beq.n	800aa4e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800aa0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa10:	d85c      	bhi.n	800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aa12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d004      	beq.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800aa18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa1e:	d004      	beq.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800aa20:	e054      	b.n	800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800aa22:	f7fe fb5f 	bl	80090e4 <HAL_RCC_GetPCLK1Freq>
 800aa26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa28:	e1ed      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa2a:	4b84      	ldr	r3, [pc, #528]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa36:	d107      	bne.n	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa38:	f107 0318 	add.w	r3, r7, #24
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f000 fa05 	bl	800ae4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa42:	69fb      	ldr	r3, [r7, #28]
 800aa44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa46:	e1de      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa4c:	e1db      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa4e:	4b7b      	ldr	r3, [pc, #492]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa5a:	d107      	bne.n	800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa5c:	f107 030c 	add.w	r3, r7, #12
 800aa60:	4618      	mov	r0, r3
 800aa62:	f000 fb47 	bl	800b0f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa6a:	e1cc      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa70:	e1c9      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa72:	4b72      	ldr	r3, [pc, #456]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f003 0304 	and.w	r3, r3, #4
 800aa7a:	2b04      	cmp	r3, #4
 800aa7c:	d109      	bne.n	800aa92 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa7e:	4b6f      	ldr	r3, [pc, #444]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	08db      	lsrs	r3, r3, #3
 800aa84:	f003 0303 	and.w	r3, r3, #3
 800aa88:	4a6d      	ldr	r2, [pc, #436]	@ (800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800aa8a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa90:	e1b9      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aa92:	2300      	movs	r3, #0
 800aa94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa96:	e1b6      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aa98:	4b68      	ldr	r3, [pc, #416]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aaa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aaa4:	d102      	bne.n	800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800aaa6:	4b67      	ldr	r3, [pc, #412]	@ (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800aaa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaaa:	e1ac      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aaac:	2300      	movs	r3, #0
 800aaae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aab0:	e1a9      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aab2:	4b62      	ldr	r3, [pc, #392]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aaba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aabe:	d102      	bne.n	800aac6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800aac0:	4b61      	ldr	r3, [pc, #388]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800aac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aac4:	e19f      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aac6:	2300      	movs	r3, #0
 800aac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaca:	e19c      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800aacc:	2300      	movs	r3, #0
 800aace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aad0:	e199      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800aad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aad6:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800aada:	430b      	orrs	r3, r1
 800aadc:	d173      	bne.n	800abc6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800aade:	4b57      	ldr	r3, [pc, #348]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800aae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aae2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aae6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaee:	d02f      	beq.n	800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800aaf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaf6:	d863      	bhi.n	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d004      	beq.n	800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800aafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab04:	d012      	beq.n	800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800ab06:	e05b      	b.n	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab08:	4b4c      	ldr	r3, [pc, #304]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab14:	d107      	bne.n	800ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab16:	f107 0318 	add.w	r3, r7, #24
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 f996 	bl	800ae4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab24:	e16f      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab26:	2300      	movs	r3, #0
 800ab28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab2a:	e16c      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab2c:	4b43      	ldr	r3, [pc, #268]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab38:	d107      	bne.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab3a:	f107 030c 	add.w	r3, r7, #12
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f000 fad8 	bl	800b0f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab48:	e15d      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab4e:	e15a      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab50:	4b3a      	ldr	r3, [pc, #232]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ab52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ab58:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab5a:	4b38      	ldr	r3, [pc, #224]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f003 0304 	and.w	r3, r3, #4
 800ab62:	2b04      	cmp	r3, #4
 800ab64:	d10c      	bne.n	800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800ab66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d109      	bne.n	800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab6c:	4b33      	ldr	r3, [pc, #204]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	08db      	lsrs	r3, r3, #3
 800ab72:	f003 0303 	and.w	r3, r3, #3
 800ab76:	4a32      	ldr	r2, [pc, #200]	@ (800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800ab78:	fa22 f303 	lsr.w	r3, r2, r3
 800ab7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab7e:	e01e      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab80:	4b2e      	ldr	r3, [pc, #184]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab8c:	d106      	bne.n	800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800ab8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab94:	d102      	bne.n	800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ab96:	4b2b      	ldr	r3, [pc, #172]	@ (800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800ab98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab9a:	e010      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab9c:	4b27      	ldr	r3, [pc, #156]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aba4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aba8:	d106      	bne.n	800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800abaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abb0:	d102      	bne.n	800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800abb2:	4b25      	ldr	r3, [pc, #148]	@ (800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800abb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abb6:	e002      	b.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800abb8:	2300      	movs	r3, #0
 800abba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800abbc:	e123      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800abbe:	e122      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800abc0:	2300      	movs	r3, #0
 800abc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abc4:	e11f      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800abc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abca:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800abce:	430b      	orrs	r3, r1
 800abd0:	d13c      	bne.n	800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800abd2:	4b1a      	ldr	r3, [pc, #104]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800abd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800abda:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800abdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d004      	beq.n	800abec <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800abe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abe8:	d012      	beq.n	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800abea:	e023      	b.n	800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800abec:	4b13      	ldr	r3, [pc, #76]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abf4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800abf8:	d107      	bne.n	800ac0a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800abfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800abfe:	4618      	mov	r0, r3
 800ac00:	f000 fbcc 	bl	800b39c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac08:	e0fd      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac0e:	e0fa      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac10:	4b0a      	ldr	r3, [pc, #40]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac1c:	d107      	bne.n	800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac1e:	f107 0318 	add.w	r3, r7, #24
 800ac22:	4618      	mov	r0, r3
 800ac24:	f000 f912 	bl	800ae4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ac28:	6a3b      	ldr	r3, [r7, #32]
 800ac2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac2c:	e0eb      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac32:	e0e8      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ac34:	2300      	movs	r3, #0
 800ac36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac38:	e0e5      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ac3a:	bf00      	nop
 800ac3c:	58024400 	.word	0x58024400
 800ac40:	03d09000 	.word	0x03d09000
 800ac44:	003d0900 	.word	0x003d0900
 800ac48:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ac4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac50:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800ac54:	430b      	orrs	r3, r1
 800ac56:	f040 8085 	bne.w	800ad64 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ac5a:	4b6d      	ldr	r3, [pc, #436]	@ (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ac5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac5e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800ac62:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac6a:	d06b      	beq.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800ac6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac72:	d874      	bhi.n	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ac74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac7a:	d056      	beq.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800ac7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac82:	d86c      	bhi.n	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ac84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ac8a:	d03b      	beq.n	800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800ac8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ac92:	d864      	bhi.n	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ac94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac9a:	d021      	beq.n	800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800ac9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aca2:	d85c      	bhi.n	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800aca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d004      	beq.n	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800acaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acb0:	d004      	beq.n	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800acb2:	e054      	b.n	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800acb4:	f000 f8b4 	bl	800ae20 <HAL_RCCEx_GetD3PCLK1Freq>
 800acb8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800acba:	e0a4      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acbc:	4b54      	ldr	r3, [pc, #336]	@ (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800acc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800acc8:	d107      	bne.n	800acda <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acca:	f107 0318 	add.w	r3, r7, #24
 800acce:	4618      	mov	r0, r3
 800acd0:	f000 f8bc 	bl	800ae4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800acd4:	69fb      	ldr	r3, [r7, #28]
 800acd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acd8:	e095      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acda:	2300      	movs	r3, #0
 800acdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acde:	e092      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ace0:	4b4b      	ldr	r3, [pc, #300]	@ (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ace8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acec:	d107      	bne.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acee:	f107 030c 	add.w	r3, r7, #12
 800acf2:	4618      	mov	r0, r3
 800acf4:	f000 f9fe 	bl	800b0f4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acfc:	e083      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acfe:	2300      	movs	r3, #0
 800ad00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad02:	e080      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad04:	4b42      	ldr	r3, [pc, #264]	@ (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f003 0304 	and.w	r3, r3, #4
 800ad0c:	2b04      	cmp	r3, #4
 800ad0e:	d109      	bne.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad10:	4b3f      	ldr	r3, [pc, #252]	@ (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	08db      	lsrs	r3, r3, #3
 800ad16:	f003 0303 	and.w	r3, r3, #3
 800ad1a:	4a3e      	ldr	r2, [pc, #248]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800ad1c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad22:	e070      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad24:	2300      	movs	r3, #0
 800ad26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad28:	e06d      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ad2a:	4b39      	ldr	r3, [pc, #228]	@ (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad36:	d102      	bne.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800ad38:	4b37      	ldr	r3, [pc, #220]	@ (800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ad3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad3c:	e063      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad42:	e060      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad44:	4b32      	ldr	r3, [pc, #200]	@ (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad50:	d102      	bne.n	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800ad52:	4b32      	ldr	r3, [pc, #200]	@ (800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ad54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad56:	e056      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad5c:	e053      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad62:	e050      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ad64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad68:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ad6c:	430b      	orrs	r3, r1
 800ad6e:	d148      	bne.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ad70:	4b27      	ldr	r3, [pc, #156]	@ (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ad78:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad80:	d02a      	beq.n	800add8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800ad82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad88:	d838      	bhi.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800ad8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d004      	beq.n	800ad9a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800ad90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad96:	d00d      	beq.n	800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800ad98:	e030      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad9a:	4b1d      	ldr	r3, [pc, #116]	@ (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ada2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ada6:	d102      	bne.n	800adae <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800ada8:	4b1c      	ldr	r3, [pc, #112]	@ (800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800adaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adac:	e02b      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800adae:	2300      	movs	r3, #0
 800adb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adb2:	e028      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800adb4:	4b16      	ldr	r3, [pc, #88]	@ (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800adbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800adc0:	d107      	bne.n	800add2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800adc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800adc6:	4618      	mov	r0, r3
 800adc8:	f000 fae8 	bl	800b39c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800adcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800add0:	e019      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800add2:	2300      	movs	r3, #0
 800add4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800add6:	e016      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800add8:	4b0d      	ldr	r3, [pc, #52]	@ (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ade0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ade4:	d107      	bne.n	800adf6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ade6:	f107 0318 	add.w	r3, r7, #24
 800adea:	4618      	mov	r0, r3
 800adec:	f000 f82e 	bl	800ae4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adf4:	e007      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800adf6:	2300      	movs	r3, #0
 800adf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adfa:	e004      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800adfc:	2300      	movs	r3, #0
 800adfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae00:	e001      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800ae02:	2300      	movs	r3, #0
 800ae04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ae06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3740      	adds	r7, #64	@ 0x40
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	58024400 	.word	0x58024400
 800ae14:	03d09000 	.word	0x03d09000
 800ae18:	003d0900 	.word	0x003d0900
 800ae1c:	017d7840 	.word	0x017d7840

0800ae20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ae24:	f7fe f92e 	bl	8009084 <HAL_RCC_GetHCLKFreq>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	4b06      	ldr	r3, [pc, #24]	@ (800ae44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ae2c:	6a1b      	ldr	r3, [r3, #32]
 800ae2e:	091b      	lsrs	r3, r3, #4
 800ae30:	f003 0307 	and.w	r3, r3, #7
 800ae34:	4904      	ldr	r1, [pc, #16]	@ (800ae48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ae36:	5ccb      	ldrb	r3, [r1, r3]
 800ae38:	f003 031f 	and.w	r3, r3, #31
 800ae3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	58024400 	.word	0x58024400
 800ae48:	08013190 	.word	0x08013190

0800ae4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b089      	sub	sp, #36	@ 0x24
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae54:	4ba1      	ldr	r3, [pc, #644]	@ (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae58:	f003 0303 	and.w	r3, r3, #3
 800ae5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ae5e:	4b9f      	ldr	r3, [pc, #636]	@ (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae62:	0b1b      	lsrs	r3, r3, #12
 800ae64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ae6a:	4b9c      	ldr	r3, [pc, #624]	@ (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae6e:	091b      	lsrs	r3, r3, #4
 800ae70:	f003 0301 	and.w	r3, r3, #1
 800ae74:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ae76:	4b99      	ldr	r3, [pc, #612]	@ (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae7a:	08db      	lsrs	r3, r3, #3
 800ae7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae80:	693a      	ldr	r2, [r7, #16]
 800ae82:	fb02 f303 	mul.w	r3, r2, r3
 800ae86:	ee07 3a90 	vmov	s15, r3
 800ae8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f000 8111 	beq.w	800b0bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ae9a:	69bb      	ldr	r3, [r7, #24]
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	f000 8083 	beq.w	800afa8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	2b02      	cmp	r3, #2
 800aea6:	f200 80a1 	bhi.w	800afec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d003      	beq.n	800aeb8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aeb0:	69bb      	ldr	r3, [r7, #24]
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d056      	beq.n	800af64 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aeb6:	e099      	b.n	800afec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aeb8:	4b88      	ldr	r3, [pc, #544]	@ (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f003 0320 	and.w	r3, r3, #32
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d02d      	beq.n	800af20 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aec4:	4b85      	ldr	r3, [pc, #532]	@ (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	08db      	lsrs	r3, r3, #3
 800aeca:	f003 0303 	and.w	r3, r3, #3
 800aece:	4a84      	ldr	r2, [pc, #528]	@ (800b0e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aed0:	fa22 f303 	lsr.w	r3, r2, r3
 800aed4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	ee07 3a90 	vmov	s15, r3
 800aedc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	ee07 3a90 	vmov	s15, r3
 800aee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeee:	4b7b      	ldr	r3, [pc, #492]	@ (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aef6:	ee07 3a90 	vmov	s15, r3
 800aefa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aefe:	ed97 6a03 	vldr	s12, [r7, #12]
 800af02:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800af1e:	e087      	b.n	800b030 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	ee07 3a90 	vmov	s15, r3
 800af26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af2a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800af2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af32:	4b6a      	ldr	r3, [pc, #424]	@ (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af3a:	ee07 3a90 	vmov	s15, r3
 800af3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af42:	ed97 6a03 	vldr	s12, [r7, #12]
 800af46:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af62:	e065      	b.n	800b030 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	ee07 3a90 	vmov	s15, r3
 800af6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af6e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b0ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af76:	4b59      	ldr	r3, [pc, #356]	@ (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af7e:	ee07 3a90 	vmov	s15, r3
 800af82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af86:	ed97 6a03 	vldr	s12, [r7, #12]
 800af8a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afa6:	e043      	b.n	800b030 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	ee07 3a90 	vmov	s15, r3
 800afae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afb2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b0f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800afb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afba:	4b48      	ldr	r3, [pc, #288]	@ (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afc2:	ee07 3a90 	vmov	s15, r3
 800afc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afca:	ed97 6a03 	vldr	s12, [r7, #12]
 800afce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afea:	e021      	b.n	800b030 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	ee07 3a90 	vmov	s15, r3
 800aff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aff6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b0ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800affa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800affe:	4b37      	ldr	r3, [pc, #220]	@ (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b006:	ee07 3a90 	vmov	s15, r3
 800b00a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b00e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b012:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b01a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b01e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b02a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b02e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b030:	4b2a      	ldr	r3, [pc, #168]	@ (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b034:	0a5b      	lsrs	r3, r3, #9
 800b036:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b03a:	ee07 3a90 	vmov	s15, r3
 800b03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b042:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b046:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b04a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b04e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b056:	ee17 2a90 	vmov	r2, s15
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b05e:	4b1f      	ldr	r3, [pc, #124]	@ (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b062:	0c1b      	lsrs	r3, r3, #16
 800b064:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b068:	ee07 3a90 	vmov	s15, r3
 800b06c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b070:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b074:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b078:	edd7 6a07 	vldr	s13, [r7, #28]
 800b07c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b084:	ee17 2a90 	vmov	r2, s15
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b08c:	4b13      	ldr	r3, [pc, #76]	@ (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b08e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b090:	0e1b      	lsrs	r3, r3, #24
 800b092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b096:	ee07 3a90 	vmov	s15, r3
 800b09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b09e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0b2:	ee17 2a90 	vmov	r2, s15
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b0ba:	e008      	b.n	800b0ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	609a      	str	r2, [r3, #8]
}
 800b0ce:	bf00      	nop
 800b0d0:	3724      	adds	r7, #36	@ 0x24
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	58024400 	.word	0x58024400
 800b0e0:	03d09000 	.word	0x03d09000
 800b0e4:	46000000 	.word	0x46000000
 800b0e8:	4c742400 	.word	0x4c742400
 800b0ec:	4a742400 	.word	0x4a742400
 800b0f0:	4bbebc20 	.word	0x4bbebc20

0800b0f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b089      	sub	sp, #36	@ 0x24
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b0fc:	4ba1      	ldr	r3, [pc, #644]	@ (800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b100:	f003 0303 	and.w	r3, r3, #3
 800b104:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b106:	4b9f      	ldr	r3, [pc, #636]	@ (800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b10a:	0d1b      	lsrs	r3, r3, #20
 800b10c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b110:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b112:	4b9c      	ldr	r3, [pc, #624]	@ (800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b116:	0a1b      	lsrs	r3, r3, #8
 800b118:	f003 0301 	and.w	r3, r3, #1
 800b11c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b11e:	4b99      	ldr	r3, [pc, #612]	@ (800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b122:	08db      	lsrs	r3, r3, #3
 800b124:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b128:	693a      	ldr	r2, [r7, #16]
 800b12a:	fb02 f303 	mul.w	r3, r2, r3
 800b12e:	ee07 3a90 	vmov	s15, r3
 800b132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b136:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f000 8111 	beq.w	800b364 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	2b02      	cmp	r3, #2
 800b146:	f000 8083 	beq.w	800b250 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	f200 80a1 	bhi.w	800b294 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d003      	beq.n	800b160 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d056      	beq.n	800b20c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b15e:	e099      	b.n	800b294 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b160:	4b88      	ldr	r3, [pc, #544]	@ (800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f003 0320 	and.w	r3, r3, #32
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d02d      	beq.n	800b1c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b16c:	4b85      	ldr	r3, [pc, #532]	@ (800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	08db      	lsrs	r3, r3, #3
 800b172:	f003 0303 	and.w	r3, r3, #3
 800b176:	4a84      	ldr	r2, [pc, #528]	@ (800b388 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b178:	fa22 f303 	lsr.w	r3, r2, r3
 800b17c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	ee07 3a90 	vmov	s15, r3
 800b184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	ee07 3a90 	vmov	s15, r3
 800b18e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b196:	4b7b      	ldr	r3, [pc, #492]	@ (800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b19a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b19e:	ee07 3a90 	vmov	s15, r3
 800b1a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b38c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b1c6:	e087      	b.n	800b2d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	ee07 3a90 	vmov	s15, r3
 800b1ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b390 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b1d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1da:	4b6a      	ldr	r3, [pc, #424]	@ (800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1e2:	ee07 3a90 	vmov	s15, r3
 800b1e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b38c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b202:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b20a:	e065      	b.n	800b2d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	ee07 3a90 	vmov	s15, r3
 800b212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b216:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b394 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b21a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b21e:	4b59      	ldr	r3, [pc, #356]	@ (800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b226:	ee07 3a90 	vmov	s15, r3
 800b22a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b22e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b232:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b38c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b23a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b23e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b24a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b24e:	e043      	b.n	800b2d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	ee07 3a90 	vmov	s15, r3
 800b256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b25a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b398 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b25e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b262:	4b48      	ldr	r3, [pc, #288]	@ (800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b26a:	ee07 3a90 	vmov	s15, r3
 800b26e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b272:	ed97 6a03 	vldr	s12, [r7, #12]
 800b276:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b38c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b27a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b27e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b282:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b28a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b28e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b292:	e021      	b.n	800b2d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	ee07 3a90 	vmov	s15, r3
 800b29a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b29e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b394 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b2a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2a6:	4b37      	ldr	r3, [pc, #220]	@ (800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2ae:	ee07 3a90 	vmov	s15, r3
 800b2b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b38c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b2d8:	4b2a      	ldr	r3, [pc, #168]	@ (800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2dc:	0a5b      	lsrs	r3, r3, #9
 800b2de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2e2:	ee07 3a90 	vmov	s15, r3
 800b2e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2fe:	ee17 2a90 	vmov	r2, s15
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b306:	4b1f      	ldr	r3, [pc, #124]	@ (800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b30a:	0c1b      	lsrs	r3, r3, #16
 800b30c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b310:	ee07 3a90 	vmov	s15, r3
 800b314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b318:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b31c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b320:	edd7 6a07 	vldr	s13, [r7, #28]
 800b324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b32c:	ee17 2a90 	vmov	r2, s15
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b334:	4b13      	ldr	r3, [pc, #76]	@ (800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b338:	0e1b      	lsrs	r3, r3, #24
 800b33a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b33e:	ee07 3a90 	vmov	s15, r3
 800b342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b346:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b34a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b34e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b35a:	ee17 2a90 	vmov	r2, s15
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b362:	e008      	b.n	800b376 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	609a      	str	r2, [r3, #8]
}
 800b376:	bf00      	nop
 800b378:	3724      	adds	r7, #36	@ 0x24
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	58024400 	.word	0x58024400
 800b388:	03d09000 	.word	0x03d09000
 800b38c:	46000000 	.word	0x46000000
 800b390:	4c742400 	.word	0x4c742400
 800b394:	4a742400 	.word	0x4a742400
 800b398:	4bbebc20 	.word	0x4bbebc20

0800b39c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b089      	sub	sp, #36	@ 0x24
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b3a4:	4ba0      	ldr	r3, [pc, #640]	@ (800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3a8:	f003 0303 	and.w	r3, r3, #3
 800b3ac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b3ae:	4b9e      	ldr	r3, [pc, #632]	@ (800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3b2:	091b      	lsrs	r3, r3, #4
 800b3b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b3b8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b3ba:	4b9b      	ldr	r3, [pc, #620]	@ (800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3be:	f003 0301 	and.w	r3, r3, #1
 800b3c2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b3c4:	4b98      	ldr	r3, [pc, #608]	@ (800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3c8:	08db      	lsrs	r3, r3, #3
 800b3ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b3ce:	693a      	ldr	r2, [r7, #16]
 800b3d0:	fb02 f303 	mul.w	r3, r2, r3
 800b3d4:	ee07 3a90 	vmov	s15, r3
 800b3d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3dc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	f000 8111 	beq.w	800b60a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	2b02      	cmp	r3, #2
 800b3ec:	f000 8083 	beq.w	800b4f6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	2b02      	cmp	r3, #2
 800b3f4:	f200 80a1 	bhi.w	800b53a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d003      	beq.n	800b406 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	2b01      	cmp	r3, #1
 800b402:	d056      	beq.n	800b4b2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b404:	e099      	b.n	800b53a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b406:	4b88      	ldr	r3, [pc, #544]	@ (800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f003 0320 	and.w	r3, r3, #32
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d02d      	beq.n	800b46e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b412:	4b85      	ldr	r3, [pc, #532]	@ (800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	08db      	lsrs	r3, r3, #3
 800b418:	f003 0303 	and.w	r3, r3, #3
 800b41c:	4a83      	ldr	r2, [pc, #524]	@ (800b62c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b41e:	fa22 f303 	lsr.w	r3, r2, r3
 800b422:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	ee07 3a90 	vmov	s15, r3
 800b42a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	ee07 3a90 	vmov	s15, r3
 800b434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b43c:	4b7a      	ldr	r3, [pc, #488]	@ (800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b43e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b444:	ee07 3a90 	vmov	s15, r3
 800b448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b44c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b450:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b630 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b454:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b458:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b45c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b464:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b468:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b46c:	e087      	b.n	800b57e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	ee07 3a90 	vmov	s15, r3
 800b474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b478:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b634 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b47c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b480:	4b69      	ldr	r3, [pc, #420]	@ (800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b488:	ee07 3a90 	vmov	s15, r3
 800b48c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b490:	ed97 6a03 	vldr	s12, [r7, #12]
 800b494:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b630 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b498:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b49c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4b0:	e065      	b.n	800b57e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	ee07 3a90 	vmov	s15, r3
 800b4b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4bc:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b638 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b4c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4c4:	4b58      	ldr	r3, [pc, #352]	@ (800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4cc:	ee07 3a90 	vmov	s15, r3
 800b4d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4d8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b630 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4f4:	e043      	b.n	800b57e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	ee07 3a90 	vmov	s15, r3
 800b4fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b500:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b63c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b508:	4b47      	ldr	r3, [pc, #284]	@ (800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b50a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b50c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b510:	ee07 3a90 	vmov	s15, r3
 800b514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b518:	ed97 6a03 	vldr	s12, [r7, #12]
 800b51c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b630 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b520:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b524:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b528:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b52c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b530:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b534:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b538:	e021      	b.n	800b57e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	ee07 3a90 	vmov	s15, r3
 800b540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b544:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b634 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b548:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b54c:	4b36      	ldr	r3, [pc, #216]	@ (800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b54e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b554:	ee07 3a90 	vmov	s15, r3
 800b558:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b55c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b560:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b630 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b564:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b568:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b56c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b570:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b574:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b578:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b57c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b57e:	4b2a      	ldr	r3, [pc, #168]	@ (800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b582:	0a5b      	lsrs	r3, r3, #9
 800b584:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b588:	ee07 3a90 	vmov	s15, r3
 800b58c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b590:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b594:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b598:	edd7 6a07 	vldr	s13, [r7, #28]
 800b59c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5a4:	ee17 2a90 	vmov	r2, s15
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b5ac:	4b1e      	ldr	r3, [pc, #120]	@ (800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5b0:	0c1b      	lsrs	r3, r3, #16
 800b5b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5b6:	ee07 3a90 	vmov	s15, r3
 800b5ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b5c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5d2:	ee17 2a90 	vmov	r2, s15
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b5da:	4b13      	ldr	r3, [pc, #76]	@ (800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5de:	0e1b      	lsrs	r3, r3, #24
 800b5e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5e4:	ee07 3a90 	vmov	s15, r3
 800b5e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b5f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5f4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b600:	ee17 2a90 	vmov	r2, s15
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b608:	e008      	b.n	800b61c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	609a      	str	r2, [r3, #8]
}
 800b61c:	bf00      	nop
 800b61e:	3724      	adds	r7, #36	@ 0x24
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr
 800b628:	58024400 	.word	0x58024400
 800b62c:	03d09000 	.word	0x03d09000
 800b630:	46000000 	.word	0x46000000
 800b634:	4c742400 	.word	0x4c742400
 800b638:	4a742400 	.word	0x4a742400
 800b63c:	4bbebc20 	.word	0x4bbebc20

0800b640 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b64a:	2300      	movs	r3, #0
 800b64c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b64e:	4b53      	ldr	r3, [pc, #332]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b652:	f003 0303 	and.w	r3, r3, #3
 800b656:	2b03      	cmp	r3, #3
 800b658:	d101      	bne.n	800b65e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b65a:	2301      	movs	r3, #1
 800b65c:	e099      	b.n	800b792 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b65e:	4b4f      	ldr	r3, [pc, #316]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a4e      	ldr	r2, [pc, #312]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b664:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b66a:	f7f6 fbb5 	bl	8001dd8 <HAL_GetTick>
 800b66e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b670:	e008      	b.n	800b684 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b672:	f7f6 fbb1 	bl	8001dd8 <HAL_GetTick>
 800b676:	4602      	mov	r2, r0
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	1ad3      	subs	r3, r2, r3
 800b67c:	2b02      	cmp	r3, #2
 800b67e:	d901      	bls.n	800b684 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b680:	2303      	movs	r3, #3
 800b682:	e086      	b.n	800b792 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b684:	4b45      	ldr	r3, [pc, #276]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d1f0      	bne.n	800b672 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b690:	4b42      	ldr	r3, [pc, #264]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b694:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	031b      	lsls	r3, r3, #12
 800b69e:	493f      	ldr	r1, [pc, #252]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	628b      	str	r3, [r1, #40]	@ 0x28
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	3b01      	subs	r3, #1
 800b6aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	025b      	lsls	r3, r3, #9
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	431a      	orrs	r2, r3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	041b      	lsls	r3, r3, #16
 800b6c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b6c6:	431a      	orrs	r2, r3
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	691b      	ldr	r3, [r3, #16]
 800b6cc:	3b01      	subs	r3, #1
 800b6ce:	061b      	lsls	r3, r3, #24
 800b6d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b6d4:	4931      	ldr	r1, [pc, #196]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b6da:	4b30      	ldr	r3, [pc, #192]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b6dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	695b      	ldr	r3, [r3, #20]
 800b6e6:	492d      	ldr	r1, [pc, #180]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b6ec:	4b2b      	ldr	r3, [pc, #172]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b6ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6f0:	f023 0220 	bic.w	r2, r3, #32
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	699b      	ldr	r3, [r3, #24]
 800b6f8:	4928      	ldr	r1, [pc, #160]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b6fe:	4b27      	ldr	r3, [pc, #156]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b702:	4a26      	ldr	r2, [pc, #152]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b704:	f023 0310 	bic.w	r3, r3, #16
 800b708:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b70a:	4b24      	ldr	r3, [pc, #144]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b70c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b70e:	4b24      	ldr	r3, [pc, #144]	@ (800b7a0 <RCCEx_PLL2_Config+0x160>)
 800b710:	4013      	ands	r3, r2
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	69d2      	ldr	r2, [r2, #28]
 800b716:	00d2      	lsls	r2, r2, #3
 800b718:	4920      	ldr	r1, [pc, #128]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b71a:	4313      	orrs	r3, r2
 800b71c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b71e:	4b1f      	ldr	r3, [pc, #124]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b722:	4a1e      	ldr	r2, [pc, #120]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b724:	f043 0310 	orr.w	r3, r3, #16
 800b728:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d106      	bne.n	800b73e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b730:	4b1a      	ldr	r3, [pc, #104]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b734:	4a19      	ldr	r2, [pc, #100]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b736:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b73a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b73c:	e00f      	b.n	800b75e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	2b01      	cmp	r3, #1
 800b742:	d106      	bne.n	800b752 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b744:	4b15      	ldr	r3, [pc, #84]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b748:	4a14      	ldr	r2, [pc, #80]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b74a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b74e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b750:	e005      	b.n	800b75e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b752:	4b12      	ldr	r3, [pc, #72]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b756:	4a11      	ldr	r2, [pc, #68]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b758:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b75c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b75e:	4b0f      	ldr	r3, [pc, #60]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a0e      	ldr	r2, [pc, #56]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b764:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b76a:	f7f6 fb35 	bl	8001dd8 <HAL_GetTick>
 800b76e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b770:	e008      	b.n	800b784 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b772:	f7f6 fb31 	bl	8001dd8 <HAL_GetTick>
 800b776:	4602      	mov	r2, r0
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	d901      	bls.n	800b784 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b780:	2303      	movs	r3, #3
 800b782:	e006      	b.n	800b792 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b784:	4b05      	ldr	r3, [pc, #20]	@ (800b79c <RCCEx_PLL2_Config+0x15c>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d0f0      	beq.n	800b772 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b790:	7bfb      	ldrb	r3, [r7, #15]
}
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	58024400 	.word	0x58024400
 800b7a0:	ffff0007 	.word	0xffff0007

0800b7a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b7b2:	4b53      	ldr	r3, [pc, #332]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b7b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7b6:	f003 0303 	and.w	r3, r3, #3
 800b7ba:	2b03      	cmp	r3, #3
 800b7bc:	d101      	bne.n	800b7c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e099      	b.n	800b8f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b7c2:	4b4f      	ldr	r3, [pc, #316]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a4e      	ldr	r2, [pc, #312]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b7c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b7cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7ce:	f7f6 fb03 	bl	8001dd8 <HAL_GetTick>
 800b7d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b7d4:	e008      	b.n	800b7e8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b7d6:	f7f6 faff 	bl	8001dd8 <HAL_GetTick>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	1ad3      	subs	r3, r2, r3
 800b7e0:	2b02      	cmp	r3, #2
 800b7e2:	d901      	bls.n	800b7e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b7e4:	2303      	movs	r3, #3
 800b7e6:	e086      	b.n	800b8f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b7e8:	4b45      	ldr	r3, [pc, #276]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1f0      	bne.n	800b7d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b7f4:	4b42      	ldr	r3, [pc, #264]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b7f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7f8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	051b      	lsls	r3, r3, #20
 800b802:	493f      	ldr	r1, [pc, #252]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b804:	4313      	orrs	r3, r2
 800b806:	628b      	str	r3, [r1, #40]	@ 0x28
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	3b01      	subs	r3, #1
 800b80e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	3b01      	subs	r3, #1
 800b818:	025b      	lsls	r3, r3, #9
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	431a      	orrs	r2, r3
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	3b01      	subs	r3, #1
 800b824:	041b      	lsls	r3, r3, #16
 800b826:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b82a:	431a      	orrs	r2, r3
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	691b      	ldr	r3, [r3, #16]
 800b830:	3b01      	subs	r3, #1
 800b832:	061b      	lsls	r3, r3, #24
 800b834:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b838:	4931      	ldr	r1, [pc, #196]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b83a:	4313      	orrs	r3, r2
 800b83c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b83e:	4b30      	ldr	r3, [pc, #192]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b842:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	695b      	ldr	r3, [r3, #20]
 800b84a:	492d      	ldr	r1, [pc, #180]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b84c:	4313      	orrs	r3, r2
 800b84e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b850:	4b2b      	ldr	r3, [pc, #172]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b854:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	699b      	ldr	r3, [r3, #24]
 800b85c:	4928      	ldr	r1, [pc, #160]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b85e:	4313      	orrs	r3, r2
 800b860:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b862:	4b27      	ldr	r3, [pc, #156]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b866:	4a26      	ldr	r2, [pc, #152]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b868:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b86c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b86e:	4b24      	ldr	r3, [pc, #144]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b870:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b872:	4b24      	ldr	r3, [pc, #144]	@ (800b904 <RCCEx_PLL3_Config+0x160>)
 800b874:	4013      	ands	r3, r2
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	69d2      	ldr	r2, [r2, #28]
 800b87a:	00d2      	lsls	r2, r2, #3
 800b87c:	4920      	ldr	r1, [pc, #128]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b87e:	4313      	orrs	r3, r2
 800b880:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b882:	4b1f      	ldr	r3, [pc, #124]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b886:	4a1e      	ldr	r2, [pc, #120]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b888:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b88c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d106      	bne.n	800b8a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b894:	4b1a      	ldr	r3, [pc, #104]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b898:	4a19      	ldr	r2, [pc, #100]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b89a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b89e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b8a0:	e00f      	b.n	800b8c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d106      	bne.n	800b8b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b8a8:	4b15      	ldr	r3, [pc, #84]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b8aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ac:	4a14      	ldr	r2, [pc, #80]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b8ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b8b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b8b4:	e005      	b.n	800b8c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b8b6:	4b12      	ldr	r3, [pc, #72]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b8b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ba:	4a11      	ldr	r2, [pc, #68]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b8bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b8c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b8c2:	4b0f      	ldr	r3, [pc, #60]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a0e      	ldr	r2, [pc, #56]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b8c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b8cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8ce:	f7f6 fa83 	bl	8001dd8 <HAL_GetTick>
 800b8d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b8d4:	e008      	b.n	800b8e8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b8d6:	f7f6 fa7f 	bl	8001dd8 <HAL_GetTick>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	1ad3      	subs	r3, r2, r3
 800b8e0:	2b02      	cmp	r3, #2
 800b8e2:	d901      	bls.n	800b8e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b8e4:	2303      	movs	r3, #3
 800b8e6:	e006      	b.n	800b8f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b8e8:	4b05      	ldr	r3, [pc, #20]	@ (800b900 <RCCEx_PLL3_Config+0x15c>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d0f0      	beq.n	800b8d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	58024400 	.word	0x58024400
 800b904:	ffff0007 	.word	0xffff0007

0800b908 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d101      	bne.n	800b91a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b916:	2301      	movs	r3, #1
 800b918:	e10f      	b.n	800bb3a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a87      	ldr	r2, [pc, #540]	@ (800bb44 <HAL_SPI_Init+0x23c>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d00f      	beq.n	800b94a <HAL_SPI_Init+0x42>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a86      	ldr	r2, [pc, #536]	@ (800bb48 <HAL_SPI_Init+0x240>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d00a      	beq.n	800b94a <HAL_SPI_Init+0x42>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a84      	ldr	r2, [pc, #528]	@ (800bb4c <HAL_SPI_Init+0x244>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d005      	beq.n	800b94a <HAL_SPI_Init+0x42>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	2b0f      	cmp	r3, #15
 800b944:	d901      	bls.n	800b94a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	e0f7      	b.n	800bb3a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 fbba 	bl	800c0c4 <SPI_GetPacketSize>
 800b950:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4a7b      	ldr	r2, [pc, #492]	@ (800bb44 <HAL_SPI_Init+0x23c>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d00c      	beq.n	800b976 <HAL_SPI_Init+0x6e>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a79      	ldr	r2, [pc, #484]	@ (800bb48 <HAL_SPI_Init+0x240>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d007      	beq.n	800b976 <HAL_SPI_Init+0x6e>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4a78      	ldr	r2, [pc, #480]	@ (800bb4c <HAL_SPI_Init+0x244>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d002      	beq.n	800b976 <HAL_SPI_Init+0x6e>
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2b08      	cmp	r3, #8
 800b974:	d811      	bhi.n	800b99a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b97a:	4a72      	ldr	r2, [pc, #456]	@ (800bb44 <HAL_SPI_Init+0x23c>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d009      	beq.n	800b994 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a70      	ldr	r2, [pc, #448]	@ (800bb48 <HAL_SPI_Init+0x240>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d004      	beq.n	800b994 <HAL_SPI_Init+0x8c>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4a6f      	ldr	r2, [pc, #444]	@ (800bb4c <HAL_SPI_Init+0x244>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d104      	bne.n	800b99e <HAL_SPI_Init+0x96>
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2b10      	cmp	r3, #16
 800b998:	d901      	bls.n	800b99e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b99a:	2301      	movs	r3, #1
 800b99c:	e0cd      	b.n	800bb3a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d106      	bne.n	800b9b8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f7f5 fc0e 	bl	80011d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2202      	movs	r2, #2
 800b9bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f022 0201 	bic.w	r2, r2, #1
 800b9ce:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	689b      	ldr	r3, [r3, #8]
 800b9d6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b9da:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	699b      	ldr	r3, [r3, #24]
 800b9e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b9e4:	d119      	bne.n	800ba1a <HAL_SPI_Init+0x112>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b9ee:	d103      	bne.n	800b9f8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d008      	beq.n	800ba0a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d10c      	bne.n	800ba1a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ba04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba08:	d107      	bne.n	800ba1a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ba18:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00f      	beq.n	800ba46 <HAL_SPI_Init+0x13e>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	68db      	ldr	r3, [r3, #12]
 800ba2a:	2b06      	cmp	r3, #6
 800ba2c:	d90b      	bls.n	800ba46 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	430a      	orrs	r2, r1
 800ba42:	601a      	str	r2, [r3, #0]
 800ba44:	e007      	b.n	800ba56 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ba54:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	69da      	ldr	r2, [r3, #28]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba5e:	431a      	orrs	r2, r3
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	431a      	orrs	r2, r3
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba68:	ea42 0103 	orr.w	r1, r2, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	68da      	ldr	r2, [r3, #12]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	430a      	orrs	r2, r1
 800ba76:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba80:	431a      	orrs	r2, r3
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba86:	431a      	orrs	r2, r3
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	699b      	ldr	r3, [r3, #24]
 800ba8c:	431a      	orrs	r2, r3
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	431a      	orrs	r2, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	695b      	ldr	r3, [r3, #20]
 800ba98:	431a      	orrs	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6a1b      	ldr	r3, [r3, #32]
 800ba9e:	431a      	orrs	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	431a      	orrs	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800baaa:	431a      	orrs	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	689b      	ldr	r3, [r3, #8]
 800bab0:	431a      	orrs	r2, r3
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bab6:	ea42 0103 	orr.w	r1, r2, r3
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	430a      	orrs	r2, r1
 800bac4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d113      	bne.n	800baf6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	689b      	ldr	r3, [r3, #8]
 800bad4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bae0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800baf4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f022 0201 	bic.w	r2, r2, #1
 800bb04:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d00a      	beq.n	800bb28 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	430a      	orrs	r2, r1
 800bb26:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3710      	adds	r7, #16
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	40013000 	.word	0x40013000
 800bb48:	40003800 	.word	0x40003800
 800bb4c:	40003c00 	.word	0x40003c00

0800bb50 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b08a      	sub	sp, #40	@ 0x28
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	695b      	ldr	r3, [r3, #20]
 800bb66:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800bb68:	6a3a      	ldr	r2, [r7, #32]
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	4013      	ands	r3, r2
 800bb6e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bb82:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	3330      	adds	r3, #48	@ 0x30
 800bb8a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800bb8c:	69fb      	ldr	r3, [r7, #28]
 800bb8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d010      	beq.n	800bbb8 <HAL_SPI_IRQHandler+0x68>
 800bb96:	6a3b      	ldr	r3, [r7, #32]
 800bb98:	f003 0308 	and.w	r3, r3, #8
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d00b      	beq.n	800bbb8 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	699a      	ldr	r2, [r3, #24]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bbae:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 f9c3 	bl	800bf3c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800bbb6:	e192      	b.n	800bede <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d113      	bne.n	800bbea <HAL_SPI_IRQHandler+0x9a>
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	f003 0320 	and.w	r3, r3, #32
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d10e      	bne.n	800bbea <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800bbcc:	69bb      	ldr	r3, [r7, #24]
 800bbce:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d009      	beq.n	800bbea <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	4798      	blx	r3
    hspi->RxISR(hspi);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	4798      	blx	r3
    handled = 1UL;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d10f      	bne.n	800bc14 <HAL_SPI_IRQHandler+0xc4>
 800bbf4:	69bb      	ldr	r3, [r7, #24]
 800bbf6:	f003 0301 	and.w	r3, r3, #1
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00a      	beq.n	800bc14 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d105      	bne.n	800bc14 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	4798      	blx	r3
    handled = 1UL;
 800bc10:	2301      	movs	r3, #1
 800bc12:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	f003 0320 	and.w	r3, r3, #32
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d10f      	bne.n	800bc3e <HAL_SPI_IRQHandler+0xee>
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	f003 0302 	and.w	r3, r3, #2
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d00a      	beq.n	800bc3e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d105      	bne.n	800bc3e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	4798      	blx	r3
    handled = 1UL;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800bc3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	f040 8147 	bne.w	800bed4 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	f003 0308 	and.w	r3, r3, #8
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f000 808b 	beq.w	800bd68 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	699a      	ldr	r2, [r3, #24]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f042 0208 	orr.w	r2, r2, #8
 800bc60:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	699a      	ldr	r2, [r3, #24]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f042 0210 	orr.w	r2, r2, #16
 800bc70:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	699a      	ldr	r2, [r3, #24]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc80:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	691a      	ldr	r2, [r3, #16]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f022 0208 	bic.w	r2, r2, #8
 800bc90:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	689b      	ldr	r3, [r3, #8]
 800bc98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d13d      	bne.n	800bd1c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800bca0:	e036      	b.n	800bd10 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	68db      	ldr	r3, [r3, #12]
 800bca6:	2b0f      	cmp	r3, #15
 800bca8:	d90b      	bls.n	800bcc2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcb2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bcb4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcba:	1d1a      	adds	r2, r3, #4
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	665a      	str	r2, [r3, #100]	@ 0x64
 800bcc0:	e01d      	b.n	800bcfe <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	2b07      	cmp	r3, #7
 800bcc8:	d90b      	bls.n	800bce2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcce:	68fa      	ldr	r2, [r7, #12]
 800bcd0:	8812      	ldrh	r2, [r2, #0]
 800bcd2:	b292      	uxth	r2, r2
 800bcd4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcda:	1c9a      	adds	r2, r3, #2
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	665a      	str	r2, [r3, #100]	@ 0x64
 800bce0:	e00d      	b.n	800bcfe <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcee:	7812      	ldrb	r2, [r2, #0]
 800bcf0:	b2d2      	uxtb	r2, r2
 800bcf2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcf8:	1c5a      	adds	r2, r3, #1
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	3b01      	subs	r3, #1
 800bd08:	b29a      	uxth	r2, r3
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d1c2      	bne.n	800bca2 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 f931 	bl	800bf84 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2201      	movs	r2, #1
 800bd26:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d003      	beq.n	800bd3c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 f8f7 	bl	800bf28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800bd3a:	e0d0      	b.n	800bede <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800bd3c:	7cfb      	ldrb	r3, [r7, #19]
 800bd3e:	2b05      	cmp	r3, #5
 800bd40:	d103      	bne.n	800bd4a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 f8e6 	bl	800bf14 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800bd48:	e0c6      	b.n	800bed8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800bd4a:	7cfb      	ldrb	r3, [r7, #19]
 800bd4c:	2b04      	cmp	r3, #4
 800bd4e:	d103      	bne.n	800bd58 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 f8d5 	bl	800bf00 <HAL_SPI_RxCpltCallback>
    return;
 800bd56:	e0bf      	b.n	800bed8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800bd58:	7cfb      	ldrb	r3, [r7, #19]
 800bd5a:	2b03      	cmp	r3, #3
 800bd5c:	f040 80bc 	bne.w	800bed8 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 f8c3 	bl	800beec <HAL_SPI_TxCpltCallback>
    return;
 800bd66:	e0b7      	b.n	800bed8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	f000 80b5 	beq.w	800bede <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800bd74:	69bb      	ldr	r3, [r7, #24]
 800bd76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00f      	beq.n	800bd9e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd84:	f043 0204 	orr.w	r2, r3, #4
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	699a      	ldr	r2, [r3, #24]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bd9c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800bd9e:	69bb      	ldr	r3, [r7, #24]
 800bda0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d00f      	beq.n	800bdc8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bdae:	f043 0201 	orr.w	r2, r3, #1
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	699a      	ldr	r2, [r3, #24]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bdc6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00f      	beq.n	800bdf2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bdd8:	f043 0208 	orr.w	r2, r3, #8
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	699a      	ldr	r2, [r3, #24]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bdf0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	f003 0320 	and.w	r3, r3, #32
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d00f      	beq.n	800be1c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be02:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	699a      	ldr	r2, [r3, #24]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f042 0220 	orr.w	r2, r2, #32
 800be1a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be22:	2b00      	cmp	r3, #0
 800be24:	d05a      	beq.n	800bedc <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f022 0201 	bic.w	r2, r2, #1
 800be34:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	6919      	ldr	r1, [r3, #16]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	4b28      	ldr	r3, [pc, #160]	@ (800bee4 <HAL_SPI_IRQHandler+0x394>)
 800be42:	400b      	ands	r3, r1
 800be44:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800be4c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800be50:	d138      	bne.n	800bec4 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	689a      	ldr	r2, [r3, #8]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800be60:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be66:	2b00      	cmp	r3, #0
 800be68:	d013      	beq.n	800be92 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be6e:	4a1e      	ldr	r2, [pc, #120]	@ (800bee8 <HAL_SPI_IRQHandler+0x398>)
 800be70:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be76:	4618      	mov	r0, r3
 800be78:	f7f9 f838 	bl	8004eec <HAL_DMA_Abort_IT>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d007      	beq.n	800be92 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be88:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be96:	2b00      	cmp	r3, #0
 800be98:	d020      	beq.n	800bedc <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be9e:	4a12      	ldr	r2, [pc, #72]	@ (800bee8 <HAL_SPI_IRQHandler+0x398>)
 800bea0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7f9 f820 	bl	8004eec <HAL_DMA_Abort_IT>
 800beac:	4603      	mov	r3, r0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d014      	beq.n	800bedc <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800beb8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bec2:	e00b      	b.n	800bedc <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2201      	movs	r2, #1
 800bec8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 f82b 	bl	800bf28 <HAL_SPI_ErrorCallback>
    return;
 800bed2:	e003      	b.n	800bedc <HAL_SPI_IRQHandler+0x38c>
    return;
 800bed4:	bf00      	nop
 800bed6:	e002      	b.n	800bede <HAL_SPI_IRQHandler+0x38e>
    return;
 800bed8:	bf00      	nop
 800beda:	e000      	b.n	800bede <HAL_SPI_IRQHandler+0x38e>
    return;
 800bedc:	bf00      	nop
  }
}
 800bede:	3728      	adds	r7, #40	@ 0x28
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	fffffc94 	.word	0xfffffc94
 800bee8:	0800bf51 	.word	0x0800bf51

0800beec <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800bef4:	bf00      	nop
 800bef6:	370c      	adds	r7, #12
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bf00:	b480      	push	{r7}
 800bf02:	b083      	sub	sp, #12
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800bf08:	bf00      	nop
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800bf1c:	bf00      	nop
 800bf1e:	370c      	adds	r7, #12
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr

0800bf28 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b083      	sub	sp, #12
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bf30:	bf00      	nop
 800bf32:	370c      	adds	r7, #12
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800bf44:	bf00      	nop
 800bf46:	370c      	adds	r7, #12
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr

0800bf50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf5c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2200      	movs	r2, #0
 800bf62:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2201      	movs	r2, #1
 800bf72:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	f7ff ffd6 	bl	800bf28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bf7c:	bf00      	nop
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b085      	sub	sp, #20
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	695b      	ldr	r3, [r3, #20]
 800bf92:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	699a      	ldr	r2, [r3, #24]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f042 0208 	orr.w	r2, r2, #8
 800bfa2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	699a      	ldr	r2, [r3, #24]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f042 0210 	orr.w	r2, r2, #16
 800bfb2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f022 0201 	bic.w	r2, r2, #1
 800bfc2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	6919      	ldr	r1, [r3, #16]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	4b3c      	ldr	r3, [pc, #240]	@ (800c0c0 <SPI_CloseTransfer+0x13c>)
 800bfd0:	400b      	ands	r3, r1
 800bfd2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	689a      	ldr	r2, [r3, #8]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bfe2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bfea:	b2db      	uxtb	r3, r3
 800bfec:	2b04      	cmp	r3, #4
 800bfee:	d014      	beq.n	800c01a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f003 0320 	and.w	r3, r3, #32
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d00f      	beq.n	800c01a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c000:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	699a      	ldr	r2, [r3, #24]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f042 0220 	orr.w	r2, r2, #32
 800c018:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c020:	b2db      	uxtb	r3, r3
 800c022:	2b03      	cmp	r3, #3
 800c024:	d014      	beq.n	800c050 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d00f      	beq.n	800c050 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c036:	f043 0204 	orr.w	r2, r3, #4
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	699a      	ldr	r2, [r3, #24]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c04e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c056:	2b00      	cmp	r3, #0
 800c058:	d00f      	beq.n	800c07a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c060:	f043 0201 	orr.w	r2, r3, #1
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	699a      	ldr	r2, [r3, #24]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c078:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c080:	2b00      	cmp	r3, #0
 800c082:	d00f      	beq.n	800c0a4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c08a:	f043 0208 	orr.w	r2, r3, #8
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	699a      	ldr	r2, [r3, #24]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c0a2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c0b4:	bf00      	nop
 800c0b6:	3714      	adds	r7, #20
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr
 800c0c0:	fffffc90 	.word	0xfffffc90

0800c0c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0d0:	095b      	lsrs	r3, r3, #5
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	3307      	adds	r3, #7
 800c0e2:	08db      	lsrs	r3, r3, #3
 800c0e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	68fa      	ldr	r2, [r7, #12]
 800c0ea:	fb02 f303 	mul.w	r3, r2, r3
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3714      	adds	r7, #20
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr

0800c0fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b082      	sub	sp, #8
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d101      	bne.n	800c10c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c108:	2301      	movs	r3, #1
 800c10a:	e049      	b.n	800c1a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c112:	b2db      	uxtb	r3, r3
 800c114:	2b00      	cmp	r3, #0
 800c116:	d106      	bne.n	800c126 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f7f5 fbd5 	bl	80018d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2202      	movs	r2, #2
 800c12a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	3304      	adds	r3, #4
 800c136:	4619      	mov	r1, r3
 800c138:	4610      	mov	r0, r2
 800c13a:	f000 fbdb 	bl	800c8f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2201      	movs	r2, #1
 800c142:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2201      	movs	r2, #1
 800c14a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2201      	movs	r2, #1
 800c152:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2201      	movs	r2, #1
 800c15a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2201      	movs	r2, #1
 800c162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2201      	movs	r2, #1
 800c16a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2201      	movs	r2, #1
 800c172:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2201      	movs	r2, #1
 800c17a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2201      	movs	r2, #1
 800c182:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2201      	movs	r2, #1
 800c18a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2201      	movs	r2, #1
 800c192:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2201      	movs	r2, #1
 800c19a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c19e:	2300      	movs	r3, #0
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3708      	adds	r7, #8
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d101      	bne.n	800c1ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	e049      	b.n	800c24e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d106      	bne.n	800c1d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f000 f841 	bl	800c256 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2202      	movs	r2, #2
 800c1d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	3304      	adds	r3, #4
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	4610      	mov	r0, r2
 800c1e8:	f000 fb84 	bl	800c8f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2201      	movs	r2, #1
 800c200:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2201      	movs	r2, #1
 800c208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2201      	movs	r2, #1
 800c210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2201      	movs	r2, #1
 800c218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2201      	movs	r2, #1
 800c220:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2201      	movs	r2, #1
 800c228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2201      	movs	r2, #1
 800c230:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2201      	movs	r2, #1
 800c238:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2201      	movs	r2, #1
 800c240:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2201      	movs	r2, #1
 800c248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3708      	adds	r7, #8
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}

0800c256 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c256:	b480      	push	{r7}
 800c258:	b083      	sub	sp, #12
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c25e:	bf00      	nop
 800c260:	370c      	adds	r7, #12
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr

0800c26a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b084      	sub	sp, #16
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	68db      	ldr	r3, [r3, #12]
 800c278:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	691b      	ldr	r3, [r3, #16]
 800c280:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	f003 0302 	and.w	r3, r3, #2
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d020      	beq.n	800c2ce <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f003 0302 	and.w	r3, r3, #2
 800c292:	2b00      	cmp	r3, #0
 800c294:	d01b      	beq.n	800c2ce <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f06f 0202 	mvn.w	r2, #2
 800c29e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	699b      	ldr	r3, [r3, #24]
 800c2ac:	f003 0303 	and.w	r3, r3, #3
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d003      	beq.n	800c2bc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 faff 	bl	800c8b8 <HAL_TIM_IC_CaptureCallback>
 800c2ba:	e005      	b.n	800c2c8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 faf1 	bl	800c8a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fb02 	bl	800c8cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	f003 0304 	and.w	r3, r3, #4
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d020      	beq.n	800c31a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f003 0304 	and.w	r3, r3, #4
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d01b      	beq.n	800c31a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f06f 0204 	mvn.w	r2, #4
 800c2ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2202      	movs	r2, #2
 800c2f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	699b      	ldr	r3, [r3, #24]
 800c2f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d003      	beq.n	800c308 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 fad9 	bl	800c8b8 <HAL_TIM_IC_CaptureCallback>
 800c306:	e005      	b.n	800c314 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 facb 	bl	800c8a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 fadc 	bl	800c8cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2200      	movs	r2, #0
 800c318:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	f003 0308 	and.w	r3, r3, #8
 800c320:	2b00      	cmp	r3, #0
 800c322:	d020      	beq.n	800c366 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f003 0308 	and.w	r3, r3, #8
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d01b      	beq.n	800c366 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f06f 0208 	mvn.w	r2, #8
 800c336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2204      	movs	r2, #4
 800c33c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	69db      	ldr	r3, [r3, #28]
 800c344:	f003 0303 	and.w	r3, r3, #3
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d003      	beq.n	800c354 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 fab3 	bl	800c8b8 <HAL_TIM_IC_CaptureCallback>
 800c352:	e005      	b.n	800c360 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 faa5 	bl	800c8a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f000 fab6 	bl	800c8cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	f003 0310 	and.w	r3, r3, #16
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d020      	beq.n	800c3b2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f003 0310 	and.w	r3, r3, #16
 800c376:	2b00      	cmp	r3, #0
 800c378:	d01b      	beq.n	800c3b2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f06f 0210 	mvn.w	r2, #16
 800c382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2208      	movs	r2, #8
 800c388:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	69db      	ldr	r3, [r3, #28]
 800c390:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c394:	2b00      	cmp	r3, #0
 800c396:	d003      	beq.n	800c3a0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 fa8d 	bl	800c8b8 <HAL_TIM_IC_CaptureCallback>
 800c39e:	e005      	b.n	800c3ac <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 fa7f 	bl	800c8a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 fa90 	bl	800c8cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	f003 0301 	and.w	r3, r3, #1
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d00c      	beq.n	800c3d6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f003 0301 	and.w	r3, r3, #1
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d007      	beq.n	800c3d6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f06f 0201 	mvn.w	r2, #1
 800c3ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 fa5d 	bl	800c890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d104      	bne.n	800c3ea <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d00c      	beq.n	800c404 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d007      	beq.n	800c404 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c3fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 ffca 	bl	800d398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d00c      	beq.n	800c428 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c414:	2b00      	cmp	r3, #0
 800c416:	d007      	beq.n	800c428 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 ffc2 	bl	800d3ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d00c      	beq.n	800c44c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d007      	beq.n	800c44c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 fa4a 	bl	800c8e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	f003 0320 	and.w	r3, r3, #32
 800c452:	2b00      	cmp	r3, #0
 800c454:	d00c      	beq.n	800c470 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f003 0320 	and.w	r3, r3, #32
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d007      	beq.n	800c470 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f06f 0220 	mvn.w	r2, #32
 800c468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 ff8a 	bl	800d384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c470:	bf00      	nop
 800c472:	3710      	adds	r7, #16
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c484:	2300      	movs	r3, #0
 800c486:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d101      	bne.n	800c496 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c492:	2302      	movs	r3, #2
 800c494:	e0ff      	b.n	800c696 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2201      	movs	r2, #1
 800c49a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2b14      	cmp	r3, #20
 800c4a2:	f200 80f0 	bhi.w	800c686 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c4a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c4ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ac:	0800c501 	.word	0x0800c501
 800c4b0:	0800c687 	.word	0x0800c687
 800c4b4:	0800c687 	.word	0x0800c687
 800c4b8:	0800c687 	.word	0x0800c687
 800c4bc:	0800c541 	.word	0x0800c541
 800c4c0:	0800c687 	.word	0x0800c687
 800c4c4:	0800c687 	.word	0x0800c687
 800c4c8:	0800c687 	.word	0x0800c687
 800c4cc:	0800c583 	.word	0x0800c583
 800c4d0:	0800c687 	.word	0x0800c687
 800c4d4:	0800c687 	.word	0x0800c687
 800c4d8:	0800c687 	.word	0x0800c687
 800c4dc:	0800c5c3 	.word	0x0800c5c3
 800c4e0:	0800c687 	.word	0x0800c687
 800c4e4:	0800c687 	.word	0x0800c687
 800c4e8:	0800c687 	.word	0x0800c687
 800c4ec:	0800c605 	.word	0x0800c605
 800c4f0:	0800c687 	.word	0x0800c687
 800c4f4:	0800c687 	.word	0x0800c687
 800c4f8:	0800c687 	.word	0x0800c687
 800c4fc:	0800c645 	.word	0x0800c645
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	68b9      	ldr	r1, [r7, #8]
 800c506:	4618      	mov	r0, r3
 800c508:	f000 faa0 	bl	800ca4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	699a      	ldr	r2, [r3, #24]
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f042 0208 	orr.w	r2, r2, #8
 800c51a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	699a      	ldr	r2, [r3, #24]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f022 0204 	bic.w	r2, r2, #4
 800c52a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	6999      	ldr	r1, [r3, #24]
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	691a      	ldr	r2, [r3, #16]
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	430a      	orrs	r2, r1
 800c53c:	619a      	str	r2, [r3, #24]
      break;
 800c53e:	e0a5      	b.n	800c68c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	68b9      	ldr	r1, [r7, #8]
 800c546:	4618      	mov	r0, r3
 800c548:	f000 fb10 	bl	800cb6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	699a      	ldr	r2, [r3, #24]
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c55a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	699a      	ldr	r2, [r3, #24]
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c56a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	6999      	ldr	r1, [r3, #24]
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	691b      	ldr	r3, [r3, #16]
 800c576:	021a      	lsls	r2, r3, #8
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	430a      	orrs	r2, r1
 800c57e:	619a      	str	r2, [r3, #24]
      break;
 800c580:	e084      	b.n	800c68c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	68b9      	ldr	r1, [r7, #8]
 800c588:	4618      	mov	r0, r3
 800c58a:	f000 fb79 	bl	800cc80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	69da      	ldr	r2, [r3, #28]
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f042 0208 	orr.w	r2, r2, #8
 800c59c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	69da      	ldr	r2, [r3, #28]
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f022 0204 	bic.w	r2, r2, #4
 800c5ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	69d9      	ldr	r1, [r3, #28]
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	691a      	ldr	r2, [r3, #16]
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	430a      	orrs	r2, r1
 800c5be:	61da      	str	r2, [r3, #28]
      break;
 800c5c0:	e064      	b.n	800c68c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	68b9      	ldr	r1, [r7, #8]
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f000 fbe1 	bl	800cd90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	69da      	ldr	r2, [r3, #28]
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c5dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	69da      	ldr	r2, [r3, #28]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c5ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	69d9      	ldr	r1, [r3, #28]
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	691b      	ldr	r3, [r3, #16]
 800c5f8:	021a      	lsls	r2, r3, #8
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	430a      	orrs	r2, r1
 800c600:	61da      	str	r2, [r3, #28]
      break;
 800c602:	e043      	b.n	800c68c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	68b9      	ldr	r1, [r7, #8]
 800c60a:	4618      	mov	r0, r3
 800c60c:	f000 fc2a 	bl	800ce64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f042 0208 	orr.w	r2, r2, #8
 800c61e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f022 0204 	bic.w	r2, r2, #4
 800c62e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	691a      	ldr	r2, [r3, #16]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	430a      	orrs	r2, r1
 800c640:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c642:	e023      	b.n	800c68c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	68b9      	ldr	r1, [r7, #8]
 800c64a:	4618      	mov	r0, r3
 800c64c:	f000 fc6e 	bl	800cf2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c65e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c66e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	691b      	ldr	r3, [r3, #16]
 800c67a:	021a      	lsls	r2, r3, #8
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	430a      	orrs	r2, r1
 800c682:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c684:	e002      	b.n	800c68c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c686:	2301      	movs	r3, #1
 800c688:	75fb      	strb	r3, [r7, #23]
      break;
 800c68a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2200      	movs	r2, #0
 800c690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c694:	7dfb      	ldrb	r3, [r7, #23]
}
 800c696:	4618      	mov	r0, r3
 800c698:	3718      	adds	r7, #24
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop

0800c6a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b084      	sub	sp, #16
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d101      	bne.n	800c6bc <HAL_TIM_ConfigClockSource+0x1c>
 800c6b8:	2302      	movs	r3, #2
 800c6ba:	e0dc      	b.n	800c876 <HAL_TIM_ConfigClockSource+0x1d6>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2201      	movs	r2, #1
 800c6c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2202      	movs	r2, #2
 800c6c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c6d4:	68ba      	ldr	r2, [r7, #8]
 800c6d6:	4b6a      	ldr	r3, [pc, #424]	@ (800c880 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c6d8:	4013      	ands	r3, r2
 800c6da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c6e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	68ba      	ldr	r2, [r7, #8]
 800c6ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a64      	ldr	r2, [pc, #400]	@ (800c884 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	f000 80a9 	beq.w	800c84a <HAL_TIM_ConfigClockSource+0x1aa>
 800c6f8:	4a62      	ldr	r2, [pc, #392]	@ (800c884 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	f200 80ae 	bhi.w	800c85c <HAL_TIM_ConfigClockSource+0x1bc>
 800c700:	4a61      	ldr	r2, [pc, #388]	@ (800c888 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c702:	4293      	cmp	r3, r2
 800c704:	f000 80a1 	beq.w	800c84a <HAL_TIM_ConfigClockSource+0x1aa>
 800c708:	4a5f      	ldr	r2, [pc, #380]	@ (800c888 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	f200 80a6 	bhi.w	800c85c <HAL_TIM_ConfigClockSource+0x1bc>
 800c710:	4a5e      	ldr	r2, [pc, #376]	@ (800c88c <HAL_TIM_ConfigClockSource+0x1ec>)
 800c712:	4293      	cmp	r3, r2
 800c714:	f000 8099 	beq.w	800c84a <HAL_TIM_ConfigClockSource+0x1aa>
 800c718:	4a5c      	ldr	r2, [pc, #368]	@ (800c88c <HAL_TIM_ConfigClockSource+0x1ec>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	f200 809e 	bhi.w	800c85c <HAL_TIM_ConfigClockSource+0x1bc>
 800c720:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c724:	f000 8091 	beq.w	800c84a <HAL_TIM_ConfigClockSource+0x1aa>
 800c728:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c72c:	f200 8096 	bhi.w	800c85c <HAL_TIM_ConfigClockSource+0x1bc>
 800c730:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c734:	f000 8089 	beq.w	800c84a <HAL_TIM_ConfigClockSource+0x1aa>
 800c738:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c73c:	f200 808e 	bhi.w	800c85c <HAL_TIM_ConfigClockSource+0x1bc>
 800c740:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c744:	d03e      	beq.n	800c7c4 <HAL_TIM_ConfigClockSource+0x124>
 800c746:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c74a:	f200 8087 	bhi.w	800c85c <HAL_TIM_ConfigClockSource+0x1bc>
 800c74e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c752:	f000 8086 	beq.w	800c862 <HAL_TIM_ConfigClockSource+0x1c2>
 800c756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c75a:	d87f      	bhi.n	800c85c <HAL_TIM_ConfigClockSource+0x1bc>
 800c75c:	2b70      	cmp	r3, #112	@ 0x70
 800c75e:	d01a      	beq.n	800c796 <HAL_TIM_ConfigClockSource+0xf6>
 800c760:	2b70      	cmp	r3, #112	@ 0x70
 800c762:	d87b      	bhi.n	800c85c <HAL_TIM_ConfigClockSource+0x1bc>
 800c764:	2b60      	cmp	r3, #96	@ 0x60
 800c766:	d050      	beq.n	800c80a <HAL_TIM_ConfigClockSource+0x16a>
 800c768:	2b60      	cmp	r3, #96	@ 0x60
 800c76a:	d877      	bhi.n	800c85c <HAL_TIM_ConfigClockSource+0x1bc>
 800c76c:	2b50      	cmp	r3, #80	@ 0x50
 800c76e:	d03c      	beq.n	800c7ea <HAL_TIM_ConfigClockSource+0x14a>
 800c770:	2b50      	cmp	r3, #80	@ 0x50
 800c772:	d873      	bhi.n	800c85c <HAL_TIM_ConfigClockSource+0x1bc>
 800c774:	2b40      	cmp	r3, #64	@ 0x40
 800c776:	d058      	beq.n	800c82a <HAL_TIM_ConfigClockSource+0x18a>
 800c778:	2b40      	cmp	r3, #64	@ 0x40
 800c77a:	d86f      	bhi.n	800c85c <HAL_TIM_ConfigClockSource+0x1bc>
 800c77c:	2b30      	cmp	r3, #48	@ 0x30
 800c77e:	d064      	beq.n	800c84a <HAL_TIM_ConfigClockSource+0x1aa>
 800c780:	2b30      	cmp	r3, #48	@ 0x30
 800c782:	d86b      	bhi.n	800c85c <HAL_TIM_ConfigClockSource+0x1bc>
 800c784:	2b20      	cmp	r3, #32
 800c786:	d060      	beq.n	800c84a <HAL_TIM_ConfigClockSource+0x1aa>
 800c788:	2b20      	cmp	r3, #32
 800c78a:	d867      	bhi.n	800c85c <HAL_TIM_ConfigClockSource+0x1bc>
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d05c      	beq.n	800c84a <HAL_TIM_ConfigClockSource+0x1aa>
 800c790:	2b10      	cmp	r3, #16
 800c792:	d05a      	beq.n	800c84a <HAL_TIM_ConfigClockSource+0x1aa>
 800c794:	e062      	b.n	800c85c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c7a6:	f000 fca5 	bl	800d0f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	689b      	ldr	r3, [r3, #8]
 800c7b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c7b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	68ba      	ldr	r2, [r7, #8]
 800c7c0:	609a      	str	r2, [r3, #8]
      break;
 800c7c2:	e04f      	b.n	800c864 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c7d4:	f000 fc8e 	bl	800d0f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	689a      	ldr	r2, [r3, #8]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c7e6:	609a      	str	r2, [r3, #8]
      break;
 800c7e8:	e03c      	b.n	800c864 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	f000 fbfe 	bl	800cff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	2150      	movs	r1, #80	@ 0x50
 800c802:	4618      	mov	r0, r3
 800c804:	f000 fc58 	bl	800d0b8 <TIM_ITRx_SetConfig>
      break;
 800c808:	e02c      	b.n	800c864 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c816:	461a      	mov	r2, r3
 800c818:	f000 fc1d 	bl	800d056 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2160      	movs	r1, #96	@ 0x60
 800c822:	4618      	mov	r0, r3
 800c824:	f000 fc48 	bl	800d0b8 <TIM_ITRx_SetConfig>
      break;
 800c828:	e01c      	b.n	800c864 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c836:	461a      	mov	r2, r3
 800c838:	f000 fbde 	bl	800cff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	2140      	movs	r1, #64	@ 0x40
 800c842:	4618      	mov	r0, r3
 800c844:	f000 fc38 	bl	800d0b8 <TIM_ITRx_SetConfig>
      break;
 800c848:	e00c      	b.n	800c864 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681a      	ldr	r2, [r3, #0]
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4619      	mov	r1, r3
 800c854:	4610      	mov	r0, r2
 800c856:	f000 fc2f 	bl	800d0b8 <TIM_ITRx_SetConfig>
      break;
 800c85a:	e003      	b.n	800c864 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c85c:	2301      	movs	r3, #1
 800c85e:	73fb      	strb	r3, [r7, #15]
      break;
 800c860:	e000      	b.n	800c864 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c862:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2201      	movs	r2, #1
 800c868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2200      	movs	r2, #0
 800c870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c874:	7bfb      	ldrb	r3, [r7, #15]
}
 800c876:	4618      	mov	r0, r3
 800c878:	3710      	adds	r7, #16
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	ffceff88 	.word	0xffceff88
 800c884:	00100040 	.word	0x00100040
 800c888:	00100030 	.word	0x00100030
 800c88c:	00100020 	.word	0x00100020

0800c890 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c898:	bf00      	nop
 800c89a:	370c      	adds	r7, #12
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr

0800c8a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b083      	sub	sp, #12
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c8ac:	bf00      	nop
 800c8ae:	370c      	adds	r7, #12
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr

0800c8b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c8c0:	bf00      	nop
 800c8c2:	370c      	adds	r7, #12
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c8d4:	bf00      	nop
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c8e8:	bf00      	nop
 800c8ea:	370c      	adds	r7, #12
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b085      	sub	sp, #20
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	4a47      	ldr	r2, [pc, #284]	@ (800ca24 <TIM_Base_SetConfig+0x130>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d013      	beq.n	800c934 <TIM_Base_SetConfig+0x40>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c912:	d00f      	beq.n	800c934 <TIM_Base_SetConfig+0x40>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	4a44      	ldr	r2, [pc, #272]	@ (800ca28 <TIM_Base_SetConfig+0x134>)
 800c918:	4293      	cmp	r3, r2
 800c91a:	d00b      	beq.n	800c934 <TIM_Base_SetConfig+0x40>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	4a43      	ldr	r2, [pc, #268]	@ (800ca2c <TIM_Base_SetConfig+0x138>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d007      	beq.n	800c934 <TIM_Base_SetConfig+0x40>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	4a42      	ldr	r2, [pc, #264]	@ (800ca30 <TIM_Base_SetConfig+0x13c>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d003      	beq.n	800c934 <TIM_Base_SetConfig+0x40>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	4a41      	ldr	r2, [pc, #260]	@ (800ca34 <TIM_Base_SetConfig+0x140>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d108      	bne.n	800c946 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c93a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	68fa      	ldr	r2, [r7, #12]
 800c942:	4313      	orrs	r3, r2
 800c944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	4a36      	ldr	r2, [pc, #216]	@ (800ca24 <TIM_Base_SetConfig+0x130>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d027      	beq.n	800c99e <TIM_Base_SetConfig+0xaa>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c954:	d023      	beq.n	800c99e <TIM_Base_SetConfig+0xaa>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	4a33      	ldr	r2, [pc, #204]	@ (800ca28 <TIM_Base_SetConfig+0x134>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d01f      	beq.n	800c99e <TIM_Base_SetConfig+0xaa>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	4a32      	ldr	r2, [pc, #200]	@ (800ca2c <TIM_Base_SetConfig+0x138>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d01b      	beq.n	800c99e <TIM_Base_SetConfig+0xaa>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	4a31      	ldr	r2, [pc, #196]	@ (800ca30 <TIM_Base_SetConfig+0x13c>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d017      	beq.n	800c99e <TIM_Base_SetConfig+0xaa>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	4a30      	ldr	r2, [pc, #192]	@ (800ca34 <TIM_Base_SetConfig+0x140>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d013      	beq.n	800c99e <TIM_Base_SetConfig+0xaa>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	4a2f      	ldr	r2, [pc, #188]	@ (800ca38 <TIM_Base_SetConfig+0x144>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d00f      	beq.n	800c99e <TIM_Base_SetConfig+0xaa>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	4a2e      	ldr	r2, [pc, #184]	@ (800ca3c <TIM_Base_SetConfig+0x148>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d00b      	beq.n	800c99e <TIM_Base_SetConfig+0xaa>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	4a2d      	ldr	r2, [pc, #180]	@ (800ca40 <TIM_Base_SetConfig+0x14c>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d007      	beq.n	800c99e <TIM_Base_SetConfig+0xaa>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	4a2c      	ldr	r2, [pc, #176]	@ (800ca44 <TIM_Base_SetConfig+0x150>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d003      	beq.n	800c99e <TIM_Base_SetConfig+0xaa>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	4a2b      	ldr	r2, [pc, #172]	@ (800ca48 <TIM_Base_SetConfig+0x154>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d108      	bne.n	800c9b0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c9a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	68fa      	ldr	r2, [r7, #12]
 800c9ac:	4313      	orrs	r3, r2
 800c9ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	695b      	ldr	r3, [r3, #20]
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	689a      	ldr	r2, [r3, #8]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	4a14      	ldr	r2, [pc, #80]	@ (800ca24 <TIM_Base_SetConfig+0x130>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d00f      	beq.n	800c9f6 <TIM_Base_SetConfig+0x102>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	4a16      	ldr	r2, [pc, #88]	@ (800ca34 <TIM_Base_SetConfig+0x140>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d00b      	beq.n	800c9f6 <TIM_Base_SetConfig+0x102>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	4a15      	ldr	r2, [pc, #84]	@ (800ca38 <TIM_Base_SetConfig+0x144>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d007      	beq.n	800c9f6 <TIM_Base_SetConfig+0x102>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	4a14      	ldr	r2, [pc, #80]	@ (800ca3c <TIM_Base_SetConfig+0x148>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d003      	beq.n	800c9f6 <TIM_Base_SetConfig+0x102>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	4a13      	ldr	r2, [pc, #76]	@ (800ca40 <TIM_Base_SetConfig+0x14c>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d103      	bne.n	800c9fe <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	691a      	ldr	r2, [r3, #16]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f043 0204 	orr.w	r2, r3, #4
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	68fa      	ldr	r2, [r7, #12]
 800ca14:	601a      	str	r2, [r3, #0]
}
 800ca16:	bf00      	nop
 800ca18:	3714      	adds	r7, #20
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr
 800ca22:	bf00      	nop
 800ca24:	40010000 	.word	0x40010000
 800ca28:	40000400 	.word	0x40000400
 800ca2c:	40000800 	.word	0x40000800
 800ca30:	40000c00 	.word	0x40000c00
 800ca34:	40010400 	.word	0x40010400
 800ca38:	40014000 	.word	0x40014000
 800ca3c:	40014400 	.word	0x40014400
 800ca40:	40014800 	.word	0x40014800
 800ca44:	4000e000 	.word	0x4000e000
 800ca48:	4000e400 	.word	0x4000e400

0800ca4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b087      	sub	sp, #28
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6a1b      	ldr	r3, [r3, #32]
 800ca5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6a1b      	ldr	r3, [r3, #32]
 800ca60:	f023 0201 	bic.w	r2, r3, #1
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	699b      	ldr	r3, [r3, #24]
 800ca72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ca74:	68fa      	ldr	r2, [r7, #12]
 800ca76:	4b37      	ldr	r3, [pc, #220]	@ (800cb54 <TIM_OC1_SetConfig+0x108>)
 800ca78:	4013      	ands	r3, r2
 800ca7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	f023 0303 	bic.w	r3, r3, #3
 800ca82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	f023 0302 	bic.w	r3, r3, #2
 800ca94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	689b      	ldr	r3, [r3, #8]
 800ca9a:	697a      	ldr	r2, [r7, #20]
 800ca9c:	4313      	orrs	r3, r2
 800ca9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	4a2d      	ldr	r2, [pc, #180]	@ (800cb58 <TIM_OC1_SetConfig+0x10c>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d00f      	beq.n	800cac8 <TIM_OC1_SetConfig+0x7c>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	4a2c      	ldr	r2, [pc, #176]	@ (800cb5c <TIM_OC1_SetConfig+0x110>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d00b      	beq.n	800cac8 <TIM_OC1_SetConfig+0x7c>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	4a2b      	ldr	r2, [pc, #172]	@ (800cb60 <TIM_OC1_SetConfig+0x114>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d007      	beq.n	800cac8 <TIM_OC1_SetConfig+0x7c>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	4a2a      	ldr	r2, [pc, #168]	@ (800cb64 <TIM_OC1_SetConfig+0x118>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d003      	beq.n	800cac8 <TIM_OC1_SetConfig+0x7c>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	4a29      	ldr	r2, [pc, #164]	@ (800cb68 <TIM_OC1_SetConfig+0x11c>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d10c      	bne.n	800cae2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	f023 0308 	bic.w	r3, r3, #8
 800cace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	68db      	ldr	r3, [r3, #12]
 800cad4:	697a      	ldr	r2, [r7, #20]
 800cad6:	4313      	orrs	r3, r2
 800cad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	f023 0304 	bic.w	r3, r3, #4
 800cae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	4a1c      	ldr	r2, [pc, #112]	@ (800cb58 <TIM_OC1_SetConfig+0x10c>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d00f      	beq.n	800cb0a <TIM_OC1_SetConfig+0xbe>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	4a1b      	ldr	r2, [pc, #108]	@ (800cb5c <TIM_OC1_SetConfig+0x110>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d00b      	beq.n	800cb0a <TIM_OC1_SetConfig+0xbe>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	4a1a      	ldr	r2, [pc, #104]	@ (800cb60 <TIM_OC1_SetConfig+0x114>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d007      	beq.n	800cb0a <TIM_OC1_SetConfig+0xbe>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	4a19      	ldr	r2, [pc, #100]	@ (800cb64 <TIM_OC1_SetConfig+0x118>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d003      	beq.n	800cb0a <TIM_OC1_SetConfig+0xbe>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	4a18      	ldr	r2, [pc, #96]	@ (800cb68 <TIM_OC1_SetConfig+0x11c>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d111      	bne.n	800cb2e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800cb18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	695b      	ldr	r3, [r3, #20]
 800cb1e:	693a      	ldr	r2, [r7, #16]
 800cb20:	4313      	orrs	r3, r2
 800cb22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	699b      	ldr	r3, [r3, #24]
 800cb28:	693a      	ldr	r2, [r7, #16]
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	693a      	ldr	r2, [r7, #16]
 800cb32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	68fa      	ldr	r2, [r7, #12]
 800cb38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	685a      	ldr	r2, [r3, #4]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	697a      	ldr	r2, [r7, #20]
 800cb46:	621a      	str	r2, [r3, #32]
}
 800cb48:	bf00      	nop
 800cb4a:	371c      	adds	r7, #28
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr
 800cb54:	fffeff8f 	.word	0xfffeff8f
 800cb58:	40010000 	.word	0x40010000
 800cb5c:	40010400 	.word	0x40010400
 800cb60:	40014000 	.word	0x40014000
 800cb64:	40014400 	.word	0x40014400
 800cb68:	40014800 	.word	0x40014800

0800cb6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b087      	sub	sp, #28
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6a1b      	ldr	r3, [r3, #32]
 800cb7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6a1b      	ldr	r3, [r3, #32]
 800cb80:	f023 0210 	bic.w	r2, r3, #16
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	699b      	ldr	r3, [r3, #24]
 800cb92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cb94:	68fa      	ldr	r2, [r7, #12]
 800cb96:	4b34      	ldr	r3, [pc, #208]	@ (800cc68 <TIM_OC2_SetConfig+0xfc>)
 800cb98:	4013      	ands	r3, r2
 800cb9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	021b      	lsls	r3, r3, #8
 800cbaa:	68fa      	ldr	r2, [r7, #12]
 800cbac:	4313      	orrs	r3, r2
 800cbae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	f023 0320 	bic.w	r3, r3, #32
 800cbb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	011b      	lsls	r3, r3, #4
 800cbbe:	697a      	ldr	r2, [r7, #20]
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	4a29      	ldr	r2, [pc, #164]	@ (800cc6c <TIM_OC2_SetConfig+0x100>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d003      	beq.n	800cbd4 <TIM_OC2_SetConfig+0x68>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	4a28      	ldr	r2, [pc, #160]	@ (800cc70 <TIM_OC2_SetConfig+0x104>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d10d      	bne.n	800cbf0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cbda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	011b      	lsls	r3, r3, #4
 800cbe2:	697a      	ldr	r2, [r7, #20]
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	4a1e      	ldr	r2, [pc, #120]	@ (800cc6c <TIM_OC2_SetConfig+0x100>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d00f      	beq.n	800cc18 <TIM_OC2_SetConfig+0xac>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	4a1d      	ldr	r2, [pc, #116]	@ (800cc70 <TIM_OC2_SetConfig+0x104>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d00b      	beq.n	800cc18 <TIM_OC2_SetConfig+0xac>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	4a1c      	ldr	r2, [pc, #112]	@ (800cc74 <TIM_OC2_SetConfig+0x108>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d007      	beq.n	800cc18 <TIM_OC2_SetConfig+0xac>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	4a1b      	ldr	r2, [pc, #108]	@ (800cc78 <TIM_OC2_SetConfig+0x10c>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d003      	beq.n	800cc18 <TIM_OC2_SetConfig+0xac>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	4a1a      	ldr	r2, [pc, #104]	@ (800cc7c <TIM_OC2_SetConfig+0x110>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d113      	bne.n	800cc40 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cc1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cc26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	695b      	ldr	r3, [r3, #20]
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	693a      	ldr	r2, [r7, #16]
 800cc30:	4313      	orrs	r3, r2
 800cc32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	699b      	ldr	r3, [r3, #24]
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	693a      	ldr	r2, [r7, #16]
 800cc3c:	4313      	orrs	r3, r2
 800cc3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	693a      	ldr	r2, [r7, #16]
 800cc44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	68fa      	ldr	r2, [r7, #12]
 800cc4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	685a      	ldr	r2, [r3, #4]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	697a      	ldr	r2, [r7, #20]
 800cc58:	621a      	str	r2, [r3, #32]
}
 800cc5a:	bf00      	nop
 800cc5c:	371c      	adds	r7, #28
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc64:	4770      	bx	lr
 800cc66:	bf00      	nop
 800cc68:	feff8fff 	.word	0xfeff8fff
 800cc6c:	40010000 	.word	0x40010000
 800cc70:	40010400 	.word	0x40010400
 800cc74:	40014000 	.word	0x40014000
 800cc78:	40014400 	.word	0x40014400
 800cc7c:	40014800 	.word	0x40014800

0800cc80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b087      	sub	sp, #28
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6a1b      	ldr	r3, [r3, #32]
 800cc8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6a1b      	ldr	r3, [r3, #32]
 800cc94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	69db      	ldr	r3, [r3, #28]
 800cca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cca8:	68fa      	ldr	r2, [r7, #12]
 800ccaa:	4b33      	ldr	r3, [pc, #204]	@ (800cd78 <TIM_OC3_SetConfig+0xf8>)
 800ccac:	4013      	ands	r3, r2
 800ccae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f023 0303 	bic.w	r3, r3, #3
 800ccb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	68fa      	ldr	r2, [r7, #12]
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ccc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	689b      	ldr	r3, [r3, #8]
 800ccce:	021b      	lsls	r3, r3, #8
 800ccd0:	697a      	ldr	r2, [r7, #20]
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	4a28      	ldr	r2, [pc, #160]	@ (800cd7c <TIM_OC3_SetConfig+0xfc>)
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d003      	beq.n	800cce6 <TIM_OC3_SetConfig+0x66>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	4a27      	ldr	r2, [pc, #156]	@ (800cd80 <TIM_OC3_SetConfig+0x100>)
 800cce2:	4293      	cmp	r3, r2
 800cce4:	d10d      	bne.n	800cd02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ccec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	68db      	ldr	r3, [r3, #12]
 800ccf2:	021b      	lsls	r3, r3, #8
 800ccf4:	697a      	ldr	r2, [r7, #20]
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cd00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	4a1d      	ldr	r2, [pc, #116]	@ (800cd7c <TIM_OC3_SetConfig+0xfc>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d00f      	beq.n	800cd2a <TIM_OC3_SetConfig+0xaa>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	4a1c      	ldr	r2, [pc, #112]	@ (800cd80 <TIM_OC3_SetConfig+0x100>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d00b      	beq.n	800cd2a <TIM_OC3_SetConfig+0xaa>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	4a1b      	ldr	r2, [pc, #108]	@ (800cd84 <TIM_OC3_SetConfig+0x104>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d007      	beq.n	800cd2a <TIM_OC3_SetConfig+0xaa>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	4a1a      	ldr	r2, [pc, #104]	@ (800cd88 <TIM_OC3_SetConfig+0x108>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d003      	beq.n	800cd2a <TIM_OC3_SetConfig+0xaa>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	4a19      	ldr	r2, [pc, #100]	@ (800cd8c <TIM_OC3_SetConfig+0x10c>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d113      	bne.n	800cd52 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cd30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cd38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	695b      	ldr	r3, [r3, #20]
 800cd3e:	011b      	lsls	r3, r3, #4
 800cd40:	693a      	ldr	r2, [r7, #16]
 800cd42:	4313      	orrs	r3, r2
 800cd44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	699b      	ldr	r3, [r3, #24]
 800cd4a:	011b      	lsls	r3, r3, #4
 800cd4c:	693a      	ldr	r2, [r7, #16]
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	693a      	ldr	r2, [r7, #16]
 800cd56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	68fa      	ldr	r2, [r7, #12]
 800cd5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	685a      	ldr	r2, [r3, #4]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	697a      	ldr	r2, [r7, #20]
 800cd6a:	621a      	str	r2, [r3, #32]
}
 800cd6c:	bf00      	nop
 800cd6e:	371c      	adds	r7, #28
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr
 800cd78:	fffeff8f 	.word	0xfffeff8f
 800cd7c:	40010000 	.word	0x40010000
 800cd80:	40010400 	.word	0x40010400
 800cd84:	40014000 	.word	0x40014000
 800cd88:	40014400 	.word	0x40014400
 800cd8c:	40014800 	.word	0x40014800

0800cd90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cd90:	b480      	push	{r7}
 800cd92:	b087      	sub	sp, #28
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6a1b      	ldr	r3, [r3, #32]
 800cd9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6a1b      	ldr	r3, [r3, #32]
 800cda4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	69db      	ldr	r3, [r3, #28]
 800cdb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cdb8:	68fa      	ldr	r2, [r7, #12]
 800cdba:	4b24      	ldr	r3, [pc, #144]	@ (800ce4c <TIM_OC4_SetConfig+0xbc>)
 800cdbc:	4013      	ands	r3, r2
 800cdbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cdc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	021b      	lsls	r3, r3, #8
 800cdce:	68fa      	ldr	r2, [r7, #12]
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cdda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	689b      	ldr	r3, [r3, #8]
 800cde0:	031b      	lsls	r3, r3, #12
 800cde2:	693a      	ldr	r2, [r7, #16]
 800cde4:	4313      	orrs	r3, r2
 800cde6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	4a19      	ldr	r2, [pc, #100]	@ (800ce50 <TIM_OC4_SetConfig+0xc0>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d00f      	beq.n	800ce10 <TIM_OC4_SetConfig+0x80>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	4a18      	ldr	r2, [pc, #96]	@ (800ce54 <TIM_OC4_SetConfig+0xc4>)
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d00b      	beq.n	800ce10 <TIM_OC4_SetConfig+0x80>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	4a17      	ldr	r2, [pc, #92]	@ (800ce58 <TIM_OC4_SetConfig+0xc8>)
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d007      	beq.n	800ce10 <TIM_OC4_SetConfig+0x80>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	4a16      	ldr	r2, [pc, #88]	@ (800ce5c <TIM_OC4_SetConfig+0xcc>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d003      	beq.n	800ce10 <TIM_OC4_SetConfig+0x80>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	4a15      	ldr	r2, [pc, #84]	@ (800ce60 <TIM_OC4_SetConfig+0xd0>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d109      	bne.n	800ce24 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ce16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	695b      	ldr	r3, [r3, #20]
 800ce1c:	019b      	lsls	r3, r3, #6
 800ce1e:	697a      	ldr	r2, [r7, #20]
 800ce20:	4313      	orrs	r3, r2
 800ce22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	697a      	ldr	r2, [r7, #20]
 800ce28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	68fa      	ldr	r2, [r7, #12]
 800ce2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	685a      	ldr	r2, [r3, #4]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	693a      	ldr	r2, [r7, #16]
 800ce3c:	621a      	str	r2, [r3, #32]
}
 800ce3e:	bf00      	nop
 800ce40:	371c      	adds	r7, #28
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr
 800ce4a:	bf00      	nop
 800ce4c:	feff8fff 	.word	0xfeff8fff
 800ce50:	40010000 	.word	0x40010000
 800ce54:	40010400 	.word	0x40010400
 800ce58:	40014000 	.word	0x40014000
 800ce5c:	40014400 	.word	0x40014400
 800ce60:	40014800 	.word	0x40014800

0800ce64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b087      	sub	sp, #28
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6a1b      	ldr	r3, [r3, #32]
 800ce72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6a1b      	ldr	r3, [r3, #32]
 800ce78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ce8c:	68fa      	ldr	r2, [r7, #12]
 800ce8e:	4b21      	ldr	r3, [pc, #132]	@ (800cf14 <TIM_OC5_SetConfig+0xb0>)
 800ce90:	4013      	ands	r3, r2
 800ce92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	68fa      	ldr	r2, [r7, #12]
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cea4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	689b      	ldr	r3, [r3, #8]
 800ceaa:	041b      	lsls	r3, r3, #16
 800ceac:	693a      	ldr	r2, [r7, #16]
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	4a18      	ldr	r2, [pc, #96]	@ (800cf18 <TIM_OC5_SetConfig+0xb4>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d00f      	beq.n	800ceda <TIM_OC5_SetConfig+0x76>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	4a17      	ldr	r2, [pc, #92]	@ (800cf1c <TIM_OC5_SetConfig+0xb8>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d00b      	beq.n	800ceda <TIM_OC5_SetConfig+0x76>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	4a16      	ldr	r2, [pc, #88]	@ (800cf20 <TIM_OC5_SetConfig+0xbc>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d007      	beq.n	800ceda <TIM_OC5_SetConfig+0x76>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	4a15      	ldr	r2, [pc, #84]	@ (800cf24 <TIM_OC5_SetConfig+0xc0>)
 800cece:	4293      	cmp	r3, r2
 800ced0:	d003      	beq.n	800ceda <TIM_OC5_SetConfig+0x76>
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	4a14      	ldr	r2, [pc, #80]	@ (800cf28 <TIM_OC5_SetConfig+0xc4>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d109      	bne.n	800ceee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cee0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	695b      	ldr	r3, [r3, #20]
 800cee6:	021b      	lsls	r3, r3, #8
 800cee8:	697a      	ldr	r2, [r7, #20]
 800ceea:	4313      	orrs	r3, r2
 800ceec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	697a      	ldr	r2, [r7, #20]
 800cef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	68fa      	ldr	r2, [r7, #12]
 800cef8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	685a      	ldr	r2, [r3, #4]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	693a      	ldr	r2, [r7, #16]
 800cf06:	621a      	str	r2, [r3, #32]
}
 800cf08:	bf00      	nop
 800cf0a:	371c      	adds	r7, #28
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr
 800cf14:	fffeff8f 	.word	0xfffeff8f
 800cf18:	40010000 	.word	0x40010000
 800cf1c:	40010400 	.word	0x40010400
 800cf20:	40014000 	.word	0x40014000
 800cf24:	40014400 	.word	0x40014400
 800cf28:	40014800 	.word	0x40014800

0800cf2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b087      	sub	sp, #28
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6a1b      	ldr	r3, [r3, #32]
 800cf3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6a1b      	ldr	r3, [r3, #32]
 800cf40:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cf54:	68fa      	ldr	r2, [r7, #12]
 800cf56:	4b22      	ldr	r3, [pc, #136]	@ (800cfe0 <TIM_OC6_SetConfig+0xb4>)
 800cf58:	4013      	ands	r3, r2
 800cf5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	021b      	lsls	r3, r3, #8
 800cf62:	68fa      	ldr	r2, [r7, #12]
 800cf64:	4313      	orrs	r3, r2
 800cf66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cf6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	689b      	ldr	r3, [r3, #8]
 800cf74:	051b      	lsls	r3, r3, #20
 800cf76:	693a      	ldr	r2, [r7, #16]
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	4a19      	ldr	r2, [pc, #100]	@ (800cfe4 <TIM_OC6_SetConfig+0xb8>)
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d00f      	beq.n	800cfa4 <TIM_OC6_SetConfig+0x78>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	4a18      	ldr	r2, [pc, #96]	@ (800cfe8 <TIM_OC6_SetConfig+0xbc>)
 800cf88:	4293      	cmp	r3, r2
 800cf8a:	d00b      	beq.n	800cfa4 <TIM_OC6_SetConfig+0x78>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	4a17      	ldr	r2, [pc, #92]	@ (800cfec <TIM_OC6_SetConfig+0xc0>)
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d007      	beq.n	800cfa4 <TIM_OC6_SetConfig+0x78>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	4a16      	ldr	r2, [pc, #88]	@ (800cff0 <TIM_OC6_SetConfig+0xc4>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d003      	beq.n	800cfa4 <TIM_OC6_SetConfig+0x78>
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	4a15      	ldr	r2, [pc, #84]	@ (800cff4 <TIM_OC6_SetConfig+0xc8>)
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d109      	bne.n	800cfb8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cfaa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	695b      	ldr	r3, [r3, #20]
 800cfb0:	029b      	lsls	r3, r3, #10
 800cfb2:	697a      	ldr	r2, [r7, #20]
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	697a      	ldr	r2, [r7, #20]
 800cfbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	68fa      	ldr	r2, [r7, #12]
 800cfc2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	685a      	ldr	r2, [r3, #4]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	693a      	ldr	r2, [r7, #16]
 800cfd0:	621a      	str	r2, [r3, #32]
}
 800cfd2:	bf00      	nop
 800cfd4:	371c      	adds	r7, #28
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr
 800cfde:	bf00      	nop
 800cfe0:	feff8fff 	.word	0xfeff8fff
 800cfe4:	40010000 	.word	0x40010000
 800cfe8:	40010400 	.word	0x40010400
 800cfec:	40014000 	.word	0x40014000
 800cff0:	40014400 	.word	0x40014400
 800cff4:	40014800 	.word	0x40014800

0800cff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b087      	sub	sp, #28
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	60b9      	str	r1, [r7, #8]
 800d002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	6a1b      	ldr	r3, [r3, #32]
 800d008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	6a1b      	ldr	r3, [r3, #32]
 800d00e:	f023 0201 	bic.w	r2, r3, #1
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	699b      	ldr	r3, [r3, #24]
 800d01a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	011b      	lsls	r3, r3, #4
 800d028:	693a      	ldr	r2, [r7, #16]
 800d02a:	4313      	orrs	r3, r2
 800d02c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	f023 030a 	bic.w	r3, r3, #10
 800d034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d036:	697a      	ldr	r2, [r7, #20]
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	4313      	orrs	r3, r2
 800d03c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	693a      	ldr	r2, [r7, #16]
 800d042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	697a      	ldr	r2, [r7, #20]
 800d048:	621a      	str	r2, [r3, #32]
}
 800d04a:	bf00      	nop
 800d04c:	371c      	adds	r7, #28
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr

0800d056 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d056:	b480      	push	{r7}
 800d058:	b087      	sub	sp, #28
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	60f8      	str	r0, [r7, #12]
 800d05e:	60b9      	str	r1, [r7, #8]
 800d060:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6a1b      	ldr	r3, [r3, #32]
 800d066:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	6a1b      	ldr	r3, [r3, #32]
 800d06c:	f023 0210 	bic.w	r2, r3, #16
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	699b      	ldr	r3, [r3, #24]
 800d078:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d080:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	031b      	lsls	r3, r3, #12
 800d086:	693a      	ldr	r2, [r7, #16]
 800d088:	4313      	orrs	r3, r2
 800d08a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d092:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	011b      	lsls	r3, r3, #4
 800d098:	697a      	ldr	r2, [r7, #20]
 800d09a:	4313      	orrs	r3, r2
 800d09c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	693a      	ldr	r2, [r7, #16]
 800d0a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	697a      	ldr	r2, [r7, #20]
 800d0a8:	621a      	str	r2, [r3, #32]
}
 800d0aa:	bf00      	nop
 800d0ac:	371c      	adds	r7, #28
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr
	...

0800d0b8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b085      	sub	sp, #20
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	689b      	ldr	r3, [r3, #8]
 800d0c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d0c8:	68fa      	ldr	r2, [r7, #12]
 800d0ca:	4b09      	ldr	r3, [pc, #36]	@ (800d0f0 <TIM_ITRx_SetConfig+0x38>)
 800d0cc:	4013      	ands	r3, r2
 800d0ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d0d0:	683a      	ldr	r2, [r7, #0]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	f043 0307 	orr.w	r3, r3, #7
 800d0da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	68fa      	ldr	r2, [r7, #12]
 800d0e0:	609a      	str	r2, [r3, #8]
}
 800d0e2:	bf00      	nop
 800d0e4:	3714      	adds	r7, #20
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr
 800d0ee:	bf00      	nop
 800d0f0:	ffcfff8f 	.word	0xffcfff8f

0800d0f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b087      	sub	sp, #28
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	60f8      	str	r0, [r7, #12]
 800d0fc:	60b9      	str	r1, [r7, #8]
 800d0fe:	607a      	str	r2, [r7, #4]
 800d100:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	689b      	ldr	r3, [r3, #8]
 800d106:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d10e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	021a      	lsls	r2, r3, #8
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	431a      	orrs	r2, r3
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	4313      	orrs	r3, r2
 800d11c:	697a      	ldr	r2, [r7, #20]
 800d11e:	4313      	orrs	r3, r2
 800d120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	697a      	ldr	r2, [r7, #20]
 800d126:	609a      	str	r2, [r3, #8]
}
 800d128:	bf00      	nop
 800d12a:	371c      	adds	r7, #28
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr

0800d134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d134:	b480      	push	{r7}
 800d136:	b085      	sub	sp, #20
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d144:	2b01      	cmp	r3, #1
 800d146:	d101      	bne.n	800d14c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d148:	2302      	movs	r3, #2
 800d14a:	e077      	b.n	800d23c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2201      	movs	r2, #1
 800d150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2202      	movs	r2, #2
 800d158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	689b      	ldr	r3, [r3, #8]
 800d16a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	4a35      	ldr	r2, [pc, #212]	@ (800d248 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d172:	4293      	cmp	r3, r2
 800d174:	d004      	beq.n	800d180 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	4a34      	ldr	r2, [pc, #208]	@ (800d24c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d108      	bne.n	800d192 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d186:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	68fa      	ldr	r2, [r7, #12]
 800d18e:	4313      	orrs	r3, r2
 800d190:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d198:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	68fa      	ldr	r2, [r7, #12]
 800d1a0:	4313      	orrs	r3, r2
 800d1a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	68fa      	ldr	r2, [r7, #12]
 800d1aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4a25      	ldr	r2, [pc, #148]	@ (800d248 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d02c      	beq.n	800d210 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d1be:	d027      	beq.n	800d210 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4a22      	ldr	r2, [pc, #136]	@ (800d250 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d022      	beq.n	800d210 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	4a21      	ldr	r2, [pc, #132]	@ (800d254 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d01d      	beq.n	800d210 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4a1f      	ldr	r2, [pc, #124]	@ (800d258 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d018      	beq.n	800d210 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4a1a      	ldr	r2, [pc, #104]	@ (800d24c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d013      	beq.n	800d210 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a1b      	ldr	r2, [pc, #108]	@ (800d25c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d00e      	beq.n	800d210 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4a1a      	ldr	r2, [pc, #104]	@ (800d260 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d009      	beq.n	800d210 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a18      	ldr	r2, [pc, #96]	@ (800d264 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d004      	beq.n	800d210 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	4a17      	ldr	r2, [pc, #92]	@ (800d268 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d10c      	bne.n	800d22a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d216:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	689b      	ldr	r3, [r3, #8]
 800d21c:	68ba      	ldr	r2, [r7, #8]
 800d21e:	4313      	orrs	r3, r2
 800d220:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	68ba      	ldr	r2, [r7, #8]
 800d228:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2201      	movs	r2, #1
 800d22e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2200      	movs	r2, #0
 800d236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d23a:	2300      	movs	r3, #0
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3714      	adds	r7, #20
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr
 800d248:	40010000 	.word	0x40010000
 800d24c:	40010400 	.word	0x40010400
 800d250:	40000400 	.word	0x40000400
 800d254:	40000800 	.word	0x40000800
 800d258:	40000c00 	.word	0x40000c00
 800d25c:	40001800 	.word	0x40001800
 800d260:	40014000 	.word	0x40014000
 800d264:	4000e000 	.word	0x4000e000
 800d268:	4000e400 	.word	0x4000e400

0800d26c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d26c:	b480      	push	{r7}
 800d26e:	b085      	sub	sp, #20
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d276:	2300      	movs	r3, #0
 800d278:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d280:	2b01      	cmp	r3, #1
 800d282:	d101      	bne.n	800d288 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d284:	2302      	movs	r3, #2
 800d286:	e073      	b.n	800d370 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2201      	movs	r2, #1
 800d28c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	68db      	ldr	r3, [r3, #12]
 800d29a:	4313      	orrs	r3, r2
 800d29c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	689b      	ldr	r3, [r3, #8]
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	691b      	ldr	r3, [r3, #16]
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	695b      	ldr	r3, [r3, #20]
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	699b      	ldr	r3, [r3, #24]
 800d2fc:	041b      	lsls	r3, r3, #16
 800d2fe:	4313      	orrs	r3, r2
 800d300:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	69db      	ldr	r3, [r3, #28]
 800d30c:	4313      	orrs	r3, r2
 800d30e:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4a19      	ldr	r2, [pc, #100]	@ (800d37c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d004      	beq.n	800d324 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a18      	ldr	r2, [pc, #96]	@ (800d380 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d11c      	bne.n	800d35e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d32e:	051b      	lsls	r3, r3, #20
 800d330:	4313      	orrs	r3, r2
 800d332:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	6a1b      	ldr	r3, [r3, #32]
 800d33e:	4313      	orrs	r3, r2
 800d340:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d34c:	4313      	orrs	r3, r2
 800d34e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d35a:	4313      	orrs	r3, r2
 800d35c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	68fa      	ldr	r2, [r7, #12]
 800d364:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2200      	movs	r2, #0
 800d36a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d36e:	2300      	movs	r3, #0
}
 800d370:	4618      	mov	r0, r3
 800d372:	3714      	adds	r7, #20
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr
 800d37c:	40010000 	.word	0x40010000
 800d380:	40010400 	.word	0x40010400

0800d384 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d384:	b480      	push	{r7}
 800d386:	b083      	sub	sp, #12
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d38c:	bf00      	nop
 800d38e:	370c      	adds	r7, #12
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr

0800d398 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d398:	b480      	push	{r7}
 800d39a:	b083      	sub	sp, #12
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d3a0:	bf00      	nop
 800d3a2:	370c      	adds	r7, #12
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr

0800d3ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d3b4:	bf00      	nop
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d101      	bne.n	800d3d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	e042      	b.n	800d458 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d106      	bne.n	800d3ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f7f4 fb6b 	bl	8001ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2224      	movs	r2, #36	@ 0x24
 800d3ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f022 0201 	bic.w	r2, r2, #1
 800d400:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d406:	2b00      	cmp	r3, #0
 800d408:	d002      	beq.n	800d410 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f001 fa8a 	bl	800e924 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f000 fc1b 	bl	800dc4c <UART_SetConfig>
 800d416:	4603      	mov	r3, r0
 800d418:	2b01      	cmp	r3, #1
 800d41a:	d101      	bne.n	800d420 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d41c:	2301      	movs	r3, #1
 800d41e:	e01b      	b.n	800d458 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	685a      	ldr	r2, [r3, #4]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d42e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	689a      	ldr	r2, [r3, #8]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d43e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	681a      	ldr	r2, [r3, #0]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f042 0201 	orr.w	r2, r2, #1
 800d44e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f001 fb09 	bl	800ea68 <UART_CheckIdleState>
 800d456:	4603      	mov	r3, r0
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b0ba      	sub	sp, #232	@ 0xe8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	69db      	ldr	r3, [r3, #28]
 800d46e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	689b      	ldr	r3, [r3, #8]
 800d482:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d486:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d48a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d48e:	4013      	ands	r3, r2
 800d490:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d11b      	bne.n	800d4d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d49c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4a0:	f003 0320 	and.w	r3, r3, #32
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d015      	beq.n	800d4d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d4a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4ac:	f003 0320 	and.w	r3, r3, #32
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d105      	bne.n	800d4c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d4b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d4b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d009      	beq.n	800d4d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	f000 8393 	beq.w	800dbf0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	4798      	blx	r3
      }
      return;
 800d4d2:	e38d      	b.n	800dbf0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d4d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	f000 8123 	beq.w	800d724 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d4de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d4e2:	4b8d      	ldr	r3, [pc, #564]	@ (800d718 <HAL_UART_IRQHandler+0x2b8>)
 800d4e4:	4013      	ands	r3, r2
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d106      	bne.n	800d4f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d4ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d4ee:	4b8b      	ldr	r3, [pc, #556]	@ (800d71c <HAL_UART_IRQHandler+0x2bc>)
 800d4f0:	4013      	ands	r3, r2
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	f000 8116 	beq.w	800d724 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d4f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4fc:	f003 0301 	and.w	r3, r3, #1
 800d500:	2b00      	cmp	r3, #0
 800d502:	d011      	beq.n	800d528 <HAL_UART_IRQHandler+0xc8>
 800d504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d00b      	beq.n	800d528 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	2201      	movs	r2, #1
 800d516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d51e:	f043 0201 	orr.w	r2, r3, #1
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d52c:	f003 0302 	and.w	r3, r3, #2
 800d530:	2b00      	cmp	r3, #0
 800d532:	d011      	beq.n	800d558 <HAL_UART_IRQHandler+0xf8>
 800d534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d538:	f003 0301 	and.w	r3, r3, #1
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d00b      	beq.n	800d558 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	2202      	movs	r2, #2
 800d546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d54e:	f043 0204 	orr.w	r2, r3, #4
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d55c:	f003 0304 	and.w	r3, r3, #4
 800d560:	2b00      	cmp	r3, #0
 800d562:	d011      	beq.n	800d588 <HAL_UART_IRQHandler+0x128>
 800d564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d568:	f003 0301 	and.w	r3, r3, #1
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d00b      	beq.n	800d588 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	2204      	movs	r2, #4
 800d576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d57e:	f043 0202 	orr.w	r2, r3, #2
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d58c:	f003 0308 	and.w	r3, r3, #8
 800d590:	2b00      	cmp	r3, #0
 800d592:	d017      	beq.n	800d5c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d598:	f003 0320 	and.w	r3, r3, #32
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d105      	bne.n	800d5ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d5a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d5a4:	4b5c      	ldr	r3, [pc, #368]	@ (800d718 <HAL_UART_IRQHandler+0x2b8>)
 800d5a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d00b      	beq.n	800d5c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	2208      	movs	r2, #8
 800d5b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5ba:	f043 0208 	orr.w	r2, r3, #8
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d5c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d5c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d012      	beq.n	800d5f6 <HAL_UART_IRQHandler+0x196>
 800d5d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d5d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d00c      	beq.n	800d5f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d5e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5ec:	f043 0220 	orr.w	r2, r3, #32
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	f000 82f9 	beq.w	800dbf4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d606:	f003 0320 	and.w	r3, r3, #32
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d013      	beq.n	800d636 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d60e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d612:	f003 0320 	and.w	r3, r3, #32
 800d616:	2b00      	cmp	r3, #0
 800d618:	d105      	bne.n	800d626 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d61a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d61e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d622:	2b00      	cmp	r3, #0
 800d624:	d007      	beq.n	800d636 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d003      	beq.n	800d636 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d63c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	689b      	ldr	r3, [r3, #8]
 800d646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d64a:	2b40      	cmp	r3, #64	@ 0x40
 800d64c:	d005      	beq.n	800d65a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d64e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d652:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d656:	2b00      	cmp	r3, #0
 800d658:	d054      	beq.n	800d704 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f001 fb1c 	bl	800ec98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	689b      	ldr	r3, [r3, #8]
 800d666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d66a:	2b40      	cmp	r3, #64	@ 0x40
 800d66c:	d146      	bne.n	800d6fc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	3308      	adds	r3, #8
 800d674:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d678:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d67c:	e853 3f00 	ldrex	r3, [r3]
 800d680:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d684:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d688:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d68c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	3308      	adds	r3, #8
 800d696:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d69a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d69e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d6a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d6aa:	e841 2300 	strex	r3, r2, [r1]
 800d6ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d6b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d1d9      	bne.n	800d66e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d017      	beq.n	800d6f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6ca:	4a15      	ldr	r2, [pc, #84]	@ (800d720 <HAL_UART_IRQHandler+0x2c0>)
 800d6cc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7f7 fc09 	bl	8004eec <HAL_DMA_Abort_IT>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d019      	beq.n	800d714 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d6ee:	4610      	mov	r0, r2
 800d6f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6f2:	e00f      	b.n	800d714 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 fa93 	bl	800dc20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6fa:	e00b      	b.n	800d714 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f000 fa8f 	bl	800dc20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d702:	e007      	b.n	800d714 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f000 fa8b 	bl	800dc20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2200      	movs	r2, #0
 800d70e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d712:	e26f      	b.n	800dbf4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d714:	bf00      	nop
    return;
 800d716:	e26d      	b.n	800dbf4 <HAL_UART_IRQHandler+0x794>
 800d718:	10000001 	.word	0x10000001
 800d71c:	04000120 	.word	0x04000120
 800d720:	0800ed65 	.word	0x0800ed65

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d728:	2b01      	cmp	r3, #1
 800d72a:	f040 8203 	bne.w	800db34 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d72e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d732:	f003 0310 	and.w	r3, r3, #16
 800d736:	2b00      	cmp	r3, #0
 800d738:	f000 81fc 	beq.w	800db34 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d73c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d740:	f003 0310 	and.w	r3, r3, #16
 800d744:	2b00      	cmp	r3, #0
 800d746:	f000 81f5 	beq.w	800db34 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2210      	movs	r2, #16
 800d750:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	689b      	ldr	r3, [r3, #8]
 800d758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d75c:	2b40      	cmp	r3, #64	@ 0x40
 800d75e:	f040 816d 	bne.w	800da3c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	4aa4      	ldr	r2, [pc, #656]	@ (800d9fc <HAL_UART_IRQHandler+0x59c>)
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d068      	beq.n	800d842 <HAL_UART_IRQHandler+0x3e2>
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	4aa1      	ldr	r2, [pc, #644]	@ (800da00 <HAL_UART_IRQHandler+0x5a0>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d061      	beq.n	800d842 <HAL_UART_IRQHandler+0x3e2>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	4a9f      	ldr	r2, [pc, #636]	@ (800da04 <HAL_UART_IRQHandler+0x5a4>)
 800d788:	4293      	cmp	r3, r2
 800d78a:	d05a      	beq.n	800d842 <HAL_UART_IRQHandler+0x3e2>
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4a9c      	ldr	r2, [pc, #624]	@ (800da08 <HAL_UART_IRQHandler+0x5a8>)
 800d796:	4293      	cmp	r3, r2
 800d798:	d053      	beq.n	800d842 <HAL_UART_IRQHandler+0x3e2>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4a9a      	ldr	r2, [pc, #616]	@ (800da0c <HAL_UART_IRQHandler+0x5ac>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d04c      	beq.n	800d842 <HAL_UART_IRQHandler+0x3e2>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a97      	ldr	r2, [pc, #604]	@ (800da10 <HAL_UART_IRQHandler+0x5b0>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d045      	beq.n	800d842 <HAL_UART_IRQHandler+0x3e2>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	4a95      	ldr	r2, [pc, #596]	@ (800da14 <HAL_UART_IRQHandler+0x5b4>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d03e      	beq.n	800d842 <HAL_UART_IRQHandler+0x3e2>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	4a92      	ldr	r2, [pc, #584]	@ (800da18 <HAL_UART_IRQHandler+0x5b8>)
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	d037      	beq.n	800d842 <HAL_UART_IRQHandler+0x3e2>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a90      	ldr	r2, [pc, #576]	@ (800da1c <HAL_UART_IRQHandler+0x5bc>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d030      	beq.n	800d842 <HAL_UART_IRQHandler+0x3e2>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	4a8d      	ldr	r2, [pc, #564]	@ (800da20 <HAL_UART_IRQHandler+0x5c0>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d029      	beq.n	800d842 <HAL_UART_IRQHandler+0x3e2>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	4a8b      	ldr	r2, [pc, #556]	@ (800da24 <HAL_UART_IRQHandler+0x5c4>)
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	d022      	beq.n	800d842 <HAL_UART_IRQHandler+0x3e2>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	4a88      	ldr	r2, [pc, #544]	@ (800da28 <HAL_UART_IRQHandler+0x5c8>)
 800d806:	4293      	cmp	r3, r2
 800d808:	d01b      	beq.n	800d842 <HAL_UART_IRQHandler+0x3e2>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	4a86      	ldr	r2, [pc, #536]	@ (800da2c <HAL_UART_IRQHandler+0x5cc>)
 800d814:	4293      	cmp	r3, r2
 800d816:	d014      	beq.n	800d842 <HAL_UART_IRQHandler+0x3e2>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4a83      	ldr	r2, [pc, #524]	@ (800da30 <HAL_UART_IRQHandler+0x5d0>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d00d      	beq.n	800d842 <HAL_UART_IRQHandler+0x3e2>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4a81      	ldr	r2, [pc, #516]	@ (800da34 <HAL_UART_IRQHandler+0x5d4>)
 800d830:	4293      	cmp	r3, r2
 800d832:	d006      	beq.n	800d842 <HAL_UART_IRQHandler+0x3e2>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4a7e      	ldr	r2, [pc, #504]	@ (800da38 <HAL_UART_IRQHandler+0x5d8>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d106      	bne.n	800d850 <HAL_UART_IRQHandler+0x3f0>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	685b      	ldr	r3, [r3, #4]
 800d84c:	b29b      	uxth	r3, r3
 800d84e:	e005      	b.n	800d85c <HAL_UART_IRQHandler+0x3fc>
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d860:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d864:	2b00      	cmp	r3, #0
 800d866:	f000 80ad 	beq.w	800d9c4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d870:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d874:	429a      	cmp	r2, r3
 800d876:	f080 80a5 	bcs.w	800d9c4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d880:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d88a:	69db      	ldr	r3, [r3, #28]
 800d88c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d890:	f000 8087 	beq.w	800d9a2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d89c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d8a0:	e853 3f00 	ldrex	r3, [r3]
 800d8a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d8a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d8ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d8b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d8be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d8c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d8ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d8ce:	e841 2300 	strex	r3, r2, [r1]
 800d8d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d8d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d1da      	bne.n	800d894 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	3308      	adds	r3, #8
 800d8e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d8e8:	e853 3f00 	ldrex	r3, [r3]
 800d8ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d8ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d8f0:	f023 0301 	bic.w	r3, r3, #1
 800d8f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	3308      	adds	r3, #8
 800d8fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d902:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d906:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d908:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d90a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d90e:	e841 2300 	strex	r3, r2, [r1]
 800d912:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d914:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d916:	2b00      	cmp	r3, #0
 800d918:	d1e1      	bne.n	800d8de <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	3308      	adds	r3, #8
 800d920:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d922:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d924:	e853 3f00 	ldrex	r3, [r3]
 800d928:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d92a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d92c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d930:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	3308      	adds	r3, #8
 800d93a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d93e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d940:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d942:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d944:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d946:	e841 2300 	strex	r3, r2, [r1]
 800d94a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d94c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d1e3      	bne.n	800d91a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2220      	movs	r2, #32
 800d956:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2200      	movs	r2, #0
 800d95e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d968:	e853 3f00 	ldrex	r3, [r3]
 800d96c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d96e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d970:	f023 0310 	bic.w	r3, r3, #16
 800d974:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	461a      	mov	r2, r3
 800d97e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d982:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d984:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d986:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d988:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d98a:	e841 2300 	strex	r3, r2, [r1]
 800d98e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d990:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d992:	2b00      	cmp	r3, #0
 800d994:	d1e4      	bne.n	800d960 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7f6 ff87 	bl	80048b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2202      	movs	r2, #2
 800d9a6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	1ad3      	subs	r3, r2, r3
 800d9b8:	b29b      	uxth	r3, r3
 800d9ba:	4619      	mov	r1, r3
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f000 f939 	bl	800dc34 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d9c2:	e119      	b.n	800dbf8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d9ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	f040 8112 	bne.w	800dbf8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d9da:	69db      	ldr	r3, [r3, #28]
 800d9dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d9e0:	f040 810a 	bne.w	800dbf8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2202      	movs	r2, #2
 800d9e8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d9f0:	4619      	mov	r1, r3
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 f91e 	bl	800dc34 <HAL_UARTEx_RxEventCallback>
      return;
 800d9f8:	e0fe      	b.n	800dbf8 <HAL_UART_IRQHandler+0x798>
 800d9fa:	bf00      	nop
 800d9fc:	40020010 	.word	0x40020010
 800da00:	40020028 	.word	0x40020028
 800da04:	40020040 	.word	0x40020040
 800da08:	40020058 	.word	0x40020058
 800da0c:	40020070 	.word	0x40020070
 800da10:	40020088 	.word	0x40020088
 800da14:	400200a0 	.word	0x400200a0
 800da18:	400200b8 	.word	0x400200b8
 800da1c:	40020410 	.word	0x40020410
 800da20:	40020428 	.word	0x40020428
 800da24:	40020440 	.word	0x40020440
 800da28:	40020458 	.word	0x40020458
 800da2c:	40020470 	.word	0x40020470
 800da30:	40020488 	.word	0x40020488
 800da34:	400204a0 	.word	0x400204a0
 800da38:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800da48:	b29b      	uxth	r3, r3
 800da4a:	1ad3      	subs	r3, r2, r3
 800da4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800da56:	b29b      	uxth	r3, r3
 800da58:	2b00      	cmp	r3, #0
 800da5a:	f000 80cf 	beq.w	800dbfc <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800da5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800da62:	2b00      	cmp	r3, #0
 800da64:	f000 80ca 	beq.w	800dbfc <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da70:	e853 3f00 	ldrex	r3, [r3]
 800da74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800da76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800da7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	461a      	mov	r2, r3
 800da86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800da8a:	647b      	str	r3, [r7, #68]	@ 0x44
 800da8c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800da90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da92:	e841 2300 	strex	r3, r2, [r1]
 800da96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800da98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d1e4      	bne.n	800da68 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	3308      	adds	r3, #8
 800daa4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daa8:	e853 3f00 	ldrex	r3, [r3]
 800daac:	623b      	str	r3, [r7, #32]
   return(result);
 800daae:	6a3a      	ldr	r2, [r7, #32]
 800dab0:	4b55      	ldr	r3, [pc, #340]	@ (800dc08 <HAL_UART_IRQHandler+0x7a8>)
 800dab2:	4013      	ands	r3, r2
 800dab4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	3308      	adds	r3, #8
 800dabe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800dac2:	633a      	str	r2, [r7, #48]	@ 0x30
 800dac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dac6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dac8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800daca:	e841 2300 	strex	r3, r2, [r1]
 800dace:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d1e3      	bne.n	800da9e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2220      	movs	r2, #32
 800dada:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2200      	movs	r2, #0
 800dae2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2200      	movs	r2, #0
 800dae8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	e853 3f00 	ldrex	r3, [r3]
 800daf6:	60fb      	str	r3, [r7, #12]
   return(result);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	f023 0310 	bic.w	r3, r3, #16
 800dafe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	461a      	mov	r2, r3
 800db08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800db0c:	61fb      	str	r3, [r7, #28]
 800db0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db10:	69b9      	ldr	r1, [r7, #24]
 800db12:	69fa      	ldr	r2, [r7, #28]
 800db14:	e841 2300 	strex	r3, r2, [r1]
 800db18:	617b      	str	r3, [r7, #20]
   return(result);
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d1e4      	bne.n	800daea <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2202      	movs	r2, #2
 800db24:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800db26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800db2a:	4619      	mov	r1, r3
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f000 f881 	bl	800dc34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800db32:	e063      	b.n	800dbfc <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800db34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d00e      	beq.n	800db5e <HAL_UART_IRQHandler+0x6fe>
 800db40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800db44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d008      	beq.n	800db5e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800db54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f001 f941 	bl	800edde <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800db5c:	e051      	b.n	800dc02 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800db5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db66:	2b00      	cmp	r3, #0
 800db68:	d014      	beq.n	800db94 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800db6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db72:	2b00      	cmp	r3, #0
 800db74:	d105      	bne.n	800db82 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800db76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800db7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d008      	beq.n	800db94 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800db86:	2b00      	cmp	r3, #0
 800db88:	d03a      	beq.n	800dc00 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	4798      	blx	r3
    }
    return;
 800db92:	e035      	b.n	800dc00 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800db94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d009      	beq.n	800dbb4 <HAL_UART_IRQHandler+0x754>
 800dba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d003      	beq.n	800dbb4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f001 f8eb 	bl	800ed88 <UART_EndTransmit_IT>
    return;
 800dbb2:	e026      	b.n	800dc02 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dbb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dbb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d009      	beq.n	800dbd4 <HAL_UART_IRQHandler+0x774>
 800dbc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dbc4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d003      	beq.n	800dbd4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f001 f91a 	bl	800ee06 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dbd2:	e016      	b.n	800dc02 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dbd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dbd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d010      	beq.n	800dc02 <HAL_UART_IRQHandler+0x7a2>
 800dbe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	da0c      	bge.n	800dc02 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f001 f902 	bl	800edf2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dbee:	e008      	b.n	800dc02 <HAL_UART_IRQHandler+0x7a2>
      return;
 800dbf0:	bf00      	nop
 800dbf2:	e006      	b.n	800dc02 <HAL_UART_IRQHandler+0x7a2>
    return;
 800dbf4:	bf00      	nop
 800dbf6:	e004      	b.n	800dc02 <HAL_UART_IRQHandler+0x7a2>
      return;
 800dbf8:	bf00      	nop
 800dbfa:	e002      	b.n	800dc02 <HAL_UART_IRQHandler+0x7a2>
      return;
 800dbfc:	bf00      	nop
 800dbfe:	e000      	b.n	800dc02 <HAL_UART_IRQHandler+0x7a2>
    return;
 800dc00:	bf00      	nop
  }
}
 800dc02:	37e8      	adds	r7, #232	@ 0xe8
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}
 800dc08:	effffffe 	.word	0xeffffffe

0800dc0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b083      	sub	sp, #12
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dc14:	bf00      	nop
 800dc16:	370c      	adds	r7, #12
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b083      	sub	sp, #12
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dc28:	bf00      	nop
 800dc2a:	370c      	adds	r7, #12
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc32:	4770      	bx	lr

0800dc34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dc34:	b480      	push	{r7}
 800dc36:	b083      	sub	sp, #12
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dc40:	bf00      	nop
 800dc42:	370c      	adds	r7, #12
 800dc44:	46bd      	mov	sp, r7
 800dc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4a:	4770      	bx	lr

0800dc4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dc4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dc50:	b092      	sub	sp, #72	@ 0x48
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dc56:	2300      	movs	r3, #0
 800dc58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	689a      	ldr	r2, [r3, #8]
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	691b      	ldr	r3, [r3, #16]
 800dc64:	431a      	orrs	r2, r3
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	695b      	ldr	r3, [r3, #20]
 800dc6a:	431a      	orrs	r2, r3
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	69db      	ldr	r3, [r3, #28]
 800dc70:	4313      	orrs	r3, r2
 800dc72:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	681a      	ldr	r2, [r3, #0]
 800dc7a:	4bbe      	ldr	r3, [pc, #760]	@ (800df74 <UART_SetConfig+0x328>)
 800dc7c:	4013      	ands	r3, r2
 800dc7e:	697a      	ldr	r2, [r7, #20]
 800dc80:	6812      	ldr	r2, [r2, #0]
 800dc82:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dc84:	430b      	orrs	r3, r1
 800dc86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	68da      	ldr	r2, [r3, #12]
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	430a      	orrs	r2, r1
 800dc9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	699b      	ldr	r3, [r3, #24]
 800dca2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4ab3      	ldr	r2, [pc, #716]	@ (800df78 <UART_SetConfig+0x32c>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d004      	beq.n	800dcb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	6a1b      	ldr	r3, [r3, #32]
 800dcb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dcb4:	4313      	orrs	r3, r2
 800dcb6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	689a      	ldr	r2, [r3, #8]
 800dcbe:	4baf      	ldr	r3, [pc, #700]	@ (800df7c <UART_SetConfig+0x330>)
 800dcc0:	4013      	ands	r3, r2
 800dcc2:	697a      	ldr	r2, [r7, #20]
 800dcc4:	6812      	ldr	r2, [r2, #0]
 800dcc6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dcc8:	430b      	orrs	r3, r1
 800dcca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcd2:	f023 010f 	bic.w	r1, r3, #15
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	430a      	orrs	r2, r1
 800dce0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4aa6      	ldr	r2, [pc, #664]	@ (800df80 <UART_SetConfig+0x334>)
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d177      	bne.n	800dddc <UART_SetConfig+0x190>
 800dcec:	4ba5      	ldr	r3, [pc, #660]	@ (800df84 <UART_SetConfig+0x338>)
 800dcee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dcf4:	2b28      	cmp	r3, #40	@ 0x28
 800dcf6:	d86d      	bhi.n	800ddd4 <UART_SetConfig+0x188>
 800dcf8:	a201      	add	r2, pc, #4	@ (adr r2, 800dd00 <UART_SetConfig+0xb4>)
 800dcfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcfe:	bf00      	nop
 800dd00:	0800dda5 	.word	0x0800dda5
 800dd04:	0800ddd5 	.word	0x0800ddd5
 800dd08:	0800ddd5 	.word	0x0800ddd5
 800dd0c:	0800ddd5 	.word	0x0800ddd5
 800dd10:	0800ddd5 	.word	0x0800ddd5
 800dd14:	0800ddd5 	.word	0x0800ddd5
 800dd18:	0800ddd5 	.word	0x0800ddd5
 800dd1c:	0800ddd5 	.word	0x0800ddd5
 800dd20:	0800ddad 	.word	0x0800ddad
 800dd24:	0800ddd5 	.word	0x0800ddd5
 800dd28:	0800ddd5 	.word	0x0800ddd5
 800dd2c:	0800ddd5 	.word	0x0800ddd5
 800dd30:	0800ddd5 	.word	0x0800ddd5
 800dd34:	0800ddd5 	.word	0x0800ddd5
 800dd38:	0800ddd5 	.word	0x0800ddd5
 800dd3c:	0800ddd5 	.word	0x0800ddd5
 800dd40:	0800ddb5 	.word	0x0800ddb5
 800dd44:	0800ddd5 	.word	0x0800ddd5
 800dd48:	0800ddd5 	.word	0x0800ddd5
 800dd4c:	0800ddd5 	.word	0x0800ddd5
 800dd50:	0800ddd5 	.word	0x0800ddd5
 800dd54:	0800ddd5 	.word	0x0800ddd5
 800dd58:	0800ddd5 	.word	0x0800ddd5
 800dd5c:	0800ddd5 	.word	0x0800ddd5
 800dd60:	0800ddbd 	.word	0x0800ddbd
 800dd64:	0800ddd5 	.word	0x0800ddd5
 800dd68:	0800ddd5 	.word	0x0800ddd5
 800dd6c:	0800ddd5 	.word	0x0800ddd5
 800dd70:	0800ddd5 	.word	0x0800ddd5
 800dd74:	0800ddd5 	.word	0x0800ddd5
 800dd78:	0800ddd5 	.word	0x0800ddd5
 800dd7c:	0800ddd5 	.word	0x0800ddd5
 800dd80:	0800ddc5 	.word	0x0800ddc5
 800dd84:	0800ddd5 	.word	0x0800ddd5
 800dd88:	0800ddd5 	.word	0x0800ddd5
 800dd8c:	0800ddd5 	.word	0x0800ddd5
 800dd90:	0800ddd5 	.word	0x0800ddd5
 800dd94:	0800ddd5 	.word	0x0800ddd5
 800dd98:	0800ddd5 	.word	0x0800ddd5
 800dd9c:	0800ddd5 	.word	0x0800ddd5
 800dda0:	0800ddcd 	.word	0x0800ddcd
 800dda4:	2301      	movs	r3, #1
 800dda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddaa:	e326      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800ddac:	2304      	movs	r3, #4
 800ddae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddb2:	e322      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800ddb4:	2308      	movs	r3, #8
 800ddb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddba:	e31e      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800ddbc:	2310      	movs	r3, #16
 800ddbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddc2:	e31a      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800ddc4:	2320      	movs	r3, #32
 800ddc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddca:	e316      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800ddcc:	2340      	movs	r3, #64	@ 0x40
 800ddce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddd2:	e312      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800ddd4:	2380      	movs	r3, #128	@ 0x80
 800ddd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddda:	e30e      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	4a69      	ldr	r2, [pc, #420]	@ (800df88 <UART_SetConfig+0x33c>)
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d130      	bne.n	800de48 <UART_SetConfig+0x1fc>
 800dde6:	4b67      	ldr	r3, [pc, #412]	@ (800df84 <UART_SetConfig+0x338>)
 800dde8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddea:	f003 0307 	and.w	r3, r3, #7
 800ddee:	2b05      	cmp	r3, #5
 800ddf0:	d826      	bhi.n	800de40 <UART_SetConfig+0x1f4>
 800ddf2:	a201      	add	r2, pc, #4	@ (adr r2, 800ddf8 <UART_SetConfig+0x1ac>)
 800ddf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddf8:	0800de11 	.word	0x0800de11
 800ddfc:	0800de19 	.word	0x0800de19
 800de00:	0800de21 	.word	0x0800de21
 800de04:	0800de29 	.word	0x0800de29
 800de08:	0800de31 	.word	0x0800de31
 800de0c:	0800de39 	.word	0x0800de39
 800de10:	2300      	movs	r3, #0
 800de12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de16:	e2f0      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800de18:	2304      	movs	r3, #4
 800de1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de1e:	e2ec      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800de20:	2308      	movs	r3, #8
 800de22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de26:	e2e8      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800de28:	2310      	movs	r3, #16
 800de2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de2e:	e2e4      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800de30:	2320      	movs	r3, #32
 800de32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de36:	e2e0      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800de38:	2340      	movs	r3, #64	@ 0x40
 800de3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de3e:	e2dc      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800de40:	2380      	movs	r3, #128	@ 0x80
 800de42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de46:	e2d8      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	4a4f      	ldr	r2, [pc, #316]	@ (800df8c <UART_SetConfig+0x340>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	d130      	bne.n	800deb4 <UART_SetConfig+0x268>
 800de52:	4b4c      	ldr	r3, [pc, #304]	@ (800df84 <UART_SetConfig+0x338>)
 800de54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de56:	f003 0307 	and.w	r3, r3, #7
 800de5a:	2b05      	cmp	r3, #5
 800de5c:	d826      	bhi.n	800deac <UART_SetConfig+0x260>
 800de5e:	a201      	add	r2, pc, #4	@ (adr r2, 800de64 <UART_SetConfig+0x218>)
 800de60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de64:	0800de7d 	.word	0x0800de7d
 800de68:	0800de85 	.word	0x0800de85
 800de6c:	0800de8d 	.word	0x0800de8d
 800de70:	0800de95 	.word	0x0800de95
 800de74:	0800de9d 	.word	0x0800de9d
 800de78:	0800dea5 	.word	0x0800dea5
 800de7c:	2300      	movs	r3, #0
 800de7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de82:	e2ba      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800de84:	2304      	movs	r3, #4
 800de86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de8a:	e2b6      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800de8c:	2308      	movs	r3, #8
 800de8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de92:	e2b2      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800de94:	2310      	movs	r3, #16
 800de96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de9a:	e2ae      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800de9c:	2320      	movs	r3, #32
 800de9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dea2:	e2aa      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800dea4:	2340      	movs	r3, #64	@ 0x40
 800dea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deaa:	e2a6      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800deac:	2380      	movs	r3, #128	@ 0x80
 800deae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deb2:	e2a2      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	4a35      	ldr	r2, [pc, #212]	@ (800df90 <UART_SetConfig+0x344>)
 800deba:	4293      	cmp	r3, r2
 800debc:	d130      	bne.n	800df20 <UART_SetConfig+0x2d4>
 800debe:	4b31      	ldr	r3, [pc, #196]	@ (800df84 <UART_SetConfig+0x338>)
 800dec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dec2:	f003 0307 	and.w	r3, r3, #7
 800dec6:	2b05      	cmp	r3, #5
 800dec8:	d826      	bhi.n	800df18 <UART_SetConfig+0x2cc>
 800deca:	a201      	add	r2, pc, #4	@ (adr r2, 800ded0 <UART_SetConfig+0x284>)
 800decc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ded0:	0800dee9 	.word	0x0800dee9
 800ded4:	0800def1 	.word	0x0800def1
 800ded8:	0800def9 	.word	0x0800def9
 800dedc:	0800df01 	.word	0x0800df01
 800dee0:	0800df09 	.word	0x0800df09
 800dee4:	0800df11 	.word	0x0800df11
 800dee8:	2300      	movs	r3, #0
 800deea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deee:	e284      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800def0:	2304      	movs	r3, #4
 800def2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800def6:	e280      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800def8:	2308      	movs	r3, #8
 800defa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800defe:	e27c      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800df00:	2310      	movs	r3, #16
 800df02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df06:	e278      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800df08:	2320      	movs	r3, #32
 800df0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df0e:	e274      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800df10:	2340      	movs	r3, #64	@ 0x40
 800df12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df16:	e270      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800df18:	2380      	movs	r3, #128	@ 0x80
 800df1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df1e:	e26c      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4a1b      	ldr	r2, [pc, #108]	@ (800df94 <UART_SetConfig+0x348>)
 800df26:	4293      	cmp	r3, r2
 800df28:	d142      	bne.n	800dfb0 <UART_SetConfig+0x364>
 800df2a:	4b16      	ldr	r3, [pc, #88]	@ (800df84 <UART_SetConfig+0x338>)
 800df2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df2e:	f003 0307 	and.w	r3, r3, #7
 800df32:	2b05      	cmp	r3, #5
 800df34:	d838      	bhi.n	800dfa8 <UART_SetConfig+0x35c>
 800df36:	a201      	add	r2, pc, #4	@ (adr r2, 800df3c <UART_SetConfig+0x2f0>)
 800df38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df3c:	0800df55 	.word	0x0800df55
 800df40:	0800df5d 	.word	0x0800df5d
 800df44:	0800df65 	.word	0x0800df65
 800df48:	0800df6d 	.word	0x0800df6d
 800df4c:	0800df99 	.word	0x0800df99
 800df50:	0800dfa1 	.word	0x0800dfa1
 800df54:	2300      	movs	r3, #0
 800df56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df5a:	e24e      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800df5c:	2304      	movs	r3, #4
 800df5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df62:	e24a      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800df64:	2308      	movs	r3, #8
 800df66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df6a:	e246      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800df6c:	2310      	movs	r3, #16
 800df6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df72:	e242      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800df74:	cfff69f3 	.word	0xcfff69f3
 800df78:	58000c00 	.word	0x58000c00
 800df7c:	11fff4ff 	.word	0x11fff4ff
 800df80:	40011000 	.word	0x40011000
 800df84:	58024400 	.word	0x58024400
 800df88:	40004400 	.word	0x40004400
 800df8c:	40004800 	.word	0x40004800
 800df90:	40004c00 	.word	0x40004c00
 800df94:	40005000 	.word	0x40005000
 800df98:	2320      	movs	r3, #32
 800df9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df9e:	e22c      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800dfa0:	2340      	movs	r3, #64	@ 0x40
 800dfa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfa6:	e228      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800dfa8:	2380      	movs	r3, #128	@ 0x80
 800dfaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfae:	e224      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4ab1      	ldr	r2, [pc, #708]	@ (800e27c <UART_SetConfig+0x630>)
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d176      	bne.n	800e0a8 <UART_SetConfig+0x45c>
 800dfba:	4bb1      	ldr	r3, [pc, #708]	@ (800e280 <UART_SetConfig+0x634>)
 800dfbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dfbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dfc2:	2b28      	cmp	r3, #40	@ 0x28
 800dfc4:	d86c      	bhi.n	800e0a0 <UART_SetConfig+0x454>
 800dfc6:	a201      	add	r2, pc, #4	@ (adr r2, 800dfcc <UART_SetConfig+0x380>)
 800dfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfcc:	0800e071 	.word	0x0800e071
 800dfd0:	0800e0a1 	.word	0x0800e0a1
 800dfd4:	0800e0a1 	.word	0x0800e0a1
 800dfd8:	0800e0a1 	.word	0x0800e0a1
 800dfdc:	0800e0a1 	.word	0x0800e0a1
 800dfe0:	0800e0a1 	.word	0x0800e0a1
 800dfe4:	0800e0a1 	.word	0x0800e0a1
 800dfe8:	0800e0a1 	.word	0x0800e0a1
 800dfec:	0800e079 	.word	0x0800e079
 800dff0:	0800e0a1 	.word	0x0800e0a1
 800dff4:	0800e0a1 	.word	0x0800e0a1
 800dff8:	0800e0a1 	.word	0x0800e0a1
 800dffc:	0800e0a1 	.word	0x0800e0a1
 800e000:	0800e0a1 	.word	0x0800e0a1
 800e004:	0800e0a1 	.word	0x0800e0a1
 800e008:	0800e0a1 	.word	0x0800e0a1
 800e00c:	0800e081 	.word	0x0800e081
 800e010:	0800e0a1 	.word	0x0800e0a1
 800e014:	0800e0a1 	.word	0x0800e0a1
 800e018:	0800e0a1 	.word	0x0800e0a1
 800e01c:	0800e0a1 	.word	0x0800e0a1
 800e020:	0800e0a1 	.word	0x0800e0a1
 800e024:	0800e0a1 	.word	0x0800e0a1
 800e028:	0800e0a1 	.word	0x0800e0a1
 800e02c:	0800e089 	.word	0x0800e089
 800e030:	0800e0a1 	.word	0x0800e0a1
 800e034:	0800e0a1 	.word	0x0800e0a1
 800e038:	0800e0a1 	.word	0x0800e0a1
 800e03c:	0800e0a1 	.word	0x0800e0a1
 800e040:	0800e0a1 	.word	0x0800e0a1
 800e044:	0800e0a1 	.word	0x0800e0a1
 800e048:	0800e0a1 	.word	0x0800e0a1
 800e04c:	0800e091 	.word	0x0800e091
 800e050:	0800e0a1 	.word	0x0800e0a1
 800e054:	0800e0a1 	.word	0x0800e0a1
 800e058:	0800e0a1 	.word	0x0800e0a1
 800e05c:	0800e0a1 	.word	0x0800e0a1
 800e060:	0800e0a1 	.word	0x0800e0a1
 800e064:	0800e0a1 	.word	0x0800e0a1
 800e068:	0800e0a1 	.word	0x0800e0a1
 800e06c:	0800e099 	.word	0x0800e099
 800e070:	2301      	movs	r3, #1
 800e072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e076:	e1c0      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e078:	2304      	movs	r3, #4
 800e07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e07e:	e1bc      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e080:	2308      	movs	r3, #8
 800e082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e086:	e1b8      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e088:	2310      	movs	r3, #16
 800e08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e08e:	e1b4      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e090:	2320      	movs	r3, #32
 800e092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e096:	e1b0      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e098:	2340      	movs	r3, #64	@ 0x40
 800e09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e09e:	e1ac      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e0a0:	2380      	movs	r3, #128	@ 0x80
 800e0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0a6:	e1a8      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4a75      	ldr	r2, [pc, #468]	@ (800e284 <UART_SetConfig+0x638>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d130      	bne.n	800e114 <UART_SetConfig+0x4c8>
 800e0b2:	4b73      	ldr	r3, [pc, #460]	@ (800e280 <UART_SetConfig+0x634>)
 800e0b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e0b6:	f003 0307 	and.w	r3, r3, #7
 800e0ba:	2b05      	cmp	r3, #5
 800e0bc:	d826      	bhi.n	800e10c <UART_SetConfig+0x4c0>
 800e0be:	a201      	add	r2, pc, #4	@ (adr r2, 800e0c4 <UART_SetConfig+0x478>)
 800e0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0c4:	0800e0dd 	.word	0x0800e0dd
 800e0c8:	0800e0e5 	.word	0x0800e0e5
 800e0cc:	0800e0ed 	.word	0x0800e0ed
 800e0d0:	0800e0f5 	.word	0x0800e0f5
 800e0d4:	0800e0fd 	.word	0x0800e0fd
 800e0d8:	0800e105 	.word	0x0800e105
 800e0dc:	2300      	movs	r3, #0
 800e0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0e2:	e18a      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e0e4:	2304      	movs	r3, #4
 800e0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0ea:	e186      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e0ec:	2308      	movs	r3, #8
 800e0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0f2:	e182      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e0f4:	2310      	movs	r3, #16
 800e0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0fa:	e17e      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e0fc:	2320      	movs	r3, #32
 800e0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e102:	e17a      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e104:	2340      	movs	r3, #64	@ 0x40
 800e106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e10a:	e176      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e10c:	2380      	movs	r3, #128	@ 0x80
 800e10e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e112:	e172      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	4a5b      	ldr	r2, [pc, #364]	@ (800e288 <UART_SetConfig+0x63c>)
 800e11a:	4293      	cmp	r3, r2
 800e11c:	d130      	bne.n	800e180 <UART_SetConfig+0x534>
 800e11e:	4b58      	ldr	r3, [pc, #352]	@ (800e280 <UART_SetConfig+0x634>)
 800e120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e122:	f003 0307 	and.w	r3, r3, #7
 800e126:	2b05      	cmp	r3, #5
 800e128:	d826      	bhi.n	800e178 <UART_SetConfig+0x52c>
 800e12a:	a201      	add	r2, pc, #4	@ (adr r2, 800e130 <UART_SetConfig+0x4e4>)
 800e12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e130:	0800e149 	.word	0x0800e149
 800e134:	0800e151 	.word	0x0800e151
 800e138:	0800e159 	.word	0x0800e159
 800e13c:	0800e161 	.word	0x0800e161
 800e140:	0800e169 	.word	0x0800e169
 800e144:	0800e171 	.word	0x0800e171
 800e148:	2300      	movs	r3, #0
 800e14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e14e:	e154      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e150:	2304      	movs	r3, #4
 800e152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e156:	e150      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e158:	2308      	movs	r3, #8
 800e15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e15e:	e14c      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e160:	2310      	movs	r3, #16
 800e162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e166:	e148      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e168:	2320      	movs	r3, #32
 800e16a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e16e:	e144      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e170:	2340      	movs	r3, #64	@ 0x40
 800e172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e176:	e140      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e178:	2380      	movs	r3, #128	@ 0x80
 800e17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e17e:	e13c      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4a41      	ldr	r2, [pc, #260]	@ (800e28c <UART_SetConfig+0x640>)
 800e186:	4293      	cmp	r3, r2
 800e188:	f040 8082 	bne.w	800e290 <UART_SetConfig+0x644>
 800e18c:	4b3c      	ldr	r3, [pc, #240]	@ (800e280 <UART_SetConfig+0x634>)
 800e18e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e190:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e194:	2b28      	cmp	r3, #40	@ 0x28
 800e196:	d86d      	bhi.n	800e274 <UART_SetConfig+0x628>
 800e198:	a201      	add	r2, pc, #4	@ (adr r2, 800e1a0 <UART_SetConfig+0x554>)
 800e19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e19e:	bf00      	nop
 800e1a0:	0800e245 	.word	0x0800e245
 800e1a4:	0800e275 	.word	0x0800e275
 800e1a8:	0800e275 	.word	0x0800e275
 800e1ac:	0800e275 	.word	0x0800e275
 800e1b0:	0800e275 	.word	0x0800e275
 800e1b4:	0800e275 	.word	0x0800e275
 800e1b8:	0800e275 	.word	0x0800e275
 800e1bc:	0800e275 	.word	0x0800e275
 800e1c0:	0800e24d 	.word	0x0800e24d
 800e1c4:	0800e275 	.word	0x0800e275
 800e1c8:	0800e275 	.word	0x0800e275
 800e1cc:	0800e275 	.word	0x0800e275
 800e1d0:	0800e275 	.word	0x0800e275
 800e1d4:	0800e275 	.word	0x0800e275
 800e1d8:	0800e275 	.word	0x0800e275
 800e1dc:	0800e275 	.word	0x0800e275
 800e1e0:	0800e255 	.word	0x0800e255
 800e1e4:	0800e275 	.word	0x0800e275
 800e1e8:	0800e275 	.word	0x0800e275
 800e1ec:	0800e275 	.word	0x0800e275
 800e1f0:	0800e275 	.word	0x0800e275
 800e1f4:	0800e275 	.word	0x0800e275
 800e1f8:	0800e275 	.word	0x0800e275
 800e1fc:	0800e275 	.word	0x0800e275
 800e200:	0800e25d 	.word	0x0800e25d
 800e204:	0800e275 	.word	0x0800e275
 800e208:	0800e275 	.word	0x0800e275
 800e20c:	0800e275 	.word	0x0800e275
 800e210:	0800e275 	.word	0x0800e275
 800e214:	0800e275 	.word	0x0800e275
 800e218:	0800e275 	.word	0x0800e275
 800e21c:	0800e275 	.word	0x0800e275
 800e220:	0800e265 	.word	0x0800e265
 800e224:	0800e275 	.word	0x0800e275
 800e228:	0800e275 	.word	0x0800e275
 800e22c:	0800e275 	.word	0x0800e275
 800e230:	0800e275 	.word	0x0800e275
 800e234:	0800e275 	.word	0x0800e275
 800e238:	0800e275 	.word	0x0800e275
 800e23c:	0800e275 	.word	0x0800e275
 800e240:	0800e26d 	.word	0x0800e26d
 800e244:	2301      	movs	r3, #1
 800e246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e24a:	e0d6      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e24c:	2304      	movs	r3, #4
 800e24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e252:	e0d2      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e254:	2308      	movs	r3, #8
 800e256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e25a:	e0ce      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e25c:	2310      	movs	r3, #16
 800e25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e262:	e0ca      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e264:	2320      	movs	r3, #32
 800e266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e26a:	e0c6      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e26c:	2340      	movs	r3, #64	@ 0x40
 800e26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e272:	e0c2      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e274:	2380      	movs	r3, #128	@ 0x80
 800e276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e27a:	e0be      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e27c:	40011400 	.word	0x40011400
 800e280:	58024400 	.word	0x58024400
 800e284:	40007800 	.word	0x40007800
 800e288:	40007c00 	.word	0x40007c00
 800e28c:	40011800 	.word	0x40011800
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	4aad      	ldr	r2, [pc, #692]	@ (800e54c <UART_SetConfig+0x900>)
 800e296:	4293      	cmp	r3, r2
 800e298:	d176      	bne.n	800e388 <UART_SetConfig+0x73c>
 800e29a:	4bad      	ldr	r3, [pc, #692]	@ (800e550 <UART_SetConfig+0x904>)
 800e29c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e29e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e2a2:	2b28      	cmp	r3, #40	@ 0x28
 800e2a4:	d86c      	bhi.n	800e380 <UART_SetConfig+0x734>
 800e2a6:	a201      	add	r2, pc, #4	@ (adr r2, 800e2ac <UART_SetConfig+0x660>)
 800e2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ac:	0800e351 	.word	0x0800e351
 800e2b0:	0800e381 	.word	0x0800e381
 800e2b4:	0800e381 	.word	0x0800e381
 800e2b8:	0800e381 	.word	0x0800e381
 800e2bc:	0800e381 	.word	0x0800e381
 800e2c0:	0800e381 	.word	0x0800e381
 800e2c4:	0800e381 	.word	0x0800e381
 800e2c8:	0800e381 	.word	0x0800e381
 800e2cc:	0800e359 	.word	0x0800e359
 800e2d0:	0800e381 	.word	0x0800e381
 800e2d4:	0800e381 	.word	0x0800e381
 800e2d8:	0800e381 	.word	0x0800e381
 800e2dc:	0800e381 	.word	0x0800e381
 800e2e0:	0800e381 	.word	0x0800e381
 800e2e4:	0800e381 	.word	0x0800e381
 800e2e8:	0800e381 	.word	0x0800e381
 800e2ec:	0800e361 	.word	0x0800e361
 800e2f0:	0800e381 	.word	0x0800e381
 800e2f4:	0800e381 	.word	0x0800e381
 800e2f8:	0800e381 	.word	0x0800e381
 800e2fc:	0800e381 	.word	0x0800e381
 800e300:	0800e381 	.word	0x0800e381
 800e304:	0800e381 	.word	0x0800e381
 800e308:	0800e381 	.word	0x0800e381
 800e30c:	0800e369 	.word	0x0800e369
 800e310:	0800e381 	.word	0x0800e381
 800e314:	0800e381 	.word	0x0800e381
 800e318:	0800e381 	.word	0x0800e381
 800e31c:	0800e381 	.word	0x0800e381
 800e320:	0800e381 	.word	0x0800e381
 800e324:	0800e381 	.word	0x0800e381
 800e328:	0800e381 	.word	0x0800e381
 800e32c:	0800e371 	.word	0x0800e371
 800e330:	0800e381 	.word	0x0800e381
 800e334:	0800e381 	.word	0x0800e381
 800e338:	0800e381 	.word	0x0800e381
 800e33c:	0800e381 	.word	0x0800e381
 800e340:	0800e381 	.word	0x0800e381
 800e344:	0800e381 	.word	0x0800e381
 800e348:	0800e381 	.word	0x0800e381
 800e34c:	0800e379 	.word	0x0800e379
 800e350:	2301      	movs	r3, #1
 800e352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e356:	e050      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e358:	2304      	movs	r3, #4
 800e35a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e35e:	e04c      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e360:	2308      	movs	r3, #8
 800e362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e366:	e048      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e368:	2310      	movs	r3, #16
 800e36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e36e:	e044      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e370:	2320      	movs	r3, #32
 800e372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e376:	e040      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e378:	2340      	movs	r3, #64	@ 0x40
 800e37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e37e:	e03c      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e380:	2380      	movs	r3, #128	@ 0x80
 800e382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e386:	e038      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	4a71      	ldr	r2, [pc, #452]	@ (800e554 <UART_SetConfig+0x908>)
 800e38e:	4293      	cmp	r3, r2
 800e390:	d130      	bne.n	800e3f4 <UART_SetConfig+0x7a8>
 800e392:	4b6f      	ldr	r3, [pc, #444]	@ (800e550 <UART_SetConfig+0x904>)
 800e394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e396:	f003 0307 	and.w	r3, r3, #7
 800e39a:	2b05      	cmp	r3, #5
 800e39c:	d826      	bhi.n	800e3ec <UART_SetConfig+0x7a0>
 800e39e:	a201      	add	r2, pc, #4	@ (adr r2, 800e3a4 <UART_SetConfig+0x758>)
 800e3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3a4:	0800e3bd 	.word	0x0800e3bd
 800e3a8:	0800e3c5 	.word	0x0800e3c5
 800e3ac:	0800e3cd 	.word	0x0800e3cd
 800e3b0:	0800e3d5 	.word	0x0800e3d5
 800e3b4:	0800e3dd 	.word	0x0800e3dd
 800e3b8:	0800e3e5 	.word	0x0800e3e5
 800e3bc:	2302      	movs	r3, #2
 800e3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3c2:	e01a      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e3c4:	2304      	movs	r3, #4
 800e3c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3ca:	e016      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e3cc:	2308      	movs	r3, #8
 800e3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3d2:	e012      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e3d4:	2310      	movs	r3, #16
 800e3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3da:	e00e      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e3dc:	2320      	movs	r3, #32
 800e3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3e2:	e00a      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e3e4:	2340      	movs	r3, #64	@ 0x40
 800e3e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3ea:	e006      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e3ec:	2380      	movs	r3, #128	@ 0x80
 800e3ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e3f2:	e002      	b.n	800e3fa <UART_SetConfig+0x7ae>
 800e3f4:	2380      	movs	r3, #128	@ 0x80
 800e3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e3fa:	697b      	ldr	r3, [r7, #20]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	4a55      	ldr	r2, [pc, #340]	@ (800e554 <UART_SetConfig+0x908>)
 800e400:	4293      	cmp	r3, r2
 800e402:	f040 80f8 	bne.w	800e5f6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e406:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e40a:	2b20      	cmp	r3, #32
 800e40c:	dc46      	bgt.n	800e49c <UART_SetConfig+0x850>
 800e40e:	2b02      	cmp	r3, #2
 800e410:	db75      	blt.n	800e4fe <UART_SetConfig+0x8b2>
 800e412:	3b02      	subs	r3, #2
 800e414:	2b1e      	cmp	r3, #30
 800e416:	d872      	bhi.n	800e4fe <UART_SetConfig+0x8b2>
 800e418:	a201      	add	r2, pc, #4	@ (adr r2, 800e420 <UART_SetConfig+0x7d4>)
 800e41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e41e:	bf00      	nop
 800e420:	0800e4a3 	.word	0x0800e4a3
 800e424:	0800e4ff 	.word	0x0800e4ff
 800e428:	0800e4ab 	.word	0x0800e4ab
 800e42c:	0800e4ff 	.word	0x0800e4ff
 800e430:	0800e4ff 	.word	0x0800e4ff
 800e434:	0800e4ff 	.word	0x0800e4ff
 800e438:	0800e4bb 	.word	0x0800e4bb
 800e43c:	0800e4ff 	.word	0x0800e4ff
 800e440:	0800e4ff 	.word	0x0800e4ff
 800e444:	0800e4ff 	.word	0x0800e4ff
 800e448:	0800e4ff 	.word	0x0800e4ff
 800e44c:	0800e4ff 	.word	0x0800e4ff
 800e450:	0800e4ff 	.word	0x0800e4ff
 800e454:	0800e4ff 	.word	0x0800e4ff
 800e458:	0800e4cb 	.word	0x0800e4cb
 800e45c:	0800e4ff 	.word	0x0800e4ff
 800e460:	0800e4ff 	.word	0x0800e4ff
 800e464:	0800e4ff 	.word	0x0800e4ff
 800e468:	0800e4ff 	.word	0x0800e4ff
 800e46c:	0800e4ff 	.word	0x0800e4ff
 800e470:	0800e4ff 	.word	0x0800e4ff
 800e474:	0800e4ff 	.word	0x0800e4ff
 800e478:	0800e4ff 	.word	0x0800e4ff
 800e47c:	0800e4ff 	.word	0x0800e4ff
 800e480:	0800e4ff 	.word	0x0800e4ff
 800e484:	0800e4ff 	.word	0x0800e4ff
 800e488:	0800e4ff 	.word	0x0800e4ff
 800e48c:	0800e4ff 	.word	0x0800e4ff
 800e490:	0800e4ff 	.word	0x0800e4ff
 800e494:	0800e4ff 	.word	0x0800e4ff
 800e498:	0800e4f1 	.word	0x0800e4f1
 800e49c:	2b40      	cmp	r3, #64	@ 0x40
 800e49e:	d02a      	beq.n	800e4f6 <UART_SetConfig+0x8aa>
 800e4a0:	e02d      	b.n	800e4fe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e4a2:	f7fc fcbd 	bl	800ae20 <HAL_RCCEx_GetD3PCLK1Freq>
 800e4a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e4a8:	e02f      	b.n	800e50a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7fc fccc 	bl	800ae4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e4b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4b8:	e027      	b.n	800e50a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4ba:	f107 0318 	add.w	r3, r7, #24
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7fc fe18 	bl	800b0f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4c8:	e01f      	b.n	800e50a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e4ca:	4b21      	ldr	r3, [pc, #132]	@ (800e550 <UART_SetConfig+0x904>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	f003 0320 	and.w	r3, r3, #32
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d009      	beq.n	800e4ea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e4d6:	4b1e      	ldr	r3, [pc, #120]	@ (800e550 <UART_SetConfig+0x904>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	08db      	lsrs	r3, r3, #3
 800e4dc:	f003 0303 	and.w	r3, r3, #3
 800e4e0:	4a1d      	ldr	r2, [pc, #116]	@ (800e558 <UART_SetConfig+0x90c>)
 800e4e2:	fa22 f303 	lsr.w	r3, r2, r3
 800e4e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e4e8:	e00f      	b.n	800e50a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e4ea:	4b1b      	ldr	r3, [pc, #108]	@ (800e558 <UART_SetConfig+0x90c>)
 800e4ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4ee:	e00c      	b.n	800e50a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e4f0:	4b1a      	ldr	r3, [pc, #104]	@ (800e55c <UART_SetConfig+0x910>)
 800e4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4f4:	e009      	b.n	800e50a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e4f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4fc:	e005      	b.n	800e50a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e4fe:	2300      	movs	r3, #0
 800e500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e502:	2301      	movs	r3, #1
 800e504:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e508:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e50a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	f000 81ee 	beq.w	800e8ee <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e516:	4a12      	ldr	r2, [pc, #72]	@ (800e560 <UART_SetConfig+0x914>)
 800e518:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e51c:	461a      	mov	r2, r3
 800e51e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e520:	fbb3 f3f2 	udiv	r3, r3, r2
 800e524:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	685a      	ldr	r2, [r3, #4]
 800e52a:	4613      	mov	r3, r2
 800e52c:	005b      	lsls	r3, r3, #1
 800e52e:	4413      	add	r3, r2
 800e530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e532:	429a      	cmp	r2, r3
 800e534:	d305      	bcc.n	800e542 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	685b      	ldr	r3, [r3, #4]
 800e53a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e53c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e53e:	429a      	cmp	r2, r3
 800e540:	d910      	bls.n	800e564 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e542:	2301      	movs	r3, #1
 800e544:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e548:	e1d1      	b.n	800e8ee <UART_SetConfig+0xca2>
 800e54a:	bf00      	nop
 800e54c:	40011c00 	.word	0x40011c00
 800e550:	58024400 	.word	0x58024400
 800e554:	58000c00 	.word	0x58000c00
 800e558:	03d09000 	.word	0x03d09000
 800e55c:	003d0900 	.word	0x003d0900
 800e560:	080131a8 	.word	0x080131a8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e566:	2200      	movs	r2, #0
 800e568:	60bb      	str	r3, [r7, #8]
 800e56a:	60fa      	str	r2, [r7, #12]
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e570:	4ac0      	ldr	r2, [pc, #768]	@ (800e874 <UART_SetConfig+0xc28>)
 800e572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e576:	b29b      	uxth	r3, r3
 800e578:	2200      	movs	r2, #0
 800e57a:	603b      	str	r3, [r7, #0]
 800e57c:	607a      	str	r2, [r7, #4]
 800e57e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e582:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e586:	f7f1 fec1 	bl	800030c <__aeabi_uldivmod>
 800e58a:	4602      	mov	r2, r0
 800e58c:	460b      	mov	r3, r1
 800e58e:	4610      	mov	r0, r2
 800e590:	4619      	mov	r1, r3
 800e592:	f04f 0200 	mov.w	r2, #0
 800e596:	f04f 0300 	mov.w	r3, #0
 800e59a:	020b      	lsls	r3, r1, #8
 800e59c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e5a0:	0202      	lsls	r2, r0, #8
 800e5a2:	6979      	ldr	r1, [r7, #20]
 800e5a4:	6849      	ldr	r1, [r1, #4]
 800e5a6:	0849      	lsrs	r1, r1, #1
 800e5a8:	2000      	movs	r0, #0
 800e5aa:	460c      	mov	r4, r1
 800e5ac:	4605      	mov	r5, r0
 800e5ae:	eb12 0804 	adds.w	r8, r2, r4
 800e5b2:	eb43 0905 	adc.w	r9, r3, r5
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	469a      	mov	sl, r3
 800e5be:	4693      	mov	fp, r2
 800e5c0:	4652      	mov	r2, sl
 800e5c2:	465b      	mov	r3, fp
 800e5c4:	4640      	mov	r0, r8
 800e5c6:	4649      	mov	r1, r9
 800e5c8:	f7f1 fea0 	bl	800030c <__aeabi_uldivmod>
 800e5cc:	4602      	mov	r2, r0
 800e5ce:	460b      	mov	r3, r1
 800e5d0:	4613      	mov	r3, r2
 800e5d2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e5da:	d308      	bcc.n	800e5ee <UART_SetConfig+0x9a2>
 800e5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e5e2:	d204      	bcs.n	800e5ee <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e5ea:	60da      	str	r2, [r3, #12]
 800e5ec:	e17f      	b.n	800e8ee <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e5f4:	e17b      	b.n	800e8ee <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	69db      	ldr	r3, [r3, #28]
 800e5fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e5fe:	f040 80bd 	bne.w	800e77c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e602:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e606:	2b20      	cmp	r3, #32
 800e608:	dc48      	bgt.n	800e69c <UART_SetConfig+0xa50>
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	db7b      	blt.n	800e706 <UART_SetConfig+0xaba>
 800e60e:	2b20      	cmp	r3, #32
 800e610:	d879      	bhi.n	800e706 <UART_SetConfig+0xaba>
 800e612:	a201      	add	r2, pc, #4	@ (adr r2, 800e618 <UART_SetConfig+0x9cc>)
 800e614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e618:	0800e6a3 	.word	0x0800e6a3
 800e61c:	0800e6ab 	.word	0x0800e6ab
 800e620:	0800e707 	.word	0x0800e707
 800e624:	0800e707 	.word	0x0800e707
 800e628:	0800e6b3 	.word	0x0800e6b3
 800e62c:	0800e707 	.word	0x0800e707
 800e630:	0800e707 	.word	0x0800e707
 800e634:	0800e707 	.word	0x0800e707
 800e638:	0800e6c3 	.word	0x0800e6c3
 800e63c:	0800e707 	.word	0x0800e707
 800e640:	0800e707 	.word	0x0800e707
 800e644:	0800e707 	.word	0x0800e707
 800e648:	0800e707 	.word	0x0800e707
 800e64c:	0800e707 	.word	0x0800e707
 800e650:	0800e707 	.word	0x0800e707
 800e654:	0800e707 	.word	0x0800e707
 800e658:	0800e6d3 	.word	0x0800e6d3
 800e65c:	0800e707 	.word	0x0800e707
 800e660:	0800e707 	.word	0x0800e707
 800e664:	0800e707 	.word	0x0800e707
 800e668:	0800e707 	.word	0x0800e707
 800e66c:	0800e707 	.word	0x0800e707
 800e670:	0800e707 	.word	0x0800e707
 800e674:	0800e707 	.word	0x0800e707
 800e678:	0800e707 	.word	0x0800e707
 800e67c:	0800e707 	.word	0x0800e707
 800e680:	0800e707 	.word	0x0800e707
 800e684:	0800e707 	.word	0x0800e707
 800e688:	0800e707 	.word	0x0800e707
 800e68c:	0800e707 	.word	0x0800e707
 800e690:	0800e707 	.word	0x0800e707
 800e694:	0800e707 	.word	0x0800e707
 800e698:	0800e6f9 	.word	0x0800e6f9
 800e69c:	2b40      	cmp	r3, #64	@ 0x40
 800e69e:	d02e      	beq.n	800e6fe <UART_SetConfig+0xab2>
 800e6a0:	e031      	b.n	800e706 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e6a2:	f7fa fd1f 	bl	80090e4 <HAL_RCC_GetPCLK1Freq>
 800e6a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e6a8:	e033      	b.n	800e712 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e6aa:	f7fa fd31 	bl	8009110 <HAL_RCC_GetPCLK2Freq>
 800e6ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e6b0:	e02f      	b.n	800e712 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7fc fbc8 	bl	800ae4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e6c0:	e027      	b.n	800e712 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6c2:	f107 0318 	add.w	r3, r7, #24
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7fc fd14 	bl	800b0f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e6cc:	69fb      	ldr	r3, [r7, #28]
 800e6ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e6d0:	e01f      	b.n	800e712 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e6d2:	4b69      	ldr	r3, [pc, #420]	@ (800e878 <UART_SetConfig+0xc2c>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	f003 0320 	and.w	r3, r3, #32
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d009      	beq.n	800e6f2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e6de:	4b66      	ldr	r3, [pc, #408]	@ (800e878 <UART_SetConfig+0xc2c>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	08db      	lsrs	r3, r3, #3
 800e6e4:	f003 0303 	and.w	r3, r3, #3
 800e6e8:	4a64      	ldr	r2, [pc, #400]	@ (800e87c <UART_SetConfig+0xc30>)
 800e6ea:	fa22 f303 	lsr.w	r3, r2, r3
 800e6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e6f0:	e00f      	b.n	800e712 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e6f2:	4b62      	ldr	r3, [pc, #392]	@ (800e87c <UART_SetConfig+0xc30>)
 800e6f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e6f6:	e00c      	b.n	800e712 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e6f8:	4b61      	ldr	r3, [pc, #388]	@ (800e880 <UART_SetConfig+0xc34>)
 800e6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e6fc:	e009      	b.n	800e712 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e6fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e704:	e005      	b.n	800e712 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e706:	2300      	movs	r3, #0
 800e708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e70a:	2301      	movs	r3, #1
 800e70c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e710:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e714:	2b00      	cmp	r3, #0
 800e716:	f000 80ea 	beq.w	800e8ee <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e71e:	4a55      	ldr	r2, [pc, #340]	@ (800e874 <UART_SetConfig+0xc28>)
 800e720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e724:	461a      	mov	r2, r3
 800e726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e728:	fbb3 f3f2 	udiv	r3, r3, r2
 800e72c:	005a      	lsls	r2, r3, #1
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	685b      	ldr	r3, [r3, #4]
 800e732:	085b      	lsrs	r3, r3, #1
 800e734:	441a      	add	r2, r3
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	685b      	ldr	r3, [r3, #4]
 800e73a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e73e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e742:	2b0f      	cmp	r3, #15
 800e744:	d916      	bls.n	800e774 <UART_SetConfig+0xb28>
 800e746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e74c:	d212      	bcs.n	800e774 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e750:	b29b      	uxth	r3, r3
 800e752:	f023 030f 	bic.w	r3, r3, #15
 800e756:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e75a:	085b      	lsrs	r3, r3, #1
 800e75c:	b29b      	uxth	r3, r3
 800e75e:	f003 0307 	and.w	r3, r3, #7
 800e762:	b29a      	uxth	r2, r3
 800e764:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e766:	4313      	orrs	r3, r2
 800e768:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e770:	60da      	str	r2, [r3, #12]
 800e772:	e0bc      	b.n	800e8ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e774:	2301      	movs	r3, #1
 800e776:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e77a:	e0b8      	b.n	800e8ee <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e77c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e780:	2b20      	cmp	r3, #32
 800e782:	dc4b      	bgt.n	800e81c <UART_SetConfig+0xbd0>
 800e784:	2b00      	cmp	r3, #0
 800e786:	f2c0 8087 	blt.w	800e898 <UART_SetConfig+0xc4c>
 800e78a:	2b20      	cmp	r3, #32
 800e78c:	f200 8084 	bhi.w	800e898 <UART_SetConfig+0xc4c>
 800e790:	a201      	add	r2, pc, #4	@ (adr r2, 800e798 <UART_SetConfig+0xb4c>)
 800e792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e796:	bf00      	nop
 800e798:	0800e823 	.word	0x0800e823
 800e79c:	0800e82b 	.word	0x0800e82b
 800e7a0:	0800e899 	.word	0x0800e899
 800e7a4:	0800e899 	.word	0x0800e899
 800e7a8:	0800e833 	.word	0x0800e833
 800e7ac:	0800e899 	.word	0x0800e899
 800e7b0:	0800e899 	.word	0x0800e899
 800e7b4:	0800e899 	.word	0x0800e899
 800e7b8:	0800e843 	.word	0x0800e843
 800e7bc:	0800e899 	.word	0x0800e899
 800e7c0:	0800e899 	.word	0x0800e899
 800e7c4:	0800e899 	.word	0x0800e899
 800e7c8:	0800e899 	.word	0x0800e899
 800e7cc:	0800e899 	.word	0x0800e899
 800e7d0:	0800e899 	.word	0x0800e899
 800e7d4:	0800e899 	.word	0x0800e899
 800e7d8:	0800e853 	.word	0x0800e853
 800e7dc:	0800e899 	.word	0x0800e899
 800e7e0:	0800e899 	.word	0x0800e899
 800e7e4:	0800e899 	.word	0x0800e899
 800e7e8:	0800e899 	.word	0x0800e899
 800e7ec:	0800e899 	.word	0x0800e899
 800e7f0:	0800e899 	.word	0x0800e899
 800e7f4:	0800e899 	.word	0x0800e899
 800e7f8:	0800e899 	.word	0x0800e899
 800e7fc:	0800e899 	.word	0x0800e899
 800e800:	0800e899 	.word	0x0800e899
 800e804:	0800e899 	.word	0x0800e899
 800e808:	0800e899 	.word	0x0800e899
 800e80c:	0800e899 	.word	0x0800e899
 800e810:	0800e899 	.word	0x0800e899
 800e814:	0800e899 	.word	0x0800e899
 800e818:	0800e88b 	.word	0x0800e88b
 800e81c:	2b40      	cmp	r3, #64	@ 0x40
 800e81e:	d037      	beq.n	800e890 <UART_SetConfig+0xc44>
 800e820:	e03a      	b.n	800e898 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e822:	f7fa fc5f 	bl	80090e4 <HAL_RCC_GetPCLK1Freq>
 800e826:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e828:	e03c      	b.n	800e8a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e82a:	f7fa fc71 	bl	8009110 <HAL_RCC_GetPCLK2Freq>
 800e82e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e830:	e038      	b.n	800e8a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e836:	4618      	mov	r0, r3
 800e838:	f7fc fb08 	bl	800ae4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e840:	e030      	b.n	800e8a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e842:	f107 0318 	add.w	r3, r7, #24
 800e846:	4618      	mov	r0, r3
 800e848:	f7fc fc54 	bl	800b0f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e84c:	69fb      	ldr	r3, [r7, #28]
 800e84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e850:	e028      	b.n	800e8a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e852:	4b09      	ldr	r3, [pc, #36]	@ (800e878 <UART_SetConfig+0xc2c>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f003 0320 	and.w	r3, r3, #32
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d012      	beq.n	800e884 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e85e:	4b06      	ldr	r3, [pc, #24]	@ (800e878 <UART_SetConfig+0xc2c>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	08db      	lsrs	r3, r3, #3
 800e864:	f003 0303 	and.w	r3, r3, #3
 800e868:	4a04      	ldr	r2, [pc, #16]	@ (800e87c <UART_SetConfig+0xc30>)
 800e86a:	fa22 f303 	lsr.w	r3, r2, r3
 800e86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e870:	e018      	b.n	800e8a4 <UART_SetConfig+0xc58>
 800e872:	bf00      	nop
 800e874:	080131a8 	.word	0x080131a8
 800e878:	58024400 	.word	0x58024400
 800e87c:	03d09000 	.word	0x03d09000
 800e880:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e884:	4b24      	ldr	r3, [pc, #144]	@ (800e918 <UART_SetConfig+0xccc>)
 800e886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e888:	e00c      	b.n	800e8a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e88a:	4b24      	ldr	r3, [pc, #144]	@ (800e91c <UART_SetConfig+0xcd0>)
 800e88c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e88e:	e009      	b.n	800e8a4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e890:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e896:	e005      	b.n	800e8a4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e898:	2300      	movs	r3, #0
 800e89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e89c:	2301      	movs	r3, #1
 800e89e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e8a2:	bf00      	nop
    }

    if (pclk != 0U)
 800e8a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d021      	beq.n	800e8ee <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8ae:	4a1c      	ldr	r2, [pc, #112]	@ (800e920 <UART_SetConfig+0xcd4>)
 800e8b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8b4:	461a      	mov	r2, r3
 800e8b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8b8:	fbb3 f2f2 	udiv	r2, r3, r2
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	685b      	ldr	r3, [r3, #4]
 800e8c0:	085b      	lsrs	r3, r3, #1
 800e8c2:	441a      	add	r2, r3
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	685b      	ldr	r3, [r3, #4]
 800e8c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e8ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8d0:	2b0f      	cmp	r3, #15
 800e8d2:	d909      	bls.n	800e8e8 <UART_SetConfig+0xc9c>
 800e8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8da:	d205      	bcs.n	800e8e8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e8dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8de:	b29a      	uxth	r2, r3
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	60da      	str	r2, [r3, #12]
 800e8e6:	e002      	b.n	800e8ee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	2201      	movs	r2, #1
 800e8f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	2200      	movs	r2, #0
 800e902:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	2200      	movs	r2, #0
 800e908:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e90a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3748      	adds	r7, #72	@ 0x48
 800e912:	46bd      	mov	sp, r7
 800e914:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e918:	03d09000 	.word	0x03d09000
 800e91c:	003d0900 	.word	0x003d0900
 800e920:	080131a8 	.word	0x080131a8

0800e924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e930:	f003 0308 	and.w	r3, r3, #8
 800e934:	2b00      	cmp	r3, #0
 800e936:	d00a      	beq.n	800e94e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	685b      	ldr	r3, [r3, #4]
 800e93e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	430a      	orrs	r2, r1
 800e94c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e952:	f003 0301 	and.w	r3, r3, #1
 800e956:	2b00      	cmp	r3, #0
 800e958:	d00a      	beq.n	800e970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	430a      	orrs	r2, r1
 800e96e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e974:	f003 0302 	and.w	r3, r3, #2
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d00a      	beq.n	800e992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	685b      	ldr	r3, [r3, #4]
 800e982:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	430a      	orrs	r2, r1
 800e990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e996:	f003 0304 	and.w	r3, r3, #4
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d00a      	beq.n	800e9b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	430a      	orrs	r2, r1
 800e9b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9b8:	f003 0310 	and.w	r3, r3, #16
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d00a      	beq.n	800e9d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	689b      	ldr	r3, [r3, #8]
 800e9c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	430a      	orrs	r2, r1
 800e9d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9da:	f003 0320 	and.w	r3, r3, #32
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d00a      	beq.n	800e9f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	689b      	ldr	r3, [r3, #8]
 800e9e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	430a      	orrs	r2, r1
 800e9f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d01a      	beq.n	800ea3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	430a      	orrs	r2, r1
 800ea18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ea22:	d10a      	bne.n	800ea3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	430a      	orrs	r2, r1
 800ea38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d00a      	beq.n	800ea5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	685b      	ldr	r3, [r3, #4]
 800ea4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	430a      	orrs	r2, r1
 800ea5a:	605a      	str	r2, [r3, #4]
  }
}
 800ea5c:	bf00      	nop
 800ea5e:	370c      	adds	r7, #12
 800ea60:	46bd      	mov	sp, r7
 800ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea66:	4770      	bx	lr

0800ea68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b098      	sub	sp, #96	@ 0x60
 800ea6c:	af02      	add	r7, sp, #8
 800ea6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2200      	movs	r2, #0
 800ea74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ea78:	f7f3 f9ae 	bl	8001dd8 <HAL_GetTick>
 800ea7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f003 0308 	and.w	r3, r3, #8
 800ea88:	2b08      	cmp	r3, #8
 800ea8a:	d12f      	bne.n	800eaec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ea8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ea90:	9300      	str	r3, [sp, #0]
 800ea92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea94:	2200      	movs	r2, #0
 800ea96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ea9a:	6878      	ldr	r0, [r7, #4]
 800ea9c:	f000 f88e 	bl	800ebbc <UART_WaitOnFlagUntilTimeout>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d022      	beq.n	800eaec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaae:	e853 3f00 	ldrex	r3, [r3]
 800eab2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800eab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eab6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eaba:	653b      	str	r3, [r7, #80]	@ 0x50
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	461a      	mov	r2, r3
 800eac2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eac4:	647b      	str	r3, [r7, #68]	@ 0x44
 800eac6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eac8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eaca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eacc:	e841 2300 	strex	r3, r2, [r1]
 800ead0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ead2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d1e6      	bne.n	800eaa6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2220      	movs	r2, #32
 800eadc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2200      	movs	r2, #0
 800eae4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eae8:	2303      	movs	r3, #3
 800eaea:	e063      	b.n	800ebb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	f003 0304 	and.w	r3, r3, #4
 800eaf6:	2b04      	cmp	r3, #4
 800eaf8:	d149      	bne.n	800eb8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eafa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800eafe:	9300      	str	r3, [sp, #0]
 800eb00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb02:	2200      	movs	r2, #0
 800eb04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f000 f857 	bl	800ebbc <UART_WaitOnFlagUntilTimeout>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d03c      	beq.n	800eb8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb1c:	e853 3f00 	ldrex	r3, [r3]
 800eb20:	623b      	str	r3, [r7, #32]
   return(result);
 800eb22:	6a3b      	ldr	r3, [r7, #32]
 800eb24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eb28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	461a      	mov	r2, r3
 800eb30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb32:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eb38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eb3a:	e841 2300 	strex	r3, r2, [r1]
 800eb3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800eb40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d1e6      	bne.n	800eb14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	3308      	adds	r3, #8
 800eb4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb4e:	693b      	ldr	r3, [r7, #16]
 800eb50:	e853 3f00 	ldrex	r3, [r3]
 800eb54:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	f023 0301 	bic.w	r3, r3, #1
 800eb5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	3308      	adds	r3, #8
 800eb64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eb66:	61fa      	str	r2, [r7, #28]
 800eb68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb6a:	69b9      	ldr	r1, [r7, #24]
 800eb6c:	69fa      	ldr	r2, [r7, #28]
 800eb6e:	e841 2300 	strex	r3, r2, [r1]
 800eb72:	617b      	str	r3, [r7, #20]
   return(result);
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d1e5      	bne.n	800eb46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2220      	movs	r2, #32
 800eb7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2200      	movs	r2, #0
 800eb86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb8a:	2303      	movs	r3, #3
 800eb8c:	e012      	b.n	800ebb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2220      	movs	r2, #32
 800eb92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2220      	movs	r2, #32
 800eb9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2200      	movs	r2, #0
 800eba2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2200      	movs	r2, #0
 800eba8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2200      	movs	r2, #0
 800ebae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ebb2:	2300      	movs	r3, #0
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3758      	adds	r7, #88	@ 0x58
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}

0800ebbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b084      	sub	sp, #16
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	60f8      	str	r0, [r7, #12]
 800ebc4:	60b9      	str	r1, [r7, #8]
 800ebc6:	603b      	str	r3, [r7, #0]
 800ebc8:	4613      	mov	r3, r2
 800ebca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ebcc:	e04f      	b.n	800ec6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ebce:	69bb      	ldr	r3, [r7, #24]
 800ebd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebd4:	d04b      	beq.n	800ec6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ebd6:	f7f3 f8ff 	bl	8001dd8 <HAL_GetTick>
 800ebda:	4602      	mov	r2, r0
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	1ad3      	subs	r3, r2, r3
 800ebe0:	69ba      	ldr	r2, [r7, #24]
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	d302      	bcc.n	800ebec <UART_WaitOnFlagUntilTimeout+0x30>
 800ebe6:	69bb      	ldr	r3, [r7, #24]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d101      	bne.n	800ebf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ebec:	2303      	movs	r3, #3
 800ebee:	e04e      	b.n	800ec8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	f003 0304 	and.w	r3, r3, #4
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d037      	beq.n	800ec6e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	2b80      	cmp	r3, #128	@ 0x80
 800ec02:	d034      	beq.n	800ec6e <UART_WaitOnFlagUntilTimeout+0xb2>
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	2b40      	cmp	r3, #64	@ 0x40
 800ec08:	d031      	beq.n	800ec6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	69db      	ldr	r3, [r3, #28]
 800ec10:	f003 0308 	and.w	r3, r3, #8
 800ec14:	2b08      	cmp	r3, #8
 800ec16:	d110      	bne.n	800ec3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	2208      	movs	r2, #8
 800ec1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ec20:	68f8      	ldr	r0, [r7, #12]
 800ec22:	f000 f839 	bl	800ec98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	2208      	movs	r2, #8
 800ec2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2200      	movs	r2, #0
 800ec32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ec36:	2301      	movs	r3, #1
 800ec38:	e029      	b.n	800ec8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	69db      	ldr	r3, [r3, #28]
 800ec40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ec44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ec48:	d111      	bne.n	800ec6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ec52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ec54:	68f8      	ldr	r0, [r7, #12]
 800ec56:	f000 f81f 	bl	800ec98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	2220      	movs	r2, #32
 800ec5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2200      	movs	r2, #0
 800ec66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ec6a:	2303      	movs	r3, #3
 800ec6c:	e00f      	b.n	800ec8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	69da      	ldr	r2, [r3, #28]
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	4013      	ands	r3, r2
 800ec78:	68ba      	ldr	r2, [r7, #8]
 800ec7a:	429a      	cmp	r2, r3
 800ec7c:	bf0c      	ite	eq
 800ec7e:	2301      	moveq	r3, #1
 800ec80:	2300      	movne	r3, #0
 800ec82:	b2db      	uxtb	r3, r3
 800ec84:	461a      	mov	r2, r3
 800ec86:	79fb      	ldrb	r3, [r7, #7]
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d0a0      	beq.n	800ebce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ec8c:	2300      	movs	r3, #0
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3710      	adds	r7, #16
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
	...

0800ec98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b095      	sub	sp, #84	@ 0x54
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eca8:	e853 3f00 	ldrex	r3, [r3]
 800ecac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ecae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ecb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	461a      	mov	r2, r3
 800ecbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ecbe:	643b      	str	r3, [r7, #64]	@ 0x40
 800ecc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecc2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ecc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ecc6:	e841 2300 	strex	r3, r2, [r1]
 800ecca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d1e6      	bne.n	800eca0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	3308      	adds	r3, #8
 800ecd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecda:	6a3b      	ldr	r3, [r7, #32]
 800ecdc:	e853 3f00 	ldrex	r3, [r3]
 800ece0:	61fb      	str	r3, [r7, #28]
   return(result);
 800ece2:	69fa      	ldr	r2, [r7, #28]
 800ece4:	4b1e      	ldr	r3, [pc, #120]	@ (800ed60 <UART_EndRxTransfer+0xc8>)
 800ece6:	4013      	ands	r3, r2
 800ece8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	3308      	adds	r3, #8
 800ecf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ecf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ecf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecf6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ecf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ecfa:	e841 2300 	strex	r3, r2, [r1]
 800ecfe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ed00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d1e5      	bne.n	800ecd2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed0a:	2b01      	cmp	r3, #1
 800ed0c:	d118      	bne.n	800ed40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	e853 3f00 	ldrex	r3, [r3]
 800ed1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	f023 0310 	bic.w	r3, r3, #16
 800ed22:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	461a      	mov	r2, r3
 800ed2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed2c:	61bb      	str	r3, [r7, #24]
 800ed2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed30:	6979      	ldr	r1, [r7, #20]
 800ed32:	69ba      	ldr	r2, [r7, #24]
 800ed34:	e841 2300 	strex	r3, r2, [r1]
 800ed38:	613b      	str	r3, [r7, #16]
   return(result);
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d1e6      	bne.n	800ed0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2220      	movs	r2, #32
 800ed44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2200      	movs	r2, #0
 800ed52:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ed54:	bf00      	nop
 800ed56:	3754      	adds	r7, #84	@ 0x54
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5e:	4770      	bx	lr
 800ed60:	effffffe 	.word	0xeffffffe

0800ed64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b084      	sub	sp, #16
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	2200      	movs	r2, #0
 800ed76:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	f7fe ff50 	bl	800dc20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed80:	bf00      	nop
 800ed82:	3710      	adds	r7, #16
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b088      	sub	sp, #32
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	e853 3f00 	ldrex	r3, [r3]
 800ed9c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eda4:	61fb      	str	r3, [r7, #28]
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	461a      	mov	r2, r3
 800edac:	69fb      	ldr	r3, [r7, #28]
 800edae:	61bb      	str	r3, [r7, #24]
 800edb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edb2:	6979      	ldr	r1, [r7, #20]
 800edb4:	69ba      	ldr	r2, [r7, #24]
 800edb6:	e841 2300 	strex	r3, r2, [r1]
 800edba:	613b      	str	r3, [r7, #16]
   return(result);
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d1e6      	bne.n	800ed90 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2220      	movs	r2, #32
 800edc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2200      	movs	r2, #0
 800edce:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f7fe ff1b 	bl	800dc0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800edd6:	bf00      	nop
 800edd8:	3720      	adds	r7, #32
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}

0800edde <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800edde:	b480      	push	{r7}
 800ede0:	b083      	sub	sp, #12
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ede6:	bf00      	nop
 800ede8:	370c      	adds	r7, #12
 800edea:	46bd      	mov	sp, r7
 800edec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf0:	4770      	bx	lr

0800edf2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800edf2:	b480      	push	{r7}
 800edf4:	b083      	sub	sp, #12
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800edfa:	bf00      	nop
 800edfc:	370c      	adds	r7, #12
 800edfe:	46bd      	mov	sp, r7
 800ee00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee04:	4770      	bx	lr

0800ee06 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ee06:	b480      	push	{r7}
 800ee08:	b083      	sub	sp, #12
 800ee0a:	af00      	add	r7, sp, #0
 800ee0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ee0e:	bf00      	nop
 800ee10:	370c      	adds	r7, #12
 800ee12:	46bd      	mov	sp, r7
 800ee14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee18:	4770      	bx	lr

0800ee1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ee1a:	b480      	push	{r7}
 800ee1c:	b085      	sub	sp, #20
 800ee1e:	af00      	add	r7, sp, #0
 800ee20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ee28:	2b01      	cmp	r3, #1
 800ee2a:	d101      	bne.n	800ee30 <HAL_UARTEx_DisableFifoMode+0x16>
 800ee2c:	2302      	movs	r3, #2
 800ee2e:	e027      	b.n	800ee80 <HAL_UARTEx_DisableFifoMode+0x66>
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2201      	movs	r2, #1
 800ee34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2224      	movs	r2, #36	@ 0x24
 800ee3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	681a      	ldr	r2, [r3, #0]
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	f022 0201 	bic.w	r2, r2, #1
 800ee56:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ee5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2200      	movs	r2, #0
 800ee64:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	68fa      	ldr	r2, [r7, #12]
 800ee6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2220      	movs	r2, #32
 800ee72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ee7e:	2300      	movs	r3, #0
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3714      	adds	r7, #20
 800ee84:	46bd      	mov	sp, r7
 800ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8a:	4770      	bx	lr

0800ee8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b084      	sub	sp, #16
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	d101      	bne.n	800eea4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eea0:	2302      	movs	r3, #2
 800eea2:	e02d      	b.n	800ef00 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2201      	movs	r2, #1
 800eea8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2224      	movs	r2, #36	@ 0x24
 800eeb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	681a      	ldr	r2, [r3, #0]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	f022 0201 	bic.w	r2, r2, #1
 800eeca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	689b      	ldr	r3, [r3, #8]
 800eed2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	683a      	ldr	r2, [r7, #0]
 800eedc:	430a      	orrs	r2, r1
 800eede:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f000 f84f 	bl	800ef84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	68fa      	ldr	r2, [r7, #12]
 800eeec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2220      	movs	r2, #32
 800eef2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2200      	movs	r2, #0
 800eefa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800eefe:	2300      	movs	r3, #0
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3710      	adds	r7, #16
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}

0800ef08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b084      	sub	sp, #16
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ef18:	2b01      	cmp	r3, #1
 800ef1a:	d101      	bne.n	800ef20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ef1c:	2302      	movs	r3, #2
 800ef1e:	e02d      	b.n	800ef7c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2201      	movs	r2, #1
 800ef24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2224      	movs	r2, #36	@ 0x24
 800ef2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	681a      	ldr	r2, [r3, #0]
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	f022 0201 	bic.w	r2, r2, #1
 800ef46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	689b      	ldr	r3, [r3, #8]
 800ef4e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	683a      	ldr	r2, [r7, #0]
 800ef58:	430a      	orrs	r2, r1
 800ef5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f000 f811 	bl	800ef84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	68fa      	ldr	r2, [r7, #12]
 800ef68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2220      	movs	r2, #32
 800ef6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2200      	movs	r2, #0
 800ef76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ef7a:	2300      	movs	r3, #0
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3710      	adds	r7, #16
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}

0800ef84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ef84:	b480      	push	{r7}
 800ef86:	b085      	sub	sp, #20
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d108      	bne.n	800efa6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2201      	movs	r2, #1
 800ef98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2201      	movs	r2, #1
 800efa0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800efa4:	e031      	b.n	800f00a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800efa6:	2310      	movs	r3, #16
 800efa8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800efaa:	2310      	movs	r3, #16
 800efac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	689b      	ldr	r3, [r3, #8]
 800efb4:	0e5b      	lsrs	r3, r3, #25
 800efb6:	b2db      	uxtb	r3, r3
 800efb8:	f003 0307 	and.w	r3, r3, #7
 800efbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	689b      	ldr	r3, [r3, #8]
 800efc4:	0f5b      	lsrs	r3, r3, #29
 800efc6:	b2db      	uxtb	r3, r3
 800efc8:	f003 0307 	and.w	r3, r3, #7
 800efcc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800efce:	7bbb      	ldrb	r3, [r7, #14]
 800efd0:	7b3a      	ldrb	r2, [r7, #12]
 800efd2:	4911      	ldr	r1, [pc, #68]	@ (800f018 <UARTEx_SetNbDataToProcess+0x94>)
 800efd4:	5c8a      	ldrb	r2, [r1, r2]
 800efd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800efda:	7b3a      	ldrb	r2, [r7, #12]
 800efdc:	490f      	ldr	r1, [pc, #60]	@ (800f01c <UARTEx_SetNbDataToProcess+0x98>)
 800efde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800efe0:	fb93 f3f2 	sdiv	r3, r3, r2
 800efe4:	b29a      	uxth	r2, r3
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800efec:	7bfb      	ldrb	r3, [r7, #15]
 800efee:	7b7a      	ldrb	r2, [r7, #13]
 800eff0:	4909      	ldr	r1, [pc, #36]	@ (800f018 <UARTEx_SetNbDataToProcess+0x94>)
 800eff2:	5c8a      	ldrb	r2, [r1, r2]
 800eff4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800eff8:	7b7a      	ldrb	r2, [r7, #13]
 800effa:	4908      	ldr	r1, [pc, #32]	@ (800f01c <UARTEx_SetNbDataToProcess+0x98>)
 800effc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800effe:	fb93 f3f2 	sdiv	r3, r3, r2
 800f002:	b29a      	uxth	r2, r3
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f00a:	bf00      	nop
 800f00c:	3714      	adds	r7, #20
 800f00e:	46bd      	mov	sp, r7
 800f010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f014:	4770      	bx	lr
 800f016:	bf00      	nop
 800f018:	080131c0 	.word	0x080131c0
 800f01c:	080131c8 	.word	0x080131c8

0800f020 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f020:	b084      	sub	sp, #16
 800f022:	b580      	push	{r7, lr}
 800f024:	b084      	sub	sp, #16
 800f026:	af00      	add	r7, sp, #0
 800f028:	6078      	str	r0, [r7, #4]
 800f02a:	f107 001c 	add.w	r0, r7, #28
 800f02e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f032:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f036:	2b01      	cmp	r3, #1
 800f038:	d121      	bne.n	800f07e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f03e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	68da      	ldr	r2, [r3, #12]
 800f04a:	4b2c      	ldr	r3, [pc, #176]	@ (800f0fc <USB_CoreInit+0xdc>)
 800f04c:	4013      	ands	r3, r2
 800f04e:	687a      	ldr	r2, [r7, #4]
 800f050:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	68db      	ldr	r3, [r3, #12]
 800f056:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f05e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f062:	2b01      	cmp	r3, #1
 800f064:	d105      	bne.n	800f072 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	68db      	ldr	r3, [r3, #12]
 800f06a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f001 fafa 	bl	801066c <USB_CoreReset>
 800f078:	4603      	mov	r3, r0
 800f07a:	73fb      	strb	r3, [r7, #15]
 800f07c:	e01b      	b.n	800f0b6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	68db      	ldr	r3, [r3, #12]
 800f082:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f001 faee 	bl	801066c <USB_CoreReset>
 800f090:	4603      	mov	r3, r0
 800f092:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f094:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d106      	bne.n	800f0aa <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	639a      	str	r2, [r3, #56]	@ 0x38
 800f0a8:	e005      	b.n	800f0b6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f0b6:	7fbb      	ldrb	r3, [r7, #30]
 800f0b8:	2b01      	cmp	r3, #1
 800f0ba:	d116      	bne.n	800f0ea <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f0c0:	b29a      	uxth	r2, r3
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f0ca:	4b0d      	ldr	r3, [pc, #52]	@ (800f100 <USB_CoreInit+0xe0>)
 800f0cc:	4313      	orrs	r3, r2
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	689b      	ldr	r3, [r3, #8]
 800f0d6:	f043 0206 	orr.w	r2, r3, #6
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	689b      	ldr	r3, [r3, #8]
 800f0e2:	f043 0220 	orr.w	r2, r3, #32
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3710      	adds	r7, #16
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f0f6:	b004      	add	sp, #16
 800f0f8:	4770      	bx	lr
 800f0fa:	bf00      	nop
 800f0fc:	ffbdffbf 	.word	0xffbdffbf
 800f100:	03ee0000 	.word	0x03ee0000

0800f104 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f104:	b480      	push	{r7}
 800f106:	b087      	sub	sp, #28
 800f108:	af00      	add	r7, sp, #0
 800f10a:	60f8      	str	r0, [r7, #12]
 800f10c:	60b9      	str	r1, [r7, #8]
 800f10e:	4613      	mov	r3, r2
 800f110:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f112:	79fb      	ldrb	r3, [r7, #7]
 800f114:	2b02      	cmp	r3, #2
 800f116:	d165      	bne.n	800f1e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	4a41      	ldr	r2, [pc, #260]	@ (800f220 <USB_SetTurnaroundTime+0x11c>)
 800f11c:	4293      	cmp	r3, r2
 800f11e:	d906      	bls.n	800f12e <USB_SetTurnaroundTime+0x2a>
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	4a40      	ldr	r2, [pc, #256]	@ (800f224 <USB_SetTurnaroundTime+0x120>)
 800f124:	4293      	cmp	r3, r2
 800f126:	d202      	bcs.n	800f12e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f128:	230f      	movs	r3, #15
 800f12a:	617b      	str	r3, [r7, #20]
 800f12c:	e062      	b.n	800f1f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	4a3c      	ldr	r2, [pc, #240]	@ (800f224 <USB_SetTurnaroundTime+0x120>)
 800f132:	4293      	cmp	r3, r2
 800f134:	d306      	bcc.n	800f144 <USB_SetTurnaroundTime+0x40>
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	4a3b      	ldr	r2, [pc, #236]	@ (800f228 <USB_SetTurnaroundTime+0x124>)
 800f13a:	4293      	cmp	r3, r2
 800f13c:	d202      	bcs.n	800f144 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f13e:	230e      	movs	r3, #14
 800f140:	617b      	str	r3, [r7, #20]
 800f142:	e057      	b.n	800f1f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	4a38      	ldr	r2, [pc, #224]	@ (800f228 <USB_SetTurnaroundTime+0x124>)
 800f148:	4293      	cmp	r3, r2
 800f14a:	d306      	bcc.n	800f15a <USB_SetTurnaroundTime+0x56>
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	4a37      	ldr	r2, [pc, #220]	@ (800f22c <USB_SetTurnaroundTime+0x128>)
 800f150:	4293      	cmp	r3, r2
 800f152:	d202      	bcs.n	800f15a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f154:	230d      	movs	r3, #13
 800f156:	617b      	str	r3, [r7, #20]
 800f158:	e04c      	b.n	800f1f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	4a33      	ldr	r2, [pc, #204]	@ (800f22c <USB_SetTurnaroundTime+0x128>)
 800f15e:	4293      	cmp	r3, r2
 800f160:	d306      	bcc.n	800f170 <USB_SetTurnaroundTime+0x6c>
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	4a32      	ldr	r2, [pc, #200]	@ (800f230 <USB_SetTurnaroundTime+0x12c>)
 800f166:	4293      	cmp	r3, r2
 800f168:	d802      	bhi.n	800f170 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f16a:	230c      	movs	r3, #12
 800f16c:	617b      	str	r3, [r7, #20]
 800f16e:	e041      	b.n	800f1f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	4a2f      	ldr	r2, [pc, #188]	@ (800f230 <USB_SetTurnaroundTime+0x12c>)
 800f174:	4293      	cmp	r3, r2
 800f176:	d906      	bls.n	800f186 <USB_SetTurnaroundTime+0x82>
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	4a2e      	ldr	r2, [pc, #184]	@ (800f234 <USB_SetTurnaroundTime+0x130>)
 800f17c:	4293      	cmp	r3, r2
 800f17e:	d802      	bhi.n	800f186 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f180:	230b      	movs	r3, #11
 800f182:	617b      	str	r3, [r7, #20]
 800f184:	e036      	b.n	800f1f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	4a2a      	ldr	r2, [pc, #168]	@ (800f234 <USB_SetTurnaroundTime+0x130>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d906      	bls.n	800f19c <USB_SetTurnaroundTime+0x98>
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	4a29      	ldr	r2, [pc, #164]	@ (800f238 <USB_SetTurnaroundTime+0x134>)
 800f192:	4293      	cmp	r3, r2
 800f194:	d802      	bhi.n	800f19c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f196:	230a      	movs	r3, #10
 800f198:	617b      	str	r3, [r7, #20]
 800f19a:	e02b      	b.n	800f1f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	4a26      	ldr	r2, [pc, #152]	@ (800f238 <USB_SetTurnaroundTime+0x134>)
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	d906      	bls.n	800f1b2 <USB_SetTurnaroundTime+0xae>
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	4a25      	ldr	r2, [pc, #148]	@ (800f23c <USB_SetTurnaroundTime+0x138>)
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d202      	bcs.n	800f1b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f1ac:	2309      	movs	r3, #9
 800f1ae:	617b      	str	r3, [r7, #20]
 800f1b0:	e020      	b.n	800f1f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	4a21      	ldr	r2, [pc, #132]	@ (800f23c <USB_SetTurnaroundTime+0x138>)
 800f1b6:	4293      	cmp	r3, r2
 800f1b8:	d306      	bcc.n	800f1c8 <USB_SetTurnaroundTime+0xc4>
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	4a20      	ldr	r2, [pc, #128]	@ (800f240 <USB_SetTurnaroundTime+0x13c>)
 800f1be:	4293      	cmp	r3, r2
 800f1c0:	d802      	bhi.n	800f1c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f1c2:	2308      	movs	r3, #8
 800f1c4:	617b      	str	r3, [r7, #20]
 800f1c6:	e015      	b.n	800f1f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	4a1d      	ldr	r2, [pc, #116]	@ (800f240 <USB_SetTurnaroundTime+0x13c>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d906      	bls.n	800f1de <USB_SetTurnaroundTime+0xda>
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	4a1c      	ldr	r2, [pc, #112]	@ (800f244 <USB_SetTurnaroundTime+0x140>)
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d202      	bcs.n	800f1de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f1d8:	2307      	movs	r3, #7
 800f1da:	617b      	str	r3, [r7, #20]
 800f1dc:	e00a      	b.n	800f1f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f1de:	2306      	movs	r3, #6
 800f1e0:	617b      	str	r3, [r7, #20]
 800f1e2:	e007      	b.n	800f1f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f1e4:	79fb      	ldrb	r3, [r7, #7]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d102      	bne.n	800f1f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f1ea:	2309      	movs	r3, #9
 800f1ec:	617b      	str	r3, [r7, #20]
 800f1ee:	e001      	b.n	800f1f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f1f0:	2309      	movs	r3, #9
 800f1f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	68db      	ldr	r3, [r3, #12]
 800f1f8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	68da      	ldr	r2, [r3, #12]
 800f204:	697b      	ldr	r3, [r7, #20]
 800f206:	029b      	lsls	r3, r3, #10
 800f208:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800f20c:	431a      	orrs	r2, r3
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f212:	2300      	movs	r3, #0
}
 800f214:	4618      	mov	r0, r3
 800f216:	371c      	adds	r7, #28
 800f218:	46bd      	mov	sp, r7
 800f21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21e:	4770      	bx	lr
 800f220:	00d8acbf 	.word	0x00d8acbf
 800f224:	00e4e1c0 	.word	0x00e4e1c0
 800f228:	00f42400 	.word	0x00f42400
 800f22c:	01067380 	.word	0x01067380
 800f230:	011a499f 	.word	0x011a499f
 800f234:	01312cff 	.word	0x01312cff
 800f238:	014ca43f 	.word	0x014ca43f
 800f23c:	016e3600 	.word	0x016e3600
 800f240:	01a6ab1f 	.word	0x01a6ab1f
 800f244:	01e84800 	.word	0x01e84800

0800f248 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f248:	b480      	push	{r7}
 800f24a:	b083      	sub	sp, #12
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	689b      	ldr	r3, [r3, #8]
 800f254:	f043 0201 	orr.w	r2, r3, #1
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f25c:	2300      	movs	r3, #0
}
 800f25e:	4618      	mov	r0, r3
 800f260:	370c      	adds	r7, #12
 800f262:	46bd      	mov	sp, r7
 800f264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f268:	4770      	bx	lr

0800f26a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f26a:	b480      	push	{r7}
 800f26c:	b083      	sub	sp, #12
 800f26e:	af00      	add	r7, sp, #0
 800f270:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	689b      	ldr	r3, [r3, #8]
 800f276:	f023 0201 	bic.w	r2, r3, #1
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f27e:	2300      	movs	r3, #0
}
 800f280:	4618      	mov	r0, r3
 800f282:	370c      	adds	r7, #12
 800f284:	46bd      	mov	sp, r7
 800f286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28a:	4770      	bx	lr

0800f28c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b084      	sub	sp, #16
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	460b      	mov	r3, r1
 800f296:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f298:	2300      	movs	r3, #0
 800f29a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	68db      	ldr	r3, [r3, #12]
 800f2a0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f2a8:	78fb      	ldrb	r3, [r7, #3]
 800f2aa:	2b01      	cmp	r3, #1
 800f2ac:	d115      	bne.n	800f2da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	68db      	ldr	r3, [r3, #12]
 800f2b2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f2ba:	200a      	movs	r0, #10
 800f2bc:	f7f2 fd98 	bl	8001df0 <HAL_Delay>
      ms += 10U;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	330a      	adds	r3, #10
 800f2c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f001 f93f 	bl	801054a <USB_GetMode>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	2b01      	cmp	r3, #1
 800f2d0:	d01e      	beq.n	800f310 <USB_SetCurrentMode+0x84>
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	2bc7      	cmp	r3, #199	@ 0xc7
 800f2d6:	d9f0      	bls.n	800f2ba <USB_SetCurrentMode+0x2e>
 800f2d8:	e01a      	b.n	800f310 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f2da:	78fb      	ldrb	r3, [r7, #3]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d115      	bne.n	800f30c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	68db      	ldr	r3, [r3, #12]
 800f2e4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f2ec:	200a      	movs	r0, #10
 800f2ee:	f7f2 fd7f 	bl	8001df0 <HAL_Delay>
      ms += 10U;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	330a      	adds	r3, #10
 800f2f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f001 f926 	bl	801054a <USB_GetMode>
 800f2fe:	4603      	mov	r3, r0
 800f300:	2b00      	cmp	r3, #0
 800f302:	d005      	beq.n	800f310 <USB_SetCurrentMode+0x84>
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	2bc7      	cmp	r3, #199	@ 0xc7
 800f308:	d9f0      	bls.n	800f2ec <USB_SetCurrentMode+0x60>
 800f30a:	e001      	b.n	800f310 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f30c:	2301      	movs	r3, #1
 800f30e:	e005      	b.n	800f31c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	2bc8      	cmp	r3, #200	@ 0xc8
 800f314:	d101      	bne.n	800f31a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f316:	2301      	movs	r3, #1
 800f318:	e000      	b.n	800f31c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f31a:	2300      	movs	r3, #0
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	3710      	adds	r7, #16
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}

0800f324 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f324:	b084      	sub	sp, #16
 800f326:	b580      	push	{r7, lr}
 800f328:	b086      	sub	sp, #24
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	6078      	str	r0, [r7, #4]
 800f32e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800f332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f336:	2300      	movs	r3, #0
 800f338:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f33e:	2300      	movs	r3, #0
 800f340:	613b      	str	r3, [r7, #16]
 800f342:	e009      	b.n	800f358 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f344:	687a      	ldr	r2, [r7, #4]
 800f346:	693b      	ldr	r3, [r7, #16]
 800f348:	3340      	adds	r3, #64	@ 0x40
 800f34a:	009b      	lsls	r3, r3, #2
 800f34c:	4413      	add	r3, r2
 800f34e:	2200      	movs	r2, #0
 800f350:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f352:	693b      	ldr	r3, [r7, #16]
 800f354:	3301      	adds	r3, #1
 800f356:	613b      	str	r3, [r7, #16]
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	2b0e      	cmp	r3, #14
 800f35c:	d9f2      	bls.n	800f344 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f35e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f362:	2b00      	cmp	r3, #0
 800f364:	d11c      	bne.n	800f3a0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	68fa      	ldr	r2, [r7, #12]
 800f370:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f374:	f043 0302 	orr.w	r3, r3, #2
 800f378:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f37e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	601a      	str	r2, [r3, #0]
 800f39e:	e005      	b.n	800f3ac <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3a4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f3b8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800f3bc:	2b01      	cmp	r3, #1
 800f3be:	d10d      	bne.n	800f3dc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f3c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d104      	bne.n	800f3d2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f3c8:	2100      	movs	r1, #0
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f000 f968 	bl	800f6a0 <USB_SetDevSpeed>
 800f3d0:	e008      	b.n	800f3e4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f3d2:	2101      	movs	r1, #1
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f000 f963 	bl	800f6a0 <USB_SetDevSpeed>
 800f3da:	e003      	b.n	800f3e4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f3dc:	2103      	movs	r1, #3
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f000 f95e 	bl	800f6a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f3e4:	2110      	movs	r1, #16
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f000 f8fa 	bl	800f5e0 <USB_FlushTxFifo>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d001      	beq.n	800f3f6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f000 f924 	bl	800f644 <USB_FlushRxFifo>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d001      	beq.n	800f406 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800f402:	2301      	movs	r3, #1
 800f404:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f40c:	461a      	mov	r2, r3
 800f40e:	2300      	movs	r3, #0
 800f410:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f418:	461a      	mov	r2, r3
 800f41a:	2300      	movs	r3, #0
 800f41c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f424:	461a      	mov	r2, r3
 800f426:	2300      	movs	r3, #0
 800f428:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f42a:	2300      	movs	r3, #0
 800f42c:	613b      	str	r3, [r7, #16]
 800f42e:	e043      	b.n	800f4b8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f430:	693b      	ldr	r3, [r7, #16]
 800f432:	015a      	lsls	r2, r3, #5
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	4413      	add	r3, r2
 800f438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f442:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f446:	d118      	bne.n	800f47a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800f448:	693b      	ldr	r3, [r7, #16]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d10a      	bne.n	800f464 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	015a      	lsls	r2, r3, #5
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	4413      	add	r3, r2
 800f456:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f45a:	461a      	mov	r2, r3
 800f45c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f460:	6013      	str	r3, [r2, #0]
 800f462:	e013      	b.n	800f48c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	015a      	lsls	r2, r3, #5
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	4413      	add	r3, r2
 800f46c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f470:	461a      	mov	r2, r3
 800f472:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f476:	6013      	str	r3, [r2, #0]
 800f478:	e008      	b.n	800f48c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	015a      	lsls	r2, r3, #5
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	4413      	add	r3, r2
 800f482:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f486:	461a      	mov	r2, r3
 800f488:	2300      	movs	r3, #0
 800f48a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f48c:	693b      	ldr	r3, [r7, #16]
 800f48e:	015a      	lsls	r2, r3, #5
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	4413      	add	r3, r2
 800f494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f498:	461a      	mov	r2, r3
 800f49a:	2300      	movs	r3, #0
 800f49c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f49e:	693b      	ldr	r3, [r7, #16]
 800f4a0:	015a      	lsls	r2, r3, #5
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	4413      	add	r3, r2
 800f4a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f4b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	3301      	adds	r3, #1
 800f4b6:	613b      	str	r3, [r7, #16]
 800f4b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f4bc:	461a      	mov	r2, r3
 800f4be:	693b      	ldr	r3, [r7, #16]
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	d3b5      	bcc.n	800f430 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	613b      	str	r3, [r7, #16]
 800f4c8:	e043      	b.n	800f552 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f4ca:	693b      	ldr	r3, [r7, #16]
 800f4cc:	015a      	lsls	r2, r3, #5
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	4413      	add	r3, r2
 800f4d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f4dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f4e0:	d118      	bne.n	800f514 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800f4e2:	693b      	ldr	r3, [r7, #16]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d10a      	bne.n	800f4fe <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	015a      	lsls	r2, r3, #5
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	4413      	add	r3, r2
 800f4f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f4f4:	461a      	mov	r2, r3
 800f4f6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f4fa:	6013      	str	r3, [r2, #0]
 800f4fc:	e013      	b.n	800f526 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f4fe:	693b      	ldr	r3, [r7, #16]
 800f500:	015a      	lsls	r2, r3, #5
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	4413      	add	r3, r2
 800f506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f50a:	461a      	mov	r2, r3
 800f50c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f510:	6013      	str	r3, [r2, #0]
 800f512:	e008      	b.n	800f526 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f514:	693b      	ldr	r3, [r7, #16]
 800f516:	015a      	lsls	r2, r3, #5
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	4413      	add	r3, r2
 800f51c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f520:	461a      	mov	r2, r3
 800f522:	2300      	movs	r3, #0
 800f524:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f526:	693b      	ldr	r3, [r7, #16]
 800f528:	015a      	lsls	r2, r3, #5
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	4413      	add	r3, r2
 800f52e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f532:	461a      	mov	r2, r3
 800f534:	2300      	movs	r3, #0
 800f536:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	015a      	lsls	r2, r3, #5
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	4413      	add	r3, r2
 800f540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f544:	461a      	mov	r2, r3
 800f546:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f54a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	3301      	adds	r3, #1
 800f550:	613b      	str	r3, [r7, #16]
 800f552:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f556:	461a      	mov	r2, r3
 800f558:	693b      	ldr	r3, [r7, #16]
 800f55a:	4293      	cmp	r3, r2
 800f55c:	d3b5      	bcc.n	800f4ca <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f564:	691b      	ldr	r3, [r3, #16]
 800f566:	68fa      	ldr	r2, [r7, #12]
 800f568:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f56c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f570:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2200      	movs	r2, #0
 800f576:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800f57e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f580:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f584:	2b00      	cmp	r3, #0
 800f586:	d105      	bne.n	800f594 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	699b      	ldr	r3, [r3, #24]
 800f58c:	f043 0210 	orr.w	r2, r3, #16
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	699a      	ldr	r2, [r3, #24]
 800f598:	4b0f      	ldr	r3, [pc, #60]	@ (800f5d8 <USB_DevInit+0x2b4>)
 800f59a:	4313      	orrs	r3, r2
 800f59c:	687a      	ldr	r2, [r7, #4]
 800f59e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f5a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d005      	beq.n	800f5b4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	699b      	ldr	r3, [r3, #24]
 800f5ac:	f043 0208 	orr.w	r2, r3, #8
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f5b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f5b8:	2b01      	cmp	r3, #1
 800f5ba:	d105      	bne.n	800f5c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	699a      	ldr	r2, [r3, #24]
 800f5c0:	4b06      	ldr	r3, [pc, #24]	@ (800f5dc <USB_DevInit+0x2b8>)
 800f5c2:	4313      	orrs	r3, r2
 800f5c4:	687a      	ldr	r2, [r7, #4]
 800f5c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f5c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3718      	adds	r7, #24
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f5d4:	b004      	add	sp, #16
 800f5d6:	4770      	bx	lr
 800f5d8:	803c3800 	.word	0x803c3800
 800f5dc:	40000004 	.word	0x40000004

0800f5e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b085      	sub	sp, #20
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
 800f5e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f5fa:	d901      	bls.n	800f600 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f5fc:	2303      	movs	r3, #3
 800f5fe:	e01b      	b.n	800f638 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	691b      	ldr	r3, [r3, #16]
 800f604:	2b00      	cmp	r3, #0
 800f606:	daf2      	bge.n	800f5ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f608:	2300      	movs	r3, #0
 800f60a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	019b      	lsls	r3, r3, #6
 800f610:	f043 0220 	orr.w	r2, r3, #32
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	3301      	adds	r3, #1
 800f61c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f624:	d901      	bls.n	800f62a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f626:	2303      	movs	r3, #3
 800f628:	e006      	b.n	800f638 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	691b      	ldr	r3, [r3, #16]
 800f62e:	f003 0320 	and.w	r3, r3, #32
 800f632:	2b20      	cmp	r3, #32
 800f634:	d0f0      	beq.n	800f618 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f636:	2300      	movs	r3, #0
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3714      	adds	r7, #20
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr

0800f644 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f644:	b480      	push	{r7}
 800f646:	b085      	sub	sp, #20
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f64c:	2300      	movs	r3, #0
 800f64e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	3301      	adds	r3, #1
 800f654:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f65c:	d901      	bls.n	800f662 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f65e:	2303      	movs	r3, #3
 800f660:	e018      	b.n	800f694 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	691b      	ldr	r3, [r3, #16]
 800f666:	2b00      	cmp	r3, #0
 800f668:	daf2      	bge.n	800f650 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f66a:	2300      	movs	r3, #0
 800f66c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2210      	movs	r2, #16
 800f672:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	3301      	adds	r3, #1
 800f678:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f680:	d901      	bls.n	800f686 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f682:	2303      	movs	r3, #3
 800f684:	e006      	b.n	800f694 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	691b      	ldr	r3, [r3, #16]
 800f68a:	f003 0310 	and.w	r3, r3, #16
 800f68e:	2b10      	cmp	r3, #16
 800f690:	d0f0      	beq.n	800f674 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f692:	2300      	movs	r3, #0
}
 800f694:	4618      	mov	r0, r3
 800f696:	3714      	adds	r7, #20
 800f698:	46bd      	mov	sp, r7
 800f69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69e:	4770      	bx	lr

0800f6a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f6a0:	b480      	push	{r7}
 800f6a2:	b085      	sub	sp, #20
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
 800f6a8:	460b      	mov	r3, r1
 800f6aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f6b6:	681a      	ldr	r2, [r3, #0]
 800f6b8:	78fb      	ldrb	r3, [r7, #3]
 800f6ba:	68f9      	ldr	r1, [r7, #12]
 800f6bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f6c0:	4313      	orrs	r3, r2
 800f6c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f6c4:	2300      	movs	r3, #0
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3714      	adds	r7, #20
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr

0800f6d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800f6d2:	b480      	push	{r7}
 800f6d4:	b087      	sub	sp, #28
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f6de:	693b      	ldr	r3, [r7, #16]
 800f6e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f6e4:	689b      	ldr	r3, [r3, #8]
 800f6e6:	f003 0306 	and.w	r3, r3, #6
 800f6ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d102      	bne.n	800f6f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	75fb      	strb	r3, [r7, #23]
 800f6f6:	e00a      	b.n	800f70e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	2b02      	cmp	r3, #2
 800f6fc:	d002      	beq.n	800f704 <USB_GetDevSpeed+0x32>
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2b06      	cmp	r3, #6
 800f702:	d102      	bne.n	800f70a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f704:	2302      	movs	r3, #2
 800f706:	75fb      	strb	r3, [r7, #23]
 800f708:	e001      	b.n	800f70e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f70a:	230f      	movs	r3, #15
 800f70c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f70e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f710:	4618      	mov	r0, r3
 800f712:	371c      	adds	r7, #28
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr

0800f71c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f71c:	b480      	push	{r7}
 800f71e:	b085      	sub	sp, #20
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
 800f724:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	781b      	ldrb	r3, [r3, #0]
 800f72e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	785b      	ldrb	r3, [r3, #1]
 800f734:	2b01      	cmp	r3, #1
 800f736:	d139      	bne.n	800f7ac <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f73e:	69da      	ldr	r2, [r3, #28]
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	781b      	ldrb	r3, [r3, #0]
 800f744:	f003 030f 	and.w	r3, r3, #15
 800f748:	2101      	movs	r1, #1
 800f74a:	fa01 f303 	lsl.w	r3, r1, r3
 800f74e:	b29b      	uxth	r3, r3
 800f750:	68f9      	ldr	r1, [r7, #12]
 800f752:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f756:	4313      	orrs	r3, r2
 800f758:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	015a      	lsls	r2, r3, #5
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	4413      	add	r3, r2
 800f762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d153      	bne.n	800f818 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	015a      	lsls	r2, r3, #5
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	4413      	add	r3, r2
 800f778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f77c:	681a      	ldr	r2, [r3, #0]
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	689b      	ldr	r3, [r3, #8]
 800f782:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	791b      	ldrb	r3, [r3, #4]
 800f78a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f78c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	059b      	lsls	r3, r3, #22
 800f792:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f794:	431a      	orrs	r2, r3
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	0159      	lsls	r1, r3, #5
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	440b      	add	r3, r1
 800f79e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f7a2:	4619      	mov	r1, r3
 800f7a4:	4b20      	ldr	r3, [pc, #128]	@ (800f828 <USB_ActivateEndpoint+0x10c>)
 800f7a6:	4313      	orrs	r3, r2
 800f7a8:	600b      	str	r3, [r1, #0]
 800f7aa:	e035      	b.n	800f818 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f7b2:	69da      	ldr	r2, [r3, #28]
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	781b      	ldrb	r3, [r3, #0]
 800f7b8:	f003 030f 	and.w	r3, r3, #15
 800f7bc:	2101      	movs	r1, #1
 800f7be:	fa01 f303 	lsl.w	r3, r1, r3
 800f7c2:	041b      	lsls	r3, r3, #16
 800f7c4:	68f9      	ldr	r1, [r7, #12]
 800f7c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f7ca:	4313      	orrs	r3, r2
 800f7cc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	015a      	lsls	r2, r3, #5
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	4413      	add	r3, r2
 800f7d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d119      	bne.n	800f818 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	015a      	lsls	r2, r3, #5
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	4413      	add	r3, r2
 800f7ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f7f0:	681a      	ldr	r2, [r3, #0]
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	689b      	ldr	r3, [r3, #8]
 800f7f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	791b      	ldrb	r3, [r3, #4]
 800f7fe:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f800:	430b      	orrs	r3, r1
 800f802:	431a      	orrs	r2, r3
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	0159      	lsls	r1, r3, #5
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	440b      	add	r3, r1
 800f80c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f810:	4619      	mov	r1, r3
 800f812:	4b05      	ldr	r3, [pc, #20]	@ (800f828 <USB_ActivateEndpoint+0x10c>)
 800f814:	4313      	orrs	r3, r2
 800f816:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f818:	2300      	movs	r3, #0
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3714      	adds	r7, #20
 800f81e:	46bd      	mov	sp, r7
 800f820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f824:	4770      	bx	lr
 800f826:	bf00      	nop
 800f828:	10008000 	.word	0x10008000

0800f82c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f82c:	b480      	push	{r7}
 800f82e:	b085      	sub	sp, #20
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
 800f834:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	781b      	ldrb	r3, [r3, #0]
 800f83e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	785b      	ldrb	r3, [r3, #1]
 800f844:	2b01      	cmp	r3, #1
 800f846:	d161      	bne.n	800f90c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	015a      	lsls	r2, r3, #5
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	4413      	add	r3, r2
 800f850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f85a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f85e:	d11f      	bne.n	800f8a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	015a      	lsls	r2, r3, #5
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	4413      	add	r3, r2
 800f868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	68ba      	ldr	r2, [r7, #8]
 800f870:	0151      	lsls	r1, r2, #5
 800f872:	68fa      	ldr	r2, [r7, #12]
 800f874:	440a      	add	r2, r1
 800f876:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f87a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f87e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	015a      	lsls	r2, r3, #5
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	4413      	add	r3, r2
 800f888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	68ba      	ldr	r2, [r7, #8]
 800f890:	0151      	lsls	r1, r2, #5
 800f892:	68fa      	ldr	r2, [r7, #12]
 800f894:	440a      	add	r2, r1
 800f896:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f89a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f89e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f8a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	781b      	ldrb	r3, [r3, #0]
 800f8ac:	f003 030f 	and.w	r3, r3, #15
 800f8b0:	2101      	movs	r1, #1
 800f8b2:	fa01 f303 	lsl.w	r3, r1, r3
 800f8b6:	b29b      	uxth	r3, r3
 800f8b8:	43db      	mvns	r3, r3
 800f8ba:	68f9      	ldr	r1, [r7, #12]
 800f8bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f8c0:	4013      	ands	r3, r2
 800f8c2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f8ca:	69da      	ldr	r2, [r3, #28]
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	f003 030f 	and.w	r3, r3, #15
 800f8d4:	2101      	movs	r1, #1
 800f8d6:	fa01 f303 	lsl.w	r3, r1, r3
 800f8da:	b29b      	uxth	r3, r3
 800f8dc:	43db      	mvns	r3, r3
 800f8de:	68f9      	ldr	r1, [r7, #12]
 800f8e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f8e4:	4013      	ands	r3, r2
 800f8e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	015a      	lsls	r2, r3, #5
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	4413      	add	r3, r2
 800f8f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f8f4:	681a      	ldr	r2, [r3, #0]
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	0159      	lsls	r1, r3, #5
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	440b      	add	r3, r1
 800f8fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f902:	4619      	mov	r1, r3
 800f904:	4b35      	ldr	r3, [pc, #212]	@ (800f9dc <USB_DeactivateEndpoint+0x1b0>)
 800f906:	4013      	ands	r3, r2
 800f908:	600b      	str	r3, [r1, #0]
 800f90a:	e060      	b.n	800f9ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	015a      	lsls	r2, r3, #5
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	4413      	add	r3, r2
 800f914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f91e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f922:	d11f      	bne.n	800f964 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	015a      	lsls	r2, r3, #5
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	4413      	add	r3, r2
 800f92c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	68ba      	ldr	r2, [r7, #8]
 800f934:	0151      	lsls	r1, r2, #5
 800f936:	68fa      	ldr	r2, [r7, #12]
 800f938:	440a      	add	r2, r1
 800f93a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f93e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f942:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	015a      	lsls	r2, r3, #5
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	4413      	add	r3, r2
 800f94c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	68ba      	ldr	r2, [r7, #8]
 800f954:	0151      	lsls	r1, r2, #5
 800f956:	68fa      	ldr	r2, [r7, #12]
 800f958:	440a      	add	r2, r1
 800f95a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f95e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f962:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f96a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	781b      	ldrb	r3, [r3, #0]
 800f970:	f003 030f 	and.w	r3, r3, #15
 800f974:	2101      	movs	r1, #1
 800f976:	fa01 f303 	lsl.w	r3, r1, r3
 800f97a:	041b      	lsls	r3, r3, #16
 800f97c:	43db      	mvns	r3, r3
 800f97e:	68f9      	ldr	r1, [r7, #12]
 800f980:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f984:	4013      	ands	r3, r2
 800f986:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f98e:	69da      	ldr	r2, [r3, #28]
 800f990:	683b      	ldr	r3, [r7, #0]
 800f992:	781b      	ldrb	r3, [r3, #0]
 800f994:	f003 030f 	and.w	r3, r3, #15
 800f998:	2101      	movs	r1, #1
 800f99a:	fa01 f303 	lsl.w	r3, r1, r3
 800f99e:	041b      	lsls	r3, r3, #16
 800f9a0:	43db      	mvns	r3, r3
 800f9a2:	68f9      	ldr	r1, [r7, #12]
 800f9a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f9a8:	4013      	ands	r3, r2
 800f9aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	015a      	lsls	r2, r3, #5
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	4413      	add	r3, r2
 800f9b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f9b8:	681a      	ldr	r2, [r3, #0]
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	0159      	lsls	r1, r3, #5
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	440b      	add	r3, r1
 800f9c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f9c6:	4619      	mov	r1, r3
 800f9c8:	4b05      	ldr	r3, [pc, #20]	@ (800f9e0 <USB_DeactivateEndpoint+0x1b4>)
 800f9ca:	4013      	ands	r3, r2
 800f9cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f9ce:	2300      	movs	r3, #0
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3714      	adds	r7, #20
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr
 800f9dc:	ec337800 	.word	0xec337800
 800f9e0:	eff37800 	.word	0xeff37800

0800f9e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b08a      	sub	sp, #40	@ 0x28
 800f9e8:	af02      	add	r7, sp, #8
 800f9ea:	60f8      	str	r0, [r7, #12]
 800f9ec:	60b9      	str	r1, [r7, #8]
 800f9ee:	4613      	mov	r3, r2
 800f9f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	785b      	ldrb	r3, [r3, #1]
 800fa00:	2b01      	cmp	r3, #1
 800fa02:	f040 8185 	bne.w	800fd10 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	691b      	ldr	r3, [r3, #16]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d132      	bne.n	800fa74 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fa0e:	69bb      	ldr	r3, [r7, #24]
 800fa10:	015a      	lsls	r2, r3, #5
 800fa12:	69fb      	ldr	r3, [r7, #28]
 800fa14:	4413      	add	r3, r2
 800fa16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa1a:	691a      	ldr	r2, [r3, #16]
 800fa1c:	69bb      	ldr	r3, [r7, #24]
 800fa1e:	0159      	lsls	r1, r3, #5
 800fa20:	69fb      	ldr	r3, [r7, #28]
 800fa22:	440b      	add	r3, r1
 800fa24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa28:	4619      	mov	r1, r3
 800fa2a:	4ba7      	ldr	r3, [pc, #668]	@ (800fcc8 <USB_EPStartXfer+0x2e4>)
 800fa2c:	4013      	ands	r3, r2
 800fa2e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fa30:	69bb      	ldr	r3, [r7, #24]
 800fa32:	015a      	lsls	r2, r3, #5
 800fa34:	69fb      	ldr	r3, [r7, #28]
 800fa36:	4413      	add	r3, r2
 800fa38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa3c:	691b      	ldr	r3, [r3, #16]
 800fa3e:	69ba      	ldr	r2, [r7, #24]
 800fa40:	0151      	lsls	r1, r2, #5
 800fa42:	69fa      	ldr	r2, [r7, #28]
 800fa44:	440a      	add	r2, r1
 800fa46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fa4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fa4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fa50:	69bb      	ldr	r3, [r7, #24]
 800fa52:	015a      	lsls	r2, r3, #5
 800fa54:	69fb      	ldr	r3, [r7, #28]
 800fa56:	4413      	add	r3, r2
 800fa58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa5c:	691a      	ldr	r2, [r3, #16]
 800fa5e:	69bb      	ldr	r3, [r7, #24]
 800fa60:	0159      	lsls	r1, r3, #5
 800fa62:	69fb      	ldr	r3, [r7, #28]
 800fa64:	440b      	add	r3, r1
 800fa66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa6a:	4619      	mov	r1, r3
 800fa6c:	4b97      	ldr	r3, [pc, #604]	@ (800fccc <USB_EPStartXfer+0x2e8>)
 800fa6e:	4013      	ands	r3, r2
 800fa70:	610b      	str	r3, [r1, #16]
 800fa72:	e097      	b.n	800fba4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fa74:	69bb      	ldr	r3, [r7, #24]
 800fa76:	015a      	lsls	r2, r3, #5
 800fa78:	69fb      	ldr	r3, [r7, #28]
 800fa7a:	4413      	add	r3, r2
 800fa7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa80:	691a      	ldr	r2, [r3, #16]
 800fa82:	69bb      	ldr	r3, [r7, #24]
 800fa84:	0159      	lsls	r1, r3, #5
 800fa86:	69fb      	ldr	r3, [r7, #28]
 800fa88:	440b      	add	r3, r1
 800fa8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa8e:	4619      	mov	r1, r3
 800fa90:	4b8e      	ldr	r3, [pc, #568]	@ (800fccc <USB_EPStartXfer+0x2e8>)
 800fa92:	4013      	ands	r3, r2
 800fa94:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fa96:	69bb      	ldr	r3, [r7, #24]
 800fa98:	015a      	lsls	r2, r3, #5
 800fa9a:	69fb      	ldr	r3, [r7, #28]
 800fa9c:	4413      	add	r3, r2
 800fa9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800faa2:	691a      	ldr	r2, [r3, #16]
 800faa4:	69bb      	ldr	r3, [r7, #24]
 800faa6:	0159      	lsls	r1, r3, #5
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	440b      	add	r3, r1
 800faac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fab0:	4619      	mov	r1, r3
 800fab2:	4b85      	ldr	r3, [pc, #532]	@ (800fcc8 <USB_EPStartXfer+0x2e4>)
 800fab4:	4013      	ands	r3, r2
 800fab6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800fab8:	69bb      	ldr	r3, [r7, #24]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d11a      	bne.n	800faf4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	691a      	ldr	r2, [r3, #16]
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	689b      	ldr	r3, [r3, #8]
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d903      	bls.n	800fad2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	689a      	ldr	r2, [r3, #8]
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fad2:	69bb      	ldr	r3, [r7, #24]
 800fad4:	015a      	lsls	r2, r3, #5
 800fad6:	69fb      	ldr	r3, [r7, #28]
 800fad8:	4413      	add	r3, r2
 800fada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fade:	691b      	ldr	r3, [r3, #16]
 800fae0:	69ba      	ldr	r2, [r7, #24]
 800fae2:	0151      	lsls	r1, r2, #5
 800fae4:	69fa      	ldr	r2, [r7, #28]
 800fae6:	440a      	add	r2, r1
 800fae8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800faec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800faf0:	6113      	str	r3, [r2, #16]
 800faf2:	e044      	b.n	800fb7e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	691a      	ldr	r2, [r3, #16]
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	689b      	ldr	r3, [r3, #8]
 800fafc:	4413      	add	r3, r2
 800fafe:	1e5a      	subs	r2, r3, #1
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	689b      	ldr	r3, [r3, #8]
 800fb04:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb08:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800fb0a:	69bb      	ldr	r3, [r7, #24]
 800fb0c:	015a      	lsls	r2, r3, #5
 800fb0e:	69fb      	ldr	r3, [r7, #28]
 800fb10:	4413      	add	r3, r2
 800fb12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fb16:	691a      	ldr	r2, [r3, #16]
 800fb18:	8afb      	ldrh	r3, [r7, #22]
 800fb1a:	04d9      	lsls	r1, r3, #19
 800fb1c:	4b6c      	ldr	r3, [pc, #432]	@ (800fcd0 <USB_EPStartXfer+0x2ec>)
 800fb1e:	400b      	ands	r3, r1
 800fb20:	69b9      	ldr	r1, [r7, #24]
 800fb22:	0148      	lsls	r0, r1, #5
 800fb24:	69f9      	ldr	r1, [r7, #28]
 800fb26:	4401      	add	r1, r0
 800fb28:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800fb2c:	4313      	orrs	r3, r2
 800fb2e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800fb30:	68bb      	ldr	r3, [r7, #8]
 800fb32:	791b      	ldrb	r3, [r3, #4]
 800fb34:	2b01      	cmp	r3, #1
 800fb36:	d122      	bne.n	800fb7e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800fb38:	69bb      	ldr	r3, [r7, #24]
 800fb3a:	015a      	lsls	r2, r3, #5
 800fb3c:	69fb      	ldr	r3, [r7, #28]
 800fb3e:	4413      	add	r3, r2
 800fb40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fb44:	691b      	ldr	r3, [r3, #16]
 800fb46:	69ba      	ldr	r2, [r7, #24]
 800fb48:	0151      	lsls	r1, r2, #5
 800fb4a:	69fa      	ldr	r2, [r7, #28]
 800fb4c:	440a      	add	r2, r1
 800fb4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fb52:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800fb56:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800fb58:	69bb      	ldr	r3, [r7, #24]
 800fb5a:	015a      	lsls	r2, r3, #5
 800fb5c:	69fb      	ldr	r3, [r7, #28]
 800fb5e:	4413      	add	r3, r2
 800fb60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fb64:	691a      	ldr	r2, [r3, #16]
 800fb66:	8afb      	ldrh	r3, [r7, #22]
 800fb68:	075b      	lsls	r3, r3, #29
 800fb6a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800fb6e:	69b9      	ldr	r1, [r7, #24]
 800fb70:	0148      	lsls	r0, r1, #5
 800fb72:	69f9      	ldr	r1, [r7, #28]
 800fb74:	4401      	add	r1, r0
 800fb76:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800fb7a:	4313      	orrs	r3, r2
 800fb7c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fb7e:	69bb      	ldr	r3, [r7, #24]
 800fb80:	015a      	lsls	r2, r3, #5
 800fb82:	69fb      	ldr	r3, [r7, #28]
 800fb84:	4413      	add	r3, r2
 800fb86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fb8a:	691a      	ldr	r2, [r3, #16]
 800fb8c:	68bb      	ldr	r3, [r7, #8]
 800fb8e:	691b      	ldr	r3, [r3, #16]
 800fb90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb94:	69b9      	ldr	r1, [r7, #24]
 800fb96:	0148      	lsls	r0, r1, #5
 800fb98:	69f9      	ldr	r1, [r7, #28]
 800fb9a:	4401      	add	r1, r0
 800fb9c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800fba0:	4313      	orrs	r3, r2
 800fba2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fba4:	79fb      	ldrb	r3, [r7, #7]
 800fba6:	2b01      	cmp	r3, #1
 800fba8:	d14b      	bne.n	800fc42 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	69db      	ldr	r3, [r3, #28]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d009      	beq.n	800fbc6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fbb2:	69bb      	ldr	r3, [r7, #24]
 800fbb4:	015a      	lsls	r2, r3, #5
 800fbb6:	69fb      	ldr	r3, [r7, #28]
 800fbb8:	4413      	add	r3, r2
 800fbba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbbe:	461a      	mov	r2, r3
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	69db      	ldr	r3, [r3, #28]
 800fbc4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	791b      	ldrb	r3, [r3, #4]
 800fbca:	2b01      	cmp	r3, #1
 800fbcc:	d128      	bne.n	800fc20 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fbce:	69fb      	ldr	r3, [r7, #28]
 800fbd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fbd4:	689b      	ldr	r3, [r3, #8]
 800fbd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d110      	bne.n	800fc00 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fbde:	69bb      	ldr	r3, [r7, #24]
 800fbe0:	015a      	lsls	r2, r3, #5
 800fbe2:	69fb      	ldr	r3, [r7, #28]
 800fbe4:	4413      	add	r3, r2
 800fbe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	69ba      	ldr	r2, [r7, #24]
 800fbee:	0151      	lsls	r1, r2, #5
 800fbf0:	69fa      	ldr	r2, [r7, #28]
 800fbf2:	440a      	add	r2, r1
 800fbf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fbf8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fbfc:	6013      	str	r3, [r2, #0]
 800fbfe:	e00f      	b.n	800fc20 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fc00:	69bb      	ldr	r3, [r7, #24]
 800fc02:	015a      	lsls	r2, r3, #5
 800fc04:	69fb      	ldr	r3, [r7, #28]
 800fc06:	4413      	add	r3, r2
 800fc08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	69ba      	ldr	r2, [r7, #24]
 800fc10:	0151      	lsls	r1, r2, #5
 800fc12:	69fa      	ldr	r2, [r7, #28]
 800fc14:	440a      	add	r2, r1
 800fc16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fc1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fc1e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fc20:	69bb      	ldr	r3, [r7, #24]
 800fc22:	015a      	lsls	r2, r3, #5
 800fc24:	69fb      	ldr	r3, [r7, #28]
 800fc26:	4413      	add	r3, r2
 800fc28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	69ba      	ldr	r2, [r7, #24]
 800fc30:	0151      	lsls	r1, r2, #5
 800fc32:	69fa      	ldr	r2, [r7, #28]
 800fc34:	440a      	add	r2, r1
 800fc36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fc3a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800fc3e:	6013      	str	r3, [r2, #0]
 800fc40:	e169      	b.n	800ff16 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fc42:	69bb      	ldr	r3, [r7, #24]
 800fc44:	015a      	lsls	r2, r3, #5
 800fc46:	69fb      	ldr	r3, [r7, #28]
 800fc48:	4413      	add	r3, r2
 800fc4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	69ba      	ldr	r2, [r7, #24]
 800fc52:	0151      	lsls	r1, r2, #5
 800fc54:	69fa      	ldr	r2, [r7, #28]
 800fc56:	440a      	add	r2, r1
 800fc58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fc5c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800fc60:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	791b      	ldrb	r3, [r3, #4]
 800fc66:	2b01      	cmp	r3, #1
 800fc68:	d015      	beq.n	800fc96 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800fc6a:	68bb      	ldr	r3, [r7, #8]
 800fc6c:	691b      	ldr	r3, [r3, #16]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	f000 8151 	beq.w	800ff16 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fc74:	69fb      	ldr	r3, [r7, #28]
 800fc76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	781b      	ldrb	r3, [r3, #0]
 800fc80:	f003 030f 	and.w	r3, r3, #15
 800fc84:	2101      	movs	r1, #1
 800fc86:	fa01 f303 	lsl.w	r3, r1, r3
 800fc8a:	69f9      	ldr	r1, [r7, #28]
 800fc8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fc90:	4313      	orrs	r3, r2
 800fc92:	634b      	str	r3, [r1, #52]	@ 0x34
 800fc94:	e13f      	b.n	800ff16 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fc96:	69fb      	ldr	r3, [r7, #28]
 800fc98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc9c:	689b      	ldr	r3, [r3, #8]
 800fc9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d116      	bne.n	800fcd4 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fca6:	69bb      	ldr	r3, [r7, #24]
 800fca8:	015a      	lsls	r2, r3, #5
 800fcaa:	69fb      	ldr	r3, [r7, #28]
 800fcac:	4413      	add	r3, r2
 800fcae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	69ba      	ldr	r2, [r7, #24]
 800fcb6:	0151      	lsls	r1, r2, #5
 800fcb8:	69fa      	ldr	r2, [r7, #28]
 800fcba:	440a      	add	r2, r1
 800fcbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fcc0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fcc4:	6013      	str	r3, [r2, #0]
 800fcc6:	e015      	b.n	800fcf4 <USB_EPStartXfer+0x310>
 800fcc8:	e007ffff 	.word	0xe007ffff
 800fccc:	fff80000 	.word	0xfff80000
 800fcd0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fcd4:	69bb      	ldr	r3, [r7, #24]
 800fcd6:	015a      	lsls	r2, r3, #5
 800fcd8:	69fb      	ldr	r3, [r7, #28]
 800fcda:	4413      	add	r3, r2
 800fcdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	69ba      	ldr	r2, [r7, #24]
 800fce4:	0151      	lsls	r1, r2, #5
 800fce6:	69fa      	ldr	r2, [r7, #28]
 800fce8:	440a      	add	r2, r1
 800fcea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fcee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fcf2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	68d9      	ldr	r1, [r3, #12]
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	781a      	ldrb	r2, [r3, #0]
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	691b      	ldr	r3, [r3, #16]
 800fd00:	b298      	uxth	r0, r3
 800fd02:	79fb      	ldrb	r3, [r7, #7]
 800fd04:	9300      	str	r3, [sp, #0]
 800fd06:	4603      	mov	r3, r0
 800fd08:	68f8      	ldr	r0, [r7, #12]
 800fd0a:	f000 f9b9 	bl	8010080 <USB_WritePacket>
 800fd0e:	e102      	b.n	800ff16 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fd10:	69bb      	ldr	r3, [r7, #24]
 800fd12:	015a      	lsls	r2, r3, #5
 800fd14:	69fb      	ldr	r3, [r7, #28]
 800fd16:	4413      	add	r3, r2
 800fd18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd1c:	691a      	ldr	r2, [r3, #16]
 800fd1e:	69bb      	ldr	r3, [r7, #24]
 800fd20:	0159      	lsls	r1, r3, #5
 800fd22:	69fb      	ldr	r3, [r7, #28]
 800fd24:	440b      	add	r3, r1
 800fd26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd2a:	4619      	mov	r1, r3
 800fd2c:	4b7c      	ldr	r3, [pc, #496]	@ (800ff20 <USB_EPStartXfer+0x53c>)
 800fd2e:	4013      	ands	r3, r2
 800fd30:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fd32:	69bb      	ldr	r3, [r7, #24]
 800fd34:	015a      	lsls	r2, r3, #5
 800fd36:	69fb      	ldr	r3, [r7, #28]
 800fd38:	4413      	add	r3, r2
 800fd3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd3e:	691a      	ldr	r2, [r3, #16]
 800fd40:	69bb      	ldr	r3, [r7, #24]
 800fd42:	0159      	lsls	r1, r3, #5
 800fd44:	69fb      	ldr	r3, [r7, #28]
 800fd46:	440b      	add	r3, r1
 800fd48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd4c:	4619      	mov	r1, r3
 800fd4e:	4b75      	ldr	r3, [pc, #468]	@ (800ff24 <USB_EPStartXfer+0x540>)
 800fd50:	4013      	ands	r3, r2
 800fd52:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800fd54:	69bb      	ldr	r3, [r7, #24]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d12f      	bne.n	800fdba <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	691b      	ldr	r3, [r3, #16]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d003      	beq.n	800fd6a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	689a      	ldr	r2, [r3, #8]
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	689a      	ldr	r2, [r3, #8]
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800fd72:	69bb      	ldr	r3, [r7, #24]
 800fd74:	015a      	lsls	r2, r3, #5
 800fd76:	69fb      	ldr	r3, [r7, #28]
 800fd78:	4413      	add	r3, r2
 800fd7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd7e:	691a      	ldr	r2, [r3, #16]
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	6a1b      	ldr	r3, [r3, #32]
 800fd84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fd88:	69b9      	ldr	r1, [r7, #24]
 800fd8a:	0148      	lsls	r0, r1, #5
 800fd8c:	69f9      	ldr	r1, [r7, #28]
 800fd8e:	4401      	add	r1, r0
 800fd90:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800fd94:	4313      	orrs	r3, r2
 800fd96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fd98:	69bb      	ldr	r3, [r7, #24]
 800fd9a:	015a      	lsls	r2, r3, #5
 800fd9c:	69fb      	ldr	r3, [r7, #28]
 800fd9e:	4413      	add	r3, r2
 800fda0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fda4:	691b      	ldr	r3, [r3, #16]
 800fda6:	69ba      	ldr	r2, [r7, #24]
 800fda8:	0151      	lsls	r1, r2, #5
 800fdaa:	69fa      	ldr	r2, [r7, #28]
 800fdac:	440a      	add	r2, r1
 800fdae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fdb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fdb6:	6113      	str	r3, [r2, #16]
 800fdb8:	e05f      	b.n	800fe7a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	691b      	ldr	r3, [r3, #16]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d123      	bne.n	800fe0a <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800fdc2:	69bb      	ldr	r3, [r7, #24]
 800fdc4:	015a      	lsls	r2, r3, #5
 800fdc6:	69fb      	ldr	r3, [r7, #28]
 800fdc8:	4413      	add	r3, r2
 800fdca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fdce:	691a      	ldr	r2, [r3, #16]
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	689b      	ldr	r3, [r3, #8]
 800fdd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fdd8:	69b9      	ldr	r1, [r7, #24]
 800fdda:	0148      	lsls	r0, r1, #5
 800fddc:	69f9      	ldr	r1, [r7, #28]
 800fdde:	4401      	add	r1, r0
 800fde0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800fde4:	4313      	orrs	r3, r2
 800fde6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fde8:	69bb      	ldr	r3, [r7, #24]
 800fdea:	015a      	lsls	r2, r3, #5
 800fdec:	69fb      	ldr	r3, [r7, #28]
 800fdee:	4413      	add	r3, r2
 800fdf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fdf4:	691b      	ldr	r3, [r3, #16]
 800fdf6:	69ba      	ldr	r2, [r7, #24]
 800fdf8:	0151      	lsls	r1, r2, #5
 800fdfa:	69fa      	ldr	r2, [r7, #28]
 800fdfc:	440a      	add	r2, r1
 800fdfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fe02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fe06:	6113      	str	r3, [r2, #16]
 800fe08:	e037      	b.n	800fe7a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	691a      	ldr	r2, [r3, #16]
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	689b      	ldr	r3, [r3, #8]
 800fe12:	4413      	add	r3, r2
 800fe14:	1e5a      	subs	r2, r3, #1
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	689b      	ldr	r3, [r3, #8]
 800fe1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe1e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	689b      	ldr	r3, [r3, #8]
 800fe24:	8afa      	ldrh	r2, [r7, #22]
 800fe26:	fb03 f202 	mul.w	r2, r3, r2
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800fe2e:	69bb      	ldr	r3, [r7, #24]
 800fe30:	015a      	lsls	r2, r3, #5
 800fe32:	69fb      	ldr	r3, [r7, #28]
 800fe34:	4413      	add	r3, r2
 800fe36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe3a:	691a      	ldr	r2, [r3, #16]
 800fe3c:	8afb      	ldrh	r3, [r7, #22]
 800fe3e:	04d9      	lsls	r1, r3, #19
 800fe40:	4b39      	ldr	r3, [pc, #228]	@ (800ff28 <USB_EPStartXfer+0x544>)
 800fe42:	400b      	ands	r3, r1
 800fe44:	69b9      	ldr	r1, [r7, #24]
 800fe46:	0148      	lsls	r0, r1, #5
 800fe48:	69f9      	ldr	r1, [r7, #28]
 800fe4a:	4401      	add	r1, r0
 800fe4c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800fe50:	4313      	orrs	r3, r2
 800fe52:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800fe54:	69bb      	ldr	r3, [r7, #24]
 800fe56:	015a      	lsls	r2, r3, #5
 800fe58:	69fb      	ldr	r3, [r7, #28]
 800fe5a:	4413      	add	r3, r2
 800fe5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe60:	691a      	ldr	r2, [r3, #16]
 800fe62:	68bb      	ldr	r3, [r7, #8]
 800fe64:	6a1b      	ldr	r3, [r3, #32]
 800fe66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fe6a:	69b9      	ldr	r1, [r7, #24]
 800fe6c:	0148      	lsls	r0, r1, #5
 800fe6e:	69f9      	ldr	r1, [r7, #28]
 800fe70:	4401      	add	r1, r0
 800fe72:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800fe76:	4313      	orrs	r3, r2
 800fe78:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800fe7a:	79fb      	ldrb	r3, [r7, #7]
 800fe7c:	2b01      	cmp	r3, #1
 800fe7e:	d10d      	bne.n	800fe9c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	68db      	ldr	r3, [r3, #12]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d009      	beq.n	800fe9c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	68d9      	ldr	r1, [r3, #12]
 800fe8c:	69bb      	ldr	r3, [r7, #24]
 800fe8e:	015a      	lsls	r2, r3, #5
 800fe90:	69fb      	ldr	r3, [r7, #28]
 800fe92:	4413      	add	r3, r2
 800fe94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe98:	460a      	mov	r2, r1
 800fe9a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	791b      	ldrb	r3, [r3, #4]
 800fea0:	2b01      	cmp	r3, #1
 800fea2:	d128      	bne.n	800fef6 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fea4:	69fb      	ldr	r3, [r7, #28]
 800fea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800feaa:	689b      	ldr	r3, [r3, #8]
 800feac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d110      	bne.n	800fed6 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800feb4:	69bb      	ldr	r3, [r7, #24]
 800feb6:	015a      	lsls	r2, r3, #5
 800feb8:	69fb      	ldr	r3, [r7, #28]
 800feba:	4413      	add	r3, r2
 800febc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	69ba      	ldr	r2, [r7, #24]
 800fec4:	0151      	lsls	r1, r2, #5
 800fec6:	69fa      	ldr	r2, [r7, #28]
 800fec8:	440a      	add	r2, r1
 800feca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fece:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fed2:	6013      	str	r3, [r2, #0]
 800fed4:	e00f      	b.n	800fef6 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800fed6:	69bb      	ldr	r3, [r7, #24]
 800fed8:	015a      	lsls	r2, r3, #5
 800feda:	69fb      	ldr	r3, [r7, #28]
 800fedc:	4413      	add	r3, r2
 800fede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	69ba      	ldr	r2, [r7, #24]
 800fee6:	0151      	lsls	r1, r2, #5
 800fee8:	69fa      	ldr	r2, [r7, #28]
 800feea:	440a      	add	r2, r1
 800feec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fef4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fef6:	69bb      	ldr	r3, [r7, #24]
 800fef8:	015a      	lsls	r2, r3, #5
 800fefa:	69fb      	ldr	r3, [r7, #28]
 800fefc:	4413      	add	r3, r2
 800fefe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	69ba      	ldr	r2, [r7, #24]
 800ff06:	0151      	lsls	r1, r2, #5
 800ff08:	69fa      	ldr	r2, [r7, #28]
 800ff0a:	440a      	add	r2, r1
 800ff0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ff10:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ff14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ff16:	2300      	movs	r3, #0
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3720      	adds	r7, #32
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	fff80000 	.word	0xfff80000
 800ff24:	e007ffff 	.word	0xe007ffff
 800ff28:	1ff80000 	.word	0x1ff80000

0800ff2c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b087      	sub	sp, #28
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ff36:	2300      	movs	r3, #0
 800ff38:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	785b      	ldrb	r3, [r3, #1]
 800ff46:	2b01      	cmp	r3, #1
 800ff48:	d14a      	bne.n	800ffe0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	781b      	ldrb	r3, [r3, #0]
 800ff4e:	015a      	lsls	r2, r3, #5
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	4413      	add	r3, r2
 800ff54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ff5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ff62:	f040 8086 	bne.w	8010072 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	781b      	ldrb	r3, [r3, #0]
 800ff6a:	015a      	lsls	r2, r3, #5
 800ff6c:	693b      	ldr	r3, [r7, #16]
 800ff6e:	4413      	add	r3, r2
 800ff70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	683a      	ldr	r2, [r7, #0]
 800ff78:	7812      	ldrb	r2, [r2, #0]
 800ff7a:	0151      	lsls	r1, r2, #5
 800ff7c:	693a      	ldr	r2, [r7, #16]
 800ff7e:	440a      	add	r2, r1
 800ff80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ff84:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ff88:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	781b      	ldrb	r3, [r3, #0]
 800ff8e:	015a      	lsls	r2, r3, #5
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	4413      	add	r3, r2
 800ff94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	683a      	ldr	r2, [r7, #0]
 800ff9c:	7812      	ldrb	r2, [r2, #0]
 800ff9e:	0151      	lsls	r1, r2, #5
 800ffa0:	693a      	ldr	r2, [r7, #16]
 800ffa2:	440a      	add	r2, r1
 800ffa4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ffa8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ffac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	3301      	adds	r3, #1
 800ffb2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ffba:	4293      	cmp	r3, r2
 800ffbc:	d902      	bls.n	800ffc4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	75fb      	strb	r3, [r7, #23]
          break;
 800ffc2:	e056      	b.n	8010072 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	015a      	lsls	r2, r3, #5
 800ffca:	693b      	ldr	r3, [r7, #16]
 800ffcc:	4413      	add	r3, r2
 800ffce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ffd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ffdc:	d0e7      	beq.n	800ffae <USB_EPStopXfer+0x82>
 800ffde:	e048      	b.n	8010072 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	015a      	lsls	r2, r3, #5
 800ffe6:	693b      	ldr	r3, [r7, #16]
 800ffe8:	4413      	add	r3, r2
 800ffea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fff4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fff8:	d13b      	bne.n	8010072 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	015a      	lsls	r2, r3, #5
 8010000:	693b      	ldr	r3, [r7, #16]
 8010002:	4413      	add	r3, r2
 8010004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	683a      	ldr	r2, [r7, #0]
 801000c:	7812      	ldrb	r2, [r2, #0]
 801000e:	0151      	lsls	r1, r2, #5
 8010010:	693a      	ldr	r2, [r7, #16]
 8010012:	440a      	add	r2, r1
 8010014:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010018:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801001c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	015a      	lsls	r2, r3, #5
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	4413      	add	r3, r2
 8010028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	683a      	ldr	r2, [r7, #0]
 8010030:	7812      	ldrb	r2, [r2, #0]
 8010032:	0151      	lsls	r1, r2, #5
 8010034:	693a      	ldr	r2, [r7, #16]
 8010036:	440a      	add	r2, r1
 8010038:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801003c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010040:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	3301      	adds	r3, #1
 8010046:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801004e:	4293      	cmp	r3, r2
 8010050:	d902      	bls.n	8010058 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8010052:	2301      	movs	r3, #1
 8010054:	75fb      	strb	r3, [r7, #23]
          break;
 8010056:	e00c      	b.n	8010072 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8010058:	683b      	ldr	r3, [r7, #0]
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	015a      	lsls	r2, r3, #5
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	4413      	add	r3, r2
 8010062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801006c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010070:	d0e7      	beq.n	8010042 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8010072:	7dfb      	ldrb	r3, [r7, #23]
}
 8010074:	4618      	mov	r0, r3
 8010076:	371c      	adds	r7, #28
 8010078:	46bd      	mov	sp, r7
 801007a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007e:	4770      	bx	lr

08010080 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010080:	b480      	push	{r7}
 8010082:	b089      	sub	sp, #36	@ 0x24
 8010084:	af00      	add	r7, sp, #0
 8010086:	60f8      	str	r0, [r7, #12]
 8010088:	60b9      	str	r1, [r7, #8]
 801008a:	4611      	mov	r1, r2
 801008c:	461a      	mov	r2, r3
 801008e:	460b      	mov	r3, r1
 8010090:	71fb      	strb	r3, [r7, #7]
 8010092:	4613      	mov	r3, r2
 8010094:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801009e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d123      	bne.n	80100ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80100a6:	88bb      	ldrh	r3, [r7, #4]
 80100a8:	3303      	adds	r3, #3
 80100aa:	089b      	lsrs	r3, r3, #2
 80100ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80100ae:	2300      	movs	r3, #0
 80100b0:	61bb      	str	r3, [r7, #24]
 80100b2:	e018      	b.n	80100e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80100b4:	79fb      	ldrb	r3, [r7, #7]
 80100b6:	031a      	lsls	r2, r3, #12
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	4413      	add	r3, r2
 80100bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80100c0:	461a      	mov	r2, r3
 80100c2:	69fb      	ldr	r3, [r7, #28]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80100c8:	69fb      	ldr	r3, [r7, #28]
 80100ca:	3301      	adds	r3, #1
 80100cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80100ce:	69fb      	ldr	r3, [r7, #28]
 80100d0:	3301      	adds	r3, #1
 80100d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80100d4:	69fb      	ldr	r3, [r7, #28]
 80100d6:	3301      	adds	r3, #1
 80100d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80100da:	69fb      	ldr	r3, [r7, #28]
 80100dc:	3301      	adds	r3, #1
 80100de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80100e0:	69bb      	ldr	r3, [r7, #24]
 80100e2:	3301      	adds	r3, #1
 80100e4:	61bb      	str	r3, [r7, #24]
 80100e6:	69ba      	ldr	r2, [r7, #24]
 80100e8:	693b      	ldr	r3, [r7, #16]
 80100ea:	429a      	cmp	r2, r3
 80100ec:	d3e2      	bcc.n	80100b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80100ee:	2300      	movs	r3, #0
}
 80100f0:	4618      	mov	r0, r3
 80100f2:	3724      	adds	r7, #36	@ 0x24
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr

080100fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80100fc:	b480      	push	{r7}
 80100fe:	b08b      	sub	sp, #44	@ 0x2c
 8010100:	af00      	add	r7, sp, #0
 8010102:	60f8      	str	r0, [r7, #12]
 8010104:	60b9      	str	r1, [r7, #8]
 8010106:	4613      	mov	r3, r2
 8010108:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010112:	88fb      	ldrh	r3, [r7, #6]
 8010114:	089b      	lsrs	r3, r3, #2
 8010116:	b29b      	uxth	r3, r3
 8010118:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801011a:	88fb      	ldrh	r3, [r7, #6]
 801011c:	f003 0303 	and.w	r3, r3, #3
 8010120:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010122:	2300      	movs	r3, #0
 8010124:	623b      	str	r3, [r7, #32]
 8010126:	e014      	b.n	8010152 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010128:	69bb      	ldr	r3, [r7, #24]
 801012a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801012e:	681a      	ldr	r2, [r3, #0]
 8010130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010132:	601a      	str	r2, [r3, #0]
    pDest++;
 8010134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010136:	3301      	adds	r3, #1
 8010138:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801013a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801013c:	3301      	adds	r3, #1
 801013e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010142:	3301      	adds	r3, #1
 8010144:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010148:	3301      	adds	r3, #1
 801014a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 801014c:	6a3b      	ldr	r3, [r7, #32]
 801014e:	3301      	adds	r3, #1
 8010150:	623b      	str	r3, [r7, #32]
 8010152:	6a3a      	ldr	r2, [r7, #32]
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	429a      	cmp	r2, r3
 8010158:	d3e6      	bcc.n	8010128 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801015a:	8bfb      	ldrh	r3, [r7, #30]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d01e      	beq.n	801019e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010160:	2300      	movs	r3, #0
 8010162:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010164:	69bb      	ldr	r3, [r7, #24]
 8010166:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801016a:	461a      	mov	r2, r3
 801016c:	f107 0310 	add.w	r3, r7, #16
 8010170:	6812      	ldr	r2, [r2, #0]
 8010172:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010174:	693a      	ldr	r2, [r7, #16]
 8010176:	6a3b      	ldr	r3, [r7, #32]
 8010178:	b2db      	uxtb	r3, r3
 801017a:	00db      	lsls	r3, r3, #3
 801017c:	fa22 f303 	lsr.w	r3, r2, r3
 8010180:	b2da      	uxtb	r2, r3
 8010182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010184:	701a      	strb	r2, [r3, #0]
      i++;
 8010186:	6a3b      	ldr	r3, [r7, #32]
 8010188:	3301      	adds	r3, #1
 801018a:	623b      	str	r3, [r7, #32]
      pDest++;
 801018c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801018e:	3301      	adds	r3, #1
 8010190:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8010192:	8bfb      	ldrh	r3, [r7, #30]
 8010194:	3b01      	subs	r3, #1
 8010196:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010198:	8bfb      	ldrh	r3, [r7, #30]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d1ea      	bne.n	8010174 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801019e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80101a0:	4618      	mov	r0, r3
 80101a2:	372c      	adds	r7, #44	@ 0x2c
 80101a4:	46bd      	mov	sp, r7
 80101a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101aa:	4770      	bx	lr

080101ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80101ac:	b480      	push	{r7}
 80101ae:	b085      	sub	sp, #20
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
 80101b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	781b      	ldrb	r3, [r3, #0]
 80101be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	785b      	ldrb	r3, [r3, #1]
 80101c4:	2b01      	cmp	r3, #1
 80101c6:	d12c      	bne.n	8010222 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	015a      	lsls	r2, r3, #5
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	4413      	add	r3, r2
 80101d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	db12      	blt.n	8010200 <USB_EPSetStall+0x54>
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d00f      	beq.n	8010200 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80101e0:	68bb      	ldr	r3, [r7, #8]
 80101e2:	015a      	lsls	r2, r3, #5
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	4413      	add	r3, r2
 80101e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	68ba      	ldr	r2, [r7, #8]
 80101f0:	0151      	lsls	r1, r2, #5
 80101f2:	68fa      	ldr	r2, [r7, #12]
 80101f4:	440a      	add	r2, r1
 80101f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80101fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80101fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	015a      	lsls	r2, r3, #5
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	4413      	add	r3, r2
 8010208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	68ba      	ldr	r2, [r7, #8]
 8010210:	0151      	lsls	r1, r2, #5
 8010212:	68fa      	ldr	r2, [r7, #12]
 8010214:	440a      	add	r2, r1
 8010216:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801021a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801021e:	6013      	str	r3, [r2, #0]
 8010220:	e02b      	b.n	801027a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	015a      	lsls	r2, r3, #5
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	4413      	add	r3, r2
 801022a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	2b00      	cmp	r3, #0
 8010232:	db12      	blt.n	801025a <USB_EPSetStall+0xae>
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d00f      	beq.n	801025a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	015a      	lsls	r2, r3, #5
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	4413      	add	r3, r2
 8010242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	68ba      	ldr	r2, [r7, #8]
 801024a:	0151      	lsls	r1, r2, #5
 801024c:	68fa      	ldr	r2, [r7, #12]
 801024e:	440a      	add	r2, r1
 8010250:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010254:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010258:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	015a      	lsls	r2, r3, #5
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	4413      	add	r3, r2
 8010262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	68ba      	ldr	r2, [r7, #8]
 801026a:	0151      	lsls	r1, r2, #5
 801026c:	68fa      	ldr	r2, [r7, #12]
 801026e:	440a      	add	r2, r1
 8010270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010274:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010278:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801027a:	2300      	movs	r3, #0
}
 801027c:	4618      	mov	r0, r3
 801027e:	3714      	adds	r7, #20
 8010280:	46bd      	mov	sp, r7
 8010282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010286:	4770      	bx	lr

08010288 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010288:	b480      	push	{r7}
 801028a:	b085      	sub	sp, #20
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	785b      	ldrb	r3, [r3, #1]
 80102a0:	2b01      	cmp	r3, #1
 80102a2:	d128      	bne.n	80102f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	015a      	lsls	r2, r3, #5
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	4413      	add	r3, r2
 80102ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	68ba      	ldr	r2, [r7, #8]
 80102b4:	0151      	lsls	r1, r2, #5
 80102b6:	68fa      	ldr	r2, [r7, #12]
 80102b8:	440a      	add	r2, r1
 80102ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80102be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80102c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	791b      	ldrb	r3, [r3, #4]
 80102c8:	2b03      	cmp	r3, #3
 80102ca:	d003      	beq.n	80102d4 <USB_EPClearStall+0x4c>
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	791b      	ldrb	r3, [r3, #4]
 80102d0:	2b02      	cmp	r3, #2
 80102d2:	d138      	bne.n	8010346 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	015a      	lsls	r2, r3, #5
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	4413      	add	r3, r2
 80102dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	68ba      	ldr	r2, [r7, #8]
 80102e4:	0151      	lsls	r1, r2, #5
 80102e6:	68fa      	ldr	r2, [r7, #12]
 80102e8:	440a      	add	r2, r1
 80102ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80102ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80102f2:	6013      	str	r3, [r2, #0]
 80102f4:	e027      	b.n	8010346 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	015a      	lsls	r2, r3, #5
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	4413      	add	r3, r2
 80102fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	68ba      	ldr	r2, [r7, #8]
 8010306:	0151      	lsls	r1, r2, #5
 8010308:	68fa      	ldr	r2, [r7, #12]
 801030a:	440a      	add	r2, r1
 801030c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010310:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010314:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	791b      	ldrb	r3, [r3, #4]
 801031a:	2b03      	cmp	r3, #3
 801031c:	d003      	beq.n	8010326 <USB_EPClearStall+0x9e>
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	791b      	ldrb	r3, [r3, #4]
 8010322:	2b02      	cmp	r3, #2
 8010324:	d10f      	bne.n	8010346 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	015a      	lsls	r2, r3, #5
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	4413      	add	r3, r2
 801032e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	68ba      	ldr	r2, [r7, #8]
 8010336:	0151      	lsls	r1, r2, #5
 8010338:	68fa      	ldr	r2, [r7, #12]
 801033a:	440a      	add	r2, r1
 801033c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010344:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010346:	2300      	movs	r3, #0
}
 8010348:	4618      	mov	r0, r3
 801034a:	3714      	adds	r7, #20
 801034c:	46bd      	mov	sp, r7
 801034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010352:	4770      	bx	lr

08010354 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010354:	b480      	push	{r7}
 8010356:	b085      	sub	sp, #20
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
 801035c:	460b      	mov	r3, r1
 801035e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	68fa      	ldr	r2, [r7, #12]
 801036e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010372:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8010376:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801037e:	681a      	ldr	r2, [r3, #0]
 8010380:	78fb      	ldrb	r3, [r7, #3]
 8010382:	011b      	lsls	r3, r3, #4
 8010384:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8010388:	68f9      	ldr	r1, [r7, #12]
 801038a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801038e:	4313      	orrs	r3, r2
 8010390:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010392:	2300      	movs	r3, #0
}
 8010394:	4618      	mov	r0, r3
 8010396:	3714      	adds	r7, #20
 8010398:	46bd      	mov	sp, r7
 801039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039e:	4770      	bx	lr

080103a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80103a0:	b480      	push	{r7}
 80103a2:	b085      	sub	sp, #20
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	68fa      	ldr	r2, [r7, #12]
 80103b6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80103ba:	f023 0303 	bic.w	r3, r3, #3
 80103be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80103c6:	685b      	ldr	r3, [r3, #4]
 80103c8:	68fa      	ldr	r2, [r7, #12]
 80103ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80103ce:	f023 0302 	bic.w	r3, r3, #2
 80103d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80103d4:	2300      	movs	r3, #0
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3714      	adds	r7, #20
 80103da:	46bd      	mov	sp, r7
 80103dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e0:	4770      	bx	lr

080103e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80103e2:	b480      	push	{r7}
 80103e4:	b085      	sub	sp, #20
 80103e6:	af00      	add	r7, sp, #0
 80103e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	68fa      	ldr	r2, [r7, #12]
 80103f8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80103fc:	f023 0303 	bic.w	r3, r3, #3
 8010400:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010408:	685b      	ldr	r3, [r3, #4]
 801040a:	68fa      	ldr	r2, [r7, #12]
 801040c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010410:	f043 0302 	orr.w	r3, r3, #2
 8010414:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010416:	2300      	movs	r3, #0
}
 8010418:	4618      	mov	r0, r3
 801041a:	3714      	adds	r7, #20
 801041c:	46bd      	mov	sp, r7
 801041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010422:	4770      	bx	lr

08010424 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8010424:	b480      	push	{r7}
 8010426:	b085      	sub	sp, #20
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	695b      	ldr	r3, [r3, #20]
 8010430:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	699b      	ldr	r3, [r3, #24]
 8010436:	68fa      	ldr	r2, [r7, #12]
 8010438:	4013      	ands	r3, r2
 801043a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801043c:	68fb      	ldr	r3, [r7, #12]
}
 801043e:	4618      	mov	r0, r3
 8010440:	3714      	adds	r7, #20
 8010442:	46bd      	mov	sp, r7
 8010444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010448:	4770      	bx	lr

0801044a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801044a:	b480      	push	{r7}
 801044c:	b085      	sub	sp, #20
 801044e:	af00      	add	r7, sp, #0
 8010450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801045c:	699b      	ldr	r3, [r3, #24]
 801045e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010466:	69db      	ldr	r3, [r3, #28]
 8010468:	68ba      	ldr	r2, [r7, #8]
 801046a:	4013      	ands	r3, r2
 801046c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	0c1b      	lsrs	r3, r3, #16
}
 8010472:	4618      	mov	r0, r3
 8010474:	3714      	adds	r7, #20
 8010476:	46bd      	mov	sp, r7
 8010478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047c:	4770      	bx	lr

0801047e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801047e:	b480      	push	{r7}
 8010480:	b085      	sub	sp, #20
 8010482:	af00      	add	r7, sp, #0
 8010484:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010490:	699b      	ldr	r3, [r3, #24]
 8010492:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801049a:	69db      	ldr	r3, [r3, #28]
 801049c:	68ba      	ldr	r2, [r7, #8]
 801049e:	4013      	ands	r3, r2
 80104a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	b29b      	uxth	r3, r3
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	3714      	adds	r7, #20
 80104aa:	46bd      	mov	sp, r7
 80104ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b0:	4770      	bx	lr

080104b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80104b2:	b480      	push	{r7}
 80104b4:	b085      	sub	sp, #20
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6078      	str	r0, [r7, #4]
 80104ba:	460b      	mov	r3, r1
 80104bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80104c2:	78fb      	ldrb	r3, [r7, #3]
 80104c4:	015a      	lsls	r2, r3, #5
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	4413      	add	r3, r2
 80104ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80104ce:	689b      	ldr	r3, [r3, #8]
 80104d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80104d8:	695b      	ldr	r3, [r3, #20]
 80104da:	68ba      	ldr	r2, [r7, #8]
 80104dc:	4013      	ands	r3, r2
 80104de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80104e0:	68bb      	ldr	r3, [r7, #8]
}
 80104e2:	4618      	mov	r0, r3
 80104e4:	3714      	adds	r7, #20
 80104e6:	46bd      	mov	sp, r7
 80104e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ec:	4770      	bx	lr

080104ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80104ee:	b480      	push	{r7}
 80104f0:	b087      	sub	sp, #28
 80104f2:	af00      	add	r7, sp, #0
 80104f4:	6078      	str	r0, [r7, #4]
 80104f6:	460b      	mov	r3, r1
 80104f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010504:	691b      	ldr	r3, [r3, #16]
 8010506:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010508:	697b      	ldr	r3, [r7, #20]
 801050a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801050e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010510:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010512:	78fb      	ldrb	r3, [r7, #3]
 8010514:	f003 030f 	and.w	r3, r3, #15
 8010518:	68fa      	ldr	r2, [r7, #12]
 801051a:	fa22 f303 	lsr.w	r3, r2, r3
 801051e:	01db      	lsls	r3, r3, #7
 8010520:	b2db      	uxtb	r3, r3
 8010522:	693a      	ldr	r2, [r7, #16]
 8010524:	4313      	orrs	r3, r2
 8010526:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010528:	78fb      	ldrb	r3, [r7, #3]
 801052a:	015a      	lsls	r2, r3, #5
 801052c:	697b      	ldr	r3, [r7, #20]
 801052e:	4413      	add	r3, r2
 8010530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010534:	689b      	ldr	r3, [r3, #8]
 8010536:	693a      	ldr	r2, [r7, #16]
 8010538:	4013      	ands	r3, r2
 801053a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801053c:	68bb      	ldr	r3, [r7, #8]
}
 801053e:	4618      	mov	r0, r3
 8010540:	371c      	adds	r7, #28
 8010542:	46bd      	mov	sp, r7
 8010544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010548:	4770      	bx	lr

0801054a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801054a:	b480      	push	{r7}
 801054c:	b083      	sub	sp, #12
 801054e:	af00      	add	r7, sp, #0
 8010550:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	695b      	ldr	r3, [r3, #20]
 8010556:	f003 0301 	and.w	r3, r3, #1
}
 801055a:	4618      	mov	r0, r3
 801055c:	370c      	adds	r7, #12
 801055e:	46bd      	mov	sp, r7
 8010560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010564:	4770      	bx	lr
	...

08010568 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8010568:	b480      	push	{r7}
 801056a:	b085      	sub	sp, #20
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801057a:	681a      	ldr	r2, [r3, #0]
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010582:	4619      	mov	r1, r3
 8010584:	4b09      	ldr	r3, [pc, #36]	@ (80105ac <USB_ActivateSetup+0x44>)
 8010586:	4013      	ands	r3, r2
 8010588:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010590:	685b      	ldr	r3, [r3, #4]
 8010592:	68fa      	ldr	r2, [r7, #12]
 8010594:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801059c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801059e:	2300      	movs	r3, #0
}
 80105a0:	4618      	mov	r0, r3
 80105a2:	3714      	adds	r7, #20
 80105a4:	46bd      	mov	sp, r7
 80105a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105aa:	4770      	bx	lr
 80105ac:	fffff800 	.word	0xfffff800

080105b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80105b0:	b480      	push	{r7}
 80105b2:	b087      	sub	sp, #28
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	60f8      	str	r0, [r7, #12]
 80105b8:	460b      	mov	r3, r1
 80105ba:	607a      	str	r2, [r7, #4]
 80105bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	333c      	adds	r3, #60	@ 0x3c
 80105c6:	3304      	adds	r3, #4
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80105cc:	693b      	ldr	r3, [r7, #16]
 80105ce:	4a26      	ldr	r2, [pc, #152]	@ (8010668 <USB_EP0_OutStart+0xb8>)
 80105d0:	4293      	cmp	r3, r2
 80105d2:	d90a      	bls.n	80105ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80105d4:	697b      	ldr	r3, [r7, #20]
 80105d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80105e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80105e4:	d101      	bne.n	80105ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80105e6:	2300      	movs	r3, #0
 80105e8:	e037      	b.n	801065a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80105ea:	697b      	ldr	r3, [r7, #20]
 80105ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105f0:	461a      	mov	r2, r3
 80105f2:	2300      	movs	r3, #0
 80105f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80105f6:	697b      	ldr	r3, [r7, #20]
 80105f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105fc:	691b      	ldr	r3, [r3, #16]
 80105fe:	697a      	ldr	r2, [r7, #20]
 8010600:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010604:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010608:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010610:	691b      	ldr	r3, [r3, #16]
 8010612:	697a      	ldr	r2, [r7, #20]
 8010614:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010618:	f043 0318 	orr.w	r3, r3, #24
 801061c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801061e:	697b      	ldr	r3, [r7, #20]
 8010620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010624:	691b      	ldr	r3, [r3, #16]
 8010626:	697a      	ldr	r2, [r7, #20]
 8010628:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801062c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8010630:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010632:	7afb      	ldrb	r3, [r7, #11]
 8010634:	2b01      	cmp	r3, #1
 8010636:	d10f      	bne.n	8010658 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801063e:	461a      	mov	r2, r3
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	697a      	ldr	r2, [r7, #20]
 801064e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010652:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8010656:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010658:	2300      	movs	r3, #0
}
 801065a:	4618      	mov	r0, r3
 801065c:	371c      	adds	r7, #28
 801065e:	46bd      	mov	sp, r7
 8010660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010664:	4770      	bx	lr
 8010666:	bf00      	nop
 8010668:	4f54300a 	.word	0x4f54300a

0801066c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801066c:	b480      	push	{r7}
 801066e:	b085      	sub	sp, #20
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010674:	2300      	movs	r3, #0
 8010676:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	3301      	adds	r3, #1
 801067c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010684:	d901      	bls.n	801068a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010686:	2303      	movs	r3, #3
 8010688:	e01b      	b.n	80106c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	691b      	ldr	r3, [r3, #16]
 801068e:	2b00      	cmp	r3, #0
 8010690:	daf2      	bge.n	8010678 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010692:	2300      	movs	r3, #0
 8010694:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	691b      	ldr	r3, [r3, #16]
 801069a:	f043 0201 	orr.w	r2, r3, #1
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	3301      	adds	r3, #1
 80106a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80106ae:	d901      	bls.n	80106b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80106b0:	2303      	movs	r3, #3
 80106b2:	e006      	b.n	80106c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	691b      	ldr	r3, [r3, #16]
 80106b8:	f003 0301 	and.w	r3, r3, #1
 80106bc:	2b01      	cmp	r3, #1
 80106be:	d0f0      	beq.n	80106a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80106c0:	2300      	movs	r3, #0
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3714      	adds	r7, #20
 80106c6:	46bd      	mov	sp, r7
 80106c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106cc:	4770      	bx	lr
	...

080106d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b084      	sub	sp, #16
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	460b      	mov	r3, r1
 80106da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80106dc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80106e0:	f002 fca8 	bl	8013034 <USBD_static_malloc>
 80106e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d109      	bne.n	8010700 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	32b0      	adds	r2, #176	@ 0xb0
 80106f6:	2100      	movs	r1, #0
 80106f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80106fc:	2302      	movs	r3, #2
 80106fe:	e0d4      	b.n	80108aa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010700:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8010704:	2100      	movs	r1, #0
 8010706:	68f8      	ldr	r0, [r7, #12]
 8010708:	f002 fcd8 	bl	80130bc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	32b0      	adds	r2, #176	@ 0xb0
 8010716:	68f9      	ldr	r1, [r7, #12]
 8010718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	32b0      	adds	r2, #176	@ 0xb0
 8010726:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	7c1b      	ldrb	r3, [r3, #16]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d138      	bne.n	80107aa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010738:	4b5e      	ldr	r3, [pc, #376]	@ (80108b4 <USBD_CDC_Init+0x1e4>)
 801073a:	7819      	ldrb	r1, [r3, #0]
 801073c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010740:	2202      	movs	r2, #2
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f002 fb53 	bl	8012dee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010748:	4b5a      	ldr	r3, [pc, #360]	@ (80108b4 <USBD_CDC_Init+0x1e4>)
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	f003 020f 	and.w	r2, r3, #15
 8010750:	6879      	ldr	r1, [r7, #4]
 8010752:	4613      	mov	r3, r2
 8010754:	009b      	lsls	r3, r3, #2
 8010756:	4413      	add	r3, r2
 8010758:	009b      	lsls	r3, r3, #2
 801075a:	440b      	add	r3, r1
 801075c:	3324      	adds	r3, #36	@ 0x24
 801075e:	2201      	movs	r2, #1
 8010760:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010762:	4b55      	ldr	r3, [pc, #340]	@ (80108b8 <USBD_CDC_Init+0x1e8>)
 8010764:	7819      	ldrb	r1, [r3, #0]
 8010766:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801076a:	2202      	movs	r2, #2
 801076c:	6878      	ldr	r0, [r7, #4]
 801076e:	f002 fb3e 	bl	8012dee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010772:	4b51      	ldr	r3, [pc, #324]	@ (80108b8 <USBD_CDC_Init+0x1e8>)
 8010774:	781b      	ldrb	r3, [r3, #0]
 8010776:	f003 020f 	and.w	r2, r3, #15
 801077a:	6879      	ldr	r1, [r7, #4]
 801077c:	4613      	mov	r3, r2
 801077e:	009b      	lsls	r3, r3, #2
 8010780:	4413      	add	r3, r2
 8010782:	009b      	lsls	r3, r3, #2
 8010784:	440b      	add	r3, r1
 8010786:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801078a:	2201      	movs	r2, #1
 801078c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801078e:	4b4b      	ldr	r3, [pc, #300]	@ (80108bc <USBD_CDC_Init+0x1ec>)
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	f003 020f 	and.w	r2, r3, #15
 8010796:	6879      	ldr	r1, [r7, #4]
 8010798:	4613      	mov	r3, r2
 801079a:	009b      	lsls	r3, r3, #2
 801079c:	4413      	add	r3, r2
 801079e:	009b      	lsls	r3, r3, #2
 80107a0:	440b      	add	r3, r1
 80107a2:	3326      	adds	r3, #38	@ 0x26
 80107a4:	2210      	movs	r2, #16
 80107a6:	801a      	strh	r2, [r3, #0]
 80107a8:	e035      	b.n	8010816 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80107aa:	4b42      	ldr	r3, [pc, #264]	@ (80108b4 <USBD_CDC_Init+0x1e4>)
 80107ac:	7819      	ldrb	r1, [r3, #0]
 80107ae:	2340      	movs	r3, #64	@ 0x40
 80107b0:	2202      	movs	r2, #2
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f002 fb1b 	bl	8012dee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80107b8:	4b3e      	ldr	r3, [pc, #248]	@ (80108b4 <USBD_CDC_Init+0x1e4>)
 80107ba:	781b      	ldrb	r3, [r3, #0]
 80107bc:	f003 020f 	and.w	r2, r3, #15
 80107c0:	6879      	ldr	r1, [r7, #4]
 80107c2:	4613      	mov	r3, r2
 80107c4:	009b      	lsls	r3, r3, #2
 80107c6:	4413      	add	r3, r2
 80107c8:	009b      	lsls	r3, r3, #2
 80107ca:	440b      	add	r3, r1
 80107cc:	3324      	adds	r3, #36	@ 0x24
 80107ce:	2201      	movs	r2, #1
 80107d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80107d2:	4b39      	ldr	r3, [pc, #228]	@ (80108b8 <USBD_CDC_Init+0x1e8>)
 80107d4:	7819      	ldrb	r1, [r3, #0]
 80107d6:	2340      	movs	r3, #64	@ 0x40
 80107d8:	2202      	movs	r2, #2
 80107da:	6878      	ldr	r0, [r7, #4]
 80107dc:	f002 fb07 	bl	8012dee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80107e0:	4b35      	ldr	r3, [pc, #212]	@ (80108b8 <USBD_CDC_Init+0x1e8>)
 80107e2:	781b      	ldrb	r3, [r3, #0]
 80107e4:	f003 020f 	and.w	r2, r3, #15
 80107e8:	6879      	ldr	r1, [r7, #4]
 80107ea:	4613      	mov	r3, r2
 80107ec:	009b      	lsls	r3, r3, #2
 80107ee:	4413      	add	r3, r2
 80107f0:	009b      	lsls	r3, r3, #2
 80107f2:	440b      	add	r3, r1
 80107f4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80107f8:	2201      	movs	r2, #1
 80107fa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80107fc:	4b2f      	ldr	r3, [pc, #188]	@ (80108bc <USBD_CDC_Init+0x1ec>)
 80107fe:	781b      	ldrb	r3, [r3, #0]
 8010800:	f003 020f 	and.w	r2, r3, #15
 8010804:	6879      	ldr	r1, [r7, #4]
 8010806:	4613      	mov	r3, r2
 8010808:	009b      	lsls	r3, r3, #2
 801080a:	4413      	add	r3, r2
 801080c:	009b      	lsls	r3, r3, #2
 801080e:	440b      	add	r3, r1
 8010810:	3326      	adds	r3, #38	@ 0x26
 8010812:	2210      	movs	r2, #16
 8010814:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010816:	4b29      	ldr	r3, [pc, #164]	@ (80108bc <USBD_CDC_Init+0x1ec>)
 8010818:	7819      	ldrb	r1, [r3, #0]
 801081a:	2308      	movs	r3, #8
 801081c:	2203      	movs	r2, #3
 801081e:	6878      	ldr	r0, [r7, #4]
 8010820:	f002 fae5 	bl	8012dee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8010824:	4b25      	ldr	r3, [pc, #148]	@ (80108bc <USBD_CDC_Init+0x1ec>)
 8010826:	781b      	ldrb	r3, [r3, #0]
 8010828:	f003 020f 	and.w	r2, r3, #15
 801082c:	6879      	ldr	r1, [r7, #4]
 801082e:	4613      	mov	r3, r2
 8010830:	009b      	lsls	r3, r3, #2
 8010832:	4413      	add	r3, r2
 8010834:	009b      	lsls	r3, r3, #2
 8010836:	440b      	add	r3, r1
 8010838:	3324      	adds	r3, #36	@ 0x24
 801083a:	2201      	movs	r2, #1
 801083c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	2200      	movs	r2, #0
 8010842:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801084c:	687a      	ldr	r2, [r7, #4]
 801084e:	33b0      	adds	r3, #176	@ 0xb0
 8010850:	009b      	lsls	r3, r3, #2
 8010852:	4413      	add	r3, r2
 8010854:	685b      	ldr	r3, [r3, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	2200      	movs	r2, #0
 801085e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	2200      	movs	r2, #0
 8010866:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8010870:	2b00      	cmp	r3, #0
 8010872:	d101      	bne.n	8010878 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8010874:	2302      	movs	r3, #2
 8010876:	e018      	b.n	80108aa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	7c1b      	ldrb	r3, [r3, #16]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d10a      	bne.n	8010896 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010880:	4b0d      	ldr	r3, [pc, #52]	@ (80108b8 <USBD_CDC_Init+0x1e8>)
 8010882:	7819      	ldrb	r1, [r3, #0]
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801088a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f002 fb9c 	bl	8012fcc <USBD_LL_PrepareReceive>
 8010894:	e008      	b.n	80108a8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010896:	4b08      	ldr	r3, [pc, #32]	@ (80108b8 <USBD_CDC_Init+0x1e8>)
 8010898:	7819      	ldrb	r1, [r3, #0]
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80108a0:	2340      	movs	r3, #64	@ 0x40
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f002 fb92 	bl	8012fcc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80108a8:	2300      	movs	r3, #0
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	3710      	adds	r7, #16
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}
 80108b2:	bf00      	nop
 80108b4:	24000097 	.word	0x24000097
 80108b8:	24000098 	.word	0x24000098
 80108bc:	24000099 	.word	0x24000099

080108c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b082      	sub	sp, #8
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	460b      	mov	r3, r1
 80108ca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80108cc:	4b3a      	ldr	r3, [pc, #232]	@ (80109b8 <USBD_CDC_DeInit+0xf8>)
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	4619      	mov	r1, r3
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f002 fab1 	bl	8012e3a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80108d8:	4b37      	ldr	r3, [pc, #220]	@ (80109b8 <USBD_CDC_DeInit+0xf8>)
 80108da:	781b      	ldrb	r3, [r3, #0]
 80108dc:	f003 020f 	and.w	r2, r3, #15
 80108e0:	6879      	ldr	r1, [r7, #4]
 80108e2:	4613      	mov	r3, r2
 80108e4:	009b      	lsls	r3, r3, #2
 80108e6:	4413      	add	r3, r2
 80108e8:	009b      	lsls	r3, r3, #2
 80108ea:	440b      	add	r3, r1
 80108ec:	3324      	adds	r3, #36	@ 0x24
 80108ee:	2200      	movs	r2, #0
 80108f0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80108f2:	4b32      	ldr	r3, [pc, #200]	@ (80109bc <USBD_CDC_DeInit+0xfc>)
 80108f4:	781b      	ldrb	r3, [r3, #0]
 80108f6:	4619      	mov	r1, r3
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f002 fa9e 	bl	8012e3a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80108fe:	4b2f      	ldr	r3, [pc, #188]	@ (80109bc <USBD_CDC_DeInit+0xfc>)
 8010900:	781b      	ldrb	r3, [r3, #0]
 8010902:	f003 020f 	and.w	r2, r3, #15
 8010906:	6879      	ldr	r1, [r7, #4]
 8010908:	4613      	mov	r3, r2
 801090a:	009b      	lsls	r3, r3, #2
 801090c:	4413      	add	r3, r2
 801090e:	009b      	lsls	r3, r3, #2
 8010910:	440b      	add	r3, r1
 8010912:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010916:	2200      	movs	r2, #0
 8010918:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801091a:	4b29      	ldr	r3, [pc, #164]	@ (80109c0 <USBD_CDC_DeInit+0x100>)
 801091c:	781b      	ldrb	r3, [r3, #0]
 801091e:	4619      	mov	r1, r3
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f002 fa8a 	bl	8012e3a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8010926:	4b26      	ldr	r3, [pc, #152]	@ (80109c0 <USBD_CDC_DeInit+0x100>)
 8010928:	781b      	ldrb	r3, [r3, #0]
 801092a:	f003 020f 	and.w	r2, r3, #15
 801092e:	6879      	ldr	r1, [r7, #4]
 8010930:	4613      	mov	r3, r2
 8010932:	009b      	lsls	r3, r3, #2
 8010934:	4413      	add	r3, r2
 8010936:	009b      	lsls	r3, r3, #2
 8010938:	440b      	add	r3, r1
 801093a:	3324      	adds	r3, #36	@ 0x24
 801093c:	2200      	movs	r2, #0
 801093e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010940:	4b1f      	ldr	r3, [pc, #124]	@ (80109c0 <USBD_CDC_DeInit+0x100>)
 8010942:	781b      	ldrb	r3, [r3, #0]
 8010944:	f003 020f 	and.w	r2, r3, #15
 8010948:	6879      	ldr	r1, [r7, #4]
 801094a:	4613      	mov	r3, r2
 801094c:	009b      	lsls	r3, r3, #2
 801094e:	4413      	add	r3, r2
 8010950:	009b      	lsls	r3, r3, #2
 8010952:	440b      	add	r3, r1
 8010954:	3326      	adds	r3, #38	@ 0x26
 8010956:	2200      	movs	r2, #0
 8010958:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	32b0      	adds	r2, #176	@ 0xb0
 8010964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d01f      	beq.n	80109ac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010972:	687a      	ldr	r2, [r7, #4]
 8010974:	33b0      	adds	r3, #176	@ 0xb0
 8010976:	009b      	lsls	r3, r3, #2
 8010978:	4413      	add	r3, r2
 801097a:	685b      	ldr	r3, [r3, #4]
 801097c:	685b      	ldr	r3, [r3, #4]
 801097e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	32b0      	adds	r2, #176	@ 0xb0
 801098a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801098e:	4618      	mov	r0, r3
 8010990:	f002 fb5e 	bl	8013050 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	32b0      	adds	r2, #176	@ 0xb0
 801099e:	2100      	movs	r1, #0
 80109a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2200      	movs	r2, #0
 80109a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80109ac:	2300      	movs	r3, #0
}
 80109ae:	4618      	mov	r0, r3
 80109b0:	3708      	adds	r7, #8
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bd80      	pop	{r7, pc}
 80109b6:	bf00      	nop
 80109b8:	24000097 	.word	0x24000097
 80109bc:	24000098 	.word	0x24000098
 80109c0:	24000099 	.word	0x24000099

080109c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b086      	sub	sp, #24
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
 80109cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	32b0      	adds	r2, #176	@ 0xb0
 80109d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80109de:	2300      	movs	r3, #0
 80109e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80109e2:	2300      	movs	r3, #0
 80109e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80109e6:	2300      	movs	r3, #0
 80109e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80109ea:	693b      	ldr	r3, [r7, #16]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d101      	bne.n	80109f4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80109f0:	2303      	movs	r3, #3
 80109f2:	e0bf      	b.n	8010b74 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d050      	beq.n	8010aa2 <USBD_CDC_Setup+0xde>
 8010a00:	2b20      	cmp	r3, #32
 8010a02:	f040 80af 	bne.w	8010b64 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	88db      	ldrh	r3, [r3, #6]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d03a      	beq.n	8010a84 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	781b      	ldrb	r3, [r3, #0]
 8010a12:	b25b      	sxtb	r3, r3
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	da1b      	bge.n	8010a50 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010a1e:	687a      	ldr	r2, [r7, #4]
 8010a20:	33b0      	adds	r3, #176	@ 0xb0
 8010a22:	009b      	lsls	r3, r3, #2
 8010a24:	4413      	add	r3, r2
 8010a26:	685b      	ldr	r3, [r3, #4]
 8010a28:	689b      	ldr	r3, [r3, #8]
 8010a2a:	683a      	ldr	r2, [r7, #0]
 8010a2c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8010a2e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010a30:	683a      	ldr	r2, [r7, #0]
 8010a32:	88d2      	ldrh	r2, [r2, #6]
 8010a34:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	88db      	ldrh	r3, [r3, #6]
 8010a3a:	2b07      	cmp	r3, #7
 8010a3c:	bf28      	it	cs
 8010a3e:	2307      	movcs	r3, #7
 8010a40:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	89fa      	ldrh	r2, [r7, #14]
 8010a46:	4619      	mov	r1, r3
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	f001 fd7d 	bl	8012548 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010a4e:	e090      	b.n	8010b72 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	785a      	ldrb	r2, [r3, #1]
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	88db      	ldrh	r3, [r3, #6]
 8010a5e:	2b3f      	cmp	r3, #63	@ 0x3f
 8010a60:	d803      	bhi.n	8010a6a <USBD_CDC_Setup+0xa6>
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	88db      	ldrh	r3, [r3, #6]
 8010a66:	b2da      	uxtb	r2, r3
 8010a68:	e000      	b.n	8010a6c <USBD_CDC_Setup+0xa8>
 8010a6a:	2240      	movs	r2, #64	@ 0x40
 8010a6c:	693b      	ldr	r3, [r7, #16]
 8010a6e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8010a72:	6939      	ldr	r1, [r7, #16]
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8010a7a:	461a      	mov	r2, r3
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f001 fd8f 	bl	80125a0 <USBD_CtlPrepareRx>
      break;
 8010a82:	e076      	b.n	8010b72 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010a8a:	687a      	ldr	r2, [r7, #4]
 8010a8c:	33b0      	adds	r3, #176	@ 0xb0
 8010a8e:	009b      	lsls	r3, r3, #2
 8010a90:	4413      	add	r3, r2
 8010a92:	685b      	ldr	r3, [r3, #4]
 8010a94:	689b      	ldr	r3, [r3, #8]
 8010a96:	683a      	ldr	r2, [r7, #0]
 8010a98:	7850      	ldrb	r0, [r2, #1]
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	6839      	ldr	r1, [r7, #0]
 8010a9e:	4798      	blx	r3
      break;
 8010aa0:	e067      	b.n	8010b72 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	785b      	ldrb	r3, [r3, #1]
 8010aa6:	2b0b      	cmp	r3, #11
 8010aa8:	d851      	bhi.n	8010b4e <USBD_CDC_Setup+0x18a>
 8010aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8010ab0 <USBD_CDC_Setup+0xec>)
 8010aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ab0:	08010ae1 	.word	0x08010ae1
 8010ab4:	08010b5d 	.word	0x08010b5d
 8010ab8:	08010b4f 	.word	0x08010b4f
 8010abc:	08010b4f 	.word	0x08010b4f
 8010ac0:	08010b4f 	.word	0x08010b4f
 8010ac4:	08010b4f 	.word	0x08010b4f
 8010ac8:	08010b4f 	.word	0x08010b4f
 8010acc:	08010b4f 	.word	0x08010b4f
 8010ad0:	08010b4f 	.word	0x08010b4f
 8010ad4:	08010b4f 	.word	0x08010b4f
 8010ad8:	08010b0b 	.word	0x08010b0b
 8010adc:	08010b35 	.word	0x08010b35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010ae6:	b2db      	uxtb	r3, r3
 8010ae8:	2b03      	cmp	r3, #3
 8010aea:	d107      	bne.n	8010afc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010aec:	f107 030a 	add.w	r3, r7, #10
 8010af0:	2202      	movs	r2, #2
 8010af2:	4619      	mov	r1, r3
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f001 fd27 	bl	8012548 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010afa:	e032      	b.n	8010b62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010afc:	6839      	ldr	r1, [r7, #0]
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	f001 fca5 	bl	801244e <USBD_CtlError>
            ret = USBD_FAIL;
 8010b04:	2303      	movs	r3, #3
 8010b06:	75fb      	strb	r3, [r7, #23]
          break;
 8010b08:	e02b      	b.n	8010b62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b10:	b2db      	uxtb	r3, r3
 8010b12:	2b03      	cmp	r3, #3
 8010b14:	d107      	bne.n	8010b26 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010b16:	f107 030d 	add.w	r3, r7, #13
 8010b1a:	2201      	movs	r2, #1
 8010b1c:	4619      	mov	r1, r3
 8010b1e:	6878      	ldr	r0, [r7, #4]
 8010b20:	f001 fd12 	bl	8012548 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010b24:	e01d      	b.n	8010b62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010b26:	6839      	ldr	r1, [r7, #0]
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f001 fc90 	bl	801244e <USBD_CtlError>
            ret = USBD_FAIL;
 8010b2e:	2303      	movs	r3, #3
 8010b30:	75fb      	strb	r3, [r7, #23]
          break;
 8010b32:	e016      	b.n	8010b62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b3a:	b2db      	uxtb	r3, r3
 8010b3c:	2b03      	cmp	r3, #3
 8010b3e:	d00f      	beq.n	8010b60 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010b40:	6839      	ldr	r1, [r7, #0]
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f001 fc83 	bl	801244e <USBD_CtlError>
            ret = USBD_FAIL;
 8010b48:	2303      	movs	r3, #3
 8010b4a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010b4c:	e008      	b.n	8010b60 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010b4e:	6839      	ldr	r1, [r7, #0]
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	f001 fc7c 	bl	801244e <USBD_CtlError>
          ret = USBD_FAIL;
 8010b56:	2303      	movs	r3, #3
 8010b58:	75fb      	strb	r3, [r7, #23]
          break;
 8010b5a:	e002      	b.n	8010b62 <USBD_CDC_Setup+0x19e>
          break;
 8010b5c:	bf00      	nop
 8010b5e:	e008      	b.n	8010b72 <USBD_CDC_Setup+0x1ae>
          break;
 8010b60:	bf00      	nop
      }
      break;
 8010b62:	e006      	b.n	8010b72 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8010b64:	6839      	ldr	r1, [r7, #0]
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f001 fc71 	bl	801244e <USBD_CtlError>
      ret = USBD_FAIL;
 8010b6c:	2303      	movs	r3, #3
 8010b6e:	75fb      	strb	r3, [r7, #23]
      break;
 8010b70:	bf00      	nop
  }

  return (uint8_t)ret;
 8010b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3718      	adds	r7, #24
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}

08010b7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b084      	sub	sp, #16
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	460b      	mov	r3, r1
 8010b86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010b8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	32b0      	adds	r2, #176	@ 0xb0
 8010b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d101      	bne.n	8010ba6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8010ba2:	2303      	movs	r3, #3
 8010ba4:	e065      	b.n	8010c72 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	32b0      	adds	r2, #176	@ 0xb0
 8010bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bb4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010bb6:	78fb      	ldrb	r3, [r7, #3]
 8010bb8:	f003 020f 	and.w	r2, r3, #15
 8010bbc:	6879      	ldr	r1, [r7, #4]
 8010bbe:	4613      	mov	r3, r2
 8010bc0:	009b      	lsls	r3, r3, #2
 8010bc2:	4413      	add	r3, r2
 8010bc4:	009b      	lsls	r3, r3, #2
 8010bc6:	440b      	add	r3, r1
 8010bc8:	3318      	adds	r3, #24
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d02f      	beq.n	8010c30 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010bd0:	78fb      	ldrb	r3, [r7, #3]
 8010bd2:	f003 020f 	and.w	r2, r3, #15
 8010bd6:	6879      	ldr	r1, [r7, #4]
 8010bd8:	4613      	mov	r3, r2
 8010bda:	009b      	lsls	r3, r3, #2
 8010bdc:	4413      	add	r3, r2
 8010bde:	009b      	lsls	r3, r3, #2
 8010be0:	440b      	add	r3, r1
 8010be2:	3318      	adds	r3, #24
 8010be4:	681a      	ldr	r2, [r3, #0]
 8010be6:	78fb      	ldrb	r3, [r7, #3]
 8010be8:	f003 010f 	and.w	r1, r3, #15
 8010bec:	68f8      	ldr	r0, [r7, #12]
 8010bee:	460b      	mov	r3, r1
 8010bf0:	00db      	lsls	r3, r3, #3
 8010bf2:	440b      	add	r3, r1
 8010bf4:	009b      	lsls	r3, r3, #2
 8010bf6:	4403      	add	r3, r0
 8010bf8:	331c      	adds	r3, #28
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	fbb2 f1f3 	udiv	r1, r2, r3
 8010c00:	fb01 f303 	mul.w	r3, r1, r3
 8010c04:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d112      	bne.n	8010c30 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010c0a:	78fb      	ldrb	r3, [r7, #3]
 8010c0c:	f003 020f 	and.w	r2, r3, #15
 8010c10:	6879      	ldr	r1, [r7, #4]
 8010c12:	4613      	mov	r3, r2
 8010c14:	009b      	lsls	r3, r3, #2
 8010c16:	4413      	add	r3, r2
 8010c18:	009b      	lsls	r3, r3, #2
 8010c1a:	440b      	add	r3, r1
 8010c1c:	3318      	adds	r3, #24
 8010c1e:	2200      	movs	r2, #0
 8010c20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010c22:	78f9      	ldrb	r1, [r7, #3]
 8010c24:	2300      	movs	r3, #0
 8010c26:	2200      	movs	r2, #0
 8010c28:	6878      	ldr	r0, [r7, #4]
 8010c2a:	f002 f9ae 	bl	8012f8a <USBD_LL_Transmit>
 8010c2e:	e01f      	b.n	8010c70 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	2200      	movs	r2, #0
 8010c34:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010c3e:	687a      	ldr	r2, [r7, #4]
 8010c40:	33b0      	adds	r3, #176	@ 0xb0
 8010c42:	009b      	lsls	r3, r3, #2
 8010c44:	4413      	add	r3, r2
 8010c46:	685b      	ldr	r3, [r3, #4]
 8010c48:	691b      	ldr	r3, [r3, #16]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d010      	beq.n	8010c70 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010c54:	687a      	ldr	r2, [r7, #4]
 8010c56:	33b0      	adds	r3, #176	@ 0xb0
 8010c58:	009b      	lsls	r3, r3, #2
 8010c5a:	4413      	add	r3, r2
 8010c5c:	685b      	ldr	r3, [r3, #4]
 8010c5e:	691b      	ldr	r3, [r3, #16]
 8010c60:	68ba      	ldr	r2, [r7, #8]
 8010c62:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8010c66:	68ba      	ldr	r2, [r7, #8]
 8010c68:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8010c6c:	78fa      	ldrb	r2, [r7, #3]
 8010c6e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010c70:	2300      	movs	r3, #0
}
 8010c72:	4618      	mov	r0, r3
 8010c74:	3710      	adds	r7, #16
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}

08010c7a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010c7a:	b580      	push	{r7, lr}
 8010c7c:	b084      	sub	sp, #16
 8010c7e:	af00      	add	r7, sp, #0
 8010c80:	6078      	str	r0, [r7, #4]
 8010c82:	460b      	mov	r3, r1
 8010c84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	32b0      	adds	r2, #176	@ 0xb0
 8010c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c94:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	32b0      	adds	r2, #176	@ 0xb0
 8010ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d101      	bne.n	8010cac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010ca8:	2303      	movs	r3, #3
 8010caa:	e01a      	b.n	8010ce2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010cac:	78fb      	ldrb	r3, [r7, #3]
 8010cae:	4619      	mov	r1, r3
 8010cb0:	6878      	ldr	r0, [r7, #4]
 8010cb2:	f002 f9ac 	bl	801300e <USBD_LL_GetRxDataSize>
 8010cb6:	4602      	mov	r2, r0
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010cc4:	687a      	ldr	r2, [r7, #4]
 8010cc6:	33b0      	adds	r3, #176	@ 0xb0
 8010cc8:	009b      	lsls	r3, r3, #2
 8010cca:	4413      	add	r3, r2
 8010ccc:	685b      	ldr	r3, [r3, #4]
 8010cce:	68db      	ldr	r3, [r3, #12]
 8010cd0:	68fa      	ldr	r2, [r7, #12]
 8010cd2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8010cd6:	68fa      	ldr	r2, [r7, #12]
 8010cd8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8010cdc:	4611      	mov	r1, r2
 8010cde:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010ce0:	2300      	movs	r3, #0
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3710      	adds	r7, #16
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}

08010cea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010cea:	b580      	push	{r7, lr}
 8010cec:	b084      	sub	sp, #16
 8010cee:	af00      	add	r7, sp, #0
 8010cf0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	32b0      	adds	r2, #176	@ 0xb0
 8010cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d101      	bne.n	8010d0c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010d08:	2303      	movs	r3, #3
 8010d0a:	e024      	b.n	8010d56 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010d12:	687a      	ldr	r2, [r7, #4]
 8010d14:	33b0      	adds	r3, #176	@ 0xb0
 8010d16:	009b      	lsls	r3, r3, #2
 8010d18:	4413      	add	r3, r2
 8010d1a:	685b      	ldr	r3, [r3, #4]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d019      	beq.n	8010d54 <USBD_CDC_EP0_RxReady+0x6a>
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8010d26:	2bff      	cmp	r3, #255	@ 0xff
 8010d28:	d014      	beq.n	8010d54 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010d30:	687a      	ldr	r2, [r7, #4]
 8010d32:	33b0      	adds	r3, #176	@ 0xb0
 8010d34:	009b      	lsls	r3, r3, #2
 8010d36:	4413      	add	r3, r2
 8010d38:	685b      	ldr	r3, [r3, #4]
 8010d3a:	689b      	ldr	r3, [r3, #8]
 8010d3c:	68fa      	ldr	r2, [r7, #12]
 8010d3e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8010d42:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010d44:	68fa      	ldr	r2, [r7, #12]
 8010d46:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010d4a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	22ff      	movs	r2, #255	@ 0xff
 8010d50:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8010d54:	2300      	movs	r3, #0
}
 8010d56:	4618      	mov	r0, r3
 8010d58:	3710      	adds	r7, #16
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}
	...

08010d60 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b086      	sub	sp, #24
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010d68:	2182      	movs	r1, #130	@ 0x82
 8010d6a:	4818      	ldr	r0, [pc, #96]	@ (8010dcc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010d6c:	f000 fd0f 	bl	801178e <USBD_GetEpDesc>
 8010d70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010d72:	2101      	movs	r1, #1
 8010d74:	4815      	ldr	r0, [pc, #84]	@ (8010dcc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010d76:	f000 fd0a 	bl	801178e <USBD_GetEpDesc>
 8010d7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010d7c:	2181      	movs	r1, #129	@ 0x81
 8010d7e:	4813      	ldr	r0, [pc, #76]	@ (8010dcc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010d80:	f000 fd05 	bl	801178e <USBD_GetEpDesc>
 8010d84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010d86:	697b      	ldr	r3, [r7, #20]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d002      	beq.n	8010d92 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010d8c:	697b      	ldr	r3, [r7, #20]
 8010d8e:	2210      	movs	r2, #16
 8010d90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010d92:	693b      	ldr	r3, [r7, #16]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d006      	beq.n	8010da6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010d98:	693b      	ldr	r3, [r7, #16]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010da0:	711a      	strb	r2, [r3, #4]
 8010da2:	2200      	movs	r2, #0
 8010da4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d006      	beq.n	8010dba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	2200      	movs	r2, #0
 8010db0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010db4:	711a      	strb	r2, [r3, #4]
 8010db6:	2200      	movs	r2, #0
 8010db8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2243      	movs	r2, #67	@ 0x43
 8010dbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010dc0:	4b02      	ldr	r3, [pc, #8]	@ (8010dcc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	3718      	adds	r7, #24
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	bd80      	pop	{r7, pc}
 8010dca:	bf00      	nop
 8010dcc:	24000054 	.word	0x24000054

08010dd0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b086      	sub	sp, #24
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010dd8:	2182      	movs	r1, #130	@ 0x82
 8010dda:	4818      	ldr	r0, [pc, #96]	@ (8010e3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010ddc:	f000 fcd7 	bl	801178e <USBD_GetEpDesc>
 8010de0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010de2:	2101      	movs	r1, #1
 8010de4:	4815      	ldr	r0, [pc, #84]	@ (8010e3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010de6:	f000 fcd2 	bl	801178e <USBD_GetEpDesc>
 8010dea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010dec:	2181      	movs	r1, #129	@ 0x81
 8010dee:	4813      	ldr	r0, [pc, #76]	@ (8010e3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010df0:	f000 fccd 	bl	801178e <USBD_GetEpDesc>
 8010df4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d002      	beq.n	8010e02 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010dfc:	697b      	ldr	r3, [r7, #20]
 8010dfe:	2210      	movs	r2, #16
 8010e00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010e02:	693b      	ldr	r3, [r7, #16]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d006      	beq.n	8010e16 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010e08:	693b      	ldr	r3, [r7, #16]
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	711a      	strb	r2, [r3, #4]
 8010e0e:	2200      	movs	r2, #0
 8010e10:	f042 0202 	orr.w	r2, r2, #2
 8010e14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d006      	beq.n	8010e2a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	2200      	movs	r2, #0
 8010e20:	711a      	strb	r2, [r3, #4]
 8010e22:	2200      	movs	r2, #0
 8010e24:	f042 0202 	orr.w	r2, r2, #2
 8010e28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2243      	movs	r2, #67	@ 0x43
 8010e2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010e30:	4b02      	ldr	r3, [pc, #8]	@ (8010e3c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3718      	adds	r7, #24
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}
 8010e3a:	bf00      	nop
 8010e3c:	24000054 	.word	0x24000054

08010e40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b086      	sub	sp, #24
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010e48:	2182      	movs	r1, #130	@ 0x82
 8010e4a:	4818      	ldr	r0, [pc, #96]	@ (8010eac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010e4c:	f000 fc9f 	bl	801178e <USBD_GetEpDesc>
 8010e50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010e52:	2101      	movs	r1, #1
 8010e54:	4815      	ldr	r0, [pc, #84]	@ (8010eac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010e56:	f000 fc9a 	bl	801178e <USBD_GetEpDesc>
 8010e5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010e5c:	2181      	movs	r1, #129	@ 0x81
 8010e5e:	4813      	ldr	r0, [pc, #76]	@ (8010eac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010e60:	f000 fc95 	bl	801178e <USBD_GetEpDesc>
 8010e64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010e66:	697b      	ldr	r3, [r7, #20]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d002      	beq.n	8010e72 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010e6c:	697b      	ldr	r3, [r7, #20]
 8010e6e:	2210      	movs	r2, #16
 8010e70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010e72:	693b      	ldr	r3, [r7, #16]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d006      	beq.n	8010e86 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010e78:	693b      	ldr	r3, [r7, #16]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010e80:	711a      	strb	r2, [r3, #4]
 8010e82:	2200      	movs	r2, #0
 8010e84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d006      	beq.n	8010e9a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	2200      	movs	r2, #0
 8010e90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010e94:	711a      	strb	r2, [r3, #4]
 8010e96:	2200      	movs	r2, #0
 8010e98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	2243      	movs	r2, #67	@ 0x43
 8010e9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010ea0:	4b02      	ldr	r3, [pc, #8]	@ (8010eac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3718      	adds	r7, #24
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	bf00      	nop
 8010eac:	24000054 	.word	0x24000054

08010eb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010eb0:	b480      	push	{r7}
 8010eb2:	b083      	sub	sp, #12
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	220a      	movs	r2, #10
 8010ebc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010ebe:	4b03      	ldr	r3, [pc, #12]	@ (8010ecc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	370c      	adds	r7, #12
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eca:	4770      	bx	lr
 8010ecc:	24000010 	.word	0x24000010

08010ed0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	b083      	sub	sp, #12
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
 8010ed8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d101      	bne.n	8010ee4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010ee0:	2303      	movs	r3, #3
 8010ee2:	e009      	b.n	8010ef8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010eea:	687a      	ldr	r2, [r7, #4]
 8010eec:	33b0      	adds	r3, #176	@ 0xb0
 8010eee:	009b      	lsls	r3, r3, #2
 8010ef0:	4413      	add	r3, r2
 8010ef2:	683a      	ldr	r2, [r7, #0]
 8010ef4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8010ef6:	2300      	movs	r3, #0
}
 8010ef8:	4618      	mov	r0, r3
 8010efa:	370c      	adds	r7, #12
 8010efc:	46bd      	mov	sp, r7
 8010efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f02:	4770      	bx	lr

08010f04 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010f04:	b480      	push	{r7}
 8010f06:	b087      	sub	sp, #28
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	60f8      	str	r0, [r7, #12]
 8010f0c:	60b9      	str	r1, [r7, #8]
 8010f0e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	32b0      	adds	r2, #176	@ 0xb0
 8010f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f1e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010f20:	697b      	ldr	r3, [r7, #20]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d101      	bne.n	8010f2a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010f26:	2303      	movs	r3, #3
 8010f28:	e008      	b.n	8010f3c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8010f2a:	697b      	ldr	r3, [r7, #20]
 8010f2c:	68ba      	ldr	r2, [r7, #8]
 8010f2e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8010f32:	697b      	ldr	r3, [r7, #20]
 8010f34:	687a      	ldr	r2, [r7, #4]
 8010f36:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8010f3a:	2300      	movs	r3, #0
}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	371c      	adds	r7, #28
 8010f40:	46bd      	mov	sp, r7
 8010f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f46:	4770      	bx	lr

08010f48 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010f48:	b480      	push	{r7}
 8010f4a:	b085      	sub	sp, #20
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
 8010f50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	32b0      	adds	r2, #176	@ 0xb0
 8010f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d101      	bne.n	8010f6c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010f68:	2303      	movs	r3, #3
 8010f6a:	e004      	b.n	8010f76 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	683a      	ldr	r2, [r7, #0]
 8010f70:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8010f74:	2300      	movs	r3, #0
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	3714      	adds	r7, #20
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f80:	4770      	bx	lr
	...

08010f84 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b084      	sub	sp, #16
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	32b0      	adds	r2, #176	@ 0xb0
 8010f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f9a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	32b0      	adds	r2, #176	@ 0xb0
 8010fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d101      	bne.n	8010fb2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8010fae:	2303      	movs	r3, #3
 8010fb0:	e018      	b.n	8010fe4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	7c1b      	ldrb	r3, [r3, #16]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d10a      	bne.n	8010fd0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010fba:	4b0c      	ldr	r3, [pc, #48]	@ (8010fec <USBD_CDC_ReceivePacket+0x68>)
 8010fbc:	7819      	ldrb	r1, [r3, #0]
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010fc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010fc8:	6878      	ldr	r0, [r7, #4]
 8010fca:	f001 ffff 	bl	8012fcc <USBD_LL_PrepareReceive>
 8010fce:	e008      	b.n	8010fe2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010fd0:	4b06      	ldr	r3, [pc, #24]	@ (8010fec <USBD_CDC_ReceivePacket+0x68>)
 8010fd2:	7819      	ldrb	r1, [r3, #0]
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010fda:	2340      	movs	r3, #64	@ 0x40
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f001 fff5 	bl	8012fcc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010fe2:	2300      	movs	r3, #0
}
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	3710      	adds	r7, #16
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}
 8010fec:	24000098 	.word	0x24000098

08010ff0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b086      	sub	sp, #24
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	60f8      	str	r0, [r7, #12]
 8010ff8:	60b9      	str	r1, [r7, #8]
 8010ffa:	4613      	mov	r3, r2
 8010ffc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d101      	bne.n	8011008 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011004:	2303      	movs	r3, #3
 8011006:	e01f      	b.n	8011048 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	2200      	movs	r2, #0
 801100c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	2200      	movs	r2, #0
 8011014:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	2200      	movs	r2, #0
 801101c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d003      	beq.n	801102e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	68ba      	ldr	r2, [r7, #8]
 801102a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	2201      	movs	r2, #1
 8011032:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	79fa      	ldrb	r2, [r7, #7]
 801103a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801103c:	68f8      	ldr	r0, [r7, #12]
 801103e:	f001 fe69 	bl	8012d14 <USBD_LL_Init>
 8011042:	4603      	mov	r3, r0
 8011044:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011046:	7dfb      	ldrb	r3, [r7, #23]
}
 8011048:	4618      	mov	r0, r3
 801104a:	3718      	adds	r7, #24
 801104c:	46bd      	mov	sp, r7
 801104e:	bd80      	pop	{r7, pc}

08011050 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b084      	sub	sp, #16
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
 8011058:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801105a:	2300      	movs	r3, #0
 801105c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d101      	bne.n	8011068 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011064:	2303      	movs	r3, #3
 8011066:	e025      	b.n	80110b4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	683a      	ldr	r2, [r7, #0]
 801106c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	32ae      	adds	r2, #174	@ 0xae
 801107a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801107e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011080:	2b00      	cmp	r3, #0
 8011082:	d00f      	beq.n	80110a4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	32ae      	adds	r2, #174	@ 0xae
 801108e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011094:	f107 020e 	add.w	r2, r7, #14
 8011098:	4610      	mov	r0, r2
 801109a:	4798      	blx	r3
 801109c:	4602      	mov	r2, r0
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80110aa:	1c5a      	adds	r2, r3, #1
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80110b2:	2300      	movs	r3, #0
}
 80110b4:	4618      	mov	r0, r3
 80110b6:	3710      	adds	r7, #16
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bd80      	pop	{r7, pc}

080110bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b082      	sub	sp, #8
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f001 fe77 	bl	8012db8 <USBD_LL_Start>
 80110ca:	4603      	mov	r3, r0
}
 80110cc:	4618      	mov	r0, r3
 80110ce:	3708      	adds	r7, #8
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}

080110d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80110d4:	b480      	push	{r7}
 80110d6:	b083      	sub	sp, #12
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80110dc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80110de:	4618      	mov	r0, r3
 80110e0:	370c      	adds	r7, #12
 80110e2:	46bd      	mov	sp, r7
 80110e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e8:	4770      	bx	lr

080110ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80110ea:	b580      	push	{r7, lr}
 80110ec:	b084      	sub	sp, #16
 80110ee:	af00      	add	r7, sp, #0
 80110f0:	6078      	str	r0, [r7, #4]
 80110f2:	460b      	mov	r3, r1
 80110f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80110f6:	2300      	movs	r3, #0
 80110f8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011100:	2b00      	cmp	r3, #0
 8011102:	d009      	beq.n	8011118 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	78fa      	ldrb	r2, [r7, #3]
 801110e:	4611      	mov	r1, r2
 8011110:	6878      	ldr	r0, [r7, #4]
 8011112:	4798      	blx	r3
 8011114:	4603      	mov	r3, r0
 8011116:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011118:	7bfb      	ldrb	r3, [r7, #15]
}
 801111a:	4618      	mov	r0, r3
 801111c:	3710      	adds	r7, #16
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}

08011122 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011122:	b580      	push	{r7, lr}
 8011124:	b084      	sub	sp, #16
 8011126:	af00      	add	r7, sp, #0
 8011128:	6078      	str	r0, [r7, #4]
 801112a:	460b      	mov	r3, r1
 801112c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801112e:	2300      	movs	r3, #0
 8011130:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011138:	685b      	ldr	r3, [r3, #4]
 801113a:	78fa      	ldrb	r2, [r7, #3]
 801113c:	4611      	mov	r1, r2
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	4798      	blx	r3
 8011142:	4603      	mov	r3, r0
 8011144:	2b00      	cmp	r3, #0
 8011146:	d001      	beq.n	801114c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011148:	2303      	movs	r3, #3
 801114a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801114c:	7bfb      	ldrb	r3, [r7, #15]
}
 801114e:	4618      	mov	r0, r3
 8011150:	3710      	adds	r7, #16
 8011152:	46bd      	mov	sp, r7
 8011154:	bd80      	pop	{r7, pc}

08011156 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011156:	b580      	push	{r7, lr}
 8011158:	b084      	sub	sp, #16
 801115a:	af00      	add	r7, sp, #0
 801115c:	6078      	str	r0, [r7, #4]
 801115e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011166:	6839      	ldr	r1, [r7, #0]
 8011168:	4618      	mov	r0, r3
 801116a:	f001 f936 	bl	80123da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	2201      	movs	r2, #1
 8011172:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 801117c:	461a      	mov	r2, r3
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801118a:	f003 031f 	and.w	r3, r3, #31
 801118e:	2b02      	cmp	r3, #2
 8011190:	d01a      	beq.n	80111c8 <USBD_LL_SetupStage+0x72>
 8011192:	2b02      	cmp	r3, #2
 8011194:	d822      	bhi.n	80111dc <USBD_LL_SetupStage+0x86>
 8011196:	2b00      	cmp	r3, #0
 8011198:	d002      	beq.n	80111a0 <USBD_LL_SetupStage+0x4a>
 801119a:	2b01      	cmp	r3, #1
 801119c:	d00a      	beq.n	80111b4 <USBD_LL_SetupStage+0x5e>
 801119e:	e01d      	b.n	80111dc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80111a6:	4619      	mov	r1, r3
 80111a8:	6878      	ldr	r0, [r7, #4]
 80111aa:	f000 fb63 	bl	8011874 <USBD_StdDevReq>
 80111ae:	4603      	mov	r3, r0
 80111b0:	73fb      	strb	r3, [r7, #15]
      break;
 80111b2:	e020      	b.n	80111f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80111ba:	4619      	mov	r1, r3
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	f000 fbcb 	bl	8011958 <USBD_StdItfReq>
 80111c2:	4603      	mov	r3, r0
 80111c4:	73fb      	strb	r3, [r7, #15]
      break;
 80111c6:	e016      	b.n	80111f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80111ce:	4619      	mov	r1, r3
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f000 fc2d 	bl	8011a30 <USBD_StdEPReq>
 80111d6:	4603      	mov	r3, r0
 80111d8:	73fb      	strb	r3, [r7, #15]
      break;
 80111da:	e00c      	b.n	80111f6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80111e2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80111e6:	b2db      	uxtb	r3, r3
 80111e8:	4619      	mov	r1, r3
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f001 fe44 	bl	8012e78 <USBD_LL_StallEP>
 80111f0:	4603      	mov	r3, r0
 80111f2:	73fb      	strb	r3, [r7, #15]
      break;
 80111f4:	bf00      	nop
  }

  return ret;
 80111f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	3710      	adds	r7, #16
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}

08011200 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011200:	b580      	push	{r7, lr}
 8011202:	b086      	sub	sp, #24
 8011204:	af00      	add	r7, sp, #0
 8011206:	60f8      	str	r0, [r7, #12]
 8011208:	460b      	mov	r3, r1
 801120a:	607a      	str	r2, [r7, #4]
 801120c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801120e:	2300      	movs	r3, #0
 8011210:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8011212:	7afb      	ldrb	r3, [r7, #11]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d16e      	bne.n	80112f6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801121e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011226:	2b03      	cmp	r3, #3
 8011228:	f040 8098 	bne.w	801135c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801122c:	693b      	ldr	r3, [r7, #16]
 801122e:	689a      	ldr	r2, [r3, #8]
 8011230:	693b      	ldr	r3, [r7, #16]
 8011232:	68db      	ldr	r3, [r3, #12]
 8011234:	429a      	cmp	r2, r3
 8011236:	d913      	bls.n	8011260 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011238:	693b      	ldr	r3, [r7, #16]
 801123a:	689a      	ldr	r2, [r3, #8]
 801123c:	693b      	ldr	r3, [r7, #16]
 801123e:	68db      	ldr	r3, [r3, #12]
 8011240:	1ad2      	subs	r2, r2, r3
 8011242:	693b      	ldr	r3, [r7, #16]
 8011244:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011246:	693b      	ldr	r3, [r7, #16]
 8011248:	68da      	ldr	r2, [r3, #12]
 801124a:	693b      	ldr	r3, [r7, #16]
 801124c:	689b      	ldr	r3, [r3, #8]
 801124e:	4293      	cmp	r3, r2
 8011250:	bf28      	it	cs
 8011252:	4613      	movcs	r3, r2
 8011254:	461a      	mov	r2, r3
 8011256:	6879      	ldr	r1, [r7, #4]
 8011258:	68f8      	ldr	r0, [r7, #12]
 801125a:	f001 f9be 	bl	80125da <USBD_CtlContinueRx>
 801125e:	e07d      	b.n	801135c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011266:	f003 031f 	and.w	r3, r3, #31
 801126a:	2b02      	cmp	r3, #2
 801126c:	d014      	beq.n	8011298 <USBD_LL_DataOutStage+0x98>
 801126e:	2b02      	cmp	r3, #2
 8011270:	d81d      	bhi.n	80112ae <USBD_LL_DataOutStage+0xae>
 8011272:	2b00      	cmp	r3, #0
 8011274:	d002      	beq.n	801127c <USBD_LL_DataOutStage+0x7c>
 8011276:	2b01      	cmp	r3, #1
 8011278:	d003      	beq.n	8011282 <USBD_LL_DataOutStage+0x82>
 801127a:	e018      	b.n	80112ae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801127c:	2300      	movs	r3, #0
 801127e:	75bb      	strb	r3, [r7, #22]
            break;
 8011280:	e018      	b.n	80112b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011288:	b2db      	uxtb	r3, r3
 801128a:	4619      	mov	r1, r3
 801128c:	68f8      	ldr	r0, [r7, #12]
 801128e:	f000 fa64 	bl	801175a <USBD_CoreFindIF>
 8011292:	4603      	mov	r3, r0
 8011294:	75bb      	strb	r3, [r7, #22]
            break;
 8011296:	e00d      	b.n	80112b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801129e:	b2db      	uxtb	r3, r3
 80112a0:	4619      	mov	r1, r3
 80112a2:	68f8      	ldr	r0, [r7, #12]
 80112a4:	f000 fa66 	bl	8011774 <USBD_CoreFindEP>
 80112a8:	4603      	mov	r3, r0
 80112aa:	75bb      	strb	r3, [r7, #22]
            break;
 80112ac:	e002      	b.n	80112b4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80112ae:	2300      	movs	r3, #0
 80112b0:	75bb      	strb	r3, [r7, #22]
            break;
 80112b2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80112b4:	7dbb      	ldrb	r3, [r7, #22]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d119      	bne.n	80112ee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80112c0:	b2db      	uxtb	r3, r3
 80112c2:	2b03      	cmp	r3, #3
 80112c4:	d113      	bne.n	80112ee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80112c6:	7dba      	ldrb	r2, [r7, #22]
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	32ae      	adds	r2, #174	@ 0xae
 80112cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112d0:	691b      	ldr	r3, [r3, #16]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d00b      	beq.n	80112ee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80112d6:	7dba      	ldrb	r2, [r7, #22]
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80112de:	7dba      	ldrb	r2, [r7, #22]
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	32ae      	adds	r2, #174	@ 0xae
 80112e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112e8:	691b      	ldr	r3, [r3, #16]
 80112ea:	68f8      	ldr	r0, [r7, #12]
 80112ec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80112ee:	68f8      	ldr	r0, [r7, #12]
 80112f0:	f001 f984 	bl	80125fc <USBD_CtlSendStatus>
 80112f4:	e032      	b.n	801135c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80112f6:	7afb      	ldrb	r3, [r7, #11]
 80112f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80112fc:	b2db      	uxtb	r3, r3
 80112fe:	4619      	mov	r1, r3
 8011300:	68f8      	ldr	r0, [r7, #12]
 8011302:	f000 fa37 	bl	8011774 <USBD_CoreFindEP>
 8011306:	4603      	mov	r3, r0
 8011308:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801130a:	7dbb      	ldrb	r3, [r7, #22]
 801130c:	2bff      	cmp	r3, #255	@ 0xff
 801130e:	d025      	beq.n	801135c <USBD_LL_DataOutStage+0x15c>
 8011310:	7dbb      	ldrb	r3, [r7, #22]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d122      	bne.n	801135c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801131c:	b2db      	uxtb	r3, r3
 801131e:	2b03      	cmp	r3, #3
 8011320:	d117      	bne.n	8011352 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8011322:	7dba      	ldrb	r2, [r7, #22]
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	32ae      	adds	r2, #174	@ 0xae
 8011328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801132c:	699b      	ldr	r3, [r3, #24]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d00f      	beq.n	8011352 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8011332:	7dba      	ldrb	r2, [r7, #22]
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801133a:	7dba      	ldrb	r2, [r7, #22]
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	32ae      	adds	r2, #174	@ 0xae
 8011340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011344:	699b      	ldr	r3, [r3, #24]
 8011346:	7afa      	ldrb	r2, [r7, #11]
 8011348:	4611      	mov	r1, r2
 801134a:	68f8      	ldr	r0, [r7, #12]
 801134c:	4798      	blx	r3
 801134e:	4603      	mov	r3, r0
 8011350:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8011352:	7dfb      	ldrb	r3, [r7, #23]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d001      	beq.n	801135c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8011358:	7dfb      	ldrb	r3, [r7, #23]
 801135a:	e000      	b.n	801135e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801135c:	2300      	movs	r3, #0
}
 801135e:	4618      	mov	r0, r3
 8011360:	3718      	adds	r7, #24
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}

08011366 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011366:	b580      	push	{r7, lr}
 8011368:	b086      	sub	sp, #24
 801136a:	af00      	add	r7, sp, #0
 801136c:	60f8      	str	r0, [r7, #12]
 801136e:	460b      	mov	r3, r1
 8011370:	607a      	str	r2, [r7, #4]
 8011372:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011374:	7afb      	ldrb	r3, [r7, #11]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d16f      	bne.n	801145a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	3314      	adds	r3, #20
 801137e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011386:	2b02      	cmp	r3, #2
 8011388:	d15a      	bne.n	8011440 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	689a      	ldr	r2, [r3, #8]
 801138e:	693b      	ldr	r3, [r7, #16]
 8011390:	68db      	ldr	r3, [r3, #12]
 8011392:	429a      	cmp	r2, r3
 8011394:	d914      	bls.n	80113c0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011396:	693b      	ldr	r3, [r7, #16]
 8011398:	689a      	ldr	r2, [r3, #8]
 801139a:	693b      	ldr	r3, [r7, #16]
 801139c:	68db      	ldr	r3, [r3, #12]
 801139e:	1ad2      	subs	r2, r2, r3
 80113a0:	693b      	ldr	r3, [r7, #16]
 80113a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80113a4:	693b      	ldr	r3, [r7, #16]
 80113a6:	689b      	ldr	r3, [r3, #8]
 80113a8:	461a      	mov	r2, r3
 80113aa:	6879      	ldr	r1, [r7, #4]
 80113ac:	68f8      	ldr	r0, [r7, #12]
 80113ae:	f001 f8e6 	bl	801257e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80113b2:	2300      	movs	r3, #0
 80113b4:	2200      	movs	r2, #0
 80113b6:	2100      	movs	r1, #0
 80113b8:	68f8      	ldr	r0, [r7, #12]
 80113ba:	f001 fe07 	bl	8012fcc <USBD_LL_PrepareReceive>
 80113be:	e03f      	b.n	8011440 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80113c0:	693b      	ldr	r3, [r7, #16]
 80113c2:	68da      	ldr	r2, [r3, #12]
 80113c4:	693b      	ldr	r3, [r7, #16]
 80113c6:	689b      	ldr	r3, [r3, #8]
 80113c8:	429a      	cmp	r2, r3
 80113ca:	d11c      	bne.n	8011406 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80113cc:	693b      	ldr	r3, [r7, #16]
 80113ce:	685a      	ldr	r2, [r3, #4]
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80113d4:	429a      	cmp	r2, r3
 80113d6:	d316      	bcc.n	8011406 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80113d8:	693b      	ldr	r3, [r7, #16]
 80113da:	685a      	ldr	r2, [r3, #4]
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80113e2:	429a      	cmp	r2, r3
 80113e4:	d20f      	bcs.n	8011406 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80113e6:	2200      	movs	r2, #0
 80113e8:	2100      	movs	r1, #0
 80113ea:	68f8      	ldr	r0, [r7, #12]
 80113ec:	f001 f8c7 	bl	801257e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	2200      	movs	r2, #0
 80113f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80113f8:	2300      	movs	r3, #0
 80113fa:	2200      	movs	r2, #0
 80113fc:	2100      	movs	r1, #0
 80113fe:	68f8      	ldr	r0, [r7, #12]
 8011400:	f001 fde4 	bl	8012fcc <USBD_LL_PrepareReceive>
 8011404:	e01c      	b.n	8011440 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801140c:	b2db      	uxtb	r3, r3
 801140e:	2b03      	cmp	r3, #3
 8011410:	d10f      	bne.n	8011432 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011418:	68db      	ldr	r3, [r3, #12]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d009      	beq.n	8011432 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	2200      	movs	r2, #0
 8011422:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801142c:	68db      	ldr	r3, [r3, #12]
 801142e:	68f8      	ldr	r0, [r7, #12]
 8011430:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011432:	2180      	movs	r1, #128	@ 0x80
 8011434:	68f8      	ldr	r0, [r7, #12]
 8011436:	f001 fd1f 	bl	8012e78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801143a:	68f8      	ldr	r0, [r7, #12]
 801143c:	f001 f8f1 	bl	8012622 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8011446:	2b00      	cmp	r3, #0
 8011448:	d03a      	beq.n	80114c0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801144a:	68f8      	ldr	r0, [r7, #12]
 801144c:	f7ff fe42 	bl	80110d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	2200      	movs	r2, #0
 8011454:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8011458:	e032      	b.n	80114c0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801145a:	7afb      	ldrb	r3, [r7, #11]
 801145c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011460:	b2db      	uxtb	r3, r3
 8011462:	4619      	mov	r1, r3
 8011464:	68f8      	ldr	r0, [r7, #12]
 8011466:	f000 f985 	bl	8011774 <USBD_CoreFindEP>
 801146a:	4603      	mov	r3, r0
 801146c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801146e:	7dfb      	ldrb	r3, [r7, #23]
 8011470:	2bff      	cmp	r3, #255	@ 0xff
 8011472:	d025      	beq.n	80114c0 <USBD_LL_DataInStage+0x15a>
 8011474:	7dfb      	ldrb	r3, [r7, #23]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d122      	bne.n	80114c0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011480:	b2db      	uxtb	r3, r3
 8011482:	2b03      	cmp	r3, #3
 8011484:	d11c      	bne.n	80114c0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011486:	7dfa      	ldrb	r2, [r7, #23]
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	32ae      	adds	r2, #174	@ 0xae
 801148c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011490:	695b      	ldr	r3, [r3, #20]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d014      	beq.n	80114c0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8011496:	7dfa      	ldrb	r2, [r7, #23]
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801149e:	7dfa      	ldrb	r2, [r7, #23]
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	32ae      	adds	r2, #174	@ 0xae
 80114a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114a8:	695b      	ldr	r3, [r3, #20]
 80114aa:	7afa      	ldrb	r2, [r7, #11]
 80114ac:	4611      	mov	r1, r2
 80114ae:	68f8      	ldr	r0, [r7, #12]
 80114b0:	4798      	blx	r3
 80114b2:	4603      	mov	r3, r0
 80114b4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80114b6:	7dbb      	ldrb	r3, [r7, #22]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d001      	beq.n	80114c0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80114bc:	7dbb      	ldrb	r3, [r7, #22]
 80114be:	e000      	b.n	80114c2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80114c0:	2300      	movs	r3, #0
}
 80114c2:	4618      	mov	r0, r3
 80114c4:	3718      	adds	r7, #24
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}

080114ca <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80114ca:	b580      	push	{r7, lr}
 80114cc:	b084      	sub	sp, #16
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80114d2:	2300      	movs	r3, #0
 80114d4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	2201      	movs	r2, #1
 80114da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	2200      	movs	r2, #0
 80114e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	2200      	movs	r2, #0
 80114ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	2200      	movs	r2, #0
 80114f0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2200      	movs	r2, #0
 80114f8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011502:	2b00      	cmp	r3, #0
 8011504:	d014      	beq.n	8011530 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801150c:	685b      	ldr	r3, [r3, #4]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d00e      	beq.n	8011530 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	687a      	ldr	r2, [r7, #4]
 801151c:	6852      	ldr	r2, [r2, #4]
 801151e:	b2d2      	uxtb	r2, r2
 8011520:	4611      	mov	r1, r2
 8011522:	6878      	ldr	r0, [r7, #4]
 8011524:	4798      	blx	r3
 8011526:	4603      	mov	r3, r0
 8011528:	2b00      	cmp	r3, #0
 801152a:	d001      	beq.n	8011530 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801152c:	2303      	movs	r3, #3
 801152e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011530:	2340      	movs	r3, #64	@ 0x40
 8011532:	2200      	movs	r2, #0
 8011534:	2100      	movs	r1, #0
 8011536:	6878      	ldr	r0, [r7, #4]
 8011538:	f001 fc59 	bl	8012dee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2201      	movs	r2, #1
 8011540:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	2240      	movs	r2, #64	@ 0x40
 8011548:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801154c:	2340      	movs	r3, #64	@ 0x40
 801154e:	2200      	movs	r2, #0
 8011550:	2180      	movs	r1, #128	@ 0x80
 8011552:	6878      	ldr	r0, [r7, #4]
 8011554:	f001 fc4b 	bl	8012dee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2201      	movs	r2, #1
 801155c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	2240      	movs	r2, #64	@ 0x40
 8011562:	621a      	str	r2, [r3, #32]

  return ret;
 8011564:	7bfb      	ldrb	r3, [r7, #15]
}
 8011566:	4618      	mov	r0, r3
 8011568:	3710      	adds	r7, #16
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}

0801156e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801156e:	b480      	push	{r7}
 8011570:	b083      	sub	sp, #12
 8011572:	af00      	add	r7, sp, #0
 8011574:	6078      	str	r0, [r7, #4]
 8011576:	460b      	mov	r3, r1
 8011578:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	78fa      	ldrb	r2, [r7, #3]
 801157e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011580:	2300      	movs	r3, #0
}
 8011582:	4618      	mov	r0, r3
 8011584:	370c      	adds	r7, #12
 8011586:	46bd      	mov	sp, r7
 8011588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158c:	4770      	bx	lr

0801158e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801158e:	b480      	push	{r7}
 8011590:	b083      	sub	sp, #12
 8011592:	af00      	add	r7, sp, #0
 8011594:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801159c:	b2db      	uxtb	r3, r3
 801159e:	2b04      	cmp	r3, #4
 80115a0:	d006      	beq.n	80115b0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80115a8:	b2da      	uxtb	r2, r3
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	2204      	movs	r2, #4
 80115b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80115b8:	2300      	movs	r3, #0
}
 80115ba:	4618      	mov	r0, r3
 80115bc:	370c      	adds	r7, #12
 80115be:	46bd      	mov	sp, r7
 80115c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c4:	4770      	bx	lr

080115c6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80115c6:	b480      	push	{r7}
 80115c8:	b083      	sub	sp, #12
 80115ca:	af00      	add	r7, sp, #0
 80115cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80115d4:	b2db      	uxtb	r3, r3
 80115d6:	2b04      	cmp	r3, #4
 80115d8:	d106      	bne.n	80115e8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80115e0:	b2da      	uxtb	r2, r3
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80115e8:	2300      	movs	r3, #0
}
 80115ea:	4618      	mov	r0, r3
 80115ec:	370c      	adds	r7, #12
 80115ee:	46bd      	mov	sp, r7
 80115f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f4:	4770      	bx	lr

080115f6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80115f6:	b580      	push	{r7, lr}
 80115f8:	b082      	sub	sp, #8
 80115fa:	af00      	add	r7, sp, #0
 80115fc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011604:	b2db      	uxtb	r3, r3
 8011606:	2b03      	cmp	r3, #3
 8011608:	d110      	bne.n	801162c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011610:	2b00      	cmp	r3, #0
 8011612:	d00b      	beq.n	801162c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801161a:	69db      	ldr	r3, [r3, #28]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d005      	beq.n	801162c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011626:	69db      	ldr	r3, [r3, #28]
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801162c:	2300      	movs	r3, #0
}
 801162e:	4618      	mov	r0, r3
 8011630:	3708      	adds	r7, #8
 8011632:	46bd      	mov	sp, r7
 8011634:	bd80      	pop	{r7, pc}

08011636 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011636:	b580      	push	{r7, lr}
 8011638:	b082      	sub	sp, #8
 801163a:	af00      	add	r7, sp, #0
 801163c:	6078      	str	r0, [r7, #4]
 801163e:	460b      	mov	r3, r1
 8011640:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	32ae      	adds	r2, #174	@ 0xae
 801164c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d101      	bne.n	8011658 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8011654:	2303      	movs	r3, #3
 8011656:	e01c      	b.n	8011692 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801165e:	b2db      	uxtb	r3, r3
 8011660:	2b03      	cmp	r3, #3
 8011662:	d115      	bne.n	8011690 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	32ae      	adds	r2, #174	@ 0xae
 801166e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011672:	6a1b      	ldr	r3, [r3, #32]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d00b      	beq.n	8011690 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	32ae      	adds	r2, #174	@ 0xae
 8011682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011686:	6a1b      	ldr	r3, [r3, #32]
 8011688:	78fa      	ldrb	r2, [r7, #3]
 801168a:	4611      	mov	r1, r2
 801168c:	6878      	ldr	r0, [r7, #4]
 801168e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011690:	2300      	movs	r3, #0
}
 8011692:	4618      	mov	r0, r3
 8011694:	3708      	adds	r7, #8
 8011696:	46bd      	mov	sp, r7
 8011698:	bd80      	pop	{r7, pc}

0801169a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801169a:	b580      	push	{r7, lr}
 801169c:	b082      	sub	sp, #8
 801169e:	af00      	add	r7, sp, #0
 80116a0:	6078      	str	r0, [r7, #4]
 80116a2:	460b      	mov	r3, r1
 80116a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	32ae      	adds	r2, #174	@ 0xae
 80116b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d101      	bne.n	80116bc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80116b8:	2303      	movs	r3, #3
 80116ba:	e01c      	b.n	80116f6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80116c2:	b2db      	uxtb	r3, r3
 80116c4:	2b03      	cmp	r3, #3
 80116c6:	d115      	bne.n	80116f4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	32ae      	adds	r2, #174	@ 0xae
 80116d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d00b      	beq.n	80116f4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	32ae      	adds	r2, #174	@ 0xae
 80116e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116ec:	78fa      	ldrb	r2, [r7, #3]
 80116ee:	4611      	mov	r1, r2
 80116f0:	6878      	ldr	r0, [r7, #4]
 80116f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80116f4:	2300      	movs	r3, #0
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3708      	adds	r7, #8
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}

080116fe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80116fe:	b480      	push	{r7}
 8011700:	b083      	sub	sp, #12
 8011702:	af00      	add	r7, sp, #0
 8011704:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011706:	2300      	movs	r3, #0
}
 8011708:	4618      	mov	r0, r3
 801170a:	370c      	adds	r7, #12
 801170c:	46bd      	mov	sp, r7
 801170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011712:	4770      	bx	lr

08011714 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b084      	sub	sp, #16
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801171c:	2300      	movs	r3, #0
 801171e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	2201      	movs	r2, #1
 8011724:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801172e:	2b00      	cmp	r3, #0
 8011730:	d00e      	beq.n	8011750 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011738:	685b      	ldr	r3, [r3, #4]
 801173a:	687a      	ldr	r2, [r7, #4]
 801173c:	6852      	ldr	r2, [r2, #4]
 801173e:	b2d2      	uxtb	r2, r2
 8011740:	4611      	mov	r1, r2
 8011742:	6878      	ldr	r0, [r7, #4]
 8011744:	4798      	blx	r3
 8011746:	4603      	mov	r3, r0
 8011748:	2b00      	cmp	r3, #0
 801174a:	d001      	beq.n	8011750 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801174c:	2303      	movs	r3, #3
 801174e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011750:	7bfb      	ldrb	r3, [r7, #15]
}
 8011752:	4618      	mov	r0, r3
 8011754:	3710      	adds	r7, #16
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}

0801175a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801175a:	b480      	push	{r7}
 801175c:	b083      	sub	sp, #12
 801175e:	af00      	add	r7, sp, #0
 8011760:	6078      	str	r0, [r7, #4]
 8011762:	460b      	mov	r3, r1
 8011764:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011766:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011768:	4618      	mov	r0, r3
 801176a:	370c      	adds	r7, #12
 801176c:	46bd      	mov	sp, r7
 801176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011772:	4770      	bx	lr

08011774 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011774:	b480      	push	{r7}
 8011776:	b083      	sub	sp, #12
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
 801177c:	460b      	mov	r3, r1
 801177e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011780:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011782:	4618      	mov	r0, r3
 8011784:	370c      	adds	r7, #12
 8011786:	46bd      	mov	sp, r7
 8011788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178c:	4770      	bx	lr

0801178e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801178e:	b580      	push	{r7, lr}
 8011790:	b086      	sub	sp, #24
 8011792:	af00      	add	r7, sp, #0
 8011794:	6078      	str	r0, [r7, #4]
 8011796:	460b      	mov	r3, r1
 8011798:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80117a2:	2300      	movs	r3, #0
 80117a4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	885b      	ldrh	r3, [r3, #2]
 80117aa:	b29b      	uxth	r3, r3
 80117ac:	68fa      	ldr	r2, [r7, #12]
 80117ae:	7812      	ldrb	r2, [r2, #0]
 80117b0:	4293      	cmp	r3, r2
 80117b2:	d91f      	bls.n	80117f4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	781b      	ldrb	r3, [r3, #0]
 80117b8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80117ba:	e013      	b.n	80117e4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80117bc:	f107 030a 	add.w	r3, r7, #10
 80117c0:	4619      	mov	r1, r3
 80117c2:	6978      	ldr	r0, [r7, #20]
 80117c4:	f000 f81b 	bl	80117fe <USBD_GetNextDesc>
 80117c8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80117ca:	697b      	ldr	r3, [r7, #20]
 80117cc:	785b      	ldrb	r3, [r3, #1]
 80117ce:	2b05      	cmp	r3, #5
 80117d0:	d108      	bne.n	80117e4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80117d2:	697b      	ldr	r3, [r7, #20]
 80117d4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80117d6:	693b      	ldr	r3, [r7, #16]
 80117d8:	789b      	ldrb	r3, [r3, #2]
 80117da:	78fa      	ldrb	r2, [r7, #3]
 80117dc:	429a      	cmp	r2, r3
 80117de:	d008      	beq.n	80117f2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80117e0:	2300      	movs	r3, #0
 80117e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	885b      	ldrh	r3, [r3, #2]
 80117e8:	b29a      	uxth	r2, r3
 80117ea:	897b      	ldrh	r3, [r7, #10]
 80117ec:	429a      	cmp	r2, r3
 80117ee:	d8e5      	bhi.n	80117bc <USBD_GetEpDesc+0x2e>
 80117f0:	e000      	b.n	80117f4 <USBD_GetEpDesc+0x66>
          break;
 80117f2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80117f4:	693b      	ldr	r3, [r7, #16]
}
 80117f6:	4618      	mov	r0, r3
 80117f8:	3718      	adds	r7, #24
 80117fa:	46bd      	mov	sp, r7
 80117fc:	bd80      	pop	{r7, pc}

080117fe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80117fe:	b480      	push	{r7}
 8011800:	b085      	sub	sp, #20
 8011802:	af00      	add	r7, sp, #0
 8011804:	6078      	str	r0, [r7, #4]
 8011806:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801180c:	683b      	ldr	r3, [r7, #0]
 801180e:	881b      	ldrh	r3, [r3, #0]
 8011810:	68fa      	ldr	r2, [r7, #12]
 8011812:	7812      	ldrb	r2, [r2, #0]
 8011814:	4413      	add	r3, r2
 8011816:	b29a      	uxth	r2, r3
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	781b      	ldrb	r3, [r3, #0]
 8011820:	461a      	mov	r2, r3
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	4413      	add	r3, r2
 8011826:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011828:	68fb      	ldr	r3, [r7, #12]
}
 801182a:	4618      	mov	r0, r3
 801182c:	3714      	adds	r7, #20
 801182e:	46bd      	mov	sp, r7
 8011830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011834:	4770      	bx	lr

08011836 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011836:	b480      	push	{r7}
 8011838:	b087      	sub	sp, #28
 801183a:	af00      	add	r7, sp, #0
 801183c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	781b      	ldrb	r3, [r3, #0]
 8011846:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011848:	697b      	ldr	r3, [r7, #20]
 801184a:	3301      	adds	r3, #1
 801184c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801184e:	697b      	ldr	r3, [r7, #20]
 8011850:	781b      	ldrb	r3, [r3, #0]
 8011852:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011854:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011858:	021b      	lsls	r3, r3, #8
 801185a:	b21a      	sxth	r2, r3
 801185c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011860:	4313      	orrs	r3, r2
 8011862:	b21b      	sxth	r3, r3
 8011864:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011866:	89fb      	ldrh	r3, [r7, #14]
}
 8011868:	4618      	mov	r0, r3
 801186a:	371c      	adds	r7, #28
 801186c:	46bd      	mov	sp, r7
 801186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011872:	4770      	bx	lr

08011874 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b084      	sub	sp, #16
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801187e:	2300      	movs	r3, #0
 8011880:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	781b      	ldrb	r3, [r3, #0]
 8011886:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801188a:	2b40      	cmp	r3, #64	@ 0x40
 801188c:	d005      	beq.n	801189a <USBD_StdDevReq+0x26>
 801188e:	2b40      	cmp	r3, #64	@ 0x40
 8011890:	d857      	bhi.n	8011942 <USBD_StdDevReq+0xce>
 8011892:	2b00      	cmp	r3, #0
 8011894:	d00f      	beq.n	80118b6 <USBD_StdDevReq+0x42>
 8011896:	2b20      	cmp	r3, #32
 8011898:	d153      	bne.n	8011942 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	32ae      	adds	r2, #174	@ 0xae
 80118a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118a8:	689b      	ldr	r3, [r3, #8]
 80118aa:	6839      	ldr	r1, [r7, #0]
 80118ac:	6878      	ldr	r0, [r7, #4]
 80118ae:	4798      	blx	r3
 80118b0:	4603      	mov	r3, r0
 80118b2:	73fb      	strb	r3, [r7, #15]
      break;
 80118b4:	e04a      	b.n	801194c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	785b      	ldrb	r3, [r3, #1]
 80118ba:	2b09      	cmp	r3, #9
 80118bc:	d83b      	bhi.n	8011936 <USBD_StdDevReq+0xc2>
 80118be:	a201      	add	r2, pc, #4	@ (adr r2, 80118c4 <USBD_StdDevReq+0x50>)
 80118c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118c4:	08011919 	.word	0x08011919
 80118c8:	0801192d 	.word	0x0801192d
 80118cc:	08011937 	.word	0x08011937
 80118d0:	08011923 	.word	0x08011923
 80118d4:	08011937 	.word	0x08011937
 80118d8:	080118f7 	.word	0x080118f7
 80118dc:	080118ed 	.word	0x080118ed
 80118e0:	08011937 	.word	0x08011937
 80118e4:	0801190f 	.word	0x0801190f
 80118e8:	08011901 	.word	0x08011901
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80118ec:	6839      	ldr	r1, [r7, #0]
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f000 fa3c 	bl	8011d6c <USBD_GetDescriptor>
          break;
 80118f4:	e024      	b.n	8011940 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80118f6:	6839      	ldr	r1, [r7, #0]
 80118f8:	6878      	ldr	r0, [r7, #4]
 80118fa:	f000 fbcb 	bl	8012094 <USBD_SetAddress>
          break;
 80118fe:	e01f      	b.n	8011940 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011900:	6839      	ldr	r1, [r7, #0]
 8011902:	6878      	ldr	r0, [r7, #4]
 8011904:	f000 fc0a 	bl	801211c <USBD_SetConfig>
 8011908:	4603      	mov	r3, r0
 801190a:	73fb      	strb	r3, [r7, #15]
          break;
 801190c:	e018      	b.n	8011940 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801190e:	6839      	ldr	r1, [r7, #0]
 8011910:	6878      	ldr	r0, [r7, #4]
 8011912:	f000 fcad 	bl	8012270 <USBD_GetConfig>
          break;
 8011916:	e013      	b.n	8011940 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011918:	6839      	ldr	r1, [r7, #0]
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f000 fcde 	bl	80122dc <USBD_GetStatus>
          break;
 8011920:	e00e      	b.n	8011940 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011922:	6839      	ldr	r1, [r7, #0]
 8011924:	6878      	ldr	r0, [r7, #4]
 8011926:	f000 fd0d 	bl	8012344 <USBD_SetFeature>
          break;
 801192a:	e009      	b.n	8011940 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801192c:	6839      	ldr	r1, [r7, #0]
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f000 fd31 	bl	8012396 <USBD_ClrFeature>
          break;
 8011934:	e004      	b.n	8011940 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011936:	6839      	ldr	r1, [r7, #0]
 8011938:	6878      	ldr	r0, [r7, #4]
 801193a:	f000 fd88 	bl	801244e <USBD_CtlError>
          break;
 801193e:	bf00      	nop
      }
      break;
 8011940:	e004      	b.n	801194c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011942:	6839      	ldr	r1, [r7, #0]
 8011944:	6878      	ldr	r0, [r7, #4]
 8011946:	f000 fd82 	bl	801244e <USBD_CtlError>
      break;
 801194a:	bf00      	nop
  }

  return ret;
 801194c:	7bfb      	ldrb	r3, [r7, #15]
}
 801194e:	4618      	mov	r0, r3
 8011950:	3710      	adds	r7, #16
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
 8011956:	bf00      	nop

08011958 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b084      	sub	sp, #16
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
 8011960:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011962:	2300      	movs	r3, #0
 8011964:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011966:	683b      	ldr	r3, [r7, #0]
 8011968:	781b      	ldrb	r3, [r3, #0]
 801196a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801196e:	2b40      	cmp	r3, #64	@ 0x40
 8011970:	d005      	beq.n	801197e <USBD_StdItfReq+0x26>
 8011972:	2b40      	cmp	r3, #64	@ 0x40
 8011974:	d852      	bhi.n	8011a1c <USBD_StdItfReq+0xc4>
 8011976:	2b00      	cmp	r3, #0
 8011978:	d001      	beq.n	801197e <USBD_StdItfReq+0x26>
 801197a:	2b20      	cmp	r3, #32
 801197c:	d14e      	bne.n	8011a1c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011984:	b2db      	uxtb	r3, r3
 8011986:	3b01      	subs	r3, #1
 8011988:	2b02      	cmp	r3, #2
 801198a:	d840      	bhi.n	8011a0e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	889b      	ldrh	r3, [r3, #4]
 8011990:	b2db      	uxtb	r3, r3
 8011992:	2b01      	cmp	r3, #1
 8011994:	d836      	bhi.n	8011a04 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011996:	683b      	ldr	r3, [r7, #0]
 8011998:	889b      	ldrh	r3, [r3, #4]
 801199a:	b2db      	uxtb	r3, r3
 801199c:	4619      	mov	r1, r3
 801199e:	6878      	ldr	r0, [r7, #4]
 80119a0:	f7ff fedb 	bl	801175a <USBD_CoreFindIF>
 80119a4:	4603      	mov	r3, r0
 80119a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80119a8:	7bbb      	ldrb	r3, [r7, #14]
 80119aa:	2bff      	cmp	r3, #255	@ 0xff
 80119ac:	d01d      	beq.n	80119ea <USBD_StdItfReq+0x92>
 80119ae:	7bbb      	ldrb	r3, [r7, #14]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d11a      	bne.n	80119ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80119b4:	7bba      	ldrb	r2, [r7, #14]
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	32ae      	adds	r2, #174	@ 0xae
 80119ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119be:	689b      	ldr	r3, [r3, #8]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d00f      	beq.n	80119e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80119c4:	7bba      	ldrb	r2, [r7, #14]
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80119cc:	7bba      	ldrb	r2, [r7, #14]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	32ae      	adds	r2, #174	@ 0xae
 80119d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119d6:	689b      	ldr	r3, [r3, #8]
 80119d8:	6839      	ldr	r1, [r7, #0]
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	4798      	blx	r3
 80119de:	4603      	mov	r3, r0
 80119e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80119e2:	e004      	b.n	80119ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80119e4:	2303      	movs	r3, #3
 80119e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80119e8:	e001      	b.n	80119ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80119ea:	2303      	movs	r3, #3
 80119ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80119ee:	683b      	ldr	r3, [r7, #0]
 80119f0:	88db      	ldrh	r3, [r3, #6]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d110      	bne.n	8011a18 <USBD_StdItfReq+0xc0>
 80119f6:	7bfb      	ldrb	r3, [r7, #15]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d10d      	bne.n	8011a18 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80119fc:	6878      	ldr	r0, [r7, #4]
 80119fe:	f000 fdfd 	bl	80125fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011a02:	e009      	b.n	8011a18 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011a04:	6839      	ldr	r1, [r7, #0]
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f000 fd21 	bl	801244e <USBD_CtlError>
          break;
 8011a0c:	e004      	b.n	8011a18 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011a0e:	6839      	ldr	r1, [r7, #0]
 8011a10:	6878      	ldr	r0, [r7, #4]
 8011a12:	f000 fd1c 	bl	801244e <USBD_CtlError>
          break;
 8011a16:	e000      	b.n	8011a1a <USBD_StdItfReq+0xc2>
          break;
 8011a18:	bf00      	nop
      }
      break;
 8011a1a:	e004      	b.n	8011a26 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011a1c:	6839      	ldr	r1, [r7, #0]
 8011a1e:	6878      	ldr	r0, [r7, #4]
 8011a20:	f000 fd15 	bl	801244e <USBD_CtlError>
      break;
 8011a24:	bf00      	nop
  }

  return ret;
 8011a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3710      	adds	r7, #16
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}

08011a30 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b084      	sub	sp, #16
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
 8011a38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	889b      	ldrh	r3, [r3, #4]
 8011a42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	781b      	ldrb	r3, [r3, #0]
 8011a48:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011a4c:	2b40      	cmp	r3, #64	@ 0x40
 8011a4e:	d007      	beq.n	8011a60 <USBD_StdEPReq+0x30>
 8011a50:	2b40      	cmp	r3, #64	@ 0x40
 8011a52:	f200 817f 	bhi.w	8011d54 <USBD_StdEPReq+0x324>
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d02a      	beq.n	8011ab0 <USBD_StdEPReq+0x80>
 8011a5a:	2b20      	cmp	r3, #32
 8011a5c:	f040 817a 	bne.w	8011d54 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011a60:	7bbb      	ldrb	r3, [r7, #14]
 8011a62:	4619      	mov	r1, r3
 8011a64:	6878      	ldr	r0, [r7, #4]
 8011a66:	f7ff fe85 	bl	8011774 <USBD_CoreFindEP>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011a6e:	7b7b      	ldrb	r3, [r7, #13]
 8011a70:	2bff      	cmp	r3, #255	@ 0xff
 8011a72:	f000 8174 	beq.w	8011d5e <USBD_StdEPReq+0x32e>
 8011a76:	7b7b      	ldrb	r3, [r7, #13]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	f040 8170 	bne.w	8011d5e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011a7e:	7b7a      	ldrb	r2, [r7, #13]
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011a86:	7b7a      	ldrb	r2, [r7, #13]
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	32ae      	adds	r2, #174	@ 0xae
 8011a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a90:	689b      	ldr	r3, [r3, #8]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	f000 8163 	beq.w	8011d5e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011a98:	7b7a      	ldrb	r2, [r7, #13]
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	32ae      	adds	r2, #174	@ 0xae
 8011a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011aa2:	689b      	ldr	r3, [r3, #8]
 8011aa4:	6839      	ldr	r1, [r7, #0]
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	4798      	blx	r3
 8011aaa:	4603      	mov	r3, r0
 8011aac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011aae:	e156      	b.n	8011d5e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011ab0:	683b      	ldr	r3, [r7, #0]
 8011ab2:	785b      	ldrb	r3, [r3, #1]
 8011ab4:	2b03      	cmp	r3, #3
 8011ab6:	d008      	beq.n	8011aca <USBD_StdEPReq+0x9a>
 8011ab8:	2b03      	cmp	r3, #3
 8011aba:	f300 8145 	bgt.w	8011d48 <USBD_StdEPReq+0x318>
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	f000 809b 	beq.w	8011bfa <USBD_StdEPReq+0x1ca>
 8011ac4:	2b01      	cmp	r3, #1
 8011ac6:	d03c      	beq.n	8011b42 <USBD_StdEPReq+0x112>
 8011ac8:	e13e      	b.n	8011d48 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ad0:	b2db      	uxtb	r3, r3
 8011ad2:	2b02      	cmp	r3, #2
 8011ad4:	d002      	beq.n	8011adc <USBD_StdEPReq+0xac>
 8011ad6:	2b03      	cmp	r3, #3
 8011ad8:	d016      	beq.n	8011b08 <USBD_StdEPReq+0xd8>
 8011ada:	e02c      	b.n	8011b36 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011adc:	7bbb      	ldrb	r3, [r7, #14]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d00d      	beq.n	8011afe <USBD_StdEPReq+0xce>
 8011ae2:	7bbb      	ldrb	r3, [r7, #14]
 8011ae4:	2b80      	cmp	r3, #128	@ 0x80
 8011ae6:	d00a      	beq.n	8011afe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011ae8:	7bbb      	ldrb	r3, [r7, #14]
 8011aea:	4619      	mov	r1, r3
 8011aec:	6878      	ldr	r0, [r7, #4]
 8011aee:	f001 f9c3 	bl	8012e78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011af2:	2180      	movs	r1, #128	@ 0x80
 8011af4:	6878      	ldr	r0, [r7, #4]
 8011af6:	f001 f9bf 	bl	8012e78 <USBD_LL_StallEP>
 8011afa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011afc:	e020      	b.n	8011b40 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011afe:	6839      	ldr	r1, [r7, #0]
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f000 fca4 	bl	801244e <USBD_CtlError>
              break;
 8011b06:	e01b      	b.n	8011b40 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011b08:	683b      	ldr	r3, [r7, #0]
 8011b0a:	885b      	ldrh	r3, [r3, #2]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d10e      	bne.n	8011b2e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011b10:	7bbb      	ldrb	r3, [r7, #14]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d00b      	beq.n	8011b2e <USBD_StdEPReq+0xfe>
 8011b16:	7bbb      	ldrb	r3, [r7, #14]
 8011b18:	2b80      	cmp	r3, #128	@ 0x80
 8011b1a:	d008      	beq.n	8011b2e <USBD_StdEPReq+0xfe>
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	88db      	ldrh	r3, [r3, #6]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d104      	bne.n	8011b2e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011b24:	7bbb      	ldrb	r3, [r7, #14]
 8011b26:	4619      	mov	r1, r3
 8011b28:	6878      	ldr	r0, [r7, #4]
 8011b2a:	f001 f9a5 	bl	8012e78 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011b2e:	6878      	ldr	r0, [r7, #4]
 8011b30:	f000 fd64 	bl	80125fc <USBD_CtlSendStatus>

              break;
 8011b34:	e004      	b.n	8011b40 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011b36:	6839      	ldr	r1, [r7, #0]
 8011b38:	6878      	ldr	r0, [r7, #4]
 8011b3a:	f000 fc88 	bl	801244e <USBD_CtlError>
              break;
 8011b3e:	bf00      	nop
          }
          break;
 8011b40:	e107      	b.n	8011d52 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011b48:	b2db      	uxtb	r3, r3
 8011b4a:	2b02      	cmp	r3, #2
 8011b4c:	d002      	beq.n	8011b54 <USBD_StdEPReq+0x124>
 8011b4e:	2b03      	cmp	r3, #3
 8011b50:	d016      	beq.n	8011b80 <USBD_StdEPReq+0x150>
 8011b52:	e04b      	b.n	8011bec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011b54:	7bbb      	ldrb	r3, [r7, #14]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d00d      	beq.n	8011b76 <USBD_StdEPReq+0x146>
 8011b5a:	7bbb      	ldrb	r3, [r7, #14]
 8011b5c:	2b80      	cmp	r3, #128	@ 0x80
 8011b5e:	d00a      	beq.n	8011b76 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011b60:	7bbb      	ldrb	r3, [r7, #14]
 8011b62:	4619      	mov	r1, r3
 8011b64:	6878      	ldr	r0, [r7, #4]
 8011b66:	f001 f987 	bl	8012e78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011b6a:	2180      	movs	r1, #128	@ 0x80
 8011b6c:	6878      	ldr	r0, [r7, #4]
 8011b6e:	f001 f983 	bl	8012e78 <USBD_LL_StallEP>
 8011b72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011b74:	e040      	b.n	8011bf8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011b76:	6839      	ldr	r1, [r7, #0]
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f000 fc68 	bl	801244e <USBD_CtlError>
              break;
 8011b7e:	e03b      	b.n	8011bf8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011b80:	683b      	ldr	r3, [r7, #0]
 8011b82:	885b      	ldrh	r3, [r3, #2]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d136      	bne.n	8011bf6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011b88:	7bbb      	ldrb	r3, [r7, #14]
 8011b8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d004      	beq.n	8011b9c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011b92:	7bbb      	ldrb	r3, [r7, #14]
 8011b94:	4619      	mov	r1, r3
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f001 f98d 	bl	8012eb6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011b9c:	6878      	ldr	r0, [r7, #4]
 8011b9e:	f000 fd2d 	bl	80125fc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011ba2:	7bbb      	ldrb	r3, [r7, #14]
 8011ba4:	4619      	mov	r1, r3
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	f7ff fde4 	bl	8011774 <USBD_CoreFindEP>
 8011bac:	4603      	mov	r3, r0
 8011bae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011bb0:	7b7b      	ldrb	r3, [r7, #13]
 8011bb2:	2bff      	cmp	r3, #255	@ 0xff
 8011bb4:	d01f      	beq.n	8011bf6 <USBD_StdEPReq+0x1c6>
 8011bb6:	7b7b      	ldrb	r3, [r7, #13]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d11c      	bne.n	8011bf6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011bbc:	7b7a      	ldrb	r2, [r7, #13]
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011bc4:	7b7a      	ldrb	r2, [r7, #13]
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	32ae      	adds	r2, #174	@ 0xae
 8011bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bce:	689b      	ldr	r3, [r3, #8]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d010      	beq.n	8011bf6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011bd4:	7b7a      	ldrb	r2, [r7, #13]
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	32ae      	adds	r2, #174	@ 0xae
 8011bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bde:	689b      	ldr	r3, [r3, #8]
 8011be0:	6839      	ldr	r1, [r7, #0]
 8011be2:	6878      	ldr	r0, [r7, #4]
 8011be4:	4798      	blx	r3
 8011be6:	4603      	mov	r3, r0
 8011be8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011bea:	e004      	b.n	8011bf6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011bec:	6839      	ldr	r1, [r7, #0]
 8011bee:	6878      	ldr	r0, [r7, #4]
 8011bf0:	f000 fc2d 	bl	801244e <USBD_CtlError>
              break;
 8011bf4:	e000      	b.n	8011bf8 <USBD_StdEPReq+0x1c8>
              break;
 8011bf6:	bf00      	nop
          }
          break;
 8011bf8:	e0ab      	b.n	8011d52 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c00:	b2db      	uxtb	r3, r3
 8011c02:	2b02      	cmp	r3, #2
 8011c04:	d002      	beq.n	8011c0c <USBD_StdEPReq+0x1dc>
 8011c06:	2b03      	cmp	r3, #3
 8011c08:	d032      	beq.n	8011c70 <USBD_StdEPReq+0x240>
 8011c0a:	e097      	b.n	8011d3c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011c0c:	7bbb      	ldrb	r3, [r7, #14]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d007      	beq.n	8011c22 <USBD_StdEPReq+0x1f2>
 8011c12:	7bbb      	ldrb	r3, [r7, #14]
 8011c14:	2b80      	cmp	r3, #128	@ 0x80
 8011c16:	d004      	beq.n	8011c22 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011c18:	6839      	ldr	r1, [r7, #0]
 8011c1a:	6878      	ldr	r0, [r7, #4]
 8011c1c:	f000 fc17 	bl	801244e <USBD_CtlError>
                break;
 8011c20:	e091      	b.n	8011d46 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011c22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	da0b      	bge.n	8011c42 <USBD_StdEPReq+0x212>
 8011c2a:	7bbb      	ldrb	r3, [r7, #14]
 8011c2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011c30:	4613      	mov	r3, r2
 8011c32:	009b      	lsls	r3, r3, #2
 8011c34:	4413      	add	r3, r2
 8011c36:	009b      	lsls	r3, r3, #2
 8011c38:	3310      	adds	r3, #16
 8011c3a:	687a      	ldr	r2, [r7, #4]
 8011c3c:	4413      	add	r3, r2
 8011c3e:	3304      	adds	r3, #4
 8011c40:	e00b      	b.n	8011c5a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011c42:	7bbb      	ldrb	r3, [r7, #14]
 8011c44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011c48:	4613      	mov	r3, r2
 8011c4a:	009b      	lsls	r3, r3, #2
 8011c4c:	4413      	add	r3, r2
 8011c4e:	009b      	lsls	r3, r3, #2
 8011c50:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011c54:	687a      	ldr	r2, [r7, #4]
 8011c56:	4413      	add	r3, r2
 8011c58:	3304      	adds	r3, #4
 8011c5a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	2200      	movs	r2, #0
 8011c60:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	2202      	movs	r2, #2
 8011c66:	4619      	mov	r1, r3
 8011c68:	6878      	ldr	r0, [r7, #4]
 8011c6a:	f000 fc6d 	bl	8012548 <USBD_CtlSendData>
              break;
 8011c6e:	e06a      	b.n	8011d46 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011c70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	da11      	bge.n	8011c9c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011c78:	7bbb      	ldrb	r3, [r7, #14]
 8011c7a:	f003 020f 	and.w	r2, r3, #15
 8011c7e:	6879      	ldr	r1, [r7, #4]
 8011c80:	4613      	mov	r3, r2
 8011c82:	009b      	lsls	r3, r3, #2
 8011c84:	4413      	add	r3, r2
 8011c86:	009b      	lsls	r3, r3, #2
 8011c88:	440b      	add	r3, r1
 8011c8a:	3324      	adds	r3, #36	@ 0x24
 8011c8c:	881b      	ldrh	r3, [r3, #0]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d117      	bne.n	8011cc2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011c92:	6839      	ldr	r1, [r7, #0]
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f000 fbda 	bl	801244e <USBD_CtlError>
                  break;
 8011c9a:	e054      	b.n	8011d46 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011c9c:	7bbb      	ldrb	r3, [r7, #14]
 8011c9e:	f003 020f 	and.w	r2, r3, #15
 8011ca2:	6879      	ldr	r1, [r7, #4]
 8011ca4:	4613      	mov	r3, r2
 8011ca6:	009b      	lsls	r3, r3, #2
 8011ca8:	4413      	add	r3, r2
 8011caa:	009b      	lsls	r3, r3, #2
 8011cac:	440b      	add	r3, r1
 8011cae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011cb2:	881b      	ldrh	r3, [r3, #0]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d104      	bne.n	8011cc2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011cb8:	6839      	ldr	r1, [r7, #0]
 8011cba:	6878      	ldr	r0, [r7, #4]
 8011cbc:	f000 fbc7 	bl	801244e <USBD_CtlError>
                  break;
 8011cc0:	e041      	b.n	8011d46 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011cc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	da0b      	bge.n	8011ce2 <USBD_StdEPReq+0x2b2>
 8011cca:	7bbb      	ldrb	r3, [r7, #14]
 8011ccc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011cd0:	4613      	mov	r3, r2
 8011cd2:	009b      	lsls	r3, r3, #2
 8011cd4:	4413      	add	r3, r2
 8011cd6:	009b      	lsls	r3, r3, #2
 8011cd8:	3310      	adds	r3, #16
 8011cda:	687a      	ldr	r2, [r7, #4]
 8011cdc:	4413      	add	r3, r2
 8011cde:	3304      	adds	r3, #4
 8011ce0:	e00b      	b.n	8011cfa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011ce2:	7bbb      	ldrb	r3, [r7, #14]
 8011ce4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011ce8:	4613      	mov	r3, r2
 8011cea:	009b      	lsls	r3, r3, #2
 8011cec:	4413      	add	r3, r2
 8011cee:	009b      	lsls	r3, r3, #2
 8011cf0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011cf4:	687a      	ldr	r2, [r7, #4]
 8011cf6:	4413      	add	r3, r2
 8011cf8:	3304      	adds	r3, #4
 8011cfa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011cfc:	7bbb      	ldrb	r3, [r7, #14]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d002      	beq.n	8011d08 <USBD_StdEPReq+0x2d8>
 8011d02:	7bbb      	ldrb	r3, [r7, #14]
 8011d04:	2b80      	cmp	r3, #128	@ 0x80
 8011d06:	d103      	bne.n	8011d10 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011d08:	68bb      	ldr	r3, [r7, #8]
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	601a      	str	r2, [r3, #0]
 8011d0e:	e00e      	b.n	8011d2e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011d10:	7bbb      	ldrb	r3, [r7, #14]
 8011d12:	4619      	mov	r1, r3
 8011d14:	6878      	ldr	r0, [r7, #4]
 8011d16:	f001 f8ed 	bl	8012ef4 <USBD_LL_IsStallEP>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d003      	beq.n	8011d28 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011d20:	68bb      	ldr	r3, [r7, #8]
 8011d22:	2201      	movs	r2, #1
 8011d24:	601a      	str	r2, [r3, #0]
 8011d26:	e002      	b.n	8011d2e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011d28:	68bb      	ldr	r3, [r7, #8]
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	2202      	movs	r2, #2
 8011d32:	4619      	mov	r1, r3
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f000 fc07 	bl	8012548 <USBD_CtlSendData>
              break;
 8011d3a:	e004      	b.n	8011d46 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011d3c:	6839      	ldr	r1, [r7, #0]
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	f000 fb85 	bl	801244e <USBD_CtlError>
              break;
 8011d44:	bf00      	nop
          }
          break;
 8011d46:	e004      	b.n	8011d52 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011d48:	6839      	ldr	r1, [r7, #0]
 8011d4a:	6878      	ldr	r0, [r7, #4]
 8011d4c:	f000 fb7f 	bl	801244e <USBD_CtlError>
          break;
 8011d50:	bf00      	nop
      }
      break;
 8011d52:	e005      	b.n	8011d60 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011d54:	6839      	ldr	r1, [r7, #0]
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	f000 fb79 	bl	801244e <USBD_CtlError>
      break;
 8011d5c:	e000      	b.n	8011d60 <USBD_StdEPReq+0x330>
      break;
 8011d5e:	bf00      	nop
  }

  return ret;
 8011d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	3710      	adds	r7, #16
 8011d66:	46bd      	mov	sp, r7
 8011d68:	bd80      	pop	{r7, pc}
	...

08011d6c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b084      	sub	sp, #16
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
 8011d74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011d76:	2300      	movs	r3, #0
 8011d78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011d7e:	2300      	movs	r3, #0
 8011d80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	885b      	ldrh	r3, [r3, #2]
 8011d86:	0a1b      	lsrs	r3, r3, #8
 8011d88:	b29b      	uxth	r3, r3
 8011d8a:	3b01      	subs	r3, #1
 8011d8c:	2b0e      	cmp	r3, #14
 8011d8e:	f200 8152 	bhi.w	8012036 <USBD_GetDescriptor+0x2ca>
 8011d92:	a201      	add	r2, pc, #4	@ (adr r2, 8011d98 <USBD_GetDescriptor+0x2c>)
 8011d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d98:	08011e09 	.word	0x08011e09
 8011d9c:	08011e21 	.word	0x08011e21
 8011da0:	08011e61 	.word	0x08011e61
 8011da4:	08012037 	.word	0x08012037
 8011da8:	08012037 	.word	0x08012037
 8011dac:	08011fd7 	.word	0x08011fd7
 8011db0:	08012003 	.word	0x08012003
 8011db4:	08012037 	.word	0x08012037
 8011db8:	08012037 	.word	0x08012037
 8011dbc:	08012037 	.word	0x08012037
 8011dc0:	08012037 	.word	0x08012037
 8011dc4:	08012037 	.word	0x08012037
 8011dc8:	08012037 	.word	0x08012037
 8011dcc:	08012037 	.word	0x08012037
 8011dd0:	08011dd5 	.word	0x08011dd5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011dda:	69db      	ldr	r3, [r3, #28]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d00b      	beq.n	8011df8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011de6:	69db      	ldr	r3, [r3, #28]
 8011de8:	687a      	ldr	r2, [r7, #4]
 8011dea:	7c12      	ldrb	r2, [r2, #16]
 8011dec:	f107 0108 	add.w	r1, r7, #8
 8011df0:	4610      	mov	r0, r2
 8011df2:	4798      	blx	r3
 8011df4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011df6:	e126      	b.n	8012046 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011df8:	6839      	ldr	r1, [r7, #0]
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	f000 fb27 	bl	801244e <USBD_CtlError>
        err++;
 8011e00:	7afb      	ldrb	r3, [r7, #11]
 8011e02:	3301      	adds	r3, #1
 8011e04:	72fb      	strb	r3, [r7, #11]
      break;
 8011e06:	e11e      	b.n	8012046 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	687a      	ldr	r2, [r7, #4]
 8011e12:	7c12      	ldrb	r2, [r2, #16]
 8011e14:	f107 0108 	add.w	r1, r7, #8
 8011e18:	4610      	mov	r0, r2
 8011e1a:	4798      	blx	r3
 8011e1c:	60f8      	str	r0, [r7, #12]
      break;
 8011e1e:	e112      	b.n	8012046 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	7c1b      	ldrb	r3, [r3, #16]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d10d      	bne.n	8011e44 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e30:	f107 0208 	add.w	r2, r7, #8
 8011e34:	4610      	mov	r0, r2
 8011e36:	4798      	blx	r3
 8011e38:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	3301      	adds	r3, #1
 8011e3e:	2202      	movs	r2, #2
 8011e40:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011e42:	e100      	b.n	8012046 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e4c:	f107 0208 	add.w	r2, r7, #8
 8011e50:	4610      	mov	r0, r2
 8011e52:	4798      	blx	r3
 8011e54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	3301      	adds	r3, #1
 8011e5a:	2202      	movs	r2, #2
 8011e5c:	701a      	strb	r2, [r3, #0]
      break;
 8011e5e:	e0f2      	b.n	8012046 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	885b      	ldrh	r3, [r3, #2]
 8011e64:	b2db      	uxtb	r3, r3
 8011e66:	2b05      	cmp	r3, #5
 8011e68:	f200 80ac 	bhi.w	8011fc4 <USBD_GetDescriptor+0x258>
 8011e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8011e74 <USBD_GetDescriptor+0x108>)
 8011e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e72:	bf00      	nop
 8011e74:	08011e8d 	.word	0x08011e8d
 8011e78:	08011ec1 	.word	0x08011ec1
 8011e7c:	08011ef5 	.word	0x08011ef5
 8011e80:	08011f29 	.word	0x08011f29
 8011e84:	08011f5d 	.word	0x08011f5d
 8011e88:	08011f91 	.word	0x08011f91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011e92:	685b      	ldr	r3, [r3, #4]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d00b      	beq.n	8011eb0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011e9e:	685b      	ldr	r3, [r3, #4]
 8011ea0:	687a      	ldr	r2, [r7, #4]
 8011ea2:	7c12      	ldrb	r2, [r2, #16]
 8011ea4:	f107 0108 	add.w	r1, r7, #8
 8011ea8:	4610      	mov	r0, r2
 8011eaa:	4798      	blx	r3
 8011eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011eae:	e091      	b.n	8011fd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011eb0:	6839      	ldr	r1, [r7, #0]
 8011eb2:	6878      	ldr	r0, [r7, #4]
 8011eb4:	f000 facb 	bl	801244e <USBD_CtlError>
            err++;
 8011eb8:	7afb      	ldrb	r3, [r7, #11]
 8011eba:	3301      	adds	r3, #1
 8011ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8011ebe:	e089      	b.n	8011fd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011ec6:	689b      	ldr	r3, [r3, #8]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d00b      	beq.n	8011ee4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011ed2:	689b      	ldr	r3, [r3, #8]
 8011ed4:	687a      	ldr	r2, [r7, #4]
 8011ed6:	7c12      	ldrb	r2, [r2, #16]
 8011ed8:	f107 0108 	add.w	r1, r7, #8
 8011edc:	4610      	mov	r0, r2
 8011ede:	4798      	blx	r3
 8011ee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011ee2:	e077      	b.n	8011fd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011ee4:	6839      	ldr	r1, [r7, #0]
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	f000 fab1 	bl	801244e <USBD_CtlError>
            err++;
 8011eec:	7afb      	ldrb	r3, [r7, #11]
 8011eee:	3301      	adds	r3, #1
 8011ef0:	72fb      	strb	r3, [r7, #11]
          break;
 8011ef2:	e06f      	b.n	8011fd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011efa:	68db      	ldr	r3, [r3, #12]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d00b      	beq.n	8011f18 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f06:	68db      	ldr	r3, [r3, #12]
 8011f08:	687a      	ldr	r2, [r7, #4]
 8011f0a:	7c12      	ldrb	r2, [r2, #16]
 8011f0c:	f107 0108 	add.w	r1, r7, #8
 8011f10:	4610      	mov	r0, r2
 8011f12:	4798      	blx	r3
 8011f14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011f16:	e05d      	b.n	8011fd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011f18:	6839      	ldr	r1, [r7, #0]
 8011f1a:	6878      	ldr	r0, [r7, #4]
 8011f1c:	f000 fa97 	bl	801244e <USBD_CtlError>
            err++;
 8011f20:	7afb      	ldrb	r3, [r7, #11]
 8011f22:	3301      	adds	r3, #1
 8011f24:	72fb      	strb	r3, [r7, #11]
          break;
 8011f26:	e055      	b.n	8011fd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f2e:	691b      	ldr	r3, [r3, #16]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d00b      	beq.n	8011f4c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f3a:	691b      	ldr	r3, [r3, #16]
 8011f3c:	687a      	ldr	r2, [r7, #4]
 8011f3e:	7c12      	ldrb	r2, [r2, #16]
 8011f40:	f107 0108 	add.w	r1, r7, #8
 8011f44:	4610      	mov	r0, r2
 8011f46:	4798      	blx	r3
 8011f48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011f4a:	e043      	b.n	8011fd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011f4c:	6839      	ldr	r1, [r7, #0]
 8011f4e:	6878      	ldr	r0, [r7, #4]
 8011f50:	f000 fa7d 	bl	801244e <USBD_CtlError>
            err++;
 8011f54:	7afb      	ldrb	r3, [r7, #11]
 8011f56:	3301      	adds	r3, #1
 8011f58:	72fb      	strb	r3, [r7, #11]
          break;
 8011f5a:	e03b      	b.n	8011fd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f62:	695b      	ldr	r3, [r3, #20]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d00b      	beq.n	8011f80 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f6e:	695b      	ldr	r3, [r3, #20]
 8011f70:	687a      	ldr	r2, [r7, #4]
 8011f72:	7c12      	ldrb	r2, [r2, #16]
 8011f74:	f107 0108 	add.w	r1, r7, #8
 8011f78:	4610      	mov	r0, r2
 8011f7a:	4798      	blx	r3
 8011f7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011f7e:	e029      	b.n	8011fd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011f80:	6839      	ldr	r1, [r7, #0]
 8011f82:	6878      	ldr	r0, [r7, #4]
 8011f84:	f000 fa63 	bl	801244e <USBD_CtlError>
            err++;
 8011f88:	7afb      	ldrb	r3, [r7, #11]
 8011f8a:	3301      	adds	r3, #1
 8011f8c:	72fb      	strb	r3, [r7, #11]
          break;
 8011f8e:	e021      	b.n	8011fd4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f96:	699b      	ldr	r3, [r3, #24]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d00b      	beq.n	8011fb4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011fa2:	699b      	ldr	r3, [r3, #24]
 8011fa4:	687a      	ldr	r2, [r7, #4]
 8011fa6:	7c12      	ldrb	r2, [r2, #16]
 8011fa8:	f107 0108 	add.w	r1, r7, #8
 8011fac:	4610      	mov	r0, r2
 8011fae:	4798      	blx	r3
 8011fb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011fb2:	e00f      	b.n	8011fd4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011fb4:	6839      	ldr	r1, [r7, #0]
 8011fb6:	6878      	ldr	r0, [r7, #4]
 8011fb8:	f000 fa49 	bl	801244e <USBD_CtlError>
            err++;
 8011fbc:	7afb      	ldrb	r3, [r7, #11]
 8011fbe:	3301      	adds	r3, #1
 8011fc0:	72fb      	strb	r3, [r7, #11]
          break;
 8011fc2:	e007      	b.n	8011fd4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011fc4:	6839      	ldr	r1, [r7, #0]
 8011fc6:	6878      	ldr	r0, [r7, #4]
 8011fc8:	f000 fa41 	bl	801244e <USBD_CtlError>
          err++;
 8011fcc:	7afb      	ldrb	r3, [r7, #11]
 8011fce:	3301      	adds	r3, #1
 8011fd0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8011fd2:	bf00      	nop
      }
      break;
 8011fd4:	e037      	b.n	8012046 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	7c1b      	ldrb	r3, [r3, #16]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d109      	bne.n	8011ff2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011fe6:	f107 0208 	add.w	r2, r7, #8
 8011fea:	4610      	mov	r0, r2
 8011fec:	4798      	blx	r3
 8011fee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011ff0:	e029      	b.n	8012046 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011ff2:	6839      	ldr	r1, [r7, #0]
 8011ff4:	6878      	ldr	r0, [r7, #4]
 8011ff6:	f000 fa2a 	bl	801244e <USBD_CtlError>
        err++;
 8011ffa:	7afb      	ldrb	r3, [r7, #11]
 8011ffc:	3301      	adds	r3, #1
 8011ffe:	72fb      	strb	r3, [r7, #11]
      break;
 8012000:	e021      	b.n	8012046 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	7c1b      	ldrb	r3, [r3, #16]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d10d      	bne.n	8012026 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012012:	f107 0208 	add.w	r2, r7, #8
 8012016:	4610      	mov	r0, r2
 8012018:	4798      	blx	r3
 801201a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	3301      	adds	r3, #1
 8012020:	2207      	movs	r2, #7
 8012022:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012024:	e00f      	b.n	8012046 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012026:	6839      	ldr	r1, [r7, #0]
 8012028:	6878      	ldr	r0, [r7, #4]
 801202a:	f000 fa10 	bl	801244e <USBD_CtlError>
        err++;
 801202e:	7afb      	ldrb	r3, [r7, #11]
 8012030:	3301      	adds	r3, #1
 8012032:	72fb      	strb	r3, [r7, #11]
      break;
 8012034:	e007      	b.n	8012046 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8012036:	6839      	ldr	r1, [r7, #0]
 8012038:	6878      	ldr	r0, [r7, #4]
 801203a:	f000 fa08 	bl	801244e <USBD_CtlError>
      err++;
 801203e:	7afb      	ldrb	r3, [r7, #11]
 8012040:	3301      	adds	r3, #1
 8012042:	72fb      	strb	r3, [r7, #11]
      break;
 8012044:	bf00      	nop
  }

  if (err != 0U)
 8012046:	7afb      	ldrb	r3, [r7, #11]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d11e      	bne.n	801208a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801204c:	683b      	ldr	r3, [r7, #0]
 801204e:	88db      	ldrh	r3, [r3, #6]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d016      	beq.n	8012082 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012054:	893b      	ldrh	r3, [r7, #8]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d00e      	beq.n	8012078 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	88da      	ldrh	r2, [r3, #6]
 801205e:	893b      	ldrh	r3, [r7, #8]
 8012060:	4293      	cmp	r3, r2
 8012062:	bf28      	it	cs
 8012064:	4613      	movcs	r3, r2
 8012066:	b29b      	uxth	r3, r3
 8012068:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801206a:	893b      	ldrh	r3, [r7, #8]
 801206c:	461a      	mov	r2, r3
 801206e:	68f9      	ldr	r1, [r7, #12]
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f000 fa69 	bl	8012548 <USBD_CtlSendData>
 8012076:	e009      	b.n	801208c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012078:	6839      	ldr	r1, [r7, #0]
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f000 f9e7 	bl	801244e <USBD_CtlError>
 8012080:	e004      	b.n	801208c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012082:	6878      	ldr	r0, [r7, #4]
 8012084:	f000 faba 	bl	80125fc <USBD_CtlSendStatus>
 8012088:	e000      	b.n	801208c <USBD_GetDescriptor+0x320>
    return;
 801208a:	bf00      	nop
  }
}
 801208c:	3710      	adds	r7, #16
 801208e:	46bd      	mov	sp, r7
 8012090:	bd80      	pop	{r7, pc}
 8012092:	bf00      	nop

08012094 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b084      	sub	sp, #16
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	889b      	ldrh	r3, [r3, #4]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d131      	bne.n	801210a <USBD_SetAddress+0x76>
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	88db      	ldrh	r3, [r3, #6]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d12d      	bne.n	801210a <USBD_SetAddress+0x76>
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	885b      	ldrh	r3, [r3, #2]
 80120b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80120b4:	d829      	bhi.n	801210a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	885b      	ldrh	r3, [r3, #2]
 80120ba:	b2db      	uxtb	r3, r3
 80120bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80120c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80120c8:	b2db      	uxtb	r3, r3
 80120ca:	2b03      	cmp	r3, #3
 80120cc:	d104      	bne.n	80120d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80120ce:	6839      	ldr	r1, [r7, #0]
 80120d0:	6878      	ldr	r0, [r7, #4]
 80120d2:	f000 f9bc 	bl	801244e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120d6:	e01d      	b.n	8012114 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	7bfa      	ldrb	r2, [r7, #15]
 80120dc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80120e0:	7bfb      	ldrb	r3, [r7, #15]
 80120e2:	4619      	mov	r1, r3
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	f000 ff31 	bl	8012f4c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80120ea:	6878      	ldr	r0, [r7, #4]
 80120ec:	f000 fa86 	bl	80125fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80120f0:	7bfb      	ldrb	r3, [r7, #15]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d004      	beq.n	8012100 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	2202      	movs	r2, #2
 80120fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120fe:	e009      	b.n	8012114 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	2201      	movs	r2, #1
 8012104:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012108:	e004      	b.n	8012114 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801210a:	6839      	ldr	r1, [r7, #0]
 801210c:	6878      	ldr	r0, [r7, #4]
 801210e:	f000 f99e 	bl	801244e <USBD_CtlError>
  }
}
 8012112:	bf00      	nop
 8012114:	bf00      	nop
 8012116:	3710      	adds	r7, #16
 8012118:	46bd      	mov	sp, r7
 801211a:	bd80      	pop	{r7, pc}

0801211c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b084      	sub	sp, #16
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]
 8012124:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012126:	2300      	movs	r3, #0
 8012128:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	885b      	ldrh	r3, [r3, #2]
 801212e:	b2da      	uxtb	r2, r3
 8012130:	4b4e      	ldr	r3, [pc, #312]	@ (801226c <USBD_SetConfig+0x150>)
 8012132:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012134:	4b4d      	ldr	r3, [pc, #308]	@ (801226c <USBD_SetConfig+0x150>)
 8012136:	781b      	ldrb	r3, [r3, #0]
 8012138:	2b01      	cmp	r3, #1
 801213a:	d905      	bls.n	8012148 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801213c:	6839      	ldr	r1, [r7, #0]
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	f000 f985 	bl	801244e <USBD_CtlError>
    return USBD_FAIL;
 8012144:	2303      	movs	r3, #3
 8012146:	e08c      	b.n	8012262 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801214e:	b2db      	uxtb	r3, r3
 8012150:	2b02      	cmp	r3, #2
 8012152:	d002      	beq.n	801215a <USBD_SetConfig+0x3e>
 8012154:	2b03      	cmp	r3, #3
 8012156:	d029      	beq.n	80121ac <USBD_SetConfig+0x90>
 8012158:	e075      	b.n	8012246 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801215a:	4b44      	ldr	r3, [pc, #272]	@ (801226c <USBD_SetConfig+0x150>)
 801215c:	781b      	ldrb	r3, [r3, #0]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d020      	beq.n	80121a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012162:	4b42      	ldr	r3, [pc, #264]	@ (801226c <USBD_SetConfig+0x150>)
 8012164:	781b      	ldrb	r3, [r3, #0]
 8012166:	461a      	mov	r2, r3
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801216c:	4b3f      	ldr	r3, [pc, #252]	@ (801226c <USBD_SetConfig+0x150>)
 801216e:	781b      	ldrb	r3, [r3, #0]
 8012170:	4619      	mov	r1, r3
 8012172:	6878      	ldr	r0, [r7, #4]
 8012174:	f7fe ffb9 	bl	80110ea <USBD_SetClassConfig>
 8012178:	4603      	mov	r3, r0
 801217a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801217c:	7bfb      	ldrb	r3, [r7, #15]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d008      	beq.n	8012194 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012182:	6839      	ldr	r1, [r7, #0]
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f000 f962 	bl	801244e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	2202      	movs	r2, #2
 801218e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012192:	e065      	b.n	8012260 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f000 fa31 	bl	80125fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2203      	movs	r2, #3
 801219e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80121a2:	e05d      	b.n	8012260 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80121a4:	6878      	ldr	r0, [r7, #4]
 80121a6:	f000 fa29 	bl	80125fc <USBD_CtlSendStatus>
      break;
 80121aa:	e059      	b.n	8012260 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80121ac:	4b2f      	ldr	r3, [pc, #188]	@ (801226c <USBD_SetConfig+0x150>)
 80121ae:	781b      	ldrb	r3, [r3, #0]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d112      	bne.n	80121da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	2202      	movs	r2, #2
 80121b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80121bc:	4b2b      	ldr	r3, [pc, #172]	@ (801226c <USBD_SetConfig+0x150>)
 80121be:	781b      	ldrb	r3, [r3, #0]
 80121c0:	461a      	mov	r2, r3
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80121c6:	4b29      	ldr	r3, [pc, #164]	@ (801226c <USBD_SetConfig+0x150>)
 80121c8:	781b      	ldrb	r3, [r3, #0]
 80121ca:	4619      	mov	r1, r3
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f7fe ffa8 	bl	8011122 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	f000 fa12 	bl	80125fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80121d8:	e042      	b.n	8012260 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80121da:	4b24      	ldr	r3, [pc, #144]	@ (801226c <USBD_SetConfig+0x150>)
 80121dc:	781b      	ldrb	r3, [r3, #0]
 80121de:	461a      	mov	r2, r3
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	685b      	ldr	r3, [r3, #4]
 80121e4:	429a      	cmp	r2, r3
 80121e6:	d02a      	beq.n	801223e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	685b      	ldr	r3, [r3, #4]
 80121ec:	b2db      	uxtb	r3, r3
 80121ee:	4619      	mov	r1, r3
 80121f0:	6878      	ldr	r0, [r7, #4]
 80121f2:	f7fe ff96 	bl	8011122 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80121f6:	4b1d      	ldr	r3, [pc, #116]	@ (801226c <USBD_SetConfig+0x150>)
 80121f8:	781b      	ldrb	r3, [r3, #0]
 80121fa:	461a      	mov	r2, r3
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012200:	4b1a      	ldr	r3, [pc, #104]	@ (801226c <USBD_SetConfig+0x150>)
 8012202:	781b      	ldrb	r3, [r3, #0]
 8012204:	4619      	mov	r1, r3
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	f7fe ff6f 	bl	80110ea <USBD_SetClassConfig>
 801220c:	4603      	mov	r3, r0
 801220e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012210:	7bfb      	ldrb	r3, [r7, #15]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d00f      	beq.n	8012236 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8012216:	6839      	ldr	r1, [r7, #0]
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f000 f918 	bl	801244e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	685b      	ldr	r3, [r3, #4]
 8012222:	b2db      	uxtb	r3, r3
 8012224:	4619      	mov	r1, r3
 8012226:	6878      	ldr	r0, [r7, #4]
 8012228:	f7fe ff7b 	bl	8011122 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2202      	movs	r2, #2
 8012230:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012234:	e014      	b.n	8012260 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012236:	6878      	ldr	r0, [r7, #4]
 8012238:	f000 f9e0 	bl	80125fc <USBD_CtlSendStatus>
      break;
 801223c:	e010      	b.n	8012260 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801223e:	6878      	ldr	r0, [r7, #4]
 8012240:	f000 f9dc 	bl	80125fc <USBD_CtlSendStatus>
      break;
 8012244:	e00c      	b.n	8012260 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8012246:	6839      	ldr	r1, [r7, #0]
 8012248:	6878      	ldr	r0, [r7, #4]
 801224a:	f000 f900 	bl	801244e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801224e:	4b07      	ldr	r3, [pc, #28]	@ (801226c <USBD_SetConfig+0x150>)
 8012250:	781b      	ldrb	r3, [r3, #0]
 8012252:	4619      	mov	r1, r3
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f7fe ff64 	bl	8011122 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801225a:	2303      	movs	r3, #3
 801225c:	73fb      	strb	r3, [r7, #15]
      break;
 801225e:	bf00      	nop
  }

  return ret;
 8012260:	7bfb      	ldrb	r3, [r7, #15]
}
 8012262:	4618      	mov	r0, r3
 8012264:	3710      	adds	r7, #16
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}
 801226a:	bf00      	nop
 801226c:	24000844 	.word	0x24000844

08012270 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b082      	sub	sp, #8
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
 8012278:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	88db      	ldrh	r3, [r3, #6]
 801227e:	2b01      	cmp	r3, #1
 8012280:	d004      	beq.n	801228c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012282:	6839      	ldr	r1, [r7, #0]
 8012284:	6878      	ldr	r0, [r7, #4]
 8012286:	f000 f8e2 	bl	801244e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801228a:	e023      	b.n	80122d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012292:	b2db      	uxtb	r3, r3
 8012294:	2b02      	cmp	r3, #2
 8012296:	dc02      	bgt.n	801229e <USBD_GetConfig+0x2e>
 8012298:	2b00      	cmp	r3, #0
 801229a:	dc03      	bgt.n	80122a4 <USBD_GetConfig+0x34>
 801229c:	e015      	b.n	80122ca <USBD_GetConfig+0x5a>
 801229e:	2b03      	cmp	r3, #3
 80122a0:	d00b      	beq.n	80122ba <USBD_GetConfig+0x4a>
 80122a2:	e012      	b.n	80122ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	2200      	movs	r2, #0
 80122a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	3308      	adds	r3, #8
 80122ae:	2201      	movs	r2, #1
 80122b0:	4619      	mov	r1, r3
 80122b2:	6878      	ldr	r0, [r7, #4]
 80122b4:	f000 f948 	bl	8012548 <USBD_CtlSendData>
        break;
 80122b8:	e00c      	b.n	80122d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	3304      	adds	r3, #4
 80122be:	2201      	movs	r2, #1
 80122c0:	4619      	mov	r1, r3
 80122c2:	6878      	ldr	r0, [r7, #4]
 80122c4:	f000 f940 	bl	8012548 <USBD_CtlSendData>
        break;
 80122c8:	e004      	b.n	80122d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80122ca:	6839      	ldr	r1, [r7, #0]
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f000 f8be 	bl	801244e <USBD_CtlError>
        break;
 80122d2:	bf00      	nop
}
 80122d4:	bf00      	nop
 80122d6:	3708      	adds	r7, #8
 80122d8:	46bd      	mov	sp, r7
 80122da:	bd80      	pop	{r7, pc}

080122dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b082      	sub	sp, #8
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
 80122e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80122ec:	b2db      	uxtb	r3, r3
 80122ee:	3b01      	subs	r3, #1
 80122f0:	2b02      	cmp	r3, #2
 80122f2:	d81e      	bhi.n	8012332 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80122f4:	683b      	ldr	r3, [r7, #0]
 80122f6:	88db      	ldrh	r3, [r3, #6]
 80122f8:	2b02      	cmp	r3, #2
 80122fa:	d004      	beq.n	8012306 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80122fc:	6839      	ldr	r1, [r7, #0]
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f000 f8a5 	bl	801244e <USBD_CtlError>
        break;
 8012304:	e01a      	b.n	801233c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	2201      	movs	r2, #1
 801230a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8012312:	2b00      	cmp	r3, #0
 8012314:	d005      	beq.n	8012322 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	68db      	ldr	r3, [r3, #12]
 801231a:	f043 0202 	orr.w	r2, r3, #2
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	330c      	adds	r3, #12
 8012326:	2202      	movs	r2, #2
 8012328:	4619      	mov	r1, r3
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f000 f90c 	bl	8012548 <USBD_CtlSendData>
      break;
 8012330:	e004      	b.n	801233c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012332:	6839      	ldr	r1, [r7, #0]
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	f000 f88a 	bl	801244e <USBD_CtlError>
      break;
 801233a:	bf00      	nop
  }
}
 801233c:	bf00      	nop
 801233e:	3708      	adds	r7, #8
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}

08012344 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b082      	sub	sp, #8
 8012348:	af00      	add	r7, sp, #0
 801234a:	6078      	str	r0, [r7, #4]
 801234c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	885b      	ldrh	r3, [r3, #2]
 8012352:	2b01      	cmp	r3, #1
 8012354:	d107      	bne.n	8012366 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	2201      	movs	r2, #1
 801235a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801235e:	6878      	ldr	r0, [r7, #4]
 8012360:	f000 f94c 	bl	80125fc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012364:	e013      	b.n	801238e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8012366:	683b      	ldr	r3, [r7, #0]
 8012368:	885b      	ldrh	r3, [r3, #2]
 801236a:	2b02      	cmp	r3, #2
 801236c:	d10b      	bne.n	8012386 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801236e:	683b      	ldr	r3, [r7, #0]
 8012370:	889b      	ldrh	r3, [r3, #4]
 8012372:	0a1b      	lsrs	r3, r3, #8
 8012374:	b29b      	uxth	r3, r3
 8012376:	b2da      	uxtb	r2, r3
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801237e:	6878      	ldr	r0, [r7, #4]
 8012380:	f000 f93c 	bl	80125fc <USBD_CtlSendStatus>
}
 8012384:	e003      	b.n	801238e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8012386:	6839      	ldr	r1, [r7, #0]
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	f000 f860 	bl	801244e <USBD_CtlError>
}
 801238e:	bf00      	nop
 8012390:	3708      	adds	r7, #8
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}

08012396 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012396:	b580      	push	{r7, lr}
 8012398:	b082      	sub	sp, #8
 801239a:	af00      	add	r7, sp, #0
 801239c:	6078      	str	r0, [r7, #4]
 801239e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80123a6:	b2db      	uxtb	r3, r3
 80123a8:	3b01      	subs	r3, #1
 80123aa:	2b02      	cmp	r3, #2
 80123ac:	d80b      	bhi.n	80123c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80123ae:	683b      	ldr	r3, [r7, #0]
 80123b0:	885b      	ldrh	r3, [r3, #2]
 80123b2:	2b01      	cmp	r3, #1
 80123b4:	d10c      	bne.n	80123d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	2200      	movs	r2, #0
 80123ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f000 f91c 	bl	80125fc <USBD_CtlSendStatus>
      }
      break;
 80123c4:	e004      	b.n	80123d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80123c6:	6839      	ldr	r1, [r7, #0]
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f000 f840 	bl	801244e <USBD_CtlError>
      break;
 80123ce:	e000      	b.n	80123d2 <USBD_ClrFeature+0x3c>
      break;
 80123d0:	bf00      	nop
  }
}
 80123d2:	bf00      	nop
 80123d4:	3708      	adds	r7, #8
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}

080123da <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80123da:	b580      	push	{r7, lr}
 80123dc:	b084      	sub	sp, #16
 80123de:	af00      	add	r7, sp, #0
 80123e0:	6078      	str	r0, [r7, #4]
 80123e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	781a      	ldrb	r2, [r3, #0]
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	3301      	adds	r3, #1
 80123f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	781a      	ldrb	r2, [r3, #0]
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	3301      	adds	r3, #1
 8012402:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012404:	68f8      	ldr	r0, [r7, #12]
 8012406:	f7ff fa16 	bl	8011836 <SWAPBYTE>
 801240a:	4603      	mov	r3, r0
 801240c:	461a      	mov	r2, r3
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	3301      	adds	r3, #1
 8012416:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	3301      	adds	r3, #1
 801241c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801241e:	68f8      	ldr	r0, [r7, #12]
 8012420:	f7ff fa09 	bl	8011836 <SWAPBYTE>
 8012424:	4603      	mov	r3, r0
 8012426:	461a      	mov	r2, r3
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	3301      	adds	r3, #1
 8012430:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	3301      	adds	r3, #1
 8012436:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012438:	68f8      	ldr	r0, [r7, #12]
 801243a:	f7ff f9fc 	bl	8011836 <SWAPBYTE>
 801243e:	4603      	mov	r3, r0
 8012440:	461a      	mov	r2, r3
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	80da      	strh	r2, [r3, #6]
}
 8012446:	bf00      	nop
 8012448:	3710      	adds	r7, #16
 801244a:	46bd      	mov	sp, r7
 801244c:	bd80      	pop	{r7, pc}

0801244e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801244e:	b580      	push	{r7, lr}
 8012450:	b082      	sub	sp, #8
 8012452:	af00      	add	r7, sp, #0
 8012454:	6078      	str	r0, [r7, #4]
 8012456:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012458:	2180      	movs	r1, #128	@ 0x80
 801245a:	6878      	ldr	r0, [r7, #4]
 801245c:	f000 fd0c 	bl	8012e78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012460:	2100      	movs	r1, #0
 8012462:	6878      	ldr	r0, [r7, #4]
 8012464:	f000 fd08 	bl	8012e78 <USBD_LL_StallEP>
}
 8012468:	bf00      	nop
 801246a:	3708      	adds	r7, #8
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}

08012470 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b086      	sub	sp, #24
 8012474:	af00      	add	r7, sp, #0
 8012476:	60f8      	str	r0, [r7, #12]
 8012478:	60b9      	str	r1, [r7, #8]
 801247a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801247c:	2300      	movs	r3, #0
 801247e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d042      	beq.n	801250c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801248a:	6938      	ldr	r0, [r7, #16]
 801248c:	f000 f842 	bl	8012514 <USBD_GetLen>
 8012490:	4603      	mov	r3, r0
 8012492:	3301      	adds	r3, #1
 8012494:	005b      	lsls	r3, r3, #1
 8012496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801249a:	d808      	bhi.n	80124ae <USBD_GetString+0x3e>
 801249c:	6938      	ldr	r0, [r7, #16]
 801249e:	f000 f839 	bl	8012514 <USBD_GetLen>
 80124a2:	4603      	mov	r3, r0
 80124a4:	3301      	adds	r3, #1
 80124a6:	b29b      	uxth	r3, r3
 80124a8:	005b      	lsls	r3, r3, #1
 80124aa:	b29a      	uxth	r2, r3
 80124ac:	e001      	b.n	80124b2 <USBD_GetString+0x42>
 80124ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80124b6:	7dfb      	ldrb	r3, [r7, #23]
 80124b8:	68ba      	ldr	r2, [r7, #8]
 80124ba:	4413      	add	r3, r2
 80124bc:	687a      	ldr	r2, [r7, #4]
 80124be:	7812      	ldrb	r2, [r2, #0]
 80124c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80124c2:	7dfb      	ldrb	r3, [r7, #23]
 80124c4:	3301      	adds	r3, #1
 80124c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80124c8:	7dfb      	ldrb	r3, [r7, #23]
 80124ca:	68ba      	ldr	r2, [r7, #8]
 80124cc:	4413      	add	r3, r2
 80124ce:	2203      	movs	r2, #3
 80124d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80124d2:	7dfb      	ldrb	r3, [r7, #23]
 80124d4:	3301      	adds	r3, #1
 80124d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80124d8:	e013      	b.n	8012502 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80124da:	7dfb      	ldrb	r3, [r7, #23]
 80124dc:	68ba      	ldr	r2, [r7, #8]
 80124de:	4413      	add	r3, r2
 80124e0:	693a      	ldr	r2, [r7, #16]
 80124e2:	7812      	ldrb	r2, [r2, #0]
 80124e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80124e6:	693b      	ldr	r3, [r7, #16]
 80124e8:	3301      	adds	r3, #1
 80124ea:	613b      	str	r3, [r7, #16]
    idx++;
 80124ec:	7dfb      	ldrb	r3, [r7, #23]
 80124ee:	3301      	adds	r3, #1
 80124f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80124f2:	7dfb      	ldrb	r3, [r7, #23]
 80124f4:	68ba      	ldr	r2, [r7, #8]
 80124f6:	4413      	add	r3, r2
 80124f8:	2200      	movs	r2, #0
 80124fa:	701a      	strb	r2, [r3, #0]
    idx++;
 80124fc:	7dfb      	ldrb	r3, [r7, #23]
 80124fe:	3301      	adds	r3, #1
 8012500:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012502:	693b      	ldr	r3, [r7, #16]
 8012504:	781b      	ldrb	r3, [r3, #0]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d1e7      	bne.n	80124da <USBD_GetString+0x6a>
 801250a:	e000      	b.n	801250e <USBD_GetString+0x9e>
    return;
 801250c:	bf00      	nop
  }
}
 801250e:	3718      	adds	r7, #24
 8012510:	46bd      	mov	sp, r7
 8012512:	bd80      	pop	{r7, pc}

08012514 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012514:	b480      	push	{r7}
 8012516:	b085      	sub	sp, #20
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801251c:	2300      	movs	r3, #0
 801251e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012524:	e005      	b.n	8012532 <USBD_GetLen+0x1e>
  {
    len++;
 8012526:	7bfb      	ldrb	r3, [r7, #15]
 8012528:	3301      	adds	r3, #1
 801252a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801252c:	68bb      	ldr	r3, [r7, #8]
 801252e:	3301      	adds	r3, #1
 8012530:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d1f5      	bne.n	8012526 <USBD_GetLen+0x12>
  }

  return len;
 801253a:	7bfb      	ldrb	r3, [r7, #15]
}
 801253c:	4618      	mov	r0, r3
 801253e:	3714      	adds	r7, #20
 8012540:	46bd      	mov	sp, r7
 8012542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012546:	4770      	bx	lr

08012548 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b084      	sub	sp, #16
 801254c:	af00      	add	r7, sp, #0
 801254e:	60f8      	str	r0, [r7, #12]
 8012550:	60b9      	str	r1, [r7, #8]
 8012552:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	2202      	movs	r2, #2
 8012558:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	687a      	ldr	r2, [r7, #4]
 8012560:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	687a      	ldr	r2, [r7, #4]
 8012566:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	68ba      	ldr	r2, [r7, #8]
 801256c:	2100      	movs	r1, #0
 801256e:	68f8      	ldr	r0, [r7, #12]
 8012570:	f000 fd0b 	bl	8012f8a <USBD_LL_Transmit>

  return USBD_OK;
 8012574:	2300      	movs	r3, #0
}
 8012576:	4618      	mov	r0, r3
 8012578:	3710      	adds	r7, #16
 801257a:	46bd      	mov	sp, r7
 801257c:	bd80      	pop	{r7, pc}

0801257e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801257e:	b580      	push	{r7, lr}
 8012580:	b084      	sub	sp, #16
 8012582:	af00      	add	r7, sp, #0
 8012584:	60f8      	str	r0, [r7, #12]
 8012586:	60b9      	str	r1, [r7, #8]
 8012588:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	68ba      	ldr	r2, [r7, #8]
 801258e:	2100      	movs	r1, #0
 8012590:	68f8      	ldr	r0, [r7, #12]
 8012592:	f000 fcfa 	bl	8012f8a <USBD_LL_Transmit>

  return USBD_OK;
 8012596:	2300      	movs	r3, #0
}
 8012598:	4618      	mov	r0, r3
 801259a:	3710      	adds	r7, #16
 801259c:	46bd      	mov	sp, r7
 801259e:	bd80      	pop	{r7, pc}

080125a0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b084      	sub	sp, #16
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	60f8      	str	r0, [r7, #12]
 80125a8:	60b9      	str	r1, [r7, #8]
 80125aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	2203      	movs	r2, #3
 80125b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	687a      	ldr	r2, [r7, #4]
 80125b8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	687a      	ldr	r2, [r7, #4]
 80125c0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	68ba      	ldr	r2, [r7, #8]
 80125c8:	2100      	movs	r1, #0
 80125ca:	68f8      	ldr	r0, [r7, #12]
 80125cc:	f000 fcfe 	bl	8012fcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80125d0:	2300      	movs	r3, #0
}
 80125d2:	4618      	mov	r0, r3
 80125d4:	3710      	adds	r7, #16
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}

080125da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80125da:	b580      	push	{r7, lr}
 80125dc:	b084      	sub	sp, #16
 80125de:	af00      	add	r7, sp, #0
 80125e0:	60f8      	str	r0, [r7, #12]
 80125e2:	60b9      	str	r1, [r7, #8]
 80125e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	68ba      	ldr	r2, [r7, #8]
 80125ea:	2100      	movs	r1, #0
 80125ec:	68f8      	ldr	r0, [r7, #12]
 80125ee:	f000 fced 	bl	8012fcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80125f2:	2300      	movs	r3, #0
}
 80125f4:	4618      	mov	r0, r3
 80125f6:	3710      	adds	r7, #16
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}

080125fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b082      	sub	sp, #8
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	2204      	movs	r2, #4
 8012608:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801260c:	2300      	movs	r3, #0
 801260e:	2200      	movs	r2, #0
 8012610:	2100      	movs	r1, #0
 8012612:	6878      	ldr	r0, [r7, #4]
 8012614:	f000 fcb9 	bl	8012f8a <USBD_LL_Transmit>

  return USBD_OK;
 8012618:	2300      	movs	r3, #0
}
 801261a:	4618      	mov	r0, r3
 801261c:	3708      	adds	r7, #8
 801261e:	46bd      	mov	sp, r7
 8012620:	bd80      	pop	{r7, pc}

08012622 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012622:	b580      	push	{r7, lr}
 8012624:	b082      	sub	sp, #8
 8012626:	af00      	add	r7, sp, #0
 8012628:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2205      	movs	r2, #5
 801262e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012632:	2300      	movs	r3, #0
 8012634:	2200      	movs	r2, #0
 8012636:	2100      	movs	r1, #0
 8012638:	6878      	ldr	r0, [r7, #4]
 801263a:	f000 fcc7 	bl	8012fcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 801263e:	2300      	movs	r3, #0
}
 8012640:	4618      	mov	r0, r3
 8012642:	3708      	adds	r7, #8
 8012644:	46bd      	mov	sp, r7
 8012646:	bd80      	pop	{r7, pc}

08012648 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012648:	b580      	push	{r7, lr}
 801264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801264c:	2201      	movs	r2, #1
 801264e:	4913      	ldr	r1, [pc, #76]	@ (801269c <MX_USB_DEVICE_Init+0x54>)
 8012650:	4813      	ldr	r0, [pc, #76]	@ (80126a0 <MX_USB_DEVICE_Init+0x58>)
 8012652:	f7fe fccd 	bl	8010ff0 <USBD_Init>
 8012656:	4603      	mov	r3, r0
 8012658:	2b00      	cmp	r3, #0
 801265a:	d001      	beq.n	8012660 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801265c:	f7ee fd5e 	bl	800111c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8012660:	4910      	ldr	r1, [pc, #64]	@ (80126a4 <MX_USB_DEVICE_Init+0x5c>)
 8012662:	480f      	ldr	r0, [pc, #60]	@ (80126a0 <MX_USB_DEVICE_Init+0x58>)
 8012664:	f7fe fcf4 	bl	8011050 <USBD_RegisterClass>
 8012668:	4603      	mov	r3, r0
 801266a:	2b00      	cmp	r3, #0
 801266c:	d001      	beq.n	8012672 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801266e:	f7ee fd55 	bl	800111c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8012672:	490d      	ldr	r1, [pc, #52]	@ (80126a8 <MX_USB_DEVICE_Init+0x60>)
 8012674:	480a      	ldr	r0, [pc, #40]	@ (80126a0 <MX_USB_DEVICE_Init+0x58>)
 8012676:	f7fe fc2b 	bl	8010ed0 <USBD_CDC_RegisterInterface>
 801267a:	4603      	mov	r3, r0
 801267c:	2b00      	cmp	r3, #0
 801267e:	d001      	beq.n	8012684 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012680:	f7ee fd4c 	bl	800111c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8012684:	4806      	ldr	r0, [pc, #24]	@ (80126a0 <MX_USB_DEVICE_Init+0x58>)
 8012686:	f7fe fd19 	bl	80110bc <USBD_Start>
 801268a:	4603      	mov	r3, r0
 801268c:	2b00      	cmp	r3, #0
 801268e:	d001      	beq.n	8012694 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012690:	f7ee fd44 	bl	800111c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8012694:	f7f5 fddc 	bl	8008250 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012698:	bf00      	nop
 801269a:	bd80      	pop	{r7, pc}
 801269c:	240000b0 	.word	0x240000b0
 80126a0:	24000848 	.word	0x24000848
 80126a4:	2400001c 	.word	0x2400001c
 80126a8:	2400009c 	.word	0x2400009c

080126ac <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80126b0:	2200      	movs	r2, #0
 80126b2:	4905      	ldr	r1, [pc, #20]	@ (80126c8 <CDC_Init_HS+0x1c>)
 80126b4:	4805      	ldr	r0, [pc, #20]	@ (80126cc <CDC_Init_HS+0x20>)
 80126b6:	f7fe fc25 	bl	8010f04 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80126ba:	4905      	ldr	r1, [pc, #20]	@ (80126d0 <CDC_Init_HS+0x24>)
 80126bc:	4803      	ldr	r0, [pc, #12]	@ (80126cc <CDC_Init_HS+0x20>)
 80126be:	f7fe fc43 	bl	8010f48 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80126c2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80126c4:	4618      	mov	r0, r3
 80126c6:	bd80      	pop	{r7, pc}
 80126c8:	24001324 	.word	0x24001324
 80126cc:	24000848 	.word	0x24000848
 80126d0:	24000b24 	.word	0x24000b24

080126d4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80126d4:	b480      	push	{r7}
 80126d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80126d8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80126da:	4618      	mov	r0, r3
 80126dc:	46bd      	mov	sp, r7
 80126de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e2:	4770      	bx	lr

080126e4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80126e4:	b480      	push	{r7}
 80126e6:	b083      	sub	sp, #12
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	4603      	mov	r3, r0
 80126ec:	6039      	str	r1, [r7, #0]
 80126ee:	71fb      	strb	r3, [r7, #7]
 80126f0:	4613      	mov	r3, r2
 80126f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80126f4:	79fb      	ldrb	r3, [r7, #7]
 80126f6:	2b23      	cmp	r3, #35	@ 0x23
 80126f8:	d84a      	bhi.n	8012790 <CDC_Control_HS+0xac>
 80126fa:	a201      	add	r2, pc, #4	@ (adr r2, 8012700 <CDC_Control_HS+0x1c>)
 80126fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012700:	08012791 	.word	0x08012791
 8012704:	08012791 	.word	0x08012791
 8012708:	08012791 	.word	0x08012791
 801270c:	08012791 	.word	0x08012791
 8012710:	08012791 	.word	0x08012791
 8012714:	08012791 	.word	0x08012791
 8012718:	08012791 	.word	0x08012791
 801271c:	08012791 	.word	0x08012791
 8012720:	08012791 	.word	0x08012791
 8012724:	08012791 	.word	0x08012791
 8012728:	08012791 	.word	0x08012791
 801272c:	08012791 	.word	0x08012791
 8012730:	08012791 	.word	0x08012791
 8012734:	08012791 	.word	0x08012791
 8012738:	08012791 	.word	0x08012791
 801273c:	08012791 	.word	0x08012791
 8012740:	08012791 	.word	0x08012791
 8012744:	08012791 	.word	0x08012791
 8012748:	08012791 	.word	0x08012791
 801274c:	08012791 	.word	0x08012791
 8012750:	08012791 	.word	0x08012791
 8012754:	08012791 	.word	0x08012791
 8012758:	08012791 	.word	0x08012791
 801275c:	08012791 	.word	0x08012791
 8012760:	08012791 	.word	0x08012791
 8012764:	08012791 	.word	0x08012791
 8012768:	08012791 	.word	0x08012791
 801276c:	08012791 	.word	0x08012791
 8012770:	08012791 	.word	0x08012791
 8012774:	08012791 	.word	0x08012791
 8012778:	08012791 	.word	0x08012791
 801277c:	08012791 	.word	0x08012791
 8012780:	08012791 	.word	0x08012791
 8012784:	08012791 	.word	0x08012791
 8012788:	08012791 	.word	0x08012791
 801278c:	08012791 	.word	0x08012791
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012790:	bf00      	nop
  }

  return (USBD_OK);
 8012792:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8012794:	4618      	mov	r0, r3
 8012796:	370c      	adds	r7, #12
 8012798:	46bd      	mov	sp, r7
 801279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279e:	4770      	bx	lr

080127a0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b082      	sub	sp, #8
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
 80127a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80127aa:	6879      	ldr	r1, [r7, #4]
 80127ac:	4807      	ldr	r0, [pc, #28]	@ (80127cc <CDC_Receive_HS+0x2c>)
 80127ae:	f7fe fbcb 	bl	8010f48 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80127b2:	4806      	ldr	r0, [pc, #24]	@ (80127cc <CDC_Receive_HS+0x2c>)
 80127b4:	f7fe fbe6 	bl	8010f84 <USBD_CDC_ReceivePacket>

  receiveDataToBuffer(Buf,Len);
 80127b8:	6839      	ldr	r1, [r7, #0]
 80127ba:	6878      	ldr	r0, [r7, #4]
 80127bc:	f000 f81a 	bl	80127f4 <receiveDataToBuffer>

  return (USBD_OK);
 80127c0:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80127c2:	4618      	mov	r0, r3
 80127c4:	3708      	adds	r7, #8
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}
 80127ca:	bf00      	nop
 80127cc:	24000848 	.word	0x24000848

080127d0 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80127d0:	b480      	push	{r7}
 80127d2:	b087      	sub	sp, #28
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	60f8      	str	r0, [r7, #12]
 80127d8:	60b9      	str	r1, [r7, #8]
 80127da:	4613      	mov	r3, r2
 80127dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80127de:	2300      	movs	r3, #0
 80127e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80127e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80127e6:	4618      	mov	r0, r3
 80127e8:	371c      	adds	r7, #28
 80127ea:	46bd      	mov	sp, r7
 80127ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f0:	4770      	bx	lr
	...

080127f4 <receiveDataToBuffer>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void receiveDataToBuffer(uint8_t* Buf, uint32_t *Len)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b084      	sub	sp, #16
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	6039      	str	r1, [r7, #0]
  uint8_t len = (uint8_t)* Len;
 80127fe:	683b      	ldr	r3, [r7, #0]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	73fb      	strb	r3, [r7, #15]
  memset(UsbRxDataBuffer, '\0', USB_RX_BUFF_SIZE);
 8012804:	2221      	movs	r2, #33	@ 0x21
 8012806:	2100      	movs	r1, #0
 8012808:	4809      	ldr	r0, [pc, #36]	@ (8012830 <receiveDataToBuffer+0x3c>)
 801280a:	f000 fc57 	bl	80130bc <memset>
  memcpy(UsbRxDataBuffer, Buf, len);
 801280e:	7bfb      	ldrb	r3, [r7, #15]
 8012810:	461a      	mov	r2, r3
 8012812:	6879      	ldr	r1, [r7, #4]
 8012814:	4806      	ldr	r0, [pc, #24]	@ (8012830 <receiveDataToBuffer+0x3c>)
 8012816:	f000 fc7d 	bl	8013114 <memcpy>
  memset(Buf, '\0', len);
 801281a:	7bfb      	ldrb	r3, [r7, #15]
 801281c:	461a      	mov	r2, r3
 801281e:	2100      	movs	r1, #0
 8012820:	6878      	ldr	r0, [r7, #4]
 8012822:	f000 fc4b 	bl	80130bc <memset>

}
 8012826:	bf00      	nop
 8012828:	3710      	adds	r7, #16
 801282a:	46bd      	mov	sp, r7
 801282c:	bd80      	pop	{r7, pc}
 801282e:	bf00      	nop
 8012830:	2400081c 	.word	0x2400081c

08012834 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012834:	b480      	push	{r7}
 8012836:	b083      	sub	sp, #12
 8012838:	af00      	add	r7, sp, #0
 801283a:	4603      	mov	r3, r0
 801283c:	6039      	str	r1, [r7, #0]
 801283e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8012840:	683b      	ldr	r3, [r7, #0]
 8012842:	2212      	movs	r2, #18
 8012844:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8012846:	4b03      	ldr	r3, [pc, #12]	@ (8012854 <USBD_HS_DeviceDescriptor+0x20>)
}
 8012848:	4618      	mov	r0, r3
 801284a:	370c      	adds	r7, #12
 801284c:	46bd      	mov	sp, r7
 801284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012852:	4770      	bx	lr
 8012854:	240000d0 	.word	0x240000d0

08012858 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012858:	b480      	push	{r7}
 801285a:	b083      	sub	sp, #12
 801285c:	af00      	add	r7, sp, #0
 801285e:	4603      	mov	r3, r0
 8012860:	6039      	str	r1, [r7, #0]
 8012862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012864:	683b      	ldr	r3, [r7, #0]
 8012866:	2204      	movs	r2, #4
 8012868:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801286a:	4b03      	ldr	r3, [pc, #12]	@ (8012878 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801286c:	4618      	mov	r0, r3
 801286e:	370c      	adds	r7, #12
 8012870:	46bd      	mov	sp, r7
 8012872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012876:	4770      	bx	lr
 8012878:	240000e4 	.word	0x240000e4

0801287c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b082      	sub	sp, #8
 8012880:	af00      	add	r7, sp, #0
 8012882:	4603      	mov	r3, r0
 8012884:	6039      	str	r1, [r7, #0]
 8012886:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012888:	79fb      	ldrb	r3, [r7, #7]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d105      	bne.n	801289a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801288e:	683a      	ldr	r2, [r7, #0]
 8012890:	4907      	ldr	r1, [pc, #28]	@ (80128b0 <USBD_HS_ProductStrDescriptor+0x34>)
 8012892:	4808      	ldr	r0, [pc, #32]	@ (80128b4 <USBD_HS_ProductStrDescriptor+0x38>)
 8012894:	f7ff fdec 	bl	8012470 <USBD_GetString>
 8012898:	e004      	b.n	80128a4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801289a:	683a      	ldr	r2, [r7, #0]
 801289c:	4904      	ldr	r1, [pc, #16]	@ (80128b0 <USBD_HS_ProductStrDescriptor+0x34>)
 801289e:	4805      	ldr	r0, [pc, #20]	@ (80128b4 <USBD_HS_ProductStrDescriptor+0x38>)
 80128a0:	f7ff fde6 	bl	8012470 <USBD_GetString>
  }
  return USBD_StrDesc;
 80128a4:	4b02      	ldr	r3, [pc, #8]	@ (80128b0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80128a6:	4618      	mov	r0, r3
 80128a8:	3708      	adds	r7, #8
 80128aa:	46bd      	mov	sp, r7
 80128ac:	bd80      	pop	{r7, pc}
 80128ae:	bf00      	nop
 80128b0:	24001b24 	.word	0x24001b24
 80128b4:	08013148 	.word	0x08013148

080128b8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b082      	sub	sp, #8
 80128bc:	af00      	add	r7, sp, #0
 80128be:	4603      	mov	r3, r0
 80128c0:	6039      	str	r1, [r7, #0]
 80128c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80128c4:	683a      	ldr	r2, [r7, #0]
 80128c6:	4904      	ldr	r1, [pc, #16]	@ (80128d8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80128c8:	4804      	ldr	r0, [pc, #16]	@ (80128dc <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80128ca:	f7ff fdd1 	bl	8012470 <USBD_GetString>
  return USBD_StrDesc;
 80128ce:	4b02      	ldr	r3, [pc, #8]	@ (80128d8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80128d0:	4618      	mov	r0, r3
 80128d2:	3708      	adds	r7, #8
 80128d4:	46bd      	mov	sp, r7
 80128d6:	bd80      	pop	{r7, pc}
 80128d8:	24001b24 	.word	0x24001b24
 80128dc:	08013160 	.word	0x08013160

080128e0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b082      	sub	sp, #8
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	4603      	mov	r3, r0
 80128e8:	6039      	str	r1, [r7, #0]
 80128ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80128ec:	683b      	ldr	r3, [r7, #0]
 80128ee:	221a      	movs	r2, #26
 80128f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80128f2:	f000 f843 	bl	801297c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80128f6:	4b02      	ldr	r3, [pc, #8]	@ (8012900 <USBD_HS_SerialStrDescriptor+0x20>)
}
 80128f8:	4618      	mov	r0, r3
 80128fa:	3708      	adds	r7, #8
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}
 8012900:	240000e8 	.word	0x240000e8

08012904 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b082      	sub	sp, #8
 8012908:	af00      	add	r7, sp, #0
 801290a:	4603      	mov	r3, r0
 801290c:	6039      	str	r1, [r7, #0]
 801290e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012910:	79fb      	ldrb	r3, [r7, #7]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d105      	bne.n	8012922 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8012916:	683a      	ldr	r2, [r7, #0]
 8012918:	4907      	ldr	r1, [pc, #28]	@ (8012938 <USBD_HS_ConfigStrDescriptor+0x34>)
 801291a:	4808      	ldr	r0, [pc, #32]	@ (801293c <USBD_HS_ConfigStrDescriptor+0x38>)
 801291c:	f7ff fda8 	bl	8012470 <USBD_GetString>
 8012920:	e004      	b.n	801292c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8012922:	683a      	ldr	r2, [r7, #0]
 8012924:	4904      	ldr	r1, [pc, #16]	@ (8012938 <USBD_HS_ConfigStrDescriptor+0x34>)
 8012926:	4805      	ldr	r0, [pc, #20]	@ (801293c <USBD_HS_ConfigStrDescriptor+0x38>)
 8012928:	f7ff fda2 	bl	8012470 <USBD_GetString>
  }
  return USBD_StrDesc;
 801292c:	4b02      	ldr	r3, [pc, #8]	@ (8012938 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801292e:	4618      	mov	r0, r3
 8012930:	3708      	adds	r7, #8
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}
 8012936:	bf00      	nop
 8012938:	24001b24 	.word	0x24001b24
 801293c:	08013174 	.word	0x08013174

08012940 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b082      	sub	sp, #8
 8012944:	af00      	add	r7, sp, #0
 8012946:	4603      	mov	r3, r0
 8012948:	6039      	str	r1, [r7, #0]
 801294a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801294c:	79fb      	ldrb	r3, [r7, #7]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d105      	bne.n	801295e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012952:	683a      	ldr	r2, [r7, #0]
 8012954:	4907      	ldr	r1, [pc, #28]	@ (8012974 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012956:	4808      	ldr	r0, [pc, #32]	@ (8012978 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012958:	f7ff fd8a 	bl	8012470 <USBD_GetString>
 801295c:	e004      	b.n	8012968 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801295e:	683a      	ldr	r2, [r7, #0]
 8012960:	4904      	ldr	r1, [pc, #16]	@ (8012974 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012962:	4805      	ldr	r0, [pc, #20]	@ (8012978 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012964:	f7ff fd84 	bl	8012470 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012968:	4b02      	ldr	r3, [pc, #8]	@ (8012974 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801296a:	4618      	mov	r0, r3
 801296c:	3708      	adds	r7, #8
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}
 8012972:	bf00      	nop
 8012974:	24001b24 	.word	0x24001b24
 8012978:	08013180 	.word	0x08013180

0801297c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b084      	sub	sp, #16
 8012980:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012982:	4b0f      	ldr	r3, [pc, #60]	@ (80129c0 <Get_SerialNum+0x44>)
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012988:	4b0e      	ldr	r3, [pc, #56]	@ (80129c4 <Get_SerialNum+0x48>)
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801298e:	4b0e      	ldr	r3, [pc, #56]	@ (80129c8 <Get_SerialNum+0x4c>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012994:	68fa      	ldr	r2, [r7, #12]
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	4413      	add	r3, r2
 801299a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d009      	beq.n	80129b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80129a2:	2208      	movs	r2, #8
 80129a4:	4909      	ldr	r1, [pc, #36]	@ (80129cc <Get_SerialNum+0x50>)
 80129a6:	68f8      	ldr	r0, [r7, #12]
 80129a8:	f000 f814 	bl	80129d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80129ac:	2204      	movs	r2, #4
 80129ae:	4908      	ldr	r1, [pc, #32]	@ (80129d0 <Get_SerialNum+0x54>)
 80129b0:	68b8      	ldr	r0, [r7, #8]
 80129b2:	f000 f80f 	bl	80129d4 <IntToUnicode>
  }
}
 80129b6:	bf00      	nop
 80129b8:	3710      	adds	r7, #16
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd80      	pop	{r7, pc}
 80129be:	bf00      	nop
 80129c0:	1ff1e800 	.word	0x1ff1e800
 80129c4:	1ff1e804 	.word	0x1ff1e804
 80129c8:	1ff1e808 	.word	0x1ff1e808
 80129cc:	240000ea 	.word	0x240000ea
 80129d0:	240000fa 	.word	0x240000fa

080129d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80129d4:	b480      	push	{r7}
 80129d6:	b087      	sub	sp, #28
 80129d8:	af00      	add	r7, sp, #0
 80129da:	60f8      	str	r0, [r7, #12]
 80129dc:	60b9      	str	r1, [r7, #8]
 80129de:	4613      	mov	r3, r2
 80129e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80129e2:	2300      	movs	r3, #0
 80129e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80129e6:	2300      	movs	r3, #0
 80129e8:	75fb      	strb	r3, [r7, #23]
 80129ea:	e027      	b.n	8012a3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	0f1b      	lsrs	r3, r3, #28
 80129f0:	2b09      	cmp	r3, #9
 80129f2:	d80b      	bhi.n	8012a0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	0f1b      	lsrs	r3, r3, #28
 80129f8:	b2da      	uxtb	r2, r3
 80129fa:	7dfb      	ldrb	r3, [r7, #23]
 80129fc:	005b      	lsls	r3, r3, #1
 80129fe:	4619      	mov	r1, r3
 8012a00:	68bb      	ldr	r3, [r7, #8]
 8012a02:	440b      	add	r3, r1
 8012a04:	3230      	adds	r2, #48	@ 0x30
 8012a06:	b2d2      	uxtb	r2, r2
 8012a08:	701a      	strb	r2, [r3, #0]
 8012a0a:	e00a      	b.n	8012a22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	0f1b      	lsrs	r3, r3, #28
 8012a10:	b2da      	uxtb	r2, r3
 8012a12:	7dfb      	ldrb	r3, [r7, #23]
 8012a14:	005b      	lsls	r3, r3, #1
 8012a16:	4619      	mov	r1, r3
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	440b      	add	r3, r1
 8012a1c:	3237      	adds	r2, #55	@ 0x37
 8012a1e:	b2d2      	uxtb	r2, r2
 8012a20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	011b      	lsls	r3, r3, #4
 8012a26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012a28:	7dfb      	ldrb	r3, [r7, #23]
 8012a2a:	005b      	lsls	r3, r3, #1
 8012a2c:	3301      	adds	r3, #1
 8012a2e:	68ba      	ldr	r2, [r7, #8]
 8012a30:	4413      	add	r3, r2
 8012a32:	2200      	movs	r2, #0
 8012a34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012a36:	7dfb      	ldrb	r3, [r7, #23]
 8012a38:	3301      	adds	r3, #1
 8012a3a:	75fb      	strb	r3, [r7, #23]
 8012a3c:	7dfa      	ldrb	r2, [r7, #23]
 8012a3e:	79fb      	ldrb	r3, [r7, #7]
 8012a40:	429a      	cmp	r2, r3
 8012a42:	d3d3      	bcc.n	80129ec <IntToUnicode+0x18>
  }
}
 8012a44:	bf00      	nop
 8012a46:	bf00      	nop
 8012a48:	371c      	adds	r7, #28
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a50:	4770      	bx	lr
	...

08012a54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b0b8      	sub	sp, #224	@ 0xe0
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012a5c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8012a60:	2200      	movs	r2, #0
 8012a62:	601a      	str	r2, [r3, #0]
 8012a64:	605a      	str	r2, [r3, #4]
 8012a66:	609a      	str	r2, [r3, #8]
 8012a68:	60da      	str	r2, [r3, #12]
 8012a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012a6c:	f107 0310 	add.w	r3, r7, #16
 8012a70:	22b8      	movs	r2, #184	@ 0xb8
 8012a72:	2100      	movs	r1, #0
 8012a74:	4618      	mov	r0, r3
 8012a76:	f000 fb21 	bl	80130bc <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	4a29      	ldr	r2, [pc, #164]	@ (8012b24 <HAL_PCD_MspInit+0xd0>)
 8012a80:	4293      	cmp	r3, r2
 8012a82:	d14b      	bne.n	8012b1c <HAL_PCD_MspInit+0xc8>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012a84:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8012a88:	f04f 0300 	mov.w	r3, #0
 8012a8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012a90:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8012a94:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012a98:	f107 0310 	add.w	r3, r7, #16
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f7f6 fb4d 	bl	800913c <HAL_RCCEx_PeriphCLKConfig>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d001      	beq.n	8012aac <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8012aa8:	f7ee fb38 	bl	800111c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8012aac:	f7f5 fbd0 	bl	8008250 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8012b28 <HAL_PCD_MspInit+0xd4>)
 8012ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8012b28 <HAL_PCD_MspInit+0xd4>)
 8012ab8:	f043 0301 	orr.w	r3, r3, #1
 8012abc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8012ac0:	4b19      	ldr	r3, [pc, #100]	@ (8012b28 <HAL_PCD_MspInit+0xd4>)
 8012ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8012ac6:	f003 0301 	and.w	r3, r3, #1
 8012aca:	60fb      	str	r3, [r7, #12]
 8012acc:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8012ace:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012ad2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012adc:	2300      	movs	r3, #0
 8012ade:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012ae2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8012ae6:	4619      	mov	r1, r3
 8012ae8:	4810      	ldr	r0, [pc, #64]	@ (8012b2c <HAL_PCD_MspInit+0xd8>)
 8012aea:	f7f3 fdab 	bl	8006644 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8012aee:	4b0e      	ldr	r3, [pc, #56]	@ (8012b28 <HAL_PCD_MspInit+0xd4>)
 8012af0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012af4:	4a0c      	ldr	r2, [pc, #48]	@ (8012b28 <HAL_PCD_MspInit+0xd4>)
 8012af6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8012afa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8012afe:	4b0a      	ldr	r3, [pc, #40]	@ (8012b28 <HAL_PCD_MspInit+0xd4>)
 8012b00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012b08:	60bb      	str	r3, [r7, #8]
 8012b0a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	2100      	movs	r1, #0
 8012b10:	204d      	movs	r0, #77	@ 0x4d
 8012b12:	f7f1 f960 	bl	8003dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8012b16:	204d      	movs	r0, #77	@ 0x4d
 8012b18:	f7f1 f977 	bl	8003e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8012b1c:	bf00      	nop
 8012b1e:	37e0      	adds	r7, #224	@ 0xe0
 8012b20:	46bd      	mov	sp, r7
 8012b22:	bd80      	pop	{r7, pc}
 8012b24:	40040000 	.word	0x40040000
 8012b28:	58024400 	.word	0x58024400
 8012b2c:	58020000 	.word	0x58020000

08012b30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b082      	sub	sp, #8
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8012b44:	4619      	mov	r1, r3
 8012b46:	4610      	mov	r0, r2
 8012b48:	f7fe fb05 	bl	8011156 <USBD_LL_SetupStage>
}
 8012b4c:	bf00      	nop
 8012b4e:	3708      	adds	r7, #8
 8012b50:	46bd      	mov	sp, r7
 8012b52:	bd80      	pop	{r7, pc}

08012b54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b082      	sub	sp, #8
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	6078      	str	r0, [r7, #4]
 8012b5c:	460b      	mov	r3, r1
 8012b5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8012b66:	78fa      	ldrb	r2, [r7, #3]
 8012b68:	6879      	ldr	r1, [r7, #4]
 8012b6a:	4613      	mov	r3, r2
 8012b6c:	00db      	lsls	r3, r3, #3
 8012b6e:	4413      	add	r3, r2
 8012b70:	009b      	lsls	r3, r3, #2
 8012b72:	440b      	add	r3, r1
 8012b74:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012b78:	681a      	ldr	r2, [r3, #0]
 8012b7a:	78fb      	ldrb	r3, [r7, #3]
 8012b7c:	4619      	mov	r1, r3
 8012b7e:	f7fe fb3f 	bl	8011200 <USBD_LL_DataOutStage>
}
 8012b82:	bf00      	nop
 8012b84:	3708      	adds	r7, #8
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}

08012b8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b8a:	b580      	push	{r7, lr}
 8012b8c:	b082      	sub	sp, #8
 8012b8e:	af00      	add	r7, sp, #0
 8012b90:	6078      	str	r0, [r7, #4]
 8012b92:	460b      	mov	r3, r1
 8012b94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8012b9c:	78fa      	ldrb	r2, [r7, #3]
 8012b9e:	6879      	ldr	r1, [r7, #4]
 8012ba0:	4613      	mov	r3, r2
 8012ba2:	00db      	lsls	r3, r3, #3
 8012ba4:	4413      	add	r3, r2
 8012ba6:	009b      	lsls	r3, r3, #2
 8012ba8:	440b      	add	r3, r1
 8012baa:	3320      	adds	r3, #32
 8012bac:	681a      	ldr	r2, [r3, #0]
 8012bae:	78fb      	ldrb	r3, [r7, #3]
 8012bb0:	4619      	mov	r1, r3
 8012bb2:	f7fe fbd8 	bl	8011366 <USBD_LL_DataInStage>
}
 8012bb6:	bf00      	nop
 8012bb8:	3708      	adds	r7, #8
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd80      	pop	{r7, pc}

08012bbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012bbe:	b580      	push	{r7, lr}
 8012bc0:	b082      	sub	sp, #8
 8012bc2:	af00      	add	r7, sp, #0
 8012bc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f7fe fd12 	bl	80115f6 <USBD_LL_SOF>
}
 8012bd2:	bf00      	nop
 8012bd4:	3708      	adds	r7, #8
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}

08012bda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012bda:	b580      	push	{r7, lr}
 8012bdc:	b084      	sub	sp, #16
 8012bde:	af00      	add	r7, sp, #0
 8012be0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012be2:	2301      	movs	r3, #1
 8012be4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	79db      	ldrb	r3, [r3, #7]
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d102      	bne.n	8012bf4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012bee:	2300      	movs	r3, #0
 8012bf0:	73fb      	strb	r3, [r7, #15]
 8012bf2:	e008      	b.n	8012c06 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	79db      	ldrb	r3, [r3, #7]
 8012bf8:	2b02      	cmp	r3, #2
 8012bfa:	d102      	bne.n	8012c02 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012bfc:	2301      	movs	r3, #1
 8012bfe:	73fb      	strb	r3, [r7, #15]
 8012c00:	e001      	b.n	8012c06 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012c02:	f7ee fa8b 	bl	800111c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012c0c:	7bfa      	ldrb	r2, [r7, #15]
 8012c0e:	4611      	mov	r1, r2
 8012c10:	4618      	mov	r0, r3
 8012c12:	f7fe fcac 	bl	801156e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	f7fe fc54 	bl	80114ca <USBD_LL_Reset>
}
 8012c22:	bf00      	nop
 8012c24:	3710      	adds	r7, #16
 8012c26:	46bd      	mov	sp, r7
 8012c28:	bd80      	pop	{r7, pc}
	...

08012c2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b082      	sub	sp, #8
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f7fe fca7 	bl	801158e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	687a      	ldr	r2, [r7, #4]
 8012c4c:	6812      	ldr	r2, [r2, #0]
 8012c4e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012c52:	f043 0301 	orr.w	r3, r3, #1
 8012c56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	7adb      	ldrb	r3, [r3, #11]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d005      	beq.n	8012c6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012c60:	4b04      	ldr	r3, [pc, #16]	@ (8012c74 <HAL_PCD_SuspendCallback+0x48>)
 8012c62:	691b      	ldr	r3, [r3, #16]
 8012c64:	4a03      	ldr	r2, [pc, #12]	@ (8012c74 <HAL_PCD_SuspendCallback+0x48>)
 8012c66:	f043 0306 	orr.w	r3, r3, #6
 8012c6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012c6c:	bf00      	nop
 8012c6e:	3708      	adds	r7, #8
 8012c70:	46bd      	mov	sp, r7
 8012c72:	bd80      	pop	{r7, pc}
 8012c74:	e000ed00 	.word	0xe000ed00

08012c78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b082      	sub	sp, #8
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012c86:	4618      	mov	r0, r3
 8012c88:	f7fe fc9d 	bl	80115c6 <USBD_LL_Resume>
}
 8012c8c:	bf00      	nop
 8012c8e:	3708      	adds	r7, #8
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bd80      	pop	{r7, pc}

08012c94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b082      	sub	sp, #8
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
 8012c9c:	460b      	mov	r3, r1
 8012c9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012ca6:	78fa      	ldrb	r2, [r7, #3]
 8012ca8:	4611      	mov	r1, r2
 8012caa:	4618      	mov	r0, r3
 8012cac:	f7fe fcf5 	bl	801169a <USBD_LL_IsoOUTIncomplete>
}
 8012cb0:	bf00      	nop
 8012cb2:	3708      	adds	r7, #8
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	bd80      	pop	{r7, pc}

08012cb8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b082      	sub	sp, #8
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
 8012cc0:	460b      	mov	r3, r1
 8012cc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012cca:	78fa      	ldrb	r2, [r7, #3]
 8012ccc:	4611      	mov	r1, r2
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7fe fcb1 	bl	8011636 <USBD_LL_IsoINIncomplete>
}
 8012cd4:	bf00      	nop
 8012cd6:	3708      	adds	r7, #8
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}

08012cdc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b082      	sub	sp, #8
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7fe fd07 	bl	80116fe <USBD_LL_DevConnected>
}
 8012cf0:	bf00      	nop
 8012cf2:	3708      	adds	r7, #8
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	bd80      	pop	{r7, pc}

08012cf8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	b082      	sub	sp, #8
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012d06:	4618      	mov	r0, r3
 8012d08:	f7fe fd04 	bl	8011714 <USBD_LL_DevDisconnected>
}
 8012d0c:	bf00      	nop
 8012d0e:	3708      	adds	r7, #8
 8012d10:	46bd      	mov	sp, r7
 8012d12:	bd80      	pop	{r7, pc}

08012d14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b082      	sub	sp, #8
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	781b      	ldrb	r3, [r3, #0]
 8012d20:	2b01      	cmp	r3, #1
 8012d22:	d140      	bne.n	8012da6 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8012d24:	4a22      	ldr	r2, [pc, #136]	@ (8012db0 <USBD_LL_Init+0x9c>)
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	4a20      	ldr	r2, [pc, #128]	@ (8012db0 <USBD_LL_Init+0x9c>)
 8012d30:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8012d34:	4b1e      	ldr	r3, [pc, #120]	@ (8012db0 <USBD_LL_Init+0x9c>)
 8012d36:	4a1f      	ldr	r2, [pc, #124]	@ (8012db4 <USBD_LL_Init+0xa0>)
 8012d38:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8012d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8012db0 <USBD_LL_Init+0x9c>)
 8012d3c:	2209      	movs	r2, #9
 8012d3e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8012d40:	4b1b      	ldr	r3, [pc, #108]	@ (8012db0 <USBD_LL_Init+0x9c>)
 8012d42:	2202      	movs	r2, #2
 8012d44:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8012d46:	4b1a      	ldr	r3, [pc, #104]	@ (8012db0 <USBD_LL_Init+0x9c>)
 8012d48:	2200      	movs	r2, #0
 8012d4a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8012d4c:	4b18      	ldr	r3, [pc, #96]	@ (8012db0 <USBD_LL_Init+0x9c>)
 8012d4e:	2202      	movs	r2, #2
 8012d50:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8012d52:	4b17      	ldr	r3, [pc, #92]	@ (8012db0 <USBD_LL_Init+0x9c>)
 8012d54:	2200      	movs	r2, #0
 8012d56:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8012d58:	4b15      	ldr	r3, [pc, #84]	@ (8012db0 <USBD_LL_Init+0x9c>)
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8012d5e:	4b14      	ldr	r3, [pc, #80]	@ (8012db0 <USBD_LL_Init+0x9c>)
 8012d60:	2200      	movs	r2, #0
 8012d62:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8012d64:	4b12      	ldr	r3, [pc, #72]	@ (8012db0 <USBD_LL_Init+0x9c>)
 8012d66:	2201      	movs	r2, #1
 8012d68:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8012d6a:	4b11      	ldr	r3, [pc, #68]	@ (8012db0 <USBD_LL_Init+0x9c>)
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8012d70:	4b0f      	ldr	r3, [pc, #60]	@ (8012db0 <USBD_LL_Init+0x9c>)
 8012d72:	2200      	movs	r2, #0
 8012d74:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8012d76:	480e      	ldr	r0, [pc, #56]	@ (8012db0 <USBD_LL_Init+0x9c>)
 8012d78:	f7f3 ff90 	bl	8006c9c <HAL_PCD_Init>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d001      	beq.n	8012d86 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8012d82:	f7ee f9cb 	bl	800111c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8012d86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8012d8a:	4809      	ldr	r0, [pc, #36]	@ (8012db0 <USBD_LL_Init+0x9c>)
 8012d8c:	f7f5 f9e5 	bl	800815a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8012d90:	2280      	movs	r2, #128	@ 0x80
 8012d92:	2100      	movs	r1, #0
 8012d94:	4806      	ldr	r0, [pc, #24]	@ (8012db0 <USBD_LL_Init+0x9c>)
 8012d96:	f7f5 f999 	bl	80080cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8012d9a:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8012d9e:	2101      	movs	r1, #1
 8012da0:	4803      	ldr	r0, [pc, #12]	@ (8012db0 <USBD_LL_Init+0x9c>)
 8012da2:	f7f5 f993 	bl	80080cc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8012da6:	2300      	movs	r3, #0
}
 8012da8:	4618      	mov	r0, r3
 8012daa:	3708      	adds	r7, #8
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}
 8012db0:	24001d24 	.word	0x24001d24
 8012db4:	40040000 	.word	0x40040000

08012db8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b084      	sub	sp, #16
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f7f4 f870 	bl	8006eb4 <HAL_PCD_Start>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012dd8:	7bfb      	ldrb	r3, [r7, #15]
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f000 f942 	bl	8013064 <USBD_Get_USB_Status>
 8012de0:	4603      	mov	r3, r0
 8012de2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012de4:	7bbb      	ldrb	r3, [r7, #14]
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	3710      	adds	r7, #16
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}

08012dee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012dee:	b580      	push	{r7, lr}
 8012df0:	b084      	sub	sp, #16
 8012df2:	af00      	add	r7, sp, #0
 8012df4:	6078      	str	r0, [r7, #4]
 8012df6:	4608      	mov	r0, r1
 8012df8:	4611      	mov	r1, r2
 8012dfa:	461a      	mov	r2, r3
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	70fb      	strb	r3, [r7, #3]
 8012e00:	460b      	mov	r3, r1
 8012e02:	70bb      	strb	r3, [r7, #2]
 8012e04:	4613      	mov	r3, r2
 8012e06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e08:	2300      	movs	r3, #0
 8012e0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012e16:	78bb      	ldrb	r3, [r7, #2]
 8012e18:	883a      	ldrh	r2, [r7, #0]
 8012e1a:	78f9      	ldrb	r1, [r7, #3]
 8012e1c:	f7f4 fd71 	bl	8007902 <HAL_PCD_EP_Open>
 8012e20:	4603      	mov	r3, r0
 8012e22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e24:	7bfb      	ldrb	r3, [r7, #15]
 8012e26:	4618      	mov	r0, r3
 8012e28:	f000 f91c 	bl	8013064 <USBD_Get_USB_Status>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012e30:	7bbb      	ldrb	r3, [r7, #14]
}
 8012e32:	4618      	mov	r0, r3
 8012e34:	3710      	adds	r7, #16
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bd80      	pop	{r7, pc}

08012e3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012e3a:	b580      	push	{r7, lr}
 8012e3c:	b084      	sub	sp, #16
 8012e3e:	af00      	add	r7, sp, #0
 8012e40:	6078      	str	r0, [r7, #4]
 8012e42:	460b      	mov	r3, r1
 8012e44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e46:	2300      	movs	r3, #0
 8012e48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012e54:	78fa      	ldrb	r2, [r7, #3]
 8012e56:	4611      	mov	r1, r2
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f7f4 fdbc 	bl	80079d6 <HAL_PCD_EP_Close>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e62:	7bfb      	ldrb	r3, [r7, #15]
 8012e64:	4618      	mov	r0, r3
 8012e66:	f000 f8fd 	bl	8013064 <USBD_Get_USB_Status>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012e6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012e70:	4618      	mov	r0, r3
 8012e72:	3710      	adds	r7, #16
 8012e74:	46bd      	mov	sp, r7
 8012e76:	bd80      	pop	{r7, pc}

08012e78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b084      	sub	sp, #16
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
 8012e80:	460b      	mov	r3, r1
 8012e82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e84:	2300      	movs	r3, #0
 8012e86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e88:	2300      	movs	r3, #0
 8012e8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012e92:	78fa      	ldrb	r2, [r7, #3]
 8012e94:	4611      	mov	r1, r2
 8012e96:	4618      	mov	r0, r3
 8012e98:	f7f4 fe74 	bl	8007b84 <HAL_PCD_EP_SetStall>
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ea0:	7bfb      	ldrb	r3, [r7, #15]
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	f000 f8de 	bl	8013064 <USBD_Get_USB_Status>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012eac:	7bbb      	ldrb	r3, [r7, #14]
}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3710      	adds	r7, #16
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd80      	pop	{r7, pc}

08012eb6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012eb6:	b580      	push	{r7, lr}
 8012eb8:	b084      	sub	sp, #16
 8012eba:	af00      	add	r7, sp, #0
 8012ebc:	6078      	str	r0, [r7, #4]
 8012ebe:	460b      	mov	r3, r1
 8012ec0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012ed0:	78fa      	ldrb	r2, [r7, #3]
 8012ed2:	4611      	mov	r1, r2
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	f7f4 feb8 	bl	8007c4a <HAL_PCD_EP_ClrStall>
 8012eda:	4603      	mov	r3, r0
 8012edc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ede:	7bfb      	ldrb	r3, [r7, #15]
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f000 f8bf 	bl	8013064 <USBD_Get_USB_Status>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012eea:	7bbb      	ldrb	r3, [r7, #14]
}
 8012eec:	4618      	mov	r0, r3
 8012eee:	3710      	adds	r7, #16
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	bd80      	pop	{r7, pc}

08012ef4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ef4:	b480      	push	{r7}
 8012ef6:	b085      	sub	sp, #20
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
 8012efc:	460b      	mov	r3, r1
 8012efe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012f06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012f08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	da0b      	bge.n	8012f28 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012f10:	78fb      	ldrb	r3, [r7, #3]
 8012f12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012f16:	68f9      	ldr	r1, [r7, #12]
 8012f18:	4613      	mov	r3, r2
 8012f1a:	00db      	lsls	r3, r3, #3
 8012f1c:	4413      	add	r3, r2
 8012f1e:	009b      	lsls	r3, r3, #2
 8012f20:	440b      	add	r3, r1
 8012f22:	3316      	adds	r3, #22
 8012f24:	781b      	ldrb	r3, [r3, #0]
 8012f26:	e00b      	b.n	8012f40 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012f28:	78fb      	ldrb	r3, [r7, #3]
 8012f2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012f2e:	68f9      	ldr	r1, [r7, #12]
 8012f30:	4613      	mov	r3, r2
 8012f32:	00db      	lsls	r3, r3, #3
 8012f34:	4413      	add	r3, r2
 8012f36:	009b      	lsls	r3, r3, #2
 8012f38:	440b      	add	r3, r1
 8012f3a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8012f3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012f40:	4618      	mov	r0, r3
 8012f42:	3714      	adds	r7, #20
 8012f44:	46bd      	mov	sp, r7
 8012f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f4a:	4770      	bx	lr

08012f4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	b084      	sub	sp, #16
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
 8012f54:	460b      	mov	r3, r1
 8012f56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f58:	2300      	movs	r3, #0
 8012f5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012f66:	78fa      	ldrb	r2, [r7, #3]
 8012f68:	4611      	mov	r1, r2
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f7f4 fca5 	bl	80078ba <HAL_PCD_SetAddress>
 8012f70:	4603      	mov	r3, r0
 8012f72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012f74:	7bfb      	ldrb	r3, [r7, #15]
 8012f76:	4618      	mov	r0, r3
 8012f78:	f000 f874 	bl	8013064 <USBD_Get_USB_Status>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012f80:	7bbb      	ldrb	r3, [r7, #14]
}
 8012f82:	4618      	mov	r0, r3
 8012f84:	3710      	adds	r7, #16
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd80      	pop	{r7, pc}

08012f8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012f8a:	b580      	push	{r7, lr}
 8012f8c:	b086      	sub	sp, #24
 8012f8e:	af00      	add	r7, sp, #0
 8012f90:	60f8      	str	r0, [r7, #12]
 8012f92:	607a      	str	r2, [r7, #4]
 8012f94:	603b      	str	r3, [r7, #0]
 8012f96:	460b      	mov	r3, r1
 8012f98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012fa8:	7af9      	ldrb	r1, [r7, #11]
 8012faa:	683b      	ldr	r3, [r7, #0]
 8012fac:	687a      	ldr	r2, [r7, #4]
 8012fae:	f7f4 fdaf 	bl	8007b10 <HAL_PCD_EP_Transmit>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012fb6:	7dfb      	ldrb	r3, [r7, #23]
 8012fb8:	4618      	mov	r0, r3
 8012fba:	f000 f853 	bl	8013064 <USBD_Get_USB_Status>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012fc2:	7dbb      	ldrb	r3, [r7, #22]
}
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	3718      	adds	r7, #24
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd80      	pop	{r7, pc}

08012fcc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b086      	sub	sp, #24
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	60f8      	str	r0, [r7, #12]
 8012fd4:	607a      	str	r2, [r7, #4]
 8012fd6:	603b      	str	r3, [r7, #0]
 8012fd8:	460b      	mov	r3, r1
 8012fda:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012fdc:	2300      	movs	r3, #0
 8012fde:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012fea:	7af9      	ldrb	r1, [r7, #11]
 8012fec:	683b      	ldr	r3, [r7, #0]
 8012fee:	687a      	ldr	r2, [r7, #4]
 8012ff0:	f7f4 fd3b 	bl	8007a6a <HAL_PCD_EP_Receive>
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ff8:	7dfb      	ldrb	r3, [r7, #23]
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f000 f832 	bl	8013064 <USBD_Get_USB_Status>
 8013000:	4603      	mov	r3, r0
 8013002:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013004:	7dbb      	ldrb	r3, [r7, #22]
}
 8013006:	4618      	mov	r0, r3
 8013008:	3718      	adds	r7, #24
 801300a:	46bd      	mov	sp, r7
 801300c:	bd80      	pop	{r7, pc}

0801300e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801300e:	b580      	push	{r7, lr}
 8013010:	b082      	sub	sp, #8
 8013012:	af00      	add	r7, sp, #0
 8013014:	6078      	str	r0, [r7, #4]
 8013016:	460b      	mov	r3, r1
 8013018:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013020:	78fa      	ldrb	r2, [r7, #3]
 8013022:	4611      	mov	r1, r2
 8013024:	4618      	mov	r0, r3
 8013026:	f7f4 fd5b 	bl	8007ae0 <HAL_PCD_EP_GetRxCount>
 801302a:	4603      	mov	r3, r0
}
 801302c:	4618      	mov	r0, r3
 801302e:	3708      	adds	r7, #8
 8013030:	46bd      	mov	sp, r7
 8013032:	bd80      	pop	{r7, pc}

08013034 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013034:	b480      	push	{r7}
 8013036:	b083      	sub	sp, #12
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801303c:	4b03      	ldr	r3, [pc, #12]	@ (801304c <USBD_static_malloc+0x18>)
}
 801303e:	4618      	mov	r0, r3
 8013040:	370c      	adds	r7, #12
 8013042:	46bd      	mov	sp, r7
 8013044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013048:	4770      	bx	lr
 801304a:	bf00      	nop
 801304c:	24002208 	.word	0x24002208

08013050 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013050:	b480      	push	{r7}
 8013052:	b083      	sub	sp, #12
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8013058:	bf00      	nop
 801305a:	370c      	adds	r7, #12
 801305c:	46bd      	mov	sp, r7
 801305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013062:	4770      	bx	lr

08013064 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013064:	b480      	push	{r7}
 8013066:	b085      	sub	sp, #20
 8013068:	af00      	add	r7, sp, #0
 801306a:	4603      	mov	r3, r0
 801306c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801306e:	2300      	movs	r3, #0
 8013070:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013072:	79fb      	ldrb	r3, [r7, #7]
 8013074:	2b03      	cmp	r3, #3
 8013076:	d817      	bhi.n	80130a8 <USBD_Get_USB_Status+0x44>
 8013078:	a201      	add	r2, pc, #4	@ (adr r2, 8013080 <USBD_Get_USB_Status+0x1c>)
 801307a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801307e:	bf00      	nop
 8013080:	08013091 	.word	0x08013091
 8013084:	08013097 	.word	0x08013097
 8013088:	0801309d 	.word	0x0801309d
 801308c:	080130a3 	.word	0x080130a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013090:	2300      	movs	r3, #0
 8013092:	73fb      	strb	r3, [r7, #15]
    break;
 8013094:	e00b      	b.n	80130ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013096:	2303      	movs	r3, #3
 8013098:	73fb      	strb	r3, [r7, #15]
    break;
 801309a:	e008      	b.n	80130ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801309c:	2301      	movs	r3, #1
 801309e:	73fb      	strb	r3, [r7, #15]
    break;
 80130a0:	e005      	b.n	80130ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80130a2:	2303      	movs	r3, #3
 80130a4:	73fb      	strb	r3, [r7, #15]
    break;
 80130a6:	e002      	b.n	80130ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80130a8:	2303      	movs	r3, #3
 80130aa:	73fb      	strb	r3, [r7, #15]
    break;
 80130ac:	bf00      	nop
  }
  return usb_status;
 80130ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80130b0:	4618      	mov	r0, r3
 80130b2:	3714      	adds	r7, #20
 80130b4:	46bd      	mov	sp, r7
 80130b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ba:	4770      	bx	lr

080130bc <memset>:
 80130bc:	4402      	add	r2, r0
 80130be:	4603      	mov	r3, r0
 80130c0:	4293      	cmp	r3, r2
 80130c2:	d100      	bne.n	80130c6 <memset+0xa>
 80130c4:	4770      	bx	lr
 80130c6:	f803 1b01 	strb.w	r1, [r3], #1
 80130ca:	e7f9      	b.n	80130c0 <memset+0x4>

080130cc <__libc_init_array>:
 80130cc:	b570      	push	{r4, r5, r6, lr}
 80130ce:	4d0d      	ldr	r5, [pc, #52]	@ (8013104 <__libc_init_array+0x38>)
 80130d0:	4c0d      	ldr	r4, [pc, #52]	@ (8013108 <__libc_init_array+0x3c>)
 80130d2:	1b64      	subs	r4, r4, r5
 80130d4:	10a4      	asrs	r4, r4, #2
 80130d6:	2600      	movs	r6, #0
 80130d8:	42a6      	cmp	r6, r4
 80130da:	d109      	bne.n	80130f0 <__libc_init_array+0x24>
 80130dc:	4d0b      	ldr	r5, [pc, #44]	@ (801310c <__libc_init_array+0x40>)
 80130de:	4c0c      	ldr	r4, [pc, #48]	@ (8013110 <__libc_init_array+0x44>)
 80130e0:	f000 f826 	bl	8013130 <_init>
 80130e4:	1b64      	subs	r4, r4, r5
 80130e6:	10a4      	asrs	r4, r4, #2
 80130e8:	2600      	movs	r6, #0
 80130ea:	42a6      	cmp	r6, r4
 80130ec:	d105      	bne.n	80130fa <__libc_init_array+0x2e>
 80130ee:	bd70      	pop	{r4, r5, r6, pc}
 80130f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80130f4:	4798      	blx	r3
 80130f6:	3601      	adds	r6, #1
 80130f8:	e7ee      	b.n	80130d8 <__libc_init_array+0xc>
 80130fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80130fe:	4798      	blx	r3
 8013100:	3601      	adds	r6, #1
 8013102:	e7f2      	b.n	80130ea <__libc_init_array+0x1e>
 8013104:	080131d8 	.word	0x080131d8
 8013108:	080131d8 	.word	0x080131d8
 801310c:	080131d8 	.word	0x080131d8
 8013110:	080131dc 	.word	0x080131dc

08013114 <memcpy>:
 8013114:	440a      	add	r2, r1
 8013116:	4291      	cmp	r1, r2
 8013118:	f100 33ff 	add.w	r3, r0, #4294967295
 801311c:	d100      	bne.n	8013120 <memcpy+0xc>
 801311e:	4770      	bx	lr
 8013120:	b510      	push	{r4, lr}
 8013122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013126:	f803 4f01 	strb.w	r4, [r3, #1]!
 801312a:	4291      	cmp	r1, r2
 801312c:	d1f9      	bne.n	8013122 <memcpy+0xe>
 801312e:	bd10      	pop	{r4, pc}

08013130 <_init>:
 8013130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013132:	bf00      	nop
 8013134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013136:	bc08      	pop	{r3}
 8013138:	469e      	mov	lr, r3
 801313a:	4770      	bx	lr

0801313c <_fini>:
 801313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801313e:	bf00      	nop
 8013140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013142:	bc08      	pop	{r3}
 8013144:	469e      	mov	lr, r3
 8013146:	4770      	bx	lr
