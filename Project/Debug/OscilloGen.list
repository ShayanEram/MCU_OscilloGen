
OscilloGen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a108  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013dac  0801a3d8  0801a3d8  0001b3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802e184  0802e184  0002f184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0802e18c  0802e18c  0002f18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0802e194  0802e194  0002f194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000160  24000000  0802e198  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004910  24000160  0802e2f8  00030160  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004a70  0802e2f8  00030a70  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY
 10 .debug_info   0006a5bc  00000000  00000000  0003018e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000a899  00000000  00000000  0009a74a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b88  00000000  00000000  000a4fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002081  00000000  00000000  000a7b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00048824  00000000  00000000  000a9bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004b515  00000000  00000000  000f2415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001830a7  00000000  00000000  0013d92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b3  00000000  00000000  002c09d1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bee8  00000000  00000000  002c0a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  002cc96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    00003267  00000000  00000000  002cc9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000070  00000000  00000000  002cfc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000160 	.word	0x24000160
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801a3c0 	.word	0x0801a3c0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000164 	.word	0x24000164
 800030c:	0801a3c0 	.word	0x0801a3c0

08000310 <arm_bitreversal_32>:
 8000310:	1c4b      	adds	r3, r1, #1
 8000312:	2b01      	cmp	r3, #1
 8000314:	bf98      	it	ls
 8000316:	4770      	bxls	lr
 8000318:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800031c:	1c91      	adds	r1, r2, #2
 800031e:	089b      	lsrs	r3, r3, #2

08000320 <arm_bitreversal_32_0>:
 8000320:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000324:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000328:	880a      	ldrh	r2, [r1, #0]
 800032a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800032e:	4480      	add	r8, r0
 8000330:	4481      	add	r9, r0
 8000332:	4402      	add	r2, r0
 8000334:	4484      	add	ip, r0
 8000336:	f8d9 7000 	ldr.w	r7, [r9]
 800033a:	f8d8 6000 	ldr.w	r6, [r8]
 800033e:	6815      	ldr	r5, [r2, #0]
 8000340:	f8dc 4000 	ldr.w	r4, [ip]
 8000344:	f8c9 6000 	str.w	r6, [r9]
 8000348:	f8c8 7000 	str.w	r7, [r8]
 800034c:	f8cc 5000 	str.w	r5, [ip]
 8000350:	6014      	str	r4, [r2, #0]
 8000352:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000356:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800035a:	6855      	ldr	r5, [r2, #4]
 800035c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000360:	f8c9 6004 	str.w	r6, [r9, #4]
 8000364:	f8c8 7004 	str.w	r7, [r8, #4]
 8000368:	f8cc 5004 	str.w	r5, [ip, #4]
 800036c:	6054      	str	r4, [r2, #4]
 800036e:	3108      	adds	r1, #8
 8000370:	3b01      	subs	r3, #1
 8000372:	d1d5      	bne.n	8000320 <arm_bitreversal_32_0>
 8000374:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000378:	4770      	bx	lr

0800037a <arm_bitreversal_16>:
 800037a:	1c4b      	adds	r3, r1, #1
 800037c:	2b01      	cmp	r3, #1
 800037e:	bf98      	it	ls
 8000380:	4770      	bxls	lr
 8000382:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000386:	1c91      	adds	r1, r2, #2
 8000388:	089b      	lsrs	r3, r3, #2

0800038a <arm_bitreversal_16_0>:
 800038a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800038e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000392:	880a      	ldrh	r2, [r1, #0]
 8000394:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000398:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800039c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80003a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80003a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80003a8:	f8d9 7000 	ldr.w	r7, [r9]
 80003ac:	f8d8 6000 	ldr.w	r6, [r8]
 80003b0:	6815      	ldr	r5, [r2, #0]
 80003b2:	f8dc 4000 	ldr.w	r4, [ip]
 80003b6:	f8c9 6000 	str.w	r6, [r9]
 80003ba:	f8c8 7000 	str.w	r7, [r8]
 80003be:	f8cc 5000 	str.w	r5, [ip]
 80003c2:	6014      	str	r4, [r2, #0]
 80003c4:	3108      	adds	r1, #8
 80003c6:	3b01      	subs	r3, #1
 80003c8:	d1df      	bne.n	800038a <arm_bitreversal_16_0>
 80003ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80003ce:	4770      	bx	lr

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <memchr>:
 80003e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80003e4:	2a10      	cmp	r2, #16
 80003e6:	db2b      	blt.n	8000440 <memchr+0x60>
 80003e8:	f010 0f07 	tst.w	r0, #7
 80003ec:	d008      	beq.n	8000400 <memchr+0x20>
 80003ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003f2:	3a01      	subs	r2, #1
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d02d      	beq.n	8000454 <memchr+0x74>
 80003f8:	f010 0f07 	tst.w	r0, #7
 80003fc:	b342      	cbz	r2, 8000450 <memchr+0x70>
 80003fe:	d1f6      	bne.n	80003ee <memchr+0xe>
 8000400:	b4f0      	push	{r4, r5, r6, r7}
 8000402:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000406:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800040a:	f022 0407 	bic.w	r4, r2, #7
 800040e:	f07f 0700 	mvns.w	r7, #0
 8000412:	2300      	movs	r3, #0
 8000414:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000418:	3c08      	subs	r4, #8
 800041a:	ea85 0501 	eor.w	r5, r5, r1
 800041e:	ea86 0601 	eor.w	r6, r6, r1
 8000422:	fa85 f547 	uadd8	r5, r5, r7
 8000426:	faa3 f587 	sel	r5, r3, r7
 800042a:	fa86 f647 	uadd8	r6, r6, r7
 800042e:	faa5 f687 	sel	r6, r5, r7
 8000432:	b98e      	cbnz	r6, 8000458 <memchr+0x78>
 8000434:	d1ee      	bne.n	8000414 <memchr+0x34>
 8000436:	bcf0      	pop	{r4, r5, r6, r7}
 8000438:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800043c:	f002 0207 	and.w	r2, r2, #7
 8000440:	b132      	cbz	r2, 8000450 <memchr+0x70>
 8000442:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000446:	3a01      	subs	r2, #1
 8000448:	ea83 0301 	eor.w	r3, r3, r1
 800044c:	b113      	cbz	r3, 8000454 <memchr+0x74>
 800044e:	d1f8      	bne.n	8000442 <memchr+0x62>
 8000450:	2000      	movs	r0, #0
 8000452:	4770      	bx	lr
 8000454:	3801      	subs	r0, #1
 8000456:	4770      	bx	lr
 8000458:	2d00      	cmp	r5, #0
 800045a:	bf06      	itte	eq
 800045c:	4635      	moveq	r5, r6
 800045e:	3803      	subeq	r0, #3
 8000460:	3807      	subne	r0, #7
 8000462:	f015 0f01 	tst.w	r5, #1
 8000466:	d107      	bne.n	8000478 <memchr+0x98>
 8000468:	3001      	adds	r0, #1
 800046a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800046e:	bf02      	ittt	eq
 8000470:	3001      	addeq	r0, #1
 8000472:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000476:	3001      	addeq	r0, #1
 8000478:	bcf0      	pop	{r4, r5, r6, r7}
 800047a:	3801      	subs	r0, #1
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <__aeabi_uldivmod>:
 8000480:	b953      	cbnz	r3, 8000498 <__aeabi_uldivmod+0x18>
 8000482:	b94a      	cbnz	r2, 8000498 <__aeabi_uldivmod+0x18>
 8000484:	2900      	cmp	r1, #0
 8000486:	bf08      	it	eq
 8000488:	2800      	cmpeq	r0, #0
 800048a:	bf1c      	itt	ne
 800048c:	f04f 31ff 	movne.w	r1, #4294967295
 8000490:	f04f 30ff 	movne.w	r0, #4294967295
 8000494:	f000 b988 	b.w	80007a8 <__aeabi_idiv0>
 8000498:	f1ad 0c08 	sub.w	ip, sp, #8
 800049c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80004a0:	f000 f806 	bl	80004b0 <__udivmoddi4>
 80004a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004ac:	b004      	add	sp, #16
 80004ae:	4770      	bx	lr

080004b0 <__udivmoddi4>:
 80004b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004b4:	9d08      	ldr	r5, [sp, #32]
 80004b6:	468e      	mov	lr, r1
 80004b8:	4604      	mov	r4, r0
 80004ba:	4688      	mov	r8, r1
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d14a      	bne.n	8000556 <__udivmoddi4+0xa6>
 80004c0:	428a      	cmp	r2, r1
 80004c2:	4617      	mov	r7, r2
 80004c4:	d962      	bls.n	800058c <__udivmoddi4+0xdc>
 80004c6:	fab2 f682 	clz	r6, r2
 80004ca:	b14e      	cbz	r6, 80004e0 <__udivmoddi4+0x30>
 80004cc:	f1c6 0320 	rsb	r3, r6, #32
 80004d0:	fa01 f806 	lsl.w	r8, r1, r6
 80004d4:	fa20 f303 	lsr.w	r3, r0, r3
 80004d8:	40b7      	lsls	r7, r6
 80004da:	ea43 0808 	orr.w	r8, r3, r8
 80004de:	40b4      	lsls	r4, r6
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	fa1f fc87 	uxth.w	ip, r7
 80004e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80004f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004f6:	fb01 f20c 	mul.w	r2, r1, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d909      	bls.n	8000512 <__udivmoddi4+0x62>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f101 30ff 	add.w	r0, r1, #4294967295
 8000504:	f080 80ea 	bcs.w	80006dc <__udivmoddi4+0x22c>
 8000508:	429a      	cmp	r2, r3
 800050a:	f240 80e7 	bls.w	80006dc <__udivmoddi4+0x22c>
 800050e:	3902      	subs	r1, #2
 8000510:	443b      	add	r3, r7
 8000512:	1a9a      	subs	r2, r3, r2
 8000514:	b2a3      	uxth	r3, r4
 8000516:	fbb2 f0fe 	udiv	r0, r2, lr
 800051a:	fb0e 2210 	mls	r2, lr, r0, r2
 800051e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000522:	fb00 fc0c 	mul.w	ip, r0, ip
 8000526:	459c      	cmp	ip, r3
 8000528:	d909      	bls.n	800053e <__udivmoddi4+0x8e>
 800052a:	18fb      	adds	r3, r7, r3
 800052c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000530:	f080 80d6 	bcs.w	80006e0 <__udivmoddi4+0x230>
 8000534:	459c      	cmp	ip, r3
 8000536:	f240 80d3 	bls.w	80006e0 <__udivmoddi4+0x230>
 800053a:	443b      	add	r3, r7
 800053c:	3802      	subs	r0, #2
 800053e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000542:	eba3 030c 	sub.w	r3, r3, ip
 8000546:	2100      	movs	r1, #0
 8000548:	b11d      	cbz	r5, 8000552 <__udivmoddi4+0xa2>
 800054a:	40f3      	lsrs	r3, r6
 800054c:	2200      	movs	r2, #0
 800054e:	e9c5 3200 	strd	r3, r2, [r5]
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	428b      	cmp	r3, r1
 8000558:	d905      	bls.n	8000566 <__udivmoddi4+0xb6>
 800055a:	b10d      	cbz	r5, 8000560 <__udivmoddi4+0xb0>
 800055c:	e9c5 0100 	strd	r0, r1, [r5]
 8000560:	2100      	movs	r1, #0
 8000562:	4608      	mov	r0, r1
 8000564:	e7f5      	b.n	8000552 <__udivmoddi4+0xa2>
 8000566:	fab3 f183 	clz	r1, r3
 800056a:	2900      	cmp	r1, #0
 800056c:	d146      	bne.n	80005fc <__udivmoddi4+0x14c>
 800056e:	4573      	cmp	r3, lr
 8000570:	d302      	bcc.n	8000578 <__udivmoddi4+0xc8>
 8000572:	4282      	cmp	r2, r0
 8000574:	f200 8105 	bhi.w	8000782 <__udivmoddi4+0x2d2>
 8000578:	1a84      	subs	r4, r0, r2
 800057a:	eb6e 0203 	sbc.w	r2, lr, r3
 800057e:	2001      	movs	r0, #1
 8000580:	4690      	mov	r8, r2
 8000582:	2d00      	cmp	r5, #0
 8000584:	d0e5      	beq.n	8000552 <__udivmoddi4+0xa2>
 8000586:	e9c5 4800 	strd	r4, r8, [r5]
 800058a:	e7e2      	b.n	8000552 <__udivmoddi4+0xa2>
 800058c:	2a00      	cmp	r2, #0
 800058e:	f000 8090 	beq.w	80006b2 <__udivmoddi4+0x202>
 8000592:	fab2 f682 	clz	r6, r2
 8000596:	2e00      	cmp	r6, #0
 8000598:	f040 80a4 	bne.w	80006e4 <__udivmoddi4+0x234>
 800059c:	1a8a      	subs	r2, r1, r2
 800059e:	0c03      	lsrs	r3, r0, #16
 80005a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005a4:	b280      	uxth	r0, r0
 80005a6:	b2bc      	uxth	r4, r7
 80005a8:	2101      	movs	r1, #1
 80005aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80005ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80005b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80005b6:	fb04 f20c 	mul.w	r2, r4, ip
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d907      	bls.n	80005ce <__udivmoddi4+0x11e>
 80005be:	18fb      	adds	r3, r7, r3
 80005c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80005c4:	d202      	bcs.n	80005cc <__udivmoddi4+0x11c>
 80005c6:	429a      	cmp	r2, r3
 80005c8:	f200 80e0 	bhi.w	800078c <__udivmoddi4+0x2dc>
 80005cc:	46c4      	mov	ip, r8
 80005ce:	1a9b      	subs	r3, r3, r2
 80005d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80005d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80005d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80005dc:	fb02 f404 	mul.w	r4, r2, r4
 80005e0:	429c      	cmp	r4, r3
 80005e2:	d907      	bls.n	80005f4 <__udivmoddi4+0x144>
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80005ea:	d202      	bcs.n	80005f2 <__udivmoddi4+0x142>
 80005ec:	429c      	cmp	r4, r3
 80005ee:	f200 80ca 	bhi.w	8000786 <__udivmoddi4+0x2d6>
 80005f2:	4602      	mov	r2, r0
 80005f4:	1b1b      	subs	r3, r3, r4
 80005f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80005fa:	e7a5      	b.n	8000548 <__udivmoddi4+0x98>
 80005fc:	f1c1 0620 	rsb	r6, r1, #32
 8000600:	408b      	lsls	r3, r1
 8000602:	fa22 f706 	lsr.w	r7, r2, r6
 8000606:	431f      	orrs	r7, r3
 8000608:	fa0e f401 	lsl.w	r4, lr, r1
 800060c:	fa20 f306 	lsr.w	r3, r0, r6
 8000610:	fa2e fe06 	lsr.w	lr, lr, r6
 8000614:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000618:	4323      	orrs	r3, r4
 800061a:	fa00 f801 	lsl.w	r8, r0, r1
 800061e:	fa1f fc87 	uxth.w	ip, r7
 8000622:	fbbe f0f9 	udiv	r0, lr, r9
 8000626:	0c1c      	lsrs	r4, r3, #16
 8000628:	fb09 ee10 	mls	lr, r9, r0, lr
 800062c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000630:	fb00 fe0c 	mul.w	lr, r0, ip
 8000634:	45a6      	cmp	lr, r4
 8000636:	fa02 f201 	lsl.w	r2, r2, r1
 800063a:	d909      	bls.n	8000650 <__udivmoddi4+0x1a0>
 800063c:	193c      	adds	r4, r7, r4
 800063e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000642:	f080 809c 	bcs.w	800077e <__udivmoddi4+0x2ce>
 8000646:	45a6      	cmp	lr, r4
 8000648:	f240 8099 	bls.w	800077e <__udivmoddi4+0x2ce>
 800064c:	3802      	subs	r0, #2
 800064e:	443c      	add	r4, r7
 8000650:	eba4 040e 	sub.w	r4, r4, lr
 8000654:	fa1f fe83 	uxth.w	lr, r3
 8000658:	fbb4 f3f9 	udiv	r3, r4, r9
 800065c:	fb09 4413 	mls	r4, r9, r3, r4
 8000660:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000664:	fb03 fc0c 	mul.w	ip, r3, ip
 8000668:	45a4      	cmp	ip, r4
 800066a:	d908      	bls.n	800067e <__udivmoddi4+0x1ce>
 800066c:	193c      	adds	r4, r7, r4
 800066e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000672:	f080 8082 	bcs.w	800077a <__udivmoddi4+0x2ca>
 8000676:	45a4      	cmp	ip, r4
 8000678:	d97f      	bls.n	800077a <__udivmoddi4+0x2ca>
 800067a:	3b02      	subs	r3, #2
 800067c:	443c      	add	r4, r7
 800067e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000682:	eba4 040c 	sub.w	r4, r4, ip
 8000686:	fba0 ec02 	umull	lr, ip, r0, r2
 800068a:	4564      	cmp	r4, ip
 800068c:	4673      	mov	r3, lr
 800068e:	46e1      	mov	r9, ip
 8000690:	d362      	bcc.n	8000758 <__udivmoddi4+0x2a8>
 8000692:	d05f      	beq.n	8000754 <__udivmoddi4+0x2a4>
 8000694:	b15d      	cbz	r5, 80006ae <__udivmoddi4+0x1fe>
 8000696:	ebb8 0203 	subs.w	r2, r8, r3
 800069a:	eb64 0409 	sbc.w	r4, r4, r9
 800069e:	fa04 f606 	lsl.w	r6, r4, r6
 80006a2:	fa22 f301 	lsr.w	r3, r2, r1
 80006a6:	431e      	orrs	r6, r3
 80006a8:	40cc      	lsrs	r4, r1
 80006aa:	e9c5 6400 	strd	r6, r4, [r5]
 80006ae:	2100      	movs	r1, #0
 80006b0:	e74f      	b.n	8000552 <__udivmoddi4+0xa2>
 80006b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80006b6:	0c01      	lsrs	r1, r0, #16
 80006b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80006bc:	b280      	uxth	r0, r0
 80006be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80006c2:	463b      	mov	r3, r7
 80006c4:	4638      	mov	r0, r7
 80006c6:	463c      	mov	r4, r7
 80006c8:	46b8      	mov	r8, r7
 80006ca:	46be      	mov	lr, r7
 80006cc:	2620      	movs	r6, #32
 80006ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80006d2:	eba2 0208 	sub.w	r2, r2, r8
 80006d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80006da:	e766      	b.n	80005aa <__udivmoddi4+0xfa>
 80006dc:	4601      	mov	r1, r0
 80006de:	e718      	b.n	8000512 <__udivmoddi4+0x62>
 80006e0:	4610      	mov	r0, r2
 80006e2:	e72c      	b.n	800053e <__udivmoddi4+0x8e>
 80006e4:	f1c6 0220 	rsb	r2, r6, #32
 80006e8:	fa2e f302 	lsr.w	r3, lr, r2
 80006ec:	40b7      	lsls	r7, r6
 80006ee:	40b1      	lsls	r1, r6
 80006f0:	fa20 f202 	lsr.w	r2, r0, r2
 80006f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006f8:	430a      	orrs	r2, r1
 80006fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80006fe:	b2bc      	uxth	r4, r7
 8000700:	fb0e 3318 	mls	r3, lr, r8, r3
 8000704:	0c11      	lsrs	r1, r2, #16
 8000706:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800070a:	fb08 f904 	mul.w	r9, r8, r4
 800070e:	40b0      	lsls	r0, r6
 8000710:	4589      	cmp	r9, r1
 8000712:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000716:	b280      	uxth	r0, r0
 8000718:	d93e      	bls.n	8000798 <__udivmoddi4+0x2e8>
 800071a:	1879      	adds	r1, r7, r1
 800071c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000720:	d201      	bcs.n	8000726 <__udivmoddi4+0x276>
 8000722:	4589      	cmp	r9, r1
 8000724:	d81f      	bhi.n	8000766 <__udivmoddi4+0x2b6>
 8000726:	eba1 0109 	sub.w	r1, r1, r9
 800072a:	fbb1 f9fe 	udiv	r9, r1, lr
 800072e:	fb09 f804 	mul.w	r8, r9, r4
 8000732:	fb0e 1119 	mls	r1, lr, r9, r1
 8000736:	b292      	uxth	r2, r2
 8000738:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800073c:	4542      	cmp	r2, r8
 800073e:	d229      	bcs.n	8000794 <__udivmoddi4+0x2e4>
 8000740:	18ba      	adds	r2, r7, r2
 8000742:	f109 31ff 	add.w	r1, r9, #4294967295
 8000746:	d2c4      	bcs.n	80006d2 <__udivmoddi4+0x222>
 8000748:	4542      	cmp	r2, r8
 800074a:	d2c2      	bcs.n	80006d2 <__udivmoddi4+0x222>
 800074c:	f1a9 0102 	sub.w	r1, r9, #2
 8000750:	443a      	add	r2, r7
 8000752:	e7be      	b.n	80006d2 <__udivmoddi4+0x222>
 8000754:	45f0      	cmp	r8, lr
 8000756:	d29d      	bcs.n	8000694 <__udivmoddi4+0x1e4>
 8000758:	ebbe 0302 	subs.w	r3, lr, r2
 800075c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000760:	3801      	subs	r0, #1
 8000762:	46e1      	mov	r9, ip
 8000764:	e796      	b.n	8000694 <__udivmoddi4+0x1e4>
 8000766:	eba7 0909 	sub.w	r9, r7, r9
 800076a:	4449      	add	r1, r9
 800076c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000770:	fbb1 f9fe 	udiv	r9, r1, lr
 8000774:	fb09 f804 	mul.w	r8, r9, r4
 8000778:	e7db      	b.n	8000732 <__udivmoddi4+0x282>
 800077a:	4673      	mov	r3, lr
 800077c:	e77f      	b.n	800067e <__udivmoddi4+0x1ce>
 800077e:	4650      	mov	r0, sl
 8000780:	e766      	b.n	8000650 <__udivmoddi4+0x1a0>
 8000782:	4608      	mov	r0, r1
 8000784:	e6fd      	b.n	8000582 <__udivmoddi4+0xd2>
 8000786:	443b      	add	r3, r7
 8000788:	3a02      	subs	r2, #2
 800078a:	e733      	b.n	80005f4 <__udivmoddi4+0x144>
 800078c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000790:	443b      	add	r3, r7
 8000792:	e71c      	b.n	80005ce <__udivmoddi4+0x11e>
 8000794:	4649      	mov	r1, r9
 8000796:	e79c      	b.n	80006d2 <__udivmoddi4+0x222>
 8000798:	eba1 0109 	sub.w	r1, r1, r9
 800079c:	46c4      	mov	ip, r8
 800079e:	fbb1 f9fe 	udiv	r9, r1, lr
 80007a2:	fb09 f804 	mul.w	r8, r9, r4
 80007a6:	e7c4      	b.n	8000732 <__udivmoddi4+0x282>

080007a8 <__aeabi_idiv0>:
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop

080007ac <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	@ 0x30
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2224      	movs	r2, #36	@ 0x24
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f018 fedd 	bl	8019584 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ca:	4b32      	ldr	r3, [pc, #200]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007cc:	4a32      	ldr	r2, [pc, #200]	@ (8000898 <MX_ADC1_Init+0xec>)
 80007ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007d0:	4b30      	ldr	r3, [pc, #192]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007e4:	2204      	movs	r2, #4
 80007e6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007ee:	4b29      	ldr	r3, [pc, #164]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007f4:	4b27      	ldr	r3, [pc, #156]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fa:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000802:	4b24      	ldr	r3, [pc, #144]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000804:	2200      	movs	r2, #0
 8000806:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000808:	4b22      	ldr	r3, [pc, #136]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800080a:	2200      	movs	r2, #0
 800080c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800080e:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000810:	2203      	movs	r2, #3
 8000812:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000814:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000816:	2200      	movs	r2, #0
 8000818:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800081a:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800081c:	2200      	movs	r2, #0
 800081e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000820:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000822:	2200      	movs	r2, #0
 8000824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000828:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800082a:	2201      	movs	r2, #1
 800082c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082e:	4819      	ldr	r0, [pc, #100]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000830:	f003 f972 	bl	8003b18 <HAL_ADC_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800083a:	f000 fd29 	bl	8001290 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000842:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000846:	4619      	mov	r1, r3
 8000848:	4812      	ldr	r0, [pc, #72]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800084a:	f004 ff61 	bl	8005710 <HAL_ADCEx_MultiModeConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000854:	f000 fd1c 	bl	8001290 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000858:	4b10      	ldr	r3, [pc, #64]	@ (800089c <MX_ADC1_Init+0xf0>)
 800085a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085c:	2306      	movs	r3, #6
 800085e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000864:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000868:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800086a:	2304      	movs	r3, #4
 800086c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800087e:	f003 fef3 	bl	8004668 <HAL_ADC_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000888:	f000 fd02 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	3730      	adds	r7, #48	@ 0x30
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2400017c 	.word	0x2400017c
 8000898:	40022000 	.word	0x40022000
 800089c:	0c900008 	.word	0x0c900008

080008a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b0b8      	sub	sp, #224	@ 0xe0
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	22b8      	movs	r2, #184	@ 0xb8
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f018 fe5f 	bl	8019584 <memset>
  if(adcHandle->Instance==ADC1)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a48      	ldr	r2, [pc, #288]	@ (80009ec <HAL_ADC_MspInit+0x14c>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	f040 8088 	bne.w	80009e2 <HAL_ADC_MspInit+0x142>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008d2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80008d6:	f04f 0300 	mov.w	r3, #0
 80008da:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80008de:	2304      	movs	r3, #4
 80008e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 80008e2:	230c      	movs	r3, #12
 80008e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80008f2:	23c0      	movs	r3, #192	@ 0xc0
 80008f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008fe:	2300      	movs	r3, #0
 8000900:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4618      	mov	r0, r3
 800090a:	f00c ff2b 	bl	800d764 <HAL_RCCEx_PeriphCLKConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000914:	f000 fcbc 	bl	8001290 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000918:	4b35      	ldr	r3, [pc, #212]	@ (80009f0 <HAL_ADC_MspInit+0x150>)
 800091a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800091e:	4a34      	ldr	r2, [pc, #208]	@ (80009f0 <HAL_ADC_MspInit+0x150>)
 8000920:	f043 0320 	orr.w	r3, r3, #32
 8000924:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000928:	4b31      	ldr	r3, [pc, #196]	@ (80009f0 <HAL_ADC_MspInit+0x150>)
 800092a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800092e:	f003 0320 	and.w	r3, r3, #32
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b2e      	ldr	r3, [pc, #184]	@ (80009f0 <HAL_ADC_MspInit+0x150>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093c:	4a2c      	ldr	r2, [pc, #176]	@ (80009f0 <HAL_ADC_MspInit+0x150>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000946:	4b2a      	ldr	r3, [pc, #168]	@ (80009f0 <HAL_ADC_MspInit+0x150>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000954:	2340      	movs	r3, #64	@ 0x40
 8000956:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800095a:	2303      	movs	r3, #3
 800095c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800096a:	4619      	mov	r1, r3
 800096c:	4821      	ldr	r0, [pc, #132]	@ (80009f4 <HAL_ADC_MspInit+0x154>)
 800096e:	f008 fb25 	bl	8008fbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8000972:	4b21      	ldr	r3, [pc, #132]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 8000974:	4a21      	ldr	r2, [pc, #132]	@ (80009fc <HAL_ADC_MspInit+0x15c>)
 8000976:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000978:	4b1f      	ldr	r3, [pc, #124]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 800097a:	2209      	movs	r2, #9
 800097c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800097e:	4b1e      	ldr	r3, [pc, #120]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000984:	4b1c      	ldr	r3, [pc, #112]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800098a:	4b1b      	ldr	r3, [pc, #108]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 800098c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000990:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000992:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 8000994:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000998:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800099a:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 800099c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009a2:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 80009a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80009aa:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009b0:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009b6:	4810      	ldr	r0, [pc, #64]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 80009b8:	f005 fcba 	bl	8006330 <HAL_DMA_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_ADC_MspInit+0x126>
    {
      Error_Handler();
 80009c2:	f000 fc65 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a0b      	ldr	r2, [pc, #44]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 80009ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80009cc:	4a0a      	ldr	r2, [pc, #40]	@ (80009f8 <HAL_ADC_MspInit+0x158>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	2012      	movs	r0, #18
 80009d8:	f005 f92d 	bl	8005c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009dc:	2012      	movs	r0, #18
 80009de:	f005 f944 	bl	8005c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80009e2:	bf00      	nop
 80009e4:	37e0      	adds	r7, #224	@ 0xe0
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40022000 	.word	0x40022000
 80009f0:	58024400 	.word	0x58024400
 80009f4:	58020000 	.word	0x58020000
 80009f8:	240001ec 	.word	0x240001ec
 80009fc:	40020088 	.word	0x40020088

08000a00 <MX_CORDIC_Init>:
DMA_HandleTypeDef hdma_cordic_rd;
DMA_HandleTypeDef hdma_cordic_wr;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <MX_CORDIC_Init+0x20>)
 8000a06:	4a07      	ldr	r2, [pc, #28]	@ (8000a24 <MX_CORDIC_Init+0x24>)
 8000a08:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	@ (8000a20 <MX_CORDIC_Init+0x20>)
 8000a0c:	f004 ff62 	bl	80058d4 <HAL_CORDIC_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8000a16:	f000 fc3b 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	24000264 	.word	0x24000264
 8000a24:	48024400 	.word	0x48024400

08000a28 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a3c      	ldr	r2, [pc, #240]	@ (8000b28 <HAL_CORDIC_MspInit+0x100>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d172      	bne.n	8000b20 <HAL_CORDIC_MspInit+0xf8>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000a3a:	4b3c      	ldr	r3, [pc, #240]	@ (8000b2c <HAL_CORDIC_MspInit+0x104>)
 8000a3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000a40:	4a3a      	ldr	r2, [pc, #232]	@ (8000b2c <HAL_CORDIC_MspInit+0x104>)
 8000a42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a46:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000a4a:	4b38      	ldr	r3, [pc, #224]	@ (8000b2c <HAL_CORDIC_MspInit+0x104>)
 8000a4c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]

    /* CORDIC DMA Init */
    /* CORDIC_RD Init */
    hdma_cordic_rd.Instance = DMA1_Stream7;
 8000a58:	4b35      	ldr	r3, [pc, #212]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000a5a:	4a36      	ldr	r2, [pc, #216]	@ (8000b34 <HAL_CORDIC_MspInit+0x10c>)
 8000a5c:	601a      	str	r2, [r3, #0]
    hdma_cordic_rd.Init.Request = DMA_REQUEST_CORDIC_READ;
 8000a5e:	4b34      	ldr	r3, [pc, #208]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000a60:	227a      	movs	r2, #122	@ 0x7a
 8000a62:	605a      	str	r2, [r3, #4]
    hdma_cordic_rd.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a64:	4b32      	ldr	r3, [pc, #200]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
    hdma_cordic_rd.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a6a:	4b31      	ldr	r3, [pc, #196]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
    hdma_cordic_rd.Init.MemInc = DMA_MINC_ENABLE;
 8000a70:	4b2f      	ldr	r3, [pc, #188]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000a72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a76:	611a      	str	r2, [r3, #16]
    hdma_cordic_rd.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a78:	4b2d      	ldr	r3, [pc, #180]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
    hdma_cordic_rd.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a7e:	4b2c      	ldr	r3, [pc, #176]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
    hdma_cordic_rd.Init.Mode = DMA_CIRCULAR;
 8000a84:	4b2a      	ldr	r3, [pc, #168]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000a86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a8a:	61da      	str	r2, [r3, #28]
    hdma_cordic_rd.Init.Priority = DMA_PRIORITY_LOW;
 8000a8c:	4b28      	ldr	r3, [pc, #160]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	621a      	str	r2, [r3, #32]
    hdma_cordic_rd.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a92:	4b27      	ldr	r3, [pc, #156]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_cordic_rd) != HAL_OK)
 8000a98:	4825      	ldr	r0, [pc, #148]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000a9a:	f005 fc49 	bl	8006330 <HAL_DMA_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <HAL_CORDIC_MspInit+0x80>
    {
      Error_Handler();
 8000aa4:	f000 fbf4 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaIn,hdma_cordic_rd);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a21      	ldr	r2, [pc, #132]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000aac:	619a      	str	r2, [r3, #24]
 8000aae:	4a20      	ldr	r2, [pc, #128]	@ (8000b30 <HAL_CORDIC_MspInit+0x108>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* CORDIC_WR Init */
    hdma_cordic_wr.Instance = DMA2_Stream0;
 8000ab4:	4b20      	ldr	r3, [pc, #128]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000ab6:	4a21      	ldr	r2, [pc, #132]	@ (8000b3c <HAL_CORDIC_MspInit+0x114>)
 8000ab8:	601a      	str	r2, [r3, #0]
    hdma_cordic_wr.Init.Request = DMA_REQUEST_CORDIC_WRITE;
 8000aba:	4b1f      	ldr	r3, [pc, #124]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000abc:	227b      	movs	r2, #123	@ 0x7b
 8000abe:	605a      	str	r2, [r3, #4]
    hdma_cordic_wr.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000ac2:	2240      	movs	r2, #64	@ 0x40
 8000ac4:	609a      	str	r2, [r3, #8]
    hdma_cordic_wr.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
    hdma_cordic_wr.Init.MemInc = DMA_MINC_ENABLE;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000ace:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ad2:	611a      	str	r2, [r3, #16]
    hdma_cordic_wr.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
    hdma_cordic_wr.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ada:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
    hdma_cordic_wr.Init.Mode = DMA_CIRCULAR;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000ae2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ae6:	61da      	str	r2, [r3, #28]
    hdma_cordic_wr.Init.Priority = DMA_PRIORITY_LOW;
 8000ae8:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	621a      	str	r2, [r3, #32]
    hdma_cordic_wr.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aee:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_cordic_wr) != HAL_OK)
 8000af4:	4810      	ldr	r0, [pc, #64]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000af6:	f005 fc1b 	bl	8006330 <HAL_DMA_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <HAL_CORDIC_MspInit+0xdc>
    {
      Error_Handler();
 8000b00:	f000 fbc6 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaOut,hdma_cordic_wr);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a0c      	ldr	r2, [pc, #48]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000b08:	61da      	str	r2, [r3, #28]
 8000b0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b38 <HAL_CORDIC_MspInit+0x110>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* CORDIC interrupt Init */
    HAL_NVIC_SetPriority(CORDIC_IRQn, 0, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	209a      	movs	r0, #154	@ 0x9a
 8000b16:	f005 f88e 	bl	8005c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CORDIC_IRQn);
 8000b1a:	209a      	movs	r0, #154	@ 0x9a
 8000b1c:	f005 f8a5 	bl	8005c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	48024400 	.word	0x48024400
 8000b2c:	58024400 	.word	0x58024400
 8000b30:	2400028c 	.word	0x2400028c
 8000b34:	400200b8 	.word	0x400200b8
 8000b38:	24000304 	.word	0x24000304
 8000b3c:	40020410 	.word	0x40020410

08000b40 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	@ 0x28
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2224      	movs	r2, #36	@ 0x24
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f018 fd19 	bl	8019584 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b52:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <MX_DAC1_Init+0x5c>)
 8000b54:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <MX_DAC1_Init+0x60>)
 8000b56:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b58:	4810      	ldr	r0, [pc, #64]	@ (8000b9c <MX_DAC1_Init+0x5c>)
 8000b5a:	f005 f919 	bl	8005d90 <HAL_DAC_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b64:	f000 fb94 	bl	8001290 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000b6c:	230a      	movs	r3, #10
 8000b6e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000b74:	2301      	movs	r3, #1
 8000b76:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2200      	movs	r2, #0
 8000b80:	4619      	mov	r1, r3
 8000b82:	4806      	ldr	r0, [pc, #24]	@ (8000b9c <MX_DAC1_Init+0x5c>)
 8000b84:	f005 fa04 	bl	8005f90 <HAL_DAC_ConfigChannel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b8e:	f000 fb7f 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	@ 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2400037c 	.word	0x2400037c
 8000ba0:	40007400 	.word	0x40007400

08000ba4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	@ 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a30      	ldr	r2, [pc, #192]	@ (8000c84 <HAL_DAC_MspInit+0xe0>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d159      	bne.n	8000c7a <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000bc6:	4b30      	ldr	r3, [pc, #192]	@ (8000c88 <HAL_DAC_MspInit+0xe4>)
 8000bc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8000c88 <HAL_DAC_MspInit+0xe4>)
 8000bce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000bd2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8000c88 <HAL_DAC_MspInit+0xe4>)
 8000bd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	4b28      	ldr	r3, [pc, #160]	@ (8000c88 <HAL_DAC_MspInit+0xe4>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bea:	4a27      	ldr	r2, [pc, #156]	@ (8000c88 <HAL_DAC_MspInit+0xe4>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf4:	4b24      	ldr	r3, [pc, #144]	@ (8000c88 <HAL_DAC_MspInit+0xe4>)
 8000bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c02:	2310      	movs	r3, #16
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c06:	2303      	movs	r3, #3
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	481d      	ldr	r0, [pc, #116]	@ (8000c8c <HAL_DAC_MspInit+0xe8>)
 8000c16:	f008 f9d1 	bl	8008fbc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream6;
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000c94 <HAL_DAC_MspInit+0xf0>)
 8000c1e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c22:	2243      	movs	r2, #67	@ 0x43
 8000c24:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c28:	2240      	movs	r2, #64	@ 0x40
 8000c2a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c2c:	4b18      	ldr	r3, [pc, #96]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c32:	4b17      	ldr	r3, [pc, #92]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c38:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c3c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c40:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c42:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c44:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c48:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c50:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c52:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c58:	4b0d      	ldr	r3, [pc, #52]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c5e:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c60:	f005 fb66 	bl	8006330 <HAL_DMA_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000c6a:	f000 fb11 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a07      	ldr	r2, [pc, #28]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	4a06      	ldr	r2, [pc, #24]	@ (8000c90 <HAL_DAC_MspInit+0xec>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	@ 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40007400 	.word	0x40007400
 8000c88:	58024400 	.word	0x58024400
 8000c8c:	58020000 	.word	0x58020000
 8000c90:	24000390 	.word	0x24000390
 8000c94:	400200a0 	.word	0x400200a0

08000c98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c9e:	4b35      	ldr	r3, [pc, #212]	@ (8000d74 <MX_DMA_Init+0xdc>)
 8000ca0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ca4:	4a33      	ldr	r2, [pc, #204]	@ (8000d74 <MX_DMA_Init+0xdc>)
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000cae:	4b31      	ldr	r3, [pc, #196]	@ (8000d74 <MX_DMA_Init+0xdc>)
 8000cb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8000d74 <MX_DMA_Init+0xdc>)
 8000cbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8000d74 <MX_DMA_Init+0xdc>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ccc:	4b29      	ldr	r3, [pc, #164]	@ (8000d74 <MX_DMA_Init+0xdc>)
 8000cce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	200b      	movs	r0, #11
 8000ce0:	f004 ffa9 	bl	8005c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ce4:	200b      	movs	r0, #11
 8000ce6:	f004 ffc0 	bl	8005c6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	200c      	movs	r0, #12
 8000cf0:	f004 ffa1 	bl	8005c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000cf4:	200c      	movs	r0, #12
 8000cf6:	f004 ffb8 	bl	8005c6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	200d      	movs	r0, #13
 8000d00:	f004 ff99 	bl	8005c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d04:	200d      	movs	r0, #13
 8000d06:	f004 ffb0 	bl	8005c6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	200e      	movs	r0, #14
 8000d10:	f004 ff91 	bl	8005c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d14:	200e      	movs	r0, #14
 8000d16:	f004 ffa8 	bl	8005c6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	200f      	movs	r0, #15
 8000d20:	f004 ff89 	bl	8005c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d24:	200f      	movs	r0, #15
 8000d26:	f004 ffa0 	bl	8005c6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2010      	movs	r0, #16
 8000d30:	f004 ff81 	bl	8005c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d34:	2010      	movs	r0, #16
 8000d36:	f004 ff98 	bl	8005c6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2011      	movs	r0, #17
 8000d40:	f004 ff79 	bl	8005c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d44:	2011      	movs	r0, #17
 8000d46:	f004 ff90 	bl	8005c6a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	202f      	movs	r0, #47	@ 0x2f
 8000d50:	f004 ff71 	bl	8005c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d54:	202f      	movs	r0, #47	@ 0x2f
 8000d56:	f004 ff88 	bl	8005c6a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2038      	movs	r0, #56	@ 0x38
 8000d60:	f004 ff69 	bl	8005c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d64:	2038      	movs	r0, #56	@ 0x38
 8000d66:	f004 ff80 	bl	8005c6a <HAL_NVIC_EnableIRQ>

}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	58024400 	.word	0x58024400

08000d78 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08e      	sub	sp, #56	@ 0x38
 8000d7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d8e:	4b71      	ldr	r3, [pc, #452]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d94:	4a6f      	ldr	r2, [pc, #444]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000d96:	f043 0310 	orr.w	r3, r3, #16
 8000d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d9e:	4b6d      	ldr	r3, [pc, #436]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da4:	f003 0310 	and.w	r3, r3, #16
 8000da8:	623b      	str	r3, [r7, #32]
 8000daa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dac:	4b69      	ldr	r3, [pc, #420]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db2:	4a68      	ldr	r2, [pc, #416]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dbc:	4b65      	ldr	r3, [pc, #404]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	61fb      	str	r3, [r7, #28]
 8000dc8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dca:	4b62      	ldr	r3, [pc, #392]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd0:	4a60      	ldr	r2, [pc, #384]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000dd2:	f043 0320 	orr.w	r3, r3, #32
 8000dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dda:	4b5e      	ldr	r3, [pc, #376]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de0:	f003 0320 	and.w	r3, r3, #32
 8000de4:	61bb      	str	r3, [r7, #24]
 8000de6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000de8:	4b5a      	ldr	r3, [pc, #360]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dee:	4a59      	ldr	r2, [pc, #356]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000df0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000df4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df8:	4b56      	ldr	r3, [pc, #344]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b53      	ldr	r3, [pc, #332]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0c:	4a51      	ldr	r2, [pc, #324]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e16:	4b4f      	ldr	r3, [pc, #316]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	4b4b      	ldr	r3, [pc, #300]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2a:	4a4a      	ldr	r2, [pc, #296]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e34:	4b47      	ldr	r3, [pc, #284]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e42:	4b44      	ldr	r3, [pc, #272]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e48:	4a42      	ldr	r2, [pc, #264]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e52:	4b40      	ldr	r3, [pc, #256]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e60:	4b3c      	ldr	r3, [pc, #240]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e66:	4a3b      	ldr	r2, [pc, #236]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e68:	f043 0308 	orr.w	r3, r3, #8
 8000e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e70:	4b38      	ldr	r3, [pc, #224]	@ (8000f54 <MX_GPIO_Init+0x1dc>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE10
                           PE11 PE12 PE13 PE14
                           PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000e7e:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e84:	2303      	movs	r3, #3
 8000e86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e90:	4619      	mov	r1, r3
 8000e92:	4831      	ldr	r0, [pc, #196]	@ (8000f58 <MX_GPIO_Init+0x1e0>)
 8000e94:	f008 f892 	bl	8008fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8000e98:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8000e9c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eaa:	4619      	mov	r1, r3
 8000eac:	482b      	ldr	r0, [pc, #172]	@ (8000f5c <MX_GPIO_Init+0x1e4>)
 8000eae:	f008 f885 	bl	8008fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000eb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ec0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4826      	ldr	r0, [pc, #152]	@ (8000f60 <MX_GPIO_Init+0x1e8>)
 8000ec8:	f008 f878 	bl	8008fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	4821      	ldr	r0, [pc, #132]	@ (8000f64 <MX_GPIO_Init+0x1ec>)
 8000ee0:	f008 f86c 	bl	8008fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_10;
 8000ee4:	f240 5303 	movw	r3, #1283	@ 0x503
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eea:	2303      	movs	r3, #3
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	481b      	ldr	r0, [pc, #108]	@ (8000f68 <MX_GPIO_Init+0x1f0>)
 8000efa:	f008 f85f 	bl	8008fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000efe:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f04:	2303      	movs	r3, #3
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f10:	4619      	mov	r1, r3
 8000f12:	4816      	ldr	r0, [pc, #88]	@ (8000f6c <MX_GPIO_Init+0x1f4>)
 8000f14:	f008 f852 	bl	8008fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG8 PG10 PG11 PG12
                           PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f18:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8000f1c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4810      	ldr	r0, [pc, #64]	@ (8000f70 <MX_GPIO_Init+0x1f8>)
 8000f2e:	f008 f845 	bl	8008fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f36:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f44:	4619      	mov	r1, r3
 8000f46:	480b      	ldr	r0, [pc, #44]	@ (8000f74 <MX_GPIO_Init+0x1fc>)
 8000f48:	f008 f838 	bl	8008fbc <HAL_GPIO_Init>

}
 8000f4c:	bf00      	nop
 8000f4e:	3738      	adds	r7, #56	@ 0x38
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	58024400 	.word	0x58024400
 8000f58:	58021000 	.word	0x58021000
 8000f5c:	58020800 	.word	0x58020800
 8000f60:	58021400 	.word	0x58021400
 8000f64:	58021c00 	.word	0x58021c00
 8000f68:	58020000 	.word	0x58020000
 8000f6c:	58020400 	.word	0x58020400
 8000f70:	58021800 	.word	0x58021800
 8000f74:	58020c00 	.word	0x58020c00

08000f78 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff0 <MX_I2C1_Init+0x78>)
 8000f80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0BBFF;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000f84:	4a1b      	ldr	r2, [pc, #108]	@ (8000ff4 <MX_I2C1_Init+0x7c>)
 8000f86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f88:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f8e:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f94:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fb2:	480e      	ldr	r0, [pc, #56]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000fb4:	f008 f9aa 	bl	800930c <HAL_I2C_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fbe:	f000 f967 	bl	8001290 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4809      	ldr	r0, [pc, #36]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000fc6:	f00a f885 	bl	800b0d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fd0:	f000 f95e 	bl	8001290 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4805      	ldr	r0, [pc, #20]	@ (8000fec <MX_I2C1_Init+0x74>)
 8000fd8:	f00a f8c7 	bl	800b16a <HAL_I2CEx_ConfigDigitalFilter>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fe2:	f000 f955 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	24000408 	.word	0x24000408
 8000ff0:	40005400 	.word	0x40005400
 8000ff4:	20b0bbff 	.word	0x20b0bbff

08000ff8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b0b8      	sub	sp, #224	@ 0xe0
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001010:	f107 0310 	add.w	r3, r7, #16
 8001014:	22b8      	movs	r2, #184	@ 0xb8
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f018 fab3 	bl	8019584 <memset>
  if(i2cHandle->Instance==I2C1)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a26      	ldr	r2, [pc, #152]	@ (80010bc <HAL_I2C_MspInit+0xc4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d145      	bne.n	80010b4 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001028:	f04f 0208 	mov.w	r2, #8
 800102c:	f04f 0300 	mov.w	r3, #0
 8001030:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001034:	2300      	movs	r3, #0
 8001036:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800103a:	f107 0310 	add.w	r3, r7, #16
 800103e:	4618      	mov	r0, r3
 8001040:	f00c fb90 	bl	800d764 <HAL_RCCEx_PeriphCLKConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800104a:	f000 f921 	bl	8001290 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b1c      	ldr	r3, [pc, #112]	@ (80010c0 <HAL_I2C_MspInit+0xc8>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001054:	4a1a      	ldr	r2, [pc, #104]	@ (80010c0 <HAL_I2C_MspInit+0xc8>)
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800105e:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <HAL_I2C_MspInit+0xc8>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800106c:	23c0      	movs	r3, #192	@ 0xc0
 800106e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001072:	2312      	movs	r3, #18
 8001074:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001084:	2304      	movs	r3, #4
 8001086:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800108e:	4619      	mov	r1, r3
 8001090:	480c      	ldr	r0, [pc, #48]	@ (80010c4 <HAL_I2C_MspInit+0xcc>)
 8001092:	f007 ff93 	bl	8008fbc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <HAL_I2C_MspInit+0xc8>)
 8001098:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800109c:	4a08      	ldr	r2, [pc, #32]	@ (80010c0 <HAL_I2C_MspInit+0xc8>)
 800109e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_I2C_MspInit+0xc8>)
 80010a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010b4:	bf00      	nop
 80010b6:	37e0      	adds	r7, #224	@ 0xe0
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40005400 	.word	0x40005400
 80010c0:	58024400 	.word	0x58024400
 80010c4:	58020400 	.word	0x58020400

080010c8 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 80010cc:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <MX_IWDG1_Init+0x34>)
 80010ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001100 <MX_IWDG1_Init+0x38>)
 80010d0:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 80010d2:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <MX_IWDG1_Init+0x34>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 200;
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <MX_IWDG1_Init+0x34>)
 80010da:	22c8      	movs	r2, #200	@ 0xc8
 80010dc:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 420;
 80010de:	4b07      	ldr	r3, [pc, #28]	@ (80010fc <MX_IWDG1_Init+0x34>)
 80010e0:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 80010e4:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	@ (80010fc <MX_IWDG1_Init+0x34>)
 80010e8:	f00a f88b 	bl	800b202 <HAL_IWDG_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_IWDG1_Init+0x2e>
  {
    Error_Handler();
 80010f2:	f000 f8cd 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2400045c 	.word	0x2400045c
 8001100:	58004800 	.word	0x58004800

08001104 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001108:	f000 f896 	bl	8001238 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110c:	f002 f8d8 	bl	80032c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001110:	f000 f81e 	bl	8001150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001114:	f7ff fe30 	bl	8000d78 <MX_GPIO_Init>
  MX_DMA_Init();
 8001118:	f7ff fdbe 	bl	8000c98 <MX_DMA_Init>
  MX_TIM1_Init();
 800111c:	f000 fc20 	bl	8001960 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001120:	f000 fdc4 	bl	8001cac <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001124:	f000 f8ba 	bl	800129c <MX_SPI1_Init>
  MX_I2C1_Init();
 8001128:	f7ff ff26 	bl	8000f78 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800112c:	f016 fa30 	bl	8017590 <MX_USB_DEVICE_Init>
  MX_IWDG1_Init();
 8001130:	f7ff ffca 	bl	80010c8 <MX_IWDG1_Init>
  MX_ADC1_Init();
 8001134:	f7ff fb3a 	bl	80007ac <MX_ADC1_Init>
  MX_DAC1_Init();
 8001138:	f7ff fd02 	bl	8000b40 <MX_DAC1_Init>
  MX_TIM2_Init();
 800113c:	f000 fcbc 	bl	8001ab8 <MX_TIM2_Init>
  MX_CORDIC_Init();
 8001140:	f7ff fc5e 	bl	8000a00 <MX_CORDIC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MainCpp();
 8001144:	f001 fc0c 	bl	8002960 <MainCpp>
 8001148:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800114a:	4618      	mov	r0, r3
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b09c      	sub	sp, #112	@ 0x70
 8001154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001156:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800115a:	224c      	movs	r2, #76	@ 0x4c
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f018 fa10 	bl	8019584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2220      	movs	r2, #32
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f018 fa0a 	bl	8019584 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001170:	2002      	movs	r0, #2
 8001172:	f00b fb47 	bl	800c804 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	4b2e      	ldr	r3, [pc, #184]	@ (8001234 <SystemClock_Config+0xe4>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	4a2d      	ldr	r2, [pc, #180]	@ (8001234 <SystemClock_Config+0xe4>)
 8001180:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001184:	6193      	str	r3, [r2, #24]
 8001186:	4b2b      	ldr	r3, [pc, #172]	@ (8001234 <SystemClock_Config+0xe4>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001192:	bf00      	nop
 8001194:	4b27      	ldr	r3, [pc, #156]	@ (8001234 <SystemClock_Config+0xe4>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800119c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011a0:	d1f8      	bne.n	8001194 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80011a2:	232a      	movs	r3, #42	@ 0x2a
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80011aa:	2340      	movs	r3, #64	@ 0x40
 80011ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011ae:	2301      	movs	r3, #1
 80011b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011b2:	2301      	movs	r3, #1
 80011b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b6:	2302      	movs	r3, #2
 80011b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ba:	2300      	movs	r3, #0
 80011bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011be:	2304      	movs	r3, #4
 80011c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 33;
 80011c2:	2321      	movs	r3, #33	@ 0x21
 80011c4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80011c6:	2301      	movs	r3, #1
 80011c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80011ca:	2303      	movs	r3, #3
 80011cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011d2:	230c      	movs	r3, #12
 80011d4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80011da:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80011de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e4:	4618      	mov	r0, r3
 80011e6:	f00b fb57 	bl	800c898 <HAL_RCC_OscConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80011f0:	f000 f84e 	bl	8001290 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f4:	233f      	movs	r3, #63	@ 0x3f
 80011f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f8:	2303      	movs	r3, #3
 80011fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001200:	2308      	movs	r3, #8
 8001202:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001204:	2340      	movs	r3, #64	@ 0x40
 8001206:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001208:	2340      	movs	r3, #64	@ 0x40
 800120a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800120c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001210:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001212:	2340      	movs	r3, #64	@ 0x40
 8001214:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2103      	movs	r1, #3
 800121a:	4618      	mov	r0, r3
 800121c:	f00b ff16 	bl	800d04c <HAL_RCC_ClockConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001226:	f000 f833 	bl	8001290 <Error_Handler>
  }
}
 800122a:	bf00      	nop
 800122c:	3770      	adds	r7, #112	@ 0x70
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	58024800 	.word	0x58024800

08001238 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800123e:	463b      	mov	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800124a:	f004 fd29 	bl	8005ca0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800124e:	2301      	movs	r3, #1
 8001250:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001252:	2300      	movs	r3, #0
 8001254:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800125a:	231f      	movs	r3, #31
 800125c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800125e:	2387      	movs	r3, #135	@ 0x87
 8001260:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001262:	2300      	movs	r3, #0
 8001264:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001266:	2300      	movs	r3, #0
 8001268:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800126a:	2301      	movs	r3, #1
 800126c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800126e:	2301      	movs	r3, #1
 8001270:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800127a:	463b      	mov	r3, r7
 800127c:	4618      	mov	r0, r3
 800127e:	f004 fd47 	bl	8005d10 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001282:	2004      	movs	r0, #4
 8001284:	f004 fd24 	bl	8005cd0 <HAL_MPU_Enable>

}
 8001288:	bf00      	nop
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
}
 8001296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <Error_Handler+0x8>

0800129c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012a0:	4b27      	ldr	r3, [pc, #156]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012a2:	4a28      	ldr	r2, [pc, #160]	@ (8001344 <MX_SPI1_Init+0xa8>)
 80012a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012a6:	4b26      	ldr	r3, [pc, #152]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012a8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80012ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012ae:	4b24      	ldr	r3, [pc, #144]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_32BIT;
 80012b4:	4b22      	ldr	r3, [pc, #136]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012b6:	221f      	movs	r2, #31
 80012b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ba:	4b21      	ldr	r3, [pc, #132]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012c8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80012cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012da:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e0:	4b17      	ldr	r3, [pc, #92]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80012e6:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012ec:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012fa:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MX_SPI1_Init+0xa4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001300:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <MX_SPI1_Init+0xa4>)
 8001302:	2200      	movs	r2, #0
 8001304:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <MX_SPI1_Init+0xa4>)
 8001308:	2200      	movs	r2, #0
 800130a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <MX_SPI1_Init+0xa4>)
 800130e:	2200      	movs	r2, #0
 8001310:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001312:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <MX_SPI1_Init+0xa4>)
 8001314:	2200      	movs	r2, #0
 8001316:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <MX_SPI1_Init+0xa4>)
 800131a:	2200      	movs	r2, #0
 800131c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <MX_SPI1_Init+0xa4>)
 8001320:	2200      	movs	r2, #0
 8001322:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <MX_SPI1_Init+0xa4>)
 8001326:	2200      	movs	r2, #0
 8001328:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	@ (8001340 <MX_SPI1_Init+0xa4>)
 800132c:	f00e fe00 	bl	800ff30 <HAL_SPI_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001336:	f7ff ffab 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2400046c 	.word	0x2400046c
 8001344:	40013000 	.word	0x40013000

08001348 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b0ba      	sub	sp, #232	@ 0xe8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001360:	f107 0318 	add.w	r3, r7, #24
 8001364:	22b8      	movs	r2, #184	@ 0xb8
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f018 f90b 	bl	8019584 <memset>
  if(spiHandle->Instance==SPI1)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a6b      	ldr	r2, [pc, #428]	@ (8001520 <HAL_SPI_MspInit+0x1d8>)
 8001374:	4293      	cmp	r3, r2
 8001376:	f040 80cf 	bne.w	8001518 <HAL_SPI_MspInit+0x1d0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800137a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001386:	2300      	movs	r3, #0
 8001388:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138a:	f107 0318 	add.w	r3, r7, #24
 800138e:	4618      	mov	r0, r3
 8001390:	f00c f9e8 	bl	800d764 <HAL_RCCEx_PeriphCLKConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800139a:	f7ff ff79 	bl	8001290 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800139e:	4b61      	ldr	r3, [pc, #388]	@ (8001524 <HAL_SPI_MspInit+0x1dc>)
 80013a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013a4:	4a5f      	ldr	r2, [pc, #380]	@ (8001524 <HAL_SPI_MspInit+0x1dc>)
 80013a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80013ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001524 <HAL_SPI_MspInit+0x1dc>)
 80013b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b59      	ldr	r3, [pc, #356]	@ (8001524 <HAL_SPI_MspInit+0x1dc>)
 80013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c2:	4a58      	ldr	r2, [pc, #352]	@ (8001524 <HAL_SPI_MspInit+0x1dc>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013cc:	4b55      	ldr	r3, [pc, #340]	@ (8001524 <HAL_SPI_MspInit+0x1dc>)
 80013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013da:	4b52      	ldr	r3, [pc, #328]	@ (8001524 <HAL_SPI_MspInit+0x1dc>)
 80013dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e0:	4a50      	ldr	r2, [pc, #320]	@ (8001524 <HAL_SPI_MspInit+0x1dc>)
 80013e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001524 <HAL_SPI_MspInit+0x1dc>)
 80013ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15(JTDI)     ------> SPI1_NSS
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15;
 80013f8:	f248 03a0 	movw	r3, #32928	@ 0x80a0
 80013fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001412:	2305      	movs	r3, #5
 8001414:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001418:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800141c:	4619      	mov	r1, r3
 800141e:	4842      	ldr	r0, [pc, #264]	@ (8001528 <HAL_SPI_MspInit+0x1e0>)
 8001420:	f007 fdcc 	bl	8008fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001424:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001428:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800143e:	2305      	movs	r3, #5
 8001440:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001444:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001448:	4619      	mov	r1, r3
 800144a:	4838      	ldr	r0, [pc, #224]	@ (800152c <HAL_SPI_MspInit+0x1e4>)
 800144c:	f007 fdb6 	bl	8008fbc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream3;
 8001450:	4b37      	ldr	r3, [pc, #220]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 8001452:	4a38      	ldr	r2, [pc, #224]	@ (8001534 <HAL_SPI_MspInit+0x1ec>)
 8001454:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001456:	4b36      	ldr	r3, [pc, #216]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 8001458:	2226      	movs	r2, #38	@ 0x26
 800145a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800145c:	4b34      	ldr	r3, [pc, #208]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 800145e:	2240      	movs	r2, #64	@ 0x40
 8001460:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001462:	4b33      	ldr	r3, [pc, #204]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 8001464:	2200      	movs	r2, #0
 8001466:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001468:	4b31      	ldr	r3, [pc, #196]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 800146a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800146e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001470:	4b2f      	ldr	r3, [pc, #188]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 8001472:	2200      	movs	r2, #0
 8001474:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001476:	4b2e      	ldr	r3, [pc, #184]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800147c:	4b2c      	ldr	r3, [pc, #176]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001482:	4b2b      	ldr	r3, [pc, #172]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 8001484:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001488:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800148a:	4b29      	ldr	r3, [pc, #164]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 800148c:	2200      	movs	r2, #0
 800148e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001490:	4827      	ldr	r0, [pc, #156]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 8001492:	f004 ff4d 	bl	8006330 <HAL_DMA_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 800149c:	f7ff fef8 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a23      	ldr	r2, [pc, #140]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 80014a4:	679a      	str	r2, [r3, #120]	@ 0x78
 80014a6:	4a22      	ldr	r2, [pc, #136]	@ (8001530 <HAL_SPI_MspInit+0x1e8>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 80014ac:	4b22      	ldr	r3, [pc, #136]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 80014ae:	4a23      	ldr	r2, [pc, #140]	@ (800153c <HAL_SPI_MspInit+0x1f4>)
 80014b0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80014b2:	4b21      	ldr	r3, [pc, #132]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 80014b4:	2225      	movs	r2, #37	@ 0x25
 80014b6:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014be:	4b1e      	ldr	r3, [pc, #120]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 80014c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014ca:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014d2:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80014d8:	4b17      	ldr	r3, [pc, #92]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80014de:	4b16      	ldr	r3, [pc, #88]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 80014e0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014e4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014e6:	4b14      	ldr	r3, [pc, #80]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80014ec:	4812      	ldr	r0, [pc, #72]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 80014ee:	f004 ff1f 	bl	8006330 <HAL_DMA_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_SPI_MspInit+0x1b4>
    {
      Error_Handler();
 80014f8:	f7ff feca 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 8001500:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001502:	4a0d      	ldr	r2, [pc, #52]	@ (8001538 <HAL_SPI_MspInit+0x1f0>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001508:	2200      	movs	r2, #0
 800150a:	2100      	movs	r1, #0
 800150c:	2023      	movs	r0, #35	@ 0x23
 800150e:	f004 fb92 	bl	8005c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001512:	2023      	movs	r0, #35	@ 0x23
 8001514:	f004 fba9 	bl	8005c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001518:	bf00      	nop
 800151a:	37e8      	adds	r7, #232	@ 0xe8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40013000 	.word	0x40013000
 8001524:	58024400 	.word	0x58024400
 8001528:	58020000 	.word	0x58020000
 800152c:	58021800 	.word	0x58021800
 8001530:	240004f4 	.word	0x240004f4
 8001534:	40020058 	.word	0x40020058
 8001538:	2400056c 	.word	0x2400056c
 800153c:	40020070 	.word	0x40020070

08001540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	4b0a      	ldr	r3, [pc, #40]	@ (8001570 <HAL_MspInit+0x30>)
 8001548:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800154c:	4a08      	ldr	r2, [pc, #32]	@ (8001570 <HAL_MspInit+0x30>)
 800154e:	f043 0302 	orr.w	r3, r3, #2
 8001552:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <HAL_MspInit+0x30>)
 8001558:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	58024400 	.word	0x58024400

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <NMI_Handler+0x4>

0800157c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <HardFault_Handler+0x4>

08001584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <MemManage_Handler+0x4>

0800158c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <BusFault_Handler+0x4>

08001594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <UsageFault_Handler+0x4>

0800159c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ca:	f001 feeb 	bl	80033a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80015d8:	4802      	ldr	r0, [pc, #8]	@ (80015e4 <DMA1_Stream0_IRQHandler+0x10>)
 80015da:	f006 f9cf 	bl	800797c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	24000680 	.word	0x24000680

080015e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80015ec:	4802      	ldr	r0, [pc, #8]	@ (80015f8 <DMA1_Stream1_IRQHandler+0x10>)
 80015ee:	f006 f9c5 	bl	800797c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	2400078c 	.word	0x2400078c

080015fc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001600:	4802      	ldr	r0, [pc, #8]	@ (800160c <DMA1_Stream2_IRQHandler+0x10>)
 8001602:	f006 f9bb 	bl	800797c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	24000804 	.word	0x24000804

08001610 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001614:	4802      	ldr	r0, [pc, #8]	@ (8001620 <DMA1_Stream3_IRQHandler+0x10>)
 8001616:	f006 f9b1 	bl	800797c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	240004f4 	.word	0x240004f4

08001624 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001628:	4802      	ldr	r0, [pc, #8]	@ (8001634 <DMA1_Stream4_IRQHandler+0x10>)
 800162a:	f006 f9a7 	bl	800797c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2400056c 	.word	0x2400056c

08001638 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <DMA1_Stream5_IRQHandler+0x10>)
 800163e:	f006 f99d 	bl	800797c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	240001ec 	.word	0x240001ec

0800164c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001650:	4802      	ldr	r0, [pc, #8]	@ (800165c <DMA1_Stream6_IRQHandler+0x10>)
 8001652:	f006 f993 	bl	800797c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	24000390 	.word	0x24000390

08001660 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001664:	4802      	ldr	r0, [pc, #8]	@ (8001670 <ADC_IRQHandler+0x10>)
 8001666:	f002 fd9d 	bl	80041a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2400017c 	.word	0x2400017c

08001674 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <TIM2_IRQHandler+0x10>)
 800167a:	f00f fa3c 	bl	8010af6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	24000634 	.word	0x24000634

08001688 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800168c:	4802      	ldr	r0, [pc, #8]	@ (8001698 <SPI1_IRQHandler+0x10>)
 800168e:	f00e fe1d 	bl	80102cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	2400046c 	.word	0x2400046c

0800169c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016a0:	4802      	ldr	r0, [pc, #8]	@ (80016ac <USART2_IRQHandler+0x10>)
 80016a2:	f010 fbef 	bl	8011e84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	240006f8 	.word	0x240006f8

080016b0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_rd);
 80016b4:	4802      	ldr	r0, [pc, #8]	@ (80016c0 <DMA1_Stream7_IRQHandler+0x10>)
 80016b6:	f006 f961 	bl	800797c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	2400028c 	.word	0x2400028c

080016c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_wr);
 80016c8:	4802      	ldr	r0, [pc, #8]	@ (80016d4 <DMA2_Stream0_IRQHandler+0x10>)
 80016ca:	f006 f957 	bl	800797c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	24000304 	.word	0x24000304

080016d8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80016dc:	4802      	ldr	r0, [pc, #8]	@ (80016e8 <OTG_HS_IRQHandler+0x10>)
 80016de:	f009 ff32 	bl	800b546 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	24004220 	.word	0x24004220

080016ec <CORDIC_IRQHandler>:

/**
  * @brief This function handles CORDIC interrupt.
  */
void CORDIC_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CORDIC_IRQn 0 */

  /* USER CODE END CORDIC_IRQn 0 */
  HAL_CORDIC_IRQHandler(&hcordic);
 80016f0:	4802      	ldr	r0, [pc, #8]	@ (80016fc <CORDIC_IRQHandler+0x10>)
 80016f2:	f004 f92a 	bl	800594a <HAL_CORDIC_IRQHandler>
  /* USER CODE BEGIN CORDIC_IRQn 1 */

  /* USER CODE END CORDIC_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	24000264 	.word	0x24000264

08001700 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	e00a      	b.n	8001728 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001712:	f3af 8000 	nop.w
 8001716:	4601      	mov	r1, r0
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	60ba      	str	r2, [r7, #8]
 800171e:	b2ca      	uxtb	r2, r1
 8001720:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	429a      	cmp	r2, r3
 800172e:	dbf0      	blt.n	8001712 <_read+0x12>
  }

  return len;
 8001730:	687b      	ldr	r3, [r7, #4]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <_close>:
  }
  return len;
}

int _close(int file)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001762:	605a      	str	r2, [r3, #4]
  return 0;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <_isatty>:

int _isatty(int file)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800177a:	2301      	movs	r3, #1
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
	...

080017a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ac:	4a14      	ldr	r2, [pc, #80]	@ (8001800 <_sbrk+0x5c>)
 80017ae:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <_sbrk+0x60>)
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b8:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c0:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <_sbrk+0x64>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	@ (800180c <_sbrk+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d4:	f017 ff24 	bl	8019620 <__errno>
 80017d8:	4603      	mov	r3, r0
 80017da:	220c      	movs	r2, #12
 80017dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	e009      	b.n	80017f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ea:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <_sbrk+0x64>)
 80017f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	24050000 	.word	0x24050000
 8001804:	00000400 	.word	0x00000400
 8001808:	240005e4 	.word	0x240005e4
 800180c:	24004a70 	.word	0x24004a70

08001810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001814:	4b3e      	ldr	r3, [pc, #248]	@ (8001910 <SystemInit+0x100>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800181a:	4a3d      	ldr	r2, [pc, #244]	@ (8001910 <SystemInit+0x100>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001824:	4b3b      	ldr	r3, [pc, #236]	@ (8001914 <SystemInit+0x104>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 030f 	and.w	r3, r3, #15
 800182c:	2b06      	cmp	r3, #6
 800182e:	d807      	bhi.n	8001840 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001830:	4b38      	ldr	r3, [pc, #224]	@ (8001914 <SystemInit+0x104>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f023 030f 	bic.w	r3, r3, #15
 8001838:	4a36      	ldr	r2, [pc, #216]	@ (8001914 <SystemInit+0x104>)
 800183a:	f043 0307 	orr.w	r3, r3, #7
 800183e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001840:	4b35      	ldr	r3, [pc, #212]	@ (8001918 <SystemInit+0x108>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a34      	ldr	r2, [pc, #208]	@ (8001918 <SystemInit+0x108>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800184c:	4b32      	ldr	r3, [pc, #200]	@ (8001918 <SystemInit+0x108>)
 800184e:	2200      	movs	r2, #0
 8001850:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001852:	4b31      	ldr	r3, [pc, #196]	@ (8001918 <SystemInit+0x108>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	4930      	ldr	r1, [pc, #192]	@ (8001918 <SystemInit+0x108>)
 8001858:	4b30      	ldr	r3, [pc, #192]	@ (800191c <SystemInit+0x10c>)
 800185a:	4013      	ands	r3, r2
 800185c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800185e:	4b2d      	ldr	r3, [pc, #180]	@ (8001914 <SystemInit+0x104>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d007      	beq.n	800187a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800186a:	4b2a      	ldr	r3, [pc, #168]	@ (8001914 <SystemInit+0x104>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 030f 	bic.w	r3, r3, #15
 8001872:	4a28      	ldr	r2, [pc, #160]	@ (8001914 <SystemInit+0x104>)
 8001874:	f043 0307 	orr.w	r3, r3, #7
 8001878:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800187a:	4b27      	ldr	r3, [pc, #156]	@ (8001918 <SystemInit+0x108>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001880:	4b25      	ldr	r3, [pc, #148]	@ (8001918 <SystemInit+0x108>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001886:	4b24      	ldr	r3, [pc, #144]	@ (8001918 <SystemInit+0x108>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800188c:	4b22      	ldr	r3, [pc, #136]	@ (8001918 <SystemInit+0x108>)
 800188e:	4a24      	ldr	r2, [pc, #144]	@ (8001920 <SystemInit+0x110>)
 8001890:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001892:	4b21      	ldr	r3, [pc, #132]	@ (8001918 <SystemInit+0x108>)
 8001894:	4a23      	ldr	r2, [pc, #140]	@ (8001924 <SystemInit+0x114>)
 8001896:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001898:	4b1f      	ldr	r3, [pc, #124]	@ (8001918 <SystemInit+0x108>)
 800189a:	4a23      	ldr	r2, [pc, #140]	@ (8001928 <SystemInit+0x118>)
 800189c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800189e:	4b1e      	ldr	r3, [pc, #120]	@ (8001918 <SystemInit+0x108>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80018a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001918 <SystemInit+0x108>)
 80018a6:	4a20      	ldr	r2, [pc, #128]	@ (8001928 <SystemInit+0x118>)
 80018a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80018aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001918 <SystemInit+0x108>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80018b0:	4b19      	ldr	r3, [pc, #100]	@ (8001918 <SystemInit+0x108>)
 80018b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001928 <SystemInit+0x118>)
 80018b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80018b6:	4b18      	ldr	r3, [pc, #96]	@ (8001918 <SystemInit+0x108>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018bc:	4b16      	ldr	r3, [pc, #88]	@ (8001918 <SystemInit+0x108>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a15      	ldr	r2, [pc, #84]	@ (8001918 <SystemInit+0x108>)
 80018c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018c8:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <SystemInit+0x108>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80018ce:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <SystemInit+0x108>)
 80018d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d113      	bne.n	8001904 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80018dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <SystemInit+0x108>)
 80018de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001918 <SystemInit+0x108>)
 80018e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018e8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <SystemInit+0x11c>)
 80018ee:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80018f2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80018f4:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <SystemInit+0x108>)
 80018f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018fa:	4a07      	ldr	r2, [pc, #28]	@ (8001918 <SystemInit+0x108>)
 80018fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001900:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00
 8001914:	52002000 	.word	0x52002000
 8001918:	58024400 	.word	0x58024400
 800191c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001920:	02020200 	.word	0x02020200
 8001924:	01ff0000 	.word	0x01ff0000
 8001928:	01010280 	.word	0x01010280
 800192c:	52004000 	.word	0x52004000

08001930 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001934:	4b09      	ldr	r3, [pc, #36]	@ (800195c <ExitRun0Mode+0x2c>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4a08      	ldr	r2, [pc, #32]	@ (800195c <ExitRun0Mode+0x2c>)
 800193a:	f043 0302 	orr.w	r3, r3, #2
 800193e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001940:	bf00      	nop
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <ExitRun0Mode+0x2c>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f9      	beq.n	8001942 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800194e:	bf00      	nop
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	58024800 	.word	0x58024800

08001960 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b09c      	sub	sp, #112	@ 0x70
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001966:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001974:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001980:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
 8001990:	615a      	str	r2, [r3, #20]
 8001992:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	2234      	movs	r2, #52	@ 0x34
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f017 fdf2 	bl	8019584 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019a0:	4b43      	ldr	r3, [pc, #268]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 80019a2:	4a44      	ldr	r2, [pc, #272]	@ (8001ab4 <MX_TIM1_Init+0x154>)
 80019a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1020-1;
 80019a6:	4b42      	ldr	r3, [pc, #264]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 80019a8:	f240 32fb 	movw	r2, #1019	@ 0x3fb
 80019ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ae:	4b40      	ldr	r3, [pc, #256]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 80019b4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 80019b6:	2209      	movs	r2, #9
 80019b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ba:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019c0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019cc:	4838      	ldr	r0, [pc, #224]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 80019ce:	f00e ffda 	bl	8010986 <HAL_TIM_Base_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80019d8:	f7ff fc5a 	bl	8001290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019e0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80019e6:	4619      	mov	r1, r3
 80019e8:	4831      	ldr	r0, [pc, #196]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 80019ea:	f00f fa9f 	bl	8010f2c <HAL_TIM_ConfigClockSource>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80019f4:	f7ff fc4c 	bl	8001290 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019f8:	482d      	ldr	r0, [pc, #180]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 80019fa:	f00f f81b 	bl	8010a34 <HAL_TIM_PWM_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001a04:	f7ff fc44 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a14:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4825      	ldr	r0, [pc, #148]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 8001a1c:	f00f ffd0 	bl	80119c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001a26:	f7ff fc33 	bl	8001290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a2a:	2360      	movs	r3, #96	@ 0x60
 8001a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a32:	2300      	movs	r3, #0
 8001a34:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a36:	2300      	movs	r3, #0
 8001a38:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a46:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4818      	ldr	r0, [pc, #96]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 8001a50:	f00f f958 	bl	8010d04 <HAL_TIM_PWM_ConfigChannel>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001a5a:	f7ff fc19 	bl	8001290 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a76:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4807      	ldr	r0, [pc, #28]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 8001a94:	f010 f830 	bl	8011af8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001a9e:	f7ff fbf7 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001aa2:	4803      	ldr	r0, [pc, #12]	@ (8001ab0 <MX_TIM1_Init+0x150>)
 8001aa4:	f000 f8c6 	bl	8001c34 <HAL_TIM_MspPostInit>

}
 8001aa8:	bf00      	nop
 8001aaa:	3770      	adds	r7, #112	@ 0x70
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	240005e8 	.word	0x240005e8
 8001ab4:	40010000 	.word	0x40010000

08001ab8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001abe:	f107 0310 	add.w	r3, r7, #16
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b50 <MX_TIM2_Init+0x98>)
 8001ad8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001adc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 270-1;
 8001ade:	4b1c      	ldr	r3, [pc, #112]	@ (8001b50 <MX_TIM2_Init+0x98>)
 8001ae0:	f240 120d 	movw	r2, #269	@ 0x10d
 8001ae4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b50 <MX_TIM2_Init+0x98>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001aec:	4b18      	ldr	r3, [pc, #96]	@ (8001b50 <MX_TIM2_Init+0x98>)
 8001aee:	2263      	movs	r2, #99	@ 0x63
 8001af0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af2:	4b17      	ldr	r3, [pc, #92]	@ (8001b50 <MX_TIM2_Init+0x98>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af8:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <MX_TIM2_Init+0x98>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001afe:	4814      	ldr	r0, [pc, #80]	@ (8001b50 <MX_TIM2_Init+0x98>)
 8001b00:	f00e ff41 	bl	8010986 <HAL_TIM_Base_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b0a:	f7ff fbc1 	bl	8001290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	4619      	mov	r1, r3
 8001b1a:	480d      	ldr	r0, [pc, #52]	@ (8001b50 <MX_TIM2_Init+0x98>)
 8001b1c:	f00f fa06 	bl	8010f2c <HAL_TIM_ConfigClockSource>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b26:	f7ff fbb3 	bl	8001290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b2a:	2320      	movs	r3, #32
 8001b2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	4619      	mov	r1, r3
 8001b36:	4806      	ldr	r0, [pc, #24]	@ (8001b50 <MX_TIM2_Init+0x98>)
 8001b38:	f00f ff42 	bl	80119c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b42:	f7ff fba5 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	3720      	adds	r7, #32
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	24000634 	.word	0x24000634

08001b54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a30      	ldr	r2, [pc, #192]	@ (8001c24 <HAL_TIM_Base_MspInit+0xd0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d13e      	bne.n	8001be4 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b66:	4b30      	ldr	r3, [pc, #192]	@ (8001c28 <HAL_TIM_Base_MspInit+0xd4>)
 8001b68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b6c:	4a2e      	ldr	r2, [pc, #184]	@ (8001c28 <HAL_TIM_Base_MspInit+0xd4>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b76:	4b2c      	ldr	r3, [pc, #176]	@ (8001c28 <HAL_TIM_Base_MspInit+0xd4>)
 8001b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream0;
 8001b84:	4b29      	ldr	r3, [pc, #164]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001b86:	4a2a      	ldr	r2, [pc, #168]	@ (8001c30 <HAL_TIM_Base_MspInit+0xdc>)
 8001b88:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8001b8a:	4b28      	ldr	r3, [pc, #160]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001b8c:	220b      	movs	r2, #11
 8001b8e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b90:	4b26      	ldr	r3, [pc, #152]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001b92:	2240      	movs	r2, #64	@ 0x40
 8001b94:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b96:	4b25      	ldr	r3, [pc, #148]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001b9c:	4b23      	ldr	r3, [pc, #140]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001b9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ba2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ba4:	4b21      	ldr	r3, [pc, #132]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001ba6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001baa:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bac:	4b1f      	ldr	r3, [pc, #124]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001bae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bb2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001bba:	4b1c      	ldr	r3, [pc, #112]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001bc6:	4819      	ldr	r0, [pc, #100]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001bc8:	f004 fbb2 	bl	8006330 <HAL_DMA_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001bd2:	f7ff fb5d 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a14      	ldr	r2, [pc, #80]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001bda:	625a      	str	r2, [r3, #36]	@ 0x24
 8001bdc:	4a13      	ldr	r2, [pc, #76]	@ (8001c2c <HAL_TIM_Base_MspInit+0xd8>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001be2:	e01b      	b.n	8001c1c <HAL_TIM_Base_MspInit+0xc8>
  else if(tim_baseHandle->Instance==TIM2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bec:	d116      	bne.n	8001c1c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bee:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <HAL_TIM_Base_MspInit+0xd4>)
 8001bf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bf4:	4a0c      	ldr	r2, [pc, #48]	@ (8001c28 <HAL_TIM_Base_MspInit+0xd4>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <HAL_TIM_Base_MspInit+0xd4>)
 8001c00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2100      	movs	r1, #0
 8001c10:	201c      	movs	r0, #28
 8001c12:	f004 f810 	bl	8005c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c16:	201c      	movs	r0, #28
 8001c18:	f004 f827 	bl	8005c6a <HAL_NVIC_EnableIRQ>
}
 8001c1c:	bf00      	nop
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40010000 	.word	0x40010000
 8001c28:	58024400 	.word	0x58024400
 8001c2c:	24000680 	.word	0x24000680
 8001c30:	40020010 	.word	0x40020010

08001c34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a13      	ldr	r2, [pc, #76]	@ (8001ca0 <HAL_TIM_MspPostInit+0x6c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d11f      	bne.n	8001c96 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c56:	4b13      	ldr	r3, [pc, #76]	@ (8001ca4 <HAL_TIM_MspPostInit+0x70>)
 8001c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c5c:	4a11      	ldr	r2, [pc, #68]	@ (8001ca4 <HAL_TIM_MspPostInit+0x70>)
 8001c5e:	f043 0310 	orr.w	r3, r3, #16
 8001c62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c66:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca4 <HAL_TIM_MspPostInit+0x70>)
 8001c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c86:	2301      	movs	r3, #1
 8001c88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c8a:	f107 030c 	add.w	r3, r7, #12
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4805      	ldr	r0, [pc, #20]	@ (8001ca8 <HAL_TIM_MspPostInit+0x74>)
 8001c92:	f007 f993 	bl	8008fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c96:	bf00      	nop
 8001c98:	3720      	adds	r7, #32
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40010000 	.word	0x40010000
 8001ca4:	58024400 	.word	0x58024400
 8001ca8:	58021000 	.word	0x58021000

08001cac <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cb0:	4b22      	ldr	r3, [pc, #136]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cb2:	4a23      	ldr	r2, [pc, #140]	@ (8001d40 <MX_USART2_UART_Init+0x94>)
 8001cb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cb6:	4b21      	ldr	r3, [pc, #132]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cca:	4b1c      	ldr	r3, [pc, #112]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd6:	4b19      	ldr	r3, [pc, #100]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cdc:	4b17      	ldr	r3, [pc, #92]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ce2:	4b16      	ldr	r3, [pc, #88]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ce8:	4b14      	ldr	r3, [pc, #80]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cee:	4b13      	ldr	r3, [pc, #76]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cf4:	4811      	ldr	r0, [pc, #68]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cf6:	f00f ffa9 	bl	8011c4c <HAL_UART_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001d00:	f7ff fac6 	bl	8001290 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d04:	2100      	movs	r1, #0
 8001d06:	480d      	ldr	r0, [pc, #52]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001d08:	f012 f824 	bl	8013d54 <HAL_UARTEx_SetTxFifoThreshold>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001d12:	f7ff fabd 	bl	8001290 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d16:	2100      	movs	r1, #0
 8001d18:	4808      	ldr	r0, [pc, #32]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001d1a:	f012 f859 	bl	8013dd0 <HAL_UARTEx_SetRxFifoThreshold>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001d24:	f7ff fab4 	bl	8001290 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d28:	4804      	ldr	r0, [pc, #16]	@ (8001d3c <MX_USART2_UART_Init+0x90>)
 8001d2a:	f011 ffda 	bl	8013ce2 <HAL_UARTEx_DisableFifoMode>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001d34:	f7ff faac 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	240006f8 	.word	0x240006f8
 8001d40:	40004400 	.word	0x40004400

08001d44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b0b8      	sub	sp, #224	@ 0xe0
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d5c:	f107 0310 	add.w	r3, r7, #16
 8001d60:	22b8      	movs	r2, #184	@ 0xb8
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f017 fc0d 	bl	8019584 <memset>
  if(uartHandle->Instance==USART2)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a59      	ldr	r2, [pc, #356]	@ (8001ed4 <HAL_UART_MspInit+0x190>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	f040 80ab 	bne.w	8001ecc <HAL_UART_MspInit+0x188>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d76:	f04f 0202 	mov.w	r2, #2
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f00b fce9 	bl	800d764 <HAL_RCCEx_PeriphCLKConfig>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001d98:	f7ff fa7a 	bl	8001290 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d9c:	4b4e      	ldr	r3, [pc, #312]	@ (8001ed8 <HAL_UART_MspInit+0x194>)
 8001d9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001da2:	4a4d      	ldr	r2, [pc, #308]	@ (8001ed8 <HAL_UART_MspInit+0x194>)
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001da8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001dac:	4b4a      	ldr	r3, [pc, #296]	@ (8001ed8 <HAL_UART_MspInit+0x194>)
 8001dae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	4b47      	ldr	r3, [pc, #284]	@ (8001ed8 <HAL_UART_MspInit+0x194>)
 8001dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dc0:	4a45      	ldr	r2, [pc, #276]	@ (8001ed8 <HAL_UART_MspInit+0x194>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dca:	4b43      	ldr	r3, [pc, #268]	@ (8001ed8 <HAL_UART_MspInit+0x194>)
 8001dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dd8:	230c      	movs	r3, #12
 8001dda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001df0:	2307      	movs	r3, #7
 8001df2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4837      	ldr	r0, [pc, #220]	@ (8001edc <HAL_UART_MspInit+0x198>)
 8001dfe:	f007 f8dd 	bl	8008fbc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream1;
 8001e02:	4b37      	ldr	r3, [pc, #220]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e04:	4a37      	ldr	r2, [pc, #220]	@ (8001ee4 <HAL_UART_MspInit+0x1a0>)
 8001e06:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001e08:	4b35      	ldr	r3, [pc, #212]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e0a:	222c      	movs	r2, #44	@ 0x2c
 8001e0c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e0e:	4b34      	ldr	r3, [pc, #208]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e10:	2240      	movs	r2, #64	@ 0x40
 8001e12:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e14:	4b32      	ldr	r3, [pc, #200]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e1a:	4b31      	ldr	r3, [pc, #196]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e20:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e22:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e28:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e34:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e36:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e42:	4827      	ldr	r0, [pc, #156]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e44:	f004 fa74 	bl	8006330 <HAL_DMA_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001e4e:	f7ff fa1f 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a22      	ldr	r2, [pc, #136]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e56:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001e58:	4a21      	ldr	r2, [pc, #132]	@ (8001ee0 <HAL_UART_MspInit+0x19c>)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream2;
 8001e5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001e60:	4a22      	ldr	r2, [pc, #136]	@ (8001eec <HAL_UART_MspInit+0x1a8>)
 8001e62:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001e64:	4b20      	ldr	r3, [pc, #128]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001e66:	222b      	movs	r2, #43	@ 0x2b
 8001e68:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001e78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e7c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e84:	4b18      	ldr	r3, [pc, #96]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001e8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001e8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e90:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e92:	4b15      	ldr	r3, [pc, #84]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e98:	4b13      	ldr	r3, [pc, #76]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e9e:	4812      	ldr	r0, [pc, #72]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001ea0:	f004 fa46 	bl	8006330 <HAL_DMA_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8001eaa:	f7ff f9f1 	bl	8001290 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001eb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ee8 <HAL_UART_MspInit+0x1a4>)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	2026      	movs	r0, #38	@ 0x26
 8001ec2:	f003 feb8 	bl	8005c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ec6:	2026      	movs	r0, #38	@ 0x26
 8001ec8:	f003 fecf 	bl	8005c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ecc:	bf00      	nop
 8001ece:	37e0      	adds	r7, #224	@ 0xe0
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40004400 	.word	0x40004400
 8001ed8:	58024400 	.word	0x58024400
 8001edc:	58020000 	.word	0x58020000
 8001ee0:	2400078c 	.word	0x2400078c
 8001ee4:	40020028 	.word	0x40020028
 8001ee8:	24000804 	.word	0x24000804
 8001eec:	40020040 	.word	0x40020040

08001ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ef0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001f2c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001ef4:	f7ff fd1c 	bl	8001930 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ef8:	f7ff fc8a 	bl	8001810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001efc:	480c      	ldr	r0, [pc, #48]	@ (8001f30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001efe:	490d      	ldr	r1, [pc, #52]	@ (8001f34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f00:	4a0d      	ldr	r2, [pc, #52]	@ (8001f38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f04:	e002      	b.n	8001f0c <LoopCopyDataInit>

08001f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0a:	3304      	adds	r3, #4

08001f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f10:	d3f9      	bcc.n	8001f06 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f12:	4a0a      	ldr	r2, [pc, #40]	@ (8001f3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f14:	4c0a      	ldr	r4, [pc, #40]	@ (8001f40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f18:	e001      	b.n	8001f1e <LoopFillZerobss>

08001f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f1c:	3204      	adds	r2, #4

08001f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f20:	d3fb      	bcc.n	8001f1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f22:	f017 fb83 	bl	801962c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f26:	f7ff f8ed 	bl	8001104 <main>
  bx  lr
 8001f2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f2c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001f30:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f34:	24000160 	.word	0x24000160
  ldr r2, =_sidata
 8001f38:	0802e198 	.word	0x0802e198
  ldr r2, =_sbss
 8001f3c:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 8001f40:	24004a70 	.word	0x24004a70

08001f44 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f44:	e7fe      	b.n	8001f44 <ADC3_IRQHandler>

08001f46 <_ZN3Bsp14spiTransmit_ITEP19__SPI_HandleTypeDefPKht>:
	return convertHALStatus(HAL_TIM_PWM_Stop_DMA(htim, Channel));
}

//SPI--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Status Bsp::spiTransmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	807b      	strh	r3, [r7, #2]
	return convertHALStatus(HAL_SPI_Transmit_IT(hspi, pData, Size));
 8001f54:	887b      	ldrh	r3, [r7, #2]
 8001f56:	461a      	mov	r2, r3
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	68b8      	ldr	r0, [r7, #8]
 8001f5c:	f00e f90c 	bl	8010178 <HAL_SPI_Transmit_IT>
 8001f60:	4603      	mov	r3, r0
 8001f62:	4619      	mov	r1, r3
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f000 f8d3 	bl	8002110 <_ZN3Bsp16convertHALStatusE17HAL_StatusTypeDef>
 8001f6a:	4603      	mov	r3, r0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <_ZN3Bsp16uartTransmit_DMAEP20__UART_HandleTypeDefPKht>:
{
	return convertHALStatus(HAL_UART_Receive_IT(huart, pData, Size));
}

Status Bsp::uartTransmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	807b      	strh	r3, [r7, #2]
	return convertHALStatus(HAL_UART_Transmit_DMA(huart, pData, Size));
 8001f82:	887b      	ldrh	r3, [r7, #2]
 8001f84:	461a      	mov	r2, r3
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	68b8      	ldr	r0, [r7, #8]
 8001f8a:	f00f feaf 	bl	8011cec <HAL_UART_Transmit_DMA>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4619      	mov	r1, r3
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f8bc 	bl	8002110 <_ZN3Bsp16convertHALStatusE17HAL_StatusTypeDef>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <_ZN3Bsp15uartReceive_DMAEP20__UART_HandleTypeDefPht>:

Status Bsp::uartReceive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b084      	sub	sp, #16
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	807b      	strh	r3, [r7, #2]
	return convertHALStatus(HAL_UART_Receive_DMA(huart, pData, Size));
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	68b8      	ldr	r0, [r7, #8]
 8001fb8:	f00f ff18 	bl	8011dec <HAL_UART_Receive_DMA>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f000 f8a5 	bl	8002110 <_ZN3Bsp16convertHALStatusE17HAL_StatusTypeDef>
 8001fc6:	4603      	mov	r3, r0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <_ZN3Bsp11usbTransmitEPht>:

//USB-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Status Bsp::usbTransmit(uint8_t* Buf, uint16_t Len)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	80fb      	strh	r3, [r7, #6]
	return (CDC_Transmit_HS(Buf, Len) == USBD_OK) ? Status::OK : Status::ERROR;
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	68b8      	ldr	r0, [r7, #8]
 8001fe4:	f015 fb9c 	bl	8017720 <CDC_Transmit_HS>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bf14      	ite	ne
 8001fee:	2301      	movne	r3, #1
 8001ff0:	2300      	moveq	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_ZN3Bsp12adcStart_DMAEP17ADC_HandleTypeDefPmm>:
{
	return convertHALStatus(HAL_ADC_Stop_IT(hadc));
}

Status Bsp::adcStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	603b      	str	r3, [r7, #0]
	return convertHALStatus(HAL_ADC_Start_DMA(hadc, pData, Length));
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	68b8      	ldr	r0, [r7, #8]
 8002010:	f001 ff8a 	bl	8003f28 <HAL_ADC_Start_DMA>
 8002014:	4603      	mov	r3, r0
 8002016:	4619      	mov	r1, r3
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f879 	bl	8002110 <_ZN3Bsp16convertHALStatusE17HAL_StatusTypeDef>
 800201e:	4603      	mov	r3, r0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <_ZN3Bsp10adcStopDMAEP17ADC_HandleTypeDef>:

Status Bsp::adcStopDMA(ADC_HandleTypeDef *hadc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
	return convertHALStatus(HAL_ADC_Stop_DMA(hadc));
 8002032:	6838      	ldr	r0, [r7, #0]
 8002034:	f002 f854 	bl	80040e0 <HAL_ADC_Stop_DMA>
 8002038:	4603      	mov	r3, r0
 800203a:	4619      	mov	r1, r3
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f867 	bl	8002110 <_ZN3Bsp16convertHALStatusE17HAL_StatusTypeDef>
 8002042:	4603      	mov	r3, r0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <_ZN3Bsp12dacStart_DMAEP17DAC_HandleTypeDefmPKmmm>:
	return convertHALStatus(HAL_TIM_Base_Stop_DMA(htim));
}

//DAC----------------------------------------------------------------------------------------------------------------------------
Status Bsp::dacStart_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length, uint32_t Alignment)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af02      	add	r7, sp, #8
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	603b      	str	r3, [r7, #0]
	return convertHALStatus(HAL_DAC_Start_DMA(hdac, Channel, pData, Length, Alignment));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	68b8      	ldr	r0, [r7, #8]
 8002066:	f003 feb5 	bl	8005dd4 <HAL_DAC_Start_DMA>
 800206a:	4603      	mov	r3, r0
 800206c:	4619      	mov	r1, r3
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 f84e 	bl	8002110 <_ZN3Bsp16convertHALStatusE17HAL_StatusTypeDef>
 8002074:	4603      	mov	r3, r0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <_ZN3Bsp21i2cTransmit_Master_ITEP19__I2C_HandleTypeDeftPht>:
	return convertHALStatus(HAL_DAC_Stop_DMA(hdac, Channel));
}

//I2C----------------------------------------------------------------------------------------------------------------------------
Status Bsp::i2cTransmit_Master_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b084      	sub	sp, #16
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	603b      	str	r3, [r7, #0]
 800208a:	4613      	mov	r3, r2
 800208c:	80fb      	strh	r3, [r7, #6]
	return convertHALStatus(HAL_I2C_Master_Transmit_IT(hi2c, DevAddress, pData, Size));
 800208e:	8b3b      	ldrh	r3, [r7, #24]
 8002090:	88f9      	ldrh	r1, [r7, #6]
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	68b8      	ldr	r0, [r7, #8]
 8002096:	f007 f9d5 	bl	8009444 <HAL_I2C_Master_Transmit_IT>
 800209a:	4603      	mov	r3, r0
 800209c:	4619      	mov	r1, r3
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 f836 	bl	8002110 <_ZN3Bsp16convertHALStatusE17HAL_StatusTypeDef>
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <_ZN3Bsp13watchdogStartEP18IWDG_HandleTypeDef>:
	return convertHALStatus(HAL_I2C_Master_Receive_DMA(hi2c, DevAddress, pData, Size));
}

//wdg----------------------------------------------------------------------------------------------------------------------------
Status Bsp::watchdogStart(IWDG_HandleTypeDef *hiwdg)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	6039      	str	r1, [r7, #0]
	return convertHALStatus(HAL_IWDG_Init(hiwdg));
 80020b8:	6838      	ldr	r0, [r7, #0]
 80020ba:	f009 f8a2 	bl	800b202 <HAL_IWDG_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	4619      	mov	r1, r3
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f824 	bl	8002110 <_ZN3Bsp16convertHALStatusE17HAL_StatusTypeDef>
 80020c8:	4603      	mov	r3, r0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <_ZN3Bsp15watchdogRefreshEP18IWDG_HandleTypeDef>:

Status Bsp::watchdogRefresh(IWDG_HandleTypeDef *hiwdg)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
	return convertHALStatus(HAL_IWDG_Refresh(hiwdg));
 80020dc:	6838      	ldr	r0, [r7, #0]
 80020de:	f009 f8e1 	bl	800b2a4 <HAL_IWDG_Refresh>
 80020e2:	4603      	mov	r3, r0
 80020e4:	4619      	mov	r1, r3
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f812 	bl	8002110 <_ZN3Bsp16convertHALStatusE17HAL_StatusTypeDef>
 80020ec:	4603      	mov	r3, r0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <_ZN3Bsp5delayEm>:
	return convertHALStatus(HAL_CORDIC_Calculate_DMA(hcordic, pInBuff, pOutBuff, NbCalc, DMADirection));
}

//Extra-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Bsp::delay(uint32_t Delay)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
	HAL_Delay(Delay);
 8002100:	6838      	ldr	r0, [r7, #0]
 8002102:	f001 f96f 	bl	80033e4 <HAL_Delay>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <_ZN3Bsp16convertHALStatusE17HAL_StatusTypeDef>:

//PrivateFunctions------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Status Bsp::convertHALStatus(HAL_StatusTypeDef halStatus)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	70fb      	strb	r3, [r7, #3]
    switch (halStatus)
 800211c:	78fb      	ldrb	r3, [r7, #3]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d812      	bhi.n	8002148 <_ZN3Bsp16convertHALStatusE17HAL_StatusTypeDef+0x38>
 8002122:	a201      	add	r2, pc, #4	@ (adr r2, 8002128 <_ZN3Bsp16convertHALStatusE17HAL_StatusTypeDef+0x18>)
 8002124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002128:	08002139 	.word	0x08002139
 800212c:	0800213d 	.word	0x0800213d
 8002130:	08002141 	.word	0x08002141
 8002134:	08002145 	.word	0x08002145
    {
        case HAL_OK:
            return Status::OK;
 8002138:	2300      	movs	r3, #0
 800213a:	e006      	b.n	800214a <_ZN3Bsp16convertHALStatusE17HAL_StatusTypeDef+0x3a>
        case HAL_ERROR:
        	return Status::ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e004      	b.n	800214a <_ZN3Bsp16convertHALStatusE17HAL_StatusTypeDef+0x3a>
        case HAL_BUSY:
        	return Status::BUSY;
 8002140:	2302      	movs	r3, #2
 8002142:	e002      	b.n	800214a <_ZN3Bsp16convertHALStatusE17HAL_StatusTypeDef+0x3a>
        case HAL_TIMEOUT:
        	return Status::TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e000      	b.n	800214a <_ZN3Bsp16convertHALStatusE17HAL_StatusTypeDef+0x3a>
        default:
            return Status::ERROR;
 8002148:	2301      	movs	r3, #1
    }
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop

08002158 <_write>:

/**
 * Use printf/std::cout to send usb data
 * */
extern "C" int _write(int file, char *ptr, int len)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
	static uint8_t rc = USBD_OK;

	do
	{
		rc = CDC_Transmit_HS((uint8_t*) ptr, len);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	b29b      	uxth	r3, r3
 8002168:	4619      	mov	r1, r3
 800216a:	68b8      	ldr	r0, [r7, #8]
 800216c:	f015 fad8 	bl	8017720 <CDC_Transmit_HS>
 8002170:	4603      	mov	r3, r0
 8002172:	461a      	mov	r2, r3
 8002174:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <_write+0x40>)
 8002176:	701a      	strb	r2, [r3, #0]
	}
	while (USBD_BUSY == rc);
 8002178:	4b07      	ldr	r3, [pc, #28]	@ (8002198 <_write+0x40>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d0f1      	beq.n	8002164 <_write+0xc>

	if (USBD_FAIL == rc) {
 8002180:	4b05      	ldr	r3, [pc, #20]	@ (8002198 <_write+0x40>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d101      	bne.n	800218c <_write+0x34>
		return 0;
 8002188:	2300      	movs	r3, #0
 800218a:	e000      	b.n	800218e <_write+0x36>
	}
	return len;
 800218c:	687b      	ldr	r3, [r7, #4]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2400087c 	.word	0x2400087c

0800219c <_ZN11AnalyzerExtC1ER3Bsp>:
 *      Author: shaya
 */

#include "AnalyzerExtern.hpp"

AnalyzerExt::AnalyzerExt(Bsp& bsp): _bsp(bsp){}
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <_ZN11AnalyzerExt11sendCommandEh>:

void AnalyzerExt::sendCommand(uint8_t command)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
	_bsp.uartTransmit_DMA(&huart2, &command, 1);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	1cfa      	adds	r2, r7, #3
 80021ce:	2301      	movs	r3, #1
 80021d0:	4903      	ldr	r1, [pc, #12]	@ (80021e0 <_ZN11AnalyzerExt11sendCommandEh+0x24>)
 80021d2:	f7ff fecf 	bl	8001f74 <_ZN3Bsp16uartTransmit_DMAEP20__UART_HandleTypeDefPKht>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	240006f8 	.word	0x240006f8

080021e4 <_ZN11AnalyzerExt11receiveDataEv>:

uint8_t AnalyzerExt::receiveData()
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	uint8_t data;
	_bsp.uartReceive_DMA(&huart2, &data, 1);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	f107 020f 	add.w	r2, r7, #15
 80021f4:	2301      	movs	r3, #1
 80021f6:	4904      	ldr	r1, [pc, #16]	@ (8002208 <_ZN11AnalyzerExt11receiveDataEv+0x24>)
 80021f8:	f7ff fed3 	bl	8001fa2 <_ZN3Bsp15uartReceive_DMAEP20__UART_HandleTypeDefPht>
	return data;
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	240006f8 	.word	0x240006f8

0800220c <_ZN11AnalyzerExt10requestFFTEv>:

uint8_t AnalyzerExt::requestFFT()
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	sendCommand(CMD_FFT);
 8002214:	2101      	movs	r1, #1
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ffd0 	bl	80021bc <_ZN11AnalyzerExt11sendCommandEh>
	return receiveData();
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff ffe1 	bl	80021e4 <_ZN11AnalyzerExt11receiveDataEv>
 8002222:	4603      	mov	r3, r0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <_ZN3DacC1ER3Bsp>:
 */

#include "DacExtern.hpp"
#include "arm_math.h"

Dac::Dac(Bsp& bsp): _bsp(bsp){}
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <_ZN3Dac11sendDataSPIEm>:

Status Dac::sendDataSPI(uint32_t data)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
	if(_bsp.spiTransmit_IT(&hspi1, (uint8_t*)&data, 1) != Status::OK){
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	463a      	mov	r2, r7
 800225c:	2301      	movs	r3, #1
 800225e:	4909      	ldr	r1, [pc, #36]	@ (8002284 <_ZN3Dac11sendDataSPIEm+0x38>)
 8002260:	f7ff fe71 	bl	8001f46 <_ZN3Bsp14spiTransmit_ITEP19__SPI_HandleTypeDefPKht>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	bf14      	ite	ne
 800226a:	2301      	movne	r3, #1
 800226c:	2300      	moveq	r3, #0
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <_ZN3Dac11sendDataSPIEm+0x2c>
        return Status::ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <_ZN3Dac11sendDataSPIEm+0x2e>
    }

    return Status::OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	2400046c 	.word	0x2400046c

08002288 <_ZN3Dac13voltageToCodeEfff>:

	return data;
}

uint16_t Dac::voltageToCode(float voltage_decimal, float min_voltage, float max_voltage)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	@ 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	ed87 0a02 	vstr	s0, [r7, #8]
 8002294:	edc7 0a01 	vstr	s1, [r7, #4]
 8002298:	ed87 1a00 	vstr	s2, [r7]
    if (voltage_decimal > max_voltage) {
 800229c:	ed97 7a02 	vldr	s14, [r7, #8]
 80022a0:	edd7 7a00 	vldr	s15, [r7]
 80022a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ac:	dd02      	ble.n	80022b4 <_ZN3Dac13voltageToCodeEfff+0x2c>
        voltage_decimal = max_voltage;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	e00a      	b.n	80022ca <_ZN3Dac13voltageToCodeEfff+0x42>
    } else if (voltage_decimal < min_voltage) {
 80022b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80022b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80022bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c4:	d501      	bpl.n	80022ca <_ZN3Dac13voltageToCodeEfff+0x42>
        voltage_decimal = min_voltage;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	60bb      	str	r3, [r7, #8]
    }

    int32_t range_span = max_voltage - min_voltage;
 80022ca:	ed97 7a00 	vldr	s14, [r7]
 80022ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80022d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022da:	ee17 3a90 	vmov	r3, s15
 80022de:	61fb      	str	r3, [r7, #28]
    float normalized_voltage = (float)(voltage_decimal - min_voltage) / range_span;
 80022e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80022e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80022e8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	ee07 3a90 	vmov	s15, r3
 80022f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022fa:	edc7 7a06 	vstr	s15, [r7, #24]
    uint16_t code = (uint16_t)(normalized_voltage * 65535);
 80022fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002302:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002324 <_ZN3Dac13voltageToCodeEfff+0x9c>
 8002306:	ee67 7a87 	vmul.f32	s15, s15, s14
 800230a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800230e:	ee17 3a90 	vmov	r3, s15
 8002312:	82fb      	strh	r3, [r7, #22]

    return code;
 8002314:	8afb      	ldrh	r3, [r7, #22]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3724      	adds	r7, #36	@ 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	477fff00 	.word	0x477fff00

08002328 <_ZN3Dac11noOperationEv>:

    return Status::OK;
}

Status Dac::noOperation()
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	uint32_t txData;

    txData = NO_OPERATION_DAC;
 8002330:	f04f 33ff 	mov.w	r3, #4294967295
 8002334:	60fb      	str	r3, [r7, #12]
    if(sendDataSPI(txData) != Status::OK){
 8002336:	68f9      	ldr	r1, [r7, #12]
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff ff87 	bl	800224c <_ZN3Dac11sendDataSPIEm>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf14      	ite	ne
 8002344:	2301      	movne	r3, #1
 8002346:	2300      	moveq	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <_ZN3Dac11noOperationEv+0x2a>
        return Status::ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <_ZN3Dac11noOperationEv+0x2c>
    }

    return Status::OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <_ZN12FuncAnalyzerC1ER3Bsp>:
 *      Author: shaya
 */

#include <FuncAnalyzer.hpp>

FuncAnalyzer::FuncAnalyzer(Bsp& bsp) : _bsp(bsp) {}
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <_ZN12FuncAnalyzer14startAnalysingEv>:

void FuncAnalyzer::startAnalysing()
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	_bsp.adcStart_DMA(&hadc1, reinterpret_cast<uint32_t*>(adc_buffer.data()), ADC_BUF_SIZE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3304      	adds	r3, #4
 800238c:	60fb      	str	r3, [r7, #12]
      }

      [[__nodiscard__, __gnu__::__const__, __gnu__::__always_inline__]]
      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return static_cast<pointer>(_M_elems); }
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002394:	4903      	ldr	r1, [pc, #12]	@ (80023a4 <_ZN12FuncAnalyzer14startAnalysingEv+0x28>)
 8002396:	f7ff fe31 	bl	8001ffc <_ZN3Bsp12adcStart_DMAEP17ADC_HandleTypeDefPmm>
}
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	2400017c 	.word	0x2400017c

080023a8 <_ZN12FuncAnalyzer13stopAnalyzingEv>:

void FuncAnalyzer::stopAnalyzing()
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	_bsp.adcStopDMA(&hadc1);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4903      	ldr	r1, [pc, #12]	@ (80023c4 <_ZN12FuncAnalyzer13stopAnalyzingEv+0x1c>)
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fe36 	bl	8002028 <_ZN3Bsp10adcStopDMAEP17ADC_HandleTypeDef>
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	2400017c 	.word	0x2400017c

080023c8 <_ZN12FuncAnalyzer10computeFFTEPf>:
    arm_max_q15(reinterpret_cast<int16_t*>(adc_buffer.data()), ADC_BUF_SIZE, NULL, &risingEdge);
    arm_min_q15(reinterpret_cast<int16_t*>(adc_buffer.data()), ADC_BUF_SIZE, NULL, &fallingEdge);
    return ((float)risingEdge / (risingEdge + fallingEdge)) * 100.0f;
}

void FuncAnalyzer::computeFFT(float32_t* fftOutput) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	@ 0x28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
    arm_rfft_fast_instance_f32 fftInstance;
    arm_rfft_fast_init_f32(&fftInstance, ADC_BUF_SIZE);
 80023d2:	f107 030c 	add.w	r3, r7, #12
 80023d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023da:	4618      	mov	r0, r3
 80023dc:	f015 fe3c 	bl	8018058 <arm_rfft_fast_init_f32>
    arm_rfft_fast_f32(&fftInstance, reinterpret_cast<float32_t*>(adc_buffer.data()), fftOutput, 0);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3304      	adds	r3, #4
 80023e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023e8:	f107 000c 	add.w	r0, r7, #12
 80023ec:	2300      	movs	r3, #0
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	f015 fee4 	bl	80181bc <arm_rfft_fast_f32>
}
 80023f4:	bf00      	nop
 80023f6:	3728      	adds	r7, #40	@ 0x28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	ed87 0a01 	vstr	s0, [r7, #4]
 8002406:	edd7 7a01 	vldr	s15, [r7, #4]
 800240a:	eef0 7ae7 	vabs.f32	s15, s15
 800240e:	eeb0 0a67 	vmov.f32	s0, s15
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <_ZN13FuncGeneratorC1ER3Bsp>:
 *      Author: shaya
 */

#include <FuncGenerator.hpp>

FuncGenerator::FuncGenerator(Bsp& bsp) : _bsp(bsp)
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f8c3 2488 	str.w	r2, [r3, #1160]	@ 0x488
{
	generateWaveforms();
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 f80d 	bl	800245c <_ZN13FuncGenerator17generateWaveformsEv>
	activeWaveform = sineWave.data();
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3384      	adds	r3, #132	@ 0x84
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f8c3 2488 	str.w	r2, [r3, #1160]	@ 0x488
}
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <_ZN13FuncGenerator17generateWaveformsEv>:

void FuncGenerator::generateWaveforms()
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < SAMPLE_COUNT; i++) {
 8002464:	2300      	movs	r3, #0
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	e08a      	b.n	8002580 <_ZN13FuncGenerator17generateWaveformsEv+0x124>
        float angle = 2.0f * PI * i / SAMPLE_COUNT;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	ee07 3a90 	vmov	s15, r3
 8002470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002474:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002594 <_ZN13FuncGenerator17generateWaveformsEv+0x138>
 8002478:	ee27 7a87 	vmul.f32	s14, s15, s14
 800247c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002598 <_ZN13FuncGenerator17generateWaveformsEv+0x13c>
 8002480:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002484:	edc7 7a02 	vstr	s15, [r7, #8]

        // Generate Sine Wave
        sineWave[i] = static_cast<uint16_t>(MAX_AMPLITUDE * (0.5f + 0.5f * arm_sin_f32(angle)));
 8002488:	ed97 0a02 	vldr	s0, [r7, #8]
 800248c:	f016 fafc 	bl	8018a88 <arm_sin_f32>
 8002490:	eef0 7a40 	vmov.f32	s15, s0
 8002494:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800249c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80024a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024a4:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800259c <_ZN13FuncGenerator17generateWaveformsEv+0x140>
 80024a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024b0:	ee17 3a90 	vmov	r3, s15
 80024b4:	b29c      	uxth	r4, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3384      	adds	r3, #132	@ 0x84
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4611      	mov	r1, r2
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f960 	bl	8002784 <_ZNSt5arrayItLj128EEixEj>
 80024c4:	4603      	mov	r3, r0
 80024c6:	4622      	mov	r2, r4
 80024c8:	801a      	strh	r2, [r3, #0]

        // Generate Square Wave
        squareWave[i] = (i < SAMPLE_COUNT / 2) ? MAX_AMPLITUDE : 0;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80024ce:	dc02      	bgt.n	80024d6 <_ZN13FuncGenerator17generateWaveformsEv+0x7a>
 80024d0:	f640 74ff 	movw	r4, #4095	@ 0xfff
 80024d4:	e000      	b.n	80024d8 <_ZN13FuncGenerator17generateWaveformsEv+0x7c>
 80024d6:	2400      	movs	r4, #0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	4611      	mov	r1, r2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 f94e 	bl	8002784 <_ZNSt5arrayItLj128EEixEj>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4622      	mov	r2, r4
 80024ec:	801a      	strh	r2, [r3, #0]

        // Generate Triangle Wave
        triangleWave[i] = static_cast<uint16_t>(MAX_AMPLITUDE * fabs((2.0f * i / SAMPLE_COUNT) - 1.0f));
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80024fc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002598 <_ZN13FuncGenerator17generateWaveformsEv+0x13c>
 8002500:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002504:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002508:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800250c:	eeb0 0a67 	vmov.f32	s0, s15
 8002510:	f7ff ff74 	bl	80023fc <_ZSt4fabsf>
 8002514:	eef0 7a40 	vmov.f32	s15, s0
 8002518:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800259c <_ZN13FuncGenerator17generateWaveformsEv+0x140>
 800251c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002524:	ee17 3a90 	vmov	r3, s15
 8002528:	b29c      	uxth	r4, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f000 f925 	bl	8002784 <_ZNSt5arrayItLj128EEixEj>
 800253a:	4603      	mov	r3, r0
 800253c:	4622      	mov	r2, r4
 800253e:	801a      	strh	r2, [r3, #0]

        // Generate Sawtooth Wave
        sawtoothWave[i] = static_cast<uint16_t>(MAX_AMPLITUDE * (i / static_cast<float>(SAMPLE_COUNT)));
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	ee07 3a90 	vmov	s15, r3
 8002546:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800254a:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8002598 <_ZN13FuncGenerator17generateWaveformsEv+0x13c>
 800254e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002552:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800259c <_ZN13FuncGenerator17generateWaveformsEv+0x140>
 8002556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800255a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800255e:	ee17 3a90 	vmov	r3, s15
 8002562:	b29c      	uxth	r4, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4611      	mov	r1, r2
 800256e:	4618      	mov	r0, r3
 8002570:	f000 f908 	bl	8002784 <_ZNSt5arrayItLj128EEixEj>
 8002574:	4603      	mov	r3, r0
 8002576:	4622      	mov	r2, r4
 8002578:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < SAMPLE_COUNT; i++) {
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	3301      	adds	r3, #1
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b7f      	cmp	r3, #127	@ 0x7f
 8002584:	f77f af71 	ble.w	800246a <_ZN13FuncGenerator17generateWaveformsEv+0xe>
    }
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	bd90      	pop	{r4, r7, pc}
 8002592:	bf00      	nop
 8002594:	40c90fdb 	.word	0x40c90fdb
 8002598:	43000000 	.word	0x43000000
 800259c:	457ff000 	.word	0x457ff000

080025a0 <_ZN13FuncGenerator12setFrequencyEm>:

void FuncGenerator::setFrequency(uint32_t frequency)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
    uint32_t timerPeriod = HAL_RCC_GetPCLK1Freq() / (frequency * SAMPLE_COUNT);
 80025aa:	f00b f8af 	bl	800d70c <HAL_RCC_GetPCLK1Freq>
 80025ae:	4602      	mov	r2, r0
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	01db      	lsls	r3, r3, #7
 80025b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b8:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_AUTORELOAD(&htim1, timerPeriod);
 80025ba:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <_ZN13FuncGenerator12setFrequencyEm+0x30>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80025c2:	4a03      	ldr	r2, [pc, #12]	@ (80025d0 <_ZN13FuncGenerator12setFrequencyEm+0x30>)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	60d3      	str	r3, [r2, #12]
}
 80025c8:	bf00      	nop
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	240005e8 	.word	0x240005e8

080025d4 <_ZN13FuncGenerator12setAmplitudeEf>:

void FuncGenerator::setAmplitude(float amplitude)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	ed87 0a00 	vstr	s0, [r7]
    updateWaveform(sineWave.data(), amplitude);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3384      	adds	r3, #132	@ 0x84
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	ed97 0a00 	vldr	s0, [r7]
 80025ec:	4619      	mov	r1, r3
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f826 	bl	8002640 <_ZN13FuncGenerator14updateWaveformEPtf>
    updateWaveform(squareWave.data(), amplitude);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	ed97 0a00 	vldr	s0, [r7]
 8002602:	4619      	mov	r1, r3
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f81b 	bl	8002640 <_ZN13FuncGenerator14updateWaveformEPtf>
    updateWaveform(triangleWave.data(), amplitude);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	ed97 0a00 	vldr	s0, [r7]
 8002618:	4619      	mov	r1, r3
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f810 	bl	8002640 <_ZN13FuncGenerator14updateWaveformEPtf>
    updateWaveform(sawtoothWave.data(), amplitude);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	ed97 0a00 	vldr	s0, [r7]
 800262e:	4619      	mov	r1, r3
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f805 	bl	8002640 <_ZN13FuncGenerator14updateWaveformEPtf>
}
 8002636:	bf00      	nop
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <_ZN13FuncGenerator14updateWaveformEPtf>:

void FuncGenerator::updateWaveform(uint16_t* waveform, float amplitude)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	ed87 0a01 	vstr	s0, [r7, #4]
    for (int i = 0; i < SAMPLE_COUNT; i++) {
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	e021      	b.n	8002698 <_ZN13FuncGenerator14updateWaveformEPtf+0x58>
        waveform[i] = static_cast<uint16_t>(MAX_AMPLITUDE * amplitude * waveform[i] / MAX_AMPLITUDE);
 8002654:	edd7 7a01 	vldr	s15, [r7, #4]
 8002658:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80026ac <_ZN13FuncGenerator14updateWaveformEPtf+0x6c>
 800265c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	4413      	add	r3, r2
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	ee07 3a90 	vmov	s15, r3
 800266e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002672:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002676:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 80026ac <_ZN13FuncGenerator14updateWaveformEPtf+0x6c>
 800267a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	4413      	add	r3, r2
 8002686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800268a:	ee17 2a90 	vmov	r2, s15
 800268e:	b292      	uxth	r2, r2
 8002690:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < SAMPLE_COUNT; i++) {
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3301      	adds	r3, #1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	2b7f      	cmp	r3, #127	@ 0x7f
 800269c:	ddda      	ble.n	8002654 <_ZN13FuncGenerator14updateWaveformEPtf+0x14>
    }
}
 800269e:	bf00      	nop
 80026a0:	bf00      	nop
 80026a2:	371c      	adds	r7, #28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	457ff000 	.word	0x457ff000

080026b0 <_ZN13FuncGenerator14selectWaveformEh>:

void FuncGenerator::selectWaveform(uint8_t type)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	70fb      	strb	r3, [r7, #3]
    currentWaveform = type;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	f883 2484 	strb.w	r2, [r3, #1156]	@ 0x484
    switch (type) {
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d82d      	bhi.n	8002726 <_ZN13FuncGenerator14selectWaveformEh+0x76>
 80026ca:	a201      	add	r2, pc, #4	@ (adr r2, 80026d0 <_ZN13FuncGenerator14selectWaveformEh+0x20>)
 80026cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d0:	080026e1 	.word	0x080026e1
 80026d4:	080026f1 	.word	0x080026f1
 80026d8:	08002703 	.word	0x08002703
 80026dc:	08002715 	.word	0x08002715
        case SINE:
            activeWaveform = sineWave.data();
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3384      	adds	r3, #132	@ 0x84
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f8c3 2488 	str.w	r2, [r3, #1160]	@ 0x488
            break;
 80026ee:	e01a      	b.n	8002726 <_ZN13FuncGenerator14selectWaveformEh+0x76>
        case SQUARE:
            activeWaveform = squareWave.data();
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f8c3 2488 	str.w	r2, [r3, #1160]	@ 0x488
            break;
 8002700:	e011      	b.n	8002726 <_ZN13FuncGenerator14selectWaveformEh+0x76>
        case TRIANGLE:
            activeWaveform = triangleWave.data();
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8c3 2488 	str.w	r2, [r3, #1160]	@ 0x488
            break;
 8002712:	e008      	b.n	8002726 <_ZN13FuncGenerator14selectWaveformEh+0x76>
        case SAWTOOTH:
            activeWaveform = sawtoothWave.data();
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f8c3 2488 	str.w	r2, [r3, #1160]	@ 0x488
            break;
 8002724:	bf00      	nop
    }
}
 8002726:	bf00      	nop
 8002728:	371c      	adds	r7, #28
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop

08002734 <_ZN13FuncGenerator19startWaveformOutputEv>:

void FuncGenerator::startWaveformOutput()
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af02      	add	r7, sp, #8
 800273a:	6078      	str	r0, [r7, #4]
    _bsp.dacStart_DMA(&hdac1, DAC_CHANNEL_1, reinterpret_cast<uint32_t*>(activeWaveform), SAMPLE_COUNT, DAC_ALIGN_12B_R);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f8d3 3488 	ldr.w	r3, [r3, #1160]	@ 0x488
 8002746:	2200      	movs	r2, #0
 8002748:	9201      	str	r2, [sp, #4]
 800274a:	2280      	movs	r2, #128	@ 0x80
 800274c:	9200      	str	r2, [sp, #0]
 800274e:	2200      	movs	r2, #0
 8002750:	4903      	ldr	r1, [pc, #12]	@ (8002760 <_ZN13FuncGenerator19startWaveformOutputEv+0x2c>)
 8002752:	f7ff fc7b 	bl	800204c <_ZN3Bsp12dacStart_DMAEP17DAC_HandleTypeDefmPKmmm>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	2400037c 	.word	0x2400037c

08002764 <_ZN13FuncGenerator18stopWaveformOutputEv>:

void FuncGenerator::stopWaveformOutput()
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
    _bsp.adcStopDMA(&hadc1);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4903      	ldr	r1, [pc, #12]	@ (8002780 <_ZN13FuncGenerator18stopWaveformOutputEv+0x1c>)
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fc58 	bl	8002028 <_ZN3Bsp10adcStopDMAEP17ADC_HandleTypeDef>
}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	2400017c 	.word	0x2400017c

08002784 <_ZNSt5arrayItLj128EEixEj>:
      operator[](size_type __n) noexcept
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
	return _M_elems[__n];
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	4413      	add	r3, r2
      }
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <_ZN3LcdC1ER3Bsph>:
 */

#include "Lcd.hpp"


Lcd::Lcd(Bsp& bsp, uint8_t address) : _bsp(bsp), _address(address) {}
 80027a2:	b480      	push	{r7}
 80027a4:	b085      	sub	sp, #20
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	4613      	mov	r3, r2
 80027ae:	71fb      	strb	r3, [r7, #7]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	79fa      	ldrb	r2, [r7, #7]
 80027ba:	711a      	strb	r2, [r3, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <_ZN3Lcd11sendCommandEh>:

void Lcd::sendCommand(uint8_t cmd) {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	70fb      	strb	r3, [r7, #3]
    uint8_t upperNibble = cmd & 0xF0;
 80027d8:	78fb      	ldrb	r3, [r7, #3]
 80027da:	f023 030f 	bic.w	r3, r3, #15
 80027de:	73fb      	strb	r3, [r7, #15]
    uint8_t lowerNibble = (cmd << 4) & 0xF0;
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	73bb      	strb	r3, [r7, #14]

    uint8_t dataT[4] = {
        upperNibble | LCD_ENABLE_BIT | LCD_RS_COMMAND,
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	f043 0304 	orr.w	r3, r3, #4
 80027ec:	b2db      	uxtb	r3, r3
        upperNibble | LCD_RS_COMMAND,
        lowerNibble | LCD_ENABLE_BIT | LCD_RS_COMMAND,
        lowerNibble | LCD_RS_COMMAND
    };
 80027ee:	723b      	strb	r3, [r7, #8]
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	727b      	strb	r3, [r7, #9]
        lowerNibble | LCD_ENABLE_BIT | LCD_RS_COMMAND,
 80027f4:	7bbb      	ldrb	r3, [r7, #14]
 80027f6:	f043 0304 	orr.w	r3, r3, #4
 80027fa:	b2db      	uxtb	r3, r3
    };
 80027fc:	72bb      	strb	r3, [r7, #10]
 80027fe:	7bbb      	ldrb	r3, [r7, #14]
 8002800:	72fb      	strb	r3, [r7, #11]

    _bsp.i2cTransmit_Master_IT(&hi2c1, _address, dataT, 4);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	791b      	ldrb	r3, [r3, #4]
 800280a:	4619      	mov	r1, r3
 800280c:	f107 0308 	add.w	r3, r7, #8
 8002810:	2204      	movs	r2, #4
 8002812:	9200      	str	r2, [sp, #0]
 8002814:	460a      	mov	r2, r1
 8002816:	4903      	ldr	r1, [pc, #12]	@ (8002824 <_ZN3Lcd11sendCommandEh+0x58>)
 8002818:	f7ff fc31 	bl	800207e <_ZN3Bsp21i2cTransmit_Master_ITEP19__I2C_HandleTypeDeftPht>
}
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	24000408 	.word	0x24000408

08002828 <_ZN3Lcd8sendDataEh>:

void Lcd::sendData(uint8_t data) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af02      	add	r7, sp, #8
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	70fb      	strb	r3, [r7, #3]
    uint8_t upperNibble = data & 0xF0;
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	f023 030f 	bic.w	r3, r3, #15
 800283a:	73fb      	strb	r3, [r7, #15]
    uint8_t lowerNibble = (data << 4) & 0xF0;
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	73bb      	strb	r3, [r7, #14]

    uint8_t dataT[4] = {
        upperNibble | LCD_ENABLE_BIT | LCD_RS_DATA,
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	f043 0305 	orr.w	r3, r3, #5
 8002848:	b2db      	uxtb	r3, r3
        upperNibble | LCD_RS_DATA,
        lowerNibble | LCD_ENABLE_BIT | LCD_RS_DATA,
        lowerNibble | LCD_RS_DATA
    };
 800284a:	723b      	strb	r3, [r7, #8]
        upperNibble | LCD_RS_DATA,
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	b2db      	uxtb	r3, r3
    };
 8002854:	727b      	strb	r3, [r7, #9]
        lowerNibble | LCD_ENABLE_BIT | LCD_RS_DATA,
 8002856:	7bbb      	ldrb	r3, [r7, #14]
 8002858:	f043 0305 	orr.w	r3, r3, #5
 800285c:	b2db      	uxtb	r3, r3
    };
 800285e:	72bb      	strb	r3, [r7, #10]
        lowerNibble | LCD_RS_DATA
 8002860:	7bbb      	ldrb	r3, [r7, #14]
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	b2db      	uxtb	r3, r3
    };
 8002868:	72fb      	strb	r3, [r7, #11]

    _bsp.i2cTransmit_Master_IT(&hi2c1, _address, dataT, 4);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	791b      	ldrb	r3, [r3, #4]
 8002872:	4619      	mov	r1, r3
 8002874:	f107 0308 	add.w	r3, r7, #8
 8002878:	2204      	movs	r2, #4
 800287a:	9200      	str	r2, [sp, #0]
 800287c:	460a      	mov	r2, r1
 800287e:	4903      	ldr	r1, [pc, #12]	@ (800288c <_ZN3Lcd8sendDataEh+0x64>)
 8002880:	f7ff fbfd 	bl	800207e <_ZN3Bsp21i2cTransmit_Master_ITEP19__I2C_HandleTypeDeftPht>
}
 8002884:	bf00      	nop
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	24000408 	.word	0x24000408

08002890 <_ZN3Lcd4initEv>:

void Lcd::init() {
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
    _bsp.delay(50);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2132      	movs	r1, #50	@ 0x32
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fc29 	bl	80020f6 <_ZN3Bsp5delayEm>
    sendCommand(0x30);
 80028a4:	2130      	movs	r1, #48	@ 0x30
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff ff90 	bl	80027cc <_ZN3Lcd11sendCommandEh>
    _bsp.delay(5);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2105      	movs	r1, #5
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fc1f 	bl	80020f6 <_ZN3Bsp5delayEm>
    sendCommand(0x30);
 80028b8:	2130      	movs	r1, #48	@ 0x30
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff ff86 	bl	80027cc <_ZN3Lcd11sendCommandEh>
    _bsp.delay(1);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2101      	movs	r1, #1
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fc15 	bl	80020f6 <_ZN3Bsp5delayEm>
    sendCommand(0x30);
 80028cc:	2130      	movs	r1, #48	@ 0x30
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ff7c 	bl	80027cc <_ZN3Lcd11sendCommandEh>
    _bsp.delay(10);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	210a      	movs	r1, #10
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff fc0b 	bl	80020f6 <_ZN3Bsp5delayEm>
    sendCommand(0x20);
 80028e0:	2120      	movs	r1, #32
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff ff72 	bl	80027cc <_ZN3Lcd11sendCommandEh>
    _bsp.delay(10);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	210a      	movs	r1, #10
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fc01 	bl	80020f6 <_ZN3Bsp5delayEm>

    sendCommand(LCD_CMD_FUNCTION_SET);
 80028f4:	2128      	movs	r1, #40	@ 0x28
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff ff68 	bl	80027cc <_ZN3Lcd11sendCommandEh>
    sendCommand(LCD_CMD_DISPLAY_OFF);
 80028fc:	2108      	movs	r1, #8
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ff64 	bl	80027cc <_ZN3Lcd11sendCommandEh>
    sendCommand(LCD_CMD_CLEAR_DISPLAY);
 8002904:	2101      	movs	r1, #1
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff ff60 	bl	80027cc <_ZN3Lcd11sendCommandEh>
    _bsp.delay(2);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2102      	movs	r1, #2
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fbef 	bl	80020f6 <_ZN3Bsp5delayEm>
    sendCommand(LCD_CMD_ENTRY_MODE_SET);
 8002918:	2106      	movs	r1, #6
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff ff56 	bl	80027cc <_ZN3Lcd11sendCommandEh>
    sendCommand(LCD_CMD_DISPLAY_ON);
 8002920:	210c      	movs	r1, #12
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff ff52 	bl	80027cc <_ZN3Lcd11sendCommandEh>
}
 8002928:	bf00      	nop
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <_ZN3Lcd10sendStringEPKc>:
        default: return;
    }
    sendCommand(address);
}

void Lcd::sendString(const char* str) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
    while (*str) sendData(*str++);
 800293a:	e007      	b.n	800294c <_ZN3Lcd10sendStringEPKc+0x1c>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	603a      	str	r2, [r7, #0]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4619      	mov	r1, r3
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff ff6e 	bl	8002828 <_ZN3Lcd8sendDataEh>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f3      	bne.n	800293c <_ZN3Lcd10sendStringEPKc+0xc>
}
 8002954:	bf00      	nop
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <MainCpp>:
Dac exDac(bsp);
#endif


__attribute__((noreturn)) void MainCpp()
{
 8002960:	b5b0      	push	{r4, r5, r7, lr}
 8002962:	b08e      	sub	sp, #56	@ 0x38
 8002964:	af00      	add	r7, sp, #0
	ReceivedData data;
 8002966:	f107 031c 	add.w	r3, r7, #28
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	60da      	str	r2, [r3, #12]
 8002974:	741a      	strb	r2, [r3, #16]
 8002976:	2301      	movs	r3, #1
 8002978:	777b      	strb	r3, [r7, #29]
	bool dataReceived{false};
 800297a:	2300      	movs	r3, #0
 800297c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	float32_t fftOutput;
	const uint32_t DELAY = 1000;
 8002980:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002984:	633b      	str	r3, [r7, #48]	@ 0x30


	bool interface{false};
 8002986:	2300      	movs	r3, #0
 8002988:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	do
	{
		Status status = connection.interfaceHandshake(Major_Version, Minor_Version);
 800298c:	2200      	movs	r2, #0
 800298e:	2101      	movs	r1, #1
 8002990:	485c      	ldr	r0, [pc, #368]	@ (8002b04 <MainCpp+0x1a4>)
 8002992:	f000 f927 	bl	8002be4 <_ZN9SerialCtn18interfaceHandshakeEhh>
 8002996:	4603      	mov	r3, r0
 8002998:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (status == Status::OK) {
 800299c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d102      	bne.n	80029aa <MainCpp+0x4a>
			interface = true;
 80029a4:	2301      	movs	r3, #1
 80029a6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
		}
		bsp.delay(DELAY);
 80029aa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80029ae:	4856      	ldr	r0, [pc, #344]	@ (8002b08 <MainCpp+0x1a8>)
 80029b0:	f7ff fba1 	bl	80020f6 <_ZN3Bsp5delayEm>

	} while (!interface);
 80029b4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80029b8:	f083 0301 	eor.w	r3, r3, #1
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1e4      	bne.n	800298c <MainCpp+0x2c>


	lcd.init();
 80029c2:	4852      	ldr	r0, [pc, #328]	@ (8002b0c <MainCpp+0x1ac>)
 80029c4:	f7ff ff64 	bl	8002890 <_ZN3Lcd4initEv>
	lcd.sendString("LCD Online");
 80029c8:	4951      	ldr	r1, [pc, #324]	@ (8002b10 <MainCpp+0x1b0>)
 80029ca:	4850      	ldr	r0, [pc, #320]	@ (8002b0c <MainCpp+0x1ac>)
 80029cc:	f7ff ffb0 	bl	8002930 <_ZN3Lcd10sendStringEPKc>

	bsp.watchdogStart(&hiwdg1);
 80029d0:	4950      	ldr	r1, [pc, #320]	@ (8002b14 <MainCpp+0x1b4>)
 80029d2:	484d      	ldr	r0, [pc, #308]	@ (8002b08 <MainCpp+0x1a8>)
 80029d4:	f7ff fb6b 	bl	80020ae <_ZN3Bsp13watchdogStartEP18IWDG_HandleTypeDef>

	while(true)
	{
		if(usbReceivedFlag)
 80029d8:	4b4f      	ldr	r3, [pc, #316]	@ (8002b18 <MainCpp+0x1b8>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d053      	beq.n	8002a8a <MainCpp+0x12a>
		{
			data = connection.processReceivedData();
 80029e2:	463b      	mov	r3, r7
 80029e4:	4947      	ldr	r1, [pc, #284]	@ (8002b04 <MainCpp+0x1a4>)
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f984 	bl	8002cf4 <_ZN9SerialCtn19processReceivedDataEv>
 80029ec:	f107 041c 	add.w	r4, r7, #28
 80029f0:	463d      	mov	r5, r7
 80029f2:	6828      	ldr	r0, [r5, #0]
 80029f4:	6869      	ldr	r1, [r5, #4]
 80029f6:	68aa      	ldr	r2, [r5, #8]
 80029f8:	68eb      	ldr	r3, [r5, #12]
 80029fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029fc:	7c2b      	ldrb	r3, [r5, #16]
 80029fe:	7023      	strb	r3, [r4, #0]
			usbReceivedFlag = false;
 8002a00:	4b45      	ldr	r3, [pc, #276]	@ (8002b18 <MainCpp+0x1b8>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
			dataReceived = true;
 8002a06:	2301      	movs	r3, #1
 8002a08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			if(data.mode == FUNCTION_GENERATOR_MODE)
 8002a0c:	7f3b      	ldrb	r3, [r7, #28]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d11d      	bne.n	8002a4e <MainCpp+0xee>
			{
				generate.selectWaveform(data.generate.signalType);
 8002a12:	7f7b      	ldrb	r3, [r7, #29]
 8002a14:	4619      	mov	r1, r3
 8002a16:	4841      	ldr	r0, [pc, #260]	@ (8002b1c <MainCpp+0x1bc>)
 8002a18:	f7ff fe4a 	bl	80026b0 <_ZN13FuncGenerator14selectWaveformEh>
				generate.setAmplitude(data.generate.amplitude);
 8002a1c:	f8d7 3022 	ldr.w	r3, [r7, #34]	@ 0x22
 8002a20:	ee00 3a10 	vmov	s0, r3
 8002a24:	483d      	ldr	r0, [pc, #244]	@ (8002b1c <MainCpp+0x1bc>)
 8002a26:	f7ff fdd5 	bl	80025d4 <_ZN13FuncGenerator12setAmplitudeEf>
				generate.setFrequency(data.generate.amplitude);
 8002a2a:	f8d7 3022 	ldr.w	r3, [r7, #34]	@ 0x22
 8002a2e:	ee07 3a90 	vmov	s15, r3
 8002a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a36:	ee17 1a90 	vmov	r1, s15
 8002a3a:	4838      	ldr	r0, [pc, #224]	@ (8002b1c <MainCpp+0x1bc>)
 8002a3c:	f7ff fdb0 	bl	80025a0 <_ZN13FuncGenerator12setFrequencyEm>
				generate.generateWaveforms();
 8002a40:	4836      	ldr	r0, [pc, #216]	@ (8002b1c <MainCpp+0x1bc>)
 8002a42:	f7ff fd0b 	bl	800245c <_ZN13FuncGenerator17generateWaveformsEv>
				generate.startWaveformOutput();
 8002a46:	4835      	ldr	r0, [pc, #212]	@ (8002b1c <MainCpp+0x1bc>)
 8002a48:	f7ff fe74 	bl	8002734 <_ZN13FuncGenerator19startWaveformOutputEv>
 8002a4c:	e054      	b.n	8002af8 <MainCpp+0x198>
			}
			else if(data.mode == OSCILLOSCOPE_MODE)
 8002a4e:	7f3b      	ldrb	r3, [r7, #28]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d109      	bne.n	8002a68 <MainCpp+0x108>
			{
				generate.stopWaveformOutput();
 8002a54:	4831      	ldr	r0, [pc, #196]	@ (8002b1c <MainCpp+0x1bc>)
 8002a56:	f7ff fe85 	bl	8002764 <_ZN13FuncGenerator18stopWaveformOutputEv>

				#ifdef USE_EXTERN_DAC
				exDac.noOperation();
 8002a5a:	4831      	ldr	r0, [pc, #196]	@ (8002b20 <MainCpp+0x1c0>)
 8002a5c:	f7ff fc64 	bl	8002328 <_ZN3Dac11noOperationEv>
				#endif

				analyze.startAnalysing();
 8002a60:	4830      	ldr	r0, [pc, #192]	@ (8002b24 <MainCpp+0x1c4>)
 8002a62:	f7ff fc8b 	bl	800237c <_ZN12FuncAnalyzer14startAnalysingEv>
 8002a66:	e047      	b.n	8002af8 <MainCpp+0x198>
			}
			else if(data.mode == UPDATE_MODE)
 8002a68:	7f3b      	ldrb	r3, [r7, #28]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d106      	bne.n	8002a7c <MainCpp+0x11c>
			{
				printf("DEV_ERROR: UPDATE Mode not implemented!\n");
 8002a6e:	482e      	ldr	r0, [pc, #184]	@ (8002b28 <MainCpp+0x1c8>)
 8002a70:	f016 fc58 	bl	8019324 <puts>
				dataReceived = false;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002a7a:	e03d      	b.n	8002af8 <MainCpp+0x198>
			}
			else
			{
				printf("DEV_ERROR: Incorrect mode selected!\n");
 8002a7c:	482b      	ldr	r0, [pc, #172]	@ (8002b2c <MainCpp+0x1cc>)
 8002a7e:	f016 fc51 	bl	8019324 <puts>
				dataReceived = false;
 8002a82:	2300      	movs	r3, #0
 8002a84:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002a88:	e036      	b.n	8002af8 <MainCpp+0x198>
			}
		}
		else if(dataReceived)
 8002a8a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d032      	beq.n	8002af8 <MainCpp+0x198>
		{
			if(data.mode == FUNCTION_GENERATOR_MODE)
 8002a92:	7f3b      	ldrb	r3, [r7, #28]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10c      	bne.n	8002ab2 <MainCpp+0x152>
			{
				generate.startWaveformOutput();
 8002a98:	4820      	ldr	r0, [pc, #128]	@ (8002b1c <MainCpp+0x1bc>)
 8002a9a:	f7ff fe4b 	bl	8002734 <_ZN13FuncGenerator19startWaveformOutputEv>

				#ifdef USE_EXTERN_DAC
				exDac.voltageToCode(3.3, -6, 6);
 8002a9e:	eeb1 1a08 	vmov.f32	s2, #24	@ 0x40c00000  6.0
 8002aa2:	eef9 0a08 	vmov.f32	s1, #152	@ 0xc0c00000 -6.0
 8002aa6:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8002b30 <MainCpp+0x1d0>
 8002aaa:	481d      	ldr	r0, [pc, #116]	@ (8002b20 <MainCpp+0x1c0>)
 8002aac:	f7ff fbec 	bl	8002288 <_ZN3Dac13voltageToCodeEfff>
 8002ab0:	e022      	b.n	8002af8 <MainCpp+0x198>
				#endif
			}
			else if(data.mode == OSCILLOSCOPE_MODE)
 8002ab2:	7f3b      	ldrb	r3, [r7, #28]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d115      	bne.n	8002ae4 <MainCpp+0x184>
			{
				if(data.analyze.stop)
 8002ab8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <MainCpp+0x168>
				{
					analyze.stopAnalyzing();
 8002ac0:	4818      	ldr	r0, [pc, #96]	@ (8002b24 <MainCpp+0x1c4>)
 8002ac2:	f7ff fc71 	bl	80023a8 <_ZN12FuncAnalyzer13stopAnalyzingEv>
 8002ac6:	e017      	b.n	8002af8 <MainCpp+0x198>
				}
				else if(data.analyze.fft)
 8002ac8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d013      	beq.n	8002af8 <MainCpp+0x198>
				{
					analyze.computeFFT(&fftOutput);
 8002ad0:	f107 0318 	add.w	r3, r7, #24
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4813      	ldr	r0, [pc, #76]	@ (8002b24 <MainCpp+0x1c4>)
 8002ad8:	f7ff fc76 	bl	80023c8 <_ZN12FuncAnalyzer10computeFFTEPf>

					#ifdef USE_EXTERN_ADC
					exAnalyze.requestFFT();
 8002adc:	4815      	ldr	r0, [pc, #84]	@ (8002b34 <MainCpp+0x1d4>)
 8002ade:	f7ff fb95 	bl	800220c <_ZN11AnalyzerExt10requestFFTEv>
 8002ae2:	e009      	b.n	8002af8 <MainCpp+0x198>
					#endif
				}
			}
			else if(data.mode == UPDATE_MODE)
 8002ae4:	7f3b      	ldrb	r3, [r7, #28]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d103      	bne.n	8002af2 <MainCpp+0x192>
			{
				printf("DEV_ERROR: UPDATE Mode not implemented!\n");
 8002aea:	480f      	ldr	r0, [pc, #60]	@ (8002b28 <MainCpp+0x1c8>)
 8002aec:	f016 fc1a 	bl	8019324 <puts>
 8002af0:	e002      	b.n	8002af8 <MainCpp+0x198>
			}
			else
			{
				printf("DEV_ERROR: Incorrect mode selected!\n");
 8002af2:	480e      	ldr	r0, [pc, #56]	@ (8002b2c <MainCpp+0x1cc>)
 8002af4:	f016 fc16 	bl	8019324 <puts>
			}
		}

		bsp.watchdogRefresh(&hiwdg1);
 8002af8:	4906      	ldr	r1, [pc, #24]	@ (8002b14 <MainCpp+0x1b4>)
 8002afa:	4803      	ldr	r0, [pc, #12]	@ (8002b08 <MainCpp+0x1a8>)
 8002afc:	f7ff fae9 	bl	80020d2 <_ZN3Bsp15watchdogRefreshEP18IWDG_HandleTypeDef>
		if(usbReceivedFlag)
 8002b00:	e76a      	b.n	80029d8 <MainCpp+0x78>
 8002b02:	bf00      	nop
 8002b04:	24002d1c 	.word	0x24002d1c
 8002b08:	24000880 	.word	0x24000880
 8002b0c:	24002d14 	.word	0x24002d14
 8002b10:	0801a3d8 	.word	0x0801a3d8
 8002b14:	2400045c 	.word	0x2400045c
 8002b18:	2400301c 	.word	0x2400301c
 8002b1c:	24002888 	.word	0x24002888
 8002b20:	24002d24 	.word	0x24002d24
 8002b24:	24000884 	.word	0x24000884
 8002b28:	0801a3e4 	.word	0x0801a3e4
 8002b2c:	0801a40c 	.word	0x0801a40c
 8002b30:	40533333 	.word	0x40533333
 8002b34:	24002d20 	.word	0x24002d20

08002b38 <_Z41__static_initialization_and_destruction_0v>:
	}
}
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
FuncAnalyzer analyze(bsp);
 8002b3c:	490d      	ldr	r1, [pc, #52]	@ (8002b74 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8002b3e:	480e      	ldr	r0, [pc, #56]	@ (8002b78 <_Z41__static_initialization_and_destruction_0v+0x40>)
 8002b40:	f7ff fc0c 	bl	800235c <_ZN12FuncAnalyzerC1ER3Bsp>
FuncGenerator generate(bsp);
 8002b44:	490b      	ldr	r1, [pc, #44]	@ (8002b74 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8002b46:	480d      	ldr	r0, [pc, #52]	@ (8002b7c <_Z41__static_initialization_and_destruction_0v+0x44>)
 8002b48:	f7ff fc68 	bl	800241c <_ZN13FuncGeneratorC1ER3Bsp>
Lcd lcd(bsp, SLAVE_ADDRESS);
 8002b4c:	224e      	movs	r2, #78	@ 0x4e
 8002b4e:	4909      	ldr	r1, [pc, #36]	@ (8002b74 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8002b50:	480b      	ldr	r0, [pc, #44]	@ (8002b80 <_Z41__static_initialization_and_destruction_0v+0x48>)
 8002b52:	f7ff fe26 	bl	80027a2 <_ZN3LcdC1ER3Bsph>
SerialCtn connection(bsp);
 8002b56:	4907      	ldr	r1, [pc, #28]	@ (8002b74 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8002b58:	480a      	ldr	r0, [pc, #40]	@ (8002b84 <_Z41__static_initialization_and_destruction_0v+0x4c>)
 8002b5a:	f000 f826 	bl	8002baa <_ZN9SerialCtnC1ER3Bsp>
AnalyzerExt exAnalyze(bsp);
 8002b5e:	4905      	ldr	r1, [pc, #20]	@ (8002b74 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8002b60:	4809      	ldr	r0, [pc, #36]	@ (8002b88 <_Z41__static_initialization_and_destruction_0v+0x50>)
 8002b62:	f7ff fb1b 	bl	800219c <_ZN11AnalyzerExtC1ER3Bsp>
Dac exDac(bsp);
 8002b66:	4903      	ldr	r1, [pc, #12]	@ (8002b74 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8002b68:	4808      	ldr	r0, [pc, #32]	@ (8002b8c <_Z41__static_initialization_and_destruction_0v+0x54>)
 8002b6a:	f7ff fb5f 	bl	800222c <_ZN3DacC1ER3Bsp>
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	24000880 	.word	0x24000880
 8002b78:	24000884 	.word	0x24000884
 8002b7c:	24002888 	.word	0x24002888
 8002b80:	24002d14 	.word	0x24002d14
 8002b84:	24002d1c 	.word	0x24002d1c
 8002b88:	24002d20 	.word	0x24002d20
 8002b8c:	24002d24 	.word	0x24002d24

08002b90 <_GLOBAL__sub_I_bsp>:
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	f7ff ffd0 	bl	8002b38 <_Z41__static_initialization_and_destruction_0v>
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <_ZSt21is_constant_evaluatedv>:

  /// Returns true only when called during constant evaluation.
  /// @since C++20
  constexpr inline bool
  is_constant_evaluated() noexcept
  {
 8002b9a:	b480      	push	{r7}
 8002b9c:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
    if consteval { return true; } else { return false; }
#else
    return __builtin_is_constant_evaluated();
 8002b9e:	2300      	movs	r3, #0
#endif
  }
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <_ZN9SerialCtnC1ER3Bsp>:
#include <algorithm>


uint8_t UsbRxDataBuffer[USB_RX_BUFF_SIZE];

SerialCtn::SerialCtn(Bsp& bsp): _bsp(bsp){}
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <_ZNSt5arrayIhLj15EEixEj>:
      operator[](size_type __n) noexcept
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
	return _M_elems[__n];
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	4413      	add	r3, r2
      }
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <_ZN9SerialCtn18interfaceHandshakeEhh>:

Status SerialCtn::interfaceHandshake(uint8_t major, uint8_t minor)
{
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b08f      	sub	sp, #60	@ 0x3c
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	70fb      	strb	r3, [r7, #3]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	70bb      	strb	r3, [r7, #2]
	char versionStr[18];
	snprintf(versionStr, sizeof(versionStr), "Version: %d.%d", major, minor);
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	78bb      	ldrb	r3, [r7, #2]
 8002bf8:	f107 001c 	add.w	r0, r7, #28
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	4a21      	ldr	r2, [pc, #132]	@ (8002c88 <_ZN9SerialCtn18interfaceHandshakeEhh+0xa4>)
 8002c02:	2112      	movs	r1, #18
 8002c04:	f016 fb96 	bl	8019334 <sniprintf>
	_bsp.usbTransmit(reinterpret_cast<uint8_t*>(versionStr), strlen(versionStr));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681c      	ldr	r4, [r3, #0]
 8002c0c:	f107 031c 	add.w	r3, r7, #28
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fd fbdd 	bl	80003d0 <strlen>
 8002c16:	4603      	mov	r3, r0
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	f107 031c 	add.w	r3, r7, #28
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4620      	mov	r0, r4
 8002c22:	f7ff f9d5 	bl	8001fd0 <_ZN3Bsp11usbTransmitEPht>

	UsbArray dataReceived = receiveData();
 8002c26:	f107 030c 	add.w	r3, r7, #12
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 f82d 	bl	8002c8c <_ZN9SerialCtn11receiveDataEv>

	if(dataReceived[0] != 0xFF && dataReceived[1] != 0xAA && dataReceived[2] != 0xFF)
 8002c32:	f107 030c 	add.w	r3, r7, #12
 8002c36:	2100      	movs	r1, #0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff ffc5 	bl	8002bc8 <_ZNSt5arrayIhLj15EEixEj>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2bff      	cmp	r3, #255	@ 0xff
 8002c44:	d015      	beq.n	8002c72 <_ZN9SerialCtn18interfaceHandshakeEhh+0x8e>
 8002c46:	f107 030c 	add.w	r3, r7, #12
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ffbb 	bl	8002bc8 <_ZNSt5arrayIhLj15EEixEj>
 8002c52:	4603      	mov	r3, r0
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2baa      	cmp	r3, #170	@ 0xaa
 8002c58:	d00b      	beq.n	8002c72 <_ZN9SerialCtn18interfaceHandshakeEhh+0x8e>
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	2102      	movs	r1, #2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff ffb1 	bl	8002bc8 <_ZNSt5arrayIhLj15EEixEj>
 8002c66:	4603      	mov	r3, r0
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2bff      	cmp	r3, #255	@ 0xff
 8002c6c:	d001      	beq.n	8002c72 <_ZN9SerialCtn18interfaceHandshakeEhh+0x8e>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <_ZN9SerialCtn18interfaceHandshakeEhh+0x90>
 8002c72:	2300      	movs	r3, #0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <_ZN9SerialCtn18interfaceHandshakeEhh+0x98>
		return Status::ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <_ZN9SerialCtn18interfaceHandshakeEhh+0x9a>

	return Status::OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3734      	adds	r7, #52	@ 0x34
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd90      	pop	{r4, r7, pc}
 8002c86:	bf00      	nop
 8002c88:	0801a430 	.word	0x0801a430

08002c8c <_ZN9SerialCtn11receiveDataEv>:

UsbArray SerialCtn::receiveData()
{
 8002c8c:	b5b0      	push	{r4, r5, r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
	// C array into C++ array!
	UsbArray dataReceived = {};
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	6053      	str	r3, [r2, #4]
 8002ca0:	6093      	str	r3, [r2, #8]
 8002ca2:	f8c2 300b 	str.w	r3, [r2, #11]
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
    { return __arr; }
 8002ca6:	4c08      	ldr	r4, [pc, #32]	@ (8002cc8 <_ZN9SerialCtn11receiveDataEv+0x3c>)
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
    { return __arr + _Nm; }
 8002ca8:	4d08      	ldr	r5, [pc, #32]	@ (8002ccc <_ZN9SerialCtn11receiveDataEv+0x40>)
	std::copy(std::begin(UsbRxDataBuffer), std::end(UsbRxDataBuffer), dataReceived.begin());
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f8ec 	bl	8002e88 <_ZNSt5arrayIhLj15EE5beginEv>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	f000 f8f3 	bl	8002ea2 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
	return dataReceived;
 8002cbc:	bf00      	nop
}
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	24002d28 	.word	0x24002d28
 8002ccc:	24002d37 	.word	0x24002d37

08002cd0 <_ZZN9SerialCtn19processReceivedDataEvENKUlhE_clEh>:
		std::memcpy(&data.generate.amplitude, &dataReceived[7], sizeof(float));
		std::memcpy(&data.generate.offset, &dataReceived[11], sizeof(float));
	}
	else if(dataReceived[0] == 0xFF && dataReceived[1] == 0xC3) // Oscilloscope command
	{
		data.analyze.stop = std::all_of(dataReceived.begin() + 2, dataReceived.end(), [](uint8_t byte) { return byte == 0; });
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	70fb      	strb	r3, [r7, #3]
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	bf0c      	ite	eq
 8002ce2:	2301      	moveq	r3, #1
 8002ce4:	2300      	movne	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <_ZN9SerialCtn19processReceivedDataEv>:
{
 8002cf4:	b5b0      	push	{r4, r5, r7, lr}
 8002cf6:	b08c      	sub	sp, #48	@ 0x30
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
	ReceivedData data = {};
 8002cfe:	f107 031c 	add.w	r3, r7, #28
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	605a      	str	r2, [r3, #4]
 8002d08:	609a      	str	r2, [r3, #8]
 8002d0a:	60da      	str	r2, [r3, #12]
 8002d0c:	741a      	strb	r2, [r3, #16]
 8002d0e:	2301      	movs	r3, #1
 8002d10:	777b      	strb	r3, [r7, #29]
	UsbArray dataReceived = receiveData();
 8002d12:	f107 030c 	add.w	r3, r7, #12
 8002d16:	6839      	ldr	r1, [r7, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ffb7 	bl	8002c8c <_ZN9SerialCtn11receiveDataEv>
	if(dataReceived[0] == 0xAA && dataReceived[1] == 0xFF) // Function generator command
 8002d1e:	f107 030c 	add.w	r3, r7, #12
 8002d22:	2100      	movs	r1, #0
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff ff4f 	bl	8002bc8 <_ZNSt5arrayIhLj15EEixEj>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2baa      	cmp	r3, #170	@ 0xaa
 8002d30:	d10b      	bne.n	8002d4a <_ZN9SerialCtn19processReceivedDataEv+0x56>
 8002d32:	f107 030c 	add.w	r3, r7, #12
 8002d36:	2101      	movs	r1, #1
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff45 	bl	8002bc8 <_ZNSt5arrayIhLj15EEixEj>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2bff      	cmp	r3, #255	@ 0xff
 8002d44:	d101      	bne.n	8002d4a <_ZN9SerialCtn19processReceivedDataEv+0x56>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <_ZN9SerialCtn19processReceivedDataEv+0x58>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d027      	beq.n	8002da0 <_ZN9SerialCtn19processReceivedDataEv+0xac>
		data.generate.signalType = dataReceived[2];
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	2102      	movs	r1, #2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff ff36 	bl	8002bc8 <_ZNSt5arrayIhLj15EEixEj>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	777b      	strb	r3, [r7, #29]
		std::memcpy(&data.generate.frequency, &dataReceived[3], sizeof(float));
 8002d62:	f107 030c 	add.w	r3, r7, #12
 8002d66:	2103      	movs	r1, #3
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff ff2d 	bl	8002bc8 <_ZNSt5arrayIhLj15EEixEj>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f8c7 301e 	str.w	r3, [r7, #30]
		std::memcpy(&data.generate.amplitude, &dataReceived[7], sizeof(float));
 8002d76:	f107 030c 	add.w	r3, r7, #12
 8002d7a:	2107      	movs	r1, #7
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff23 	bl	8002bc8 <_ZNSt5arrayIhLj15EEixEj>
 8002d82:	4603      	mov	r3, r0
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f8c7 3022 	str.w	r3, [r7, #34]	@ 0x22
		std::memcpy(&data.generate.offset, &dataReceived[11], sizeof(float));
 8002d8a:	f107 030c 	add.w	r3, r7, #12
 8002d8e:	210b      	movs	r1, #11
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff19 	bl	8002bc8 <_ZNSt5arrayIhLj15EEixEj>
 8002d96:	4603      	mov	r3, r0
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f8c7 3026 	str.w	r3, [r7, #38]	@ 0x26
 8002d9e:	e061      	b.n	8002e64 <_ZN9SerialCtn19processReceivedDataEv+0x170>
	else if(dataReceived[0] == 0xFF && dataReceived[1] == 0xC3) // Oscilloscope command
 8002da0:	f107 030c 	add.w	r3, r7, #12
 8002da4:	2100      	movs	r1, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ff0e 	bl	8002bc8 <_ZNSt5arrayIhLj15EEixEj>
 8002dac:	4603      	mov	r3, r0
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2bff      	cmp	r3, #255	@ 0xff
 8002db2:	d10b      	bne.n	8002dcc <_ZN9SerialCtn19processReceivedDataEv+0xd8>
 8002db4:	f107 030c 	add.w	r3, r7, #12
 8002db8:	2101      	movs	r1, #1
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff ff04 	bl	8002bc8 <_ZNSt5arrayIhLj15EEixEj>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2bc3      	cmp	r3, #195	@ 0xc3
 8002dc6:	d101      	bne.n	8002dcc <_ZN9SerialCtn19processReceivedDataEv+0xd8>
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e000      	b.n	8002dce <_ZN9SerialCtn19processReceivedDataEv+0xda>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d03a      	beq.n	8002e48 <_ZN9SerialCtn19processReceivedDataEv+0x154>
		data.analyze.stop = std::all_of(dataReceived.begin() + 2, dataReceived.end(), [](uint8_t byte) { return byte == 0; });
 8002dd2:	f107 030c 	add.w	r3, r7, #12
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f856 	bl	8002e88 <_ZNSt5arrayIhLj15EE5beginEv>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	1c9c      	adds	r4, r3, #2
 8002de0:	f107 030c 	add.w	r3, r7, #12
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 f874 	bl	8002ed2 <_ZNSt5arrayIhLj15EE3endEv>
 8002dea:	4603      	mov	r3, r0
 8002dec:	462a      	mov	r2, r5
 8002dee:	4619      	mov	r1, r3
 8002df0:	4620      	mov	r0, r4
 8002df2:	f000 f87c 	bl	8002eee <_ZSt6all_ofIPhZN9SerialCtn19processReceivedDataEvEUlhE_EbT_S3_T0_>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

		if(!data.analyze.stop)
 8002dfc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002e00:	f083 0301 	eor.w	r3, r3, #1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d02c      	beq.n	8002e64 <_ZN9SerialCtn19processReceivedDataEv+0x170>
		{
			data.analyze.fft = dataReceived[2];
 8002e0a:	f107 030c 	add.w	r3, r7, #12
 8002e0e:	2102      	movs	r1, #2
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fed9 	bl	8002bc8 <_ZNSt5arrayIhLj15EEixEj>
 8002e16:	4603      	mov	r3, r0
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	bf14      	ite	ne
 8002e1e:	2301      	movne	r3, #1
 8002e20:	2300      	moveq	r3, #0
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			data.analyze.filter = dataReceived[3];
 8002e28:	f107 030c 	add.w	r3, r7, #12
 8002e2c:	2103      	movs	r1, #3
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff feca 	bl	8002bc8 <_ZNSt5arrayIhLj15EEixEj>
 8002e34:	4603      	mov	r3, r0
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf14      	ite	ne
 8002e3c:	2301      	movne	r3, #1
 8002e3e:	2300      	moveq	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8002e46:	e00d      	b.n	8002e64 <_ZN9SerialCtn19processReceivedDataEv+0x170>
		}
	}
	else // Invalid command
	{
		printf("DEV_ERROR: Invalide command was received");
 8002e48:	480e      	ldr	r0, [pc, #56]	@ (8002e84 <_ZN9SerialCtn19processReceivedDataEv+0x190>)
 8002e4a:	f016 fa03 	bl	8019254 <iprintf>
		return {};
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	741a      	strb	r2, [r3, #16]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	705a      	strb	r2, [r3, #1]
 8002e62:	e00a      	b.n	8002e7a <_ZN9SerialCtn19processReceivedDataEv+0x186>
	}

	return data;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	461d      	mov	r5, r3
 8002e68:	f107 041c 	add.w	r4, r7, #28
 8002e6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e6e:	6028      	str	r0, [r5, #0]
 8002e70:	6069      	str	r1, [r5, #4]
 8002e72:	60aa      	str	r2, [r5, #8]
 8002e74:	60eb      	str	r3, [r5, #12]
 8002e76:	7823      	ldrb	r3, [r4, #0]
 8002e78:	742b      	strb	r3, [r5, #16]
}
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	3730      	adds	r7, #48	@ 0x30
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bdb0      	pop	{r4, r5, r7, pc}
 8002e82:	bf00      	nop
 8002e84:	0801a440 	.word	0x0801a440

08002e88 <_ZNSt5arrayIhLj15EE5beginEv>:
      begin() noexcept
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	60fb      	str	r3, [r7, #12]
      { return static_cast<pointer>(_M_elems); }
 8002e94:	68fb      	ldr	r3, [r7, #12]
      { return iterator(data()); }
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8002ea2:	b590      	push	{r4, r7, lr}
 8002ea4:	b085      	sub	sp, #20
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f833 	bl	8002f1a <_ZSt12__miter_baseIPhET_S1_>
 8002eb4:	4604      	mov	r4, r0
 8002eb6:	68b8      	ldr	r0, [r7, #8]
 8002eb8:	f000 f82f 	bl	8002f1a <_ZSt12__miter_baseIPhET_S1_>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	f000 f834 	bl	8002f30 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 8002ec8:	4603      	mov	r3, r0
    }
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd90      	pop	{r4, r7, pc}

08002ed2 <_ZNSt5arrayIhLj15EE3endEv>:
      end() noexcept
 8002ed2:	b480      	push	{r7}
 8002ed4:	b085      	sub	sp, #20
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	60fb      	str	r3, [r7, #12]
      { return static_cast<pointer>(_M_elems); }
 8002ede:	68fb      	ldr	r3, [r7, #12]
      { return iterator(data() + _Nm); }
 8002ee0:	330f      	adds	r3, #15
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <_ZSt6all_ofIPhZN9SerialCtn19processReceivedDataEvEUlhE_EbT_S3_T0_>:
   *  @p [__first,__last), and false otherwise.
  */
  template<typename _InputIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline bool
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	713a      	strb	r2, [r7, #4]
    { return __last == std::find_if_not(__first, __last, __pred); }
 8002efa:	461a      	mov	r2, r3
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f839 	bl	8002f76 <_ZSt11find_if_notIPhZN9SerialCtn19processReceivedDataEvEUlhE_ET_S3_S3_T0_>
 8002f04:	4602      	mov	r2, r0
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	bf0c      	ite	eq
 8002f0c:	2301      	moveq	r3, #1
 8002f0e:	2300      	movne	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <_ZSt12__miter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002f30:	b5b0      	push	{r4, r5, r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 f82d 	bl	8002f9c <_ZSt12__niter_baseIPhET_S1_>
 8002f42:	4604      	mov	r4, r0
 8002f44:	68b8      	ldr	r0, [r7, #8]
 8002f46:	f000 f829 	bl	8002f9c <_ZSt12__niter_baseIPhET_S1_>
 8002f4a:	4605      	mov	r5, r0
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f824 	bl	8002f9c <_ZSt12__niter_baseIPhET_S1_>
 8002f54:	4603      	mov	r3, r0
 8002f56:	461a      	mov	r2, r3
 8002f58:	4629      	mov	r1, r5
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	f000 f829 	bl	8002fb2 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 8002f60:	4602      	mov	r2, r0
 8002f62:	1d3b      	adds	r3, r7, #4
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f833 	bl	8002fd2 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8002f6c:	4603      	mov	r3, r0
    }
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bdb0      	pop	{r4, r5, r7, pc}

08002f76 <_ZSt11find_if_notIPhZN9SerialCtn19processReceivedDataEvEUlhE_ET_S3_S3_T0_>:
   *  such that @p __pred(*i) is false, or @p __last if no such iterator exists.
  */
  template<typename _InputIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _InputIterator
    find_if_not(_InputIterator __first, _InputIterator __last,
 8002f76:	b590      	push	{r4, r7, lr}
 8002f78:	b085      	sub	sp, #20
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	713a      	strb	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
      __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
	      typename iterator_traits<_InputIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      return std::__find_if_not(__first, __last,
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 f831 	bl	8002fea <_ZN9__gnu_cxx5__ops11__pred_iterIZN9SerialCtn19processReceivedDataEvEUlhE_EENS0_10_Iter_predIT_EES5_>
 8002f88:	4622      	mov	r2, r4
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f83f 	bl	8003010 <_ZSt13__find_if_notIPhN9__gnu_cxx5__ops10_Iter_predIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_>
 8002f92:	4603      	mov	r3, r0
				__gnu_cxx::__ops::__pred_iter(__pred));
    }
 8002f94:	4618      	mov	r0, r3
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd90      	pop	{r4, r7, pc}

08002f9c <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f83a 	bl	800303c <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	6039      	str	r1, [r7, #0]
    { return __res; }
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <_ZN9__gnu_cxx5__ops11__pred_iterIZN9SerialCtn19processReceivedDataEvEUlhE_EENS0_10_Iter_predIT_EES5_>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
 8002fea:	b5b0      	push	{r4, r5, r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	7138      	strb	r0, [r7, #4]
    { return _Iter_pred<_Predicate>(_GLIBCXX_MOVE(__pred)); }
 8002ff2:	1d3b      	adds	r3, r7, #4
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 f83e 	bl	8003076 <_ZSt4moveIRZN9SerialCtn19processReceivedDataEvEUlhE_EONSt16remove_referenceIT_E4typeEOS4_>
 8002ffa:	f107 030c 	add.w	r3, r7, #12
 8002ffe:	4629      	mov	r1, r5
 8003000:	4618      	mov	r0, r3
 8003002:	f000 f843 	bl	800308c <_ZN9__gnu_cxx5__ops10_Iter_predIZN9SerialCtn19processReceivedDataEvEUlhE_EC1ES3_>
 8003006:	bf00      	nop
 8003008:	4620      	mov	r0, r4
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bdb0      	pop	{r4, r5, r7, pc}

08003010 <_ZSt13__find_if_notIPhN9__gnu_cxx5__ops10_Iter_predIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_>:
    __find_if_not(_InputIterator __first, _InputIterator __last,
 8003010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	713a      	strb	r2, [r7, #4]
      return std::__find_if(__first, __last,
 800301c:	68fc      	ldr	r4, [r7, #12]
 800301e:	7938      	ldrb	r0, [r7, #4]
 8003020:	f000 f842 	bl	80030a8 <_ZN9__gnu_cxx5__ops8__negateIZN9SerialCtn19processReceivedDataEvEUlhE_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS5_EE>
  template<typename _Iter>
    __attribute__((__always_inline__))
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8003024:	bf00      	nop
 8003026:	4633      	mov	r3, r6
 8003028:	462a      	mov	r2, r5
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	4620      	mov	r0, r4
 800302e:	f000 f84e 	bl	80030ce <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag>
 8003032:	4603      	mov	r3, r0
    }
 8003034:	4618      	mov	r0, r3
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800303c <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8003048:	f7ff fda7 	bl	8002b9a <_ZSt21is_constant_evaluatedv>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d006      	beq.n	8003060 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f8b8 	bl	80031cc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPhS3_EET0_T_S5_S4_>
 800305c:	4603      	mov	r3, r0
 800305e:	e006      	b.n	800306e <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	68b9      	ldr	r1, [r7, #8]
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f8d3 	bl	8003210 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_>
 800306a:	4603      	mov	r3, r0
 800306c:	bf00      	nop
    }
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <_ZSt4moveIRZN9SerialCtn19processReceivedDataEvEUlhE_EONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <_ZN9__gnu_cxx5__ops10_Iter_predIZN9SerialCtn19processReceivedDataEvEUlhE_EC1ES3_>:
      _Iter_pred(_Predicate __pred)
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 8003096:	463b      	mov	r3, r7
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff ffec 	bl	8003076 <_ZSt4moveIRZN9SerialCtn19processReceivedDataEvEUlhE_EONSt16remove_referenceIT_E4typeEOS4_>
      { }
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <_ZN9__gnu_cxx5__ops8__negateIZN9SerialCtn19processReceivedDataEvEUlhE_EENS0_12_Iter_negateIT_EENS0_10_Iter_predIS5_EE>:
    };

  template<typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
 80030a8:	b5b0      	push	{r4, r5, r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	7138      	strb	r0, [r7, #4]
    { return _Iter_negate<_Predicate>(_GLIBCXX_MOVE(__pred._M_pred)); }
 80030b0:	1d3b      	adds	r3, r7, #4
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff ffdf 	bl	8003076 <_ZSt4moveIRZN9SerialCtn19processReceivedDataEvEUlhE_EONSt16remove_referenceIT_E4typeEOS4_>
 80030b8:	f107 030c 	add.w	r3, r7, #12
 80030bc:	4629      	mov	r1, r5
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 f8cd 	bl	800325e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EC1ES3_>
 80030c4:	bf00      	nop
 80030c6:	4620      	mov	r0, r4
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bdb0      	pop	{r4, r5, r7, pc}

080030ce <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag>:

  /// This is an overload used by find algos for the RAI case.
  template<typename _RandomAccessIterator, typename _Predicate>
    _GLIBCXX20_CONSTEXPR
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b086      	sub	sp, #24
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	713a      	strb	r2, [r7, #4]
 80030da:	703b      	strb	r3, [r7, #0]
	      _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
	__trip_count = (__last - __first) >> 2;
 80030dc:	68ba      	ldr	r2, [r7, #8]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	109b      	asrs	r3, r3, #2
 80030e4:	617b      	str	r3, [r7, #20]

      for (; __trip_count > 0; --__trip_count)
 80030e6:	e036      	b.n	8003156 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag+0x88>
	{
	  if (__pred(__first))
 80030e8:	1d3b      	adds	r3, r7, #4
 80030ea:	68f9      	ldr	r1, [r7, #12]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 f8c4 	bl	800327a <_ZN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EclIPhEEbT_>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag+0x2e>
	    return __first;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	e063      	b.n	80031c4 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	3301      	adds	r3, #1
 8003100:	60fb      	str	r3, [r7, #12]

	  if (__pred(__first))
 8003102:	1d3b      	adds	r3, r7, #4
 8003104:	68f9      	ldr	r1, [r7, #12]
 8003106:	4618      	mov	r0, r3
 8003108:	f000 f8b7 	bl	800327a <_ZN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EclIPhEEbT_>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag+0x48>
	    return __first;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	e056      	b.n	80031c4 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3301      	adds	r3, #1
 800311a:	60fb      	str	r3, [r7, #12]

	  if (__pred(__first))
 800311c:	1d3b      	adds	r3, r7, #4
 800311e:	68f9      	ldr	r1, [r7, #12]
 8003120:	4618      	mov	r0, r3
 8003122:	f000 f8aa 	bl	800327a <_ZN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EclIPhEEbT_>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag+0x62>
	    return __first;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	e049      	b.n	80031c4 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	3301      	adds	r3, #1
 8003134:	60fb      	str	r3, [r7, #12]

	  if (__pred(__first))
 8003136:	1d3b      	adds	r3, r7, #4
 8003138:	68f9      	ldr	r1, [r7, #12]
 800313a:	4618      	mov	r0, r3
 800313c:	f000 f89d 	bl	800327a <_ZN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EclIPhEEbT_>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag+0x7c>
	    return __first;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	e03c      	b.n	80031c4 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	3301      	adds	r3, #1
 800314e:	60fb      	str	r3, [r7, #12]
      for (; __trip_count > 0; --__trip_count)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	3b01      	subs	r3, #1
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2b00      	cmp	r3, #0
 800315a:	dcc5      	bgt.n	80030e8 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag+0x1a>
	}

      switch (__last - __first)
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b03      	cmp	r3, #3
 8003164:	d006      	beq.n	8003174 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag+0xa6>
 8003166:	2b03      	cmp	r3, #3
 8003168:	dc2b      	bgt.n	80031c2 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag+0xf4>
 800316a:	2b01      	cmp	r3, #1
 800316c:	d01c      	beq.n	80031a8 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag+0xda>
 800316e:	2b02      	cmp	r3, #2
 8003170:	d00d      	beq.n	800318e <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag+0xc0>
 8003172:	e026      	b.n	80031c2 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag+0xf4>
	{
	case 3:
	  if (__pred(__first))
 8003174:	1d3b      	adds	r3, r7, #4
 8003176:	68f9      	ldr	r1, [r7, #12]
 8003178:	4618      	mov	r0, r3
 800317a:	f000 f87e 	bl	800327a <_ZN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EclIPhEEbT_>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag+0xba>
	    return __first;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	e01d      	b.n	80031c4 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	3301      	adds	r3, #1
 800318c:	60fb      	str	r3, [r7, #12]
	  // FALLTHRU
	case 2:
	  if (__pred(__first))
 800318e:	1d3b      	adds	r3, r7, #4
 8003190:	68f9      	ldr	r1, [r7, #12]
 8003192:	4618      	mov	r0, r3
 8003194:	f000 f871 	bl	800327a <_ZN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EclIPhEEbT_>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag+0xd4>
	    return __first;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	e010      	b.n	80031c4 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3301      	adds	r3, #1
 80031a6:	60fb      	str	r3, [r7, #12]
	  // FALLTHRU
	case 1:
	  if (__pred(__first))
 80031a8:	1d3b      	adds	r3, r7, #4
 80031aa:	68f9      	ldr	r1, [r7, #12]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 f864 	bl	800327a <_ZN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EclIPhEEbT_>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag+0xee>
	    return __first;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	e003      	b.n	80031c4 <_ZSt9__find_ifIPhN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EEET_S7_S7_T0_St26random_access_iterator_tag+0xf6>
	  ++__first;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	3301      	adds	r3, #1
 80031c0:	60fb      	str	r3, [r7, #12]
	  // FALLTHRU
	case 0:
	default:
	  return __last;
 80031c2:	68bb      	ldr	r3, [r7, #8]
	}
    }
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPhS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	e00c      	b.n	80031fc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPhS3_EET0_T_S5_S4_+0x30>
	      *__result = *__first;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	781a      	ldrb	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	701a      	strb	r2, [r3, #0]
	      ++__first;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3301      	adds	r3, #1
 80031ee:	60fb      	str	r3, [r7, #12]
	      ++__result;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3301      	adds	r3, #1
 80031f4:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	dcef      	bgt.n	80031e2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPhS3_EET0_T_S5_S4_+0x16>
	  return __result;
 8003202:	687b      	ldr	r3, [r7, #4]
	}
 8003204:	4618      	mov	r0, r3
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_>:
	__copy_m(_Tp* __first, _Tp* __last, _Up* __result)
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	617b      	str	r3, [r7, #20]
	  if (__builtin_expect(_Num > 1, true))
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2b01      	cmp	r3, #1
 8003228:	bfcc      	ite	gt
 800322a:	2301      	movgt	r3, #1
 800322c:	2300      	movle	r3, #0
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	d006      	beq.n	8003242 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_+0x32>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	461a      	mov	r2, r3
 8003238:	68f9      	ldr	r1, [r7, #12]
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f016 f988 	bl	8019550 <memmove>
 8003240:	e006      	b.n	8003250 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_+0x40>
	  else if (_Num == 1)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d103      	bne.n	8003250 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_+0x40>
	      __assign_one(__result, __first);
 8003248:	68f9      	ldr	r1, [r7, #12]
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f829 	bl	80032a2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE12__assign_oneIhhEEvPT_PT0_>
	  return __result + _Num;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	4413      	add	r3, r2
	}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <_ZN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EC1ES3_>:
      _Iter_negate(_Predicate __pred)
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	7039      	strb	r1, [r7, #0]
	: _M_pred(_GLIBCXX_MOVE(__pred))
 8003268:	463b      	mov	r3, r7
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff ff03 	bl	8003076 <_ZSt4moveIRZN9SerialCtn19processReceivedDataEvEUlhE_EONSt16remove_referenceIT_E4typeEOS4_>
      { }
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <_ZN9__gnu_cxx5__ops12_Iter_negateIZN9SerialCtn19processReceivedDataEvEUlhE_EclIPhEEbT_>:
	operator()(_Iterator __it)
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	6039      	str	r1, [r7, #0]
	{ return !bool(_M_pred(*__it)); }
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	4619      	mov	r1, r3
 800328c:	4610      	mov	r0, r2
 800328e:	f7ff fd1f 	bl	8002cd0 <_ZZN9SerialCtn19processReceivedDataEvENKUlhE_clEh>
 8003292:	4603      	mov	r3, r0
 8003294:	f083 0301 	eor.w	r3, r3, #1
 8003298:	b2db      	uxtb	r3, r3
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE12__assign_oneIhhEEvPT_PT0_>:
	__assign_one(_Tp* __to, _Up* __from)
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	6039      	str	r1, [r7, #0]
	{ *__to = *__from; }
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	781a      	ldrb	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	701a      	strb	r2, [r3, #0]
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c6:	2003      	movs	r0, #3
 80032c8:	f002 fcaa 	bl	8005c20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032cc:	f00a f874 	bl	800d3b8 <HAL_RCC_GetSysClockFreq>
 80032d0:	4602      	mov	r2, r0
 80032d2:	4b15      	ldr	r3, [pc, #84]	@ (8003328 <HAL_Init+0x68>)
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	0a1b      	lsrs	r3, r3, #8
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	4913      	ldr	r1, [pc, #76]	@ (800332c <HAL_Init+0x6c>)
 80032de:	5ccb      	ldrb	r3, [r1, r3]
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	fa22 f303 	lsr.w	r3, r2, r3
 80032e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003328 <HAL_Init+0x68>)
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	4a0e      	ldr	r2, [pc, #56]	@ (800332c <HAL_Init+0x6c>)
 80032f4:	5cd3      	ldrb	r3, [r2, r3]
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003300:	4a0b      	ldr	r2, [pc, #44]	@ (8003330 <HAL_Init+0x70>)
 8003302:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003304:	4a0b      	ldr	r2, [pc, #44]	@ (8003334 <HAL_Init+0x74>)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800330a:	2000      	movs	r0, #0
 800330c:	f000 f814 	bl	8003338 <HAL_InitTick>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e002      	b.n	8003320 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800331a:	f7fe f911 	bl	8001540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	58024400 	.word	0x58024400
 800332c:	0801a4b4 	.word	0x0801a4b4
 8003330:	24000004 	.word	0x24000004
 8003334:	24000000 	.word	0x24000000

08003338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003340:	4b15      	ldr	r3, [pc, #84]	@ (8003398 <HAL_InitTick+0x60>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e021      	b.n	8003390 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800334c:	4b13      	ldr	r3, [pc, #76]	@ (800339c <HAL_InitTick+0x64>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4b11      	ldr	r3, [pc, #68]	@ (8003398 <HAL_InitTick+0x60>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	4619      	mov	r1, r3
 8003356:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800335a:	fbb3 f3f1 	udiv	r3, r3, r1
 800335e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003362:	4618      	mov	r0, r3
 8003364:	f002 fc8f 	bl	8005c86 <HAL_SYSTICK_Config>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e00e      	b.n	8003390 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b0f      	cmp	r3, #15
 8003376:	d80a      	bhi.n	800338e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003378:	2200      	movs	r2, #0
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	f04f 30ff 	mov.w	r0, #4294967295
 8003380:	f002 fc59 	bl	8005c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003384:	4a06      	ldr	r2, [pc, #24]	@ (80033a0 <HAL_InitTick+0x68>)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	e000      	b.n	8003390 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
}
 8003390:	4618      	mov	r0, r3
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	2400000c 	.word	0x2400000c
 800339c:	24000000 	.word	0x24000000
 80033a0:	24000008 	.word	0x24000008

080033a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033a8:	4b06      	ldr	r3, [pc, #24]	@ (80033c4 <HAL_IncTick+0x20>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	4b06      	ldr	r3, [pc, #24]	@ (80033c8 <HAL_IncTick+0x24>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4413      	add	r3, r2
 80033b4:	4a04      	ldr	r2, [pc, #16]	@ (80033c8 <HAL_IncTick+0x24>)
 80033b6:	6013      	str	r3, [r2, #0]
}
 80033b8:	bf00      	nop
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	2400000c 	.word	0x2400000c
 80033c8:	24002d38 	.word	0x24002d38

080033cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return uwTick;
 80033d0:	4b03      	ldr	r3, [pc, #12]	@ (80033e0 <HAL_GetTick+0x14>)
 80033d2:	681b      	ldr	r3, [r3, #0]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	24002d38 	.word	0x24002d38

080033e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033ec:	f7ff ffee 	bl	80033cc <HAL_GetTick>
 80033f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fc:	d005      	beq.n	800340a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003428 <HAL_Delay+0x44>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4413      	add	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800340a:	bf00      	nop
 800340c:	f7ff ffde 	bl	80033cc <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	429a      	cmp	r2, r3
 800341a:	d8f7      	bhi.n	800340c <HAL_Delay+0x28>
  {
  }
}
 800341c:	bf00      	nop
 800341e:	bf00      	nop
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	2400000c 	.word	0x2400000c

0800342c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	609a      	str	r2, [r3, #8]
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	609a      	str	r2, [r3, #8]
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003488:	4618      	mov	r0, r3
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a18      	ldr	r2, [pc, #96]	@ (8003504 <LL_ADC_SetChannelPreselection+0x70>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d027      	beq.n	80034f6 <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d107      	bne.n	80034c0 <LL_ADC_SetChannelPreselection+0x2c>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	0e9b      	lsrs	r3, r3, #26
 80034b4:	f003 031f 	and.w	r3, r3, #31
 80034b8:	2201      	movs	r2, #1
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	e015      	b.n	80034ec <LL_ADC_SetChannelPreselection+0x58>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	fa93 f3a3 	rbit	r3, r3
 80034ca:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 80034d6:	2320      	movs	r3, #32
 80034d8:	e003      	b.n	80034e2 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	fab3 f383 	clz	r3, r3
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	2201      	movs	r2, #1
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	69d2      	ldr	r2, [r2, #28]
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 80034f6:	bf00      	nop
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	58026000 	.word	0x58026000

08003508 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	3360      	adds	r3, #96	@ 0x60
 800351a:	461a      	mov	r2, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4a10      	ldr	r2, [pc, #64]	@ (8003568 <LL_ADC_SetOffset+0x60>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d10b      	bne.n	8003544 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	4313      	orrs	r3, r2
 800353a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003542:	e00b      	b.n	800355c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	430b      	orrs	r3, r1
 8003556:	431a      	orrs	r2, r3
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	601a      	str	r2, [r3, #0]
}
 800355c:	bf00      	nop
 800355e:	371c      	adds	r7, #28
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	58026000 	.word	0x58026000

0800356c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3360      	adds	r3, #96	@ 0x60
 800357a:	461a      	mov	r2, r3
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f003 031f 	and.w	r3, r3, #31
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	fa01 f303 	lsl.w	r3, r1, r3
 80035b8:	431a      	orrs	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	611a      	str	r2, [r3, #16]
}
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
	...

080035cc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4a0c      	ldr	r2, [pc, #48]	@ (800360c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00e      	beq.n	80035fe <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	3360      	adds	r3, #96	@ 0x60
 80035e4:	461a      	mov	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	601a      	str	r2, [r3, #0]
  }
}
 80035fe:	bf00      	nop
 8003600:	371c      	adds	r7, #28
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	58026000 	.word	0x58026000

08003610 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4a0c      	ldr	r2, [pc, #48]	@ (8003650 <LL_ADC_SetOffsetSaturation+0x40>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d10e      	bne.n	8003642 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	3360      	adds	r3, #96	@ 0x60
 8003628:	461a      	mov	r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	431a      	orrs	r2, r3
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003642:	bf00      	nop
 8003644:	371c      	adds	r7, #28
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	58026000 	.word	0x58026000

08003654 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4a0c      	ldr	r2, [pc, #48]	@ (8003694 <LL_ADC_SetOffsetSign+0x40>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d10e      	bne.n	8003686 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	3360      	adds	r3, #96	@ 0x60
 800366c:	461a      	mov	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	431a      	orrs	r2, r3
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	58026000 	.word	0x58026000

08003698 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3360      	adds	r3, #96	@ 0x60
 80036a8:	461a      	mov	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4a0c      	ldr	r2, [pc, #48]	@ (80036e8 <LL_ADC_SetOffsetState+0x50>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d108      	bne.n	80036cc <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	431a      	orrs	r2, r3
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80036ca:	e007      	b.n	80036dc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	601a      	str	r2, [r3, #0]
}
 80036dc:	bf00      	nop
 80036de:	371c      	adds	r7, #28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	58026000 	.word	0x58026000

080036ec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003712:	b480      	push	{r7}
 8003714:	b087      	sub	sp, #28
 8003716:	af00      	add	r7, sp, #0
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3330      	adds	r3, #48	@ 0x30
 8003722:	461a      	mov	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	0a1b      	lsrs	r3, r3, #8
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	f003 030c 	and.w	r3, r3, #12
 800372e:	4413      	add	r3, r2
 8003730:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	211f      	movs	r1, #31
 800373e:	fa01 f303 	lsl.w	r3, r1, r3
 8003742:	43db      	mvns	r3, r3
 8003744:	401a      	ands	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	0e9b      	lsrs	r3, r3, #26
 800374a:	f003 011f 	and.w	r1, r3, #31
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	fa01 f303 	lsl.w	r3, r1, r3
 8003758:	431a      	orrs	r2, r3
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f023 0203 	bic.w	r2, r3, #3
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	60da      	str	r2, [r3, #12]
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f043 0201 	orr.w	r2, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	60da      	str	r2, [r3, #12]
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a08      	ldr	r2, [pc, #32]	@ (80037e0 <LL_ADC_REG_SetDMATransferMode+0x30>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d107      	bne.n	80037d2 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f023 0203 	bic.w	r2, r3, #3
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	60da      	str	r2, [r3, #12]
  }
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	58026000 	.word	0x58026000

080037e4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f0:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800380a:	b480      	push	{r7}
 800380c:	b087      	sub	sp, #28
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	3314      	adds	r3, #20
 800381a:	461a      	mov	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	0e5b      	lsrs	r3, r3, #25
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	4413      	add	r3, r2
 8003828:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	0d1b      	lsrs	r3, r3, #20
 8003832:	f003 031f 	and.w	r3, r3, #31
 8003836:	2107      	movs	r1, #7
 8003838:	fa01 f303 	lsl.w	r3, r1, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	401a      	ands	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	0d1b      	lsrs	r3, r3, #20
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	fa01 f303 	lsl.w	r3, r1, r3
 800384e:	431a      	orrs	r2, r3
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003854:	bf00      	nop
 8003856:	371c      	adds	r7, #28
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4a1a      	ldr	r2, [pc, #104]	@ (80038d8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d115      	bne.n	80038a0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003880:	43db      	mvns	r3, r3
 8003882:	401a      	ands	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f003 0318 	and.w	r3, r3, #24
 800388a:	4914      	ldr	r1, [pc, #80]	@ (80038dc <LL_ADC_SetChannelSingleDiff+0x7c>)
 800388c:	40d9      	lsrs	r1, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	400b      	ands	r3, r1
 8003892:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003896:	431a      	orrs	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800389e:	e014      	b.n	80038ca <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038ac:	43db      	mvns	r3, r3
 80038ae:	401a      	ands	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f003 0318 	and.w	r3, r3, #24
 80038b6:	4909      	ldr	r1, [pc, #36]	@ (80038dc <LL_ADC_SetChannelSingleDiff+0x7c>)
 80038b8:	40d9      	lsrs	r1, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	400b      	ands	r3, r1
 80038be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038c2:	431a      	orrs	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80038ca:	bf00      	nop
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	58026000 	.word	0x58026000
 80038dc:	000fffff 	.word	0x000fffff

080038e0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 031f 	and.w	r3, r3, #31
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	4b04      	ldr	r3, [pc, #16]	@ (8003938 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003926:	4013      	ands	r3, r2
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6093      	str	r3, [r2, #8]
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	5fffffc0 	.word	0x5fffffc0

0800393c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800394c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003950:	d101      	bne.n	8003956 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	4b05      	ldr	r3, [pc, #20]	@ (8003988 <LL_ADC_EnableInternalRegulator+0x24>)
 8003972:	4013      	ands	r3, r2
 8003974:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	6fffffc0 	.word	0x6fffffc0

0800398c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800399c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039a0:	d101      	bne.n	80039a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	4b05      	ldr	r3, [pc, #20]	@ (80039d8 <LL_ADC_Enable+0x24>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	f043 0201 	orr.w	r2, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	7fffffc0 	.word	0x7fffffc0

080039dc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	4b05      	ldr	r3, [pc, #20]	@ (8003a00 <LL_ADC_Disable+0x24>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	f043 0202 	orr.w	r2, r3, #2
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	7fffffc0 	.word	0x7fffffc0

08003a04 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <LL_ADC_IsEnabled+0x18>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <LL_ADC_IsEnabled+0x1a>
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d101      	bne.n	8003a42 <LL_ADC_IsDisableOngoing+0x18>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <LL_ADC_IsDisableOngoing+0x1a>
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	4b05      	ldr	r3, [pc, #20]	@ (8003a74 <LL_ADC_REG_StartConversion+0x24>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	f043 0204 	orr.w	r2, r3, #4
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	7fffffc0 	.word	0x7fffffc0

08003a78 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	4b05      	ldr	r3, [pc, #20]	@ (8003a9c <LL_ADC_REG_StopConversion+0x24>)
 8003a86:	4013      	ands	r3, r2
 8003a88:	f043 0210 	orr.w	r2, r3, #16
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	7fffffc0 	.word	0x7fffffc0

08003aa0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d101      	bne.n	8003ab8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
	...

08003ac8 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	4b05      	ldr	r3, [pc, #20]	@ (8003aec <LL_ADC_INJ_StopConversion+0x24>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	f043 0220 	orr.w	r2, r3, #32
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	7fffffc0 	.word	0x7fffffc0

08003af0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d101      	bne.n	8003b08 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
	...

08003b18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b18:	b590      	push	{r4, r7, lr}
 8003b1a:	b089      	sub	sp, #36	@ 0x24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003b24:	2300      	movs	r3, #0
 8003b26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e1ee      	b.n	8003f10 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d109      	bne.n	8003b54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7fc fead 	bl	80008a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff feef 	bl	800393c <LL_ADC_IsDeepPowerDownEnabled>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d004      	beq.n	8003b6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff fed5 	bl	8003918 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff ff0a 	bl	800398c <LL_ADC_IsInternalRegulatorEnabled>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d114      	bne.n	8003ba8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff feee 	bl	8003964 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b88:	4b8e      	ldr	r3, [pc, #568]	@ (8003dc4 <HAL_ADC_Init+0x2ac>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	099b      	lsrs	r3, r3, #6
 8003b8e:	4a8e      	ldr	r2, [pc, #568]	@ (8003dc8 <HAL_ADC_Init+0x2b0>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	099b      	lsrs	r3, r3, #6
 8003b96:	3301      	adds	r3, #1
 8003b98:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b9a:	e002      	b.n	8003ba2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f9      	bne.n	8003b9c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff feed 	bl	800398c <LL_ADC_IsInternalRegulatorEnabled>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10d      	bne.n	8003bd4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bbc:	f043 0210 	orr.w	r2, r3, #16
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bc8:	f043 0201 	orr.w	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff ff61 	bl	8003aa0 <LL_ADC_REG_IsConversionOngoing>
 8003bde:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f040 8188 	bne.w	8003efe <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f040 8184 	bne.w	8003efe <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bfa:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003bfe:	f043 0202 	orr.w	r2, r3, #2
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff fefa 	bl	8003a04 <LL_ADC_IsEnabled>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d136      	bne.n	8003c84 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a6c      	ldr	r2, [pc, #432]	@ (8003dcc <HAL_ADC_Init+0x2b4>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d004      	beq.n	8003c2a <HAL_ADC_Init+0x112>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a6a      	ldr	r2, [pc, #424]	@ (8003dd0 <HAL_ADC_Init+0x2b8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d10e      	bne.n	8003c48 <HAL_ADC_Init+0x130>
 8003c2a:	4868      	ldr	r0, [pc, #416]	@ (8003dcc <HAL_ADC_Init+0x2b4>)
 8003c2c:	f7ff feea 	bl	8003a04 <LL_ADC_IsEnabled>
 8003c30:	4604      	mov	r4, r0
 8003c32:	4867      	ldr	r0, [pc, #412]	@ (8003dd0 <HAL_ADC_Init+0x2b8>)
 8003c34:	f7ff fee6 	bl	8003a04 <LL_ADC_IsEnabled>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	4323      	orrs	r3, r4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	bf0c      	ite	eq
 8003c40:	2301      	moveq	r3, #1
 8003c42:	2300      	movne	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	e008      	b.n	8003c5a <HAL_ADC_Init+0x142>
 8003c48:	4862      	ldr	r0, [pc, #392]	@ (8003dd4 <HAL_ADC_Init+0x2bc>)
 8003c4a:	f7ff fedb 	bl	8003a04 <LL_ADC_IsEnabled>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	bf0c      	ite	eq
 8003c54:	2301      	moveq	r3, #1
 8003c56:	2300      	movne	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d012      	beq.n	8003c84 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a5a      	ldr	r2, [pc, #360]	@ (8003dcc <HAL_ADC_Init+0x2b4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d004      	beq.n	8003c72 <HAL_ADC_Init+0x15a>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a58      	ldr	r2, [pc, #352]	@ (8003dd0 <HAL_ADC_Init+0x2b8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_Init+0x15e>
 8003c72:	4a59      	ldr	r2, [pc, #356]	@ (8003dd8 <HAL_ADC_Init+0x2c0>)
 8003c74:	e000      	b.n	8003c78 <HAL_ADC_Init+0x160>
 8003c76:	4a59      	ldr	r2, [pc, #356]	@ (8003ddc <HAL_ADC_Init+0x2c4>)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4610      	mov	r0, r2
 8003c80:	f7ff fbd4 	bl	800342c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a52      	ldr	r2, [pc, #328]	@ (8003dd4 <HAL_ADC_Init+0x2bc>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d129      	bne.n	8003ce2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	7e5b      	ldrb	r3, [r3, #25]
 8003c92:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003c98:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003c9e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d013      	beq.n	8003cd0 <HAL_ADC_Init+0x1b8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b0c      	cmp	r3, #12
 8003cae:	d00d      	beq.n	8003ccc <HAL_ADC_Init+0x1b4>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b1c      	cmp	r3, #28
 8003cb6:	d007      	beq.n	8003cc8 <HAL_ADC_Init+0x1b0>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b18      	cmp	r3, #24
 8003cbe:	d101      	bne.n	8003cc4 <HAL_ADC_Init+0x1ac>
 8003cc0:	2318      	movs	r3, #24
 8003cc2:	e006      	b.n	8003cd2 <HAL_ADC_Init+0x1ba>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e004      	b.n	8003cd2 <HAL_ADC_Init+0x1ba>
 8003cc8:	2310      	movs	r3, #16
 8003cca:	e002      	b.n	8003cd2 <HAL_ADC_Init+0x1ba>
 8003ccc:	2308      	movs	r3, #8
 8003cce:	e000      	b.n	8003cd2 <HAL_ADC_Init+0x1ba>
 8003cd0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003cd2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cda:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
 8003ce0:	e00e      	b.n	8003d00 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	7e5b      	ldrb	r3, [r3, #25]
 8003ce6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cec:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003cf2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cfa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d106      	bne.n	8003d18 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	045b      	lsls	r3, r3, #17
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d009      	beq.n	8003d34 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d24:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a26      	ldr	r2, [pc, #152]	@ (8003dd4 <HAL_ADC_Init+0x2bc>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d115      	bne.n	8003d6a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	4b26      	ldr	r3, [pc, #152]	@ (8003de0 <HAL_ADC_Init+0x2c8>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	69b9      	ldr	r1, [r7, #24]
 8003d4e:	430b      	orrs	r3, r1
 8003d50:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	611a      	str	r2, [r3, #16]
 8003d68:	e009      	b.n	8003d7e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	4b1c      	ldr	r3, [pc, #112]	@ (8003de4 <HAL_ADC_Init+0x2cc>)
 8003d72:	4013      	ands	r3, r2
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	69b9      	ldr	r1, [r7, #24]
 8003d7a:	430b      	orrs	r3, r1
 8003d7c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff fe8c 	bl	8003aa0 <LL_ADC_REG_IsConversionOngoing>
 8003d88:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff feae 	bl	8003af0 <LL_ADC_INJ_IsConversionOngoing>
 8003d94:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f040 808e 	bne.w	8003eba <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f040 808a 	bne.w	8003eba <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd4 <HAL_ADC_Init+0x2bc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d11b      	bne.n	8003de8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	7e1b      	ldrb	r3, [r3, #24]
 8003db4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003dbc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	e018      	b.n	8003df6 <HAL_ADC_Init+0x2de>
 8003dc4:	24000000 	.word	0x24000000
 8003dc8:	053e2d63 	.word	0x053e2d63
 8003dcc:	40022000 	.word	0x40022000
 8003dd0:	40022100 	.word	0x40022100
 8003dd4:	58026000 	.word	0x58026000
 8003dd8:	40022300 	.word	0x40022300
 8003ddc:	58026300 	.word	0x58026300
 8003de0:	fff04007 	.word	0xfff04007
 8003de4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	7e1b      	ldrb	r3, [r3, #24]
 8003dec:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	4b46      	ldr	r3, [pc, #280]	@ (8003f18 <HAL_ADC_Init+0x400>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6812      	ldr	r2, [r2, #0]
 8003e04:	69b9      	ldr	r1, [r7, #24]
 8003e06:	430b      	orrs	r3, r1
 8003e08:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d137      	bne.n	8003e84 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e18:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a3f      	ldr	r2, [pc, #252]	@ (8003f1c <HAL_ADC_Init+0x404>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d116      	bne.n	8003e52 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f20 <HAL_ADC_Init+0x408>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003e36:	4311      	orrs	r1, r2
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e3c:	4311      	orrs	r1, r2
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003e42:	430a      	orrs	r2, r1
 8003e44:	431a      	orrs	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	611a      	str	r2, [r3, #16]
 8003e50:	e020      	b.n	8003e94 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	4b32      	ldr	r3, [pc, #200]	@ (8003f24 <HAL_ADC_Init+0x40c>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e60:	3a01      	subs	r2, #1
 8003e62:	0411      	lsls	r1, r2, #16
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003e68:	4311      	orrs	r1, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e6e:	4311      	orrs	r1, r2
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003e74:	430a      	orrs	r2, r1
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0201 	orr.w	r2, r2, #1
 8003e80:	611a      	str	r2, [r3, #16]
 8003e82:	e007      	b.n	8003e94 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0201 	bic.w	r2, r2, #1
 8003e92:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1b      	ldr	r2, [pc, #108]	@ (8003f1c <HAL_ADC_Init+0x404>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d002      	beq.n	8003eba <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f001 fae5 	bl	8005484 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d10c      	bne.n	8003edc <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec8:	f023 010f 	bic.w	r1, r3, #15
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	1e5a      	subs	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	631a      	str	r2, [r3, #48]	@ 0x30
 8003eda:	e007      	b.n	8003eec <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 020f 	bic.w	r2, r2, #15
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ef0:	f023 0303 	bic.w	r3, r3, #3
 8003ef4:	f043 0201 	orr.w	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	661a      	str	r2, [r3, #96]	@ 0x60
 8003efc:	e007      	b.n	8003f0e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f02:	f043 0210 	orr.w	r2, r3, #16
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3724      	adds	r7, #36	@ 0x24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd90      	pop	{r4, r7, pc}
 8003f18:	ffffbffc 	.word	0xffffbffc
 8003f1c:	58026000 	.word	0x58026000
 8003f20:	fc00f81f 	.word	0xfc00f81f
 8003f24:	fc00f81e 	.word	0xfc00f81e

08003f28 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a60      	ldr	r2, [pc, #384]	@ (80040bc <HAL_ADC_Start_DMA+0x194>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d004      	beq.n	8003f48 <HAL_ADC_Start_DMA+0x20>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a5f      	ldr	r2, [pc, #380]	@ (80040c0 <HAL_ADC_Start_DMA+0x198>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d101      	bne.n	8003f4c <HAL_ADC_Start_DMA+0x24>
 8003f48:	4b5e      	ldr	r3, [pc, #376]	@ (80040c4 <HAL_ADC_Start_DMA+0x19c>)
 8003f4a:	e000      	b.n	8003f4e <HAL_ADC_Start_DMA+0x26>
 8003f4c:	4b5e      	ldr	r3, [pc, #376]	@ (80040c8 <HAL_ADC_Start_DMA+0x1a0>)
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff fcc6 	bl	80038e0 <LL_ADC_GetMultimode>
 8003f54:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff fda0 	bl	8003aa0 <LL_ADC_REG_IsConversionOngoing>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f040 80a2 	bne.w	80040ac <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_ADC_Start_DMA+0x4e>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e09d      	b.n	80040b2 <HAL_ADC_Start_DMA+0x18a>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d006      	beq.n	8003f92 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	2b05      	cmp	r3, #5
 8003f88:	d003      	beq.n	8003f92 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	2b09      	cmp	r3, #9
 8003f8e:	f040 8086 	bne.w	800409e <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f001 f8f8 	bl	8005188 <ADC_Enable>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003f9c:	7dfb      	ldrb	r3, [r7, #23]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d178      	bne.n	8004094 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003fa6:	4b49      	ldr	r3, [pc, #292]	@ (80040cc <HAL_ADC_Start_DMA+0x1a4>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a42      	ldr	r2, [pc, #264]	@ (80040c0 <HAL_ADC_Start_DMA+0x198>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d002      	beq.n	8003fc2 <HAL_ADC_Start_DMA+0x9a>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	e000      	b.n	8003fc4 <HAL_ADC_Start_DMA+0x9c>
 8003fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80040bc <HAL_ADC_Start_DMA+0x194>)
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d002      	beq.n	8003fd2 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d105      	bne.n	8003fde <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d006      	beq.n	8003ff8 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fee:	f023 0206 	bic.w	r2, r3, #6
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	665a      	str	r2, [r3, #100]	@ 0x64
 8003ff6:	e002      	b.n	8003ffe <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004002:	4a33      	ldr	r2, [pc, #204]	@ (80040d0 <HAL_ADC_Start_DMA+0x1a8>)
 8004004:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400a:	4a32      	ldr	r2, [pc, #200]	@ (80040d4 <HAL_ADC_Start_DMA+0x1ac>)
 800400c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004012:	4a31      	ldr	r2, [pc, #196]	@ (80040d8 <HAL_ADC_Start_DMA+0x1b0>)
 8004014:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	221c      	movs	r2, #28
 800401c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0210 	orr.w	r2, r2, #16
 8004034:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a28      	ldr	r2, [pc, #160]	@ (80040dc <HAL_ADC_Start_DMA+0x1b4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d10f      	bne.n	8004060 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	4619      	mov	r1, r3
 800404e:	4610      	mov	r0, r2
 8004050:	f7ff fbae 	bl	80037b0 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff fb99 	bl	8003790 <LL_ADC_EnableDMAReq>
 800405e:	e007      	b.n	8004070 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004068:	4619      	mov	r1, r3
 800406a:	4610      	mov	r0, r2
 800406c:	f7ff fb7d 	bl	800376a <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3340      	adds	r3, #64	@ 0x40
 800407a:	4619      	mov	r1, r3
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f002 fcae 	bl	80069e0 <HAL_DMA_Start_IT>
 8004084:	4603      	mov	r3, r0
 8004086:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff fcdf 	bl	8003a50 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004092:	e00d      	b.n	80040b0 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 800409c:	e008      	b.n	80040b0 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80040aa:	e001      	b.n	80040b0 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80040ac:	2302      	movs	r3, #2
 80040ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40022000 	.word	0x40022000
 80040c0:	40022100 	.word	0x40022100
 80040c4:	40022300 	.word	0x40022300
 80040c8:	58026300 	.word	0x58026300
 80040cc:	fffff0fe 	.word	0xfffff0fe
 80040d0:	0800535b 	.word	0x0800535b
 80040d4:	08005433 	.word	0x08005433
 80040d8:	0800544f 	.word	0x0800544f
 80040dc:	58026000 	.word	0x58026000

080040e0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_ADC_Stop_DMA+0x16>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e04f      	b.n	8004196 <HAL_ADC_Stop_DMA+0xb6>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80040fe:	2103      	movs	r1, #3
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 ff85 	bl	8005010 <ADC_ConversionStop>
 8004106:	4603      	mov	r3, r0
 8004108:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800410a:	7bfb      	ldrb	r3, [r7, #15]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d13d      	bne.n	800418c <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0203 	bic.w	r2, r2, #3
 800411e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004124:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d10f      	bne.n	800414e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004132:	4618      	mov	r0, r3
 8004134:	f002 febe 	bl	8006eb4 <HAL_DMA_Abort>
 8004138:	4603      	mov	r3, r0
 800413a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800413c:	7bfb      	ldrb	r3, [r7, #15]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d005      	beq.n	800414e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004146:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	661a      	str	r2, [r3, #96]	@ 0x60
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0210 	bic.w	r2, r2, #16
 800415c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800415e:	7bfb      	ldrb	r3, [r7, #15]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d105      	bne.n	8004170 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f001 f899 	bl	800529c <ADC_Disable>
 800416a:	4603      	mov	r3, r0
 800416c:	73fb      	strb	r3, [r7, #15]
 800416e:	e002      	b.n	8004176 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f001 f893 	bl	800529c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d107      	bne.n	800418c <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004180:	4b07      	ldr	r3, [pc, #28]	@ (80041a0 <HAL_ADC_Stop_DMA+0xc0>)
 8004182:	4013      	ands	r3, r2
 8004184:	f043 0201 	orr.w	r2, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004194:	7bfb      	ldrb	r3, [r7, #15]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	ffffeefe 	.word	0xffffeefe

080041a4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08a      	sub	sp, #40	@ 0x28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80041ac:	2300      	movs	r3, #0
 80041ae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a87      	ldr	r2, [pc, #540]	@ (80043e4 <HAL_ADC_IRQHandler+0x240>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d004      	beq.n	80041d4 <HAL_ADC_IRQHandler+0x30>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a86      	ldr	r2, [pc, #536]	@ (80043e8 <HAL_ADC_IRQHandler+0x244>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d101      	bne.n	80041d8 <HAL_ADC_IRQHandler+0x34>
 80041d4:	4b85      	ldr	r3, [pc, #532]	@ (80043ec <HAL_ADC_IRQHandler+0x248>)
 80041d6:	e000      	b.n	80041da <HAL_ADC_IRQHandler+0x36>
 80041d8:	4b85      	ldr	r3, [pc, #532]	@ (80043f0 <HAL_ADC_IRQHandler+0x24c>)
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff fb80 	bl	80038e0 <LL_ADC_GetMultimode>
 80041e0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d017      	beq.n	800421c <HAL_ADC_IRQHandler+0x78>
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d012      	beq.n	800421c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041fa:	f003 0310 	and.w	r3, r3, #16
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d105      	bne.n	800420e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004206:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f001 fa74 	bl	80056fc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2202      	movs	r2, #2
 800421a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	2b00      	cmp	r3, #0
 8004224:	d004      	beq.n	8004230 <HAL_ADC_IRQHandler+0x8c>
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 8083 	beq.w	8004342 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d07d      	beq.n	8004342 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800424a:	f003 0310 	and.w	r3, r3, #16
 800424e:	2b00      	cmp	r3, #0
 8004250:	d105      	bne.n	800425e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004256:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fa42 	bl	80036ec <LL_ADC_REG_IsTriggerSourceSWStart>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d062      	beq.n	8004334 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a5d      	ldr	r2, [pc, #372]	@ (80043e8 <HAL_ADC_IRQHandler+0x244>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d002      	beq.n	800427e <HAL_ADC_IRQHandler+0xda>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	e000      	b.n	8004280 <HAL_ADC_IRQHandler+0xdc>
 800427e:	4b59      	ldr	r3, [pc, #356]	@ (80043e4 <HAL_ADC_IRQHandler+0x240>)
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	4293      	cmp	r3, r2
 8004286:	d008      	beq.n	800429a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b05      	cmp	r3, #5
 8004292:	d002      	beq.n	800429a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2b09      	cmp	r3, #9
 8004298:	d104      	bne.n	80042a4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	623b      	str	r3, [r7, #32]
 80042a2:	e00c      	b.n	80042be <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a4f      	ldr	r2, [pc, #316]	@ (80043e8 <HAL_ADC_IRQHandler+0x244>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d002      	beq.n	80042b4 <HAL_ADC_IRQHandler+0x110>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	e000      	b.n	80042b6 <HAL_ADC_IRQHandler+0x112>
 80042b4:	4b4b      	ldr	r3, [pc, #300]	@ (80043e4 <HAL_ADC_IRQHandler+0x240>)
 80042b6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d135      	bne.n	8004334 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d12e      	bne.n	8004334 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff fbe0 	bl	8003aa0 <LL_ADC_REG_IsConversionOngoing>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d11a      	bne.n	800431c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 020c 	bic.w	r2, r2, #12
 80042f4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004306:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d112      	bne.n	8004334 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004312:	f043 0201 	orr.w	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	661a      	str	r2, [r3, #96]	@ 0x60
 800431a:	e00b      	b.n	8004334 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004320:	f043 0210 	orr.w	r2, r3, #16
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800432c:	f043 0201 	orr.w	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f96f 	bl	8004618 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	220c      	movs	r2, #12
 8004340:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	2b00      	cmp	r3, #0
 800434a:	d004      	beq.n	8004356 <HAL_ADC_IRQHandler+0x1b2>
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10b      	bne.n	800436e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 80a0 	beq.w	80044a2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 809a 	beq.w	80044a2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b00      	cmp	r3, #0
 8004378:	d105      	bne.n	8004386 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800437e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fa2a 	bl	80037e4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004390:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff f9a8 	bl	80036ec <LL_ADC_REG_IsTriggerSourceSWStart>
 800439c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a11      	ldr	r2, [pc, #68]	@ (80043e8 <HAL_ADC_IRQHandler+0x244>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d002      	beq.n	80043ae <HAL_ADC_IRQHandler+0x20a>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	e000      	b.n	80043b0 <HAL_ADC_IRQHandler+0x20c>
 80043ae:	4b0d      	ldr	r3, [pc, #52]	@ (80043e4 <HAL_ADC_IRQHandler+0x240>)
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6812      	ldr	r2, [r2, #0]
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d008      	beq.n	80043ca <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d005      	beq.n	80043ca <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2b06      	cmp	r3, #6
 80043c2:	d002      	beq.n	80043ca <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	2b07      	cmp	r3, #7
 80043c8:	d104      	bne.n	80043d4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	623b      	str	r3, [r7, #32]
 80043d2:	e014      	b.n	80043fe <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a03      	ldr	r2, [pc, #12]	@ (80043e8 <HAL_ADC_IRQHandler+0x244>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00a      	beq.n	80043f4 <HAL_ADC_IRQHandler+0x250>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	e008      	b.n	80043f6 <HAL_ADC_IRQHandler+0x252>
 80043e4:	40022000 	.word	0x40022000
 80043e8:	40022100 	.word	0x40022100
 80043ec:	40022300 	.word	0x40022300
 80043f0:	58026300 	.word	0x58026300
 80043f4:	4b84      	ldr	r3, [pc, #528]	@ (8004608 <HAL_ADC_IRQHandler+0x464>)
 80043f6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d047      	beq.n	8004494 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d007      	beq.n	800441e <HAL_ADC_IRQHandler+0x27a>
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d03f      	beq.n	8004494 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800441a:	2b00      	cmp	r3, #0
 800441c:	d13a      	bne.n	8004494 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004428:	2b40      	cmp	r3, #64	@ 0x40
 800442a:	d133      	bne.n	8004494 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d12e      	bne.n	8004494 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff fb58 	bl	8003af0 <LL_ADC_INJ_IsConversionOngoing>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d11a      	bne.n	800447c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004454:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800445a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d112      	bne.n	8004494 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004472:	f043 0201 	orr.w	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	661a      	str	r2, [r3, #96]	@ 0x60
 800447a:	e00b      	b.n	8004494 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004480:	f043 0210 	orr.w	r2, r3, #16
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800448c:	f043 0201 	orr.w	r2, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f001 f909 	bl	80056ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2260      	movs	r2, #96	@ 0x60
 80044a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d011      	beq.n	80044d0 <HAL_ADC_IRQHandler+0x32c>
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00c      	beq.n	80044d0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f8bc 	bl	8004640 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2280      	movs	r2, #128	@ 0x80
 80044ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d012      	beq.n	8004500 <HAL_ADC_IRQHandler+0x35c>
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00d      	beq.n	8004500 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f001 f8ef 	bl	80056d4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004506:	2b00      	cmp	r3, #0
 8004508:	d012      	beq.n	8004530 <HAL_ADC_IRQHandler+0x38c>
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00d      	beq.n	8004530 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004518:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f001 f8e1 	bl	80056e8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800452e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f003 0310 	and.w	r3, r3, #16
 8004536:	2b00      	cmp	r3, #0
 8004538:	d043      	beq.n	80045c2 <HAL_ADC_IRQHandler+0x41e>
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b00      	cmp	r3, #0
 8004542:	d03e      	beq.n	80045c2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004548:	2b00      	cmp	r3, #0
 800454a:	d102      	bne.n	8004552 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800454c:	2301      	movs	r3, #1
 800454e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004550:	e021      	b.n	8004596 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d015      	beq.n	8004584 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a2a      	ldr	r2, [pc, #168]	@ (8004608 <HAL_ADC_IRQHandler+0x464>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d004      	beq.n	800456c <HAL_ADC_IRQHandler+0x3c8>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a29      	ldr	r2, [pc, #164]	@ (800460c <HAL_ADC_IRQHandler+0x468>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d101      	bne.n	8004570 <HAL_ADC_IRQHandler+0x3cc>
 800456c:	4b28      	ldr	r3, [pc, #160]	@ (8004610 <HAL_ADC_IRQHandler+0x46c>)
 800456e:	e000      	b.n	8004572 <HAL_ADC_IRQHandler+0x3ce>
 8004570:	4b28      	ldr	r3, [pc, #160]	@ (8004614 <HAL_ADC_IRQHandler+0x470>)
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff f9c2 	bl	80038fc <LL_ADC_GetMultiDMATransfer>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00b      	beq.n	8004596 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800457e:	2301      	movs	r3, #1
 8004580:	627b      	str	r3, [r7, #36]	@ 0x24
 8004582:	e008      	b.n	8004596 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004592:	2301      	movs	r3, #1
 8004594:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	2b01      	cmp	r3, #1
 800459a:	d10e      	bne.n	80045ba <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045a0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045ac:	f043 0202 	orr.w	r2, r3, #2
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f84d 	bl	8004654 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2210      	movs	r2, #16
 80045c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d018      	beq.n	80045fe <HAL_ADC_IRQHandler+0x45a>
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d013      	beq.n	80045fe <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045da:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045e6:	f043 0208 	orr.w	r2, r3, #8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80045f6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f001 f861 	bl	80056c0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80045fe:	bf00      	nop
 8004600:	3728      	adds	r7, #40	@ 0x28
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40022000 	.word	0x40022000
 800460c:	40022100 	.word	0x40022100
 8004610:	40022300 	.word	0x40022300
 8004614:	58026300 	.word	0x58026300

08004618 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004668:	b590      	push	{r4, r7, lr}
 800466a:	b0a5      	sub	sp, #148	@ 0x94
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004682:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	4aa4      	ldr	r2, [pc, #656]	@ (800491c <HAL_ADC_ConfigChannel+0x2b4>)
 800468a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004692:	2b01      	cmp	r3, #1
 8004694:	d102      	bne.n	800469c <HAL_ADC_ConfigChannel+0x34>
 8004696:	2302      	movs	r3, #2
 8004698:	f000 bca2 	b.w	8004fe0 <HAL_ADC_ConfigChannel+0x978>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff f9f9 	bl	8003aa0 <LL_ADC_REG_IsConversionOngoing>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f040 8486 	bne.w	8004fc2 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	db31      	blt.n	8004722 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a97      	ldr	r2, [pc, #604]	@ (8004920 <HAL_ADC_ConfigChannel+0x2b8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d02c      	beq.n	8004722 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d108      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x7e>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	0e9b      	lsrs	r3, r3, #26
 80046da:	f003 031f 	and.w	r3, r3, #31
 80046de:	2201      	movs	r2, #1
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	e016      	b.n	8004714 <HAL_ADC_ConfigChannel+0xac>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046ee:	fa93 f3a3 	rbit	r3, r3
 80046f2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80046f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046f6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80046f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 80046fe:	2320      	movs	r3, #32
 8004700:	e003      	b.n	800470a <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8004702:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004704:	fab3 f383 	clz	r3, r3
 8004708:	b2db      	uxtb	r3, r3
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	2201      	movs	r2, #1
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	69d1      	ldr	r1, [r2, #28]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6812      	ldr	r2, [r2, #0]
 800471e:	430b      	orrs	r3, r1
 8004720:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6818      	ldr	r0, [r3, #0]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	6859      	ldr	r1, [r3, #4]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	f7fe ffef 	bl	8003712 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff f9b1 	bl	8003aa0 <LL_ADC_REG_IsConversionOngoing>
 800473e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff f9d2 	bl	8003af0 <LL_ADC_INJ_IsConversionOngoing>
 800474c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004750:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004754:	2b00      	cmp	r3, #0
 8004756:	f040 824a 	bne.w	8004bee <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800475a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800475e:	2b00      	cmp	r3, #0
 8004760:	f040 8245 	bne.w	8004bee <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6818      	ldr	r0, [r3, #0]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	6819      	ldr	r1, [r3, #0]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	461a      	mov	r2, r3
 8004772:	f7ff f84a 	bl	800380a <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a69      	ldr	r2, [pc, #420]	@ (8004920 <HAL_ADC_ConfigChannel+0x2b8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d10d      	bne.n	800479c <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	695a      	ldr	r2, [r3, #20]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	08db      	lsrs	r3, r3, #3
 800478c:	f003 0303 	and.w	r3, r3, #3
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800479a:	e032      	b.n	8004802 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800479c:	4b61      	ldr	r3, [pc, #388]	@ (8004924 <HAL_ADC_ConfigChannel+0x2bc>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80047a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047a8:	d10b      	bne.n	80047c2 <HAL_ADC_ConfigChannel+0x15a>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	695a      	ldr	r2, [r3, #20]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	089b      	lsrs	r3, r3, #2
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	e01d      	b.n	80047fe <HAL_ADC_ConfigChannel+0x196>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f003 0310 	and.w	r3, r3, #16
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10b      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x180>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	695a      	ldr	r2, [r3, #20]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	089b      	lsrs	r3, r3, #2
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	e00a      	b.n	80047fe <HAL_ADC_ConfigChannel+0x196>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	695a      	ldr	r2, [r3, #20]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	089b      	lsrs	r3, r3, #2
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	fa02 f303 	lsl.w	r3, r2, r3
 80047fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	2b04      	cmp	r3, #4
 8004808:	d048      	beq.n	800489c <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6919      	ldr	r1, [r3, #16]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800481a:	f7fe fe75 	bl	8003508 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a3f      	ldr	r2, [pc, #252]	@ (8004920 <HAL_ADC_ConfigChannel+0x2b8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d119      	bne.n	800485c <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	6919      	ldr	r1, [r3, #16]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	461a      	mov	r2, r3
 8004836:	f7fe ff0d 	bl	8003654 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	6919      	ldr	r1, [r3, #16]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d102      	bne.n	8004852 <HAL_ADC_ConfigChannel+0x1ea>
 800484c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004850:	e000      	b.n	8004854 <HAL_ADC_ConfigChannel+0x1ec>
 8004852:	2300      	movs	r3, #0
 8004854:	461a      	mov	r2, r3
 8004856:	f7fe fedb 	bl	8003610 <LL_ADC_SetOffsetSaturation>
 800485a:	e1c8      	b.n	8004bee <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6818      	ldr	r0, [r3, #0]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	6919      	ldr	r1, [r3, #16]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800486a:	2b01      	cmp	r3, #1
 800486c:	d102      	bne.n	8004874 <HAL_ADC_ConfigChannel+0x20c>
 800486e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004872:	e000      	b.n	8004876 <HAL_ADC_ConfigChannel+0x20e>
 8004874:	2300      	movs	r3, #0
 8004876:	461a      	mov	r2, r3
 8004878:	f7fe fea8 	bl	80035cc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	6919      	ldr	r1, [r3, #16]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	7e1b      	ldrb	r3, [r3, #24]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d102      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x22a>
 800488c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004890:	e000      	b.n	8004894 <HAL_ADC_ConfigChannel+0x22c>
 8004892:	2300      	movs	r3, #0
 8004894:	461a      	mov	r2, r3
 8004896:	f7fe fe7f 	bl	8003598 <LL_ADC_SetDataRightShift>
 800489a:	e1a8      	b.n	8004bee <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004920 <HAL_ADC_ConfigChannel+0x2b8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	f040 815b 	bne.w	8004b5e <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2100      	movs	r1, #0
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fe fe5c 	bl	800356c <LL_ADC_GetOffsetChannel>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10a      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x26c>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2100      	movs	r1, #0
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fe fe51 	bl	800356c <LL_ADC_GetOffsetChannel>
 80048ca:	4603      	mov	r3, r0
 80048cc:	0e9b      	lsrs	r3, r3, #26
 80048ce:	f003 021f 	and.w	r2, r3, #31
 80048d2:	e017      	b.n	8004904 <HAL_ADC_ConfigChannel+0x29c>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2100      	movs	r1, #0
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fe fe46 	bl	800356c <LL_ADC_GetOffsetChannel>
 80048e0:	4603      	mov	r3, r0
 80048e2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048e6:	fa93 f3a3 	rbit	r3, r3
 80048ea:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80048ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80048f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80048f6:	2320      	movs	r3, #32
 80048f8:	e003      	b.n	8004902 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 80048fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048fc:	fab3 f383 	clz	r3, r3
 8004900:	b2db      	uxtb	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10b      	bne.n	8004928 <HAL_ADC_ConfigChannel+0x2c0>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	0e9b      	lsrs	r3, r3, #26
 8004916:	f003 031f 	and.w	r3, r3, #31
 800491a:	e017      	b.n	800494c <HAL_ADC_ConfigChannel+0x2e4>
 800491c:	47ff0000 	.word	0x47ff0000
 8004920:	58026000 	.word	0x58026000
 8004924:	5c001000 	.word	0x5c001000
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004930:	fa93 f3a3 	rbit	r3, r3
 8004934:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004936:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004938:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800493a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8004940:	2320      	movs	r3, #32
 8004942:	e003      	b.n	800494c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8004944:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004946:	fab3 f383 	clz	r3, r3
 800494a:	b2db      	uxtb	r3, r3
 800494c:	429a      	cmp	r2, r3
 800494e:	d106      	bne.n	800495e <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2200      	movs	r2, #0
 8004956:	2100      	movs	r1, #0
 8004958:	4618      	mov	r0, r3
 800495a:	f7fe fe9d 	bl	8003698 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2101      	movs	r1, #1
 8004964:	4618      	mov	r0, r3
 8004966:	f7fe fe01 	bl	800356c <LL_ADC_GetOffsetChannel>
 800496a:	4603      	mov	r3, r0
 800496c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10a      	bne.n	800498a <HAL_ADC_ConfigChannel+0x322>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2101      	movs	r1, #1
 800497a:	4618      	mov	r0, r3
 800497c:	f7fe fdf6 	bl	800356c <LL_ADC_GetOffsetChannel>
 8004980:	4603      	mov	r3, r0
 8004982:	0e9b      	lsrs	r3, r3, #26
 8004984:	f003 021f 	and.w	r2, r3, #31
 8004988:	e017      	b.n	80049ba <HAL_ADC_ConfigChannel+0x352>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2101      	movs	r1, #1
 8004990:	4618      	mov	r0, r3
 8004992:	f7fe fdeb 	bl	800356c <LL_ADC_GetOffsetChannel>
 8004996:	4603      	mov	r3, r0
 8004998:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800499c:	fa93 f3a3 	rbit	r3, r3
 80049a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80049a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049a4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80049a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d101      	bne.n	80049b0 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 80049ac:	2320      	movs	r3, #32
 80049ae:	e003      	b.n	80049b8 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 80049b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049b2:	fab3 f383 	clz	r3, r3
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	461a      	mov	r2, r3
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d105      	bne.n	80049d2 <HAL_ADC_ConfigChannel+0x36a>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	0e9b      	lsrs	r3, r3, #26
 80049cc:	f003 031f 	and.w	r3, r3, #31
 80049d0:	e011      	b.n	80049f6 <HAL_ADC_ConfigChannel+0x38e>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049da:	fa93 f3a3 	rbit	r3, r3
 80049de:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80049e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80049e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80049ea:	2320      	movs	r3, #32
 80049ec:	e003      	b.n	80049f6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80049ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049f0:	fab3 f383 	clz	r3, r3
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d106      	bne.n	8004a08 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2200      	movs	r2, #0
 8004a00:	2101      	movs	r1, #1
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fe fe48 	bl	8003698 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2102      	movs	r1, #2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fe fdac 	bl	800356c <LL_ADC_GetOffsetChannel>
 8004a14:	4603      	mov	r3, r0
 8004a16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <HAL_ADC_ConfigChannel+0x3cc>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2102      	movs	r1, #2
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fe fda1 	bl	800356c <LL_ADC_GetOffsetChannel>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	0e9b      	lsrs	r3, r3, #26
 8004a2e:	f003 021f 	and.w	r2, r3, #31
 8004a32:	e017      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x3fc>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2102      	movs	r1, #2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fe fd96 	bl	800356c <LL_ADC_GetOffsetChannel>
 8004a40:	4603      	mov	r3, r0
 8004a42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a46:	fa93 f3a3 	rbit	r3, r3
 8004a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8004a56:	2320      	movs	r3, #32
 8004a58:	e003      	b.n	8004a62 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8004a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a5c:	fab3 f383 	clz	r3, r3
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	461a      	mov	r2, r3
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d105      	bne.n	8004a7c <HAL_ADC_ConfigChannel+0x414>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	0e9b      	lsrs	r3, r3, #26
 8004a76:	f003 031f 	and.w	r3, r3, #31
 8004a7a:	e011      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x438>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a84:	fa93 f3a3 	rbit	r3, r3
 8004a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8004a94:	2320      	movs	r3, #32
 8004a96:	e003      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8004a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9a:	fab3 f383 	clz	r3, r3
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d106      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	2102      	movs	r1, #2
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fe fdf3 	bl	8003698 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2103      	movs	r1, #3
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fe fd57 	bl	800356c <LL_ADC_GetOffsetChannel>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10a      	bne.n	8004ade <HAL_ADC_ConfigChannel+0x476>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2103      	movs	r1, #3
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fe fd4c 	bl	800356c <LL_ADC_GetOffsetChannel>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	0e9b      	lsrs	r3, r3, #26
 8004ad8:	f003 021f 	and.w	r2, r3, #31
 8004adc:	e017      	b.n	8004b0e <HAL_ADC_ConfigChannel+0x4a6>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2103      	movs	r1, #3
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fe fd41 	bl	800356c <LL_ADC_GetOffsetChannel>
 8004aea:	4603      	mov	r3, r0
 8004aec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	fa93 f3a3 	rbit	r3, r3
 8004af4:	61fb      	str	r3, [r7, #28]
  return result;
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004b00:	2320      	movs	r3, #32
 8004b02:	e003      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b06:	fab3 f383 	clz	r3, r3
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d105      	bne.n	8004b26 <HAL_ADC_ConfigChannel+0x4be>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	0e9b      	lsrs	r3, r3, #26
 8004b20:	f003 031f 	and.w	r3, r3, #31
 8004b24:	e011      	b.n	8004b4a <HAL_ADC_ConfigChannel+0x4e2>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	fa93 f3a3 	rbit	r3, r3
 8004b32:	613b      	str	r3, [r7, #16]
  return result;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8004b3e:	2320      	movs	r3, #32
 8004b40:	e003      	b.n	8004b4a <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	fab3 f383 	clz	r3, r3
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d14f      	bne.n	8004bee <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2200      	movs	r2, #0
 8004b54:	2103      	movs	r1, #3
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fe fd9e 	bl	8003698 <LL_ADC_SetOffsetState>
 8004b5c:	e047      	b.n	8004bee <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b64:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	069b      	lsls	r3, r3, #26
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d107      	bne.n	8004b82 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004b80:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b88:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	069b      	lsls	r3, r3, #26
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d107      	bne.n	8004ba6 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004ba4:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	069b      	lsls	r3, r3, #26
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d107      	bne.n	8004bca <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004bc8:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bd0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	069b      	lsls	r3, r3, #26
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d107      	bne.n	8004bee <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004bec:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fe ff06 	bl	8003a04 <LL_ADC_IsEnabled>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f040 81ea 	bne.w	8004fd4 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6818      	ldr	r0, [r3, #0]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	6819      	ldr	r1, [r3, #0]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	f7fe fe27 	bl	8003860 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	4a7a      	ldr	r2, [pc, #488]	@ (8004e00 <HAL_ADC_ConfigChannel+0x798>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	f040 80e0 	bne.w	8004dde <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4977      	ldr	r1, [pc, #476]	@ (8004e04 <HAL_ADC_ConfigChannel+0x79c>)
 8004c28:	428b      	cmp	r3, r1
 8004c2a:	d147      	bne.n	8004cbc <HAL_ADC_ConfigChannel+0x654>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4975      	ldr	r1, [pc, #468]	@ (8004e08 <HAL_ADC_ConfigChannel+0x7a0>)
 8004c32:	428b      	cmp	r3, r1
 8004c34:	d040      	beq.n	8004cb8 <HAL_ADC_ConfigChannel+0x650>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4974      	ldr	r1, [pc, #464]	@ (8004e0c <HAL_ADC_ConfigChannel+0x7a4>)
 8004c3c:	428b      	cmp	r3, r1
 8004c3e:	d039      	beq.n	8004cb4 <HAL_ADC_ConfigChannel+0x64c>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4972      	ldr	r1, [pc, #456]	@ (8004e10 <HAL_ADC_ConfigChannel+0x7a8>)
 8004c46:	428b      	cmp	r3, r1
 8004c48:	d032      	beq.n	8004cb0 <HAL_ADC_ConfigChannel+0x648>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4971      	ldr	r1, [pc, #452]	@ (8004e14 <HAL_ADC_ConfigChannel+0x7ac>)
 8004c50:	428b      	cmp	r3, r1
 8004c52:	d02b      	beq.n	8004cac <HAL_ADC_ConfigChannel+0x644>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	496f      	ldr	r1, [pc, #444]	@ (8004e18 <HAL_ADC_ConfigChannel+0x7b0>)
 8004c5a:	428b      	cmp	r3, r1
 8004c5c:	d024      	beq.n	8004ca8 <HAL_ADC_ConfigChannel+0x640>
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	496e      	ldr	r1, [pc, #440]	@ (8004e1c <HAL_ADC_ConfigChannel+0x7b4>)
 8004c64:	428b      	cmp	r3, r1
 8004c66:	d01d      	beq.n	8004ca4 <HAL_ADC_ConfigChannel+0x63c>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	496c      	ldr	r1, [pc, #432]	@ (8004e20 <HAL_ADC_ConfigChannel+0x7b8>)
 8004c6e:	428b      	cmp	r3, r1
 8004c70:	d016      	beq.n	8004ca0 <HAL_ADC_ConfigChannel+0x638>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	496b      	ldr	r1, [pc, #428]	@ (8004e24 <HAL_ADC_ConfigChannel+0x7bc>)
 8004c78:	428b      	cmp	r3, r1
 8004c7a:	d00f      	beq.n	8004c9c <HAL_ADC_ConfigChannel+0x634>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4969      	ldr	r1, [pc, #420]	@ (8004e28 <HAL_ADC_ConfigChannel+0x7c0>)
 8004c82:	428b      	cmp	r3, r1
 8004c84:	d008      	beq.n	8004c98 <HAL_ADC_ConfigChannel+0x630>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4968      	ldr	r1, [pc, #416]	@ (8004e2c <HAL_ADC_ConfigChannel+0x7c4>)
 8004c8c:	428b      	cmp	r3, r1
 8004c8e:	d101      	bne.n	8004c94 <HAL_ADC_ConfigChannel+0x62c>
 8004c90:	4b67      	ldr	r3, [pc, #412]	@ (8004e30 <HAL_ADC_ConfigChannel+0x7c8>)
 8004c92:	e0a0      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004c94:	2300      	movs	r3, #0
 8004c96:	e09e      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004c98:	4b66      	ldr	r3, [pc, #408]	@ (8004e34 <HAL_ADC_ConfigChannel+0x7cc>)
 8004c9a:	e09c      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004c9c:	4b66      	ldr	r3, [pc, #408]	@ (8004e38 <HAL_ADC_ConfigChannel+0x7d0>)
 8004c9e:	e09a      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004ca0:	4b60      	ldr	r3, [pc, #384]	@ (8004e24 <HAL_ADC_ConfigChannel+0x7bc>)
 8004ca2:	e098      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004ca4:	4b5e      	ldr	r3, [pc, #376]	@ (8004e20 <HAL_ADC_ConfigChannel+0x7b8>)
 8004ca6:	e096      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004ca8:	4b64      	ldr	r3, [pc, #400]	@ (8004e3c <HAL_ADC_ConfigChannel+0x7d4>)
 8004caa:	e094      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004cac:	4b64      	ldr	r3, [pc, #400]	@ (8004e40 <HAL_ADC_ConfigChannel+0x7d8>)
 8004cae:	e092      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004cb0:	4b64      	ldr	r3, [pc, #400]	@ (8004e44 <HAL_ADC_ConfigChannel+0x7dc>)
 8004cb2:	e090      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004cb4:	4b64      	ldr	r3, [pc, #400]	@ (8004e48 <HAL_ADC_ConfigChannel+0x7e0>)
 8004cb6:	e08e      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e08c      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4962      	ldr	r1, [pc, #392]	@ (8004e4c <HAL_ADC_ConfigChannel+0x7e4>)
 8004cc2:	428b      	cmp	r3, r1
 8004cc4:	d140      	bne.n	8004d48 <HAL_ADC_ConfigChannel+0x6e0>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	494f      	ldr	r1, [pc, #316]	@ (8004e08 <HAL_ADC_ConfigChannel+0x7a0>)
 8004ccc:	428b      	cmp	r3, r1
 8004cce:	d039      	beq.n	8004d44 <HAL_ADC_ConfigChannel+0x6dc>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	494d      	ldr	r1, [pc, #308]	@ (8004e0c <HAL_ADC_ConfigChannel+0x7a4>)
 8004cd6:	428b      	cmp	r3, r1
 8004cd8:	d032      	beq.n	8004d40 <HAL_ADC_ConfigChannel+0x6d8>
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	494c      	ldr	r1, [pc, #304]	@ (8004e10 <HAL_ADC_ConfigChannel+0x7a8>)
 8004ce0:	428b      	cmp	r3, r1
 8004ce2:	d02b      	beq.n	8004d3c <HAL_ADC_ConfigChannel+0x6d4>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	494a      	ldr	r1, [pc, #296]	@ (8004e14 <HAL_ADC_ConfigChannel+0x7ac>)
 8004cea:	428b      	cmp	r3, r1
 8004cec:	d024      	beq.n	8004d38 <HAL_ADC_ConfigChannel+0x6d0>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4949      	ldr	r1, [pc, #292]	@ (8004e18 <HAL_ADC_ConfigChannel+0x7b0>)
 8004cf4:	428b      	cmp	r3, r1
 8004cf6:	d01d      	beq.n	8004d34 <HAL_ADC_ConfigChannel+0x6cc>
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4947      	ldr	r1, [pc, #284]	@ (8004e1c <HAL_ADC_ConfigChannel+0x7b4>)
 8004cfe:	428b      	cmp	r3, r1
 8004d00:	d016      	beq.n	8004d30 <HAL_ADC_ConfigChannel+0x6c8>
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4946      	ldr	r1, [pc, #280]	@ (8004e20 <HAL_ADC_ConfigChannel+0x7b8>)
 8004d08:	428b      	cmp	r3, r1
 8004d0a:	d00f      	beq.n	8004d2c <HAL_ADC_ConfigChannel+0x6c4>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4944      	ldr	r1, [pc, #272]	@ (8004e24 <HAL_ADC_ConfigChannel+0x7bc>)
 8004d12:	428b      	cmp	r3, r1
 8004d14:	d008      	beq.n	8004d28 <HAL_ADC_ConfigChannel+0x6c0>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4944      	ldr	r1, [pc, #272]	@ (8004e2c <HAL_ADC_ConfigChannel+0x7c4>)
 8004d1c:	428b      	cmp	r3, r1
 8004d1e:	d101      	bne.n	8004d24 <HAL_ADC_ConfigChannel+0x6bc>
 8004d20:	4b43      	ldr	r3, [pc, #268]	@ (8004e30 <HAL_ADC_ConfigChannel+0x7c8>)
 8004d22:	e058      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004d24:	2300      	movs	r3, #0
 8004d26:	e056      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004d28:	4b43      	ldr	r3, [pc, #268]	@ (8004e38 <HAL_ADC_ConfigChannel+0x7d0>)
 8004d2a:	e054      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004d2c:	4b3d      	ldr	r3, [pc, #244]	@ (8004e24 <HAL_ADC_ConfigChannel+0x7bc>)
 8004d2e:	e052      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004d30:	4b3b      	ldr	r3, [pc, #236]	@ (8004e20 <HAL_ADC_ConfigChannel+0x7b8>)
 8004d32:	e050      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004d34:	4b41      	ldr	r3, [pc, #260]	@ (8004e3c <HAL_ADC_ConfigChannel+0x7d4>)
 8004d36:	e04e      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004d38:	4b41      	ldr	r3, [pc, #260]	@ (8004e40 <HAL_ADC_ConfigChannel+0x7d8>)
 8004d3a:	e04c      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004d3c:	4b41      	ldr	r3, [pc, #260]	@ (8004e44 <HAL_ADC_ConfigChannel+0x7dc>)
 8004d3e:	e04a      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004d40:	4b41      	ldr	r3, [pc, #260]	@ (8004e48 <HAL_ADC_ConfigChannel+0x7e0>)
 8004d42:	e048      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004d44:	2301      	movs	r3, #1
 8004d46:	e046      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4940      	ldr	r1, [pc, #256]	@ (8004e50 <HAL_ADC_ConfigChannel+0x7e8>)
 8004d4e:	428b      	cmp	r3, r1
 8004d50:	d140      	bne.n	8004dd4 <HAL_ADC_ConfigChannel+0x76c>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	492c      	ldr	r1, [pc, #176]	@ (8004e08 <HAL_ADC_ConfigChannel+0x7a0>)
 8004d58:	428b      	cmp	r3, r1
 8004d5a:	d039      	beq.n	8004dd0 <HAL_ADC_ConfigChannel+0x768>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	492a      	ldr	r1, [pc, #168]	@ (8004e0c <HAL_ADC_ConfigChannel+0x7a4>)
 8004d62:	428b      	cmp	r3, r1
 8004d64:	d032      	beq.n	8004dcc <HAL_ADC_ConfigChannel+0x764>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4929      	ldr	r1, [pc, #164]	@ (8004e10 <HAL_ADC_ConfigChannel+0x7a8>)
 8004d6c:	428b      	cmp	r3, r1
 8004d6e:	d02b      	beq.n	8004dc8 <HAL_ADC_ConfigChannel+0x760>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4927      	ldr	r1, [pc, #156]	@ (8004e14 <HAL_ADC_ConfigChannel+0x7ac>)
 8004d76:	428b      	cmp	r3, r1
 8004d78:	d024      	beq.n	8004dc4 <HAL_ADC_ConfigChannel+0x75c>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4926      	ldr	r1, [pc, #152]	@ (8004e18 <HAL_ADC_ConfigChannel+0x7b0>)
 8004d80:	428b      	cmp	r3, r1
 8004d82:	d01d      	beq.n	8004dc0 <HAL_ADC_ConfigChannel+0x758>
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4924      	ldr	r1, [pc, #144]	@ (8004e1c <HAL_ADC_ConfigChannel+0x7b4>)
 8004d8a:	428b      	cmp	r3, r1
 8004d8c:	d016      	beq.n	8004dbc <HAL_ADC_ConfigChannel+0x754>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4923      	ldr	r1, [pc, #140]	@ (8004e20 <HAL_ADC_ConfigChannel+0x7b8>)
 8004d94:	428b      	cmp	r3, r1
 8004d96:	d00f      	beq.n	8004db8 <HAL_ADC_ConfigChannel+0x750>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4926      	ldr	r1, [pc, #152]	@ (8004e38 <HAL_ADC_ConfigChannel+0x7d0>)
 8004d9e:	428b      	cmp	r3, r1
 8004da0:	d008      	beq.n	8004db4 <HAL_ADC_ConfigChannel+0x74c>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	492b      	ldr	r1, [pc, #172]	@ (8004e54 <HAL_ADC_ConfigChannel+0x7ec>)
 8004da8:	428b      	cmp	r3, r1
 8004daa:	d101      	bne.n	8004db0 <HAL_ADC_ConfigChannel+0x748>
 8004dac:	4b2a      	ldr	r3, [pc, #168]	@ (8004e58 <HAL_ADC_ConfigChannel+0x7f0>)
 8004dae:	e012      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004db0:	2300      	movs	r3, #0
 8004db2:	e010      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004db4:	4b27      	ldr	r3, [pc, #156]	@ (8004e54 <HAL_ADC_ConfigChannel+0x7ec>)
 8004db6:	e00e      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004db8:	4b1a      	ldr	r3, [pc, #104]	@ (8004e24 <HAL_ADC_ConfigChannel+0x7bc>)
 8004dba:	e00c      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004dbc:	4b18      	ldr	r3, [pc, #96]	@ (8004e20 <HAL_ADC_ConfigChannel+0x7b8>)
 8004dbe:	e00a      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8004e3c <HAL_ADC_ConfigChannel+0x7d4>)
 8004dc2:	e008      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004dc4:	4b1e      	ldr	r3, [pc, #120]	@ (8004e40 <HAL_ADC_ConfigChannel+0x7d8>)
 8004dc6:	e006      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8004e44 <HAL_ADC_ConfigChannel+0x7dc>)
 8004dca:	e004      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8004e48 <HAL_ADC_ConfigChannel+0x7e0>)
 8004dce:	e002      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e000      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x76e>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4610      	mov	r0, r2
 8004dda:	f7fe fb5b 	bl	8003494 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f280 80f6 	bge.w	8004fd4 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a05      	ldr	r2, [pc, #20]	@ (8004e04 <HAL_ADC_ConfigChannel+0x79c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d004      	beq.n	8004dfc <HAL_ADC_ConfigChannel+0x794>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a15      	ldr	r2, [pc, #84]	@ (8004e4c <HAL_ADC_ConfigChannel+0x7e4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d131      	bne.n	8004e60 <HAL_ADC_ConfigChannel+0x7f8>
 8004dfc:	4b17      	ldr	r3, [pc, #92]	@ (8004e5c <HAL_ADC_ConfigChannel+0x7f4>)
 8004dfe:	e030      	b.n	8004e62 <HAL_ADC_ConfigChannel+0x7fa>
 8004e00:	47ff0000 	.word	0x47ff0000
 8004e04:	40022000 	.word	0x40022000
 8004e08:	04300002 	.word	0x04300002
 8004e0c:	08600004 	.word	0x08600004
 8004e10:	0c900008 	.word	0x0c900008
 8004e14:	10c00010 	.word	0x10c00010
 8004e18:	14f00020 	.word	0x14f00020
 8004e1c:	2a000400 	.word	0x2a000400
 8004e20:	2e300800 	.word	0x2e300800
 8004e24:	32601000 	.word	0x32601000
 8004e28:	43210000 	.word	0x43210000
 8004e2c:	4b840000 	.word	0x4b840000
 8004e30:	4fb80000 	.word	0x4fb80000
 8004e34:	47520000 	.word	0x47520000
 8004e38:	36902000 	.word	0x36902000
 8004e3c:	25b00200 	.word	0x25b00200
 8004e40:	21800100 	.word	0x21800100
 8004e44:	1d500080 	.word	0x1d500080
 8004e48:	19200040 	.word	0x19200040
 8004e4c:	40022100 	.word	0x40022100
 8004e50:	58026000 	.word	0x58026000
 8004e54:	3ac04000 	.word	0x3ac04000
 8004e58:	3ef08000 	.word	0x3ef08000
 8004e5c:	40022300 	.word	0x40022300
 8004e60:	4b61      	ldr	r3, [pc, #388]	@ (8004fe8 <HAL_ADC_ConfigChannel+0x980>)
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fe fb08 	bl	8003478 <LL_ADC_GetCommonPathInternalCh>
 8004e68:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a5f      	ldr	r2, [pc, #380]	@ (8004fec <HAL_ADC_ConfigChannel+0x984>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d004      	beq.n	8004e7e <HAL_ADC_ConfigChannel+0x816>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a5d      	ldr	r2, [pc, #372]	@ (8004ff0 <HAL_ADC_ConfigChannel+0x988>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d10e      	bne.n	8004e9c <HAL_ADC_ConfigChannel+0x834>
 8004e7e:	485b      	ldr	r0, [pc, #364]	@ (8004fec <HAL_ADC_ConfigChannel+0x984>)
 8004e80:	f7fe fdc0 	bl	8003a04 <LL_ADC_IsEnabled>
 8004e84:	4604      	mov	r4, r0
 8004e86:	485a      	ldr	r0, [pc, #360]	@ (8004ff0 <HAL_ADC_ConfigChannel+0x988>)
 8004e88:	f7fe fdbc 	bl	8003a04 <LL_ADC_IsEnabled>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	4323      	orrs	r3, r4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	bf0c      	ite	eq
 8004e94:	2301      	moveq	r3, #1
 8004e96:	2300      	movne	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	e008      	b.n	8004eae <HAL_ADC_ConfigChannel+0x846>
 8004e9c:	4855      	ldr	r0, [pc, #340]	@ (8004ff4 <HAL_ADC_ConfigChannel+0x98c>)
 8004e9e:	f7fe fdb1 	bl	8003a04 <LL_ADC_IsEnabled>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	bf0c      	ite	eq
 8004ea8:	2301      	moveq	r3, #1
 8004eaa:	2300      	movne	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d07d      	beq.n	8004fae <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a50      	ldr	r2, [pc, #320]	@ (8004ff8 <HAL_ADC_ConfigChannel+0x990>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d130      	bne.n	8004f1e <HAL_ADC_ConfigChannel+0x8b6>
 8004ebc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ebe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d12b      	bne.n	8004f1e <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a4a      	ldr	r2, [pc, #296]	@ (8004ff4 <HAL_ADC_ConfigChannel+0x98c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	f040 8081 	bne.w	8004fd4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a45      	ldr	r2, [pc, #276]	@ (8004fec <HAL_ADC_ConfigChannel+0x984>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d004      	beq.n	8004ee6 <HAL_ADC_ConfigChannel+0x87e>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a43      	ldr	r2, [pc, #268]	@ (8004ff0 <HAL_ADC_ConfigChannel+0x988>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d101      	bne.n	8004eea <HAL_ADC_ConfigChannel+0x882>
 8004ee6:	4a45      	ldr	r2, [pc, #276]	@ (8004ffc <HAL_ADC_ConfigChannel+0x994>)
 8004ee8:	e000      	b.n	8004eec <HAL_ADC_ConfigChannel+0x884>
 8004eea:	4a3f      	ldr	r2, [pc, #252]	@ (8004fe8 <HAL_ADC_ConfigChannel+0x980>)
 8004eec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004eee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	f7fe faac 	bl	8003452 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004efa:	4b41      	ldr	r3, [pc, #260]	@ (8005000 <HAL_ADC_ConfigChannel+0x998>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	099b      	lsrs	r3, r3, #6
 8004f00:	4a40      	ldr	r2, [pc, #256]	@ (8005004 <HAL_ADC_ConfigChannel+0x99c>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	099b      	lsrs	r3, r3, #6
 8004f08:	3301      	adds	r3, #1
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004f0e:	e002      	b.n	8004f16 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1f9      	bne.n	8004f10 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f1c:	e05a      	b.n	8004fd4 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a39      	ldr	r2, [pc, #228]	@ (8005008 <HAL_ADC_ConfigChannel+0x9a0>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d11e      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x8fe>
 8004f28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d119      	bne.n	8004f66 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a2f      	ldr	r2, [pc, #188]	@ (8004ff4 <HAL_ADC_ConfigChannel+0x98c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d14b      	bne.n	8004fd4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a2a      	ldr	r2, [pc, #168]	@ (8004fec <HAL_ADC_ConfigChannel+0x984>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d004      	beq.n	8004f50 <HAL_ADC_ConfigChannel+0x8e8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a29      	ldr	r2, [pc, #164]	@ (8004ff0 <HAL_ADC_ConfigChannel+0x988>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d101      	bne.n	8004f54 <HAL_ADC_ConfigChannel+0x8ec>
 8004f50:	4a2a      	ldr	r2, [pc, #168]	@ (8004ffc <HAL_ADC_ConfigChannel+0x994>)
 8004f52:	e000      	b.n	8004f56 <HAL_ADC_ConfigChannel+0x8ee>
 8004f54:	4a24      	ldr	r2, [pc, #144]	@ (8004fe8 <HAL_ADC_ConfigChannel+0x980>)
 8004f56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	f7fe fa77 	bl	8003452 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f64:	e036      	b.n	8004fd4 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a28      	ldr	r2, [pc, #160]	@ (800500c <HAL_ADC_ConfigChannel+0x9a4>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d131      	bne.n	8004fd4 <HAL_ADC_ConfigChannel+0x96c>
 8004f70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d12c      	bne.n	8004fd4 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff4 <HAL_ADC_ConfigChannel+0x98c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d127      	bne.n	8004fd4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a18      	ldr	r2, [pc, #96]	@ (8004fec <HAL_ADC_ConfigChannel+0x984>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d004      	beq.n	8004f98 <HAL_ADC_ConfigChannel+0x930>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a17      	ldr	r2, [pc, #92]	@ (8004ff0 <HAL_ADC_ConfigChannel+0x988>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d101      	bne.n	8004f9c <HAL_ADC_ConfigChannel+0x934>
 8004f98:	4a18      	ldr	r2, [pc, #96]	@ (8004ffc <HAL_ADC_ConfigChannel+0x994>)
 8004f9a:	e000      	b.n	8004f9e <HAL_ADC_ConfigChannel+0x936>
 8004f9c:	4a12      	ldr	r2, [pc, #72]	@ (8004fe8 <HAL_ADC_ConfigChannel+0x980>)
 8004f9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004fa0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	f7fe fa53 	bl	8003452 <LL_ADC_SetCommonPathInternalCh>
 8004fac:	e012      	b.n	8004fd4 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fb2:	f043 0220 	orr.w	r2, r3, #32
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8004fc0:	e008      	b.n	8004fd4 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fc6:	f043 0220 	orr.w	r2, r3, #32
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004fdc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3794      	adds	r7, #148	@ 0x94
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd90      	pop	{r4, r7, pc}
 8004fe8:	58026300 	.word	0x58026300
 8004fec:	40022000 	.word	0x40022000
 8004ff0:	40022100 	.word	0x40022100
 8004ff4:	58026000 	.word	0x58026000
 8004ff8:	c7520000 	.word	0xc7520000
 8004ffc:	40022300 	.word	0x40022300
 8005000:	24000000 	.word	0x24000000
 8005004:	053e2d63 	.word	0x053e2d63
 8005008:	c3210000 	.word	0xc3210000
 800500c:	cb840000 	.word	0xcb840000

08005010 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800501a:	2300      	movs	r3, #0
 800501c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f7fe fd3a 	bl	8003aa0 <LL_ADC_REG_IsConversionOngoing>
 800502c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f7fe fd5c 	bl	8003af0 <LL_ADC_INJ_IsConversionOngoing>
 8005038:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d103      	bne.n	8005048 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 8098 	beq.w	8005178 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d02a      	beq.n	80050ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	7e5b      	ldrb	r3, [r3, #25]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d126      	bne.n	80050ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	7e1b      	ldrb	r3, [r3, #24]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d122      	bne.n	80050ac <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005066:	2301      	movs	r3, #1
 8005068:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800506a:	e014      	b.n	8005096 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	4a45      	ldr	r2, [pc, #276]	@ (8005184 <ADC_ConversionStop+0x174>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d90d      	bls.n	8005090 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005078:	f043 0210 	orr.w	r2, r3, #16
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005084:	f043 0201 	orr.w	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e074      	b.n	800517a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	3301      	adds	r3, #1
 8005094:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a0:	2b40      	cmp	r3, #64	@ 0x40
 80050a2:	d1e3      	bne.n	800506c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2240      	movs	r2, #64	@ 0x40
 80050aa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d014      	beq.n	80050dc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fe fcf2 	bl	8003aa0 <LL_ADC_REG_IsConversionOngoing>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00c      	beq.n	80050dc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fe fcaf 	bl	8003a2a <LL_ADC_IsDisableOngoing>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d104      	bne.n	80050dc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fe fcce 	bl	8003a78 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d014      	beq.n	800510c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fe fd02 	bl	8003af0 <LL_ADC_INJ_IsConversionOngoing>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00c      	beq.n	800510c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fe fc97 	bl	8003a2a <LL_ADC_IsDisableOngoing>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d104      	bne.n	800510c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f7fe fcde 	bl	8003ac8 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d005      	beq.n	800511e <ADC_ConversionStop+0x10e>
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	2b03      	cmp	r3, #3
 8005116:	d105      	bne.n	8005124 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005118:	230c      	movs	r3, #12
 800511a:	617b      	str	r3, [r7, #20]
        break;
 800511c:	e005      	b.n	800512a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800511e:	2308      	movs	r3, #8
 8005120:	617b      	str	r3, [r7, #20]
        break;
 8005122:	e002      	b.n	800512a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005124:	2304      	movs	r3, #4
 8005126:	617b      	str	r3, [r7, #20]
        break;
 8005128:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800512a:	f7fe f94f 	bl	80033cc <HAL_GetTick>
 800512e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005130:	e01b      	b.n	800516a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005132:	f7fe f94b 	bl	80033cc <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b05      	cmp	r3, #5
 800513e:	d914      	bls.n	800516a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	4013      	ands	r3, r2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00d      	beq.n	800516a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005152:	f043 0210 	orr.w	r2, r3, #16
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800515e:	f043 0201 	orr.w	r2, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e007      	b.n	800517a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	4013      	ands	r3, r2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1dc      	bne.n	8005132 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3720      	adds	r7, #32
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	000cdbff 	.word	0x000cdbff

08005188 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4618      	mov	r0, r3
 8005196:	f7fe fc35 	bl	8003a04 <LL_ADC_IsEnabled>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d16e      	bne.n	800527e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	4b38      	ldr	r3, [pc, #224]	@ (8005288 <ADC_Enable+0x100>)
 80051a8:	4013      	ands	r3, r2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00d      	beq.n	80051ca <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051b2:	f043 0210 	orr.w	r2, r3, #16
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051be:	f043 0201 	orr.w	r2, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e05a      	b.n	8005280 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fe fbf0 	bl	80039b4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80051d4:	f7fe f8fa 	bl	80033cc <HAL_GetTick>
 80051d8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a2b      	ldr	r2, [pc, #172]	@ (800528c <ADC_Enable+0x104>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d004      	beq.n	80051ee <ADC_Enable+0x66>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a29      	ldr	r2, [pc, #164]	@ (8005290 <ADC_Enable+0x108>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d101      	bne.n	80051f2 <ADC_Enable+0x6a>
 80051ee:	4b29      	ldr	r3, [pc, #164]	@ (8005294 <ADC_Enable+0x10c>)
 80051f0:	e000      	b.n	80051f4 <ADC_Enable+0x6c>
 80051f2:	4b29      	ldr	r3, [pc, #164]	@ (8005298 <ADC_Enable+0x110>)
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fe fb73 	bl	80038e0 <LL_ADC_GetMultimode>
 80051fa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a23      	ldr	r2, [pc, #140]	@ (8005290 <ADC_Enable+0x108>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d002      	beq.n	800520c <ADC_Enable+0x84>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	e000      	b.n	800520e <ADC_Enable+0x86>
 800520c:	4b1f      	ldr	r3, [pc, #124]	@ (800528c <ADC_Enable+0x104>)
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6812      	ldr	r2, [r2, #0]
 8005212:	4293      	cmp	r3, r2
 8005214:	d02c      	beq.n	8005270 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d130      	bne.n	800527e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800521c:	e028      	b.n	8005270 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f7fe fbee 	bl	8003a04 <LL_ADC_IsEnabled>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d104      	bne.n	8005238 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4618      	mov	r0, r3
 8005234:	f7fe fbbe 	bl	80039b4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005238:	f7fe f8c8 	bl	80033cc <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d914      	bls.n	8005270 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b01      	cmp	r3, #1
 8005252:	d00d      	beq.n	8005270 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005258:	f043 0210 	orr.w	r2, r3, #16
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005264:	f043 0201 	orr.w	r2, r3, #1
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e007      	b.n	8005280 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b01      	cmp	r3, #1
 800527c:	d1cf      	bne.n	800521e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	8000003f 	.word	0x8000003f
 800528c:	40022000 	.word	0x40022000
 8005290:	40022100 	.word	0x40022100
 8005294:	40022300 	.word	0x40022300
 8005298:	58026300 	.word	0x58026300

0800529c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fe fbbe 	bl	8003a2a <LL_ADC_IsDisableOngoing>
 80052ae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fe fba5 	bl	8003a04 <LL_ADC_IsEnabled>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d047      	beq.n	8005350 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d144      	bne.n	8005350 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 030d 	and.w	r3, r3, #13
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d10c      	bne.n	80052ee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4618      	mov	r0, r3
 80052da:	f7fe fb7f 	bl	80039dc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2203      	movs	r2, #3
 80052e4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80052e6:	f7fe f871 	bl	80033cc <HAL_GetTick>
 80052ea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80052ec:	e029      	b.n	8005342 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052f2:	f043 0210 	orr.w	r2, r3, #16
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052fe:	f043 0201 	orr.w	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e023      	b.n	8005352 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800530a:	f7fe f85f 	bl	80033cc <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d914      	bls.n	8005342 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00d      	beq.n	8005342 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800532a:	f043 0210 	orr.w	r2, r3, #16
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005336:	f043 0201 	orr.w	r2, r3, #1
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e007      	b.n	8005352 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1dc      	bne.n	800530a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b084      	sub	sp, #16
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005366:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800536c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005370:	2b00      	cmp	r3, #0
 8005372:	d14b      	bne.n	800540c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005378:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	2b00      	cmp	r3, #0
 800538c:	d021      	beq.n	80053d2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4618      	mov	r0, r3
 8005394:	f7fe f9aa 	bl	80036ec <LL_ADC_REG_IsTriggerSourceSWStart>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d032      	beq.n	8005404 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d12b      	bne.n	8005404 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d11f      	bne.n	8005404 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053c8:	f043 0201 	orr.w	r2, r3, #1
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	661a      	str	r2, [r3, #96]	@ 0x60
 80053d0:	e018      	b.n	8005404 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f003 0303 	and.w	r3, r3, #3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d111      	bne.n	8005404 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d105      	bne.n	8005404 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053fc:	f043 0201 	orr.w	r2, r3, #1
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f7ff f907 	bl	8004618 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800540a:	e00e      	b.n	800542a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f7ff f91b 	bl	8004654 <HAL_ADC_ErrorCallback>
}
 800541e:	e004      	b.n	800542a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	4798      	blx	r3
}
 800542a:	bf00      	nop
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b084      	sub	sp, #16
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f7ff f8f3 	bl	800462c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005446:	bf00      	nop
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b084      	sub	sp, #16
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005460:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800546c:	f043 0204 	orr.w	r2, r3, #4
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f7ff f8ed 	bl	8004654 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800547a:	bf00      	nop
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a6c      	ldr	r2, [pc, #432]	@ (8005644 <ADC_ConfigureBoostMode+0x1c0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d004      	beq.n	80054a0 <ADC_ConfigureBoostMode+0x1c>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a6b      	ldr	r2, [pc, #428]	@ (8005648 <ADC_ConfigureBoostMode+0x1c4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d109      	bne.n	80054b4 <ADC_ConfigureBoostMode+0x30>
 80054a0:	4b6a      	ldr	r3, [pc, #424]	@ (800564c <ADC_ConfigureBoostMode+0x1c8>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	bf14      	ite	ne
 80054ac:	2301      	movne	r3, #1
 80054ae:	2300      	moveq	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	e008      	b.n	80054c6 <ADC_ConfigureBoostMode+0x42>
 80054b4:	4b66      	ldr	r3, [pc, #408]	@ (8005650 <ADC_ConfigureBoostMode+0x1cc>)
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	bf14      	ite	ne
 80054c0:	2301      	movne	r3, #1
 80054c2:	2300      	moveq	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d01c      	beq.n	8005504 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80054ca:	f008 f8ef 	bl	800d6ac <HAL_RCC_GetHCLKFreq>
 80054ce:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80054d8:	d010      	beq.n	80054fc <ADC_ConfigureBoostMode+0x78>
 80054da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80054de:	d873      	bhi.n	80055c8 <ADC_ConfigureBoostMode+0x144>
 80054e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054e4:	d002      	beq.n	80054ec <ADC_ConfigureBoostMode+0x68>
 80054e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80054ea:	d16d      	bne.n	80055c8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	0c1b      	lsrs	r3, r3, #16
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f8:	60fb      	str	r3, [r7, #12]
        break;
 80054fa:	e068      	b.n	80055ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	089b      	lsrs	r3, r3, #2
 8005500:	60fb      	str	r3, [r7, #12]
        break;
 8005502:	e064      	b.n	80055ce <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005504:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005508:	f04f 0100 	mov.w	r1, #0
 800550c:	f009 faca 	bl	800eaa4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005510:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800551a:	d051      	beq.n	80055c0 <ADC_ConfigureBoostMode+0x13c>
 800551c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005520:	d854      	bhi.n	80055cc <ADC_ConfigureBoostMode+0x148>
 8005522:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005526:	d047      	beq.n	80055b8 <ADC_ConfigureBoostMode+0x134>
 8005528:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800552c:	d84e      	bhi.n	80055cc <ADC_ConfigureBoostMode+0x148>
 800552e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005532:	d03d      	beq.n	80055b0 <ADC_ConfigureBoostMode+0x12c>
 8005534:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005538:	d848      	bhi.n	80055cc <ADC_ConfigureBoostMode+0x148>
 800553a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800553e:	d033      	beq.n	80055a8 <ADC_ConfigureBoostMode+0x124>
 8005540:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005544:	d842      	bhi.n	80055cc <ADC_ConfigureBoostMode+0x148>
 8005546:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800554a:	d029      	beq.n	80055a0 <ADC_ConfigureBoostMode+0x11c>
 800554c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005550:	d83c      	bhi.n	80055cc <ADC_ConfigureBoostMode+0x148>
 8005552:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005556:	d01a      	beq.n	800558e <ADC_ConfigureBoostMode+0x10a>
 8005558:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800555c:	d836      	bhi.n	80055cc <ADC_ConfigureBoostMode+0x148>
 800555e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005562:	d014      	beq.n	800558e <ADC_ConfigureBoostMode+0x10a>
 8005564:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005568:	d830      	bhi.n	80055cc <ADC_ConfigureBoostMode+0x148>
 800556a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800556e:	d00e      	beq.n	800558e <ADC_ConfigureBoostMode+0x10a>
 8005570:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005574:	d82a      	bhi.n	80055cc <ADC_ConfigureBoostMode+0x148>
 8005576:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800557a:	d008      	beq.n	800558e <ADC_ConfigureBoostMode+0x10a>
 800557c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005580:	d824      	bhi.n	80055cc <ADC_ConfigureBoostMode+0x148>
 8005582:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005586:	d002      	beq.n	800558e <ADC_ConfigureBoostMode+0x10a>
 8005588:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800558c:	d11e      	bne.n	80055cc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	0c9b      	lsrs	r3, r3, #18
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	fbb2 f3f3 	udiv	r3, r2, r3
 800559c:	60fb      	str	r3, [r7, #12]
        break;
 800559e:	e016      	b.n	80055ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	091b      	lsrs	r3, r3, #4
 80055a4:	60fb      	str	r3, [r7, #12]
        break;
 80055a6:	e012      	b.n	80055ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	095b      	lsrs	r3, r3, #5
 80055ac:	60fb      	str	r3, [r7, #12]
        break;
 80055ae:	e00e      	b.n	80055ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	099b      	lsrs	r3, r3, #6
 80055b4:	60fb      	str	r3, [r7, #12]
        break;
 80055b6:	e00a      	b.n	80055ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	09db      	lsrs	r3, r3, #7
 80055bc:	60fb      	str	r3, [r7, #12]
        break;
 80055be:	e006      	b.n	80055ce <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	0a1b      	lsrs	r3, r3, #8
 80055c4:	60fb      	str	r3, [r7, #12]
        break;
 80055c6:	e002      	b.n	80055ce <ADC_ConfigureBoostMode+0x14a>
        break;
 80055c8:	bf00      	nop
 80055ca:	e000      	b.n	80055ce <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80055cc:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	085b      	lsrs	r3, r3, #1
 80055d2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005654 <ADC_ConfigureBoostMode+0x1d0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d808      	bhi.n	80055ee <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689a      	ldr	r2, [r3, #8]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80055ea:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80055ec:	e025      	b.n	800563a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4a19      	ldr	r2, [pc, #100]	@ (8005658 <ADC_ConfigureBoostMode+0x1d4>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d80a      	bhi.n	800560c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005608:	609a      	str	r2, [r3, #8]
}
 800560a:	e016      	b.n	800563a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4a13      	ldr	r2, [pc, #76]	@ (800565c <ADC_ConfigureBoostMode+0x1d8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d80a      	bhi.n	800562a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005626:	609a      	str	r2, [r3, #8]
}
 8005628:	e007      	b.n	800563a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005638:	609a      	str	r2, [r3, #8]
}
 800563a:	bf00      	nop
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	40022000 	.word	0x40022000
 8005648:	40022100 	.word	0x40022100
 800564c:	40022300 	.word	0x40022300
 8005650:	58026300 	.word	0x58026300
 8005654:	005f5e10 	.word	0x005f5e10
 8005658:	00bebc20 	.word	0x00bebc20
 800565c:	017d7840 	.word	0x017d7840

08005660 <LL_ADC_IsEnabled>:
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <LL_ADC_IsEnabled+0x18>
 8005674:	2301      	movs	r3, #1
 8005676:	e000      	b.n	800567a <LL_ADC_IsEnabled+0x1a>
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <LL_ADC_REG_IsConversionOngoing>:
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f003 0304 	and.w	r3, r3, #4
 8005696:	2b04      	cmp	r3, #4
 8005698:	d101      	bne.n	800569e <LL_ADC_REG_IsConversionOngoing+0x18>
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005710:	b590      	push	{r4, r7, lr}
 8005712:	b0a3      	sub	sp, #140	@ 0x8c
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800571a:	2300      	movs	r3, #0
 800571c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005726:	2b01      	cmp	r3, #1
 8005728:	d101      	bne.n	800572e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800572a:	2302      	movs	r3, #2
 800572c:	e0c1      	b.n	80058b2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005736:	2300      	movs	r3, #0
 8005738:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800573a:	2300      	movs	r3, #0
 800573c:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a5e      	ldr	r2, [pc, #376]	@ (80058bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d102      	bne.n	800574e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005748:	4b5d      	ldr	r3, [pc, #372]	@ (80058c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	e001      	b.n	8005752 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800574e:	2300      	movs	r3, #0
 8005750:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10b      	bne.n	8005770 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800575c:	f043 0220 	orr.w	r2, r3, #32
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e0a0      	b.n	80058b2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff ff87 	bl	8005686 <LL_ADC_REG_IsConversionOngoing>
 8005778:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4618      	mov	r0, r3
 8005782:	f7ff ff80 	bl	8005686 <LL_ADC_REG_IsConversionOngoing>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	f040 8081 	bne.w	8005890 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800578e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005792:	2b00      	cmp	r3, #0
 8005794:	d17c      	bne.n	8005890 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a48      	ldr	r2, [pc, #288]	@ (80058bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d004      	beq.n	80057aa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a46      	ldr	r2, [pc, #280]	@ (80058c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d101      	bne.n	80057ae <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80057aa:	4b46      	ldr	r3, [pc, #280]	@ (80058c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80057ac:	e000      	b.n	80057b0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80057ae:	4b46      	ldr	r3, [pc, #280]	@ (80058c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80057b0:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d039      	beq.n	800582e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80057ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	431a      	orrs	r2, r3
 80057c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a3a      	ldr	r2, [pc, #232]	@ (80058bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d004      	beq.n	80057e0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a39      	ldr	r2, [pc, #228]	@ (80058c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d10e      	bne.n	80057fe <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80057e0:	4836      	ldr	r0, [pc, #216]	@ (80058bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80057e2:	f7ff ff3d 	bl	8005660 <LL_ADC_IsEnabled>
 80057e6:	4604      	mov	r4, r0
 80057e8:	4835      	ldr	r0, [pc, #212]	@ (80058c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80057ea:	f7ff ff39 	bl	8005660 <LL_ADC_IsEnabled>
 80057ee:	4603      	mov	r3, r0
 80057f0:	4323      	orrs	r3, r4
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	bf0c      	ite	eq
 80057f6:	2301      	moveq	r3, #1
 80057f8:	2300      	movne	r3, #0
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	e008      	b.n	8005810 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80057fe:	4833      	ldr	r0, [pc, #204]	@ (80058cc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005800:	f7ff ff2e 	bl	8005660 <LL_ADC_IsEnabled>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	bf0c      	ite	eq
 800580a:	2301      	moveq	r3, #1
 800580c:	2300      	movne	r3, #0
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	d047      	beq.n	80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005814:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	4b2d      	ldr	r3, [pc, #180]	@ (80058d0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800581a:	4013      	ands	r3, r2
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	6811      	ldr	r1, [r2, #0]
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	6892      	ldr	r2, [r2, #8]
 8005824:	430a      	orrs	r2, r1
 8005826:	431a      	orrs	r2, r3
 8005828:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800582a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800582c:	e03a      	b.n	80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800582e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005836:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005838:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a1f      	ldr	r2, [pc, #124]	@ (80058bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d004      	beq.n	800584e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a1d      	ldr	r2, [pc, #116]	@ (80058c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d10e      	bne.n	800586c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800584e:	481b      	ldr	r0, [pc, #108]	@ (80058bc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005850:	f7ff ff06 	bl	8005660 <LL_ADC_IsEnabled>
 8005854:	4604      	mov	r4, r0
 8005856:	481a      	ldr	r0, [pc, #104]	@ (80058c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005858:	f7ff ff02 	bl	8005660 <LL_ADC_IsEnabled>
 800585c:	4603      	mov	r3, r0
 800585e:	4323      	orrs	r3, r4
 8005860:	2b00      	cmp	r3, #0
 8005862:	bf0c      	ite	eq
 8005864:	2301      	moveq	r3, #1
 8005866:	2300      	movne	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	e008      	b.n	800587e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800586c:	4817      	ldr	r0, [pc, #92]	@ (80058cc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800586e:	f7ff fef7 	bl	8005660 <LL_ADC_IsEnabled>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	bf0c      	ite	eq
 8005878:	2301      	moveq	r3, #1
 800587a:	2300      	movne	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d010      	beq.n	80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005882:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	4b12      	ldr	r3, [pc, #72]	@ (80058d0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005888:	4013      	ands	r3, r2
 800588a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800588c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800588e:	e009      	b.n	80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005894:	f043 0220 	orr.w	r2, r3, #32
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80058a2:	e000      	b.n	80058a6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80058ae:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	378c      	adds	r7, #140	@ 0x8c
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd90      	pop	{r4, r7, pc}
 80058ba:	bf00      	nop
 80058bc:	40022000 	.word	0x40022000
 80058c0:	40022100 	.word	0x40022100
 80058c4:	40022300 	.word	0x40022300
 80058c8:	58026300 	.word	0x58026300
 80058cc:	58026000 	.word	0x58026000
 80058d0:	fffff0e0 	.word	0xfffff0e0

080058d4 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e023      	b.n	800592e <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7fb f894 	bl	8000a28 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <HAL_CORDIC_CalculateCpltCallback>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
__weak void HAL_CORDIC_CalculateCpltCallback(CORDIC_HandleTypeDef *hcordic)
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  UNUSED(hcordic);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CORDIC_CalculateCpltCallback can be implemented in the user file
   */
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <HAL_CORDIC_IRQHandler>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
void HAL_CORDIC_IRQHandler(CORDIC_HandleTypeDef *hcordic)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b082      	sub	sp, #8
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  /* Check if calculation complete interrupt is enabled and if result ready
     flag is raised */
  if (__HAL_CORDIC_GET_IT_SOURCE(hcordic, CORDIC_IT_IEN) != 0U)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d039      	beq.n	80059d4 <HAL_CORDIC_IRQHandler+0x8a>
  {
    if (__HAL_CORDIC_GET_FLAG(hcordic, CORDIC_FLAG_RRDY) != 0U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800596a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800596e:	d101      	bne.n	8005974 <HAL_CORDIC_IRQHandler+0x2a>
 8005970:	2301      	movs	r3, #1
 8005972:	e000      	b.n	8005976 <HAL_CORDIC_IRQHandler+0x2c>
 8005974:	2300      	movs	r3, #0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d02c      	beq.n	80059d4 <HAL_CORDIC_IRQHandler+0x8a>
    {
      /* Decrement number of calculations to get */
      hcordic->NbCalcToGet--;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	1e5a      	subs	r2, r3, #1
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	611a      	str	r2, [r3, #16]

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &(hcordic->pOutBuff));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	3308      	adds	r3, #8
 8005988:	4619      	mov	r1, r3
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f84f 	bl	8005a2e <CORDIC_ReadOutDataIncrementPtr>

      /* Check if calculations are still to be ordered */
      if (hcordic->NbCalcToOrder > 0U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00a      	beq.n	80059ae <HAL_CORDIC_IRQHandler+0x64>
      {
        /* Decrement number of calculations to order */
        hcordic->NbCalcToOrder--;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	1e5a      	subs	r2, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	60da      	str	r2, [r3, #12]

        /* Continue the processing by providing another write of input data
           in the Write Data register, and increment input buffer pointer */
        CORDIC_WriteInDataIncrementPtr(hcordic, &(hcordic->pInBuff));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	3304      	adds	r3, #4
 80059a6:	4619      	mov	r1, r3
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f817 	bl	80059dc <CORDIC_WriteInDataIncrementPtr>
      }

      /* Check if all calculations results are got */
      if (hcordic->NbCalcToGet == 0U)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10e      	bne.n	80059d4 <HAL_CORDIC_IRQHandler+0x8a>
      {
        /* Disable Result Ready Interrupt */
        __HAL_CORDIC_DISABLE_IT(hcordic, CORDIC_IT_IEN);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80059c4:	601a      	str	r2, [r3, #0]

        /* Change the CORDIC state */
        hcordic->State = HAL_CORDIC_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
#if USE_HAL_CORDIC_REGISTER_CALLBACKS == 1
        /*Call registered callback*/
        hcordic->CalculateCpltCallback(hcordic);
#else
        /*Call legacy weak callback*/
        HAL_CORDIC_CalculateCpltCallback(hcordic);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7ff ffb1 	bl	8005936 <HAL_CORDIC_CalculateCpltCallback>
#endif /* USE_HAL_CORDIC_REGISTER_CALLBACKS */
      }
    }
  }
}
 80059d4:	bf00      	nop
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, const int32_t **ppInBuff)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	1d1a      	adds	r2, r3, #4
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a0a:	d10a      	bne.n	8005a22 <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	1d1a      	adds	r2, r3, #4
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	601a      	str	r2, [r3, #0]
  }
}
 8005a22:	bf00      	nop
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	1d1a      	adds	r2, r3, #4
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a58:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005a5c:	d10a      	bne.n	8005a74 <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	1d1a      	adds	r2, r3, #4
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	601a      	str	r2, [r3, #0]
  }
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a90:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac0 <__NVIC_SetPriorityGrouping+0x40>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005aa8:	4b06      	ldr	r3, [pc, #24]	@ (8005ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005aae:	4a04      	ldr	r2, [pc, #16]	@ (8005ac0 <__NVIC_SetPriorityGrouping+0x40>)
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	60d3      	str	r3, [r2, #12]
}
 8005ab4:	bf00      	nop
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	e000ed00 	.word	0xe000ed00
 8005ac4:	05fa0000 	.word	0x05fa0000

08005ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005acc:	4b04      	ldr	r3, [pc, #16]	@ (8005ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	0a1b      	lsrs	r3, r3, #8
 8005ad2:	f003 0307 	and.w	r3, r3, #7
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	e000ed00 	.word	0xe000ed00

08005ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	4603      	mov	r3, r0
 8005aec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	db0b      	blt.n	8005b0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005af6:	88fb      	ldrh	r3, [r7, #6]
 8005af8:	f003 021f 	and.w	r2, r3, #31
 8005afc:	4907      	ldr	r1, [pc, #28]	@ (8005b1c <__NVIC_EnableIRQ+0x38>)
 8005afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	2001      	movs	r0, #1
 8005b06:	fa00 f202 	lsl.w	r2, r0, r2
 8005b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b0e:	bf00      	nop
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	e000e100 	.word	0xe000e100

08005b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	6039      	str	r1, [r7, #0]
 8005b2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	db0a      	blt.n	8005b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	490c      	ldr	r1, [pc, #48]	@ (8005b6c <__NVIC_SetPriority+0x4c>)
 8005b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b3e:	0112      	lsls	r2, r2, #4
 8005b40:	b2d2      	uxtb	r2, r2
 8005b42:	440b      	add	r3, r1
 8005b44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b48:	e00a      	b.n	8005b60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	4908      	ldr	r1, [pc, #32]	@ (8005b70 <__NVIC_SetPriority+0x50>)
 8005b50:	88fb      	ldrh	r3, [r7, #6]
 8005b52:	f003 030f 	and.w	r3, r3, #15
 8005b56:	3b04      	subs	r3, #4
 8005b58:	0112      	lsls	r2, r2, #4
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	440b      	add	r3, r1
 8005b5e:	761a      	strb	r2, [r3, #24]
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	e000e100 	.word	0xe000e100
 8005b70:	e000ed00 	.word	0xe000ed00

08005b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b089      	sub	sp, #36	@ 0x24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	f1c3 0307 	rsb	r3, r3, #7
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	bf28      	it	cs
 8005b92:	2304      	movcs	r3, #4
 8005b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	3304      	adds	r3, #4
 8005b9a:	2b06      	cmp	r3, #6
 8005b9c:	d902      	bls.n	8005ba4 <NVIC_EncodePriority+0x30>
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	3b03      	subs	r3, #3
 8005ba2:	e000      	b.n	8005ba6 <NVIC_EncodePriority+0x32>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb2:	43da      	mvns	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	401a      	ands	r2, r3
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc6:	43d9      	mvns	r1, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bcc:	4313      	orrs	r3, r2
         );
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3724      	adds	r7, #36	@ 0x24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
	...

08005bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005bec:	d301      	bcc.n	8005bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e00f      	b.n	8005c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8005c1c <SysTick_Config+0x40>)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bfa:	210f      	movs	r1, #15
 8005bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005c00:	f7ff ff8e 	bl	8005b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c04:	4b05      	ldr	r3, [pc, #20]	@ (8005c1c <SysTick_Config+0x40>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c0a:	4b04      	ldr	r3, [pc, #16]	@ (8005c1c <SysTick_Config+0x40>)
 8005c0c:	2207      	movs	r2, #7
 8005c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	e000e010 	.word	0xe000e010

08005c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff ff29 	bl	8005a80 <__NVIC_SetPriorityGrouping>
}
 8005c2e:	bf00      	nop
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b086      	sub	sp, #24
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	607a      	str	r2, [r7, #4]
 8005c42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005c44:	f7ff ff40 	bl	8005ac8 <__NVIC_GetPriorityGrouping>
 8005c48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	6978      	ldr	r0, [r7, #20]
 8005c50:	f7ff ff90 	bl	8005b74 <NVIC_EncodePriority>
 8005c54:	4602      	mov	r2, r0
 8005c56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7ff ff5f 	bl	8005b20 <__NVIC_SetPriority>
}
 8005c62:	bf00      	nop
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b082      	sub	sp, #8
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	4603      	mov	r3, r0
 8005c72:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7ff ff33 	bl	8005ae4 <__NVIC_EnableIRQ>
}
 8005c7e:	bf00      	nop
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b082      	sub	sp, #8
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f7ff ffa4 	bl	8005bdc <SysTick_Config>
 8005c94:	4603      	mov	r3, r0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
	...

08005ca0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005ca4:	f3bf 8f5f 	dmb	sy
}
 8005ca8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005caa:	4b07      	ldr	r3, [pc, #28]	@ (8005cc8 <HAL_MPU_Disable+0x28>)
 8005cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cae:	4a06      	ldr	r2, [pc, #24]	@ (8005cc8 <HAL_MPU_Disable+0x28>)
 8005cb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cb4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005cb6:	4b05      	ldr	r3, [pc, #20]	@ (8005ccc <HAL_MPU_Disable+0x2c>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	605a      	str	r2, [r3, #4]
}
 8005cbc:	bf00      	nop
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	e000ed00 	.word	0xe000ed00
 8005ccc:	e000ed90 	.word	0xe000ed90

08005cd0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8005d08 <HAL_MPU_Enable+0x38>)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8005d0c <HAL_MPU_Enable+0x3c>)
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce6:	4a09      	ldr	r2, [pc, #36]	@ (8005d0c <HAL_MPU_Enable+0x3c>)
 8005ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cec:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005cee:	f3bf 8f4f 	dsb	sy
}
 8005cf2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005cf4:	f3bf 8f6f 	isb	sy
}
 8005cf8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	e000ed90 	.word	0xe000ed90
 8005d0c:	e000ed00 	.word	0xe000ed00

08005d10 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	785a      	ldrb	r2, [r3, #1]
 8005d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005d8c <HAL_MPU_ConfigRegion+0x7c>)
 8005d1e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005d20:	4b1a      	ldr	r3, [pc, #104]	@ (8005d8c <HAL_MPU_ConfigRegion+0x7c>)
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	4a19      	ldr	r2, [pc, #100]	@ (8005d8c <HAL_MPU_ConfigRegion+0x7c>)
 8005d26:	f023 0301 	bic.w	r3, r3, #1
 8005d2a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005d2c:	4a17      	ldr	r2, [pc, #92]	@ (8005d8c <HAL_MPU_ConfigRegion+0x7c>)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	7b1b      	ldrb	r3, [r3, #12]
 8005d38:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	7adb      	ldrb	r3, [r3, #11]
 8005d3e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005d40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	7a9b      	ldrb	r3, [r3, #10]
 8005d46:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005d48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	7b5b      	ldrb	r3, [r3, #13]
 8005d4e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005d50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	7b9b      	ldrb	r3, [r3, #14]
 8005d56:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005d58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	7bdb      	ldrb	r3, [r3, #15]
 8005d5e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005d60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	7a5b      	ldrb	r3, [r3, #9]
 8005d66:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005d68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	7a1b      	ldrb	r3, [r3, #8]
 8005d6e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005d70:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	7812      	ldrb	r2, [r2, #0]
 8005d76:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005d78:	4a04      	ldr	r2, [pc, #16]	@ (8005d8c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005d7a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005d7c:	6113      	str	r3, [r2, #16]
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	e000ed90 	.word	0xe000ed90

08005d90 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e014      	b.n	8005dcc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	791b      	ldrb	r3, [r3, #4]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d105      	bne.n	8005db8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7fa fef6 	bl	8000ba4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e0a2      	b.n	8005f32 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	795b      	ldrb	r3, [r3, #5]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d101      	bne.n	8005df8 <HAL_DAC_Start_DMA+0x24>
 8005df4:	2302      	movs	r3, #2
 8005df6:	e09c      	b.n	8005f32 <HAL_DAC_Start_DMA+0x15e>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2202      	movs	r2, #2
 8005e02:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d129      	bne.n	8005e5e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	4a4b      	ldr	r2, [pc, #300]	@ (8005f3c <HAL_DAC_Start_DMA+0x168>)
 8005e10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	4a4a      	ldr	r2, [pc, #296]	@ (8005f40 <HAL_DAC_Start_DMA+0x16c>)
 8005e18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	4a49      	ldr	r2, [pc, #292]	@ (8005f44 <HAL_DAC_Start_DMA+0x170>)
 8005e20:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e30:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_DAC_Start_DMA+0x6c>
 8005e38:	6a3b      	ldr	r3, [r7, #32]
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d005      	beq.n	8005e4a <HAL_DAC_Start_DMA+0x76>
 8005e3e:	e009      	b.n	8005e54 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	3308      	adds	r3, #8
 8005e46:	613b      	str	r3, [r7, #16]
        break;
 8005e48:	e033      	b.n	8005eb2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	330c      	adds	r3, #12
 8005e50:	613b      	str	r3, [r7, #16]
        break;
 8005e52:	e02e      	b.n	8005eb2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3310      	adds	r3, #16
 8005e5a:	613b      	str	r3, [r7, #16]
        break;
 8005e5c:	e029      	b.n	8005eb2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	4a39      	ldr	r2, [pc, #228]	@ (8005f48 <HAL_DAC_Start_DMA+0x174>)
 8005e64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	4a38      	ldr	r2, [pc, #224]	@ (8005f4c <HAL_DAC_Start_DMA+0x178>)
 8005e6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	4a37      	ldr	r2, [pc, #220]	@ (8005f50 <HAL_DAC_Start_DMA+0x17c>)
 8005e74:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005e84:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_DAC_Start_DMA+0xc0>
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d005      	beq.n	8005e9e <HAL_DAC_Start_DMA+0xca>
 8005e92:	e009      	b.n	8005ea8 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3314      	adds	r3, #20
 8005e9a:	613b      	str	r3, [r7, #16]
        break;
 8005e9c:	e009      	b.n	8005eb2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3318      	adds	r3, #24
 8005ea4:	613b      	str	r3, [r7, #16]
        break;
 8005ea6:	e004      	b.n	8005eb2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	331c      	adds	r3, #28
 8005eae:	613b      	str	r3, [r7, #16]
        break;
 8005eb0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d111      	bne.n	8005edc <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ec6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6898      	ldr	r0, [r3, #8]
 8005ecc:	6879      	ldr	r1, [r7, #4]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	f000 fd85 	bl	80069e0 <HAL_DMA_Start_IT>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	75fb      	strb	r3, [r7, #23]
 8005eda:	e010      	b.n	8005efe <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8005eea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	68d8      	ldr	r0, [r3, #12]
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	f000 fd73 	bl	80069e0 <HAL_DMA_Start_IT>
 8005efa:	4603      	mov	r3, r0
 8005efc:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005f04:	7dfb      	ldrb	r3, [r7, #23]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10c      	bne.n	8005f24 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6819      	ldr	r1, [r3, #0]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f003 0310 	and.w	r3, r3, #16
 8005f16:	2201      	movs	r2, #1
 8005f18:	409a      	lsls	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	e005      	b.n	8005f30 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	f043 0204 	orr.w	r2, r3, #4
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3718      	adds	r7, #24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	0800621d 	.word	0x0800621d
 8005f40:	0800623f 	.word	0x0800623f
 8005f44:	0800625b 	.word	0x0800625b
 8005f48:	080062c5 	.word	0x080062c5
 8005f4c:	080062e7 	.word	0x080062e7
 8005f50:	08006303 	.word	0x08006303

08005f54 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08a      	sub	sp, #40	@ 0x28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <HAL_DAC_ConfigChannel+0x1e>
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e12d      	b.n	800620e <HAL_DAC_ConfigChannel+0x27e>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b04      	cmp	r3, #4
    }
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	795b      	ldrb	r3, [r3, #5]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d101      	bne.n	8005fc4 <HAL_DAC_ConfigChannel+0x34>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e124      	b.n	800620e <HAL_DAC_ConfigChannel+0x27e>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2202      	movs	r2, #2
 8005fce:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b04      	cmp	r3, #4
 8005fd6:	d17a      	bne.n	80060ce <HAL_DAC_ConfigChannel+0x13e>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005fd8:	f7fd f9f8 	bl	80033cc <HAL_GetTick>
 8005fdc:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d13d      	bne.n	8006060 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005fe4:	e018      	b.n	8006018 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005fe6:	f7fd f9f1 	bl	80033cc <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d911      	bls.n	8006018 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ffa:	4b87      	ldr	r3, [pc, #540]	@ (8006218 <HAL_DAC_ConfigChannel+0x288>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00a      	beq.n	8006018 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	f043 0208 	orr.w	r2, r3, #8
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2203      	movs	r2, #3
 8006012:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e0fa      	b.n	800620e <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800601e:	4b7e      	ldr	r3, [pc, #504]	@ (8006218 <HAL_DAC_ConfigChannel+0x288>)
 8006020:	4013      	ands	r3, r2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1df      	bne.n	8005fe6 <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	6992      	ldr	r2, [r2, #24]
 800602e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006030:	e020      	b.n	8006074 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006032:	f7fd f9cb 	bl	80033cc <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b01      	cmp	r3, #1
 800603e:	d90f      	bls.n	8006060 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006046:	2b00      	cmp	r3, #0
 8006048:	da0a      	bge.n	8006060 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f043 0208 	orr.w	r2, r3, #8
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2203      	movs	r2, #3
 800605a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e0d6      	b.n	800620e <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006066:	2b00      	cmp	r3, #0
 8006068:	dbe3      	blt.n	8006032 <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	6992      	ldr	r2, [r2, #24]
 8006072:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f003 0310 	and.w	r3, r3, #16
 8006080:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8006084:	fa01 f303 	lsl.w	r3, r1, r3
 8006088:	43db      	mvns	r3, r3
 800608a:	ea02 0103 	and.w	r1, r2, r3
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	69da      	ldr	r2, [r3, #28]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f003 0310 	and.w	r3, r3, #16
 8006098:	409a      	lsls	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f003 0310 	and.w	r3, r3, #16
 80060ae:	21ff      	movs	r1, #255	@ 0xff
 80060b0:	fa01 f303 	lsl.w	r3, r1, r3
 80060b4:	43db      	mvns	r3, r3
 80060b6:	ea02 0103 	and.w	r1, r2, r3
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	6a1a      	ldr	r2, [r3, #32]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f003 0310 	and.w	r3, r3, #16
 80060c4:	409a      	lsls	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d11d      	bne.n	8006112 <HAL_DAC_ConfigChannel+0x182>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060dc:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f003 0310 	and.w	r3, r3, #16
 80060e4:	221f      	movs	r2, #31
 80060e6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ea:	43db      	mvns	r3, r3
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	4013      	ands	r3, r2
 80060f0:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f003 0310 	and.w	r3, r3, #16
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	fa02 f303 	lsl.w	r3, r2, r3
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	4313      	orrs	r3, r2
 8006108:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006118:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f003 0310 	and.w	r3, r3, #16
 8006120:	2207      	movs	r2, #7
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	43db      	mvns	r3, r3
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	4013      	ands	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d102      	bne.n	800613c <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = 0x00000000UL;
 8006136:	2300      	movs	r3, #0
 8006138:	627b      	str	r3, [r7, #36]	@ 0x24
 800613a:	e00f      	b.n	800615c <HAL_DAC_ConfigChannel+0x1cc>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	2b02      	cmp	r3, #2
 8006142:	d102      	bne.n	800614a <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006144:	2301      	movs	r3, #1
 8006146:	627b      	str	r3, [r7, #36]	@ 0x24
 8006148:	e008      	b.n	800615c <HAL_DAC_ConfigChannel+0x1cc>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d102      	bne.n	8006158 <HAL_DAC_ConfigChannel+0x1c8>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006152:	2301      	movs	r3, #1
 8006154:	627b      	str	r3, [r7, #36]	@ 0x24
 8006156:	e001      	b.n	800615c <HAL_DAC_ConfigChannel+0x1cc>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006158:	2300      	movs	r3, #0
 800615a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	4313      	orrs	r3, r2
 8006166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006168:	4313      	orrs	r3, r2
 800616a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f003 0310 	and.w	r3, r3, #16
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	fa02 f303 	lsl.w	r3, r2, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	4313      	orrs	r3, r2
 800617c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6819      	ldr	r1, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f003 0310 	and.w	r3, r3, #16
 8006192:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006196:	fa02 f303 	lsl.w	r3, r2, r3
 800619a:	43da      	mvns	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	400a      	ands	r2, r1
 80061a2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f003 0310 	and.w	r3, r3, #16
 80061b2:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80061b6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ba:	43db      	mvns	r3, r3
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	4013      	ands	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f003 0310 	and.w	r3, r3, #16
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6819      	ldr	r1, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f003 0310 	and.w	r3, r3, #16
 80061ee:	22c0      	movs	r2, #192	@ 0xc0
 80061f0:	fa02 f303 	lsl.w	r3, r2, r3
 80061f4:	43da      	mvns	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	400a      	ands	r2, r1
 80061fc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2201      	movs	r2, #1
 8006202:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800620a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800620e:	4618      	mov	r0, r3
 8006210:	3728      	adds	r7, #40	@ 0x28
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20008000 	.word	0x20008000

0800621c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006228:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f7ff fe92 	bl	8005f54 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2201      	movs	r2, #1
 8006234:	711a      	strb	r2, [r3, #4]
}
 8006236:	bf00      	nop
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b084      	sub	sp, #16
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f7ff fe8b 	bl	8005f68 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006252:	bf00      	nop
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b084      	sub	sp, #16
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006266:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	f043 0204 	orr.w	r2, r3, #4
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f7ff fe81 	bl	8005f7c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2201      	movs	r2, #1
 800627e:	711a      	strb	r2, [r3, #4]
}
 8006280:	bf00      	nop
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f7ff ffd8 	bl	8006288 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2201      	movs	r2, #1
 80062dc:	711a      	strb	r2, [r3, #4]
}
 80062de:	bf00      	nop
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b084      	sub	sp, #16
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f7ff ffd1 	bl	800629c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80062fa:	bf00      	nop
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	f043 0204 	orr.w	r2, r3, #4
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f7ff ffc7 	bl	80062b0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2201      	movs	r2, #1
 8006326:	711a      	strb	r2, [r3, #4]
}
 8006328:	bf00      	nop
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006338:	f7fd f848 	bl	80033cc <HAL_GetTick>
 800633c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e312      	b.n	800696e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a66      	ldr	r2, [pc, #408]	@ (80064e8 <HAL_DMA_Init+0x1b8>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d04a      	beq.n	80063e8 <HAL_DMA_Init+0xb8>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a65      	ldr	r2, [pc, #404]	@ (80064ec <HAL_DMA_Init+0x1bc>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d045      	beq.n	80063e8 <HAL_DMA_Init+0xb8>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a63      	ldr	r2, [pc, #396]	@ (80064f0 <HAL_DMA_Init+0x1c0>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d040      	beq.n	80063e8 <HAL_DMA_Init+0xb8>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a62      	ldr	r2, [pc, #392]	@ (80064f4 <HAL_DMA_Init+0x1c4>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d03b      	beq.n	80063e8 <HAL_DMA_Init+0xb8>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a60      	ldr	r2, [pc, #384]	@ (80064f8 <HAL_DMA_Init+0x1c8>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d036      	beq.n	80063e8 <HAL_DMA_Init+0xb8>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a5f      	ldr	r2, [pc, #380]	@ (80064fc <HAL_DMA_Init+0x1cc>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d031      	beq.n	80063e8 <HAL_DMA_Init+0xb8>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a5d      	ldr	r2, [pc, #372]	@ (8006500 <HAL_DMA_Init+0x1d0>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d02c      	beq.n	80063e8 <HAL_DMA_Init+0xb8>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a5c      	ldr	r2, [pc, #368]	@ (8006504 <HAL_DMA_Init+0x1d4>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d027      	beq.n	80063e8 <HAL_DMA_Init+0xb8>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a5a      	ldr	r2, [pc, #360]	@ (8006508 <HAL_DMA_Init+0x1d8>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d022      	beq.n	80063e8 <HAL_DMA_Init+0xb8>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a59      	ldr	r2, [pc, #356]	@ (800650c <HAL_DMA_Init+0x1dc>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d01d      	beq.n	80063e8 <HAL_DMA_Init+0xb8>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a57      	ldr	r2, [pc, #348]	@ (8006510 <HAL_DMA_Init+0x1e0>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d018      	beq.n	80063e8 <HAL_DMA_Init+0xb8>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a56      	ldr	r2, [pc, #344]	@ (8006514 <HAL_DMA_Init+0x1e4>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d013      	beq.n	80063e8 <HAL_DMA_Init+0xb8>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a54      	ldr	r2, [pc, #336]	@ (8006518 <HAL_DMA_Init+0x1e8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d00e      	beq.n	80063e8 <HAL_DMA_Init+0xb8>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a53      	ldr	r2, [pc, #332]	@ (800651c <HAL_DMA_Init+0x1ec>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d009      	beq.n	80063e8 <HAL_DMA_Init+0xb8>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a51      	ldr	r2, [pc, #324]	@ (8006520 <HAL_DMA_Init+0x1f0>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d004      	beq.n	80063e8 <HAL_DMA_Init+0xb8>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a50      	ldr	r2, [pc, #320]	@ (8006524 <HAL_DMA_Init+0x1f4>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d101      	bne.n	80063ec <HAL_DMA_Init+0xbc>
 80063e8:	2301      	movs	r3, #1
 80063ea:	e000      	b.n	80063ee <HAL_DMA_Init+0xbe>
 80063ec:	2300      	movs	r3, #0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f000 813c 	beq.w	800666c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a37      	ldr	r2, [pc, #220]	@ (80064e8 <HAL_DMA_Init+0x1b8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d04a      	beq.n	80064a4 <HAL_DMA_Init+0x174>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a36      	ldr	r2, [pc, #216]	@ (80064ec <HAL_DMA_Init+0x1bc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d045      	beq.n	80064a4 <HAL_DMA_Init+0x174>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a34      	ldr	r2, [pc, #208]	@ (80064f0 <HAL_DMA_Init+0x1c0>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d040      	beq.n	80064a4 <HAL_DMA_Init+0x174>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a33      	ldr	r2, [pc, #204]	@ (80064f4 <HAL_DMA_Init+0x1c4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d03b      	beq.n	80064a4 <HAL_DMA_Init+0x174>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a31      	ldr	r2, [pc, #196]	@ (80064f8 <HAL_DMA_Init+0x1c8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d036      	beq.n	80064a4 <HAL_DMA_Init+0x174>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a30      	ldr	r2, [pc, #192]	@ (80064fc <HAL_DMA_Init+0x1cc>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d031      	beq.n	80064a4 <HAL_DMA_Init+0x174>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a2e      	ldr	r2, [pc, #184]	@ (8006500 <HAL_DMA_Init+0x1d0>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d02c      	beq.n	80064a4 <HAL_DMA_Init+0x174>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a2d      	ldr	r2, [pc, #180]	@ (8006504 <HAL_DMA_Init+0x1d4>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d027      	beq.n	80064a4 <HAL_DMA_Init+0x174>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a2b      	ldr	r2, [pc, #172]	@ (8006508 <HAL_DMA_Init+0x1d8>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d022      	beq.n	80064a4 <HAL_DMA_Init+0x174>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a2a      	ldr	r2, [pc, #168]	@ (800650c <HAL_DMA_Init+0x1dc>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d01d      	beq.n	80064a4 <HAL_DMA_Init+0x174>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a28      	ldr	r2, [pc, #160]	@ (8006510 <HAL_DMA_Init+0x1e0>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d018      	beq.n	80064a4 <HAL_DMA_Init+0x174>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a27      	ldr	r2, [pc, #156]	@ (8006514 <HAL_DMA_Init+0x1e4>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d013      	beq.n	80064a4 <HAL_DMA_Init+0x174>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a25      	ldr	r2, [pc, #148]	@ (8006518 <HAL_DMA_Init+0x1e8>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00e      	beq.n	80064a4 <HAL_DMA_Init+0x174>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a24      	ldr	r2, [pc, #144]	@ (800651c <HAL_DMA_Init+0x1ec>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d009      	beq.n	80064a4 <HAL_DMA_Init+0x174>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a22      	ldr	r2, [pc, #136]	@ (8006520 <HAL_DMA_Init+0x1f0>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d004      	beq.n	80064a4 <HAL_DMA_Init+0x174>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a21      	ldr	r2, [pc, #132]	@ (8006524 <HAL_DMA_Init+0x1f4>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d108      	bne.n	80064b6 <HAL_DMA_Init+0x186>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 0201 	bic.w	r2, r2, #1
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	e007      	b.n	80064c6 <HAL_DMA_Init+0x196>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0201 	bic.w	r2, r2, #1
 80064c4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80064c6:	e02f      	b.n	8006528 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064c8:	f7fc ff80 	bl	80033cc <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b05      	cmp	r3, #5
 80064d4:	d928      	bls.n	8006528 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2220      	movs	r2, #32
 80064da:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2203      	movs	r2, #3
 80064e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e242      	b.n	800696e <HAL_DMA_Init+0x63e>
 80064e8:	40020010 	.word	0x40020010
 80064ec:	40020028 	.word	0x40020028
 80064f0:	40020040 	.word	0x40020040
 80064f4:	40020058 	.word	0x40020058
 80064f8:	40020070 	.word	0x40020070
 80064fc:	40020088 	.word	0x40020088
 8006500:	400200a0 	.word	0x400200a0
 8006504:	400200b8 	.word	0x400200b8
 8006508:	40020410 	.word	0x40020410
 800650c:	40020428 	.word	0x40020428
 8006510:	40020440 	.word	0x40020440
 8006514:	40020458 	.word	0x40020458
 8006518:	40020470 	.word	0x40020470
 800651c:	40020488 	.word	0x40020488
 8006520:	400204a0 	.word	0x400204a0
 8006524:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1c8      	bne.n	80064c8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	4b83      	ldr	r3, [pc, #524]	@ (8006750 <HAL_DMA_Init+0x420>)
 8006542:	4013      	ands	r3, r2
 8006544:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800654e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800655a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006566:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006578:	2b04      	cmp	r3, #4
 800657a:	d107      	bne.n	800658c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006584:	4313      	orrs	r3, r2
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	4313      	orrs	r3, r2
 800658a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	2b28      	cmp	r3, #40	@ 0x28
 8006592:	d903      	bls.n	800659c <HAL_DMA_Init+0x26c>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	2b2e      	cmp	r3, #46	@ 0x2e
 800659a:	d91f      	bls.n	80065dc <HAL_DMA_Init+0x2ac>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80065a2:	d903      	bls.n	80065ac <HAL_DMA_Init+0x27c>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	2b42      	cmp	r3, #66	@ 0x42
 80065aa:	d917      	bls.n	80065dc <HAL_DMA_Init+0x2ac>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	2b46      	cmp	r3, #70	@ 0x46
 80065b2:	d903      	bls.n	80065bc <HAL_DMA_Init+0x28c>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	2b48      	cmp	r3, #72	@ 0x48
 80065ba:	d90f      	bls.n	80065dc <HAL_DMA_Init+0x2ac>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2b4e      	cmp	r3, #78	@ 0x4e
 80065c2:	d903      	bls.n	80065cc <HAL_DMA_Init+0x29c>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	2b52      	cmp	r3, #82	@ 0x52
 80065ca:	d907      	bls.n	80065dc <HAL_DMA_Init+0x2ac>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	2b73      	cmp	r3, #115	@ 0x73
 80065d2:	d905      	bls.n	80065e0 <HAL_DMA_Init+0x2b0>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	2b77      	cmp	r3, #119	@ 0x77
 80065da:	d801      	bhi.n	80065e0 <HAL_DMA_Init+0x2b0>
 80065dc:	2301      	movs	r3, #1
 80065de:	e000      	b.n	80065e2 <HAL_DMA_Init+0x2b2>
 80065e0:	2300      	movs	r3, #0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065ec:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f023 0307 	bic.w	r3, r3, #7
 8006604:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4313      	orrs	r3, r2
 800660e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006614:	2b04      	cmp	r3, #4
 8006616:	d117      	bne.n	8006648 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	4313      	orrs	r3, r2
 8006620:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00e      	beq.n	8006648 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f002 fb3c 	bl	8008ca8 <DMA_CheckFifoParam>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d008      	beq.n	8006648 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2240      	movs	r2, #64	@ 0x40
 800663a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e192      	b.n	800696e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f002 fa77 	bl	8008b44 <DMA_CalcBaseAndBitshift>
 8006656:	4603      	mov	r3, r0
 8006658:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800665e:	f003 031f 	and.w	r3, r3, #31
 8006662:	223f      	movs	r2, #63	@ 0x3f
 8006664:	409a      	lsls	r2, r3
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	609a      	str	r2, [r3, #8]
 800666a:	e0c8      	b.n	80067fe <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a38      	ldr	r2, [pc, #224]	@ (8006754 <HAL_DMA_Init+0x424>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d022      	beq.n	80066bc <HAL_DMA_Init+0x38c>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a37      	ldr	r2, [pc, #220]	@ (8006758 <HAL_DMA_Init+0x428>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d01d      	beq.n	80066bc <HAL_DMA_Init+0x38c>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a35      	ldr	r2, [pc, #212]	@ (800675c <HAL_DMA_Init+0x42c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d018      	beq.n	80066bc <HAL_DMA_Init+0x38c>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a34      	ldr	r2, [pc, #208]	@ (8006760 <HAL_DMA_Init+0x430>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d013      	beq.n	80066bc <HAL_DMA_Init+0x38c>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a32      	ldr	r2, [pc, #200]	@ (8006764 <HAL_DMA_Init+0x434>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d00e      	beq.n	80066bc <HAL_DMA_Init+0x38c>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a31      	ldr	r2, [pc, #196]	@ (8006768 <HAL_DMA_Init+0x438>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d009      	beq.n	80066bc <HAL_DMA_Init+0x38c>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a2f      	ldr	r2, [pc, #188]	@ (800676c <HAL_DMA_Init+0x43c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d004      	beq.n	80066bc <HAL_DMA_Init+0x38c>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a2e      	ldr	r2, [pc, #184]	@ (8006770 <HAL_DMA_Init+0x440>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d101      	bne.n	80066c0 <HAL_DMA_Init+0x390>
 80066bc:	2301      	movs	r3, #1
 80066be:	e000      	b.n	80066c2 <HAL_DMA_Init+0x392>
 80066c0:	2300      	movs	r3, #0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 8092 	beq.w	80067ec <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a21      	ldr	r2, [pc, #132]	@ (8006754 <HAL_DMA_Init+0x424>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d021      	beq.n	8006716 <HAL_DMA_Init+0x3e6>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a20      	ldr	r2, [pc, #128]	@ (8006758 <HAL_DMA_Init+0x428>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d01c      	beq.n	8006716 <HAL_DMA_Init+0x3e6>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a1e      	ldr	r2, [pc, #120]	@ (800675c <HAL_DMA_Init+0x42c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d017      	beq.n	8006716 <HAL_DMA_Init+0x3e6>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a1d      	ldr	r2, [pc, #116]	@ (8006760 <HAL_DMA_Init+0x430>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d012      	beq.n	8006716 <HAL_DMA_Init+0x3e6>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006764 <HAL_DMA_Init+0x434>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d00d      	beq.n	8006716 <HAL_DMA_Init+0x3e6>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a1a      	ldr	r2, [pc, #104]	@ (8006768 <HAL_DMA_Init+0x438>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d008      	beq.n	8006716 <HAL_DMA_Init+0x3e6>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a18      	ldr	r2, [pc, #96]	@ (800676c <HAL_DMA_Init+0x43c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d003      	beq.n	8006716 <HAL_DMA_Init+0x3e6>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a17      	ldr	r2, [pc, #92]	@ (8006770 <HAL_DMA_Init+0x440>)
 8006714:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2202      	movs	r2, #2
 800671a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	4b10      	ldr	r3, [pc, #64]	@ (8006774 <HAL_DMA_Init+0x444>)
 8006732:	4013      	ands	r3, r2
 8006734:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	2b40      	cmp	r3, #64	@ 0x40
 800673c:	d01c      	beq.n	8006778 <HAL_DMA_Init+0x448>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	2b80      	cmp	r3, #128	@ 0x80
 8006744:	d102      	bne.n	800674c <HAL_DMA_Init+0x41c>
 8006746:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800674a:	e016      	b.n	800677a <HAL_DMA_Init+0x44a>
 800674c:	2300      	movs	r3, #0
 800674e:	e014      	b.n	800677a <HAL_DMA_Init+0x44a>
 8006750:	fe10803f 	.word	0xfe10803f
 8006754:	58025408 	.word	0x58025408
 8006758:	5802541c 	.word	0x5802541c
 800675c:	58025430 	.word	0x58025430
 8006760:	58025444 	.word	0x58025444
 8006764:	58025458 	.word	0x58025458
 8006768:	5802546c 	.word	0x5802546c
 800676c:	58025480 	.word	0x58025480
 8006770:	58025494 	.word	0x58025494
 8006774:	fffe000f 	.word	0xfffe000f
 8006778:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	68d2      	ldr	r2, [r2, #12]
 800677e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006780:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006788:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006790:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006798:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80067a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80067a8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	461a      	mov	r2, r3
 80067be:	4b6e      	ldr	r3, [pc, #440]	@ (8006978 <HAL_DMA_Init+0x648>)
 80067c0:	4413      	add	r3, r2
 80067c2:	4a6e      	ldr	r2, [pc, #440]	@ (800697c <HAL_DMA_Init+0x64c>)
 80067c4:	fba2 2303 	umull	r2, r3, r2, r3
 80067c8:	091b      	lsrs	r3, r3, #4
 80067ca:	009a      	lsls	r2, r3, #2
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f002 f9b7 	bl	8008b44 <DMA_CalcBaseAndBitshift>
 80067d6:	4603      	mov	r3, r0
 80067d8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067de:	f003 031f 	and.w	r3, r3, #31
 80067e2:	2201      	movs	r2, #1
 80067e4:	409a      	lsls	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	605a      	str	r2, [r3, #4]
 80067ea:	e008      	b.n	80067fe <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2240      	movs	r2, #64	@ 0x40
 80067f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2203      	movs	r2, #3
 80067f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e0b7      	b.n	800696e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a5f      	ldr	r2, [pc, #380]	@ (8006980 <HAL_DMA_Init+0x650>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d072      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a5d      	ldr	r2, [pc, #372]	@ (8006984 <HAL_DMA_Init+0x654>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d06d      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a5c      	ldr	r2, [pc, #368]	@ (8006988 <HAL_DMA_Init+0x658>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d068      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a5a      	ldr	r2, [pc, #360]	@ (800698c <HAL_DMA_Init+0x65c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d063      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a59      	ldr	r2, [pc, #356]	@ (8006990 <HAL_DMA_Init+0x660>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d05e      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a57      	ldr	r2, [pc, #348]	@ (8006994 <HAL_DMA_Init+0x664>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d059      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a56      	ldr	r2, [pc, #344]	@ (8006998 <HAL_DMA_Init+0x668>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d054      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a54      	ldr	r2, [pc, #336]	@ (800699c <HAL_DMA_Init+0x66c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d04f      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a53      	ldr	r2, [pc, #332]	@ (80069a0 <HAL_DMA_Init+0x670>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d04a      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a51      	ldr	r2, [pc, #324]	@ (80069a4 <HAL_DMA_Init+0x674>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d045      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a50      	ldr	r2, [pc, #320]	@ (80069a8 <HAL_DMA_Init+0x678>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d040      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a4e      	ldr	r2, [pc, #312]	@ (80069ac <HAL_DMA_Init+0x67c>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d03b      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a4d      	ldr	r2, [pc, #308]	@ (80069b0 <HAL_DMA_Init+0x680>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d036      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a4b      	ldr	r2, [pc, #300]	@ (80069b4 <HAL_DMA_Init+0x684>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d031      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a4a      	ldr	r2, [pc, #296]	@ (80069b8 <HAL_DMA_Init+0x688>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d02c      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a48      	ldr	r2, [pc, #288]	@ (80069bc <HAL_DMA_Init+0x68c>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d027      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a47      	ldr	r2, [pc, #284]	@ (80069c0 <HAL_DMA_Init+0x690>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d022      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a45      	ldr	r2, [pc, #276]	@ (80069c4 <HAL_DMA_Init+0x694>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d01d      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a44      	ldr	r2, [pc, #272]	@ (80069c8 <HAL_DMA_Init+0x698>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d018      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a42      	ldr	r2, [pc, #264]	@ (80069cc <HAL_DMA_Init+0x69c>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d013      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a41      	ldr	r2, [pc, #260]	@ (80069d0 <HAL_DMA_Init+0x6a0>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d00e      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a3f      	ldr	r2, [pc, #252]	@ (80069d4 <HAL_DMA_Init+0x6a4>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d009      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a3e      	ldr	r2, [pc, #248]	@ (80069d8 <HAL_DMA_Init+0x6a8>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d004      	beq.n	80068ee <HAL_DMA_Init+0x5be>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a3c      	ldr	r2, [pc, #240]	@ (80069dc <HAL_DMA_Init+0x6ac>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d101      	bne.n	80068f2 <HAL_DMA_Init+0x5c2>
 80068ee:	2301      	movs	r3, #1
 80068f0:	e000      	b.n	80068f4 <HAL_DMA_Init+0x5c4>
 80068f2:	2300      	movs	r3, #0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d032      	beq.n	800695e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f002 fa51 	bl	8008da0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	2b80      	cmp	r3, #128	@ 0x80
 8006904:	d102      	bne.n	800690c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006920:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d010      	beq.n	800694c <HAL_DMA_Init+0x61c>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	2b08      	cmp	r3, #8
 8006930:	d80c      	bhi.n	800694c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f002 face 	bl	8008ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800693c:	2200      	movs	r2, #0
 800693e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006948:	605a      	str	r2, [r3, #4]
 800694a:	e008      	b.n	800695e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	a7fdabf8 	.word	0xa7fdabf8
 800697c:	cccccccd 	.word	0xcccccccd
 8006980:	40020010 	.word	0x40020010
 8006984:	40020028 	.word	0x40020028
 8006988:	40020040 	.word	0x40020040
 800698c:	40020058 	.word	0x40020058
 8006990:	40020070 	.word	0x40020070
 8006994:	40020088 	.word	0x40020088
 8006998:	400200a0 	.word	0x400200a0
 800699c:	400200b8 	.word	0x400200b8
 80069a0:	40020410 	.word	0x40020410
 80069a4:	40020428 	.word	0x40020428
 80069a8:	40020440 	.word	0x40020440
 80069ac:	40020458 	.word	0x40020458
 80069b0:	40020470 	.word	0x40020470
 80069b4:	40020488 	.word	0x40020488
 80069b8:	400204a0 	.word	0x400204a0
 80069bc:	400204b8 	.word	0x400204b8
 80069c0:	58025408 	.word	0x58025408
 80069c4:	5802541c 	.word	0x5802541c
 80069c8:	58025430 	.word	0x58025430
 80069cc:	58025444 	.word	0x58025444
 80069d0:	58025458 	.word	0x58025458
 80069d4:	5802546c 	.word	0x5802546c
 80069d8:	58025480 	.word	0x58025480
 80069dc:	58025494 	.word	0x58025494

080069e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e226      	b.n	8006e4a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d101      	bne.n	8006a0a <HAL_DMA_Start_IT+0x2a>
 8006a06:	2302      	movs	r3, #2
 8006a08:	e21f      	b.n	8006e4a <HAL_DMA_Start_IT+0x46a>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	f040 820a 	bne.w	8006e34 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a68      	ldr	r2, [pc, #416]	@ (8006bd4 <HAL_DMA_Start_IT+0x1f4>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d04a      	beq.n	8006ace <HAL_DMA_Start_IT+0xee>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a66      	ldr	r2, [pc, #408]	@ (8006bd8 <HAL_DMA_Start_IT+0x1f8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d045      	beq.n	8006ace <HAL_DMA_Start_IT+0xee>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a65      	ldr	r2, [pc, #404]	@ (8006bdc <HAL_DMA_Start_IT+0x1fc>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d040      	beq.n	8006ace <HAL_DMA_Start_IT+0xee>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a63      	ldr	r2, [pc, #396]	@ (8006be0 <HAL_DMA_Start_IT+0x200>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d03b      	beq.n	8006ace <HAL_DMA_Start_IT+0xee>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a62      	ldr	r2, [pc, #392]	@ (8006be4 <HAL_DMA_Start_IT+0x204>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d036      	beq.n	8006ace <HAL_DMA_Start_IT+0xee>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a60      	ldr	r2, [pc, #384]	@ (8006be8 <HAL_DMA_Start_IT+0x208>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d031      	beq.n	8006ace <HAL_DMA_Start_IT+0xee>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a5f      	ldr	r2, [pc, #380]	@ (8006bec <HAL_DMA_Start_IT+0x20c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d02c      	beq.n	8006ace <HAL_DMA_Start_IT+0xee>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a5d      	ldr	r2, [pc, #372]	@ (8006bf0 <HAL_DMA_Start_IT+0x210>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d027      	beq.n	8006ace <HAL_DMA_Start_IT+0xee>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a5c      	ldr	r2, [pc, #368]	@ (8006bf4 <HAL_DMA_Start_IT+0x214>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d022      	beq.n	8006ace <HAL_DMA_Start_IT+0xee>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a5a      	ldr	r2, [pc, #360]	@ (8006bf8 <HAL_DMA_Start_IT+0x218>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d01d      	beq.n	8006ace <HAL_DMA_Start_IT+0xee>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a59      	ldr	r2, [pc, #356]	@ (8006bfc <HAL_DMA_Start_IT+0x21c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d018      	beq.n	8006ace <HAL_DMA_Start_IT+0xee>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a57      	ldr	r2, [pc, #348]	@ (8006c00 <HAL_DMA_Start_IT+0x220>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d013      	beq.n	8006ace <HAL_DMA_Start_IT+0xee>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a56      	ldr	r2, [pc, #344]	@ (8006c04 <HAL_DMA_Start_IT+0x224>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d00e      	beq.n	8006ace <HAL_DMA_Start_IT+0xee>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a54      	ldr	r2, [pc, #336]	@ (8006c08 <HAL_DMA_Start_IT+0x228>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d009      	beq.n	8006ace <HAL_DMA_Start_IT+0xee>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a53      	ldr	r2, [pc, #332]	@ (8006c0c <HAL_DMA_Start_IT+0x22c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d004      	beq.n	8006ace <HAL_DMA_Start_IT+0xee>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a51      	ldr	r2, [pc, #324]	@ (8006c10 <HAL_DMA_Start_IT+0x230>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d108      	bne.n	8006ae0 <HAL_DMA_Start_IT+0x100>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 0201 	bic.w	r2, r2, #1
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	e007      	b.n	8006af0 <HAL_DMA_Start_IT+0x110>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0201 	bic.w	r2, r2, #1
 8006aee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	68b9      	ldr	r1, [r7, #8]
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f001 fe78 	bl	80087ec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a34      	ldr	r2, [pc, #208]	@ (8006bd4 <HAL_DMA_Start_IT+0x1f4>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d04a      	beq.n	8006b9c <HAL_DMA_Start_IT+0x1bc>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a33      	ldr	r2, [pc, #204]	@ (8006bd8 <HAL_DMA_Start_IT+0x1f8>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d045      	beq.n	8006b9c <HAL_DMA_Start_IT+0x1bc>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a31      	ldr	r2, [pc, #196]	@ (8006bdc <HAL_DMA_Start_IT+0x1fc>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d040      	beq.n	8006b9c <HAL_DMA_Start_IT+0x1bc>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a30      	ldr	r2, [pc, #192]	@ (8006be0 <HAL_DMA_Start_IT+0x200>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d03b      	beq.n	8006b9c <HAL_DMA_Start_IT+0x1bc>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a2e      	ldr	r2, [pc, #184]	@ (8006be4 <HAL_DMA_Start_IT+0x204>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d036      	beq.n	8006b9c <HAL_DMA_Start_IT+0x1bc>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a2d      	ldr	r2, [pc, #180]	@ (8006be8 <HAL_DMA_Start_IT+0x208>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d031      	beq.n	8006b9c <HAL_DMA_Start_IT+0x1bc>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a2b      	ldr	r2, [pc, #172]	@ (8006bec <HAL_DMA_Start_IT+0x20c>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d02c      	beq.n	8006b9c <HAL_DMA_Start_IT+0x1bc>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a2a      	ldr	r2, [pc, #168]	@ (8006bf0 <HAL_DMA_Start_IT+0x210>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d027      	beq.n	8006b9c <HAL_DMA_Start_IT+0x1bc>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a28      	ldr	r2, [pc, #160]	@ (8006bf4 <HAL_DMA_Start_IT+0x214>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d022      	beq.n	8006b9c <HAL_DMA_Start_IT+0x1bc>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a27      	ldr	r2, [pc, #156]	@ (8006bf8 <HAL_DMA_Start_IT+0x218>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d01d      	beq.n	8006b9c <HAL_DMA_Start_IT+0x1bc>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a25      	ldr	r2, [pc, #148]	@ (8006bfc <HAL_DMA_Start_IT+0x21c>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d018      	beq.n	8006b9c <HAL_DMA_Start_IT+0x1bc>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a24      	ldr	r2, [pc, #144]	@ (8006c00 <HAL_DMA_Start_IT+0x220>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d013      	beq.n	8006b9c <HAL_DMA_Start_IT+0x1bc>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a22      	ldr	r2, [pc, #136]	@ (8006c04 <HAL_DMA_Start_IT+0x224>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00e      	beq.n	8006b9c <HAL_DMA_Start_IT+0x1bc>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a21      	ldr	r2, [pc, #132]	@ (8006c08 <HAL_DMA_Start_IT+0x228>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d009      	beq.n	8006b9c <HAL_DMA_Start_IT+0x1bc>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8006c0c <HAL_DMA_Start_IT+0x22c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d004      	beq.n	8006b9c <HAL_DMA_Start_IT+0x1bc>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a1e      	ldr	r2, [pc, #120]	@ (8006c10 <HAL_DMA_Start_IT+0x230>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d101      	bne.n	8006ba0 <HAL_DMA_Start_IT+0x1c0>
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e000      	b.n	8006ba2 <HAL_DMA_Start_IT+0x1c2>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d036      	beq.n	8006c14 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f023 021e 	bic.w	r2, r3, #30
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f042 0216 	orr.w	r2, r2, #22
 8006bb8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d03e      	beq.n	8006c40 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f042 0208 	orr.w	r2, r2, #8
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	e035      	b.n	8006c40 <HAL_DMA_Start_IT+0x260>
 8006bd4:	40020010 	.word	0x40020010
 8006bd8:	40020028 	.word	0x40020028
 8006bdc:	40020040 	.word	0x40020040
 8006be0:	40020058 	.word	0x40020058
 8006be4:	40020070 	.word	0x40020070
 8006be8:	40020088 	.word	0x40020088
 8006bec:	400200a0 	.word	0x400200a0
 8006bf0:	400200b8 	.word	0x400200b8
 8006bf4:	40020410 	.word	0x40020410
 8006bf8:	40020428 	.word	0x40020428
 8006bfc:	40020440 	.word	0x40020440
 8006c00:	40020458 	.word	0x40020458
 8006c04:	40020470 	.word	0x40020470
 8006c08:	40020488 	.word	0x40020488
 8006c0c:	400204a0 	.word	0x400204a0
 8006c10:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f023 020e 	bic.w	r2, r3, #14
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 020a 	orr.w	r2, r2, #10
 8006c26:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d007      	beq.n	8006c40 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f042 0204 	orr.w	r2, r2, #4
 8006c3e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a83      	ldr	r2, [pc, #524]	@ (8006e54 <HAL_DMA_Start_IT+0x474>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d072      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a82      	ldr	r2, [pc, #520]	@ (8006e58 <HAL_DMA_Start_IT+0x478>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d06d      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a80      	ldr	r2, [pc, #512]	@ (8006e5c <HAL_DMA_Start_IT+0x47c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d068      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a7f      	ldr	r2, [pc, #508]	@ (8006e60 <HAL_DMA_Start_IT+0x480>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d063      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a7d      	ldr	r2, [pc, #500]	@ (8006e64 <HAL_DMA_Start_IT+0x484>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d05e      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a7c      	ldr	r2, [pc, #496]	@ (8006e68 <HAL_DMA_Start_IT+0x488>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d059      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a7a      	ldr	r2, [pc, #488]	@ (8006e6c <HAL_DMA_Start_IT+0x48c>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d054      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a79      	ldr	r2, [pc, #484]	@ (8006e70 <HAL_DMA_Start_IT+0x490>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d04f      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a77      	ldr	r2, [pc, #476]	@ (8006e74 <HAL_DMA_Start_IT+0x494>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d04a      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a76      	ldr	r2, [pc, #472]	@ (8006e78 <HAL_DMA_Start_IT+0x498>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d045      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a74      	ldr	r2, [pc, #464]	@ (8006e7c <HAL_DMA_Start_IT+0x49c>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d040      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a73      	ldr	r2, [pc, #460]	@ (8006e80 <HAL_DMA_Start_IT+0x4a0>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d03b      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a71      	ldr	r2, [pc, #452]	@ (8006e84 <HAL_DMA_Start_IT+0x4a4>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d036      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a70      	ldr	r2, [pc, #448]	@ (8006e88 <HAL_DMA_Start_IT+0x4a8>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d031      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a6e      	ldr	r2, [pc, #440]	@ (8006e8c <HAL_DMA_Start_IT+0x4ac>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d02c      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a6d      	ldr	r2, [pc, #436]	@ (8006e90 <HAL_DMA_Start_IT+0x4b0>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d027      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a6b      	ldr	r2, [pc, #428]	@ (8006e94 <HAL_DMA_Start_IT+0x4b4>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d022      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a6a      	ldr	r2, [pc, #424]	@ (8006e98 <HAL_DMA_Start_IT+0x4b8>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d01d      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a68      	ldr	r2, [pc, #416]	@ (8006e9c <HAL_DMA_Start_IT+0x4bc>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d018      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a67      	ldr	r2, [pc, #412]	@ (8006ea0 <HAL_DMA_Start_IT+0x4c0>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d013      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a65      	ldr	r2, [pc, #404]	@ (8006ea4 <HAL_DMA_Start_IT+0x4c4>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00e      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a64      	ldr	r2, [pc, #400]	@ (8006ea8 <HAL_DMA_Start_IT+0x4c8>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d009      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a62      	ldr	r2, [pc, #392]	@ (8006eac <HAL_DMA_Start_IT+0x4cc>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d004      	beq.n	8006d30 <HAL_DMA_Start_IT+0x350>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a61      	ldr	r2, [pc, #388]	@ (8006eb0 <HAL_DMA_Start_IT+0x4d0>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d101      	bne.n	8006d34 <HAL_DMA_Start_IT+0x354>
 8006d30:	2301      	movs	r3, #1
 8006d32:	e000      	b.n	8006d36 <HAL_DMA_Start_IT+0x356>
 8006d34:	2300      	movs	r3, #0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d01a      	beq.n	8006d70 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d007      	beq.n	8006d58 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d56:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d007      	beq.n	8006d70 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d6e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a37      	ldr	r2, [pc, #220]	@ (8006e54 <HAL_DMA_Start_IT+0x474>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d04a      	beq.n	8006e10 <HAL_DMA_Start_IT+0x430>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a36      	ldr	r2, [pc, #216]	@ (8006e58 <HAL_DMA_Start_IT+0x478>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d045      	beq.n	8006e10 <HAL_DMA_Start_IT+0x430>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a34      	ldr	r2, [pc, #208]	@ (8006e5c <HAL_DMA_Start_IT+0x47c>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d040      	beq.n	8006e10 <HAL_DMA_Start_IT+0x430>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a33      	ldr	r2, [pc, #204]	@ (8006e60 <HAL_DMA_Start_IT+0x480>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d03b      	beq.n	8006e10 <HAL_DMA_Start_IT+0x430>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a31      	ldr	r2, [pc, #196]	@ (8006e64 <HAL_DMA_Start_IT+0x484>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d036      	beq.n	8006e10 <HAL_DMA_Start_IT+0x430>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a30      	ldr	r2, [pc, #192]	@ (8006e68 <HAL_DMA_Start_IT+0x488>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d031      	beq.n	8006e10 <HAL_DMA_Start_IT+0x430>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a2e      	ldr	r2, [pc, #184]	@ (8006e6c <HAL_DMA_Start_IT+0x48c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d02c      	beq.n	8006e10 <HAL_DMA_Start_IT+0x430>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a2d      	ldr	r2, [pc, #180]	@ (8006e70 <HAL_DMA_Start_IT+0x490>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d027      	beq.n	8006e10 <HAL_DMA_Start_IT+0x430>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a2b      	ldr	r2, [pc, #172]	@ (8006e74 <HAL_DMA_Start_IT+0x494>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d022      	beq.n	8006e10 <HAL_DMA_Start_IT+0x430>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a2a      	ldr	r2, [pc, #168]	@ (8006e78 <HAL_DMA_Start_IT+0x498>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d01d      	beq.n	8006e10 <HAL_DMA_Start_IT+0x430>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a28      	ldr	r2, [pc, #160]	@ (8006e7c <HAL_DMA_Start_IT+0x49c>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d018      	beq.n	8006e10 <HAL_DMA_Start_IT+0x430>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a27      	ldr	r2, [pc, #156]	@ (8006e80 <HAL_DMA_Start_IT+0x4a0>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d013      	beq.n	8006e10 <HAL_DMA_Start_IT+0x430>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a25      	ldr	r2, [pc, #148]	@ (8006e84 <HAL_DMA_Start_IT+0x4a4>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00e      	beq.n	8006e10 <HAL_DMA_Start_IT+0x430>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a24      	ldr	r2, [pc, #144]	@ (8006e88 <HAL_DMA_Start_IT+0x4a8>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d009      	beq.n	8006e10 <HAL_DMA_Start_IT+0x430>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a22      	ldr	r2, [pc, #136]	@ (8006e8c <HAL_DMA_Start_IT+0x4ac>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d004      	beq.n	8006e10 <HAL_DMA_Start_IT+0x430>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a21      	ldr	r2, [pc, #132]	@ (8006e90 <HAL_DMA_Start_IT+0x4b0>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d108      	bne.n	8006e22 <HAL_DMA_Start_IT+0x442>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f042 0201 	orr.w	r2, r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	e012      	b.n	8006e48 <HAL_DMA_Start_IT+0x468>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f042 0201 	orr.w	r2, r2, #1
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	e009      	b.n	8006e48 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e3a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3718      	adds	r7, #24
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	40020010 	.word	0x40020010
 8006e58:	40020028 	.word	0x40020028
 8006e5c:	40020040 	.word	0x40020040
 8006e60:	40020058 	.word	0x40020058
 8006e64:	40020070 	.word	0x40020070
 8006e68:	40020088 	.word	0x40020088
 8006e6c:	400200a0 	.word	0x400200a0
 8006e70:	400200b8 	.word	0x400200b8
 8006e74:	40020410 	.word	0x40020410
 8006e78:	40020428 	.word	0x40020428
 8006e7c:	40020440 	.word	0x40020440
 8006e80:	40020458 	.word	0x40020458
 8006e84:	40020470 	.word	0x40020470
 8006e88:	40020488 	.word	0x40020488
 8006e8c:	400204a0 	.word	0x400204a0
 8006e90:	400204b8 	.word	0x400204b8
 8006e94:	58025408 	.word	0x58025408
 8006e98:	5802541c 	.word	0x5802541c
 8006e9c:	58025430 	.word	0x58025430
 8006ea0:	58025444 	.word	0x58025444
 8006ea4:	58025458 	.word	0x58025458
 8006ea8:	5802546c 	.word	0x5802546c
 8006eac:	58025480 	.word	0x58025480
 8006eb0:	58025494 	.word	0x58025494

08006eb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006ebc:	f7fc fa86 	bl	80033cc <HAL_GetTick>
 8006ec0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e2dc      	b.n	8007486 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d008      	beq.n	8006eea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2280      	movs	r2, #128	@ 0x80
 8006edc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e2cd      	b.n	8007486 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a76      	ldr	r2, [pc, #472]	@ (80070c8 <HAL_DMA_Abort+0x214>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d04a      	beq.n	8006f8a <HAL_DMA_Abort+0xd6>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a74      	ldr	r2, [pc, #464]	@ (80070cc <HAL_DMA_Abort+0x218>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d045      	beq.n	8006f8a <HAL_DMA_Abort+0xd6>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a73      	ldr	r2, [pc, #460]	@ (80070d0 <HAL_DMA_Abort+0x21c>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d040      	beq.n	8006f8a <HAL_DMA_Abort+0xd6>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a71      	ldr	r2, [pc, #452]	@ (80070d4 <HAL_DMA_Abort+0x220>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d03b      	beq.n	8006f8a <HAL_DMA_Abort+0xd6>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a70      	ldr	r2, [pc, #448]	@ (80070d8 <HAL_DMA_Abort+0x224>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d036      	beq.n	8006f8a <HAL_DMA_Abort+0xd6>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a6e      	ldr	r2, [pc, #440]	@ (80070dc <HAL_DMA_Abort+0x228>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d031      	beq.n	8006f8a <HAL_DMA_Abort+0xd6>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a6d      	ldr	r2, [pc, #436]	@ (80070e0 <HAL_DMA_Abort+0x22c>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d02c      	beq.n	8006f8a <HAL_DMA_Abort+0xd6>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a6b      	ldr	r2, [pc, #428]	@ (80070e4 <HAL_DMA_Abort+0x230>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d027      	beq.n	8006f8a <HAL_DMA_Abort+0xd6>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a6a      	ldr	r2, [pc, #424]	@ (80070e8 <HAL_DMA_Abort+0x234>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d022      	beq.n	8006f8a <HAL_DMA_Abort+0xd6>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a68      	ldr	r2, [pc, #416]	@ (80070ec <HAL_DMA_Abort+0x238>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d01d      	beq.n	8006f8a <HAL_DMA_Abort+0xd6>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a67      	ldr	r2, [pc, #412]	@ (80070f0 <HAL_DMA_Abort+0x23c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d018      	beq.n	8006f8a <HAL_DMA_Abort+0xd6>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a65      	ldr	r2, [pc, #404]	@ (80070f4 <HAL_DMA_Abort+0x240>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d013      	beq.n	8006f8a <HAL_DMA_Abort+0xd6>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a64      	ldr	r2, [pc, #400]	@ (80070f8 <HAL_DMA_Abort+0x244>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d00e      	beq.n	8006f8a <HAL_DMA_Abort+0xd6>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a62      	ldr	r2, [pc, #392]	@ (80070fc <HAL_DMA_Abort+0x248>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d009      	beq.n	8006f8a <HAL_DMA_Abort+0xd6>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a61      	ldr	r2, [pc, #388]	@ (8007100 <HAL_DMA_Abort+0x24c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d004      	beq.n	8006f8a <HAL_DMA_Abort+0xd6>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a5f      	ldr	r2, [pc, #380]	@ (8007104 <HAL_DMA_Abort+0x250>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d101      	bne.n	8006f8e <HAL_DMA_Abort+0xda>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e000      	b.n	8006f90 <HAL_DMA_Abort+0xdc>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d013      	beq.n	8006fbc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 021e 	bic.w	r2, r2, #30
 8006fa2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	695a      	ldr	r2, [r3, #20]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006fb2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	617b      	str	r3, [r7, #20]
 8006fba:	e00a      	b.n	8006fd2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f022 020e 	bic.w	r2, r2, #14
 8006fca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a3c      	ldr	r2, [pc, #240]	@ (80070c8 <HAL_DMA_Abort+0x214>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d072      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a3a      	ldr	r2, [pc, #232]	@ (80070cc <HAL_DMA_Abort+0x218>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d06d      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a39      	ldr	r2, [pc, #228]	@ (80070d0 <HAL_DMA_Abort+0x21c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d068      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a37      	ldr	r2, [pc, #220]	@ (80070d4 <HAL_DMA_Abort+0x220>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d063      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a36      	ldr	r2, [pc, #216]	@ (80070d8 <HAL_DMA_Abort+0x224>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d05e      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a34      	ldr	r2, [pc, #208]	@ (80070dc <HAL_DMA_Abort+0x228>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d059      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a33      	ldr	r2, [pc, #204]	@ (80070e0 <HAL_DMA_Abort+0x22c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d054      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a31      	ldr	r2, [pc, #196]	@ (80070e4 <HAL_DMA_Abort+0x230>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d04f      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a30      	ldr	r2, [pc, #192]	@ (80070e8 <HAL_DMA_Abort+0x234>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d04a      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a2e      	ldr	r2, [pc, #184]	@ (80070ec <HAL_DMA_Abort+0x238>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d045      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a2d      	ldr	r2, [pc, #180]	@ (80070f0 <HAL_DMA_Abort+0x23c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d040      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a2b      	ldr	r2, [pc, #172]	@ (80070f4 <HAL_DMA_Abort+0x240>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d03b      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a2a      	ldr	r2, [pc, #168]	@ (80070f8 <HAL_DMA_Abort+0x244>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d036      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a28      	ldr	r2, [pc, #160]	@ (80070fc <HAL_DMA_Abort+0x248>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d031      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a27      	ldr	r2, [pc, #156]	@ (8007100 <HAL_DMA_Abort+0x24c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d02c      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a25      	ldr	r2, [pc, #148]	@ (8007104 <HAL_DMA_Abort+0x250>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d027      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a24      	ldr	r2, [pc, #144]	@ (8007108 <HAL_DMA_Abort+0x254>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d022      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a22      	ldr	r2, [pc, #136]	@ (800710c <HAL_DMA_Abort+0x258>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d01d      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a21      	ldr	r2, [pc, #132]	@ (8007110 <HAL_DMA_Abort+0x25c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d018      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a1f      	ldr	r2, [pc, #124]	@ (8007114 <HAL_DMA_Abort+0x260>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d013      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a1e      	ldr	r2, [pc, #120]	@ (8007118 <HAL_DMA_Abort+0x264>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d00e      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a1c      	ldr	r2, [pc, #112]	@ (800711c <HAL_DMA_Abort+0x268>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d009      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a1b      	ldr	r2, [pc, #108]	@ (8007120 <HAL_DMA_Abort+0x26c>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d004      	beq.n	80070c2 <HAL_DMA_Abort+0x20e>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a19      	ldr	r2, [pc, #100]	@ (8007124 <HAL_DMA_Abort+0x270>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d132      	bne.n	8007128 <HAL_DMA_Abort+0x274>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e031      	b.n	800712a <HAL_DMA_Abort+0x276>
 80070c6:	bf00      	nop
 80070c8:	40020010 	.word	0x40020010
 80070cc:	40020028 	.word	0x40020028
 80070d0:	40020040 	.word	0x40020040
 80070d4:	40020058 	.word	0x40020058
 80070d8:	40020070 	.word	0x40020070
 80070dc:	40020088 	.word	0x40020088
 80070e0:	400200a0 	.word	0x400200a0
 80070e4:	400200b8 	.word	0x400200b8
 80070e8:	40020410 	.word	0x40020410
 80070ec:	40020428 	.word	0x40020428
 80070f0:	40020440 	.word	0x40020440
 80070f4:	40020458 	.word	0x40020458
 80070f8:	40020470 	.word	0x40020470
 80070fc:	40020488 	.word	0x40020488
 8007100:	400204a0 	.word	0x400204a0
 8007104:	400204b8 	.word	0x400204b8
 8007108:	58025408 	.word	0x58025408
 800710c:	5802541c 	.word	0x5802541c
 8007110:	58025430 	.word	0x58025430
 8007114:	58025444 	.word	0x58025444
 8007118:	58025458 	.word	0x58025458
 800711c:	5802546c 	.word	0x5802546c
 8007120:	58025480 	.word	0x58025480
 8007124:	58025494 	.word	0x58025494
 8007128:	2300      	movs	r3, #0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d007      	beq.n	800713e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007138:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800713c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a6d      	ldr	r2, [pc, #436]	@ (80072f8 <HAL_DMA_Abort+0x444>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d04a      	beq.n	80071de <HAL_DMA_Abort+0x32a>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a6b      	ldr	r2, [pc, #428]	@ (80072fc <HAL_DMA_Abort+0x448>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d045      	beq.n	80071de <HAL_DMA_Abort+0x32a>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a6a      	ldr	r2, [pc, #424]	@ (8007300 <HAL_DMA_Abort+0x44c>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d040      	beq.n	80071de <HAL_DMA_Abort+0x32a>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a68      	ldr	r2, [pc, #416]	@ (8007304 <HAL_DMA_Abort+0x450>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d03b      	beq.n	80071de <HAL_DMA_Abort+0x32a>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a67      	ldr	r2, [pc, #412]	@ (8007308 <HAL_DMA_Abort+0x454>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d036      	beq.n	80071de <HAL_DMA_Abort+0x32a>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a65      	ldr	r2, [pc, #404]	@ (800730c <HAL_DMA_Abort+0x458>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d031      	beq.n	80071de <HAL_DMA_Abort+0x32a>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a64      	ldr	r2, [pc, #400]	@ (8007310 <HAL_DMA_Abort+0x45c>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d02c      	beq.n	80071de <HAL_DMA_Abort+0x32a>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a62      	ldr	r2, [pc, #392]	@ (8007314 <HAL_DMA_Abort+0x460>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d027      	beq.n	80071de <HAL_DMA_Abort+0x32a>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a61      	ldr	r2, [pc, #388]	@ (8007318 <HAL_DMA_Abort+0x464>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d022      	beq.n	80071de <HAL_DMA_Abort+0x32a>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a5f      	ldr	r2, [pc, #380]	@ (800731c <HAL_DMA_Abort+0x468>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d01d      	beq.n	80071de <HAL_DMA_Abort+0x32a>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a5e      	ldr	r2, [pc, #376]	@ (8007320 <HAL_DMA_Abort+0x46c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d018      	beq.n	80071de <HAL_DMA_Abort+0x32a>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a5c      	ldr	r2, [pc, #368]	@ (8007324 <HAL_DMA_Abort+0x470>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d013      	beq.n	80071de <HAL_DMA_Abort+0x32a>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a5b      	ldr	r2, [pc, #364]	@ (8007328 <HAL_DMA_Abort+0x474>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d00e      	beq.n	80071de <HAL_DMA_Abort+0x32a>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a59      	ldr	r2, [pc, #356]	@ (800732c <HAL_DMA_Abort+0x478>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d009      	beq.n	80071de <HAL_DMA_Abort+0x32a>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a58      	ldr	r2, [pc, #352]	@ (8007330 <HAL_DMA_Abort+0x47c>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d004      	beq.n	80071de <HAL_DMA_Abort+0x32a>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a56      	ldr	r2, [pc, #344]	@ (8007334 <HAL_DMA_Abort+0x480>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d108      	bne.n	80071f0 <HAL_DMA_Abort+0x33c>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0201 	bic.w	r2, r2, #1
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	e007      	b.n	8007200 <HAL_DMA_Abort+0x34c>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f022 0201 	bic.w	r2, r2, #1
 80071fe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007200:	e013      	b.n	800722a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007202:	f7fc f8e3 	bl	80033cc <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	2b05      	cmp	r3, #5
 800720e:	d90c      	bls.n	800722a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2203      	movs	r2, #3
 800721a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e12d      	b.n	8007486 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1e5      	bne.n	8007202 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a2f      	ldr	r2, [pc, #188]	@ (80072f8 <HAL_DMA_Abort+0x444>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d04a      	beq.n	80072d6 <HAL_DMA_Abort+0x422>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a2d      	ldr	r2, [pc, #180]	@ (80072fc <HAL_DMA_Abort+0x448>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d045      	beq.n	80072d6 <HAL_DMA_Abort+0x422>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a2c      	ldr	r2, [pc, #176]	@ (8007300 <HAL_DMA_Abort+0x44c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d040      	beq.n	80072d6 <HAL_DMA_Abort+0x422>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a2a      	ldr	r2, [pc, #168]	@ (8007304 <HAL_DMA_Abort+0x450>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d03b      	beq.n	80072d6 <HAL_DMA_Abort+0x422>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a29      	ldr	r2, [pc, #164]	@ (8007308 <HAL_DMA_Abort+0x454>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d036      	beq.n	80072d6 <HAL_DMA_Abort+0x422>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a27      	ldr	r2, [pc, #156]	@ (800730c <HAL_DMA_Abort+0x458>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d031      	beq.n	80072d6 <HAL_DMA_Abort+0x422>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a26      	ldr	r2, [pc, #152]	@ (8007310 <HAL_DMA_Abort+0x45c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d02c      	beq.n	80072d6 <HAL_DMA_Abort+0x422>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a24      	ldr	r2, [pc, #144]	@ (8007314 <HAL_DMA_Abort+0x460>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d027      	beq.n	80072d6 <HAL_DMA_Abort+0x422>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a23      	ldr	r2, [pc, #140]	@ (8007318 <HAL_DMA_Abort+0x464>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d022      	beq.n	80072d6 <HAL_DMA_Abort+0x422>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a21      	ldr	r2, [pc, #132]	@ (800731c <HAL_DMA_Abort+0x468>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d01d      	beq.n	80072d6 <HAL_DMA_Abort+0x422>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a20      	ldr	r2, [pc, #128]	@ (8007320 <HAL_DMA_Abort+0x46c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d018      	beq.n	80072d6 <HAL_DMA_Abort+0x422>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a1e      	ldr	r2, [pc, #120]	@ (8007324 <HAL_DMA_Abort+0x470>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d013      	beq.n	80072d6 <HAL_DMA_Abort+0x422>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007328 <HAL_DMA_Abort+0x474>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d00e      	beq.n	80072d6 <HAL_DMA_Abort+0x422>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a1b      	ldr	r2, [pc, #108]	@ (800732c <HAL_DMA_Abort+0x478>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d009      	beq.n	80072d6 <HAL_DMA_Abort+0x422>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a1a      	ldr	r2, [pc, #104]	@ (8007330 <HAL_DMA_Abort+0x47c>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d004      	beq.n	80072d6 <HAL_DMA_Abort+0x422>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a18      	ldr	r2, [pc, #96]	@ (8007334 <HAL_DMA_Abort+0x480>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d101      	bne.n	80072da <HAL_DMA_Abort+0x426>
 80072d6:	2301      	movs	r3, #1
 80072d8:	e000      	b.n	80072dc <HAL_DMA_Abort+0x428>
 80072da:	2300      	movs	r3, #0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d02b      	beq.n	8007338 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072e4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072ea:	f003 031f 	and.w	r3, r3, #31
 80072ee:	223f      	movs	r2, #63	@ 0x3f
 80072f0:	409a      	lsls	r2, r3
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	609a      	str	r2, [r3, #8]
 80072f6:	e02a      	b.n	800734e <HAL_DMA_Abort+0x49a>
 80072f8:	40020010 	.word	0x40020010
 80072fc:	40020028 	.word	0x40020028
 8007300:	40020040 	.word	0x40020040
 8007304:	40020058 	.word	0x40020058
 8007308:	40020070 	.word	0x40020070
 800730c:	40020088 	.word	0x40020088
 8007310:	400200a0 	.word	0x400200a0
 8007314:	400200b8 	.word	0x400200b8
 8007318:	40020410 	.word	0x40020410
 800731c:	40020428 	.word	0x40020428
 8007320:	40020440 	.word	0x40020440
 8007324:	40020458 	.word	0x40020458
 8007328:	40020470 	.word	0x40020470
 800732c:	40020488 	.word	0x40020488
 8007330:	400204a0 	.word	0x400204a0
 8007334:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800733c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007342:	f003 031f 	and.w	r3, r3, #31
 8007346:	2201      	movs	r2, #1
 8007348:	409a      	lsls	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a4f      	ldr	r2, [pc, #316]	@ (8007490 <HAL_DMA_Abort+0x5dc>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d072      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a4d      	ldr	r2, [pc, #308]	@ (8007494 <HAL_DMA_Abort+0x5e0>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d06d      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a4c      	ldr	r2, [pc, #304]	@ (8007498 <HAL_DMA_Abort+0x5e4>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d068      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a4a      	ldr	r2, [pc, #296]	@ (800749c <HAL_DMA_Abort+0x5e8>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d063      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a49      	ldr	r2, [pc, #292]	@ (80074a0 <HAL_DMA_Abort+0x5ec>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d05e      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a47      	ldr	r2, [pc, #284]	@ (80074a4 <HAL_DMA_Abort+0x5f0>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d059      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a46      	ldr	r2, [pc, #280]	@ (80074a8 <HAL_DMA_Abort+0x5f4>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d054      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a44      	ldr	r2, [pc, #272]	@ (80074ac <HAL_DMA_Abort+0x5f8>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d04f      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a43      	ldr	r2, [pc, #268]	@ (80074b0 <HAL_DMA_Abort+0x5fc>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d04a      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a41      	ldr	r2, [pc, #260]	@ (80074b4 <HAL_DMA_Abort+0x600>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d045      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a40      	ldr	r2, [pc, #256]	@ (80074b8 <HAL_DMA_Abort+0x604>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d040      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a3e      	ldr	r2, [pc, #248]	@ (80074bc <HAL_DMA_Abort+0x608>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d03b      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a3d      	ldr	r2, [pc, #244]	@ (80074c0 <HAL_DMA_Abort+0x60c>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d036      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a3b      	ldr	r2, [pc, #236]	@ (80074c4 <HAL_DMA_Abort+0x610>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d031      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a3a      	ldr	r2, [pc, #232]	@ (80074c8 <HAL_DMA_Abort+0x614>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d02c      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a38      	ldr	r2, [pc, #224]	@ (80074cc <HAL_DMA_Abort+0x618>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d027      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a37      	ldr	r2, [pc, #220]	@ (80074d0 <HAL_DMA_Abort+0x61c>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d022      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a35      	ldr	r2, [pc, #212]	@ (80074d4 <HAL_DMA_Abort+0x620>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d01d      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a34      	ldr	r2, [pc, #208]	@ (80074d8 <HAL_DMA_Abort+0x624>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d018      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a32      	ldr	r2, [pc, #200]	@ (80074dc <HAL_DMA_Abort+0x628>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d013      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a31      	ldr	r2, [pc, #196]	@ (80074e0 <HAL_DMA_Abort+0x62c>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d00e      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a2f      	ldr	r2, [pc, #188]	@ (80074e4 <HAL_DMA_Abort+0x630>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d009      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a2e      	ldr	r2, [pc, #184]	@ (80074e8 <HAL_DMA_Abort+0x634>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d004      	beq.n	800743e <HAL_DMA_Abort+0x58a>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a2c      	ldr	r2, [pc, #176]	@ (80074ec <HAL_DMA_Abort+0x638>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d101      	bne.n	8007442 <HAL_DMA_Abort+0x58e>
 800743e:	2301      	movs	r3, #1
 8007440:	e000      	b.n	8007444 <HAL_DMA_Abort+0x590>
 8007442:	2300      	movs	r3, #0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d015      	beq.n	8007474 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007450:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00c      	beq.n	8007474 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007464:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007468:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007472:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3718      	adds	r7, #24
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	40020010 	.word	0x40020010
 8007494:	40020028 	.word	0x40020028
 8007498:	40020040 	.word	0x40020040
 800749c:	40020058 	.word	0x40020058
 80074a0:	40020070 	.word	0x40020070
 80074a4:	40020088 	.word	0x40020088
 80074a8:	400200a0 	.word	0x400200a0
 80074ac:	400200b8 	.word	0x400200b8
 80074b0:	40020410 	.word	0x40020410
 80074b4:	40020428 	.word	0x40020428
 80074b8:	40020440 	.word	0x40020440
 80074bc:	40020458 	.word	0x40020458
 80074c0:	40020470 	.word	0x40020470
 80074c4:	40020488 	.word	0x40020488
 80074c8:	400204a0 	.word	0x400204a0
 80074cc:	400204b8 	.word	0x400204b8
 80074d0:	58025408 	.word	0x58025408
 80074d4:	5802541c 	.word	0x5802541c
 80074d8:	58025430 	.word	0x58025430
 80074dc:	58025444 	.word	0x58025444
 80074e0:	58025458 	.word	0x58025458
 80074e4:	5802546c 	.word	0x5802546c
 80074e8:	58025480 	.word	0x58025480
 80074ec:	58025494 	.word	0x58025494

080074f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e237      	b.n	8007972 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b02      	cmp	r3, #2
 800750c:	d004      	beq.n	8007518 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2280      	movs	r2, #128	@ 0x80
 8007512:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e22c      	b.n	8007972 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a5c      	ldr	r2, [pc, #368]	@ (8007690 <HAL_DMA_Abort_IT+0x1a0>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d04a      	beq.n	80075b8 <HAL_DMA_Abort_IT+0xc8>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a5b      	ldr	r2, [pc, #364]	@ (8007694 <HAL_DMA_Abort_IT+0x1a4>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d045      	beq.n	80075b8 <HAL_DMA_Abort_IT+0xc8>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a59      	ldr	r2, [pc, #356]	@ (8007698 <HAL_DMA_Abort_IT+0x1a8>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d040      	beq.n	80075b8 <HAL_DMA_Abort_IT+0xc8>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a58      	ldr	r2, [pc, #352]	@ (800769c <HAL_DMA_Abort_IT+0x1ac>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d03b      	beq.n	80075b8 <HAL_DMA_Abort_IT+0xc8>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a56      	ldr	r2, [pc, #344]	@ (80076a0 <HAL_DMA_Abort_IT+0x1b0>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d036      	beq.n	80075b8 <HAL_DMA_Abort_IT+0xc8>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a55      	ldr	r2, [pc, #340]	@ (80076a4 <HAL_DMA_Abort_IT+0x1b4>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d031      	beq.n	80075b8 <HAL_DMA_Abort_IT+0xc8>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a53      	ldr	r2, [pc, #332]	@ (80076a8 <HAL_DMA_Abort_IT+0x1b8>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d02c      	beq.n	80075b8 <HAL_DMA_Abort_IT+0xc8>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a52      	ldr	r2, [pc, #328]	@ (80076ac <HAL_DMA_Abort_IT+0x1bc>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d027      	beq.n	80075b8 <HAL_DMA_Abort_IT+0xc8>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a50      	ldr	r2, [pc, #320]	@ (80076b0 <HAL_DMA_Abort_IT+0x1c0>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d022      	beq.n	80075b8 <HAL_DMA_Abort_IT+0xc8>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a4f      	ldr	r2, [pc, #316]	@ (80076b4 <HAL_DMA_Abort_IT+0x1c4>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d01d      	beq.n	80075b8 <HAL_DMA_Abort_IT+0xc8>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a4d      	ldr	r2, [pc, #308]	@ (80076b8 <HAL_DMA_Abort_IT+0x1c8>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d018      	beq.n	80075b8 <HAL_DMA_Abort_IT+0xc8>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a4c      	ldr	r2, [pc, #304]	@ (80076bc <HAL_DMA_Abort_IT+0x1cc>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d013      	beq.n	80075b8 <HAL_DMA_Abort_IT+0xc8>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a4a      	ldr	r2, [pc, #296]	@ (80076c0 <HAL_DMA_Abort_IT+0x1d0>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d00e      	beq.n	80075b8 <HAL_DMA_Abort_IT+0xc8>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a49      	ldr	r2, [pc, #292]	@ (80076c4 <HAL_DMA_Abort_IT+0x1d4>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d009      	beq.n	80075b8 <HAL_DMA_Abort_IT+0xc8>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a47      	ldr	r2, [pc, #284]	@ (80076c8 <HAL_DMA_Abort_IT+0x1d8>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d004      	beq.n	80075b8 <HAL_DMA_Abort_IT+0xc8>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a46      	ldr	r2, [pc, #280]	@ (80076cc <HAL_DMA_Abort_IT+0x1dc>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d101      	bne.n	80075bc <HAL_DMA_Abort_IT+0xcc>
 80075b8:	2301      	movs	r3, #1
 80075ba:	e000      	b.n	80075be <HAL_DMA_Abort_IT+0xce>
 80075bc:	2300      	movs	r3, #0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f000 8086 	beq.w	80076d0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2204      	movs	r2, #4
 80075c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a2f      	ldr	r2, [pc, #188]	@ (8007690 <HAL_DMA_Abort_IT+0x1a0>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d04a      	beq.n	800766c <HAL_DMA_Abort_IT+0x17c>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a2e      	ldr	r2, [pc, #184]	@ (8007694 <HAL_DMA_Abort_IT+0x1a4>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d045      	beq.n	800766c <HAL_DMA_Abort_IT+0x17c>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a2c      	ldr	r2, [pc, #176]	@ (8007698 <HAL_DMA_Abort_IT+0x1a8>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d040      	beq.n	800766c <HAL_DMA_Abort_IT+0x17c>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a2b      	ldr	r2, [pc, #172]	@ (800769c <HAL_DMA_Abort_IT+0x1ac>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d03b      	beq.n	800766c <HAL_DMA_Abort_IT+0x17c>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a29      	ldr	r2, [pc, #164]	@ (80076a0 <HAL_DMA_Abort_IT+0x1b0>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d036      	beq.n	800766c <HAL_DMA_Abort_IT+0x17c>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a28      	ldr	r2, [pc, #160]	@ (80076a4 <HAL_DMA_Abort_IT+0x1b4>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d031      	beq.n	800766c <HAL_DMA_Abort_IT+0x17c>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a26      	ldr	r2, [pc, #152]	@ (80076a8 <HAL_DMA_Abort_IT+0x1b8>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d02c      	beq.n	800766c <HAL_DMA_Abort_IT+0x17c>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a25      	ldr	r2, [pc, #148]	@ (80076ac <HAL_DMA_Abort_IT+0x1bc>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d027      	beq.n	800766c <HAL_DMA_Abort_IT+0x17c>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a23      	ldr	r2, [pc, #140]	@ (80076b0 <HAL_DMA_Abort_IT+0x1c0>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d022      	beq.n	800766c <HAL_DMA_Abort_IT+0x17c>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a22      	ldr	r2, [pc, #136]	@ (80076b4 <HAL_DMA_Abort_IT+0x1c4>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d01d      	beq.n	800766c <HAL_DMA_Abort_IT+0x17c>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a20      	ldr	r2, [pc, #128]	@ (80076b8 <HAL_DMA_Abort_IT+0x1c8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d018      	beq.n	800766c <HAL_DMA_Abort_IT+0x17c>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a1f      	ldr	r2, [pc, #124]	@ (80076bc <HAL_DMA_Abort_IT+0x1cc>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d013      	beq.n	800766c <HAL_DMA_Abort_IT+0x17c>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a1d      	ldr	r2, [pc, #116]	@ (80076c0 <HAL_DMA_Abort_IT+0x1d0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d00e      	beq.n	800766c <HAL_DMA_Abort_IT+0x17c>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a1c      	ldr	r2, [pc, #112]	@ (80076c4 <HAL_DMA_Abort_IT+0x1d4>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d009      	beq.n	800766c <HAL_DMA_Abort_IT+0x17c>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a1a      	ldr	r2, [pc, #104]	@ (80076c8 <HAL_DMA_Abort_IT+0x1d8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d004      	beq.n	800766c <HAL_DMA_Abort_IT+0x17c>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a19      	ldr	r2, [pc, #100]	@ (80076cc <HAL_DMA_Abort_IT+0x1dc>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d108      	bne.n	800767e <HAL_DMA_Abort_IT+0x18e>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f022 0201 	bic.w	r2, r2, #1
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	e178      	b.n	8007970 <HAL_DMA_Abort_IT+0x480>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f022 0201 	bic.w	r2, r2, #1
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	e16f      	b.n	8007970 <HAL_DMA_Abort_IT+0x480>
 8007690:	40020010 	.word	0x40020010
 8007694:	40020028 	.word	0x40020028
 8007698:	40020040 	.word	0x40020040
 800769c:	40020058 	.word	0x40020058
 80076a0:	40020070 	.word	0x40020070
 80076a4:	40020088 	.word	0x40020088
 80076a8:	400200a0 	.word	0x400200a0
 80076ac:	400200b8 	.word	0x400200b8
 80076b0:	40020410 	.word	0x40020410
 80076b4:	40020428 	.word	0x40020428
 80076b8:	40020440 	.word	0x40020440
 80076bc:	40020458 	.word	0x40020458
 80076c0:	40020470 	.word	0x40020470
 80076c4:	40020488 	.word	0x40020488
 80076c8:	400204a0 	.word	0x400204a0
 80076cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 020e 	bic.w	r2, r2, #14
 80076de:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a6c      	ldr	r2, [pc, #432]	@ (8007898 <HAL_DMA_Abort_IT+0x3a8>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d04a      	beq.n	8007780 <HAL_DMA_Abort_IT+0x290>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a6b      	ldr	r2, [pc, #428]	@ (800789c <HAL_DMA_Abort_IT+0x3ac>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d045      	beq.n	8007780 <HAL_DMA_Abort_IT+0x290>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a69      	ldr	r2, [pc, #420]	@ (80078a0 <HAL_DMA_Abort_IT+0x3b0>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d040      	beq.n	8007780 <HAL_DMA_Abort_IT+0x290>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a68      	ldr	r2, [pc, #416]	@ (80078a4 <HAL_DMA_Abort_IT+0x3b4>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d03b      	beq.n	8007780 <HAL_DMA_Abort_IT+0x290>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a66      	ldr	r2, [pc, #408]	@ (80078a8 <HAL_DMA_Abort_IT+0x3b8>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d036      	beq.n	8007780 <HAL_DMA_Abort_IT+0x290>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a65      	ldr	r2, [pc, #404]	@ (80078ac <HAL_DMA_Abort_IT+0x3bc>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d031      	beq.n	8007780 <HAL_DMA_Abort_IT+0x290>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a63      	ldr	r2, [pc, #396]	@ (80078b0 <HAL_DMA_Abort_IT+0x3c0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d02c      	beq.n	8007780 <HAL_DMA_Abort_IT+0x290>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a62      	ldr	r2, [pc, #392]	@ (80078b4 <HAL_DMA_Abort_IT+0x3c4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d027      	beq.n	8007780 <HAL_DMA_Abort_IT+0x290>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a60      	ldr	r2, [pc, #384]	@ (80078b8 <HAL_DMA_Abort_IT+0x3c8>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d022      	beq.n	8007780 <HAL_DMA_Abort_IT+0x290>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a5f      	ldr	r2, [pc, #380]	@ (80078bc <HAL_DMA_Abort_IT+0x3cc>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d01d      	beq.n	8007780 <HAL_DMA_Abort_IT+0x290>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a5d      	ldr	r2, [pc, #372]	@ (80078c0 <HAL_DMA_Abort_IT+0x3d0>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d018      	beq.n	8007780 <HAL_DMA_Abort_IT+0x290>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a5c      	ldr	r2, [pc, #368]	@ (80078c4 <HAL_DMA_Abort_IT+0x3d4>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d013      	beq.n	8007780 <HAL_DMA_Abort_IT+0x290>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a5a      	ldr	r2, [pc, #360]	@ (80078c8 <HAL_DMA_Abort_IT+0x3d8>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00e      	beq.n	8007780 <HAL_DMA_Abort_IT+0x290>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a59      	ldr	r2, [pc, #356]	@ (80078cc <HAL_DMA_Abort_IT+0x3dc>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d009      	beq.n	8007780 <HAL_DMA_Abort_IT+0x290>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a57      	ldr	r2, [pc, #348]	@ (80078d0 <HAL_DMA_Abort_IT+0x3e0>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d004      	beq.n	8007780 <HAL_DMA_Abort_IT+0x290>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a56      	ldr	r2, [pc, #344]	@ (80078d4 <HAL_DMA_Abort_IT+0x3e4>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d108      	bne.n	8007792 <HAL_DMA_Abort_IT+0x2a2>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f022 0201 	bic.w	r2, r2, #1
 800778e:	601a      	str	r2, [r3, #0]
 8007790:	e007      	b.n	80077a2 <HAL_DMA_Abort_IT+0x2b2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0201 	bic.w	r2, r2, #1
 80077a0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a3c      	ldr	r2, [pc, #240]	@ (8007898 <HAL_DMA_Abort_IT+0x3a8>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d072      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a3a      	ldr	r2, [pc, #232]	@ (800789c <HAL_DMA_Abort_IT+0x3ac>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d06d      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a39      	ldr	r2, [pc, #228]	@ (80078a0 <HAL_DMA_Abort_IT+0x3b0>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d068      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a37      	ldr	r2, [pc, #220]	@ (80078a4 <HAL_DMA_Abort_IT+0x3b4>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d063      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a36      	ldr	r2, [pc, #216]	@ (80078a8 <HAL_DMA_Abort_IT+0x3b8>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d05e      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a34      	ldr	r2, [pc, #208]	@ (80078ac <HAL_DMA_Abort_IT+0x3bc>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d059      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a33      	ldr	r2, [pc, #204]	@ (80078b0 <HAL_DMA_Abort_IT+0x3c0>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d054      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a31      	ldr	r2, [pc, #196]	@ (80078b4 <HAL_DMA_Abort_IT+0x3c4>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d04f      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a30      	ldr	r2, [pc, #192]	@ (80078b8 <HAL_DMA_Abort_IT+0x3c8>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d04a      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a2e      	ldr	r2, [pc, #184]	@ (80078bc <HAL_DMA_Abort_IT+0x3cc>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d045      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a2d      	ldr	r2, [pc, #180]	@ (80078c0 <HAL_DMA_Abort_IT+0x3d0>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d040      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a2b      	ldr	r2, [pc, #172]	@ (80078c4 <HAL_DMA_Abort_IT+0x3d4>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d03b      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a2a      	ldr	r2, [pc, #168]	@ (80078c8 <HAL_DMA_Abort_IT+0x3d8>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d036      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a28      	ldr	r2, [pc, #160]	@ (80078cc <HAL_DMA_Abort_IT+0x3dc>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d031      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a27      	ldr	r2, [pc, #156]	@ (80078d0 <HAL_DMA_Abort_IT+0x3e0>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d02c      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a25      	ldr	r2, [pc, #148]	@ (80078d4 <HAL_DMA_Abort_IT+0x3e4>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d027      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a24      	ldr	r2, [pc, #144]	@ (80078d8 <HAL_DMA_Abort_IT+0x3e8>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d022      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a22      	ldr	r2, [pc, #136]	@ (80078dc <HAL_DMA_Abort_IT+0x3ec>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d01d      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a21      	ldr	r2, [pc, #132]	@ (80078e0 <HAL_DMA_Abort_IT+0x3f0>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d018      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a1f      	ldr	r2, [pc, #124]	@ (80078e4 <HAL_DMA_Abort_IT+0x3f4>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d013      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a1e      	ldr	r2, [pc, #120]	@ (80078e8 <HAL_DMA_Abort_IT+0x3f8>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d00e      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a1c      	ldr	r2, [pc, #112]	@ (80078ec <HAL_DMA_Abort_IT+0x3fc>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d009      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a1b      	ldr	r2, [pc, #108]	@ (80078f0 <HAL_DMA_Abort_IT+0x400>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d004      	beq.n	8007892 <HAL_DMA_Abort_IT+0x3a2>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a19      	ldr	r2, [pc, #100]	@ (80078f4 <HAL_DMA_Abort_IT+0x404>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d132      	bne.n	80078f8 <HAL_DMA_Abort_IT+0x408>
 8007892:	2301      	movs	r3, #1
 8007894:	e031      	b.n	80078fa <HAL_DMA_Abort_IT+0x40a>
 8007896:	bf00      	nop
 8007898:	40020010 	.word	0x40020010
 800789c:	40020028 	.word	0x40020028
 80078a0:	40020040 	.word	0x40020040
 80078a4:	40020058 	.word	0x40020058
 80078a8:	40020070 	.word	0x40020070
 80078ac:	40020088 	.word	0x40020088
 80078b0:	400200a0 	.word	0x400200a0
 80078b4:	400200b8 	.word	0x400200b8
 80078b8:	40020410 	.word	0x40020410
 80078bc:	40020428 	.word	0x40020428
 80078c0:	40020440 	.word	0x40020440
 80078c4:	40020458 	.word	0x40020458
 80078c8:	40020470 	.word	0x40020470
 80078cc:	40020488 	.word	0x40020488
 80078d0:	400204a0 	.word	0x400204a0
 80078d4:	400204b8 	.word	0x400204b8
 80078d8:	58025408 	.word	0x58025408
 80078dc:	5802541c 	.word	0x5802541c
 80078e0:	58025430 	.word	0x58025430
 80078e4:	58025444 	.word	0x58025444
 80078e8:	58025458 	.word	0x58025458
 80078ec:	5802546c 	.word	0x5802546c
 80078f0:	58025480 	.word	0x58025480
 80078f4:	58025494 	.word	0x58025494
 80078f8:	2300      	movs	r3, #0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d028      	beq.n	8007950 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007908:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800790c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007912:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007918:	f003 031f 	and.w	r3, r3, #31
 800791c:	2201      	movs	r2, #1
 800791e:	409a      	lsls	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800792c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00c      	beq.n	8007950 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007940:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007944:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800794e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007964:	2b00      	cmp	r3, #0
 8007966:	d003      	beq.n	8007970 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop

0800797c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b08a      	sub	sp, #40	@ 0x28
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007984:	2300      	movs	r3, #0
 8007986:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007988:	4b67      	ldr	r3, [pc, #412]	@ (8007b28 <HAL_DMA_IRQHandler+0x1ac>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a67      	ldr	r2, [pc, #412]	@ (8007b2c <HAL_DMA_IRQHandler+0x1b0>)
 800798e:	fba2 2303 	umull	r2, r3, r2, r3
 8007992:	0a9b      	lsrs	r3, r3, #10
 8007994:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800799a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079a0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a5f      	ldr	r2, [pc, #380]	@ (8007b30 <HAL_DMA_IRQHandler+0x1b4>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d04a      	beq.n	8007a4e <HAL_DMA_IRQHandler+0xd2>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a5d      	ldr	r2, [pc, #372]	@ (8007b34 <HAL_DMA_IRQHandler+0x1b8>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d045      	beq.n	8007a4e <HAL_DMA_IRQHandler+0xd2>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a5c      	ldr	r2, [pc, #368]	@ (8007b38 <HAL_DMA_IRQHandler+0x1bc>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d040      	beq.n	8007a4e <HAL_DMA_IRQHandler+0xd2>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a5a      	ldr	r2, [pc, #360]	@ (8007b3c <HAL_DMA_IRQHandler+0x1c0>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d03b      	beq.n	8007a4e <HAL_DMA_IRQHandler+0xd2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a59      	ldr	r2, [pc, #356]	@ (8007b40 <HAL_DMA_IRQHandler+0x1c4>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d036      	beq.n	8007a4e <HAL_DMA_IRQHandler+0xd2>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a57      	ldr	r2, [pc, #348]	@ (8007b44 <HAL_DMA_IRQHandler+0x1c8>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d031      	beq.n	8007a4e <HAL_DMA_IRQHandler+0xd2>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a56      	ldr	r2, [pc, #344]	@ (8007b48 <HAL_DMA_IRQHandler+0x1cc>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d02c      	beq.n	8007a4e <HAL_DMA_IRQHandler+0xd2>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a54      	ldr	r2, [pc, #336]	@ (8007b4c <HAL_DMA_IRQHandler+0x1d0>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d027      	beq.n	8007a4e <HAL_DMA_IRQHandler+0xd2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a53      	ldr	r2, [pc, #332]	@ (8007b50 <HAL_DMA_IRQHandler+0x1d4>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d022      	beq.n	8007a4e <HAL_DMA_IRQHandler+0xd2>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a51      	ldr	r2, [pc, #324]	@ (8007b54 <HAL_DMA_IRQHandler+0x1d8>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d01d      	beq.n	8007a4e <HAL_DMA_IRQHandler+0xd2>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a50      	ldr	r2, [pc, #320]	@ (8007b58 <HAL_DMA_IRQHandler+0x1dc>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d018      	beq.n	8007a4e <HAL_DMA_IRQHandler+0xd2>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a4e      	ldr	r2, [pc, #312]	@ (8007b5c <HAL_DMA_IRQHandler+0x1e0>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d013      	beq.n	8007a4e <HAL_DMA_IRQHandler+0xd2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a4d      	ldr	r2, [pc, #308]	@ (8007b60 <HAL_DMA_IRQHandler+0x1e4>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d00e      	beq.n	8007a4e <HAL_DMA_IRQHandler+0xd2>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a4b      	ldr	r2, [pc, #300]	@ (8007b64 <HAL_DMA_IRQHandler+0x1e8>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d009      	beq.n	8007a4e <HAL_DMA_IRQHandler+0xd2>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a4a      	ldr	r2, [pc, #296]	@ (8007b68 <HAL_DMA_IRQHandler+0x1ec>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d004      	beq.n	8007a4e <HAL_DMA_IRQHandler+0xd2>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a48      	ldr	r2, [pc, #288]	@ (8007b6c <HAL_DMA_IRQHandler+0x1f0>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d101      	bne.n	8007a52 <HAL_DMA_IRQHandler+0xd6>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e000      	b.n	8007a54 <HAL_DMA_IRQHandler+0xd8>
 8007a52:	2300      	movs	r3, #0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 842b 	beq.w	80082b0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a5e:	f003 031f 	and.w	r3, r3, #31
 8007a62:	2208      	movs	r2, #8
 8007a64:	409a      	lsls	r2, r3
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	4013      	ands	r3, r2
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 80a2 	beq.w	8007bb4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a2e      	ldr	r2, [pc, #184]	@ (8007b30 <HAL_DMA_IRQHandler+0x1b4>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d04a      	beq.n	8007b10 <HAL_DMA_IRQHandler+0x194>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a2d      	ldr	r2, [pc, #180]	@ (8007b34 <HAL_DMA_IRQHandler+0x1b8>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d045      	beq.n	8007b10 <HAL_DMA_IRQHandler+0x194>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a2b      	ldr	r2, [pc, #172]	@ (8007b38 <HAL_DMA_IRQHandler+0x1bc>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d040      	beq.n	8007b10 <HAL_DMA_IRQHandler+0x194>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a2a      	ldr	r2, [pc, #168]	@ (8007b3c <HAL_DMA_IRQHandler+0x1c0>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d03b      	beq.n	8007b10 <HAL_DMA_IRQHandler+0x194>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a28      	ldr	r2, [pc, #160]	@ (8007b40 <HAL_DMA_IRQHandler+0x1c4>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d036      	beq.n	8007b10 <HAL_DMA_IRQHandler+0x194>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a27      	ldr	r2, [pc, #156]	@ (8007b44 <HAL_DMA_IRQHandler+0x1c8>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d031      	beq.n	8007b10 <HAL_DMA_IRQHandler+0x194>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a25      	ldr	r2, [pc, #148]	@ (8007b48 <HAL_DMA_IRQHandler+0x1cc>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d02c      	beq.n	8007b10 <HAL_DMA_IRQHandler+0x194>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a24      	ldr	r2, [pc, #144]	@ (8007b4c <HAL_DMA_IRQHandler+0x1d0>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d027      	beq.n	8007b10 <HAL_DMA_IRQHandler+0x194>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a22      	ldr	r2, [pc, #136]	@ (8007b50 <HAL_DMA_IRQHandler+0x1d4>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d022      	beq.n	8007b10 <HAL_DMA_IRQHandler+0x194>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a21      	ldr	r2, [pc, #132]	@ (8007b54 <HAL_DMA_IRQHandler+0x1d8>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d01d      	beq.n	8007b10 <HAL_DMA_IRQHandler+0x194>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8007b58 <HAL_DMA_IRQHandler+0x1dc>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d018      	beq.n	8007b10 <HAL_DMA_IRQHandler+0x194>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8007b5c <HAL_DMA_IRQHandler+0x1e0>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d013      	beq.n	8007b10 <HAL_DMA_IRQHandler+0x194>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a1c      	ldr	r2, [pc, #112]	@ (8007b60 <HAL_DMA_IRQHandler+0x1e4>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d00e      	beq.n	8007b10 <HAL_DMA_IRQHandler+0x194>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a1b      	ldr	r2, [pc, #108]	@ (8007b64 <HAL_DMA_IRQHandler+0x1e8>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d009      	beq.n	8007b10 <HAL_DMA_IRQHandler+0x194>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a19      	ldr	r2, [pc, #100]	@ (8007b68 <HAL_DMA_IRQHandler+0x1ec>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d004      	beq.n	8007b10 <HAL_DMA_IRQHandler+0x194>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a18      	ldr	r2, [pc, #96]	@ (8007b6c <HAL_DMA_IRQHandler+0x1f0>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d12f      	bne.n	8007b70 <HAL_DMA_IRQHandler+0x1f4>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 0304 	and.w	r3, r3, #4
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	bf14      	ite	ne
 8007b1e:	2301      	movne	r3, #1
 8007b20:	2300      	moveq	r3, #0
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	e02e      	b.n	8007b84 <HAL_DMA_IRQHandler+0x208>
 8007b26:	bf00      	nop
 8007b28:	24000000 	.word	0x24000000
 8007b2c:	1b4e81b5 	.word	0x1b4e81b5
 8007b30:	40020010 	.word	0x40020010
 8007b34:	40020028 	.word	0x40020028
 8007b38:	40020040 	.word	0x40020040
 8007b3c:	40020058 	.word	0x40020058
 8007b40:	40020070 	.word	0x40020070
 8007b44:	40020088 	.word	0x40020088
 8007b48:	400200a0 	.word	0x400200a0
 8007b4c:	400200b8 	.word	0x400200b8
 8007b50:	40020410 	.word	0x40020410
 8007b54:	40020428 	.word	0x40020428
 8007b58:	40020440 	.word	0x40020440
 8007b5c:	40020458 	.word	0x40020458
 8007b60:	40020470 	.word	0x40020470
 8007b64:	40020488 	.word	0x40020488
 8007b68:	400204a0 	.word	0x400204a0
 8007b6c:	400204b8 	.word	0x400204b8
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0308 	and.w	r3, r3, #8
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	bf14      	ite	ne
 8007b7e:	2301      	movne	r3, #1
 8007b80:	2300      	moveq	r3, #0
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d015      	beq.n	8007bb4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 0204 	bic.w	r2, r2, #4
 8007b96:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b9c:	f003 031f 	and.w	r3, r3, #31
 8007ba0:	2208      	movs	r2, #8
 8007ba2:	409a      	lsls	r2, r3
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bac:	f043 0201 	orr.w	r2, r3, #1
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bb8:	f003 031f 	and.w	r3, r3, #31
 8007bbc:	69ba      	ldr	r2, [r7, #24]
 8007bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8007bc2:	f003 0301 	and.w	r3, r3, #1
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d06e      	beq.n	8007ca8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a69      	ldr	r2, [pc, #420]	@ (8007d74 <HAL_DMA_IRQHandler+0x3f8>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d04a      	beq.n	8007c6a <HAL_DMA_IRQHandler+0x2ee>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a67      	ldr	r2, [pc, #412]	@ (8007d78 <HAL_DMA_IRQHandler+0x3fc>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d045      	beq.n	8007c6a <HAL_DMA_IRQHandler+0x2ee>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a66      	ldr	r2, [pc, #408]	@ (8007d7c <HAL_DMA_IRQHandler+0x400>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d040      	beq.n	8007c6a <HAL_DMA_IRQHandler+0x2ee>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a64      	ldr	r2, [pc, #400]	@ (8007d80 <HAL_DMA_IRQHandler+0x404>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d03b      	beq.n	8007c6a <HAL_DMA_IRQHandler+0x2ee>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a63      	ldr	r2, [pc, #396]	@ (8007d84 <HAL_DMA_IRQHandler+0x408>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d036      	beq.n	8007c6a <HAL_DMA_IRQHandler+0x2ee>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a61      	ldr	r2, [pc, #388]	@ (8007d88 <HAL_DMA_IRQHandler+0x40c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d031      	beq.n	8007c6a <HAL_DMA_IRQHandler+0x2ee>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a60      	ldr	r2, [pc, #384]	@ (8007d8c <HAL_DMA_IRQHandler+0x410>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d02c      	beq.n	8007c6a <HAL_DMA_IRQHandler+0x2ee>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a5e      	ldr	r2, [pc, #376]	@ (8007d90 <HAL_DMA_IRQHandler+0x414>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d027      	beq.n	8007c6a <HAL_DMA_IRQHandler+0x2ee>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a5d      	ldr	r2, [pc, #372]	@ (8007d94 <HAL_DMA_IRQHandler+0x418>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d022      	beq.n	8007c6a <HAL_DMA_IRQHandler+0x2ee>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a5b      	ldr	r2, [pc, #364]	@ (8007d98 <HAL_DMA_IRQHandler+0x41c>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d01d      	beq.n	8007c6a <HAL_DMA_IRQHandler+0x2ee>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a5a      	ldr	r2, [pc, #360]	@ (8007d9c <HAL_DMA_IRQHandler+0x420>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d018      	beq.n	8007c6a <HAL_DMA_IRQHandler+0x2ee>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a58      	ldr	r2, [pc, #352]	@ (8007da0 <HAL_DMA_IRQHandler+0x424>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d013      	beq.n	8007c6a <HAL_DMA_IRQHandler+0x2ee>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a57      	ldr	r2, [pc, #348]	@ (8007da4 <HAL_DMA_IRQHandler+0x428>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d00e      	beq.n	8007c6a <HAL_DMA_IRQHandler+0x2ee>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a55      	ldr	r2, [pc, #340]	@ (8007da8 <HAL_DMA_IRQHandler+0x42c>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d009      	beq.n	8007c6a <HAL_DMA_IRQHandler+0x2ee>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a54      	ldr	r2, [pc, #336]	@ (8007dac <HAL_DMA_IRQHandler+0x430>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d004      	beq.n	8007c6a <HAL_DMA_IRQHandler+0x2ee>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a52      	ldr	r2, [pc, #328]	@ (8007db0 <HAL_DMA_IRQHandler+0x434>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d10a      	bne.n	8007c80 <HAL_DMA_IRQHandler+0x304>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	bf14      	ite	ne
 8007c78:	2301      	movne	r3, #1
 8007c7a:	2300      	moveq	r3, #0
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	e003      	b.n	8007c88 <HAL_DMA_IRQHandler+0x30c>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2300      	movs	r3, #0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00d      	beq.n	8007ca8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c90:	f003 031f 	and.w	r3, r3, #31
 8007c94:	2201      	movs	r2, #1
 8007c96:	409a      	lsls	r2, r3
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ca0:	f043 0202 	orr.w	r2, r3, #2
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cac:	f003 031f 	and.w	r3, r3, #31
 8007cb0:	2204      	movs	r2, #4
 8007cb2:	409a      	lsls	r2, r3
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 808f 	beq.w	8007ddc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8007d74 <HAL_DMA_IRQHandler+0x3f8>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d04a      	beq.n	8007d5e <HAL_DMA_IRQHandler+0x3e2>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a2a      	ldr	r2, [pc, #168]	@ (8007d78 <HAL_DMA_IRQHandler+0x3fc>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d045      	beq.n	8007d5e <HAL_DMA_IRQHandler+0x3e2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a29      	ldr	r2, [pc, #164]	@ (8007d7c <HAL_DMA_IRQHandler+0x400>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d040      	beq.n	8007d5e <HAL_DMA_IRQHandler+0x3e2>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a27      	ldr	r2, [pc, #156]	@ (8007d80 <HAL_DMA_IRQHandler+0x404>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d03b      	beq.n	8007d5e <HAL_DMA_IRQHandler+0x3e2>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a26      	ldr	r2, [pc, #152]	@ (8007d84 <HAL_DMA_IRQHandler+0x408>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d036      	beq.n	8007d5e <HAL_DMA_IRQHandler+0x3e2>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a24      	ldr	r2, [pc, #144]	@ (8007d88 <HAL_DMA_IRQHandler+0x40c>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d031      	beq.n	8007d5e <HAL_DMA_IRQHandler+0x3e2>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a23      	ldr	r2, [pc, #140]	@ (8007d8c <HAL_DMA_IRQHandler+0x410>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d02c      	beq.n	8007d5e <HAL_DMA_IRQHandler+0x3e2>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a21      	ldr	r2, [pc, #132]	@ (8007d90 <HAL_DMA_IRQHandler+0x414>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d027      	beq.n	8007d5e <HAL_DMA_IRQHandler+0x3e2>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a20      	ldr	r2, [pc, #128]	@ (8007d94 <HAL_DMA_IRQHandler+0x418>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d022      	beq.n	8007d5e <HAL_DMA_IRQHandler+0x3e2>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8007d98 <HAL_DMA_IRQHandler+0x41c>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d01d      	beq.n	8007d5e <HAL_DMA_IRQHandler+0x3e2>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a1d      	ldr	r2, [pc, #116]	@ (8007d9c <HAL_DMA_IRQHandler+0x420>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d018      	beq.n	8007d5e <HAL_DMA_IRQHandler+0x3e2>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a1b      	ldr	r2, [pc, #108]	@ (8007da0 <HAL_DMA_IRQHandler+0x424>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d013      	beq.n	8007d5e <HAL_DMA_IRQHandler+0x3e2>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8007da4 <HAL_DMA_IRQHandler+0x428>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d00e      	beq.n	8007d5e <HAL_DMA_IRQHandler+0x3e2>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a18      	ldr	r2, [pc, #96]	@ (8007da8 <HAL_DMA_IRQHandler+0x42c>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d009      	beq.n	8007d5e <HAL_DMA_IRQHandler+0x3e2>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a17      	ldr	r2, [pc, #92]	@ (8007dac <HAL_DMA_IRQHandler+0x430>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d004      	beq.n	8007d5e <HAL_DMA_IRQHandler+0x3e2>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a15      	ldr	r2, [pc, #84]	@ (8007db0 <HAL_DMA_IRQHandler+0x434>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d12a      	bne.n	8007db4 <HAL_DMA_IRQHandler+0x438>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0302 	and.w	r3, r3, #2
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	bf14      	ite	ne
 8007d6c:	2301      	movne	r3, #1
 8007d6e:	2300      	moveq	r3, #0
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	e023      	b.n	8007dbc <HAL_DMA_IRQHandler+0x440>
 8007d74:	40020010 	.word	0x40020010
 8007d78:	40020028 	.word	0x40020028
 8007d7c:	40020040 	.word	0x40020040
 8007d80:	40020058 	.word	0x40020058
 8007d84:	40020070 	.word	0x40020070
 8007d88:	40020088 	.word	0x40020088
 8007d8c:	400200a0 	.word	0x400200a0
 8007d90:	400200b8 	.word	0x400200b8
 8007d94:	40020410 	.word	0x40020410
 8007d98:	40020428 	.word	0x40020428
 8007d9c:	40020440 	.word	0x40020440
 8007da0:	40020458 	.word	0x40020458
 8007da4:	40020470 	.word	0x40020470
 8007da8:	40020488 	.word	0x40020488
 8007dac:	400204a0 	.word	0x400204a0
 8007db0:	400204b8 	.word	0x400204b8
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2300      	movs	r3, #0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00d      	beq.n	8007ddc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dc4:	f003 031f 	and.w	r3, r3, #31
 8007dc8:	2204      	movs	r2, #4
 8007dca:	409a      	lsls	r2, r3
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dd4:	f043 0204 	orr.w	r2, r3, #4
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007de0:	f003 031f 	and.w	r3, r3, #31
 8007de4:	2210      	movs	r2, #16
 8007de6:	409a      	lsls	r2, r3
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	4013      	ands	r3, r2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 80a6 	beq.w	8007f3e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a85      	ldr	r2, [pc, #532]	@ (800800c <HAL_DMA_IRQHandler+0x690>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d04a      	beq.n	8007e92 <HAL_DMA_IRQHandler+0x516>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a83      	ldr	r2, [pc, #524]	@ (8008010 <HAL_DMA_IRQHandler+0x694>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d045      	beq.n	8007e92 <HAL_DMA_IRQHandler+0x516>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a82      	ldr	r2, [pc, #520]	@ (8008014 <HAL_DMA_IRQHandler+0x698>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d040      	beq.n	8007e92 <HAL_DMA_IRQHandler+0x516>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a80      	ldr	r2, [pc, #512]	@ (8008018 <HAL_DMA_IRQHandler+0x69c>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d03b      	beq.n	8007e92 <HAL_DMA_IRQHandler+0x516>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a7f      	ldr	r2, [pc, #508]	@ (800801c <HAL_DMA_IRQHandler+0x6a0>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d036      	beq.n	8007e92 <HAL_DMA_IRQHandler+0x516>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a7d      	ldr	r2, [pc, #500]	@ (8008020 <HAL_DMA_IRQHandler+0x6a4>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d031      	beq.n	8007e92 <HAL_DMA_IRQHandler+0x516>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a7c      	ldr	r2, [pc, #496]	@ (8008024 <HAL_DMA_IRQHandler+0x6a8>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d02c      	beq.n	8007e92 <HAL_DMA_IRQHandler+0x516>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a7a      	ldr	r2, [pc, #488]	@ (8008028 <HAL_DMA_IRQHandler+0x6ac>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d027      	beq.n	8007e92 <HAL_DMA_IRQHandler+0x516>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a79      	ldr	r2, [pc, #484]	@ (800802c <HAL_DMA_IRQHandler+0x6b0>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d022      	beq.n	8007e92 <HAL_DMA_IRQHandler+0x516>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a77      	ldr	r2, [pc, #476]	@ (8008030 <HAL_DMA_IRQHandler+0x6b4>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d01d      	beq.n	8007e92 <HAL_DMA_IRQHandler+0x516>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a76      	ldr	r2, [pc, #472]	@ (8008034 <HAL_DMA_IRQHandler+0x6b8>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d018      	beq.n	8007e92 <HAL_DMA_IRQHandler+0x516>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a74      	ldr	r2, [pc, #464]	@ (8008038 <HAL_DMA_IRQHandler+0x6bc>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d013      	beq.n	8007e92 <HAL_DMA_IRQHandler+0x516>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a73      	ldr	r2, [pc, #460]	@ (800803c <HAL_DMA_IRQHandler+0x6c0>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d00e      	beq.n	8007e92 <HAL_DMA_IRQHandler+0x516>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a71      	ldr	r2, [pc, #452]	@ (8008040 <HAL_DMA_IRQHandler+0x6c4>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d009      	beq.n	8007e92 <HAL_DMA_IRQHandler+0x516>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a70      	ldr	r2, [pc, #448]	@ (8008044 <HAL_DMA_IRQHandler+0x6c8>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d004      	beq.n	8007e92 <HAL_DMA_IRQHandler+0x516>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a6e      	ldr	r2, [pc, #440]	@ (8008048 <HAL_DMA_IRQHandler+0x6cc>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d10a      	bne.n	8007ea8 <HAL_DMA_IRQHandler+0x52c>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 0308 	and.w	r3, r3, #8
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	bf14      	ite	ne
 8007ea0:	2301      	movne	r3, #1
 8007ea2:	2300      	moveq	r3, #0
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	e009      	b.n	8007ebc <HAL_DMA_IRQHandler+0x540>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 0304 	and.w	r3, r3, #4
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	bf14      	ite	ne
 8007eb6:	2301      	movne	r3, #1
 8007eb8:	2300      	moveq	r3, #0
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d03e      	beq.n	8007f3e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ec4:	f003 031f 	and.w	r3, r3, #31
 8007ec8:	2210      	movs	r2, #16
 8007eca:	409a      	lsls	r2, r3
 8007ecc:	6a3b      	ldr	r3, [r7, #32]
 8007ece:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d018      	beq.n	8007f10 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d108      	bne.n	8007efe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d024      	beq.n	8007f3e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	4798      	blx	r3
 8007efc:	e01f      	b.n	8007f3e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d01b      	beq.n	8007f3e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	4798      	blx	r3
 8007f0e:	e016      	b.n	8007f3e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d107      	bne.n	8007f2e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 0208 	bic.w	r2, r2, #8
 8007f2c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f42:	f003 031f 	and.w	r3, r3, #31
 8007f46:	2220      	movs	r2, #32
 8007f48:	409a      	lsls	r2, r3
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	f000 8110 	beq.w	8008174 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a2c      	ldr	r2, [pc, #176]	@ (800800c <HAL_DMA_IRQHandler+0x690>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d04a      	beq.n	8007ff4 <HAL_DMA_IRQHandler+0x678>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a2b      	ldr	r2, [pc, #172]	@ (8008010 <HAL_DMA_IRQHandler+0x694>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d045      	beq.n	8007ff4 <HAL_DMA_IRQHandler+0x678>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a29      	ldr	r2, [pc, #164]	@ (8008014 <HAL_DMA_IRQHandler+0x698>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d040      	beq.n	8007ff4 <HAL_DMA_IRQHandler+0x678>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a28      	ldr	r2, [pc, #160]	@ (8008018 <HAL_DMA_IRQHandler+0x69c>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d03b      	beq.n	8007ff4 <HAL_DMA_IRQHandler+0x678>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a26      	ldr	r2, [pc, #152]	@ (800801c <HAL_DMA_IRQHandler+0x6a0>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d036      	beq.n	8007ff4 <HAL_DMA_IRQHandler+0x678>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a25      	ldr	r2, [pc, #148]	@ (8008020 <HAL_DMA_IRQHandler+0x6a4>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d031      	beq.n	8007ff4 <HAL_DMA_IRQHandler+0x678>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a23      	ldr	r2, [pc, #140]	@ (8008024 <HAL_DMA_IRQHandler+0x6a8>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d02c      	beq.n	8007ff4 <HAL_DMA_IRQHandler+0x678>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a22      	ldr	r2, [pc, #136]	@ (8008028 <HAL_DMA_IRQHandler+0x6ac>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d027      	beq.n	8007ff4 <HAL_DMA_IRQHandler+0x678>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a20      	ldr	r2, [pc, #128]	@ (800802c <HAL_DMA_IRQHandler+0x6b0>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d022      	beq.n	8007ff4 <HAL_DMA_IRQHandler+0x678>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8008030 <HAL_DMA_IRQHandler+0x6b4>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d01d      	beq.n	8007ff4 <HAL_DMA_IRQHandler+0x678>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8008034 <HAL_DMA_IRQHandler+0x6b8>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d018      	beq.n	8007ff4 <HAL_DMA_IRQHandler+0x678>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8008038 <HAL_DMA_IRQHandler+0x6bc>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d013      	beq.n	8007ff4 <HAL_DMA_IRQHandler+0x678>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a1a      	ldr	r2, [pc, #104]	@ (800803c <HAL_DMA_IRQHandler+0x6c0>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d00e      	beq.n	8007ff4 <HAL_DMA_IRQHandler+0x678>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a19      	ldr	r2, [pc, #100]	@ (8008040 <HAL_DMA_IRQHandler+0x6c4>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d009      	beq.n	8007ff4 <HAL_DMA_IRQHandler+0x678>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a17      	ldr	r2, [pc, #92]	@ (8008044 <HAL_DMA_IRQHandler+0x6c8>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d004      	beq.n	8007ff4 <HAL_DMA_IRQHandler+0x678>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a16      	ldr	r2, [pc, #88]	@ (8008048 <HAL_DMA_IRQHandler+0x6cc>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d12b      	bne.n	800804c <HAL_DMA_IRQHandler+0x6d0>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0310 	and.w	r3, r3, #16
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	bf14      	ite	ne
 8008002:	2301      	movne	r3, #1
 8008004:	2300      	moveq	r3, #0
 8008006:	b2db      	uxtb	r3, r3
 8008008:	e02a      	b.n	8008060 <HAL_DMA_IRQHandler+0x6e4>
 800800a:	bf00      	nop
 800800c:	40020010 	.word	0x40020010
 8008010:	40020028 	.word	0x40020028
 8008014:	40020040 	.word	0x40020040
 8008018:	40020058 	.word	0x40020058
 800801c:	40020070 	.word	0x40020070
 8008020:	40020088 	.word	0x40020088
 8008024:	400200a0 	.word	0x400200a0
 8008028:	400200b8 	.word	0x400200b8
 800802c:	40020410 	.word	0x40020410
 8008030:	40020428 	.word	0x40020428
 8008034:	40020440 	.word	0x40020440
 8008038:	40020458 	.word	0x40020458
 800803c:	40020470 	.word	0x40020470
 8008040:	40020488 	.word	0x40020488
 8008044:	400204a0 	.word	0x400204a0
 8008048:	400204b8 	.word	0x400204b8
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0302 	and.w	r3, r3, #2
 8008056:	2b00      	cmp	r3, #0
 8008058:	bf14      	ite	ne
 800805a:	2301      	movne	r3, #1
 800805c:	2300      	moveq	r3, #0
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 8087 	beq.w	8008174 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800806a:	f003 031f 	and.w	r3, r3, #31
 800806e:	2220      	movs	r2, #32
 8008070:	409a      	lsls	r2, r3
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800807c:	b2db      	uxtb	r3, r3
 800807e:	2b04      	cmp	r3, #4
 8008080:	d139      	bne.n	80080f6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f022 0216 	bic.w	r2, r2, #22
 8008090:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	695a      	ldr	r2, [r3, #20]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80080a0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d103      	bne.n	80080b2 <HAL_DMA_IRQHandler+0x736>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d007      	beq.n	80080c2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f022 0208 	bic.w	r2, r2, #8
 80080c0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080c6:	f003 031f 	and.w	r3, r3, #31
 80080ca:	223f      	movs	r2, #63	@ 0x3f
 80080cc:	409a      	lsls	r2, r3
 80080ce:	6a3b      	ldr	r3, [r7, #32]
 80080d0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f000 834a 	beq.w	8008780 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	4798      	blx	r3
          }
          return;
 80080f4:	e344      	b.n	8008780 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008100:	2b00      	cmp	r3, #0
 8008102:	d018      	beq.n	8008136 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d108      	bne.n	8008124 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008116:	2b00      	cmp	r3, #0
 8008118:	d02c      	beq.n	8008174 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	4798      	blx	r3
 8008122:	e027      	b.n	8008174 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008128:	2b00      	cmp	r3, #0
 800812a:	d023      	beq.n	8008174 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	4798      	blx	r3
 8008134:	e01e      	b.n	8008174 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10f      	bne.n	8008164 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f022 0210 	bic.w	r2, r2, #16
 8008152:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008168:	2b00      	cmp	r3, #0
 800816a:	d003      	beq.n	8008174 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 8306 	beq.w	800878a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b00      	cmp	r3, #0
 8008188:	f000 8088 	beq.w	800829c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2204      	movs	r2, #4
 8008190:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a7a      	ldr	r2, [pc, #488]	@ (8008384 <HAL_DMA_IRQHandler+0xa08>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d04a      	beq.n	8008234 <HAL_DMA_IRQHandler+0x8b8>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a79      	ldr	r2, [pc, #484]	@ (8008388 <HAL_DMA_IRQHandler+0xa0c>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d045      	beq.n	8008234 <HAL_DMA_IRQHandler+0x8b8>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a77      	ldr	r2, [pc, #476]	@ (800838c <HAL_DMA_IRQHandler+0xa10>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d040      	beq.n	8008234 <HAL_DMA_IRQHandler+0x8b8>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a76      	ldr	r2, [pc, #472]	@ (8008390 <HAL_DMA_IRQHandler+0xa14>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d03b      	beq.n	8008234 <HAL_DMA_IRQHandler+0x8b8>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a74      	ldr	r2, [pc, #464]	@ (8008394 <HAL_DMA_IRQHandler+0xa18>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d036      	beq.n	8008234 <HAL_DMA_IRQHandler+0x8b8>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a73      	ldr	r2, [pc, #460]	@ (8008398 <HAL_DMA_IRQHandler+0xa1c>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d031      	beq.n	8008234 <HAL_DMA_IRQHandler+0x8b8>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a71      	ldr	r2, [pc, #452]	@ (800839c <HAL_DMA_IRQHandler+0xa20>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d02c      	beq.n	8008234 <HAL_DMA_IRQHandler+0x8b8>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a70      	ldr	r2, [pc, #448]	@ (80083a0 <HAL_DMA_IRQHandler+0xa24>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d027      	beq.n	8008234 <HAL_DMA_IRQHandler+0x8b8>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a6e      	ldr	r2, [pc, #440]	@ (80083a4 <HAL_DMA_IRQHandler+0xa28>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d022      	beq.n	8008234 <HAL_DMA_IRQHandler+0x8b8>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a6d      	ldr	r2, [pc, #436]	@ (80083a8 <HAL_DMA_IRQHandler+0xa2c>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d01d      	beq.n	8008234 <HAL_DMA_IRQHandler+0x8b8>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a6b      	ldr	r2, [pc, #428]	@ (80083ac <HAL_DMA_IRQHandler+0xa30>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d018      	beq.n	8008234 <HAL_DMA_IRQHandler+0x8b8>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a6a      	ldr	r2, [pc, #424]	@ (80083b0 <HAL_DMA_IRQHandler+0xa34>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d013      	beq.n	8008234 <HAL_DMA_IRQHandler+0x8b8>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a68      	ldr	r2, [pc, #416]	@ (80083b4 <HAL_DMA_IRQHandler+0xa38>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d00e      	beq.n	8008234 <HAL_DMA_IRQHandler+0x8b8>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a67      	ldr	r2, [pc, #412]	@ (80083b8 <HAL_DMA_IRQHandler+0xa3c>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d009      	beq.n	8008234 <HAL_DMA_IRQHandler+0x8b8>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a65      	ldr	r2, [pc, #404]	@ (80083bc <HAL_DMA_IRQHandler+0xa40>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d004      	beq.n	8008234 <HAL_DMA_IRQHandler+0x8b8>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a64      	ldr	r2, [pc, #400]	@ (80083c0 <HAL_DMA_IRQHandler+0xa44>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d108      	bne.n	8008246 <HAL_DMA_IRQHandler+0x8ca>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f022 0201 	bic.w	r2, r2, #1
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	e007      	b.n	8008256 <HAL_DMA_IRQHandler+0x8da>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f022 0201 	bic.w	r2, r2, #1
 8008254:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	3301      	adds	r3, #1
 800825a:	60fb      	str	r3, [r7, #12]
 800825c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800825e:	429a      	cmp	r2, r3
 8008260:	d307      	bcc.n	8008272 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0301 	and.w	r3, r3, #1
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1f2      	bne.n	8008256 <HAL_DMA_IRQHandler+0x8da>
 8008270:	e000      	b.n	8008274 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008272:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 0301 	and.w	r3, r3, #1
 800827e:	2b00      	cmp	r3, #0
 8008280:	d004      	beq.n	800828c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2203      	movs	r2, #3
 8008286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800828a:	e003      	b.n	8008294 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	f000 8272 	beq.w	800878a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	4798      	blx	r3
 80082ae:	e26c      	b.n	800878a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a43      	ldr	r2, [pc, #268]	@ (80083c4 <HAL_DMA_IRQHandler+0xa48>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d022      	beq.n	8008300 <HAL_DMA_IRQHandler+0x984>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a42      	ldr	r2, [pc, #264]	@ (80083c8 <HAL_DMA_IRQHandler+0xa4c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d01d      	beq.n	8008300 <HAL_DMA_IRQHandler+0x984>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a40      	ldr	r2, [pc, #256]	@ (80083cc <HAL_DMA_IRQHandler+0xa50>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d018      	beq.n	8008300 <HAL_DMA_IRQHandler+0x984>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a3f      	ldr	r2, [pc, #252]	@ (80083d0 <HAL_DMA_IRQHandler+0xa54>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d013      	beq.n	8008300 <HAL_DMA_IRQHandler+0x984>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a3d      	ldr	r2, [pc, #244]	@ (80083d4 <HAL_DMA_IRQHandler+0xa58>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d00e      	beq.n	8008300 <HAL_DMA_IRQHandler+0x984>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a3c      	ldr	r2, [pc, #240]	@ (80083d8 <HAL_DMA_IRQHandler+0xa5c>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d009      	beq.n	8008300 <HAL_DMA_IRQHandler+0x984>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a3a      	ldr	r2, [pc, #232]	@ (80083dc <HAL_DMA_IRQHandler+0xa60>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d004      	beq.n	8008300 <HAL_DMA_IRQHandler+0x984>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a39      	ldr	r2, [pc, #228]	@ (80083e0 <HAL_DMA_IRQHandler+0xa64>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d101      	bne.n	8008304 <HAL_DMA_IRQHandler+0x988>
 8008300:	2301      	movs	r3, #1
 8008302:	e000      	b.n	8008306 <HAL_DMA_IRQHandler+0x98a>
 8008304:	2300      	movs	r3, #0
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 823f 	beq.w	800878a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008318:	f003 031f 	and.w	r3, r3, #31
 800831c:	2204      	movs	r2, #4
 800831e:	409a      	lsls	r2, r3
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	4013      	ands	r3, r2
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 80cd 	beq.w	80084c4 <HAL_DMA_IRQHandler+0xb48>
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	f003 0304 	and.w	r3, r3, #4
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 80c7 	beq.w	80084c4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800833a:	f003 031f 	and.w	r3, r3, #31
 800833e:	2204      	movs	r2, #4
 8008340:	409a      	lsls	r2, r3
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d049      	beq.n	80083e4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008356:	2b00      	cmp	r3, #0
 8008358:	d109      	bne.n	800836e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800835e:	2b00      	cmp	r3, #0
 8008360:	f000 8210 	beq.w	8008784 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800836c:	e20a      	b.n	8008784 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008372:	2b00      	cmp	r3, #0
 8008374:	f000 8206 	beq.w	8008784 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008380:	e200      	b.n	8008784 <HAL_DMA_IRQHandler+0xe08>
 8008382:	bf00      	nop
 8008384:	40020010 	.word	0x40020010
 8008388:	40020028 	.word	0x40020028
 800838c:	40020040 	.word	0x40020040
 8008390:	40020058 	.word	0x40020058
 8008394:	40020070 	.word	0x40020070
 8008398:	40020088 	.word	0x40020088
 800839c:	400200a0 	.word	0x400200a0
 80083a0:	400200b8 	.word	0x400200b8
 80083a4:	40020410 	.word	0x40020410
 80083a8:	40020428 	.word	0x40020428
 80083ac:	40020440 	.word	0x40020440
 80083b0:	40020458 	.word	0x40020458
 80083b4:	40020470 	.word	0x40020470
 80083b8:	40020488 	.word	0x40020488
 80083bc:	400204a0 	.word	0x400204a0
 80083c0:	400204b8 	.word	0x400204b8
 80083c4:	58025408 	.word	0x58025408
 80083c8:	5802541c 	.word	0x5802541c
 80083cc:	58025430 	.word	0x58025430
 80083d0:	58025444 	.word	0x58025444
 80083d4:	58025458 	.word	0x58025458
 80083d8:	5802546c 	.word	0x5802546c
 80083dc:	58025480 	.word	0x58025480
 80083e0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	f003 0320 	and.w	r3, r3, #32
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d160      	bne.n	80084b0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a7f      	ldr	r2, [pc, #508]	@ (80085f0 <HAL_DMA_IRQHandler+0xc74>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d04a      	beq.n	800848e <HAL_DMA_IRQHandler+0xb12>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a7d      	ldr	r2, [pc, #500]	@ (80085f4 <HAL_DMA_IRQHandler+0xc78>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d045      	beq.n	800848e <HAL_DMA_IRQHandler+0xb12>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a7c      	ldr	r2, [pc, #496]	@ (80085f8 <HAL_DMA_IRQHandler+0xc7c>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d040      	beq.n	800848e <HAL_DMA_IRQHandler+0xb12>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a7a      	ldr	r2, [pc, #488]	@ (80085fc <HAL_DMA_IRQHandler+0xc80>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d03b      	beq.n	800848e <HAL_DMA_IRQHandler+0xb12>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a79      	ldr	r2, [pc, #484]	@ (8008600 <HAL_DMA_IRQHandler+0xc84>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d036      	beq.n	800848e <HAL_DMA_IRQHandler+0xb12>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a77      	ldr	r2, [pc, #476]	@ (8008604 <HAL_DMA_IRQHandler+0xc88>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d031      	beq.n	800848e <HAL_DMA_IRQHandler+0xb12>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a76      	ldr	r2, [pc, #472]	@ (8008608 <HAL_DMA_IRQHandler+0xc8c>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d02c      	beq.n	800848e <HAL_DMA_IRQHandler+0xb12>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a74      	ldr	r2, [pc, #464]	@ (800860c <HAL_DMA_IRQHandler+0xc90>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d027      	beq.n	800848e <HAL_DMA_IRQHandler+0xb12>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a73      	ldr	r2, [pc, #460]	@ (8008610 <HAL_DMA_IRQHandler+0xc94>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d022      	beq.n	800848e <HAL_DMA_IRQHandler+0xb12>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a71      	ldr	r2, [pc, #452]	@ (8008614 <HAL_DMA_IRQHandler+0xc98>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d01d      	beq.n	800848e <HAL_DMA_IRQHandler+0xb12>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a70      	ldr	r2, [pc, #448]	@ (8008618 <HAL_DMA_IRQHandler+0xc9c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d018      	beq.n	800848e <HAL_DMA_IRQHandler+0xb12>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a6e      	ldr	r2, [pc, #440]	@ (800861c <HAL_DMA_IRQHandler+0xca0>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d013      	beq.n	800848e <HAL_DMA_IRQHandler+0xb12>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a6d      	ldr	r2, [pc, #436]	@ (8008620 <HAL_DMA_IRQHandler+0xca4>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d00e      	beq.n	800848e <HAL_DMA_IRQHandler+0xb12>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a6b      	ldr	r2, [pc, #428]	@ (8008624 <HAL_DMA_IRQHandler+0xca8>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d009      	beq.n	800848e <HAL_DMA_IRQHandler+0xb12>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a6a      	ldr	r2, [pc, #424]	@ (8008628 <HAL_DMA_IRQHandler+0xcac>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d004      	beq.n	800848e <HAL_DMA_IRQHandler+0xb12>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a68      	ldr	r2, [pc, #416]	@ (800862c <HAL_DMA_IRQHandler+0xcb0>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d108      	bne.n	80084a0 <HAL_DMA_IRQHandler+0xb24>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f022 0208 	bic.w	r2, r2, #8
 800849c:	601a      	str	r2, [r3, #0]
 800849e:	e007      	b.n	80084b0 <HAL_DMA_IRQHandler+0xb34>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f022 0204 	bic.w	r2, r2, #4
 80084ae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 8165 	beq.w	8008784 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084c2:	e15f      	b.n	8008784 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084c8:	f003 031f 	and.w	r3, r3, #31
 80084cc:	2202      	movs	r2, #2
 80084ce:	409a      	lsls	r2, r3
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	4013      	ands	r3, r2
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f000 80c5 	beq.w	8008664 <HAL_DMA_IRQHandler+0xce8>
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	f003 0302 	and.w	r3, r3, #2
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f000 80bf 	beq.w	8008664 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084ea:	f003 031f 	and.w	r3, r3, #31
 80084ee:	2202      	movs	r2, #2
 80084f0:	409a      	lsls	r2, r3
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d018      	beq.n	8008532 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d109      	bne.n	800851e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 813a 	beq.w	8008788 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800851c:	e134      	b.n	8008788 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 8130 	beq.w	8008788 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008530:	e12a      	b.n	8008788 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	f003 0320 	and.w	r3, r3, #32
 8008538:	2b00      	cmp	r3, #0
 800853a:	f040 8089 	bne.w	8008650 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a2b      	ldr	r2, [pc, #172]	@ (80085f0 <HAL_DMA_IRQHandler+0xc74>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d04a      	beq.n	80085de <HAL_DMA_IRQHandler+0xc62>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a29      	ldr	r2, [pc, #164]	@ (80085f4 <HAL_DMA_IRQHandler+0xc78>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d045      	beq.n	80085de <HAL_DMA_IRQHandler+0xc62>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a28      	ldr	r2, [pc, #160]	@ (80085f8 <HAL_DMA_IRQHandler+0xc7c>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d040      	beq.n	80085de <HAL_DMA_IRQHandler+0xc62>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a26      	ldr	r2, [pc, #152]	@ (80085fc <HAL_DMA_IRQHandler+0xc80>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d03b      	beq.n	80085de <HAL_DMA_IRQHandler+0xc62>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a25      	ldr	r2, [pc, #148]	@ (8008600 <HAL_DMA_IRQHandler+0xc84>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d036      	beq.n	80085de <HAL_DMA_IRQHandler+0xc62>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a23      	ldr	r2, [pc, #140]	@ (8008604 <HAL_DMA_IRQHandler+0xc88>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d031      	beq.n	80085de <HAL_DMA_IRQHandler+0xc62>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a22      	ldr	r2, [pc, #136]	@ (8008608 <HAL_DMA_IRQHandler+0xc8c>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d02c      	beq.n	80085de <HAL_DMA_IRQHandler+0xc62>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a20      	ldr	r2, [pc, #128]	@ (800860c <HAL_DMA_IRQHandler+0xc90>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d027      	beq.n	80085de <HAL_DMA_IRQHandler+0xc62>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a1f      	ldr	r2, [pc, #124]	@ (8008610 <HAL_DMA_IRQHandler+0xc94>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d022      	beq.n	80085de <HAL_DMA_IRQHandler+0xc62>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a1d      	ldr	r2, [pc, #116]	@ (8008614 <HAL_DMA_IRQHandler+0xc98>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d01d      	beq.n	80085de <HAL_DMA_IRQHandler+0xc62>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a1c      	ldr	r2, [pc, #112]	@ (8008618 <HAL_DMA_IRQHandler+0xc9c>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d018      	beq.n	80085de <HAL_DMA_IRQHandler+0xc62>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a1a      	ldr	r2, [pc, #104]	@ (800861c <HAL_DMA_IRQHandler+0xca0>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d013      	beq.n	80085de <HAL_DMA_IRQHandler+0xc62>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a19      	ldr	r2, [pc, #100]	@ (8008620 <HAL_DMA_IRQHandler+0xca4>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d00e      	beq.n	80085de <HAL_DMA_IRQHandler+0xc62>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a17      	ldr	r2, [pc, #92]	@ (8008624 <HAL_DMA_IRQHandler+0xca8>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d009      	beq.n	80085de <HAL_DMA_IRQHandler+0xc62>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a16      	ldr	r2, [pc, #88]	@ (8008628 <HAL_DMA_IRQHandler+0xcac>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d004      	beq.n	80085de <HAL_DMA_IRQHandler+0xc62>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a14      	ldr	r2, [pc, #80]	@ (800862c <HAL_DMA_IRQHandler+0xcb0>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d128      	bne.n	8008630 <HAL_DMA_IRQHandler+0xcb4>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f022 0214 	bic.w	r2, r2, #20
 80085ec:	601a      	str	r2, [r3, #0]
 80085ee:	e027      	b.n	8008640 <HAL_DMA_IRQHandler+0xcc4>
 80085f0:	40020010 	.word	0x40020010
 80085f4:	40020028 	.word	0x40020028
 80085f8:	40020040 	.word	0x40020040
 80085fc:	40020058 	.word	0x40020058
 8008600:	40020070 	.word	0x40020070
 8008604:	40020088 	.word	0x40020088
 8008608:	400200a0 	.word	0x400200a0
 800860c:	400200b8 	.word	0x400200b8
 8008610:	40020410 	.word	0x40020410
 8008614:	40020428 	.word	0x40020428
 8008618:	40020440 	.word	0x40020440
 800861c:	40020458 	.word	0x40020458
 8008620:	40020470 	.word	0x40020470
 8008624:	40020488 	.word	0x40020488
 8008628:	400204a0 	.word	0x400204a0
 800862c:	400204b8 	.word	0x400204b8
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f022 020a 	bic.w	r2, r2, #10
 800863e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008654:	2b00      	cmp	r3, #0
 8008656:	f000 8097 	beq.w	8008788 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008662:	e091      	b.n	8008788 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008668:	f003 031f 	and.w	r3, r3, #31
 800866c:	2208      	movs	r2, #8
 800866e:	409a      	lsls	r2, r3
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	4013      	ands	r3, r2
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 8088 	beq.w	800878a <HAL_DMA_IRQHandler+0xe0e>
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f003 0308 	and.w	r3, r3, #8
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 8082 	beq.w	800878a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a41      	ldr	r2, [pc, #260]	@ (8008790 <HAL_DMA_IRQHandler+0xe14>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d04a      	beq.n	8008726 <HAL_DMA_IRQHandler+0xdaa>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a3f      	ldr	r2, [pc, #252]	@ (8008794 <HAL_DMA_IRQHandler+0xe18>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d045      	beq.n	8008726 <HAL_DMA_IRQHandler+0xdaa>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a3e      	ldr	r2, [pc, #248]	@ (8008798 <HAL_DMA_IRQHandler+0xe1c>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d040      	beq.n	8008726 <HAL_DMA_IRQHandler+0xdaa>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a3c      	ldr	r2, [pc, #240]	@ (800879c <HAL_DMA_IRQHandler+0xe20>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d03b      	beq.n	8008726 <HAL_DMA_IRQHandler+0xdaa>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a3b      	ldr	r2, [pc, #236]	@ (80087a0 <HAL_DMA_IRQHandler+0xe24>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d036      	beq.n	8008726 <HAL_DMA_IRQHandler+0xdaa>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a39      	ldr	r2, [pc, #228]	@ (80087a4 <HAL_DMA_IRQHandler+0xe28>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d031      	beq.n	8008726 <HAL_DMA_IRQHandler+0xdaa>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a38      	ldr	r2, [pc, #224]	@ (80087a8 <HAL_DMA_IRQHandler+0xe2c>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d02c      	beq.n	8008726 <HAL_DMA_IRQHandler+0xdaa>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a36      	ldr	r2, [pc, #216]	@ (80087ac <HAL_DMA_IRQHandler+0xe30>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d027      	beq.n	8008726 <HAL_DMA_IRQHandler+0xdaa>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a35      	ldr	r2, [pc, #212]	@ (80087b0 <HAL_DMA_IRQHandler+0xe34>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d022      	beq.n	8008726 <HAL_DMA_IRQHandler+0xdaa>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a33      	ldr	r2, [pc, #204]	@ (80087b4 <HAL_DMA_IRQHandler+0xe38>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d01d      	beq.n	8008726 <HAL_DMA_IRQHandler+0xdaa>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a32      	ldr	r2, [pc, #200]	@ (80087b8 <HAL_DMA_IRQHandler+0xe3c>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d018      	beq.n	8008726 <HAL_DMA_IRQHandler+0xdaa>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a30      	ldr	r2, [pc, #192]	@ (80087bc <HAL_DMA_IRQHandler+0xe40>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d013      	beq.n	8008726 <HAL_DMA_IRQHandler+0xdaa>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a2f      	ldr	r2, [pc, #188]	@ (80087c0 <HAL_DMA_IRQHandler+0xe44>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d00e      	beq.n	8008726 <HAL_DMA_IRQHandler+0xdaa>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a2d      	ldr	r2, [pc, #180]	@ (80087c4 <HAL_DMA_IRQHandler+0xe48>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d009      	beq.n	8008726 <HAL_DMA_IRQHandler+0xdaa>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a2c      	ldr	r2, [pc, #176]	@ (80087c8 <HAL_DMA_IRQHandler+0xe4c>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d004      	beq.n	8008726 <HAL_DMA_IRQHandler+0xdaa>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a2a      	ldr	r2, [pc, #168]	@ (80087cc <HAL_DMA_IRQHandler+0xe50>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d108      	bne.n	8008738 <HAL_DMA_IRQHandler+0xdbc>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f022 021c 	bic.w	r2, r2, #28
 8008734:	601a      	str	r2, [r3, #0]
 8008736:	e007      	b.n	8008748 <HAL_DMA_IRQHandler+0xdcc>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f022 020e 	bic.w	r2, r2, #14
 8008746:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800874c:	f003 031f 	and.w	r3, r3, #31
 8008750:	2201      	movs	r2, #1
 8008752:	409a      	lsls	r2, r3
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008772:	2b00      	cmp	r3, #0
 8008774:	d009      	beq.n	800878a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	4798      	blx	r3
 800877e:	e004      	b.n	800878a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008780:	bf00      	nop
 8008782:	e002      	b.n	800878a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008784:	bf00      	nop
 8008786:	e000      	b.n	800878a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008788:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800878a:	3728      	adds	r7, #40	@ 0x28
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	40020010 	.word	0x40020010
 8008794:	40020028 	.word	0x40020028
 8008798:	40020040 	.word	0x40020040
 800879c:	40020058 	.word	0x40020058
 80087a0:	40020070 	.word	0x40020070
 80087a4:	40020088 	.word	0x40020088
 80087a8:	400200a0 	.word	0x400200a0
 80087ac:	400200b8 	.word	0x400200b8
 80087b0:	40020410 	.word	0x40020410
 80087b4:	40020428 	.word	0x40020428
 80087b8:	40020440 	.word	0x40020440
 80087bc:	40020458 	.word	0x40020458
 80087c0:	40020470 	.word	0x40020470
 80087c4:	40020488 	.word	0x40020488
 80087c8:	400204a0 	.word	0x400204a0
 80087cc:	400204b8 	.word	0x400204b8

080087d0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80087de:	b2db      	uxtb	r3, r3
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b087      	sub	sp, #28
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
 80087f8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087fe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008804:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a7f      	ldr	r2, [pc, #508]	@ (8008a08 <DMA_SetConfig+0x21c>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d072      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a7d      	ldr	r2, [pc, #500]	@ (8008a0c <DMA_SetConfig+0x220>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d06d      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a7c      	ldr	r2, [pc, #496]	@ (8008a10 <DMA_SetConfig+0x224>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d068      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a7a      	ldr	r2, [pc, #488]	@ (8008a14 <DMA_SetConfig+0x228>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d063      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a79      	ldr	r2, [pc, #484]	@ (8008a18 <DMA_SetConfig+0x22c>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d05e      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a77      	ldr	r2, [pc, #476]	@ (8008a1c <DMA_SetConfig+0x230>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d059      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a76      	ldr	r2, [pc, #472]	@ (8008a20 <DMA_SetConfig+0x234>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d054      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a74      	ldr	r2, [pc, #464]	@ (8008a24 <DMA_SetConfig+0x238>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d04f      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a73      	ldr	r2, [pc, #460]	@ (8008a28 <DMA_SetConfig+0x23c>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d04a      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a71      	ldr	r2, [pc, #452]	@ (8008a2c <DMA_SetConfig+0x240>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d045      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a70      	ldr	r2, [pc, #448]	@ (8008a30 <DMA_SetConfig+0x244>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d040      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a6e      	ldr	r2, [pc, #440]	@ (8008a34 <DMA_SetConfig+0x248>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d03b      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a6d      	ldr	r2, [pc, #436]	@ (8008a38 <DMA_SetConfig+0x24c>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d036      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a6b      	ldr	r2, [pc, #428]	@ (8008a3c <DMA_SetConfig+0x250>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d031      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a6a      	ldr	r2, [pc, #424]	@ (8008a40 <DMA_SetConfig+0x254>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d02c      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a68      	ldr	r2, [pc, #416]	@ (8008a44 <DMA_SetConfig+0x258>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d027      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a67      	ldr	r2, [pc, #412]	@ (8008a48 <DMA_SetConfig+0x25c>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d022      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a65      	ldr	r2, [pc, #404]	@ (8008a4c <DMA_SetConfig+0x260>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d01d      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a64      	ldr	r2, [pc, #400]	@ (8008a50 <DMA_SetConfig+0x264>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d018      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a62      	ldr	r2, [pc, #392]	@ (8008a54 <DMA_SetConfig+0x268>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d013      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a61      	ldr	r2, [pc, #388]	@ (8008a58 <DMA_SetConfig+0x26c>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d00e      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a5f      	ldr	r2, [pc, #380]	@ (8008a5c <DMA_SetConfig+0x270>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d009      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a5e      	ldr	r2, [pc, #376]	@ (8008a60 <DMA_SetConfig+0x274>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d004      	beq.n	80088f6 <DMA_SetConfig+0x10a>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a5c      	ldr	r2, [pc, #368]	@ (8008a64 <DMA_SetConfig+0x278>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d101      	bne.n	80088fa <DMA_SetConfig+0x10e>
 80088f6:	2301      	movs	r3, #1
 80088f8:	e000      	b.n	80088fc <DMA_SetConfig+0x110>
 80088fa:	2300      	movs	r3, #0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00d      	beq.n	800891c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008908:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800890e:	2b00      	cmp	r3, #0
 8008910:	d004      	beq.n	800891c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800891a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a39      	ldr	r2, [pc, #228]	@ (8008a08 <DMA_SetConfig+0x21c>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d04a      	beq.n	80089bc <DMA_SetConfig+0x1d0>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a38      	ldr	r2, [pc, #224]	@ (8008a0c <DMA_SetConfig+0x220>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d045      	beq.n	80089bc <DMA_SetConfig+0x1d0>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a36      	ldr	r2, [pc, #216]	@ (8008a10 <DMA_SetConfig+0x224>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d040      	beq.n	80089bc <DMA_SetConfig+0x1d0>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a35      	ldr	r2, [pc, #212]	@ (8008a14 <DMA_SetConfig+0x228>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d03b      	beq.n	80089bc <DMA_SetConfig+0x1d0>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a33      	ldr	r2, [pc, #204]	@ (8008a18 <DMA_SetConfig+0x22c>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d036      	beq.n	80089bc <DMA_SetConfig+0x1d0>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a32      	ldr	r2, [pc, #200]	@ (8008a1c <DMA_SetConfig+0x230>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d031      	beq.n	80089bc <DMA_SetConfig+0x1d0>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a30      	ldr	r2, [pc, #192]	@ (8008a20 <DMA_SetConfig+0x234>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d02c      	beq.n	80089bc <DMA_SetConfig+0x1d0>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a2f      	ldr	r2, [pc, #188]	@ (8008a24 <DMA_SetConfig+0x238>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d027      	beq.n	80089bc <DMA_SetConfig+0x1d0>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a2d      	ldr	r2, [pc, #180]	@ (8008a28 <DMA_SetConfig+0x23c>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d022      	beq.n	80089bc <DMA_SetConfig+0x1d0>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a2c      	ldr	r2, [pc, #176]	@ (8008a2c <DMA_SetConfig+0x240>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d01d      	beq.n	80089bc <DMA_SetConfig+0x1d0>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a2a      	ldr	r2, [pc, #168]	@ (8008a30 <DMA_SetConfig+0x244>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d018      	beq.n	80089bc <DMA_SetConfig+0x1d0>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a29      	ldr	r2, [pc, #164]	@ (8008a34 <DMA_SetConfig+0x248>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d013      	beq.n	80089bc <DMA_SetConfig+0x1d0>
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a27      	ldr	r2, [pc, #156]	@ (8008a38 <DMA_SetConfig+0x24c>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d00e      	beq.n	80089bc <DMA_SetConfig+0x1d0>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a26      	ldr	r2, [pc, #152]	@ (8008a3c <DMA_SetConfig+0x250>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d009      	beq.n	80089bc <DMA_SetConfig+0x1d0>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a24      	ldr	r2, [pc, #144]	@ (8008a40 <DMA_SetConfig+0x254>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d004      	beq.n	80089bc <DMA_SetConfig+0x1d0>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a23      	ldr	r2, [pc, #140]	@ (8008a44 <DMA_SetConfig+0x258>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d101      	bne.n	80089c0 <DMA_SetConfig+0x1d4>
 80089bc:	2301      	movs	r3, #1
 80089be:	e000      	b.n	80089c2 <DMA_SetConfig+0x1d6>
 80089c0:	2300      	movs	r3, #0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d059      	beq.n	8008a7a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089ca:	f003 031f 	and.w	r3, r3, #31
 80089ce:	223f      	movs	r2, #63	@ 0x3f
 80089d0:	409a      	lsls	r2, r3
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80089e4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	683a      	ldr	r2, [r7, #0]
 80089ec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	2b40      	cmp	r3, #64	@ 0x40
 80089f4:	d138      	bne.n	8008a68 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008a06:	e086      	b.n	8008b16 <DMA_SetConfig+0x32a>
 8008a08:	40020010 	.word	0x40020010
 8008a0c:	40020028 	.word	0x40020028
 8008a10:	40020040 	.word	0x40020040
 8008a14:	40020058 	.word	0x40020058
 8008a18:	40020070 	.word	0x40020070
 8008a1c:	40020088 	.word	0x40020088
 8008a20:	400200a0 	.word	0x400200a0
 8008a24:	400200b8 	.word	0x400200b8
 8008a28:	40020410 	.word	0x40020410
 8008a2c:	40020428 	.word	0x40020428
 8008a30:	40020440 	.word	0x40020440
 8008a34:	40020458 	.word	0x40020458
 8008a38:	40020470 	.word	0x40020470
 8008a3c:	40020488 	.word	0x40020488
 8008a40:	400204a0 	.word	0x400204a0
 8008a44:	400204b8 	.word	0x400204b8
 8008a48:	58025408 	.word	0x58025408
 8008a4c:	5802541c 	.word	0x5802541c
 8008a50:	58025430 	.word	0x58025430
 8008a54:	58025444 	.word	0x58025444
 8008a58:	58025458 	.word	0x58025458
 8008a5c:	5802546c 	.word	0x5802546c
 8008a60:	58025480 	.word	0x58025480
 8008a64:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	60da      	str	r2, [r3, #12]
}
 8008a78:	e04d      	b.n	8008b16 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a29      	ldr	r2, [pc, #164]	@ (8008b24 <DMA_SetConfig+0x338>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d022      	beq.n	8008aca <DMA_SetConfig+0x2de>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a27      	ldr	r2, [pc, #156]	@ (8008b28 <DMA_SetConfig+0x33c>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d01d      	beq.n	8008aca <DMA_SetConfig+0x2de>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a26      	ldr	r2, [pc, #152]	@ (8008b2c <DMA_SetConfig+0x340>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d018      	beq.n	8008aca <DMA_SetConfig+0x2de>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a24      	ldr	r2, [pc, #144]	@ (8008b30 <DMA_SetConfig+0x344>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d013      	beq.n	8008aca <DMA_SetConfig+0x2de>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a23      	ldr	r2, [pc, #140]	@ (8008b34 <DMA_SetConfig+0x348>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d00e      	beq.n	8008aca <DMA_SetConfig+0x2de>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a21      	ldr	r2, [pc, #132]	@ (8008b38 <DMA_SetConfig+0x34c>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d009      	beq.n	8008aca <DMA_SetConfig+0x2de>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a20      	ldr	r2, [pc, #128]	@ (8008b3c <DMA_SetConfig+0x350>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d004      	beq.n	8008aca <DMA_SetConfig+0x2de>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a1e      	ldr	r2, [pc, #120]	@ (8008b40 <DMA_SetConfig+0x354>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d101      	bne.n	8008ace <DMA_SetConfig+0x2e2>
 8008aca:	2301      	movs	r3, #1
 8008acc:	e000      	b.n	8008ad0 <DMA_SetConfig+0x2e4>
 8008ace:	2300      	movs	r3, #0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d020      	beq.n	8008b16 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ad8:	f003 031f 	and.w	r3, r3, #31
 8008adc:	2201      	movs	r2, #1
 8008ade:	409a      	lsls	r2, r3
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	683a      	ldr	r2, [r7, #0]
 8008aea:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	2b40      	cmp	r3, #64	@ 0x40
 8008af2:	d108      	bne.n	8008b06 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	60da      	str	r2, [r3, #12]
}
 8008b04:	e007      	b.n	8008b16 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	60da      	str	r2, [r3, #12]
}
 8008b16:	bf00      	nop
 8008b18:	371c      	adds	r7, #28
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	58025408 	.word	0x58025408
 8008b28:	5802541c 	.word	0x5802541c
 8008b2c:	58025430 	.word	0x58025430
 8008b30:	58025444 	.word	0x58025444
 8008b34:	58025458 	.word	0x58025458
 8008b38:	5802546c 	.word	0x5802546c
 8008b3c:	58025480 	.word	0x58025480
 8008b40:	58025494 	.word	0x58025494

08008b44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a42      	ldr	r2, [pc, #264]	@ (8008c5c <DMA_CalcBaseAndBitshift+0x118>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d04a      	beq.n	8008bec <DMA_CalcBaseAndBitshift+0xa8>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a41      	ldr	r2, [pc, #260]	@ (8008c60 <DMA_CalcBaseAndBitshift+0x11c>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d045      	beq.n	8008bec <DMA_CalcBaseAndBitshift+0xa8>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a3f      	ldr	r2, [pc, #252]	@ (8008c64 <DMA_CalcBaseAndBitshift+0x120>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d040      	beq.n	8008bec <DMA_CalcBaseAndBitshift+0xa8>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a3e      	ldr	r2, [pc, #248]	@ (8008c68 <DMA_CalcBaseAndBitshift+0x124>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d03b      	beq.n	8008bec <DMA_CalcBaseAndBitshift+0xa8>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a3c      	ldr	r2, [pc, #240]	@ (8008c6c <DMA_CalcBaseAndBitshift+0x128>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d036      	beq.n	8008bec <DMA_CalcBaseAndBitshift+0xa8>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a3b      	ldr	r2, [pc, #236]	@ (8008c70 <DMA_CalcBaseAndBitshift+0x12c>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d031      	beq.n	8008bec <DMA_CalcBaseAndBitshift+0xa8>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a39      	ldr	r2, [pc, #228]	@ (8008c74 <DMA_CalcBaseAndBitshift+0x130>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d02c      	beq.n	8008bec <DMA_CalcBaseAndBitshift+0xa8>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a38      	ldr	r2, [pc, #224]	@ (8008c78 <DMA_CalcBaseAndBitshift+0x134>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d027      	beq.n	8008bec <DMA_CalcBaseAndBitshift+0xa8>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a36      	ldr	r2, [pc, #216]	@ (8008c7c <DMA_CalcBaseAndBitshift+0x138>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d022      	beq.n	8008bec <DMA_CalcBaseAndBitshift+0xa8>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a35      	ldr	r2, [pc, #212]	@ (8008c80 <DMA_CalcBaseAndBitshift+0x13c>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d01d      	beq.n	8008bec <DMA_CalcBaseAndBitshift+0xa8>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a33      	ldr	r2, [pc, #204]	@ (8008c84 <DMA_CalcBaseAndBitshift+0x140>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d018      	beq.n	8008bec <DMA_CalcBaseAndBitshift+0xa8>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a32      	ldr	r2, [pc, #200]	@ (8008c88 <DMA_CalcBaseAndBitshift+0x144>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d013      	beq.n	8008bec <DMA_CalcBaseAndBitshift+0xa8>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a30      	ldr	r2, [pc, #192]	@ (8008c8c <DMA_CalcBaseAndBitshift+0x148>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d00e      	beq.n	8008bec <DMA_CalcBaseAndBitshift+0xa8>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a2f      	ldr	r2, [pc, #188]	@ (8008c90 <DMA_CalcBaseAndBitshift+0x14c>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d009      	beq.n	8008bec <DMA_CalcBaseAndBitshift+0xa8>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a2d      	ldr	r2, [pc, #180]	@ (8008c94 <DMA_CalcBaseAndBitshift+0x150>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d004      	beq.n	8008bec <DMA_CalcBaseAndBitshift+0xa8>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a2c      	ldr	r2, [pc, #176]	@ (8008c98 <DMA_CalcBaseAndBitshift+0x154>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d101      	bne.n	8008bf0 <DMA_CalcBaseAndBitshift+0xac>
 8008bec:	2301      	movs	r3, #1
 8008bee:	e000      	b.n	8008bf2 <DMA_CalcBaseAndBitshift+0xae>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d024      	beq.n	8008c40 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	3b10      	subs	r3, #16
 8008bfe:	4a27      	ldr	r2, [pc, #156]	@ (8008c9c <DMA_CalcBaseAndBitshift+0x158>)
 8008c00:	fba2 2303 	umull	r2, r3, r2, r3
 8008c04:	091b      	lsrs	r3, r3, #4
 8008c06:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f003 0307 	and.w	r3, r3, #7
 8008c0e:	4a24      	ldr	r2, [pc, #144]	@ (8008ca0 <DMA_CalcBaseAndBitshift+0x15c>)
 8008c10:	5cd3      	ldrb	r3, [r2, r3]
 8008c12:	461a      	mov	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2b03      	cmp	r3, #3
 8008c1c:	d908      	bls.n	8008c30 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	461a      	mov	r2, r3
 8008c24:	4b1f      	ldr	r3, [pc, #124]	@ (8008ca4 <DMA_CalcBaseAndBitshift+0x160>)
 8008c26:	4013      	ands	r3, r2
 8008c28:	1d1a      	adds	r2, r3, #4
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	659a      	str	r2, [r3, #88]	@ 0x58
 8008c2e:	e00d      	b.n	8008c4c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	461a      	mov	r2, r3
 8008c36:	4b1b      	ldr	r3, [pc, #108]	@ (8008ca4 <DMA_CalcBaseAndBitshift+0x160>)
 8008c38:	4013      	ands	r3, r2
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c3e:	e005      	b.n	8008c4c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	40020010 	.word	0x40020010
 8008c60:	40020028 	.word	0x40020028
 8008c64:	40020040 	.word	0x40020040
 8008c68:	40020058 	.word	0x40020058
 8008c6c:	40020070 	.word	0x40020070
 8008c70:	40020088 	.word	0x40020088
 8008c74:	400200a0 	.word	0x400200a0
 8008c78:	400200b8 	.word	0x400200b8
 8008c7c:	40020410 	.word	0x40020410
 8008c80:	40020428 	.word	0x40020428
 8008c84:	40020440 	.word	0x40020440
 8008c88:	40020458 	.word	0x40020458
 8008c8c:	40020470 	.word	0x40020470
 8008c90:	40020488 	.word	0x40020488
 8008c94:	400204a0 	.word	0x400204a0
 8008c98:	400204b8 	.word	0x400204b8
 8008c9c:	aaaaaaab 	.word	0xaaaaaaab
 8008ca0:	0801a4c4 	.word	0x0801a4c4
 8008ca4:	fffffc00 	.word	0xfffffc00

08008ca8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d120      	bne.n	8008cfe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc0:	2b03      	cmp	r3, #3
 8008cc2:	d858      	bhi.n	8008d76 <DMA_CheckFifoParam+0xce>
 8008cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8008ccc <DMA_CheckFifoParam+0x24>)
 8008cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cca:	bf00      	nop
 8008ccc:	08008cdd 	.word	0x08008cdd
 8008cd0:	08008cef 	.word	0x08008cef
 8008cd4:	08008cdd 	.word	0x08008cdd
 8008cd8:	08008d77 	.word	0x08008d77
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d048      	beq.n	8008d7a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008cec:	e045      	b.n	8008d7a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cf2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008cf6:	d142      	bne.n	8008d7e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008cfc:	e03f      	b.n	8008d7e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d06:	d123      	bne.n	8008d50 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d0c:	2b03      	cmp	r3, #3
 8008d0e:	d838      	bhi.n	8008d82 <DMA_CheckFifoParam+0xda>
 8008d10:	a201      	add	r2, pc, #4	@ (adr r2, 8008d18 <DMA_CheckFifoParam+0x70>)
 8008d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d16:	bf00      	nop
 8008d18:	08008d29 	.word	0x08008d29
 8008d1c:	08008d2f 	.word	0x08008d2f
 8008d20:	08008d29 	.word	0x08008d29
 8008d24:	08008d41 	.word	0x08008d41
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	73fb      	strb	r3, [r7, #15]
        break;
 8008d2c:	e030      	b.n	8008d90 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d025      	beq.n	8008d86 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d3e:	e022      	b.n	8008d86 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d44:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008d48:	d11f      	bne.n	8008d8a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008d4e:	e01c      	b.n	8008d8a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	d902      	bls.n	8008d5e <DMA_CheckFifoParam+0xb6>
 8008d58:	2b03      	cmp	r3, #3
 8008d5a:	d003      	beq.n	8008d64 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008d5c:	e018      	b.n	8008d90 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	73fb      	strb	r3, [r7, #15]
        break;
 8008d62:	e015      	b.n	8008d90 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00e      	beq.n	8008d8e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	73fb      	strb	r3, [r7, #15]
    break;
 8008d74:	e00b      	b.n	8008d8e <DMA_CheckFifoParam+0xe6>
        break;
 8008d76:	bf00      	nop
 8008d78:	e00a      	b.n	8008d90 <DMA_CheckFifoParam+0xe8>
        break;
 8008d7a:	bf00      	nop
 8008d7c:	e008      	b.n	8008d90 <DMA_CheckFifoParam+0xe8>
        break;
 8008d7e:	bf00      	nop
 8008d80:	e006      	b.n	8008d90 <DMA_CheckFifoParam+0xe8>
        break;
 8008d82:	bf00      	nop
 8008d84:	e004      	b.n	8008d90 <DMA_CheckFifoParam+0xe8>
        break;
 8008d86:	bf00      	nop
 8008d88:	e002      	b.n	8008d90 <DMA_CheckFifoParam+0xe8>
        break;
 8008d8a:	bf00      	nop
 8008d8c:	e000      	b.n	8008d90 <DMA_CheckFifoParam+0xe8>
    break;
 8008d8e:	bf00      	nop
    }
  }

  return status;
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop

08008da0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a38      	ldr	r2, [pc, #224]	@ (8008e94 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d022      	beq.n	8008dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a36      	ldr	r2, [pc, #216]	@ (8008e98 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d01d      	beq.n	8008dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a35      	ldr	r2, [pc, #212]	@ (8008e9c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d018      	beq.n	8008dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a33      	ldr	r2, [pc, #204]	@ (8008ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d013      	beq.n	8008dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a32      	ldr	r2, [pc, #200]	@ (8008ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d00e      	beq.n	8008dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a30      	ldr	r2, [pc, #192]	@ (8008ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d009      	beq.n	8008dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a2f      	ldr	r2, [pc, #188]	@ (8008eac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d004      	beq.n	8008dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a2d      	ldr	r2, [pc, #180]	@ (8008eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d101      	bne.n	8008e02 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e000      	b.n	8008e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008e02:	2300      	movs	r3, #0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d01a      	beq.n	8008e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	3b08      	subs	r3, #8
 8008e10:	4a28      	ldr	r2, [pc, #160]	@ (8008eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008e12:	fba2 2303 	umull	r2, r3, r2, r3
 8008e16:	091b      	lsrs	r3, r3, #4
 8008e18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	4b26      	ldr	r3, [pc, #152]	@ (8008eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008e1e:	4413      	add	r3, r2
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	461a      	mov	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a24      	ldr	r2, [pc, #144]	@ (8008ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008e2c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f003 031f 	and.w	r3, r3, #31
 8008e34:	2201      	movs	r2, #1
 8008e36:	409a      	lsls	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008e3c:	e024      	b.n	8008e88 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	3b10      	subs	r3, #16
 8008e46:	4a1e      	ldr	r2, [pc, #120]	@ (8008ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008e48:	fba2 2303 	umull	r2, r3, r2, r3
 8008e4c:	091b      	lsrs	r3, r3, #4
 8008e4e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	4a1c      	ldr	r2, [pc, #112]	@ (8008ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d806      	bhi.n	8008e66 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	4a1b      	ldr	r2, [pc, #108]	@ (8008ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d902      	bls.n	8008e66 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	3308      	adds	r3, #8
 8008e64:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	4b18      	ldr	r3, [pc, #96]	@ (8008ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008e6a:	4413      	add	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	461a      	mov	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a16      	ldr	r2, [pc, #88]	@ (8008ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008e78:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f003 031f 	and.w	r3, r3, #31
 8008e80:	2201      	movs	r2, #1
 8008e82:	409a      	lsls	r2, r3
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008e88:	bf00      	nop
 8008e8a:	3714      	adds	r7, #20
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	58025408 	.word	0x58025408
 8008e98:	5802541c 	.word	0x5802541c
 8008e9c:	58025430 	.word	0x58025430
 8008ea0:	58025444 	.word	0x58025444
 8008ea4:	58025458 	.word	0x58025458
 8008ea8:	5802546c 	.word	0x5802546c
 8008eac:	58025480 	.word	0x58025480
 8008eb0:	58025494 	.word	0x58025494
 8008eb4:	cccccccd 	.word	0xcccccccd
 8008eb8:	16009600 	.word	0x16009600
 8008ebc:	58025880 	.word	0x58025880
 8008ec0:	aaaaaaab 	.word	0xaaaaaaab
 8008ec4:	400204b8 	.word	0x400204b8
 8008ec8:	4002040f 	.word	0x4002040f
 8008ecc:	10008200 	.word	0x10008200
 8008ed0:	40020880 	.word	0x40020880

08008ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d04a      	beq.n	8008f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2b08      	cmp	r3, #8
 8008eee:	d847      	bhi.n	8008f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a25      	ldr	r2, [pc, #148]	@ (8008f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d022      	beq.n	8008f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a24      	ldr	r2, [pc, #144]	@ (8008f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d01d      	beq.n	8008f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a22      	ldr	r2, [pc, #136]	@ (8008f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d018      	beq.n	8008f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a21      	ldr	r2, [pc, #132]	@ (8008f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d013      	beq.n	8008f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a1f      	ldr	r2, [pc, #124]	@ (8008f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d00e      	beq.n	8008f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a1e      	ldr	r2, [pc, #120]	@ (8008fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d009      	beq.n	8008f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a1c      	ldr	r2, [pc, #112]	@ (8008fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d004      	beq.n	8008f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a1b      	ldr	r2, [pc, #108]	@ (8008fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d101      	bne.n	8008f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008f40:	2301      	movs	r3, #1
 8008f42:	e000      	b.n	8008f46 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008f44:	2300      	movs	r3, #0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00a      	beq.n	8008f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	4b17      	ldr	r3, [pc, #92]	@ (8008fac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008f4e:	4413      	add	r3, r2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	461a      	mov	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a15      	ldr	r2, [pc, #84]	@ (8008fb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008f5c:	671a      	str	r2, [r3, #112]	@ 0x70
 8008f5e:	e009      	b.n	8008f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	4b14      	ldr	r3, [pc, #80]	@ (8008fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008f64:	4413      	add	r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	461a      	mov	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a11      	ldr	r2, [pc, #68]	@ (8008fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008f72:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	3b01      	subs	r3, #1
 8008f78:	2201      	movs	r2, #1
 8008f7a:	409a      	lsls	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008f80:	bf00      	nop
 8008f82:	3714      	adds	r7, #20
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr
 8008f8c:	58025408 	.word	0x58025408
 8008f90:	5802541c 	.word	0x5802541c
 8008f94:	58025430 	.word	0x58025430
 8008f98:	58025444 	.word	0x58025444
 8008f9c:	58025458 	.word	0x58025458
 8008fa0:	5802546c 	.word	0x5802546c
 8008fa4:	58025480 	.word	0x58025480
 8008fa8:	58025494 	.word	0x58025494
 8008fac:	1600963f 	.word	0x1600963f
 8008fb0:	58025940 	.word	0x58025940
 8008fb4:	1000823f 	.word	0x1000823f
 8008fb8:	40020940 	.word	0x40020940

08008fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b089      	sub	sp, #36	@ 0x24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008fca:	4b86      	ldr	r3, [pc, #536]	@ (80091e4 <HAL_GPIO_Init+0x228>)
 8008fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008fce:	e18c      	b.n	80092ea <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	2101      	movs	r1, #1
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8008fdc:	4013      	ands	r3, r2
 8008fde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 817e 	beq.w	80092e4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f003 0303 	and.w	r3, r3, #3
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d005      	beq.n	8009000 <HAL_GPIO_Init+0x44>
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	f003 0303 	and.w	r3, r3, #3
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d130      	bne.n	8009062 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	005b      	lsls	r3, r3, #1
 800900a:	2203      	movs	r2, #3
 800900c:	fa02 f303 	lsl.w	r3, r2, r3
 8009010:	43db      	mvns	r3, r3
 8009012:	69ba      	ldr	r2, [r7, #24]
 8009014:	4013      	ands	r3, r2
 8009016:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	68da      	ldr	r2, [r3, #12]
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	005b      	lsls	r3, r3, #1
 8009020:	fa02 f303 	lsl.w	r3, r2, r3
 8009024:	69ba      	ldr	r2, [r7, #24]
 8009026:	4313      	orrs	r3, r2
 8009028:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	69ba      	ldr	r2, [r7, #24]
 800902e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009036:	2201      	movs	r2, #1
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	fa02 f303 	lsl.w	r3, r2, r3
 800903e:	43db      	mvns	r3, r3
 8009040:	69ba      	ldr	r2, [r7, #24]
 8009042:	4013      	ands	r3, r2
 8009044:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	091b      	lsrs	r3, r3, #4
 800904c:	f003 0201 	and.w	r2, r3, #1
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	fa02 f303 	lsl.w	r3, r2, r3
 8009056:	69ba      	ldr	r2, [r7, #24]
 8009058:	4313      	orrs	r3, r2
 800905a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	69ba      	ldr	r2, [r7, #24]
 8009060:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	f003 0303 	and.w	r3, r3, #3
 800906a:	2b03      	cmp	r3, #3
 800906c:	d017      	beq.n	800909e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	005b      	lsls	r3, r3, #1
 8009078:	2203      	movs	r2, #3
 800907a:	fa02 f303 	lsl.w	r3, r2, r3
 800907e:	43db      	mvns	r3, r3
 8009080:	69ba      	ldr	r2, [r7, #24]
 8009082:	4013      	ands	r3, r2
 8009084:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	689a      	ldr	r2, [r3, #8]
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	005b      	lsls	r3, r3, #1
 800908e:	fa02 f303 	lsl.w	r3, r2, r3
 8009092:	69ba      	ldr	r2, [r7, #24]
 8009094:	4313      	orrs	r3, r2
 8009096:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	69ba      	ldr	r2, [r7, #24]
 800909c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	f003 0303 	and.w	r3, r3, #3
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d123      	bne.n	80090f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	08da      	lsrs	r2, r3, #3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	3208      	adds	r2, #8
 80090b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	f003 0307 	and.w	r3, r3, #7
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	220f      	movs	r2, #15
 80090c2:	fa02 f303 	lsl.w	r3, r2, r3
 80090c6:	43db      	mvns	r3, r3
 80090c8:	69ba      	ldr	r2, [r7, #24]
 80090ca:	4013      	ands	r3, r2
 80090cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	691a      	ldr	r2, [r3, #16]
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	f003 0307 	and.w	r3, r3, #7
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	fa02 f303 	lsl.w	r3, r2, r3
 80090de:	69ba      	ldr	r2, [r7, #24]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	08da      	lsrs	r2, r3, #3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	3208      	adds	r2, #8
 80090ec:	69b9      	ldr	r1, [r7, #24]
 80090ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	005b      	lsls	r3, r3, #1
 80090fc:	2203      	movs	r2, #3
 80090fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009102:	43db      	mvns	r3, r3
 8009104:	69ba      	ldr	r2, [r7, #24]
 8009106:	4013      	ands	r3, r2
 8009108:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	f003 0203 	and.w	r2, r3, #3
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	005b      	lsls	r3, r3, #1
 8009116:	fa02 f303 	lsl.w	r3, r2, r3
 800911a:	69ba      	ldr	r2, [r7, #24]
 800911c:	4313      	orrs	r3, r2
 800911e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	69ba      	ldr	r2, [r7, #24]
 8009124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 80d8 	beq.w	80092e4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009134:	4b2c      	ldr	r3, [pc, #176]	@ (80091e8 <HAL_GPIO_Init+0x22c>)
 8009136:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800913a:	4a2b      	ldr	r2, [pc, #172]	@ (80091e8 <HAL_GPIO_Init+0x22c>)
 800913c:	f043 0302 	orr.w	r3, r3, #2
 8009140:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009144:	4b28      	ldr	r3, [pc, #160]	@ (80091e8 <HAL_GPIO_Init+0x22c>)
 8009146:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800914a:	f003 0302 	and.w	r3, r3, #2
 800914e:	60fb      	str	r3, [r7, #12]
 8009150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009152:	4a26      	ldr	r2, [pc, #152]	@ (80091ec <HAL_GPIO_Init+0x230>)
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	089b      	lsrs	r3, r3, #2
 8009158:	3302      	adds	r3, #2
 800915a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800915e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	f003 0303 	and.w	r3, r3, #3
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	220f      	movs	r2, #15
 800916a:	fa02 f303 	lsl.w	r3, r2, r3
 800916e:	43db      	mvns	r3, r3
 8009170:	69ba      	ldr	r2, [r7, #24]
 8009172:	4013      	ands	r3, r2
 8009174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a1d      	ldr	r2, [pc, #116]	@ (80091f0 <HAL_GPIO_Init+0x234>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d04a      	beq.n	8009214 <HAL_GPIO_Init+0x258>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a1c      	ldr	r2, [pc, #112]	@ (80091f4 <HAL_GPIO_Init+0x238>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d02b      	beq.n	80091de <HAL_GPIO_Init+0x222>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a1b      	ldr	r2, [pc, #108]	@ (80091f8 <HAL_GPIO_Init+0x23c>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d025      	beq.n	80091da <HAL_GPIO_Init+0x21e>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a1a      	ldr	r2, [pc, #104]	@ (80091fc <HAL_GPIO_Init+0x240>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d01f      	beq.n	80091d6 <HAL_GPIO_Init+0x21a>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a19      	ldr	r2, [pc, #100]	@ (8009200 <HAL_GPIO_Init+0x244>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d019      	beq.n	80091d2 <HAL_GPIO_Init+0x216>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a18      	ldr	r2, [pc, #96]	@ (8009204 <HAL_GPIO_Init+0x248>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d013      	beq.n	80091ce <HAL_GPIO_Init+0x212>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a17      	ldr	r2, [pc, #92]	@ (8009208 <HAL_GPIO_Init+0x24c>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d00d      	beq.n	80091ca <HAL_GPIO_Init+0x20e>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a16      	ldr	r2, [pc, #88]	@ (800920c <HAL_GPIO_Init+0x250>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d007      	beq.n	80091c6 <HAL_GPIO_Init+0x20a>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a15      	ldr	r2, [pc, #84]	@ (8009210 <HAL_GPIO_Init+0x254>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d101      	bne.n	80091c2 <HAL_GPIO_Init+0x206>
 80091be:	2309      	movs	r3, #9
 80091c0:	e029      	b.n	8009216 <HAL_GPIO_Init+0x25a>
 80091c2:	230a      	movs	r3, #10
 80091c4:	e027      	b.n	8009216 <HAL_GPIO_Init+0x25a>
 80091c6:	2307      	movs	r3, #7
 80091c8:	e025      	b.n	8009216 <HAL_GPIO_Init+0x25a>
 80091ca:	2306      	movs	r3, #6
 80091cc:	e023      	b.n	8009216 <HAL_GPIO_Init+0x25a>
 80091ce:	2305      	movs	r3, #5
 80091d0:	e021      	b.n	8009216 <HAL_GPIO_Init+0x25a>
 80091d2:	2304      	movs	r3, #4
 80091d4:	e01f      	b.n	8009216 <HAL_GPIO_Init+0x25a>
 80091d6:	2303      	movs	r3, #3
 80091d8:	e01d      	b.n	8009216 <HAL_GPIO_Init+0x25a>
 80091da:	2302      	movs	r3, #2
 80091dc:	e01b      	b.n	8009216 <HAL_GPIO_Init+0x25a>
 80091de:	2301      	movs	r3, #1
 80091e0:	e019      	b.n	8009216 <HAL_GPIO_Init+0x25a>
 80091e2:	bf00      	nop
 80091e4:	58000080 	.word	0x58000080
 80091e8:	58024400 	.word	0x58024400
 80091ec:	58000400 	.word	0x58000400
 80091f0:	58020000 	.word	0x58020000
 80091f4:	58020400 	.word	0x58020400
 80091f8:	58020800 	.word	0x58020800
 80091fc:	58020c00 	.word	0x58020c00
 8009200:	58021000 	.word	0x58021000
 8009204:	58021400 	.word	0x58021400
 8009208:	58021800 	.word	0x58021800
 800920c:	58021c00 	.word	0x58021c00
 8009210:	58022400 	.word	0x58022400
 8009214:	2300      	movs	r3, #0
 8009216:	69fa      	ldr	r2, [r7, #28]
 8009218:	f002 0203 	and.w	r2, r2, #3
 800921c:	0092      	lsls	r2, r2, #2
 800921e:	4093      	lsls	r3, r2
 8009220:	69ba      	ldr	r2, [r7, #24]
 8009222:	4313      	orrs	r3, r2
 8009224:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009226:	4938      	ldr	r1, [pc, #224]	@ (8009308 <HAL_GPIO_Init+0x34c>)
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	089b      	lsrs	r3, r3, #2
 800922c:	3302      	adds	r3, #2
 800922e:	69ba      	ldr	r2, [r7, #24]
 8009230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009234:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	43db      	mvns	r3, r3
 8009240:	69ba      	ldr	r2, [r7, #24]
 8009242:	4013      	ands	r3, r2
 8009244:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d003      	beq.n	800925a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8009252:	69ba      	ldr	r2, [r7, #24]
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	4313      	orrs	r3, r2
 8009258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800925a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009262:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	43db      	mvns	r3, r3
 800926e:	69ba      	ldr	r2, [r7, #24]
 8009270:	4013      	ands	r3, r2
 8009272:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800927c:	2b00      	cmp	r3, #0
 800927e:	d003      	beq.n	8009288 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8009280:	69ba      	ldr	r2, [r7, #24]
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	4313      	orrs	r3, r2
 8009286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009288:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	43db      	mvns	r3, r3
 800929a:	69ba      	ldr	r2, [r7, #24]
 800929c:	4013      	ands	r3, r2
 800929e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d003      	beq.n	80092b4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80092ac:	69ba      	ldr	r2, [r7, #24]
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	69ba      	ldr	r2, [r7, #24]
 80092b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	43db      	mvns	r3, r3
 80092c4:	69ba      	ldr	r2, [r7, #24]
 80092c6:	4013      	ands	r3, r2
 80092c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d003      	beq.n	80092de <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80092d6:	69ba      	ldr	r2, [r7, #24]
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	4313      	orrs	r3, r2
 80092dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	69ba      	ldr	r2, [r7, #24]
 80092e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	3301      	adds	r3, #1
 80092e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	fa22 f303 	lsr.w	r3, r2, r3
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f47f ae6b 	bne.w	8008fd0 <HAL_GPIO_Init+0x14>
  }
}
 80092fa:	bf00      	nop
 80092fc:	bf00      	nop
 80092fe:	3724      	adds	r7, #36	@ 0x24
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr
 8009308:	58000400 	.word	0x58000400

0800930c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d101      	bne.n	800931e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e08b      	b.n	8009436 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009324:	b2db      	uxtb	r3, r3
 8009326:	2b00      	cmp	r3, #0
 8009328:	d106      	bne.n	8009338 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f7f7 fe60 	bl	8000ff8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2224      	movs	r2, #36	@ 0x24
 800933c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f022 0201 	bic.w	r2, r2, #1
 800934e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800935c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	689a      	ldr	r2, [r3, #8]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800936c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	2b01      	cmp	r3, #1
 8009374:	d107      	bne.n	8009386 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	689a      	ldr	r2, [r3, #8]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009382:	609a      	str	r2, [r3, #8]
 8009384:	e006      	b.n	8009394 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	689a      	ldr	r2, [r3, #8]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009392:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	2b02      	cmp	r3, #2
 800939a:	d108      	bne.n	80093ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	685a      	ldr	r2, [r3, #4]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093aa:	605a      	str	r2, [r3, #4]
 80093ac:	e007      	b.n	80093be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	685a      	ldr	r2, [r3, #4]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80093bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	6859      	ldr	r1, [r3, #4]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	4b1d      	ldr	r3, [pc, #116]	@ (8009440 <HAL_I2C_Init+0x134>)
 80093ca:	430b      	orrs	r3, r1
 80093cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	68da      	ldr	r2, [r3, #12]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80093dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	691a      	ldr	r2, [r3, #16]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	695b      	ldr	r3, [r3, #20]
 80093e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	430a      	orrs	r2, r1
 80093f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	69d9      	ldr	r1, [r3, #28]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a1a      	ldr	r2, [r3, #32]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	430a      	orrs	r2, r1
 8009406:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f042 0201 	orr.w	r2, r2, #1
 8009416:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2220      	movs	r2, #32
 8009422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	02008000 	.word	0x02008000

08009444 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b088      	sub	sp, #32
 8009448:	af02      	add	r7, sp, #8
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	607a      	str	r2, [r7, #4]
 800944e:	461a      	mov	r2, r3
 8009450:	460b      	mov	r3, r1
 8009452:	817b      	strh	r3, [r7, #10]
 8009454:	4613      	mov	r3, r2
 8009456:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800945e:	b2db      	uxtb	r3, r3
 8009460:	2b20      	cmp	r3, #32
 8009462:	d17c      	bne.n	800955e <HAL_I2C_Master_Transmit_IT+0x11a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	699b      	ldr	r3, [r3, #24]
 800946a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800946e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009472:	d101      	bne.n	8009478 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8009474:	2302      	movs	r3, #2
 8009476:	e073      	b.n	8009560 <HAL_I2C_Master_Transmit_IT+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800947e:	2b01      	cmp	r3, #1
 8009480:	d101      	bne.n	8009486 <HAL_I2C_Master_Transmit_IT+0x42>
 8009482:	2302      	movs	r3, #2
 8009484:	e06c      	b.n	8009560 <HAL_I2C_Master_Transmit_IT+0x11c>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2201      	movs	r2, #1
 800948a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2221      	movs	r2, #33	@ 0x21
 8009492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2210      	movs	r2, #16
 800949a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2200      	movs	r2, #0
 80094a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	893a      	ldrh	r2, [r7, #8]
 80094ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	4a2d      	ldr	r2, [pc, #180]	@ (8009568 <HAL_I2C_Master_Transmit_IT+0x124>)
 80094b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	4a2c      	ldr	r2, [pc, #176]	@ (800956c <HAL_I2C_Master_Transmit_IT+0x128>)
 80094ba:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	2bff      	cmp	r3, #255	@ 0xff
 80094c4:	d906      	bls.n	80094d4 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	22ff      	movs	r2, #255	@ 0xff
 80094ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80094cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80094d0:	617b      	str	r3, [r7, #20]
 80094d2:	e007      	b.n	80094e4 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094d8:	b29a      	uxth	r2, r3
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80094de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80094e2:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferSize > 0U)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d024      	beq.n	8009536 <HAL_I2C_Master_Transmit_IT+0xf2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f0:	781a      	ldrb	r2, [r3, #0]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094fc:	1c5a      	adds	r2, r3, #1
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009506:	b29b      	uxth	r3, r3
 8009508:	3b01      	subs	r3, #1
 800950a:	b29a      	uxth	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009514:	3b01      	subs	r3, #1
 8009516:	b29a      	uxth	r2, r3
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	851a      	strh	r2, [r3, #40]	@ 0x28

      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009520:	b2db      	uxtb	r3, r3
 8009522:	3301      	adds	r3, #1
 8009524:	b2da      	uxtb	r2, r3
 8009526:	8979      	ldrh	r1, [r7, #10]
 8009528:	4b11      	ldr	r3, [pc, #68]	@ (8009570 <HAL_I2C_Master_Transmit_IT+0x12c>)
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f001 fcbc 	bl	800aeac <I2C_TransferConfig>
 8009534:	e009      	b.n	800954a <HAL_I2C_Master_Transmit_IT+0x106>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800953a:	b2da      	uxtb	r2, r3
 800953c:	8979      	ldrh	r1, [r7, #10]
 800953e:	4b0c      	ldr	r3, [pc, #48]	@ (8009570 <HAL_I2C_Master_Transmit_IT+0x12c>)
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f001 fcb1 	bl	800aeac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009552:	2101      	movs	r1, #1
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f001 fcdb 	bl	800af10 <I2C_Enable_IRQ>

    return HAL_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	e000      	b.n	8009560 <HAL_I2C_Master_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800955e:	2302      	movs	r3, #2
  }
}
 8009560:	4618      	mov	r0, r3
 8009562:	3718      	adds	r7, #24
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	ffff0000 	.word	0xffff0000
 800956c:	08009645 	.word	0x08009645
 8009570:	80002000 	.word	0x80002000

08009574 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	70fb      	strb	r3, [r7, #3]
 80095d0:	4613      	mov	r3, r2
 80095d2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80095d4:	bf00      	nop
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80095e8:	bf00      	nop
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b088      	sub	sp, #32
 8009648:	af02      	add	r7, sp, #8
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800965a:	2b01      	cmp	r3, #1
 800965c:	d101      	bne.n	8009662 <I2C_Master_ISR_IT+0x1e>
 800965e:	2302      	movs	r3, #2
 8009660:	e120      	b.n	80098a4 <I2C_Master_ISR_IT+0x260>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	091b      	lsrs	r3, r3, #4
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	2b00      	cmp	r3, #0
 8009674:	d013      	beq.n	800969e <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	091b      	lsrs	r3, r3, #4
 800967a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00d      	beq.n	800969e <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2210      	movs	r2, #16
 8009688:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800968e:	f043 0204 	orr.w	r2, r3, #4
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f001 fbc5 	bl	800ae26 <I2C_Flush_TXDR>
 800969c:	e0ed      	b.n	800987a <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	089b      	lsrs	r3, r3, #2
 80096a2:	f003 0301 	and.w	r3, r3, #1
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d023      	beq.n	80096f2 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	089b      	lsrs	r3, r3, #2
 80096ae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d01d      	beq.n	80096f2 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f023 0304 	bic.w	r3, r3, #4
 80096bc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096c8:	b2d2      	uxtb	r2, r2
 80096ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d0:	1c5a      	adds	r2, r3, #1
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096da:	3b01      	subs	r3, #1
 80096dc:	b29a      	uxth	r2, r3
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	3b01      	subs	r3, #1
 80096ea:	b29a      	uxth	r2, r3
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80096f0:	e0c3      	b.n	800987a <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	099b      	lsrs	r3, r3, #6
 80096f6:	f003 0301 	and.w	r3, r3, #1
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d12a      	bne.n	8009754 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	085b      	lsrs	r3, r3, #1
 8009702:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8009706:	2b00      	cmp	r3, #0
 8009708:	d024      	beq.n	8009754 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	085b      	lsrs	r3, r3, #1
 800970e:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009712:	2b00      	cmp	r3, #0
 8009714:	d01e      	beq.n	8009754 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800971a:	b29b      	uxth	r3, r3
 800971c:	2b00      	cmp	r3, #0
 800971e:	f000 80ac 	beq.w	800987a <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009726:	781a      	ldrb	r2, [r3, #0]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009732:	1c5a      	adds	r2, r3, #1
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800973c:	3b01      	subs	r3, #1
 800973e:	b29a      	uxth	r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009748:	b29b      	uxth	r3, r3
 800974a:	3b01      	subs	r3, #1
 800974c:	b29a      	uxth	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8009752:	e092      	b.n	800987a <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	09db      	lsrs	r3, r3, #7
 8009758:	f003 0301 	and.w	r3, r3, #1
 800975c:	2b00      	cmp	r3, #0
 800975e:	d05d      	beq.n	800981c <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	099b      	lsrs	r3, r3, #6
 8009764:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8009768:	2b00      	cmp	r3, #0
 800976a:	d057      	beq.n	800981c <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009770:	b29b      	uxth	r3, r3
 8009772:	2b00      	cmp	r3, #0
 8009774:	d040      	beq.n	80097f8 <I2C_Master_ISR_IT+0x1b4>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800977a:	2b00      	cmp	r3, #0
 800977c:	d13c      	bne.n	80097f8 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	b29b      	uxth	r3, r3
 8009786:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800978a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009790:	b29b      	uxth	r3, r3
 8009792:	2bff      	cmp	r3, #255	@ 0xff
 8009794:	d90e      	bls.n	80097b4 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	22ff      	movs	r2, #255	@ 0xff
 800979a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	8a79      	ldrh	r1, [r7, #18]
 80097a4:	2300      	movs	r3, #0
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f001 fb7d 	bl	800aeac <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097b2:	e032      	b.n	800981a <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80097c6:	d00b      	beq.n	80097e0 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097cc:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80097d2:	8a79      	ldrh	r1, [r7, #18]
 80097d4:	2000      	movs	r0, #0
 80097d6:	9000      	str	r0, [sp, #0]
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f001 fb67 	bl	800aeac <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097de:	e01c      	b.n	800981a <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097e4:	b2da      	uxtb	r2, r3
 80097e6:	8a79      	ldrh	r1, [r7, #18]
 80097e8:	2300      	movs	r3, #0
 80097ea:	9300      	str	r3, [sp, #0]
 80097ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f001 fb5b 	bl	800aeac <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097f6:	e010      	b.n	800981a <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009802:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009806:	d003      	beq.n	8009810 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 fddf 	bl	800a3cc <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800980e:	e034      	b.n	800987a <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009810:	2140      	movs	r1, #64	@ 0x40
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f001 f9f0 	bl	800abf8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009818:	e02f      	b.n	800987a <I2C_Master_ISR_IT+0x236>
 800981a:	e02e      	b.n	800987a <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	099b      	lsrs	r3, r3, #6
 8009820:	f003 0301 	and.w	r3, r3, #1
 8009824:	2b00      	cmp	r3, #0
 8009826:	d028      	beq.n	800987a <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	099b      	lsrs	r3, r3, #6
 800982c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8009830:	2b00      	cmp	r3, #0
 8009832:	d022      	beq.n	800987a <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009838:	b29b      	uxth	r3, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	d119      	bne.n	8009872 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009848:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800984c:	d015      	beq.n	800987a <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009852:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009856:	d108      	bne.n	800986a <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009866:	605a      	str	r2, [r3, #4]
 8009868:	e007      	b.n	800987a <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 fdae 	bl	800a3cc <I2C_ITMasterSeqCplt>
 8009870:	e003      	b.n	800987a <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009872:	2140      	movs	r1, #64	@ 0x40
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	f001 f9bf 	bl	800abf8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	095b      	lsrs	r3, r3, #5
 800987e:	f003 0301 	and.w	r3, r3, #1
 8009882:	2b00      	cmp	r3, #0
 8009884:	d009      	beq.n	800989a <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	095b      	lsrs	r3, r3, #5
 800988a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800988e:	2b00      	cmp	r3, #0
 8009890:	d003      	beq.n	800989a <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8009892:	6979      	ldr	r1, [r7, #20]
 8009894:	68f8      	ldr	r0, [r7, #12]
 8009896:	f000 fe35 	bl	800a504 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3718      	adds	r7, #24
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d101      	bne.n	80098d0 <I2C_Slave_ISR_IT+0x24>
 80098cc:	2302      	movs	r3, #2
 80098ce:	e0ed      	b.n	8009aac <I2C_Slave_ISR_IT+0x200>
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	095b      	lsrs	r3, r3, #5
 80098dc:	f003 0301 	and.w	r3, r3, #1
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d00a      	beq.n	80098fa <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	095b      	lsrs	r3, r3, #5
 80098e8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d004      	beq.n	80098fa <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80098f0:	6939      	ldr	r1, [r7, #16]
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	f000 fed0 	bl	800a698 <I2C_ITSlaveCplt>
 80098f8:	e0d3      	b.n	8009aa2 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	091b      	lsrs	r3, r3, #4
 80098fe:	f003 0301 	and.w	r3, r3, #1
 8009902:	2b00      	cmp	r3, #0
 8009904:	d04d      	beq.n	80099a2 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	091b      	lsrs	r3, r3, #4
 800990a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800990e:	2b00      	cmp	r3, #0
 8009910:	d047      	beq.n	80099a2 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009916:	b29b      	uxth	r3, r3
 8009918:	2b00      	cmp	r3, #0
 800991a:	d128      	bne.n	800996e <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009922:	b2db      	uxtb	r3, r3
 8009924:	2b28      	cmp	r3, #40	@ 0x28
 8009926:	d108      	bne.n	800993a <I2C_Slave_ISR_IT+0x8e>
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800992e:	d104      	bne.n	800993a <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009930:	6939      	ldr	r1, [r7, #16]
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f001 f90a 	bl	800ab4c <I2C_ITListenCplt>
 8009938:	e032      	b.n	80099a0 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009940:	b2db      	uxtb	r3, r3
 8009942:	2b29      	cmp	r3, #41	@ 0x29
 8009944:	d10e      	bne.n	8009964 <I2C_Slave_ISR_IT+0xb8>
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800994c:	d00a      	beq.n	8009964 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2210      	movs	r2, #16
 8009954:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f001 fa65 	bl	800ae26 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f000 fd72 	bl	800a446 <I2C_ITSlaveSeqCplt>
 8009962:	e01d      	b.n	80099a0 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2210      	movs	r2, #16
 800996a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800996c:	e096      	b.n	8009a9c <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2210      	movs	r2, #16
 8009974:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800997a:	f043 0204 	orr.w	r2, r3, #4
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d004      	beq.n	8009992 <I2C_Slave_ISR_IT+0xe6>
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800998e:	f040 8085 	bne.w	8009a9c <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009996:	4619      	mov	r1, r3
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f001 f92d 	bl	800abf8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800999e:	e07d      	b.n	8009a9c <I2C_Slave_ISR_IT+0x1f0>
 80099a0:	e07c      	b.n	8009a9c <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	089b      	lsrs	r3, r3, #2
 80099a6:	f003 0301 	and.w	r3, r3, #1
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d030      	beq.n	8009a10 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	089b      	lsrs	r3, r3, #2
 80099b2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d02a      	beq.n	8009a10 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099be:	b29b      	uxth	r3, r3
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d018      	beq.n	80099f6 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ce:	b2d2      	uxtb	r2, r2
 80099d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099d6:	1c5a      	adds	r2, r3, #1
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099e0:	3b01      	subs	r3, #1
 80099e2:	b29a      	uxth	r2, r3
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	3b01      	subs	r3, #1
 80099f0:	b29a      	uxth	r2, r3
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d14f      	bne.n	8009aa0 <I2C_Slave_ISR_IT+0x1f4>
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009a06:	d04b      	beq.n	8009aa0 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	f000 fd1c 	bl	800a446 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8009a0e:	e047      	b.n	8009aa0 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	08db      	lsrs	r3, r3, #3
 8009a14:	f003 0301 	and.w	r3, r3, #1
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00a      	beq.n	8009a32 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	08db      	lsrs	r3, r3, #3
 8009a20:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d004      	beq.n	8009a32 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009a28:	6939      	ldr	r1, [r7, #16]
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f000 fc4a 	bl	800a2c4 <I2C_ITAddrCplt>
 8009a30:	e037      	b.n	8009aa2 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	085b      	lsrs	r3, r3, #1
 8009a36:	f003 0301 	and.w	r3, r3, #1
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d031      	beq.n	8009aa2 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	085b      	lsrs	r3, r3, #1
 8009a42:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d02b      	beq.n	8009aa2 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d018      	beq.n	8009a86 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a58:	781a      	ldrb	r2, [r3, #0]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a64:	1c5a      	adds	r2, r3, #1
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	3b01      	subs	r3, #1
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009a84:	e00d      	b.n	8009aa2 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a8c:	d002      	beq.n	8009a94 <I2C_Slave_ISR_IT+0x1e8>
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d106      	bne.n	8009aa2 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f000 fcd6 	bl	800a446 <I2C_ITSlaveSeqCplt>
 8009a9a:	e002      	b.n	8009aa2 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8009a9c:	bf00      	nop
 8009a9e:	e000      	b.n	8009aa2 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8009aa0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b088      	sub	sp, #32
 8009ab8:	af02      	add	r7, sp, #8
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d101      	bne.n	8009ace <I2C_Master_ISR_DMA+0x1a>
 8009aca:	2302      	movs	r3, #2
 8009acc:	e0e1      	b.n	8009c92 <I2C_Master_ISR_DMA+0x1de>
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	091b      	lsrs	r3, r3, #4
 8009ada:	f003 0301 	and.w	r3, r3, #1
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d017      	beq.n	8009b12 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	091b      	lsrs	r3, r3, #4
 8009ae6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d011      	beq.n	8009b12 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2210      	movs	r2, #16
 8009af4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009afa:	f043 0204 	orr.w	r2, r3, #4
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009b02:	2120      	movs	r1, #32
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f001 fa03 	bl	800af10 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f001 f98b 	bl	800ae26 <I2C_Flush_TXDR>
 8009b10:	e0ba      	b.n	8009c88 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	09db      	lsrs	r3, r3, #7
 8009b16:	f003 0301 	and.w	r3, r3, #1
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d072      	beq.n	8009c04 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	099b      	lsrs	r3, r3, #6
 8009b22:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d06c      	beq.n	8009c04 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b38:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d04e      	beq.n	8009be2 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b50:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	2bff      	cmp	r3, #255	@ 0xff
 8009b5a:	d906      	bls.n	8009b6a <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	22ff      	movs	r2, #255	@ 0xff
 8009b60:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8009b62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009b66:	617b      	str	r3, [r7, #20]
 8009b68:	e010      	b.n	8009b8c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009b7c:	d003      	beq.n	8009b86 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b82:	617b      	str	r3, [r7, #20]
 8009b84:	e002      	b.n	8009b8c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8009b86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009b8a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b90:	b2da      	uxtb	r2, r3
 8009b92:	8a79      	ldrh	r1, [r7, #18]
 8009b94:	2300      	movs	r3, #0
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f001 f986 	bl	800aeac <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	2b22      	cmp	r3, #34	@ 0x22
 8009bbc:	d108      	bne.n	8009bd0 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009bcc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009bce:	e05b      	b.n	8009c88 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009bde:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009be0:	e052      	b.n	8009c88 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bf0:	d003      	beq.n	8009bfa <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f000 fbea 	bl	800a3cc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8009bf8:	e046      	b.n	8009c88 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009bfa:	2140      	movs	r1, #64	@ 0x40
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f000 fffb 	bl	800abf8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009c02:	e041      	b.n	8009c88 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	099b      	lsrs	r3, r3, #6
 8009c08:	f003 0301 	and.w	r3, r3, #1
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d029      	beq.n	8009c64 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	099b      	lsrs	r3, r3, #6
 8009c14:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d023      	beq.n	8009c64 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d119      	bne.n	8009c5a <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c34:	d027      	beq.n	8009c86 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c3a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009c3e:	d108      	bne.n	8009c52 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	685a      	ldr	r2, [r3, #4]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c4e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009c50:	e019      	b.n	8009c86 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	f000 fbba 	bl	800a3cc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009c58:	e015      	b.n	8009c86 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009c5a:	2140      	movs	r1, #64	@ 0x40
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	f000 ffcb 	bl	800abf8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009c62:	e010      	b.n	8009c86 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	095b      	lsrs	r3, r3, #5
 8009c68:	f003 0301 	and.w	r3, r3, #1
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00b      	beq.n	8009c88 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	095b      	lsrs	r3, r3, #5
 8009c74:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d005      	beq.n	8009c88 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009c7c:	68b9      	ldr	r1, [r7, #8]
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f000 fc40 	bl	800a504 <I2C_ITMasterCplt>
 8009c84:	e000      	b.n	8009c88 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8009c86:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3718      	adds	r7, #24
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
	...

08009c9c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b088      	sub	sp, #32
 8009ca0:	af02      	add	r7, sp, #8
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8009ca8:	4b92      	ldr	r3, [pc, #584]	@ (8009ef4 <I2C_Mem_ISR_DMA+0x258>)
 8009caa:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d101      	bne.n	8009cba <I2C_Mem_ISR_DMA+0x1e>
 8009cb6:	2302      	movs	r3, #2
 8009cb8:	e118      	b.n	8009eec <I2C_Mem_ISR_DMA+0x250>
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	091b      	lsrs	r3, r3, #4
 8009cc6:	f003 0301 	and.w	r3, r3, #1
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d017      	beq.n	8009cfe <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	091b      	lsrs	r3, r3, #4
 8009cd2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d011      	beq.n	8009cfe <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2210      	movs	r2, #16
 8009ce0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ce6:	f043 0204 	orr.w	r2, r3, #4
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009cee:	2120      	movs	r1, #32
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f001 f90d 	bl	800af10 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f001 f895 	bl	800ae26 <I2C_Flush_TXDR>
 8009cfc:	e0f1      	b.n	8009ee2 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	085b      	lsrs	r3, r3, #1
 8009d02:	f003 0301 	and.w	r3, r3, #1
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00f      	beq.n	8009d2a <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	085b      	lsrs	r3, r3, #1
 8009d0e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d009      	beq.n	8009d2a <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009d1e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f04f 32ff 	mov.w	r2, #4294967295
 8009d26:	651a      	str	r2, [r3, #80]	@ 0x50
 8009d28:	e0db      	b.n	8009ee2 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	09db      	lsrs	r3, r3, #7
 8009d2e:	f003 0301 	and.w	r3, r3, #1
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d060      	beq.n	8009df8 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	099b      	lsrs	r3, r3, #6
 8009d3a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d05a      	beq.n	8009df8 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009d42:	2101      	movs	r1, #1
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f001 f967 	bl	800b018 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009d4a:	2110      	movs	r1, #16
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f001 f8df 	bl	800af10 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d048      	beq.n	8009dee <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	2bff      	cmp	r3, #255	@ 0xff
 8009d64:	d910      	bls.n	8009d88 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	22ff      	movs	r2, #255	@ 0xff
 8009d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d70:	b299      	uxth	r1, r3
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	2300      	movs	r3, #0
 8009d7a:	9300      	str	r3, [sp, #0]
 8009d7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f001 f893 	bl	800aeac <I2C_TransferConfig>
 8009d86:	e011      	b.n	8009dac <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d96:	b299      	uxth	r1, r3
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d9c:	b2da      	uxtb	r2, r3
 8009d9e:	2300      	movs	r3, #0
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f001 f880 	bl	800aeac <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009db6:	1ad3      	subs	r3, r2, r3
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	2b22      	cmp	r3, #34	@ 0x22
 8009dc8:	d108      	bne.n	8009ddc <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009dd8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009dda:	e082      	b.n	8009ee2 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009dea:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009dec:	e079      	b.n	8009ee2 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009dee:	2140      	movs	r1, #64	@ 0x40
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	f000 ff01 	bl	800abf8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009df6:	e074      	b.n	8009ee2 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	099b      	lsrs	r3, r3, #6
 8009dfc:	f003 0301 	and.w	r3, r3, #1
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d05e      	beq.n	8009ec2 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	099b      	lsrs	r3, r3, #6
 8009e08:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d058      	beq.n	8009ec2 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009e10:	2101      	movs	r1, #1
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f001 f900 	bl	800b018 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009e18:	2110      	movs	r1, #16
 8009e1a:	68f8      	ldr	r0, [r7, #12]
 8009e1c:	f001 f878 	bl	800af10 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	2b22      	cmp	r3, #34	@ 0x22
 8009e2a:	d101      	bne.n	8009e30 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8009e2c:	4b32      	ldr	r3, [pc, #200]	@ (8009ef8 <I2C_Mem_ISR_DMA+0x25c>)
 8009e2e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	2bff      	cmp	r3, #255	@ 0xff
 8009e38:	d910      	bls.n	8009e5c <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	22ff      	movs	r2, #255	@ 0xff
 8009e3e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e44:	b299      	uxth	r1, r3
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e4a:	b2da      	uxtb	r2, r3
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	9300      	str	r3, [sp, #0]
 8009e50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f001 f829 	bl	800aeac <I2C_TransferConfig>
 8009e5a:	e011      	b.n	8009e80 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e6a:	b299      	uxth	r1, r3
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e70:	b2da      	uxtb	r2, r3
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f001 f816 	bl	800aeac <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	2b22      	cmp	r3, #34	@ 0x22
 8009e9c:	d108      	bne.n	8009eb0 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009eac:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009eae:	e018      	b.n	8009ee2 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009ebe:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009ec0:	e00f      	b.n	8009ee2 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	095b      	lsrs	r3, r3, #5
 8009ec6:	f003 0301 	and.w	r3, r3, #1
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d009      	beq.n	8009ee2 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	095b      	lsrs	r3, r3, #5
 8009ed2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d003      	beq.n	8009ee2 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009eda:	68b9      	ldr	r1, [r7, #8]
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f000 fb11 	bl	800a504 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009eea:	2300      	movs	r3, #0
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3718      	adds	r7, #24
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	80002000 	.word	0x80002000
 8009ef8:	80002400 	.word	0x80002400

08009efc <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b088      	sub	sp, #32
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f0c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d101      	bne.n	8009f20 <I2C_Slave_ISR_DMA+0x24>
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	e1cc      	b.n	800a2ba <I2C_Slave_ISR_DMA+0x3be>
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	095b      	lsrs	r3, r3, #5
 8009f2c:	f003 0301 	and.w	r3, r3, #1
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00a      	beq.n	8009f4a <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	095b      	lsrs	r3, r3, #5
 8009f38:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d004      	beq.n	8009f4a <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8009f40:	68b9      	ldr	r1, [r7, #8]
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f000 fba8 	bl	800a698 <I2C_ITSlaveCplt>
 8009f48:	e1b2      	b.n	800a2b0 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	091b      	lsrs	r3, r3, #4
 8009f4e:	f003 0301 	and.w	r3, r3, #1
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f000 819c 	beq.w	800a290 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	091b      	lsrs	r3, r3, #4
 8009f5c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 8195 	beq.w	800a290 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	0b9b      	lsrs	r3, r3, #14
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d106      	bne.n	8009f80 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	0bdb      	lsrs	r3, r3, #15
 8009f76:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	f000 8181 	beq.w	800a282 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d07c      	beq.n	800a082 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	0bdb      	lsrs	r3, r3, #15
 8009f8c:	f003 0301 	and.w	r3, r3, #1
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d076      	beq.n	800a082 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a75      	ldr	r2, [pc, #468]	@ (800a170 <I2C_Slave_ISR_DMA+0x274>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d059      	beq.n	800a054 <I2C_Slave_ISR_DMA+0x158>
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a73      	ldr	r2, [pc, #460]	@ (800a174 <I2C_Slave_ISR_DMA+0x278>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d053      	beq.n	800a054 <I2C_Slave_ISR_DMA+0x158>
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a71      	ldr	r2, [pc, #452]	@ (800a178 <I2C_Slave_ISR_DMA+0x27c>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d04d      	beq.n	800a054 <I2C_Slave_ISR_DMA+0x158>
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a6f      	ldr	r2, [pc, #444]	@ (800a17c <I2C_Slave_ISR_DMA+0x280>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d047      	beq.n	800a054 <I2C_Slave_ISR_DMA+0x158>
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a6d      	ldr	r2, [pc, #436]	@ (800a180 <I2C_Slave_ISR_DMA+0x284>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d041      	beq.n	800a054 <I2C_Slave_ISR_DMA+0x158>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a6b      	ldr	r2, [pc, #428]	@ (800a184 <I2C_Slave_ISR_DMA+0x288>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d03b      	beq.n	800a054 <I2C_Slave_ISR_DMA+0x158>
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a69      	ldr	r2, [pc, #420]	@ (800a188 <I2C_Slave_ISR_DMA+0x28c>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d035      	beq.n	800a054 <I2C_Slave_ISR_DMA+0x158>
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a67      	ldr	r2, [pc, #412]	@ (800a18c <I2C_Slave_ISR_DMA+0x290>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d02f      	beq.n	800a054 <I2C_Slave_ISR_DMA+0x158>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a65      	ldr	r2, [pc, #404]	@ (800a190 <I2C_Slave_ISR_DMA+0x294>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d029      	beq.n	800a054 <I2C_Slave_ISR_DMA+0x158>
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a63      	ldr	r2, [pc, #396]	@ (800a194 <I2C_Slave_ISR_DMA+0x298>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d023      	beq.n	800a054 <I2C_Slave_ISR_DMA+0x158>
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a61      	ldr	r2, [pc, #388]	@ (800a198 <I2C_Slave_ISR_DMA+0x29c>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d01d      	beq.n	800a054 <I2C_Slave_ISR_DMA+0x158>
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a5f      	ldr	r2, [pc, #380]	@ (800a19c <I2C_Slave_ISR_DMA+0x2a0>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d017      	beq.n	800a054 <I2C_Slave_ISR_DMA+0x158>
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a5d      	ldr	r2, [pc, #372]	@ (800a1a0 <I2C_Slave_ISR_DMA+0x2a4>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d011      	beq.n	800a054 <I2C_Slave_ISR_DMA+0x158>
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a5b      	ldr	r2, [pc, #364]	@ (800a1a4 <I2C_Slave_ISR_DMA+0x2a8>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d00b      	beq.n	800a054 <I2C_Slave_ISR_DMA+0x158>
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a59      	ldr	r2, [pc, #356]	@ (800a1a8 <I2C_Slave_ISR_DMA+0x2ac>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d005      	beq.n	800a054 <I2C_Slave_ISR_DMA+0x158>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a57      	ldr	r2, [pc, #348]	@ (800a1ac <I2C_Slave_ISR_DMA+0x2b0>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d109      	bne.n	800a068 <I2C_Slave_ISR_DMA+0x16c>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	bf0c      	ite	eq
 800a060:	2301      	moveq	r3, #1
 800a062:	2300      	movne	r3, #0
 800a064:	b2db      	uxtb	r3, r3
 800a066:	e008      	b.n	800a07a <I2C_Slave_ISR_DMA+0x17e>
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	bf0c      	ite	eq
 800a074:	2301      	moveq	r3, #1
 800a076:	2300      	movne	r3, #0
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d001      	beq.n	800a082 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800a07e:	2301      	movs	r3, #1
 800a080:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a086:	2b00      	cmp	r3, #0
 800a088:	f000 809f 	beq.w	800a1ca <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	0b9b      	lsrs	r3, r3, #14
 800a090:	f003 0301 	and.w	r3, r3, #1
 800a094:	2b00      	cmp	r3, #0
 800a096:	f000 8098 	beq.w	800a1ca <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a33      	ldr	r2, [pc, #204]	@ (800a170 <I2C_Slave_ISR_DMA+0x274>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d059      	beq.n	800a15a <I2C_Slave_ISR_DMA+0x25e>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a31      	ldr	r2, [pc, #196]	@ (800a174 <I2C_Slave_ISR_DMA+0x278>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d053      	beq.n	800a15a <I2C_Slave_ISR_DMA+0x25e>
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a2f      	ldr	r2, [pc, #188]	@ (800a178 <I2C_Slave_ISR_DMA+0x27c>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d04d      	beq.n	800a15a <I2C_Slave_ISR_DMA+0x25e>
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a2d      	ldr	r2, [pc, #180]	@ (800a17c <I2C_Slave_ISR_DMA+0x280>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d047      	beq.n	800a15a <I2C_Slave_ISR_DMA+0x25e>
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a2b      	ldr	r2, [pc, #172]	@ (800a180 <I2C_Slave_ISR_DMA+0x284>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d041      	beq.n	800a15a <I2C_Slave_ISR_DMA+0x25e>
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a29      	ldr	r2, [pc, #164]	@ (800a184 <I2C_Slave_ISR_DMA+0x288>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d03b      	beq.n	800a15a <I2C_Slave_ISR_DMA+0x25e>
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a27      	ldr	r2, [pc, #156]	@ (800a188 <I2C_Slave_ISR_DMA+0x28c>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d035      	beq.n	800a15a <I2C_Slave_ISR_DMA+0x25e>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a25      	ldr	r2, [pc, #148]	@ (800a18c <I2C_Slave_ISR_DMA+0x290>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d02f      	beq.n	800a15a <I2C_Slave_ISR_DMA+0x25e>
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a23      	ldr	r2, [pc, #140]	@ (800a190 <I2C_Slave_ISR_DMA+0x294>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d029      	beq.n	800a15a <I2C_Slave_ISR_DMA+0x25e>
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a21      	ldr	r2, [pc, #132]	@ (800a194 <I2C_Slave_ISR_DMA+0x298>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d023      	beq.n	800a15a <I2C_Slave_ISR_DMA+0x25e>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a1f      	ldr	r2, [pc, #124]	@ (800a198 <I2C_Slave_ISR_DMA+0x29c>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d01d      	beq.n	800a15a <I2C_Slave_ISR_DMA+0x25e>
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a1d      	ldr	r2, [pc, #116]	@ (800a19c <I2C_Slave_ISR_DMA+0x2a0>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d017      	beq.n	800a15a <I2C_Slave_ISR_DMA+0x25e>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a1b      	ldr	r2, [pc, #108]	@ (800a1a0 <I2C_Slave_ISR_DMA+0x2a4>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d011      	beq.n	800a15a <I2C_Slave_ISR_DMA+0x25e>
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a19      	ldr	r2, [pc, #100]	@ (800a1a4 <I2C_Slave_ISR_DMA+0x2a8>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d00b      	beq.n	800a15a <I2C_Slave_ISR_DMA+0x25e>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a17      	ldr	r2, [pc, #92]	@ (800a1a8 <I2C_Slave_ISR_DMA+0x2ac>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d005      	beq.n	800a15a <I2C_Slave_ISR_DMA+0x25e>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a15      	ldr	r2, [pc, #84]	@ (800a1ac <I2C_Slave_ISR_DMA+0x2b0>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d12a      	bne.n	800a1b0 <I2C_Slave_ISR_DMA+0x2b4>
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	bf0c      	ite	eq
 800a166:	2301      	moveq	r3, #1
 800a168:	2300      	movne	r3, #0
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	e029      	b.n	800a1c2 <I2C_Slave_ISR_DMA+0x2c6>
 800a16e:	bf00      	nop
 800a170:	40020010 	.word	0x40020010
 800a174:	40020028 	.word	0x40020028
 800a178:	40020040 	.word	0x40020040
 800a17c:	40020058 	.word	0x40020058
 800a180:	40020070 	.word	0x40020070
 800a184:	40020088 	.word	0x40020088
 800a188:	400200a0 	.word	0x400200a0
 800a18c:	400200b8 	.word	0x400200b8
 800a190:	40020410 	.word	0x40020410
 800a194:	40020428 	.word	0x40020428
 800a198:	40020440 	.word	0x40020440
 800a19c:	40020458 	.word	0x40020458
 800a1a0:	40020470 	.word	0x40020470
 800a1a4:	40020488 	.word	0x40020488
 800a1a8:	400204a0 	.word	0x400204a0
 800a1ac:	400204b8 	.word	0x400204b8
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	bf0c      	ite	eq
 800a1bc:	2301      	moveq	r3, #1
 800a1be:	2300      	movne	r3, #0
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d001      	beq.n	800a1ca <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800a1ca:	69fb      	ldr	r3, [r7, #28]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d128      	bne.n	800a222 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	2b28      	cmp	r3, #40	@ 0x28
 800a1da:	d108      	bne.n	800a1ee <I2C_Slave_ISR_DMA+0x2f2>
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1e2:	d104      	bne.n	800a1ee <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800a1e4:	68b9      	ldr	r1, [r7, #8]
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f000 fcb0 	bl	800ab4c <I2C_ITListenCplt>
 800a1ec:	e048      	b.n	800a280 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	2b29      	cmp	r3, #41	@ 0x29
 800a1f8:	d10e      	bne.n	800a218 <I2C_Slave_ISR_DMA+0x31c>
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a200:	d00a      	beq.n	800a218 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2210      	movs	r2, #16
 800a208:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f000 fe0b 	bl	800ae26 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f000 f918 	bl	800a446 <I2C_ITSlaveSeqCplt>
 800a216:	e033      	b.n	800a280 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2210      	movs	r2, #16
 800a21e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800a220:	e034      	b.n	800a28c <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2210      	movs	r2, #16
 800a228:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a22e:	f043 0204 	orr.w	r2, r3, #4
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a23c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d003      	beq.n	800a24c <I2C_Slave_ISR_DMA+0x350>
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a24a:	d11f      	bne.n	800a28c <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a24c:	7dfb      	ldrb	r3, [r7, #23]
 800a24e:	2b21      	cmp	r3, #33	@ 0x21
 800a250:	d002      	beq.n	800a258 <I2C_Slave_ISR_DMA+0x35c>
 800a252:	7dfb      	ldrb	r3, [r7, #23]
 800a254:	2b29      	cmp	r3, #41	@ 0x29
 800a256:	d103      	bne.n	800a260 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2221      	movs	r2, #33	@ 0x21
 800a25c:	631a      	str	r2, [r3, #48]	@ 0x30
 800a25e:	e008      	b.n	800a272 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a260:	7dfb      	ldrb	r3, [r7, #23]
 800a262:	2b22      	cmp	r3, #34	@ 0x22
 800a264:	d002      	beq.n	800a26c <I2C_Slave_ISR_DMA+0x370>
 800a266:	7dfb      	ldrb	r3, [r7, #23]
 800a268:	2b2a      	cmp	r3, #42	@ 0x2a
 800a26a:	d102      	bne.n	800a272 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2222      	movs	r2, #34	@ 0x22
 800a270:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a276:	4619      	mov	r1, r3
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f000 fcbd 	bl	800abf8 <I2C_ITError>
      if (treatdmanack == 1U)
 800a27e:	e005      	b.n	800a28c <I2C_Slave_ISR_DMA+0x390>
 800a280:	e004      	b.n	800a28c <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2210      	movs	r2, #16
 800a288:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a28a:	e011      	b.n	800a2b0 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800a28c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a28e:	e00f      	b.n	800a2b0 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	08db      	lsrs	r3, r3, #3
 800a294:	f003 0301 	and.w	r3, r3, #1
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d009      	beq.n	800a2b0 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	08db      	lsrs	r3, r3, #3
 800a2a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d003      	beq.n	800a2b0 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800a2a8:	68b9      	ldr	r1, [r7, #8]
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f000 f80a 	bl	800a2c4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3720      	adds	r7, #32
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop

0800a2c4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a2da:	2b28      	cmp	r3, #40	@ 0x28
 800a2dc:	d16a      	bne.n	800a3b4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	699b      	ldr	r3, [r3, #24]
 800a2e4:	0c1b      	lsrs	r3, r3, #16
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	f003 0301 	and.w	r3, r3, #1
 800a2ec:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	699b      	ldr	r3, [r3, #24]
 800a2f4:	0c1b      	lsrs	r3, r3, #16
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a2fc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	b29b      	uxth	r3, r3
 800a306:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a30a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	b29b      	uxth	r3, r3
 800a314:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a318:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d138      	bne.n	800a394 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800a322:	897b      	ldrh	r3, [r7, #10]
 800a324:	09db      	lsrs	r3, r3, #7
 800a326:	b29a      	uxth	r2, r3
 800a328:	89bb      	ldrh	r3, [r7, #12]
 800a32a:	4053      	eors	r3, r2
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	f003 0306 	and.w	r3, r3, #6
 800a332:	2b00      	cmp	r3, #0
 800a334:	d11c      	bne.n	800a370 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800a336:	897b      	ldrh	r3, [r7, #10]
 800a338:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a33e:	1c5a      	adds	r2, r3, #1
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d13b      	bne.n	800a3c4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2208      	movs	r2, #8
 800a358:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a362:	89ba      	ldrh	r2, [r7, #12]
 800a364:	7bfb      	ldrb	r3, [r7, #15]
 800a366:	4619      	mov	r1, r3
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f7ff f92b 	bl	80095c4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a36e:	e029      	b.n	800a3c4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800a370:	893b      	ldrh	r3, [r7, #8]
 800a372:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a374:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 fe4d 	bl	800b018 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2200      	movs	r2, #0
 800a382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a386:	89ba      	ldrh	r2, [r7, #12]
 800a388:	7bfb      	ldrb	r3, [r7, #15]
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f7ff f919 	bl	80095c4 <HAL_I2C_AddrCallback>
}
 800a392:	e017      	b.n	800a3c4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a394:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 fe3d 	bl	800b018 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a3a6:	89ba      	ldrh	r2, [r7, #12]
 800a3a8:	7bfb      	ldrb	r3, [r7, #15]
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f7ff f909 	bl	80095c4 <HAL_I2C_AddrCallback>
}
 800a3b2:	e007      	b.n	800a3c4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2208      	movs	r2, #8
 800a3ba:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800a3c4:	bf00      	nop
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	2b21      	cmp	r3, #33	@ 0x21
 800a3e6:	d115      	bne.n	800a414 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2220      	movs	r2, #32
 800a3ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2211      	movs	r2, #17
 800a3f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a3fc:	2101      	movs	r1, #1
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 fe0a 	bl	800b018 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f7ff f8b1 	bl	8009574 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a412:	e014      	b.n	800a43e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2220      	movs	r2, #32
 800a418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2212      	movs	r2, #18
 800a420:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a428:	2102      	movs	r1, #2
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 fdf4 	bl	800b018 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f7ff f8a5 	bl	8009588 <HAL_I2C_MasterRxCpltCallback>
}
 800a43e:	bf00      	nop
 800a440:	3708      	adds	r7, #8
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b084      	sub	sp, #16
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	0b9b      	lsrs	r3, r3, #14
 800a462:	f003 0301 	and.w	r3, r3, #1
 800a466:	2b00      	cmp	r3, #0
 800a468:	d008      	beq.n	800a47c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a478:	601a      	str	r2, [r3, #0]
 800a47a:	e00d      	b.n	800a498 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	0bdb      	lsrs	r3, r3, #15
 800a480:	f003 0301 	and.w	r3, r3, #1
 800a484:	2b00      	cmp	r3, #0
 800a486:	d007      	beq.n	800a498 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a496:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	2b29      	cmp	r3, #41	@ 0x29
 800a4a2:	d112      	bne.n	800a4ca <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2228      	movs	r2, #40	@ 0x28
 800a4a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2221      	movs	r2, #33	@ 0x21
 800a4b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a4b2:	2101      	movs	r1, #1
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 fdaf 	bl	800b018 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f7ff f86a 	bl	800959c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a4c8:	e017      	b.n	800a4fa <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4d4:	d111      	bne.n	800a4fa <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2228      	movs	r2, #40	@ 0x28
 800a4da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2222      	movs	r2, #34	@ 0x22
 800a4e2:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a4e4:	2102      	movs	r1, #2
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 fd96 	bl	800b018 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f7ff f85b 	bl	80095b0 <HAL_I2C_SlaveRxCpltCallback>
}
 800a4fa:	bf00      	nop
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
	...

0800a504 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b086      	sub	sp, #24
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2220      	movs	r2, #32
 800a518:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a520:	b2db      	uxtb	r3, r3
 800a522:	2b21      	cmp	r3, #33	@ 0x21
 800a524:	d107      	bne.n	800a536 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a526:	2101      	movs	r1, #1
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 fd75 	bl	800b018 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2211      	movs	r2, #17
 800a532:	631a      	str	r2, [r3, #48]	@ 0x30
 800a534:	e00c      	b.n	800a550 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	2b22      	cmp	r3, #34	@ 0x22
 800a540:	d106      	bne.n	800a550 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a542:	2102      	movs	r1, #2
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 fd67 	bl	800b018 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2212      	movs	r2, #18
 800a54e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	6859      	ldr	r1, [r3, #4]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	4b4d      	ldr	r3, [pc, #308]	@ (800a690 <I2C_ITMasterCplt+0x18c>)
 800a55c:	400b      	ands	r3, r1
 800a55e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2200      	movs	r2, #0
 800a564:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4a4a      	ldr	r2, [pc, #296]	@ (800a694 <I2C_ITMasterCplt+0x190>)
 800a56a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	091b      	lsrs	r3, r3, #4
 800a570:	f003 0301 	and.w	r3, r3, #1
 800a574:	2b00      	cmp	r3, #0
 800a576:	d009      	beq.n	800a58c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2210      	movs	r2, #16
 800a57e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a584:	f043 0204 	orr.w	r2, r3, #4
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a592:	b2db      	uxtb	r3, r3
 800a594:	2b60      	cmp	r3, #96	@ 0x60
 800a596:	d10b      	bne.n	800a5b0 <I2C_ITMasterCplt+0xac>
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	089b      	lsrs	r3, r3, #2
 800a59c:	f003 0301 	and.w	r3, r3, #1
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d005      	beq.n	800a5b0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 fc38 	bl	800ae26 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5ba:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	2b60      	cmp	r3, #96	@ 0x60
 800a5c6:	d002      	beq.n	800a5ce <I2C_ITMasterCplt+0xca>
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d006      	beq.n	800a5dc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fb0f 	bl	800abf8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a5da:	e054      	b.n	800a686 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	2b21      	cmp	r3, #33	@ 0x21
 800a5e6:	d124      	bne.n	800a632 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2220      	movs	r2, #32
 800a5ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	2b40      	cmp	r3, #64	@ 0x40
 800a600:	d10b      	bne.n	800a61a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f7fe ffee 	bl	80095f4 <HAL_I2C_MemTxCpltCallback>
}
 800a618:	e035      	b.n	800a686 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f7fe ffa2 	bl	8009574 <HAL_I2C_MasterTxCpltCallback>
}
 800a630:	e029      	b.n	800a686 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b22      	cmp	r3, #34	@ 0x22
 800a63c:	d123      	bne.n	800a686 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2220      	movs	r2, #32
 800a642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a652:	b2db      	uxtb	r3, r3
 800a654:	2b40      	cmp	r3, #64	@ 0x40
 800a656:	d10b      	bne.n	800a670 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f7fe ffcd 	bl	8009608 <HAL_I2C_MemRxCpltCallback>
}
 800a66e:	e00a      	b.n	800a686 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f7fe ff81 	bl	8009588 <HAL_I2C_MasterRxCpltCallback>
}
 800a686:	bf00      	nop
 800a688:	3718      	adds	r7, #24
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	fe00e800 	.word	0xfe00e800
 800a694:	ffff0000 	.word	0xffff0000

0800a698 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b086      	sub	sp, #24
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6b2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a6ba:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2220      	movs	r2, #32
 800a6c2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a6c4:	7afb      	ldrb	r3, [r7, #11]
 800a6c6:	2b21      	cmp	r3, #33	@ 0x21
 800a6c8:	d002      	beq.n	800a6d0 <I2C_ITSlaveCplt+0x38>
 800a6ca:	7afb      	ldrb	r3, [r7, #11]
 800a6cc:	2b29      	cmp	r3, #41	@ 0x29
 800a6ce:	d108      	bne.n	800a6e2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800a6d0:	f248 0101 	movw	r1, #32769	@ 0x8001
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fc9f 	bl	800b018 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2221      	movs	r2, #33	@ 0x21
 800a6de:	631a      	str	r2, [r3, #48]	@ 0x30
 800a6e0:	e019      	b.n	800a716 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a6e2:	7afb      	ldrb	r3, [r7, #11]
 800a6e4:	2b22      	cmp	r3, #34	@ 0x22
 800a6e6:	d002      	beq.n	800a6ee <I2C_ITSlaveCplt+0x56>
 800a6e8:	7afb      	ldrb	r3, [r7, #11]
 800a6ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6ec:	d108      	bne.n	800a700 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800a6ee:	f248 0102 	movw	r1, #32770	@ 0x8002
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fc90 	bl	800b018 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2222      	movs	r2, #34	@ 0x22
 800a6fc:	631a      	str	r2, [r3, #48]	@ 0x30
 800a6fe:	e00a      	b.n	800a716 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800a700:	7afb      	ldrb	r3, [r7, #11]
 800a702:	2b28      	cmp	r3, #40	@ 0x28
 800a704:	d107      	bne.n	800a716 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800a706:	f248 0103 	movw	r1, #32771	@ 0x8003
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 fc84 	bl	800b018 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	685a      	ldr	r2, [r3, #4]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a724:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	6859      	ldr	r1, [r3, #4]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	4b80      	ldr	r3, [pc, #512]	@ (800a934 <I2C_ITSlaveCplt+0x29c>)
 800a732:	400b      	ands	r3, r1
 800a734:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 fb75 	bl	800ae26 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	0b9b      	lsrs	r3, r3, #14
 800a740:	f003 0301 	and.w	r3, r3, #1
 800a744:	2b00      	cmp	r3, #0
 800a746:	d07a      	beq.n	800a83e <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a756:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f000 8112 	beq.w	800a986 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a73      	ldr	r2, [pc, #460]	@ (800a938 <I2C_ITSlaveCplt+0x2a0>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d059      	beq.n	800a822 <I2C_ITSlaveCplt+0x18a>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a71      	ldr	r2, [pc, #452]	@ (800a93c <I2C_ITSlaveCplt+0x2a4>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d053      	beq.n	800a822 <I2C_ITSlaveCplt+0x18a>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a6f      	ldr	r2, [pc, #444]	@ (800a940 <I2C_ITSlaveCplt+0x2a8>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d04d      	beq.n	800a822 <I2C_ITSlaveCplt+0x18a>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a6d      	ldr	r2, [pc, #436]	@ (800a944 <I2C_ITSlaveCplt+0x2ac>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d047      	beq.n	800a822 <I2C_ITSlaveCplt+0x18a>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a6b      	ldr	r2, [pc, #428]	@ (800a948 <I2C_ITSlaveCplt+0x2b0>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d041      	beq.n	800a822 <I2C_ITSlaveCplt+0x18a>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a69      	ldr	r2, [pc, #420]	@ (800a94c <I2C_ITSlaveCplt+0x2b4>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d03b      	beq.n	800a822 <I2C_ITSlaveCplt+0x18a>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a67      	ldr	r2, [pc, #412]	@ (800a950 <I2C_ITSlaveCplt+0x2b8>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d035      	beq.n	800a822 <I2C_ITSlaveCplt+0x18a>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a65      	ldr	r2, [pc, #404]	@ (800a954 <I2C_ITSlaveCplt+0x2bc>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d02f      	beq.n	800a822 <I2C_ITSlaveCplt+0x18a>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a63      	ldr	r2, [pc, #396]	@ (800a958 <I2C_ITSlaveCplt+0x2c0>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d029      	beq.n	800a822 <I2C_ITSlaveCplt+0x18a>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a61      	ldr	r2, [pc, #388]	@ (800a95c <I2C_ITSlaveCplt+0x2c4>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d023      	beq.n	800a822 <I2C_ITSlaveCplt+0x18a>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a5f      	ldr	r2, [pc, #380]	@ (800a960 <I2C_ITSlaveCplt+0x2c8>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d01d      	beq.n	800a822 <I2C_ITSlaveCplt+0x18a>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a5d      	ldr	r2, [pc, #372]	@ (800a964 <I2C_ITSlaveCplt+0x2cc>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d017      	beq.n	800a822 <I2C_ITSlaveCplt+0x18a>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a5b      	ldr	r2, [pc, #364]	@ (800a968 <I2C_ITSlaveCplt+0x2d0>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d011      	beq.n	800a822 <I2C_ITSlaveCplt+0x18a>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a59      	ldr	r2, [pc, #356]	@ (800a96c <I2C_ITSlaveCplt+0x2d4>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d00b      	beq.n	800a822 <I2C_ITSlaveCplt+0x18a>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a57      	ldr	r2, [pc, #348]	@ (800a970 <I2C_ITSlaveCplt+0x2d8>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d005      	beq.n	800a822 <I2C_ITSlaveCplt+0x18a>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a55      	ldr	r2, [pc, #340]	@ (800a974 <I2C_ITSlaveCplt+0x2dc>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d105      	bne.n	800a82e <I2C_ITSlaveCplt+0x196>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	e004      	b.n	800a838 <I2C_ITSlaveCplt+0x1a0>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	b29b      	uxth	r3, r3
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800a83c:	e0a3      	b.n	800a986 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	0bdb      	lsrs	r3, r3, #15
 800a842:	f003 0301 	and.w	r3, r3, #1
 800a846:	2b00      	cmp	r3, #0
 800a848:	f000 809d 	beq.w	800a986 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a85a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a860:	2b00      	cmp	r3, #0
 800a862:	f000 8090 	beq.w	800a986 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a32      	ldr	r2, [pc, #200]	@ (800a938 <I2C_ITSlaveCplt+0x2a0>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d059      	beq.n	800a926 <I2C_ITSlaveCplt+0x28e>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a30      	ldr	r2, [pc, #192]	@ (800a93c <I2C_ITSlaveCplt+0x2a4>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d053      	beq.n	800a926 <I2C_ITSlaveCplt+0x28e>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a2e      	ldr	r2, [pc, #184]	@ (800a940 <I2C_ITSlaveCplt+0x2a8>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d04d      	beq.n	800a926 <I2C_ITSlaveCplt+0x28e>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a2c      	ldr	r2, [pc, #176]	@ (800a944 <I2C_ITSlaveCplt+0x2ac>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d047      	beq.n	800a926 <I2C_ITSlaveCplt+0x28e>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a2a      	ldr	r2, [pc, #168]	@ (800a948 <I2C_ITSlaveCplt+0x2b0>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d041      	beq.n	800a926 <I2C_ITSlaveCplt+0x28e>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a28      	ldr	r2, [pc, #160]	@ (800a94c <I2C_ITSlaveCplt+0x2b4>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d03b      	beq.n	800a926 <I2C_ITSlaveCplt+0x28e>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a26      	ldr	r2, [pc, #152]	@ (800a950 <I2C_ITSlaveCplt+0x2b8>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d035      	beq.n	800a926 <I2C_ITSlaveCplt+0x28e>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a24      	ldr	r2, [pc, #144]	@ (800a954 <I2C_ITSlaveCplt+0x2bc>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d02f      	beq.n	800a926 <I2C_ITSlaveCplt+0x28e>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a22      	ldr	r2, [pc, #136]	@ (800a958 <I2C_ITSlaveCplt+0x2c0>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d029      	beq.n	800a926 <I2C_ITSlaveCplt+0x28e>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a20      	ldr	r2, [pc, #128]	@ (800a95c <I2C_ITSlaveCplt+0x2c4>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d023      	beq.n	800a926 <I2C_ITSlaveCplt+0x28e>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a1e      	ldr	r2, [pc, #120]	@ (800a960 <I2C_ITSlaveCplt+0x2c8>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d01d      	beq.n	800a926 <I2C_ITSlaveCplt+0x28e>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a1c      	ldr	r2, [pc, #112]	@ (800a964 <I2C_ITSlaveCplt+0x2cc>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d017      	beq.n	800a926 <I2C_ITSlaveCplt+0x28e>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a1a      	ldr	r2, [pc, #104]	@ (800a968 <I2C_ITSlaveCplt+0x2d0>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d011      	beq.n	800a926 <I2C_ITSlaveCplt+0x28e>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a18      	ldr	r2, [pc, #96]	@ (800a96c <I2C_ITSlaveCplt+0x2d4>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d00b      	beq.n	800a926 <I2C_ITSlaveCplt+0x28e>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a16      	ldr	r2, [pc, #88]	@ (800a970 <I2C_ITSlaveCplt+0x2d8>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d005      	beq.n	800a926 <I2C_ITSlaveCplt+0x28e>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a14      	ldr	r2, [pc, #80]	@ (800a974 <I2C_ITSlaveCplt+0x2dc>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d128      	bne.n	800a978 <I2C_ITSlaveCplt+0x2e0>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	b29b      	uxth	r3, r3
 800a930:	e027      	b.n	800a982 <I2C_ITSlaveCplt+0x2ea>
 800a932:	bf00      	nop
 800a934:	fe00e800 	.word	0xfe00e800
 800a938:	40020010 	.word	0x40020010
 800a93c:	40020028 	.word	0x40020028
 800a940:	40020040 	.word	0x40020040
 800a944:	40020058 	.word	0x40020058
 800a948:	40020070 	.word	0x40020070
 800a94c:	40020088 	.word	0x40020088
 800a950:	400200a0 	.word	0x400200a0
 800a954:	400200b8 	.word	0x400200b8
 800a958:	40020410 	.word	0x40020410
 800a95c:	40020428 	.word	0x40020428
 800a960:	40020440 	.word	0x40020440
 800a964:	40020458 	.word	0x40020458
 800a968:	40020470 	.word	0x40020470
 800a96c:	40020488 	.word	0x40020488
 800a970:	400204a0 	.word	0x400204a0
 800a974:	400204b8 	.word	0x400204b8
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	b29b      	uxth	r3, r3
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	089b      	lsrs	r3, r3, #2
 800a98a:	f003 0301 	and.w	r3, r3, #1
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d020      	beq.n	800a9d4 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	f023 0304 	bic.w	r3, r3, #4
 800a998:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9a4:	b2d2      	uxtb	r2, r2
 800a9a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ac:	1c5a      	adds	r2, r3, #1
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00c      	beq.n	800a9d4 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d005      	beq.n	800a9ea <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9e2:	f043 0204 	orr.w	r2, r3, #4
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	091b      	lsrs	r3, r3, #4
 800a9ee:	f003 0301 	and.w	r3, r3, #1
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d04a      	beq.n	800aa8c <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	091b      	lsrs	r3, r3, #4
 800a9fa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d044      	beq.n	800aa8c <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d128      	bne.n	800aa5e <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	2b28      	cmp	r3, #40	@ 0x28
 800aa16:	d108      	bne.n	800aa2a <I2C_ITSlaveCplt+0x392>
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa1e:	d104      	bne.n	800aa2a <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800aa20:	6979      	ldr	r1, [r7, #20]
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f892 	bl	800ab4c <I2C_ITListenCplt>
 800aa28:	e030      	b.n	800aa8c <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	2b29      	cmp	r3, #41	@ 0x29
 800aa34:	d10e      	bne.n	800aa54 <I2C_ITSlaveCplt+0x3bc>
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800aa3c:	d00a      	beq.n	800aa54 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2210      	movs	r2, #16
 800aa44:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 f9ed 	bl	800ae26 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f7ff fcfa 	bl	800a446 <I2C_ITSlaveSeqCplt>
 800aa52:	e01b      	b.n	800aa8c <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2210      	movs	r2, #16
 800aa5a:	61da      	str	r2, [r3, #28]
 800aa5c:	e016      	b.n	800aa8c <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2210      	movs	r2, #16
 800aa64:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa6a:	f043 0204 	orr.w	r2, r3, #4
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d003      	beq.n	800aa80 <I2C_ITSlaveCplt+0x3e8>
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aa7e:	d105      	bne.n	800aa8c <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa84:	4619      	mov	r1, r3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 f8b6 	bl	800abf8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d010      	beq.n	800aac4 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 f8a5 	bl	800abf8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	2b28      	cmp	r3, #40	@ 0x28
 800aab8:	d141      	bne.n	800ab3e <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800aaba:	6979      	ldr	r1, [r7, #20]
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 f845 	bl	800ab4c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800aac2:	e03c      	b.n	800ab3e <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aac8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800aacc:	d014      	beq.n	800aaf8 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f7ff fcb9 	bl	800a446 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a1c      	ldr	r2, [pc, #112]	@ (800ab48 <I2C_ITSlaveCplt+0x4b0>)
 800aad8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2220      	movs	r2, #32
 800aade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f7fe fd75 	bl	80095e0 <HAL_I2C_ListenCpltCallback>
}
 800aaf6:	e022      	b.n	800ab3e <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	2b22      	cmp	r3, #34	@ 0x22
 800ab02:	d10e      	bne.n	800ab22 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2220      	movs	r2, #32
 800ab08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f7fe fd48 	bl	80095b0 <HAL_I2C_SlaveRxCpltCallback>
}
 800ab20:	e00d      	b.n	800ab3e <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2220      	movs	r2, #32
 800ab26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f7fe fd2f 	bl	800959c <HAL_I2C_SlaveTxCpltCallback>
}
 800ab3e:	bf00      	nop
 800ab40:	3718      	adds	r7, #24
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	ffff0000 	.word	0xffff0000

0800ab4c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4a26      	ldr	r2, [pc, #152]	@ (800abf4 <I2C_ITListenCplt+0xa8>)
 800ab5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2220      	movs	r2, #32
 800ab66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	089b      	lsrs	r3, r3, #2
 800ab7c:	f003 0301 	and.w	r3, r3, #1
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d022      	beq.n	800abca <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab8e:	b2d2      	uxtb	r2, r2
 800ab90:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab96:	1c5a      	adds	r2, r3, #1
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d012      	beq.n	800abca <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aba8:	3b01      	subs	r3, #1
 800abaa:	b29a      	uxth	r2, r3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	3b01      	subs	r3, #1
 800abb8:	b29a      	uxth	r2, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abc2:	f043 0204 	orr.w	r2, r3, #4
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800abca:	f248 0103 	movw	r1, #32771	@ 0x8003
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 fa22 	bl	800b018 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2210      	movs	r2, #16
 800abda:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f7fe fcfb 	bl	80095e0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800abea:	bf00      	nop
 800abec:	3708      	adds	r7, #8
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	ffff0000 	.word	0xffff0000

0800abf8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac08:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a6d      	ldr	r2, [pc, #436]	@ (800adcc <I2C_ITError+0x1d4>)
 800ac16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	431a      	orrs	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800ac2a:	7bfb      	ldrb	r3, [r7, #15]
 800ac2c:	2b28      	cmp	r3, #40	@ 0x28
 800ac2e:	d005      	beq.n	800ac3c <I2C_ITError+0x44>
 800ac30:	7bfb      	ldrb	r3, [r7, #15]
 800ac32:	2b29      	cmp	r3, #41	@ 0x29
 800ac34:	d002      	beq.n	800ac3c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800ac36:	7bfb      	ldrb	r3, [r7, #15]
 800ac38:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac3a:	d10b      	bne.n	800ac54 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ac3c:	2103      	movs	r1, #3
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 f9ea 	bl	800b018 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2228      	movs	r2, #40	@ 0x28
 800ac48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	4a60      	ldr	r2, [pc, #384]	@ (800add0 <I2C_ITError+0x1d8>)
 800ac50:	635a      	str	r2, [r3, #52]	@ 0x34
 800ac52:	e030      	b.n	800acb6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ac54:	f248 0103 	movw	r1, #32771	@ 0x8003
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 f9dd 	bl	800b018 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 f8e1 	bl	800ae26 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	2b60      	cmp	r3, #96	@ 0x60
 800ac6e:	d01f      	beq.n	800acb0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2220      	movs	r2, #32
 800ac74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	699b      	ldr	r3, [r3, #24]
 800ac7e:	f003 0320 	and.w	r3, r3, #32
 800ac82:	2b20      	cmp	r3, #32
 800ac84:	d114      	bne.n	800acb0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	699b      	ldr	r3, [r3, #24]
 800ac8c:	f003 0310 	and.w	r3, r3, #16
 800ac90:	2b10      	cmp	r3, #16
 800ac92:	d109      	bne.n	800aca8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2210      	movs	r2, #16
 800ac9a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aca0:	f043 0204 	orr.w	r2, r3, #4
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	2220      	movs	r2, #32
 800acae:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acba:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d039      	beq.n	800ad38 <I2C_ITError+0x140>
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	2b11      	cmp	r3, #17
 800acc8:	d002      	beq.n	800acd0 <I2C_ITError+0xd8>
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	2b21      	cmp	r3, #33	@ 0x21
 800acce:	d133      	bne.n	800ad38 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800acda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800acde:	d107      	bne.n	800acf0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800acee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7fd fd6b 	bl	80087d0 <HAL_DMA_GetState>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d017      	beq.n	800ad30 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad04:	4a33      	ldr	r2, [pc, #204]	@ (800add4 <I2C_ITError+0x1dc>)
 800ad06:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7fc fbeb 	bl	80074f0 <HAL_DMA_Abort_IT>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d04d      	beq.n	800adbc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ad2a:	4610      	mov	r0, r2
 800ad2c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ad2e:	e045      	b.n	800adbc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f851 	bl	800add8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ad36:	e041      	b.n	800adbc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d039      	beq.n	800adb4 <I2C_ITError+0x1bc>
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	2b12      	cmp	r3, #18
 800ad44:	d002      	beq.n	800ad4c <I2C_ITError+0x154>
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	2b22      	cmp	r3, #34	@ 0x22
 800ad4a:	d133      	bne.n	800adb4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ad56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad5a:	d107      	bne.n	800ad6c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ad6a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7fd fd2d 	bl	80087d0 <HAL_DMA_GetState>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d017      	beq.n	800adac <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad80:	4a14      	ldr	r2, [pc, #80]	@ (800add4 <I2C_ITError+0x1dc>)
 800ad82:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7fc fbad 	bl	80074f0 <HAL_DMA_Abort_IT>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d011      	beq.n	800adc0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ada0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ada6:	4610      	mov	r0, r2
 800ada8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800adaa:	e009      	b.n	800adc0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 f813 	bl	800add8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800adb2:	e005      	b.n	800adc0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f80f 	bl	800add8 <I2C_TreatErrorCallback>
  }
}
 800adba:	e002      	b.n	800adc2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800adbc:	bf00      	nop
 800adbe:	e000      	b.n	800adc2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800adc0:	bf00      	nop
}
 800adc2:	bf00      	nop
 800adc4:	3710      	adds	r7, #16
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	ffff0000 	.word	0xffff0000
 800add0:	080098ad 	.word	0x080098ad
 800add4:	0800ae6f 	.word	0x0800ae6f

0800add8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	2b60      	cmp	r3, #96	@ 0x60
 800adea:	d10e      	bne.n	800ae0a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2220      	movs	r2, #32
 800adf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2200      	movs	r2, #0
 800adf8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2200      	movs	r2, #0
 800adfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f7fe fc14 	bl	8009630 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ae08:	e009      	b.n	800ae1e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f7fe fbff 	bl	800961c <HAL_I2C_ErrorCallback>
}
 800ae1e:	bf00      	nop
 800ae20:	3708      	adds	r7, #8
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ae26:	b480      	push	{r7}
 800ae28:	b083      	sub	sp, #12
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	699b      	ldr	r3, [r3, #24]
 800ae34:	f003 0302 	and.w	r3, r3, #2
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	d103      	bne.n	800ae44 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2200      	movs	r2, #0
 800ae42:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	699b      	ldr	r3, [r3, #24]
 800ae4a:	f003 0301 	and.w	r3, r3, #1
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d007      	beq.n	800ae62 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	699a      	ldr	r2, [r3, #24]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f042 0201 	orr.w	r2, r2, #1
 800ae60:	619a      	str	r2, [r3, #24]
  }
}
 800ae62:	bf00      	nop
 800ae64:	370c      	adds	r7, #12
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b084      	sub	sp, #16
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae7a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d003      	beq.n	800ae8c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae88:	2200      	movs	r2, #0
 800ae8a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d003      	beq.n	800ae9c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae98:	2200      	movs	r2, #0
 800ae9a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	f7ff ff9b 	bl	800add8 <I2C_TreatErrorCallback>
}
 800aea2:	bf00      	nop
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
	...

0800aeac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b087      	sub	sp, #28
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	607b      	str	r3, [r7, #4]
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	817b      	strh	r3, [r7, #10]
 800aeba:	4613      	mov	r3, r2
 800aebc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aebe:	897b      	ldrh	r3, [r7, #10]
 800aec0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800aec4:	7a7b      	ldrb	r3, [r7, #9]
 800aec6:	041b      	lsls	r3, r3, #16
 800aec8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aecc:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aed2:	6a3b      	ldr	r3, [r7, #32]
 800aed4:	4313      	orrs	r3, r2
 800aed6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aeda:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	685a      	ldr	r2, [r3, #4]
 800aee2:	6a3b      	ldr	r3, [r7, #32]
 800aee4:	0d5b      	lsrs	r3, r3, #21
 800aee6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800aeea:	4b08      	ldr	r3, [pc, #32]	@ (800af0c <I2C_TransferConfig+0x60>)
 800aeec:	430b      	orrs	r3, r1
 800aeee:	43db      	mvns	r3, r3
 800aef0:	ea02 0103 	and.w	r1, r2, r3
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	697a      	ldr	r2, [r7, #20]
 800aefa:	430a      	orrs	r2, r1
 800aefc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800aefe:	bf00      	nop
 800af00:	371c      	adds	r7, #28
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	03ff63ff 	.word	0x03ff63ff

0800af10 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	460b      	mov	r3, r1
 800af1a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800af1c:	2300      	movs	r3, #0
 800af1e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af24:	4a39      	ldr	r2, [pc, #228]	@ (800b00c <I2C_Enable_IRQ+0xfc>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d032      	beq.n	800af90 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800af2e:	4a38      	ldr	r2, [pc, #224]	@ (800b010 <I2C_Enable_IRQ+0x100>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d02d      	beq.n	800af90 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800af38:	4a36      	ldr	r2, [pc, #216]	@ (800b014 <I2C_Enable_IRQ+0x104>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d028      	beq.n	800af90 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800af3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800af42:	2b00      	cmp	r3, #0
 800af44:	da03      	bge.n	800af4e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800af4c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800af4e:	887b      	ldrh	r3, [r7, #2]
 800af50:	f003 0301 	and.w	r3, r3, #1
 800af54:	2b00      	cmp	r3, #0
 800af56:	d003      	beq.n	800af60 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800af5e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800af60:	887b      	ldrh	r3, [r7, #2]
 800af62:	f003 0302 	and.w	r3, r3, #2
 800af66:	2b00      	cmp	r3, #0
 800af68:	d003      	beq.n	800af72 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800af70:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800af72:	887b      	ldrh	r3, [r7, #2]
 800af74:	2b10      	cmp	r3, #16
 800af76:	d103      	bne.n	800af80 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800af7e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800af80:	887b      	ldrh	r3, [r7, #2]
 800af82:	2b20      	cmp	r3, #32
 800af84:	d133      	bne.n	800afee <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f043 0320 	orr.w	r3, r3, #32
 800af8c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800af8e:	e02e      	b.n	800afee <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800af90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800af94:	2b00      	cmp	r3, #0
 800af96:	da03      	bge.n	800afa0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800af9e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800afa0:	887b      	ldrh	r3, [r7, #2]
 800afa2:	f003 0301 	and.w	r3, r3, #1
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d003      	beq.n	800afb2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800afb0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800afb2:	887b      	ldrh	r3, [r7, #2]
 800afb4:	f003 0302 	and.w	r3, r3, #2
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d003      	beq.n	800afc4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800afc2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800afc4:	887b      	ldrh	r3, [r7, #2]
 800afc6:	2b10      	cmp	r3, #16
 800afc8:	d103      	bne.n	800afd2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800afd0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800afd2:	887b      	ldrh	r3, [r7, #2]
 800afd4:	2b20      	cmp	r3, #32
 800afd6:	d103      	bne.n	800afe0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800afde:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800afe0:	887b      	ldrh	r3, [r7, #2]
 800afe2:	2b40      	cmp	r3, #64	@ 0x40
 800afe4:	d103      	bne.n	800afee <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afec:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	6819      	ldr	r1, [r3, #0]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	430a      	orrs	r2, r1
 800affc:	601a      	str	r2, [r3, #0]
}
 800affe:	bf00      	nop
 800b000:	3714      	adds	r7, #20
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	08009ab5 	.word	0x08009ab5
 800b010:	08009efd 	.word	0x08009efd
 800b014:	08009c9d 	.word	0x08009c9d

0800b018 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	460b      	mov	r3, r1
 800b022:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b024:	2300      	movs	r3, #0
 800b026:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b028:	887b      	ldrh	r3, [r7, #2]
 800b02a:	f003 0301 	and.w	r3, r3, #1
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00f      	beq.n	800b052 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800b038:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b040:	b2db      	uxtb	r3, r3
 800b042:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b046:	2b28      	cmp	r3, #40	@ 0x28
 800b048:	d003      	beq.n	800b052 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800b050:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b052:	887b      	ldrh	r3, [r7, #2]
 800b054:	f003 0302 	and.w	r3, r3, #2
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d00f      	beq.n	800b07c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800b062:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b070:	2b28      	cmp	r3, #40	@ 0x28
 800b072:	d003      	beq.n	800b07c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800b07a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b07c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b080:	2b00      	cmp	r3, #0
 800b082:	da03      	bge.n	800b08c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800b08a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b08c:	887b      	ldrh	r3, [r7, #2]
 800b08e:	2b10      	cmp	r3, #16
 800b090:	d103      	bne.n	800b09a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800b098:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b09a:	887b      	ldrh	r3, [r7, #2]
 800b09c:	2b20      	cmp	r3, #32
 800b09e:	d103      	bne.n	800b0a8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f043 0320 	orr.w	r3, r3, #32
 800b0a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b0a8:	887b      	ldrh	r3, [r7, #2]
 800b0aa:	2b40      	cmp	r3, #64	@ 0x40
 800b0ac:	d103      	bne.n	800b0b6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0b4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	6819      	ldr	r1, [r3, #0]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	43da      	mvns	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	400a      	ands	r2, r1
 800b0c6:	601a      	str	r2, [r3, #0]
}
 800b0c8:	bf00      	nop
 800b0ca:	3714      	adds	r7, #20
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	2b20      	cmp	r3, #32
 800b0e8:	d138      	bne.n	800b15c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d101      	bne.n	800b0f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	e032      	b.n	800b15e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2224      	movs	r2, #36	@ 0x24
 800b104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f022 0201 	bic.w	r2, r2, #1
 800b116:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b126:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	6819      	ldr	r1, [r3, #0]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	683a      	ldr	r2, [r7, #0]
 800b134:	430a      	orrs	r2, r1
 800b136:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f042 0201 	orr.w	r2, r2, #1
 800b146:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2220      	movs	r2, #32
 800b14c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b158:	2300      	movs	r3, #0
 800b15a:	e000      	b.n	800b15e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b15c:	2302      	movs	r3, #2
  }
}
 800b15e:	4618      	mov	r0, r3
 800b160:	370c      	adds	r7, #12
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr

0800b16a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b16a:	b480      	push	{r7}
 800b16c:	b085      	sub	sp, #20
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
 800b172:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	2b20      	cmp	r3, #32
 800b17e:	d139      	bne.n	800b1f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b186:	2b01      	cmp	r3, #1
 800b188:	d101      	bne.n	800b18e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b18a:	2302      	movs	r3, #2
 800b18c:	e033      	b.n	800b1f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2201      	movs	r2, #1
 800b192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2224      	movs	r2, #36	@ 0x24
 800b19a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f022 0201 	bic.w	r2, r2, #1
 800b1ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b1bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	021b      	lsls	r3, r3, #8
 800b1c2:	68fa      	ldr	r2, [r7, #12]
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	68fa      	ldr	r2, [r7, #12]
 800b1ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f042 0201 	orr.w	r2, r2, #1
 800b1de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2220      	movs	r2, #32
 800b1e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	e000      	b.n	800b1f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b1f4:	2302      	movs	r3, #2
  }
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3714      	adds	r7, #20
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr

0800b202 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b084      	sub	sp, #16
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d101      	bne.n	800b214 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800b210:	2301      	movs	r3, #1
 800b212:	e043      	b.n	800b29c <HAL_IWDG_Init+0x9a>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800b21c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f245 5255 	movw	r2, #21845	@ 0x5555
 800b226:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	6852      	ldr	r2, [r2, #4]
 800b230:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	6892      	ldr	r2, [r2, #8]
 800b23a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800b23c:	f7f8 f8c6 	bl	80033cc <HAL_GetTick>
 800b240:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b242:	e011      	b.n	800b268 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800b244:	f7f8 f8c2 	bl	80033cc <HAL_GetTick>
 800b248:	4602      	mov	r2, r0
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	1ad3      	subs	r3, r2, r3
 800b24e:	f641 0201 	movw	r2, #6145	@ 0x1801
 800b252:	4293      	cmp	r3, r2
 800b254:	d908      	bls.n	800b268 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	f003 0307 	and.w	r3, r3, #7
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 800b264:	2303      	movs	r3, #3
 800b266:	e019      	b.n	800b29c <HAL_IWDG_Init+0x9a>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	f003 0307 	and.w	r3, r3, #7
 800b272:	2b00      	cmp	r3, #0
 800b274:	d1e6      	bne.n	800b244 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	691a      	ldr	r2, [r3, #16]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	429a      	cmp	r2, r3
 800b282:	d005      	beq.n	800b290 <HAL_IWDG_Init+0x8e>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	68d2      	ldr	r2, [r2, #12]
 800b28c:	611a      	str	r2, [r3, #16]
 800b28e:	e004      	b.n	800b29a <HAL_IWDG_Init+0x98>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800b298:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b29a:	2300      	movs	r3, #0
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3710      	adds	r7, #16
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800b2b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b2b6:	2300      	movs	r3, #0
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr

0800b2c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b086      	sub	sp, #24
 800b2c8:	af02      	add	r7, sp, #8
 800b2ca:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d101      	bne.n	800b2d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e0fe      	b.n	800b4d4 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d106      	bne.n	800b2f0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f00c fb80 	bl	80179f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2203      	movs	r2, #3
 800b2f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f008 ff18 	bl	8014132 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6818      	ldr	r0, [r3, #0]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	7c1a      	ldrb	r2, [r3, #16]
 800b30a:	f88d 2000 	strb.w	r2, [sp]
 800b30e:	3304      	adds	r3, #4
 800b310:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b312:	f008 fde9 	bl	8013ee8 <USB_CoreInit>
 800b316:	4603      	mov	r3, r0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d005      	beq.n	800b328 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2202      	movs	r2, #2
 800b320:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	e0d5      	b.n	800b4d4 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2100      	movs	r1, #0
 800b32e:	4618      	mov	r0, r3
 800b330:	f008 ff10 	bl	8014154 <USB_SetCurrentMode>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d005      	beq.n	800b346 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2202      	movs	r2, #2
 800b33e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	e0c6      	b.n	800b4d4 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b346:	2300      	movs	r3, #0
 800b348:	73fb      	strb	r3, [r7, #15]
 800b34a:	e04a      	b.n	800b3e2 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b34c:	7bfa      	ldrb	r2, [r7, #15]
 800b34e:	6879      	ldr	r1, [r7, #4]
 800b350:	4613      	mov	r3, r2
 800b352:	00db      	lsls	r3, r3, #3
 800b354:	4413      	add	r3, r2
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	440b      	add	r3, r1
 800b35a:	3315      	adds	r3, #21
 800b35c:	2201      	movs	r2, #1
 800b35e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b360:	7bfa      	ldrb	r2, [r7, #15]
 800b362:	6879      	ldr	r1, [r7, #4]
 800b364:	4613      	mov	r3, r2
 800b366:	00db      	lsls	r3, r3, #3
 800b368:	4413      	add	r3, r2
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	440b      	add	r3, r1
 800b36e:	3314      	adds	r3, #20
 800b370:	7bfa      	ldrb	r2, [r7, #15]
 800b372:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b374:	7bfa      	ldrb	r2, [r7, #15]
 800b376:	7bfb      	ldrb	r3, [r7, #15]
 800b378:	b298      	uxth	r0, r3
 800b37a:	6879      	ldr	r1, [r7, #4]
 800b37c:	4613      	mov	r3, r2
 800b37e:	00db      	lsls	r3, r3, #3
 800b380:	4413      	add	r3, r2
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	440b      	add	r3, r1
 800b386:	332e      	adds	r3, #46	@ 0x2e
 800b388:	4602      	mov	r2, r0
 800b38a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b38c:	7bfa      	ldrb	r2, [r7, #15]
 800b38e:	6879      	ldr	r1, [r7, #4]
 800b390:	4613      	mov	r3, r2
 800b392:	00db      	lsls	r3, r3, #3
 800b394:	4413      	add	r3, r2
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	440b      	add	r3, r1
 800b39a:	3318      	adds	r3, #24
 800b39c:	2200      	movs	r2, #0
 800b39e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b3a0:	7bfa      	ldrb	r2, [r7, #15]
 800b3a2:	6879      	ldr	r1, [r7, #4]
 800b3a4:	4613      	mov	r3, r2
 800b3a6:	00db      	lsls	r3, r3, #3
 800b3a8:	4413      	add	r3, r2
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	440b      	add	r3, r1
 800b3ae:	331c      	adds	r3, #28
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b3b4:	7bfa      	ldrb	r2, [r7, #15]
 800b3b6:	6879      	ldr	r1, [r7, #4]
 800b3b8:	4613      	mov	r3, r2
 800b3ba:	00db      	lsls	r3, r3, #3
 800b3bc:	4413      	add	r3, r2
 800b3be:	009b      	lsls	r3, r3, #2
 800b3c0:	440b      	add	r3, r1
 800b3c2:	3320      	adds	r3, #32
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b3c8:	7bfa      	ldrb	r2, [r7, #15]
 800b3ca:	6879      	ldr	r1, [r7, #4]
 800b3cc:	4613      	mov	r3, r2
 800b3ce:	00db      	lsls	r3, r3, #3
 800b3d0:	4413      	add	r3, r2
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	440b      	add	r3, r1
 800b3d6:	3324      	adds	r3, #36	@ 0x24
 800b3d8:	2200      	movs	r2, #0
 800b3da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3dc:	7bfb      	ldrb	r3, [r7, #15]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	73fb      	strb	r3, [r7, #15]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	791b      	ldrb	r3, [r3, #4]
 800b3e6:	7bfa      	ldrb	r2, [r7, #15]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d3af      	bcc.n	800b34c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	73fb      	strb	r3, [r7, #15]
 800b3f0:	e044      	b.n	800b47c <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b3f2:	7bfa      	ldrb	r2, [r7, #15]
 800b3f4:	6879      	ldr	r1, [r7, #4]
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	00db      	lsls	r3, r3, #3
 800b3fa:	4413      	add	r3, r2
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	440b      	add	r3, r1
 800b400:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800b404:	2200      	movs	r2, #0
 800b406:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b408:	7bfa      	ldrb	r2, [r7, #15]
 800b40a:	6879      	ldr	r1, [r7, #4]
 800b40c:	4613      	mov	r3, r2
 800b40e:	00db      	lsls	r3, r3, #3
 800b410:	4413      	add	r3, r2
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	440b      	add	r3, r1
 800b416:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800b41a:	7bfa      	ldrb	r2, [r7, #15]
 800b41c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b41e:	7bfa      	ldrb	r2, [r7, #15]
 800b420:	6879      	ldr	r1, [r7, #4]
 800b422:	4613      	mov	r3, r2
 800b424:	00db      	lsls	r3, r3, #3
 800b426:	4413      	add	r3, r2
 800b428:	009b      	lsls	r3, r3, #2
 800b42a:	440b      	add	r3, r1
 800b42c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b430:	2200      	movs	r2, #0
 800b432:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b434:	7bfa      	ldrb	r2, [r7, #15]
 800b436:	6879      	ldr	r1, [r7, #4]
 800b438:	4613      	mov	r3, r2
 800b43a:	00db      	lsls	r3, r3, #3
 800b43c:	4413      	add	r3, r2
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	440b      	add	r3, r1
 800b442:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800b446:	2200      	movs	r2, #0
 800b448:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b44a:	7bfa      	ldrb	r2, [r7, #15]
 800b44c:	6879      	ldr	r1, [r7, #4]
 800b44e:	4613      	mov	r3, r2
 800b450:	00db      	lsls	r3, r3, #3
 800b452:	4413      	add	r3, r2
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	440b      	add	r3, r1
 800b458:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b45c:	2200      	movs	r2, #0
 800b45e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b460:	7bfa      	ldrb	r2, [r7, #15]
 800b462:	6879      	ldr	r1, [r7, #4]
 800b464:	4613      	mov	r3, r2
 800b466:	00db      	lsls	r3, r3, #3
 800b468:	4413      	add	r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	440b      	add	r3, r1
 800b46e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800b472:	2200      	movs	r2, #0
 800b474:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b476:	7bfb      	ldrb	r3, [r7, #15]
 800b478:	3301      	adds	r3, #1
 800b47a:	73fb      	strb	r3, [r7, #15]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	791b      	ldrb	r3, [r3, #4]
 800b480:	7bfa      	ldrb	r2, [r7, #15]
 800b482:	429a      	cmp	r2, r3
 800b484:	d3b5      	bcc.n	800b3f2 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6818      	ldr	r0, [r3, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	7c1a      	ldrb	r2, [r3, #16]
 800b48e:	f88d 2000 	strb.w	r2, [sp]
 800b492:	3304      	adds	r3, #4
 800b494:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b496:	f008 fea9 	bl	80141ec <USB_DevInit>
 800b49a:	4603      	mov	r3, r0
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d005      	beq.n	800b4ac <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2202      	movs	r2, #2
 800b4a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e013      	b.n	800b4d4 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	7b1b      	ldrb	r3, [r3, #12]
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d102      	bne.n	800b4c8 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f001 f96e 	bl	800c7a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f009 feec 	bl	80152aa <USB_DevDisconnect>

  return HAL_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3710      	adds	r7, #16
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d101      	bne.n	800b4f8 <HAL_PCD_Start+0x1c>
 800b4f4:	2302      	movs	r3, #2
 800b4f6:	e022      	b.n	800b53e <HAL_PCD_Start+0x62>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d009      	beq.n	800b520 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b510:	2b01      	cmp	r3, #1
 800b512:	d105      	bne.n	800b520 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b518:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4618      	mov	r0, r3
 800b526:	f008 fdf3 	bl	8014110 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4618      	mov	r0, r3
 800b530:	f009 fe9a 	bl	8015268 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b53c:	2300      	movs	r3, #0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3710      	adds	r7, #16
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b546:	b590      	push	{r4, r7, lr}
 800b548:	b08d      	sub	sp, #52	@ 0x34
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b554:	6a3b      	ldr	r3, [r7, #32]
 800b556:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4618      	mov	r0, r3
 800b55e:	f009 ff58 	bl	8015412 <USB_GetMode>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	f040 84b9 	bne.w	800bedc <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4618      	mov	r0, r3
 800b570:	f009 febc 	bl	80152ec <USB_ReadInterrupts>
 800b574:	4603      	mov	r3, r0
 800b576:	2b00      	cmp	r3, #0
 800b578:	f000 84af 	beq.w	800beda <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800b57c:	69fb      	ldr	r3, [r7, #28]
 800b57e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	0a1b      	lsrs	r3, r3, #8
 800b586:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4618      	mov	r0, r3
 800b596:	f009 fea9 	bl	80152ec <USB_ReadInterrupts>
 800b59a:	4603      	mov	r3, r0
 800b59c:	f003 0302 	and.w	r3, r3, #2
 800b5a0:	2b02      	cmp	r3, #2
 800b5a2:	d107      	bne.n	800b5b4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	695a      	ldr	r2, [r3, #20]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f002 0202 	and.w	r2, r2, #2
 800b5b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f009 fe97 	bl	80152ec <USB_ReadInterrupts>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	f003 0310 	and.w	r3, r3, #16
 800b5c4:	2b10      	cmp	r3, #16
 800b5c6:	d161      	bne.n	800b68c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	699a      	ldr	r2, [r3, #24]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f022 0210 	bic.w	r2, r2, #16
 800b5d6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800b5d8:	6a3b      	ldr	r3, [r7, #32]
 800b5da:	6a1b      	ldr	r3, [r3, #32]
 800b5dc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800b5de:	69bb      	ldr	r3, [r7, #24]
 800b5e0:	f003 020f 	and.w	r2, r3, #15
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	00db      	lsls	r3, r3, #3
 800b5e8:	4413      	add	r3, r2
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	4413      	add	r3, r2
 800b5f4:	3304      	adds	r3, #4
 800b5f6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b5f8:	69bb      	ldr	r3, [r7, #24]
 800b5fa:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800b5fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b602:	d124      	bne.n	800b64e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b604:	69ba      	ldr	r2, [r7, #24]
 800b606:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800b60a:	4013      	ands	r3, r2
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d035      	beq.n	800b67c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b614:	69bb      	ldr	r3, [r7, #24]
 800b616:	091b      	lsrs	r3, r3, #4
 800b618:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b61a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b61e:	b29b      	uxth	r3, r3
 800b620:	461a      	mov	r2, r3
 800b622:	6a38      	ldr	r0, [r7, #32]
 800b624:	f009 fcce 	bl	8014fc4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	68da      	ldr	r2, [r3, #12]
 800b62c:	69bb      	ldr	r3, [r7, #24]
 800b62e:	091b      	lsrs	r3, r3, #4
 800b630:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b634:	441a      	add	r2, r3
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	695a      	ldr	r2, [r3, #20]
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	091b      	lsrs	r3, r3, #4
 800b642:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b646:	441a      	add	r2, r3
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	615a      	str	r2, [r3, #20]
 800b64c:	e016      	b.n	800b67c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800b654:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b658:	d110      	bne.n	800b67c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b660:	2208      	movs	r2, #8
 800b662:	4619      	mov	r1, r3
 800b664:	6a38      	ldr	r0, [r7, #32]
 800b666:	f009 fcad 	bl	8014fc4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	695a      	ldr	r2, [r3, #20]
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	091b      	lsrs	r3, r3, #4
 800b672:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b676:	441a      	add	r2, r3
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	699a      	ldr	r2, [r3, #24]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f042 0210 	orr.w	r2, r2, #16
 800b68a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4618      	mov	r0, r3
 800b692:	f009 fe2b 	bl	80152ec <USB_ReadInterrupts>
 800b696:	4603      	mov	r3, r0
 800b698:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b69c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b6a0:	f040 80a7 	bne.w	800b7f2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f009 fe30 	bl	8015312 <USB_ReadDevAllOutEpInterrupt>
 800b6b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800b6b4:	e099      	b.n	800b7ea <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b8:	f003 0301 	and.w	r3, r3, #1
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	f000 808e 	beq.w	800b7de <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6c8:	b2d2      	uxtb	r2, r2
 800b6ca:	4611      	mov	r1, r2
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f009 fe54 	bl	801537a <USB_ReadDevOutEPInterrupt>
 800b6d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	f003 0301 	and.w	r3, r3, #1
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00c      	beq.n	800b6f8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e0:	015a      	lsls	r2, r3, #5
 800b6e2:	69fb      	ldr	r3, [r7, #28]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b6f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 fed0 	bl	800c498 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	f003 0308 	and.w	r3, r3, #8
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d00c      	beq.n	800b71c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b704:	015a      	lsls	r2, r3, #5
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	4413      	add	r3, r2
 800b70a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b70e:	461a      	mov	r2, r3
 800b710:	2308      	movs	r3, #8
 800b712:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b714:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 ffa6 	bl	800c668 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	f003 0310 	and.w	r3, r3, #16
 800b722:	2b00      	cmp	r3, #0
 800b724:	d008      	beq.n	800b738 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b728:	015a      	lsls	r2, r3, #5
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	4413      	add	r3, r2
 800b72e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b732:	461a      	mov	r2, r3
 800b734:	2310      	movs	r3, #16
 800b736:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	f003 0302 	and.w	r3, r3, #2
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d030      	beq.n	800b7a4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b742:	6a3b      	ldr	r3, [r7, #32]
 800b744:	695b      	ldr	r3, [r3, #20]
 800b746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b74a:	2b80      	cmp	r3, #128	@ 0x80
 800b74c:	d109      	bne.n	800b762 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	69fa      	ldr	r2, [r7, #28]
 800b758:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b75c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b760:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b764:	4613      	mov	r3, r2
 800b766:	00db      	lsls	r3, r3, #3
 800b768:	4413      	add	r3, r2
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b770:	687a      	ldr	r2, [r7, #4]
 800b772:	4413      	add	r3, r2
 800b774:	3304      	adds	r3, #4
 800b776:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	78db      	ldrb	r3, [r3, #3]
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d108      	bne.n	800b792 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	2200      	movs	r2, #0
 800b784:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	4619      	mov	r1, r3
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f00c fa4f 	bl	8017c30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b794:	015a      	lsls	r2, r3, #5
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	4413      	add	r3, r2
 800b79a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b79e:	461a      	mov	r2, r3
 800b7a0:	2302      	movs	r3, #2
 800b7a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	f003 0320 	and.w	r3, r3, #32
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d008      	beq.n	800b7c0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b0:	015a      	lsls	r2, r3, #5
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	2320      	movs	r3, #32
 800b7be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d009      	beq.n	800b7de <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7cc:	015a      	lsls	r2, r3, #5
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b7dc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7e6:	085b      	lsrs	r3, r3, #1
 800b7e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	f47f af62 	bne.w	800b6b6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f009 fd78 	bl	80152ec <USB_ReadInterrupts>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b802:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b806:	f040 80db 	bne.w	800b9c0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4618      	mov	r0, r3
 800b810:	f009 fd99 	bl	8015346 <USB_ReadDevAllInEpInterrupt>
 800b814:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800b816:	2300      	movs	r3, #0
 800b818:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800b81a:	e0cd      	b.n	800b9b8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b81e:	f003 0301 	and.w	r3, r3, #1
 800b822:	2b00      	cmp	r3, #0
 800b824:	f000 80c2 	beq.w	800b9ac <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b82e:	b2d2      	uxtb	r2, r2
 800b830:	4611      	mov	r1, r2
 800b832:	4618      	mov	r0, r3
 800b834:	f009 fdbf 	bl	80153b6 <USB_ReadDevInEPInterrupt>
 800b838:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	f003 0301 	and.w	r3, r3, #1
 800b840:	2b00      	cmp	r3, #0
 800b842:	d057      	beq.n	800b8f4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b846:	f003 030f 	and.w	r3, r3, #15
 800b84a:	2201      	movs	r2, #1
 800b84c:	fa02 f303 	lsl.w	r3, r2, r3
 800b850:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b852:	69fb      	ldr	r3, [r7, #28]
 800b854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	43db      	mvns	r3, r3
 800b85e:	69f9      	ldr	r1, [r7, #28]
 800b860:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b864:	4013      	ands	r3, r2
 800b866:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b86a:	015a      	lsls	r2, r3, #5
 800b86c:	69fb      	ldr	r3, [r7, #28]
 800b86e:	4413      	add	r3, r2
 800b870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b874:	461a      	mov	r2, r3
 800b876:	2301      	movs	r3, #1
 800b878:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	799b      	ldrb	r3, [r3, #6]
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d132      	bne.n	800b8e8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b882:	6879      	ldr	r1, [r7, #4]
 800b884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b886:	4613      	mov	r3, r2
 800b888:	00db      	lsls	r3, r3, #3
 800b88a:	4413      	add	r3, r2
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	440b      	add	r3, r1
 800b890:	3320      	adds	r3, #32
 800b892:	6819      	ldr	r1, [r3, #0]
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b898:	4613      	mov	r3, r2
 800b89a:	00db      	lsls	r3, r3, #3
 800b89c:	4413      	add	r3, r2
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	4403      	add	r3, r0
 800b8a2:	331c      	adds	r3, #28
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4419      	add	r1, r3
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8ac:	4613      	mov	r3, r2
 800b8ae:	00db      	lsls	r3, r3, #3
 800b8b0:	4413      	add	r3, r2
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	4403      	add	r3, r0
 800b8b6:	3320      	adds	r3, #32
 800b8b8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d113      	bne.n	800b8e8 <HAL_PCD_IRQHandler+0x3a2>
 800b8c0:	6879      	ldr	r1, [r7, #4]
 800b8c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8c4:	4613      	mov	r3, r2
 800b8c6:	00db      	lsls	r3, r3, #3
 800b8c8:	4413      	add	r3, r2
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	440b      	add	r3, r1
 800b8ce:	3324      	adds	r3, #36	@ 0x24
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d108      	bne.n	800b8e8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6818      	ldr	r0, [r3, #0]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	2101      	movs	r1, #1
 800b8e4:	f009 fdc8 	bl	8015478 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f00c f919 	bl	8017b26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	f003 0308 	and.w	r3, r3, #8
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d008      	beq.n	800b910 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b900:	015a      	lsls	r2, r3, #5
 800b902:	69fb      	ldr	r3, [r7, #28]
 800b904:	4413      	add	r3, r2
 800b906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b90a:	461a      	mov	r2, r3
 800b90c:	2308      	movs	r3, #8
 800b90e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	f003 0310 	and.w	r3, r3, #16
 800b916:	2b00      	cmp	r3, #0
 800b918:	d008      	beq.n	800b92c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b91c:	015a      	lsls	r2, r3, #5
 800b91e:	69fb      	ldr	r3, [r7, #28]
 800b920:	4413      	add	r3, r2
 800b922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b926:	461a      	mov	r2, r3
 800b928:	2310      	movs	r3, #16
 800b92a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b932:	2b00      	cmp	r3, #0
 800b934:	d008      	beq.n	800b948 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b938:	015a      	lsls	r2, r3, #5
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	4413      	add	r3, r2
 800b93e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b942:	461a      	mov	r2, r3
 800b944:	2340      	movs	r3, #64	@ 0x40
 800b946:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	f003 0302 	and.w	r3, r3, #2
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d023      	beq.n	800b99a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b952:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b954:	6a38      	ldr	r0, [r7, #32]
 800b956:	f008 fda7 	bl	80144a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b95a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b95c:	4613      	mov	r3, r2
 800b95e:	00db      	lsls	r3, r3, #3
 800b960:	4413      	add	r3, r2
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	3310      	adds	r3, #16
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	4413      	add	r3, r2
 800b96a:	3304      	adds	r3, #4
 800b96c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	78db      	ldrb	r3, [r3, #3]
 800b972:	2b01      	cmp	r3, #1
 800b974:	d108      	bne.n	800b988 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	2200      	movs	r2, #0
 800b97a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	4619      	mov	r1, r3
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f00c f966 	bl	8017c54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b98a:	015a      	lsls	r2, r3, #5
 800b98c:	69fb      	ldr	r3, [r7, #28]
 800b98e:	4413      	add	r3, r2
 800b990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b994:	461a      	mov	r2, r3
 800b996:	2302      	movs	r3, #2
 800b998:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d003      	beq.n	800b9ac <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b9a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 fcea 	bl	800c380 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b4:	085b      	lsrs	r3, r3, #1
 800b9b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	f47f af2e 	bne.w	800b81c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f009 fc91 	bl	80152ec <USB_ReadInterrupts>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b9d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9d4:	d122      	bne.n	800ba1c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b9d6:	69fb      	ldr	r3, [r7, #28]
 800b9d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	69fa      	ldr	r2, [r7, #28]
 800b9e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b9e4:	f023 0301 	bic.w	r3, r3, #1
 800b9e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d108      	bne.n	800ba06 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b9fc:	2100      	movs	r1, #0
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 fef4 	bl	800c7ec <HAL_PCDEx_LPM_Callback>
 800ba04:	e002      	b.n	800ba0c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f00c f904 	bl	8017c14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	695a      	ldr	r2, [r3, #20]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800ba1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f009 fc63 	bl	80152ec <USB_ReadInterrupts>
 800ba26:	4603      	mov	r3, r0
 800ba28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ba2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ba30:	d112      	bne.n	800ba58 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800ba32:	69fb      	ldr	r3, [r7, #28]
 800ba34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	f003 0301 	and.w	r3, r3, #1
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d102      	bne.n	800ba48 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f00c f8c0 	bl	8017bc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	695a      	ldr	r2, [r3, #20]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800ba56:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f009 fc45 	bl	80152ec <USB_ReadInterrupts>
 800ba62:	4603      	mov	r3, r0
 800ba64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba6c:	d121      	bne.n	800bab2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	695a      	ldr	r2, [r3, #20]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800ba7c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d111      	bne.n	800baac <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba96:	089b      	lsrs	r3, r3, #2
 800ba98:	f003 020f 	and.w	r2, r3, #15
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800baa2:	2101      	movs	r1, #1
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 fea1 	bl	800c7ec <HAL_PCDEx_LPM_Callback>
 800baaa:	e002      	b.n	800bab2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f00c f88b 	bl	8017bc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4618      	mov	r0, r3
 800bab8:	f009 fc18 	bl	80152ec <USB_ReadInterrupts>
 800babc:	4603      	mov	r3, r0
 800babe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bac2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bac6:	f040 80b7 	bne.w	800bc38 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800baca:	69fb      	ldr	r3, [r7, #28]
 800bacc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	69fa      	ldr	r2, [r7, #28]
 800bad4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bad8:	f023 0301 	bic.w	r3, r3, #1
 800badc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2110      	movs	r1, #16
 800bae4:	4618      	mov	r0, r3
 800bae6:	f008 fcdf 	bl	80144a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800baea:	2300      	movs	r3, #0
 800baec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800baee:	e046      	b.n	800bb7e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800baf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf2:	015a      	lsls	r2, r3, #5
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	4413      	add	r3, r2
 800baf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bafc:	461a      	mov	r2, r3
 800bafe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bb02:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bb04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb06:	015a      	lsls	r2, r3, #5
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb14:	0151      	lsls	r1, r2, #5
 800bb16:	69fa      	ldr	r2, [r7, #28]
 800bb18:	440a      	add	r2, r1
 800bb1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bb22:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800bb24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb26:	015a      	lsls	r2, r3, #5
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	4413      	add	r3, r2
 800bb2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb30:	461a      	mov	r2, r3
 800bb32:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bb36:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bb38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb3a:	015a      	lsls	r2, r3, #5
 800bb3c:	69fb      	ldr	r3, [r7, #28]
 800bb3e:	4413      	add	r3, r2
 800bb40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb48:	0151      	lsls	r1, r2, #5
 800bb4a:	69fa      	ldr	r2, [r7, #28]
 800bb4c:	440a      	add	r2, r1
 800bb4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bb56:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bb58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb5a:	015a      	lsls	r2, r3, #5
 800bb5c:	69fb      	ldr	r3, [r7, #28]
 800bb5e:	4413      	add	r3, r2
 800bb60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb68:	0151      	lsls	r1, r2, #5
 800bb6a:	69fa      	ldr	r2, [r7, #28]
 800bb6c:	440a      	add	r2, r1
 800bb6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb72:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bb76:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bb78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	791b      	ldrb	r3, [r3, #4]
 800bb82:	461a      	mov	r2, r3
 800bb84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d3b2      	bcc.n	800baf0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb90:	69db      	ldr	r3, [r3, #28]
 800bb92:	69fa      	ldr	r2, [r7, #28]
 800bb94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bb98:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800bb9c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	7bdb      	ldrb	r3, [r3, #15]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d016      	beq.n	800bbd4 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bbb0:	69fa      	ldr	r2, [r7, #28]
 800bbb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bbb6:	f043 030b 	orr.w	r3, r3, #11
 800bbba:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800bbbe:	69fb      	ldr	r3, [r7, #28]
 800bbc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbc6:	69fa      	ldr	r2, [r7, #28]
 800bbc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bbcc:	f043 030b 	orr.w	r3, r3, #11
 800bbd0:	6453      	str	r3, [r2, #68]	@ 0x44
 800bbd2:	e015      	b.n	800bc00 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800bbd4:	69fb      	ldr	r3, [r7, #28]
 800bbd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbda:	695a      	ldr	r2, [r3, #20]
 800bbdc:	69fb      	ldr	r3, [r7, #28]
 800bbde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	f242 032b 	movw	r3, #8235	@ 0x202b
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbf2:	691b      	ldr	r3, [r3, #16]
 800bbf4:	69fa      	ldr	r2, [r7, #28]
 800bbf6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bbfa:	f043 030b 	orr.w	r3, r3, #11
 800bbfe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	69fa      	ldr	r2, [r7, #28]
 800bc0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc0e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800bc12:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6818      	ldr	r0, [r3, #0]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bc22:	461a      	mov	r2, r3
 800bc24:	f009 fc28 	bl	8015478 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	695a      	ldr	r2, [r3, #20]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800bc36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f009 fb55 	bl	80152ec <USB_ReadInterrupts>
 800bc42:	4603      	mov	r3, r0
 800bc44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bc48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc4c:	d123      	bne.n	800bc96 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4618      	mov	r0, r3
 800bc54:	f009 fbec 	bl	8015430 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f008 fc9c 	bl	801459a <USB_GetDevSpeed>
 800bc62:	4603      	mov	r3, r0
 800bc64:	461a      	mov	r2, r3
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681c      	ldr	r4, [r3, #0]
 800bc6e:	f001 fd1d 	bl	800d6ac <HAL_RCC_GetHCLKFreq>
 800bc72:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bc78:	461a      	mov	r2, r3
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f008 f9a6 	bl	8013fcc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f00b ff78 	bl	8017b76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	695a      	ldr	r2, [r3, #20]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800bc94:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f009 fb26 	bl	80152ec <USB_ReadInterrupts>
 800bca0:	4603      	mov	r3, r0
 800bca2:	f003 0308 	and.w	r3, r3, #8
 800bca6:	2b08      	cmp	r3, #8
 800bca8:	d10a      	bne.n	800bcc0 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f00b ff55 	bl	8017b5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	695a      	ldr	r2, [r3, #20]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f002 0208 	and.w	r2, r2, #8
 800bcbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f009 fb11 	bl	80152ec <USB_ReadInterrupts>
 800bcca:	4603      	mov	r3, r0
 800bccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcd0:	2b80      	cmp	r3, #128	@ 0x80
 800bcd2:	d123      	bne.n	800bd1c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800bcd4:	6a3b      	ldr	r3, [r7, #32]
 800bcd6:	699b      	ldr	r3, [r3, #24]
 800bcd8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bcdc:	6a3b      	ldr	r3, [r7, #32]
 800bcde:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bce0:	2301      	movs	r3, #1
 800bce2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bce4:	e014      	b.n	800bd10 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800bce6:	6879      	ldr	r1, [r7, #4]
 800bce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcea:	4613      	mov	r3, r2
 800bcec:	00db      	lsls	r3, r3, #3
 800bcee:	4413      	add	r3, r2
 800bcf0:	009b      	lsls	r3, r3, #2
 800bcf2:	440b      	add	r3, r1
 800bcf4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800bcf8:	781b      	ldrb	r3, [r3, #0]
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d105      	bne.n	800bd0a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800bcfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd00:	b2db      	uxtb	r3, r3
 800bd02:	4619      	mov	r1, r3
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 fb0a 	bl	800c31e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	791b      	ldrb	r3, [r3, #4]
 800bd14:	461a      	mov	r2, r3
 800bd16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d3e4      	bcc.n	800bce6 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4618      	mov	r0, r3
 800bd22:	f009 fae3 	bl	80152ec <USB_ReadInterrupts>
 800bd26:	4603      	mov	r3, r0
 800bd28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bd2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd30:	d13c      	bne.n	800bdac <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bd32:	2301      	movs	r3, #1
 800bd34:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd36:	e02b      	b.n	800bd90 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800bd38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd3a:	015a      	lsls	r2, r3, #5
 800bd3c:	69fb      	ldr	r3, [r7, #28]
 800bd3e:	4413      	add	r3, r2
 800bd40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bd48:	6879      	ldr	r1, [r7, #4]
 800bd4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	00db      	lsls	r3, r3, #3
 800bd50:	4413      	add	r3, r2
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	440b      	add	r3, r1
 800bd56:	3318      	adds	r3, #24
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d115      	bne.n	800bd8a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800bd5e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	da12      	bge.n	800bd8a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800bd64:	6879      	ldr	r1, [r7, #4]
 800bd66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd68:	4613      	mov	r3, r2
 800bd6a:	00db      	lsls	r3, r3, #3
 800bd6c:	4413      	add	r3, r2
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	440b      	add	r3, r1
 800bd72:	3317      	adds	r3, #23
 800bd74:	2201      	movs	r2, #1
 800bd76:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800bd78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bd80:	b2db      	uxtb	r3, r3
 800bd82:	4619      	mov	r1, r3
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 faca 	bl	800c31e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	791b      	ldrb	r3, [r3, #4]
 800bd94:	461a      	mov	r2, r3
 800bd96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d3cd      	bcc.n	800bd38 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	695a      	ldr	r2, [r3, #20]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800bdaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f009 fa9b 	bl	80152ec <USB_ReadInterrupts>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bdbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bdc0:	d156      	bne.n	800be70 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdc6:	e045      	b.n	800be54 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800bdc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdca:	015a      	lsls	r2, r3, #5
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	4413      	add	r3, r2
 800bdd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bdd8:	6879      	ldr	r1, [r7, #4]
 800bdda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bddc:	4613      	mov	r3, r2
 800bdde:	00db      	lsls	r3, r3, #3
 800bde0:	4413      	add	r3, r2
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	440b      	add	r3, r1
 800bde6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d12e      	bne.n	800be4e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bdf0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	da2b      	bge.n	800be4e <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	0c1a      	lsrs	r2, r3, #16
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800be00:	4053      	eors	r3, r2
 800be02:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800be06:	2b00      	cmp	r3, #0
 800be08:	d121      	bne.n	800be4e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800be0a:	6879      	ldr	r1, [r7, #4]
 800be0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be0e:	4613      	mov	r3, r2
 800be10:	00db      	lsls	r3, r3, #3
 800be12:	4413      	add	r3, r2
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	440b      	add	r3, r1
 800be18:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800be1c:	2201      	movs	r2, #1
 800be1e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800be20:	6a3b      	ldr	r3, [r7, #32]
 800be22:	699b      	ldr	r3, [r3, #24]
 800be24:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800be28:	6a3b      	ldr	r3, [r7, #32]
 800be2a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800be2c:	6a3b      	ldr	r3, [r7, #32]
 800be2e:	695b      	ldr	r3, [r3, #20]
 800be30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be34:	2b00      	cmp	r3, #0
 800be36:	d10a      	bne.n	800be4e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	69fa      	ldr	r2, [r7, #28]
 800be42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800be4a:	6053      	str	r3, [r2, #4]
            break;
 800be4c:	e008      	b.n	800be60 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800be4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be50:	3301      	adds	r3, #1
 800be52:	627b      	str	r3, [r7, #36]	@ 0x24
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	791b      	ldrb	r3, [r3, #4]
 800be58:	461a      	mov	r2, r3
 800be5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d3b3      	bcc.n	800bdc8 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	695a      	ldr	r2, [r3, #20]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800be6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4618      	mov	r0, r3
 800be76:	f009 fa39 	bl	80152ec <USB_ReadInterrupts>
 800be7a:	4603      	mov	r3, r0
 800be7c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800be80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be84:	d10a      	bne.n	800be9c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f00b fef6 	bl	8017c78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	695a      	ldr	r2, [r3, #20]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800be9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4618      	mov	r0, r3
 800bea2:	f009 fa23 	bl	80152ec <USB_ReadInterrupts>
 800bea6:	4603      	mov	r3, r0
 800bea8:	f003 0304 	and.w	r3, r3, #4
 800beac:	2b04      	cmp	r3, #4
 800beae:	d115      	bne.n	800bedc <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	f003 0304 	and.w	r3, r3, #4
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d002      	beq.n	800bec8 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f00b fee6 	bl	8017c94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	6859      	ldr	r1, [r3, #4]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	69ba      	ldr	r2, [r7, #24]
 800bed4:	430a      	orrs	r2, r1
 800bed6:	605a      	str	r2, [r3, #4]
 800bed8:	e000      	b.n	800bedc <HAL_PCD_IRQHandler+0x996>
      return;
 800beda:	bf00      	nop
    }
  }
}
 800bedc:	3734      	adds	r7, #52	@ 0x34
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd90      	pop	{r4, r7, pc}

0800bee2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b082      	sub	sp, #8
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
 800beea:	460b      	mov	r3, r1
 800beec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d101      	bne.n	800befc <HAL_PCD_SetAddress+0x1a>
 800bef8:	2302      	movs	r3, #2
 800befa:	e012      	b.n	800bf22 <HAL_PCD_SetAddress+0x40>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2201      	movs	r2, #1
 800bf00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	78fa      	ldrb	r2, [r7, #3]
 800bf08:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	78fa      	ldrb	r2, [r7, #3]
 800bf10:	4611      	mov	r1, r2
 800bf12:	4618      	mov	r0, r3
 800bf14:	f009 f982 	bl	801521c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3708      	adds	r7, #8
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	b084      	sub	sp, #16
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
 800bf32:	4608      	mov	r0, r1
 800bf34:	4611      	mov	r1, r2
 800bf36:	461a      	mov	r2, r3
 800bf38:	4603      	mov	r3, r0
 800bf3a:	70fb      	strb	r3, [r7, #3]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	803b      	strh	r3, [r7, #0]
 800bf40:	4613      	mov	r3, r2
 800bf42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800bf44:	2300      	movs	r3, #0
 800bf46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bf48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	da0f      	bge.n	800bf70 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bf50:	78fb      	ldrb	r3, [r7, #3]
 800bf52:	f003 020f 	and.w	r2, r3, #15
 800bf56:	4613      	mov	r3, r2
 800bf58:	00db      	lsls	r3, r3, #3
 800bf5a:	4413      	add	r3, r2
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	3310      	adds	r3, #16
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	4413      	add	r3, r2
 800bf64:	3304      	adds	r3, #4
 800bf66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	705a      	strb	r2, [r3, #1]
 800bf6e:	e00f      	b.n	800bf90 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bf70:	78fb      	ldrb	r3, [r7, #3]
 800bf72:	f003 020f 	and.w	r2, r3, #15
 800bf76:	4613      	mov	r3, r2
 800bf78:	00db      	lsls	r3, r3, #3
 800bf7a:	4413      	add	r3, r2
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	4413      	add	r3, r2
 800bf86:	3304      	adds	r3, #4
 800bf88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800bf90:	78fb      	ldrb	r3, [r7, #3]
 800bf92:	f003 030f 	and.w	r3, r3, #15
 800bf96:	b2da      	uxtb	r2, r3
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800bf9c:	883b      	ldrh	r3, [r7, #0]
 800bf9e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	78ba      	ldrb	r2, [r7, #2]
 800bfaa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	785b      	ldrb	r3, [r3, #1]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d004      	beq.n	800bfbe <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	461a      	mov	r2, r3
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800bfbe:	78bb      	ldrb	r3, [r7, #2]
 800bfc0:	2b02      	cmp	r3, #2
 800bfc2:	d102      	bne.n	800bfca <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d101      	bne.n	800bfd8 <HAL_PCD_EP_Open+0xae>
 800bfd4:	2302      	movs	r3, #2
 800bfd6:	e00e      	b.n	800bff6 <HAL_PCD_EP_Open+0xcc>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	68f9      	ldr	r1, [r7, #12]
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f008 fafc 	bl	80145e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2200      	movs	r2, #0
 800bff0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800bff4:	7afb      	ldrb	r3, [r7, #11]
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3710      	adds	r7, #16
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}

0800bffe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b084      	sub	sp, #16
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
 800c006:	460b      	mov	r3, r1
 800c008:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c00a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	da0f      	bge.n	800c032 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c012:	78fb      	ldrb	r3, [r7, #3]
 800c014:	f003 020f 	and.w	r2, r3, #15
 800c018:	4613      	mov	r3, r2
 800c01a:	00db      	lsls	r3, r3, #3
 800c01c:	4413      	add	r3, r2
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	3310      	adds	r3, #16
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	4413      	add	r3, r2
 800c026:	3304      	adds	r3, #4
 800c028:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2201      	movs	r2, #1
 800c02e:	705a      	strb	r2, [r3, #1]
 800c030:	e00f      	b.n	800c052 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c032:	78fb      	ldrb	r3, [r7, #3]
 800c034:	f003 020f 	and.w	r2, r3, #15
 800c038:	4613      	mov	r3, r2
 800c03a:	00db      	lsls	r3, r3, #3
 800c03c:	4413      	add	r3, r2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	4413      	add	r3, r2
 800c048:	3304      	adds	r3, #4
 800c04a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2200      	movs	r2, #0
 800c050:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c052:	78fb      	ldrb	r3, [r7, #3]
 800c054:	f003 030f 	and.w	r3, r3, #15
 800c058:	b2da      	uxtb	r2, r3
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c064:	2b01      	cmp	r3, #1
 800c066:	d101      	bne.n	800c06c <HAL_PCD_EP_Close+0x6e>
 800c068:	2302      	movs	r3, #2
 800c06a:	e00e      	b.n	800c08a <HAL_PCD_EP_Close+0x8c>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2201      	movs	r2, #1
 800c070:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	68f9      	ldr	r1, [r7, #12]
 800c07a:	4618      	mov	r0, r3
 800c07c:	f008 fb3a 	bl	80146f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2200      	movs	r2, #0
 800c084:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800c088:	2300      	movs	r3, #0
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c092:	b580      	push	{r7, lr}
 800c094:	b086      	sub	sp, #24
 800c096:	af00      	add	r7, sp, #0
 800c098:	60f8      	str	r0, [r7, #12]
 800c09a:	607a      	str	r2, [r7, #4]
 800c09c:	603b      	str	r3, [r7, #0]
 800c09e:	460b      	mov	r3, r1
 800c0a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c0a2:	7afb      	ldrb	r3, [r7, #11]
 800c0a4:	f003 020f 	and.w	r2, r3, #15
 800c0a8:	4613      	mov	r3, r2
 800c0aa:	00db      	lsls	r3, r3, #3
 800c0ac:	4413      	add	r3, r2
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c0b4:	68fa      	ldr	r2, [r7, #12]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	3304      	adds	r3, #4
 800c0ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	683a      	ldr	r2, [r7, #0]
 800c0c6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c0d4:	7afb      	ldrb	r3, [r7, #11]
 800c0d6:	f003 030f 	and.w	r3, r3, #15
 800c0da:	b2da      	uxtb	r2, r3
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	799b      	ldrb	r3, [r3, #6]
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d102      	bne.n	800c0ee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	6818      	ldr	r0, [r3, #0]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	799b      	ldrb	r3, [r3, #6]
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	6979      	ldr	r1, [r7, #20]
 800c0fa:	f008 fbd7 	bl	80148ac <USB_EPStartXfer>

  return HAL_OK;
 800c0fe:	2300      	movs	r3, #0
}
 800c100:	4618      	mov	r0, r3
 800c102:	3718      	adds	r7, #24
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800c108:	b480      	push	{r7}
 800c10a:	b083      	sub	sp, #12
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	460b      	mov	r3, r1
 800c112:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c114:	78fb      	ldrb	r3, [r7, #3]
 800c116:	f003 020f 	and.w	r2, r3, #15
 800c11a:	6879      	ldr	r1, [r7, #4]
 800c11c:	4613      	mov	r3, r2
 800c11e:	00db      	lsls	r3, r3, #3
 800c120:	4413      	add	r3, r2
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	440b      	add	r3, r1
 800c126:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800c12a:	681b      	ldr	r3, [r3, #0]
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	370c      	adds	r7, #12
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr

0800c138 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b086      	sub	sp, #24
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	607a      	str	r2, [r7, #4]
 800c142:	603b      	str	r3, [r7, #0]
 800c144:	460b      	mov	r3, r1
 800c146:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c148:	7afb      	ldrb	r3, [r7, #11]
 800c14a:	f003 020f 	and.w	r2, r3, #15
 800c14e:	4613      	mov	r3, r2
 800c150:	00db      	lsls	r3, r3, #3
 800c152:	4413      	add	r3, r2
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	3310      	adds	r3, #16
 800c158:	68fa      	ldr	r2, [r7, #12]
 800c15a:	4413      	add	r3, r2
 800c15c:	3304      	adds	r3, #4
 800c15e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	683a      	ldr	r2, [r7, #0]
 800c16a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	2200      	movs	r2, #0
 800c170:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	2201      	movs	r2, #1
 800c176:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c178:	7afb      	ldrb	r3, [r7, #11]
 800c17a:	f003 030f 	and.w	r3, r3, #15
 800c17e:	b2da      	uxtb	r2, r3
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	799b      	ldrb	r3, [r3, #6]
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d102      	bne.n	800c192 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c18c:	687a      	ldr	r2, [r7, #4]
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	6818      	ldr	r0, [r3, #0]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	799b      	ldrb	r3, [r3, #6]
 800c19a:	461a      	mov	r2, r3
 800c19c:	6979      	ldr	r1, [r7, #20]
 800c19e:	f008 fb85 	bl	80148ac <USB_EPStartXfer>

  return HAL_OK;
 800c1a2:	2300      	movs	r3, #0
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3718      	adds	r7, #24
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c1b8:	78fb      	ldrb	r3, [r7, #3]
 800c1ba:	f003 030f 	and.w	r3, r3, #15
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	7912      	ldrb	r2, [r2, #4]
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d901      	bls.n	800c1ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e04f      	b.n	800c26a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c1ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	da0f      	bge.n	800c1f2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c1d2:	78fb      	ldrb	r3, [r7, #3]
 800c1d4:	f003 020f 	and.w	r2, r3, #15
 800c1d8:	4613      	mov	r3, r2
 800c1da:	00db      	lsls	r3, r3, #3
 800c1dc:	4413      	add	r3, r2
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	3310      	adds	r3, #16
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	3304      	adds	r3, #4
 800c1e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	705a      	strb	r2, [r3, #1]
 800c1f0:	e00d      	b.n	800c20e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c1f2:	78fa      	ldrb	r2, [r7, #3]
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	00db      	lsls	r3, r3, #3
 800c1f8:	4413      	add	r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	4413      	add	r3, r2
 800c204:	3304      	adds	r3, #4
 800c206:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2200      	movs	r2, #0
 800c20c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2201      	movs	r2, #1
 800c212:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c214:	78fb      	ldrb	r3, [r7, #3]
 800c216:	f003 030f 	and.w	r3, r3, #15
 800c21a:	b2da      	uxtb	r2, r3
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c226:	2b01      	cmp	r3, #1
 800c228:	d101      	bne.n	800c22e <HAL_PCD_EP_SetStall+0x82>
 800c22a:	2302      	movs	r3, #2
 800c22c:	e01d      	b.n	800c26a <HAL_PCD_EP_SetStall+0xbe>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2201      	movs	r2, #1
 800c232:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	68f9      	ldr	r1, [r7, #12]
 800c23c:	4618      	mov	r0, r3
 800c23e:	f008 ff19 	bl	8015074 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c242:	78fb      	ldrb	r3, [r7, #3]
 800c244:	f003 030f 	and.w	r3, r3, #15
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d109      	bne.n	800c260 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6818      	ldr	r0, [r3, #0]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	7999      	ldrb	r1, [r3, #6]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c25a:	461a      	mov	r2, r3
 800c25c:	f009 f90c 	bl	8015478 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2200      	movs	r2, #0
 800c264:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c268:	2300      	movs	r3, #0
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c272:	b580      	push	{r7, lr}
 800c274:	b084      	sub	sp, #16
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	460b      	mov	r3, r1
 800c27c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c27e:	78fb      	ldrb	r3, [r7, #3]
 800c280:	f003 030f 	and.w	r3, r3, #15
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	7912      	ldrb	r2, [r2, #4]
 800c288:	4293      	cmp	r3, r2
 800c28a:	d901      	bls.n	800c290 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c28c:	2301      	movs	r3, #1
 800c28e:	e042      	b.n	800c316 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c290:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c294:	2b00      	cmp	r3, #0
 800c296:	da0f      	bge.n	800c2b8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c298:	78fb      	ldrb	r3, [r7, #3]
 800c29a:	f003 020f 	and.w	r2, r3, #15
 800c29e:	4613      	mov	r3, r2
 800c2a0:	00db      	lsls	r3, r3, #3
 800c2a2:	4413      	add	r3, r2
 800c2a4:	009b      	lsls	r3, r3, #2
 800c2a6:	3310      	adds	r3, #16
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	4413      	add	r3, r2
 800c2ac:	3304      	adds	r3, #4
 800c2ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	705a      	strb	r2, [r3, #1]
 800c2b6:	e00f      	b.n	800c2d8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c2b8:	78fb      	ldrb	r3, [r7, #3]
 800c2ba:	f003 020f 	and.w	r2, r3, #15
 800c2be:	4613      	mov	r3, r2
 800c2c0:	00db      	lsls	r3, r3, #3
 800c2c2:	4413      	add	r3, r2
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	4413      	add	r3, r2
 800c2ce:	3304      	adds	r3, #4
 800c2d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c2de:	78fb      	ldrb	r3, [r7, #3]
 800c2e0:	f003 030f 	and.w	r3, r3, #15
 800c2e4:	b2da      	uxtb	r2, r3
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d101      	bne.n	800c2f8 <HAL_PCD_EP_ClrStall+0x86>
 800c2f4:	2302      	movs	r3, #2
 800c2f6:	e00e      	b.n	800c316 <HAL_PCD_EP_ClrStall+0xa4>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	68f9      	ldr	r1, [r7, #12]
 800c306:	4618      	mov	r0, r3
 800c308:	f008 ff22 	bl	8015150 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2200      	movs	r2, #0
 800c310:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c314:	2300      	movs	r3, #0
}
 800c316:	4618      	mov	r0, r3
 800c318:	3710      	adds	r7, #16
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c31e:	b580      	push	{r7, lr}
 800c320:	b084      	sub	sp, #16
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
 800c326:	460b      	mov	r3, r1
 800c328:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800c32a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	da0c      	bge.n	800c34c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c332:	78fb      	ldrb	r3, [r7, #3]
 800c334:	f003 020f 	and.w	r2, r3, #15
 800c338:	4613      	mov	r3, r2
 800c33a:	00db      	lsls	r3, r3, #3
 800c33c:	4413      	add	r3, r2
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	3310      	adds	r3, #16
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	4413      	add	r3, r2
 800c346:	3304      	adds	r3, #4
 800c348:	60fb      	str	r3, [r7, #12]
 800c34a:	e00c      	b.n	800c366 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c34c:	78fb      	ldrb	r3, [r7, #3]
 800c34e:	f003 020f 	and.w	r2, r3, #15
 800c352:	4613      	mov	r3, r2
 800c354:	00db      	lsls	r3, r3, #3
 800c356:	4413      	add	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	4413      	add	r3, r2
 800c362:	3304      	adds	r3, #4
 800c364:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	68f9      	ldr	r1, [r7, #12]
 800c36c:	4618      	mov	r0, r3
 800c36e:	f008 fd41 	bl	8014df4 <USB_EPStopXfer>
 800c372:	4603      	mov	r3, r0
 800c374:	72fb      	strb	r3, [r7, #11]

  return ret;
 800c376:	7afb      	ldrb	r3, [r7, #11]
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3710      	adds	r7, #16
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b08a      	sub	sp, #40	@ 0x28
 800c384:	af02      	add	r7, sp, #8
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c394:	683a      	ldr	r2, [r7, #0]
 800c396:	4613      	mov	r3, r2
 800c398:	00db      	lsls	r3, r3, #3
 800c39a:	4413      	add	r3, r2
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	3310      	adds	r3, #16
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	3304      	adds	r3, #4
 800c3a6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	695a      	ldr	r2, [r3, #20]
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	691b      	ldr	r3, [r3, #16]
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d901      	bls.n	800c3b8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	e06b      	b.n	800c490 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	691a      	ldr	r2, [r3, #16]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	695b      	ldr	r3, [r3, #20]
 800c3c0:	1ad3      	subs	r3, r2, r3
 800c3c2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	689b      	ldr	r3, [r3, #8]
 800c3c8:	69fa      	ldr	r2, [r7, #28]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d902      	bls.n	800c3d4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	689b      	ldr	r3, [r3, #8]
 800c3d2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	3303      	adds	r3, #3
 800c3d8:	089b      	lsrs	r3, r3, #2
 800c3da:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c3dc:	e02a      	b.n	800c434 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	691a      	ldr	r2, [r3, #16]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	695b      	ldr	r3, [r3, #20]
 800c3e6:	1ad3      	subs	r3, r2, r3
 800c3e8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	689b      	ldr	r3, [r3, #8]
 800c3ee:	69fa      	ldr	r2, [r7, #28]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d902      	bls.n	800c3fa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c3fa:	69fb      	ldr	r3, [r7, #28]
 800c3fc:	3303      	adds	r3, #3
 800c3fe:	089b      	lsrs	r3, r3, #2
 800c400:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	68d9      	ldr	r1, [r3, #12]
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	b2da      	uxtb	r2, r3
 800c40a:	69fb      	ldr	r3, [r7, #28]
 800c40c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	4603      	mov	r3, r0
 800c416:	6978      	ldr	r0, [r7, #20]
 800c418:	f008 fd96 	bl	8014f48 <USB_WritePacket>

    ep->xfer_buff  += len;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	68da      	ldr	r2, [r3, #12]
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	441a      	add	r2, r3
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	695a      	ldr	r2, [r3, #20]
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	441a      	add	r2, r3
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	015a      	lsls	r2, r3, #5
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	4413      	add	r3, r2
 800c43c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c440:	699b      	ldr	r3, [r3, #24]
 800c442:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c444:	69ba      	ldr	r2, [r7, #24]
 800c446:	429a      	cmp	r2, r3
 800c448:	d809      	bhi.n	800c45e <PCD_WriteEmptyTxFifo+0xde>
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	695a      	ldr	r2, [r3, #20]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c452:	429a      	cmp	r2, r3
 800c454:	d203      	bcs.n	800c45e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	691b      	ldr	r3, [r3, #16]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d1bf      	bne.n	800c3de <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	691a      	ldr	r2, [r3, #16]
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	695b      	ldr	r3, [r3, #20]
 800c466:	429a      	cmp	r2, r3
 800c468:	d811      	bhi.n	800c48e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	f003 030f 	and.w	r3, r3, #15
 800c470:	2201      	movs	r2, #1
 800c472:	fa02 f303 	lsl.w	r3, r2, r3
 800c476:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c47e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	43db      	mvns	r3, r3
 800c484:	6939      	ldr	r1, [r7, #16]
 800c486:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c48a:	4013      	ands	r3, r2
 800c48c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800c48e:	2300      	movs	r3, #0
}
 800c490:	4618      	mov	r0, r3
 800c492:	3720      	adds	r7, #32
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b088      	sub	sp, #32
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	333c      	adds	r3, #60	@ 0x3c
 800c4b0:	3304      	adds	r3, #4
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	015a      	lsls	r2, r3, #5
 800c4ba:	69bb      	ldr	r3, [r7, #24]
 800c4bc:	4413      	add	r3, r2
 800c4be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	799b      	ldrb	r3, [r3, #6]
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d17b      	bne.n	800c5c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	f003 0308 	and.w	r3, r3, #8
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d015      	beq.n	800c504 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	4a61      	ldr	r2, [pc, #388]	@ (800c660 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	f240 80b9 	bls.w	800c654 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f000 80b3 	beq.w	800c654 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	015a      	lsls	r2, r3, #5
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c500:	6093      	str	r3, [r2, #8]
 800c502:	e0a7      	b.n	800c654 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	f003 0320 	and.w	r3, r3, #32
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d009      	beq.n	800c522 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	015a      	lsls	r2, r3, #5
 800c512:	69bb      	ldr	r3, [r7, #24]
 800c514:	4413      	add	r3, r2
 800c516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c51a:	461a      	mov	r2, r3
 800c51c:	2320      	movs	r3, #32
 800c51e:	6093      	str	r3, [r2, #8]
 800c520:	e098      	b.n	800c654 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c528:	2b00      	cmp	r3, #0
 800c52a:	f040 8093 	bne.w	800c654 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	4a4b      	ldr	r2, [pc, #300]	@ (800c660 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d90f      	bls.n	800c556 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00a      	beq.n	800c556 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	015a      	lsls	r2, r3, #5
 800c544:	69bb      	ldr	r3, [r7, #24]
 800c546:	4413      	add	r3, r2
 800c548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c54c:	461a      	mov	r2, r3
 800c54e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c552:	6093      	str	r3, [r2, #8]
 800c554:	e07e      	b.n	800c654 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800c556:	683a      	ldr	r2, [r7, #0]
 800c558:	4613      	mov	r3, r2
 800c55a:	00db      	lsls	r3, r3, #3
 800c55c:	4413      	add	r3, r2
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	4413      	add	r3, r2
 800c568:	3304      	adds	r3, #4
 800c56a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6a1a      	ldr	r2, [r3, #32]
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	0159      	lsls	r1, r3, #5
 800c574:	69bb      	ldr	r3, [r7, #24]
 800c576:	440b      	add	r3, r1
 800c578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c57c:	691b      	ldr	r3, [r3, #16]
 800c57e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c582:	1ad2      	subs	r2, r2, r3
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d114      	bne.n	800c5b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	691b      	ldr	r3, [r3, #16]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d109      	bne.n	800c5aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6818      	ldr	r0, [r3, #0]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	2101      	movs	r1, #1
 800c5a4:	f008 ff68 	bl	8015478 <USB_EP0_OutStart>
 800c5a8:	e006      	b.n	800c5b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	68da      	ldr	r2, [r3, #12]
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	695b      	ldr	r3, [r3, #20]
 800c5b2:	441a      	add	r2, r3
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	4619      	mov	r1, r3
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f00b fa96 	bl	8017af0 <HAL_PCD_DataOutStageCallback>
 800c5c4:	e046      	b.n	800c654 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	4a26      	ldr	r2, [pc, #152]	@ (800c664 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d124      	bne.n	800c618 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d00a      	beq.n	800c5ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	015a      	lsls	r2, r3, #5
 800c5dc:	69bb      	ldr	r3, [r7, #24]
 800c5de:	4413      	add	r3, r2
 800c5e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c5ea:	6093      	str	r3, [r2, #8]
 800c5ec:	e032      	b.n	800c654 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	f003 0320 	and.w	r3, r3, #32
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d008      	beq.n	800c60a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	015a      	lsls	r2, r3, #5
 800c5fc:	69bb      	ldr	r3, [r7, #24]
 800c5fe:	4413      	add	r3, r2
 800c600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c604:	461a      	mov	r2, r3
 800c606:	2320      	movs	r3, #32
 800c608:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	4619      	mov	r1, r3
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f00b fa6d 	bl	8017af0 <HAL_PCD_DataOutStageCallback>
 800c616:	e01d      	b.n	800c654 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d114      	bne.n	800c648 <PCD_EP_OutXfrComplete_int+0x1b0>
 800c61e:	6879      	ldr	r1, [r7, #4]
 800c620:	683a      	ldr	r2, [r7, #0]
 800c622:	4613      	mov	r3, r2
 800c624:	00db      	lsls	r3, r3, #3
 800c626:	4413      	add	r3, r2
 800c628:	009b      	lsls	r3, r3, #2
 800c62a:	440b      	add	r3, r1
 800c62c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d108      	bne.n	800c648 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6818      	ldr	r0, [r3, #0]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c640:	461a      	mov	r2, r3
 800c642:	2100      	movs	r1, #0
 800c644:	f008 ff18 	bl	8015478 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	4619      	mov	r1, r3
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f00b fa4e 	bl	8017af0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c654:	2300      	movs	r3, #0
}
 800c656:	4618      	mov	r0, r3
 800c658:	3720      	adds	r7, #32
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop
 800c660:	4f54300a 	.word	0x4f54300a
 800c664:	4f54310a 	.word	0x4f54310a

0800c668 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b086      	sub	sp, #24
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	333c      	adds	r3, #60	@ 0x3c
 800c680:	3304      	adds	r3, #4
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	015a      	lsls	r2, r3, #5
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	4413      	add	r3, r2
 800c68e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	4a15      	ldr	r2, [pc, #84]	@ (800c6f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d90e      	bls.n	800c6bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d009      	beq.n	800c6bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	015a      	lsls	r2, r3, #5
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c6ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f00b fa05 	bl	8017acc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	4a0a      	ldr	r2, [pc, #40]	@ (800c6f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d90c      	bls.n	800c6e4 <PCD_EP_OutSetupPacket_int+0x7c>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	799b      	ldrb	r3, [r3, #6]
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d108      	bne.n	800c6e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6818      	ldr	r0, [r3, #0]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c6dc:	461a      	mov	r2, r3
 800c6de:	2101      	movs	r1, #1
 800c6e0:	f008 feca 	bl	8015478 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c6e4:	2300      	movs	r3, #0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3718      	adds	r7, #24
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	4f54300a 	.word	0x4f54300a

0800c6f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	70fb      	strb	r3, [r7, #3]
 800c700:	4613      	mov	r3, r2
 800c702:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c70a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c70c:	78fb      	ldrb	r3, [r7, #3]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d107      	bne.n	800c722 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c712:	883b      	ldrh	r3, [r7, #0]
 800c714:	0419      	lsls	r1, r3, #16
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	68ba      	ldr	r2, [r7, #8]
 800c71c:	430a      	orrs	r2, r1
 800c71e:	629a      	str	r2, [r3, #40]	@ 0x28
 800c720:	e028      	b.n	800c774 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c728:	0c1b      	lsrs	r3, r3, #16
 800c72a:	68ba      	ldr	r2, [r7, #8]
 800c72c:	4413      	add	r3, r2
 800c72e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c730:	2300      	movs	r3, #0
 800c732:	73fb      	strb	r3, [r7, #15]
 800c734:	e00d      	b.n	800c752 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	7bfb      	ldrb	r3, [r7, #15]
 800c73c:	3340      	adds	r3, #64	@ 0x40
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	4413      	add	r3, r2
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	0c1b      	lsrs	r3, r3, #16
 800c746:	68ba      	ldr	r2, [r7, #8]
 800c748:	4413      	add	r3, r2
 800c74a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c74c:	7bfb      	ldrb	r3, [r7, #15]
 800c74e:	3301      	adds	r3, #1
 800c750:	73fb      	strb	r3, [r7, #15]
 800c752:	7bfa      	ldrb	r2, [r7, #15]
 800c754:	78fb      	ldrb	r3, [r7, #3]
 800c756:	3b01      	subs	r3, #1
 800c758:	429a      	cmp	r2, r3
 800c75a:	d3ec      	bcc.n	800c736 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c75c:	883b      	ldrh	r3, [r7, #0]
 800c75e:	0418      	lsls	r0, r3, #16
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6819      	ldr	r1, [r3, #0]
 800c764:	78fb      	ldrb	r3, [r7, #3]
 800c766:	3b01      	subs	r3, #1
 800c768:	68ba      	ldr	r2, [r7, #8]
 800c76a:	4302      	orrs	r2, r0
 800c76c:	3340      	adds	r3, #64	@ 0x40
 800c76e:	009b      	lsls	r3, r3, #2
 800c770:	440b      	add	r3, r1
 800c772:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c774:	2300      	movs	r3, #0
}
 800c776:	4618      	mov	r0, r3
 800c778:	3714      	adds	r7, #20
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr

0800c782 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c782:	b480      	push	{r7}
 800c784:	b083      	sub	sp, #12
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
 800c78a:	460b      	mov	r3, r1
 800c78c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	887a      	ldrh	r2, [r7, #2]
 800c794:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c796:	2300      	movs	r3, #0
}
 800c798:	4618      	mov	r0, r3
 800c79a:	370c      	adds	r7, #12
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b085      	sub	sp, #20
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	699b      	ldr	r3, [r3, #24]
 800c7c6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c7d2:	4b05      	ldr	r3, [pc, #20]	@ (800c7e8 <HAL_PCDEx_ActivateLPM+0x44>)
 800c7d4:	4313      	orrs	r3, r2
 800c7d6:	68fa      	ldr	r2, [r7, #12]
 800c7d8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800c7da:	2300      	movs	r3, #0
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3714      	adds	r7, #20
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr
 800c7e8:	10000003 	.word	0x10000003

0800c7ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c7f8:	bf00      	nop
 800c7fa:	370c      	adds	r7, #12
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr

0800c804 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800c80c:	4b19      	ldr	r3, [pc, #100]	@ (800c874 <HAL_PWREx_ConfigSupply+0x70>)
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	f003 0304 	and.w	r3, r3, #4
 800c814:	2b04      	cmp	r3, #4
 800c816:	d00a      	beq.n	800c82e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c818:	4b16      	ldr	r3, [pc, #88]	@ (800c874 <HAL_PWREx_ConfigSupply+0x70>)
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	f003 0307 	and.w	r3, r3, #7
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	429a      	cmp	r2, r3
 800c824:	d001      	beq.n	800c82a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c826:	2301      	movs	r3, #1
 800c828:	e01f      	b.n	800c86a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c82a:	2300      	movs	r3, #0
 800c82c:	e01d      	b.n	800c86a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c82e:	4b11      	ldr	r3, [pc, #68]	@ (800c874 <HAL_PWREx_ConfigSupply+0x70>)
 800c830:	68db      	ldr	r3, [r3, #12]
 800c832:	f023 0207 	bic.w	r2, r3, #7
 800c836:	490f      	ldr	r1, [pc, #60]	@ (800c874 <HAL_PWREx_ConfigSupply+0x70>)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4313      	orrs	r3, r2
 800c83c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c83e:	f7f6 fdc5 	bl	80033cc <HAL_GetTick>
 800c842:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c844:	e009      	b.n	800c85a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c846:	f7f6 fdc1 	bl	80033cc <HAL_GetTick>
 800c84a:	4602      	mov	r2, r0
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	1ad3      	subs	r3, r2, r3
 800c850:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c854:	d901      	bls.n	800c85a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c856:	2301      	movs	r3, #1
 800c858:	e007      	b.n	800c86a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c85a:	4b06      	ldr	r3, [pc, #24]	@ (800c874 <HAL_PWREx_ConfigSupply+0x70>)
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c862:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c866:	d1ee      	bne.n	800c846 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c868:	2300      	movs	r3, #0
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	58024800 	.word	0x58024800

0800c878 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800c878:	b480      	push	{r7}
 800c87a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800c87c:	4b05      	ldr	r3, [pc, #20]	@ (800c894 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	4a04      	ldr	r2, [pc, #16]	@ (800c894 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c882:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c886:	60d3      	str	r3, [r2, #12]
}
 800c888:	bf00      	nop
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	58024800 	.word	0x58024800

0800c898 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b08c      	sub	sp, #48	@ 0x30
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d101      	bne.n	800c8aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	e3c8      	b.n	800d03c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f003 0301 	and.w	r3, r3, #1
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	f000 8087 	beq.w	800c9c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c8b8:	4b88      	ldr	r3, [pc, #544]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800c8ba:	691b      	ldr	r3, [r3, #16]
 800c8bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c8c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c8c2:	4b86      	ldr	r3, [pc, #536]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800c8c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c8c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ca:	2b10      	cmp	r3, #16
 800c8cc:	d007      	beq.n	800c8de <HAL_RCC_OscConfig+0x46>
 800c8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8d0:	2b18      	cmp	r3, #24
 800c8d2:	d110      	bne.n	800c8f6 <HAL_RCC_OscConfig+0x5e>
 800c8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8d6:	f003 0303 	and.w	r3, r3, #3
 800c8da:	2b02      	cmp	r3, #2
 800c8dc:	d10b      	bne.n	800c8f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c8de:	4b7f      	ldr	r3, [pc, #508]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d06c      	beq.n	800c9c4 <HAL_RCC_OscConfig+0x12c>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d168      	bne.n	800c9c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	e3a2      	b.n	800d03c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8fe:	d106      	bne.n	800c90e <HAL_RCC_OscConfig+0x76>
 800c900:	4b76      	ldr	r3, [pc, #472]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4a75      	ldr	r2, [pc, #468]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800c906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c90a:	6013      	str	r3, [r2, #0]
 800c90c:	e02e      	b.n	800c96c <HAL_RCC_OscConfig+0xd4>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d10c      	bne.n	800c930 <HAL_RCC_OscConfig+0x98>
 800c916:	4b71      	ldr	r3, [pc, #452]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4a70      	ldr	r2, [pc, #448]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800c91c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c920:	6013      	str	r3, [r2, #0]
 800c922:	4b6e      	ldr	r3, [pc, #440]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4a6d      	ldr	r2, [pc, #436]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800c928:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c92c:	6013      	str	r3, [r2, #0]
 800c92e:	e01d      	b.n	800c96c <HAL_RCC_OscConfig+0xd4>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c938:	d10c      	bne.n	800c954 <HAL_RCC_OscConfig+0xbc>
 800c93a:	4b68      	ldr	r3, [pc, #416]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4a67      	ldr	r2, [pc, #412]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800c940:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c944:	6013      	str	r3, [r2, #0]
 800c946:	4b65      	ldr	r3, [pc, #404]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4a64      	ldr	r2, [pc, #400]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800c94c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c950:	6013      	str	r3, [r2, #0]
 800c952:	e00b      	b.n	800c96c <HAL_RCC_OscConfig+0xd4>
 800c954:	4b61      	ldr	r3, [pc, #388]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a60      	ldr	r2, [pc, #384]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800c95a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c95e:	6013      	str	r3, [r2, #0]
 800c960:	4b5e      	ldr	r3, [pc, #376]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a5d      	ldr	r2, [pc, #372]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800c966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c96a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d013      	beq.n	800c99c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c974:	f7f6 fd2a 	bl	80033cc <HAL_GetTick>
 800c978:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c97a:	e008      	b.n	800c98e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c97c:	f7f6 fd26 	bl	80033cc <HAL_GetTick>
 800c980:	4602      	mov	r2, r0
 800c982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c984:	1ad3      	subs	r3, r2, r3
 800c986:	2b64      	cmp	r3, #100	@ 0x64
 800c988:	d901      	bls.n	800c98e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800c98a:	2303      	movs	r3, #3
 800c98c:	e356      	b.n	800d03c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c98e:	4b53      	ldr	r3, [pc, #332]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c996:	2b00      	cmp	r3, #0
 800c998:	d0f0      	beq.n	800c97c <HAL_RCC_OscConfig+0xe4>
 800c99a:	e014      	b.n	800c9c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c99c:	f7f6 fd16 	bl	80033cc <HAL_GetTick>
 800c9a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c9a2:	e008      	b.n	800c9b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c9a4:	f7f6 fd12 	bl	80033cc <HAL_GetTick>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ac:	1ad3      	subs	r3, r2, r3
 800c9ae:	2b64      	cmp	r3, #100	@ 0x64
 800c9b0:	d901      	bls.n	800c9b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800c9b2:	2303      	movs	r3, #3
 800c9b4:	e342      	b.n	800d03c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c9b6:	4b49      	ldr	r3, [pc, #292]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d1f0      	bne.n	800c9a4 <HAL_RCC_OscConfig+0x10c>
 800c9c2:	e000      	b.n	800c9c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c9c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f003 0302 	and.w	r3, r3, #2
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	f000 808c 	beq.w	800caec <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c9d4:	4b41      	ldr	r3, [pc, #260]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800c9d6:	691b      	ldr	r3, [r3, #16]
 800c9d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c9dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c9de:	4b3f      	ldr	r3, [pc, #252]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800c9e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9e2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c9e4:	6a3b      	ldr	r3, [r7, #32]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d007      	beq.n	800c9fa <HAL_RCC_OscConfig+0x162>
 800c9ea:	6a3b      	ldr	r3, [r7, #32]
 800c9ec:	2b18      	cmp	r3, #24
 800c9ee:	d137      	bne.n	800ca60 <HAL_RCC_OscConfig+0x1c8>
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	f003 0303 	and.w	r3, r3, #3
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d132      	bne.n	800ca60 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c9fa:	4b38      	ldr	r3, [pc, #224]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f003 0304 	and.w	r3, r3, #4
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d005      	beq.n	800ca12 <HAL_RCC_OscConfig+0x17a>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d101      	bne.n	800ca12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800ca0e:	2301      	movs	r3, #1
 800ca10:	e314      	b.n	800d03c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ca12:	4b32      	ldr	r3, [pc, #200]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f023 0219 	bic.w	r2, r3, #25
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	68db      	ldr	r3, [r3, #12]
 800ca1e:	492f      	ldr	r1, [pc, #188]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800ca20:	4313      	orrs	r3, r2
 800ca22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca24:	f7f6 fcd2 	bl	80033cc <HAL_GetTick>
 800ca28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ca2a:	e008      	b.n	800ca3e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ca2c:	f7f6 fcce 	bl	80033cc <HAL_GetTick>
 800ca30:	4602      	mov	r2, r0
 800ca32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca34:	1ad3      	subs	r3, r2, r3
 800ca36:	2b02      	cmp	r3, #2
 800ca38:	d901      	bls.n	800ca3e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800ca3a:	2303      	movs	r3, #3
 800ca3c:	e2fe      	b.n	800d03c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ca3e:	4b27      	ldr	r3, [pc, #156]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f003 0304 	and.w	r3, r3, #4
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d0f0      	beq.n	800ca2c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca4a:	4b24      	ldr	r3, [pc, #144]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	691b      	ldr	r3, [r3, #16]
 800ca56:	061b      	lsls	r3, r3, #24
 800ca58:	4920      	ldr	r1, [pc, #128]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ca5e:	e045      	b.n	800caec <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	68db      	ldr	r3, [r3, #12]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d026      	beq.n	800cab6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ca68:	4b1c      	ldr	r3, [pc, #112]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f023 0219 	bic.w	r2, r3, #25
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	68db      	ldr	r3, [r3, #12]
 800ca74:	4919      	ldr	r1, [pc, #100]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800ca76:	4313      	orrs	r3, r2
 800ca78:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca7a:	f7f6 fca7 	bl	80033cc <HAL_GetTick>
 800ca7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ca80:	e008      	b.n	800ca94 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ca82:	f7f6 fca3 	bl	80033cc <HAL_GetTick>
 800ca86:	4602      	mov	r2, r0
 800ca88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca8a:	1ad3      	subs	r3, r2, r3
 800ca8c:	2b02      	cmp	r3, #2
 800ca8e:	d901      	bls.n	800ca94 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800ca90:	2303      	movs	r3, #3
 800ca92:	e2d3      	b.n	800d03c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ca94:	4b11      	ldr	r3, [pc, #68]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f003 0304 	and.w	r3, r3, #4
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d0f0      	beq.n	800ca82 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800caa0:	4b0e      	ldr	r3, [pc, #56]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	691b      	ldr	r3, [r3, #16]
 800caac:	061b      	lsls	r3, r3, #24
 800caae:	490b      	ldr	r1, [pc, #44]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800cab0:	4313      	orrs	r3, r2
 800cab2:	604b      	str	r3, [r1, #4]
 800cab4:	e01a      	b.n	800caec <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cab6:	4b09      	ldr	r3, [pc, #36]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	4a08      	ldr	r2, [pc, #32]	@ (800cadc <HAL_RCC_OscConfig+0x244>)
 800cabc:	f023 0301 	bic.w	r3, r3, #1
 800cac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cac2:	f7f6 fc83 	bl	80033cc <HAL_GetTick>
 800cac6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cac8:	e00a      	b.n	800cae0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800caca:	f7f6 fc7f 	bl	80033cc <HAL_GetTick>
 800cace:	4602      	mov	r2, r0
 800cad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad2:	1ad3      	subs	r3, r2, r3
 800cad4:	2b02      	cmp	r3, #2
 800cad6:	d903      	bls.n	800cae0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800cad8:	2303      	movs	r3, #3
 800cada:	e2af      	b.n	800d03c <HAL_RCC_OscConfig+0x7a4>
 800cadc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cae0:	4b96      	ldr	r3, [pc, #600]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f003 0304 	and.w	r3, r3, #4
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d1ee      	bne.n	800caca <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f003 0310 	and.w	r3, r3, #16
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d06a      	beq.n	800cbce <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800caf8:	4b90      	ldr	r3, [pc, #576]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cafa:	691b      	ldr	r3, [r3, #16]
 800cafc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cb00:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cb02:	4b8e      	ldr	r3, [pc, #568]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cb04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb06:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800cb08:	69bb      	ldr	r3, [r7, #24]
 800cb0a:	2b08      	cmp	r3, #8
 800cb0c:	d007      	beq.n	800cb1e <HAL_RCC_OscConfig+0x286>
 800cb0e:	69bb      	ldr	r3, [r7, #24]
 800cb10:	2b18      	cmp	r3, #24
 800cb12:	d11b      	bne.n	800cb4c <HAL_RCC_OscConfig+0x2b4>
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	f003 0303 	and.w	r3, r3, #3
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	d116      	bne.n	800cb4c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cb1e:	4b87      	ldr	r3, [pc, #540]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d005      	beq.n	800cb36 <HAL_RCC_OscConfig+0x29e>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	69db      	ldr	r3, [r3, #28]
 800cb2e:	2b80      	cmp	r3, #128	@ 0x80
 800cb30:	d001      	beq.n	800cb36 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800cb32:	2301      	movs	r3, #1
 800cb34:	e282      	b.n	800d03c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cb36:	4b81      	ldr	r3, [pc, #516]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cb38:	68db      	ldr	r3, [r3, #12]
 800cb3a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6a1b      	ldr	r3, [r3, #32]
 800cb42:	061b      	lsls	r3, r3, #24
 800cb44:	497d      	ldr	r1, [pc, #500]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cb46:	4313      	orrs	r3, r2
 800cb48:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cb4a:	e040      	b.n	800cbce <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	69db      	ldr	r3, [r3, #28]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d023      	beq.n	800cb9c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800cb54:	4b79      	ldr	r3, [pc, #484]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4a78      	ldr	r2, [pc, #480]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cb5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb60:	f7f6 fc34 	bl	80033cc <HAL_GetTick>
 800cb64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cb66:	e008      	b.n	800cb7a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cb68:	f7f6 fc30 	bl	80033cc <HAL_GetTick>
 800cb6c:	4602      	mov	r2, r0
 800cb6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb70:	1ad3      	subs	r3, r2, r3
 800cb72:	2b02      	cmp	r3, #2
 800cb74:	d901      	bls.n	800cb7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800cb76:	2303      	movs	r3, #3
 800cb78:	e260      	b.n	800d03c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cb7a:	4b70      	ldr	r3, [pc, #448]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d0f0      	beq.n	800cb68 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cb86:	4b6d      	ldr	r3, [pc, #436]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cb88:	68db      	ldr	r3, [r3, #12]
 800cb8a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6a1b      	ldr	r3, [r3, #32]
 800cb92:	061b      	lsls	r3, r3, #24
 800cb94:	4969      	ldr	r1, [pc, #420]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cb96:	4313      	orrs	r3, r2
 800cb98:	60cb      	str	r3, [r1, #12]
 800cb9a:	e018      	b.n	800cbce <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800cb9c:	4b67      	ldr	r3, [pc, #412]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a66      	ldr	r2, [pc, #408]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cba2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cba8:	f7f6 fc10 	bl	80033cc <HAL_GetTick>
 800cbac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cbae:	e008      	b.n	800cbc2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cbb0:	f7f6 fc0c 	bl	80033cc <HAL_GetTick>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb8:	1ad3      	subs	r3, r2, r3
 800cbba:	2b02      	cmp	r3, #2
 800cbbc:	d901      	bls.n	800cbc2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800cbbe:	2303      	movs	r3, #3
 800cbc0:	e23c      	b.n	800d03c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cbc2:	4b5e      	ldr	r3, [pc, #376]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d1f0      	bne.n	800cbb0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f003 0308 	and.w	r3, r3, #8
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d036      	beq.n	800cc48 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	695b      	ldr	r3, [r3, #20]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d019      	beq.n	800cc16 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cbe2:	4b56      	ldr	r3, [pc, #344]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cbe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbe6:	4a55      	ldr	r2, [pc, #340]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cbe8:	f043 0301 	orr.w	r3, r3, #1
 800cbec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbee:	f7f6 fbed 	bl	80033cc <HAL_GetTick>
 800cbf2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cbf4:	e008      	b.n	800cc08 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cbf6:	f7f6 fbe9 	bl	80033cc <HAL_GetTick>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbfe:	1ad3      	subs	r3, r2, r3
 800cc00:	2b02      	cmp	r3, #2
 800cc02:	d901      	bls.n	800cc08 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800cc04:	2303      	movs	r3, #3
 800cc06:	e219      	b.n	800d03c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cc08:	4b4c      	ldr	r3, [pc, #304]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cc0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc0c:	f003 0302 	and.w	r3, r3, #2
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d0f0      	beq.n	800cbf6 <HAL_RCC_OscConfig+0x35e>
 800cc14:	e018      	b.n	800cc48 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cc16:	4b49      	ldr	r3, [pc, #292]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cc18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc1a:	4a48      	ldr	r2, [pc, #288]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cc1c:	f023 0301 	bic.w	r3, r3, #1
 800cc20:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc22:	f7f6 fbd3 	bl	80033cc <HAL_GetTick>
 800cc26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cc28:	e008      	b.n	800cc3c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cc2a:	f7f6 fbcf 	bl	80033cc <HAL_GetTick>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc32:	1ad3      	subs	r3, r2, r3
 800cc34:	2b02      	cmp	r3, #2
 800cc36:	d901      	bls.n	800cc3c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800cc38:	2303      	movs	r3, #3
 800cc3a:	e1ff      	b.n	800d03c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cc3c:	4b3f      	ldr	r3, [pc, #252]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cc3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc40:	f003 0302 	and.w	r3, r3, #2
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d1f0      	bne.n	800cc2a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f003 0320 	and.w	r3, r3, #32
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d036      	beq.n	800ccc2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	699b      	ldr	r3, [r3, #24]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d019      	beq.n	800cc90 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cc5c:	4b37      	ldr	r3, [pc, #220]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a36      	ldr	r2, [pc, #216]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cc62:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800cc66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cc68:	f7f6 fbb0 	bl	80033cc <HAL_GetTick>
 800cc6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cc6e:	e008      	b.n	800cc82 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cc70:	f7f6 fbac 	bl	80033cc <HAL_GetTick>
 800cc74:	4602      	mov	r2, r0
 800cc76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc78:	1ad3      	subs	r3, r2, r3
 800cc7a:	2b02      	cmp	r3, #2
 800cc7c:	d901      	bls.n	800cc82 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800cc7e:	2303      	movs	r3, #3
 800cc80:	e1dc      	b.n	800d03c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cc82:	4b2e      	ldr	r3, [pc, #184]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d0f0      	beq.n	800cc70 <HAL_RCC_OscConfig+0x3d8>
 800cc8e:	e018      	b.n	800ccc2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cc90:	4b2a      	ldr	r3, [pc, #168]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4a29      	ldr	r2, [pc, #164]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cc96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cc9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cc9c:	f7f6 fb96 	bl	80033cc <HAL_GetTick>
 800cca0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cca2:	e008      	b.n	800ccb6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cca4:	f7f6 fb92 	bl	80033cc <HAL_GetTick>
 800cca8:	4602      	mov	r2, r0
 800ccaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccac:	1ad3      	subs	r3, r2, r3
 800ccae:	2b02      	cmp	r3, #2
 800ccb0:	d901      	bls.n	800ccb6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800ccb2:	2303      	movs	r3, #3
 800ccb4:	e1c2      	b.n	800d03c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ccb6:	4b21      	ldr	r3, [pc, #132]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d1f0      	bne.n	800cca4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f003 0304 	and.w	r3, r3, #4
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	f000 8086 	beq.w	800cddc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ccd0:	4b1b      	ldr	r3, [pc, #108]	@ (800cd40 <HAL_RCC_OscConfig+0x4a8>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4a1a      	ldr	r2, [pc, #104]	@ (800cd40 <HAL_RCC_OscConfig+0x4a8>)
 800ccd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ccda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ccdc:	f7f6 fb76 	bl	80033cc <HAL_GetTick>
 800cce0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cce2:	e008      	b.n	800ccf6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cce4:	f7f6 fb72 	bl	80033cc <HAL_GetTick>
 800cce8:	4602      	mov	r2, r0
 800ccea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccec:	1ad3      	subs	r3, r2, r3
 800ccee:	2b64      	cmp	r3, #100	@ 0x64
 800ccf0:	d901      	bls.n	800ccf6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800ccf2:	2303      	movs	r3, #3
 800ccf4:	e1a2      	b.n	800d03c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ccf6:	4b12      	ldr	r3, [pc, #72]	@ (800cd40 <HAL_RCC_OscConfig+0x4a8>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d0f0      	beq.n	800cce4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	689b      	ldr	r3, [r3, #8]
 800cd06:	2b01      	cmp	r3, #1
 800cd08:	d106      	bne.n	800cd18 <HAL_RCC_OscConfig+0x480>
 800cd0a:	4b0c      	ldr	r3, [pc, #48]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cd0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd0e:	4a0b      	ldr	r2, [pc, #44]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cd10:	f043 0301 	orr.w	r3, r3, #1
 800cd14:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd16:	e032      	b.n	800cd7e <HAL_RCC_OscConfig+0x4e6>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	689b      	ldr	r3, [r3, #8]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d111      	bne.n	800cd44 <HAL_RCC_OscConfig+0x4ac>
 800cd20:	4b06      	ldr	r3, [pc, #24]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cd22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd24:	4a05      	ldr	r2, [pc, #20]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cd26:	f023 0301 	bic.w	r3, r3, #1
 800cd2a:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd2c:	4b03      	ldr	r3, [pc, #12]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cd2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd30:	4a02      	ldr	r2, [pc, #8]	@ (800cd3c <HAL_RCC_OscConfig+0x4a4>)
 800cd32:	f023 0304 	bic.w	r3, r3, #4
 800cd36:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd38:	e021      	b.n	800cd7e <HAL_RCC_OscConfig+0x4e6>
 800cd3a:	bf00      	nop
 800cd3c:	58024400 	.word	0x58024400
 800cd40:	58024800 	.word	0x58024800
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	689b      	ldr	r3, [r3, #8]
 800cd48:	2b05      	cmp	r3, #5
 800cd4a:	d10c      	bne.n	800cd66 <HAL_RCC_OscConfig+0x4ce>
 800cd4c:	4b83      	ldr	r3, [pc, #524]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800cd4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd50:	4a82      	ldr	r2, [pc, #520]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800cd52:	f043 0304 	orr.w	r3, r3, #4
 800cd56:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd58:	4b80      	ldr	r3, [pc, #512]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800cd5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd5c:	4a7f      	ldr	r2, [pc, #508]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800cd5e:	f043 0301 	orr.w	r3, r3, #1
 800cd62:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd64:	e00b      	b.n	800cd7e <HAL_RCC_OscConfig+0x4e6>
 800cd66:	4b7d      	ldr	r3, [pc, #500]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800cd68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd6a:	4a7c      	ldr	r2, [pc, #496]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800cd6c:	f023 0301 	bic.w	r3, r3, #1
 800cd70:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd72:	4b7a      	ldr	r3, [pc, #488]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800cd74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd76:	4a79      	ldr	r2, [pc, #484]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800cd78:	f023 0304 	bic.w	r3, r3, #4
 800cd7c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	689b      	ldr	r3, [r3, #8]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d015      	beq.n	800cdb2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd86:	f7f6 fb21 	bl	80033cc <HAL_GetTick>
 800cd8a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cd8c:	e00a      	b.n	800cda4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd8e:	f7f6 fb1d 	bl	80033cc <HAL_GetTick>
 800cd92:	4602      	mov	r2, r0
 800cd94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd96:	1ad3      	subs	r3, r2, r3
 800cd98:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d901      	bls.n	800cda4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800cda0:	2303      	movs	r3, #3
 800cda2:	e14b      	b.n	800d03c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cda4:	4b6d      	ldr	r3, [pc, #436]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800cda6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cda8:	f003 0302 	and.w	r3, r3, #2
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d0ee      	beq.n	800cd8e <HAL_RCC_OscConfig+0x4f6>
 800cdb0:	e014      	b.n	800cddc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cdb2:	f7f6 fb0b 	bl	80033cc <HAL_GetTick>
 800cdb6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cdb8:	e00a      	b.n	800cdd0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cdba:	f7f6 fb07 	bl	80033cc <HAL_GetTick>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	d901      	bls.n	800cdd0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800cdcc:	2303      	movs	r3, #3
 800cdce:	e135      	b.n	800d03c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cdd0:	4b62      	ldr	r3, [pc, #392]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800cdd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdd4:	f003 0302 	and.w	r3, r3, #2
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d1ee      	bne.n	800cdba <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	f000 812a 	beq.w	800d03a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800cde6:	4b5d      	ldr	r3, [pc, #372]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800cde8:	691b      	ldr	r3, [r3, #16]
 800cdea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cdee:	2b18      	cmp	r3, #24
 800cdf0:	f000 80ba 	beq.w	800cf68 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdf8:	2b02      	cmp	r3, #2
 800cdfa:	f040 8095 	bne.w	800cf28 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cdfe:	4b57      	ldr	r3, [pc, #348]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	4a56      	ldr	r2, [pc, #344]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800ce04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ce08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce0a:	f7f6 fadf 	bl	80033cc <HAL_GetTick>
 800ce0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ce10:	e008      	b.n	800ce24 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce12:	f7f6 fadb 	bl	80033cc <HAL_GetTick>
 800ce16:	4602      	mov	r2, r0
 800ce18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce1a:	1ad3      	subs	r3, r2, r3
 800ce1c:	2b02      	cmp	r3, #2
 800ce1e:	d901      	bls.n	800ce24 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800ce20:	2303      	movs	r3, #3
 800ce22:	e10b      	b.n	800d03c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ce24:	4b4d      	ldr	r3, [pc, #308]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d1f0      	bne.n	800ce12 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ce30:	4b4a      	ldr	r3, [pc, #296]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800ce32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ce34:	4b4a      	ldr	r3, [pc, #296]	@ (800cf60 <HAL_RCC_OscConfig+0x6c8>)
 800ce36:	4013      	ands	r3, r2
 800ce38:	687a      	ldr	r2, [r7, #4]
 800ce3a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ce40:	0112      	lsls	r2, r2, #4
 800ce42:	430a      	orrs	r2, r1
 800ce44:	4945      	ldr	r1, [pc, #276]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800ce46:	4313      	orrs	r3, r2
 800ce48:	628b      	str	r3, [r1, #40]	@ 0x28
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce4e:	3b01      	subs	r3, #1
 800ce50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce58:	3b01      	subs	r3, #1
 800ce5a:	025b      	lsls	r3, r3, #9
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	431a      	orrs	r2, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce64:	3b01      	subs	r3, #1
 800ce66:	041b      	lsls	r3, r3, #16
 800ce68:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ce6c:	431a      	orrs	r2, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce72:	3b01      	subs	r3, #1
 800ce74:	061b      	lsls	r3, r3, #24
 800ce76:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ce7a:	4938      	ldr	r1, [pc, #224]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800ce7c:	4313      	orrs	r3, r2
 800ce7e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ce80:	4b36      	ldr	r3, [pc, #216]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800ce82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce84:	4a35      	ldr	r2, [pc, #212]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800ce86:	f023 0301 	bic.w	r3, r3, #1
 800ce8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ce8c:	4b33      	ldr	r3, [pc, #204]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800ce8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ce90:	4b34      	ldr	r3, [pc, #208]	@ (800cf64 <HAL_RCC_OscConfig+0x6cc>)
 800ce92:	4013      	ands	r3, r2
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ce98:	00d2      	lsls	r2, r2, #3
 800ce9a:	4930      	ldr	r1, [pc, #192]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800ce9c:	4313      	orrs	r3, r2
 800ce9e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800cea0:	4b2e      	ldr	r3, [pc, #184]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800cea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cea4:	f023 020c 	bic.w	r2, r3, #12
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceac:	492b      	ldr	r1, [pc, #172]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ceb2:	4b2a      	ldr	r3, [pc, #168]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800ceb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceb6:	f023 0202 	bic.w	r2, r3, #2
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cebe:	4927      	ldr	r1, [pc, #156]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800cec0:	4313      	orrs	r3, r2
 800cec2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800cec4:	4b25      	ldr	r3, [pc, #148]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800cec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cec8:	4a24      	ldr	r2, [pc, #144]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800ceca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cece:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ced0:	4b22      	ldr	r3, [pc, #136]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800ced2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ced4:	4a21      	ldr	r2, [pc, #132]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800ced6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ceda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800cedc:	4b1f      	ldr	r3, [pc, #124]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800cede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cee0:	4a1e      	ldr	r2, [pc, #120]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800cee2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cee6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800cee8:	4b1c      	ldr	r3, [pc, #112]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800ceea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceec:	4a1b      	ldr	r2, [pc, #108]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800ceee:	f043 0301 	orr.w	r3, r3, #1
 800cef2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cef4:	4b19      	ldr	r3, [pc, #100]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4a18      	ldr	r2, [pc, #96]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800cefa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cefe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf00:	f7f6 fa64 	bl	80033cc <HAL_GetTick>
 800cf04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cf06:	e008      	b.n	800cf1a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf08:	f7f6 fa60 	bl	80033cc <HAL_GetTick>
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf10:	1ad3      	subs	r3, r2, r3
 800cf12:	2b02      	cmp	r3, #2
 800cf14:	d901      	bls.n	800cf1a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800cf16:	2303      	movs	r3, #3
 800cf18:	e090      	b.n	800d03c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cf1a:	4b10      	ldr	r3, [pc, #64]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d0f0      	beq.n	800cf08 <HAL_RCC_OscConfig+0x670>
 800cf26:	e088      	b.n	800d03a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf28:	4b0c      	ldr	r3, [pc, #48]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	4a0b      	ldr	r2, [pc, #44]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800cf2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cf32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf34:	f7f6 fa4a 	bl	80033cc <HAL_GetTick>
 800cf38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cf3a:	e008      	b.n	800cf4e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf3c:	f7f6 fa46 	bl	80033cc <HAL_GetTick>
 800cf40:	4602      	mov	r2, r0
 800cf42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf44:	1ad3      	subs	r3, r2, r3
 800cf46:	2b02      	cmp	r3, #2
 800cf48:	d901      	bls.n	800cf4e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800cf4a:	2303      	movs	r3, #3
 800cf4c:	e076      	b.n	800d03c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cf4e:	4b03      	ldr	r3, [pc, #12]	@ (800cf5c <HAL_RCC_OscConfig+0x6c4>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d1f0      	bne.n	800cf3c <HAL_RCC_OscConfig+0x6a4>
 800cf5a:	e06e      	b.n	800d03a <HAL_RCC_OscConfig+0x7a2>
 800cf5c:	58024400 	.word	0x58024400
 800cf60:	fffffc0c 	.word	0xfffffc0c
 800cf64:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800cf68:	4b36      	ldr	r3, [pc, #216]	@ (800d044 <HAL_RCC_OscConfig+0x7ac>)
 800cf6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf6c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800cf6e:	4b35      	ldr	r3, [pc, #212]	@ (800d044 <HAL_RCC_OscConfig+0x7ac>)
 800cf70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf72:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d031      	beq.n	800cfe0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	f003 0203 	and.w	r2, r3, #3
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d12a      	bne.n	800cfe0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	091b      	lsrs	r3, r3, #4
 800cf8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d122      	bne.n	800cfe0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfa4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d11a      	bne.n	800cfe0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	0a5b      	lsrs	r3, r3, #9
 800cfae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfb6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d111      	bne.n	800cfe0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	0c1b      	lsrs	r3, r3, #16
 800cfc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d108      	bne.n	800cfe0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	0e1b      	lsrs	r3, r3, #24
 800cfd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfda:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d001      	beq.n	800cfe4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	e02b      	b.n	800d03c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800cfe4:	4b17      	ldr	r3, [pc, #92]	@ (800d044 <HAL_RCC_OscConfig+0x7ac>)
 800cfe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfe8:	08db      	lsrs	r3, r3, #3
 800cfea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cfee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cff4:	693a      	ldr	r2, [r7, #16]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d01f      	beq.n	800d03a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800cffa:	4b12      	ldr	r3, [pc, #72]	@ (800d044 <HAL_RCC_OscConfig+0x7ac>)
 800cffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cffe:	4a11      	ldr	r2, [pc, #68]	@ (800d044 <HAL_RCC_OscConfig+0x7ac>)
 800d000:	f023 0301 	bic.w	r3, r3, #1
 800d004:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d006:	f7f6 f9e1 	bl	80033cc <HAL_GetTick>
 800d00a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d00c:	bf00      	nop
 800d00e:	f7f6 f9dd 	bl	80033cc <HAL_GetTick>
 800d012:	4602      	mov	r2, r0
 800d014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d016:	4293      	cmp	r3, r2
 800d018:	d0f9      	beq.n	800d00e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d01a:	4b0a      	ldr	r3, [pc, #40]	@ (800d044 <HAL_RCC_OscConfig+0x7ac>)
 800d01c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d01e:	4b0a      	ldr	r3, [pc, #40]	@ (800d048 <HAL_RCC_OscConfig+0x7b0>)
 800d020:	4013      	ands	r3, r2
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d026:	00d2      	lsls	r2, r2, #3
 800d028:	4906      	ldr	r1, [pc, #24]	@ (800d044 <HAL_RCC_OscConfig+0x7ac>)
 800d02a:	4313      	orrs	r3, r2
 800d02c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d02e:	4b05      	ldr	r3, [pc, #20]	@ (800d044 <HAL_RCC_OscConfig+0x7ac>)
 800d030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d032:	4a04      	ldr	r2, [pc, #16]	@ (800d044 <HAL_RCC_OscConfig+0x7ac>)
 800d034:	f043 0301 	orr.w	r3, r3, #1
 800d038:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d03a:	2300      	movs	r3, #0
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3730      	adds	r7, #48	@ 0x30
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}
 800d044:	58024400 	.word	0x58024400
 800d048:	ffff0007 	.word	0xffff0007

0800d04c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b086      	sub	sp, #24
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
 800d054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d101      	bne.n	800d060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d05c:	2301      	movs	r3, #1
 800d05e:	e19c      	b.n	800d39a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d060:	4b8a      	ldr	r3, [pc, #552]	@ (800d28c <HAL_RCC_ClockConfig+0x240>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f003 030f 	and.w	r3, r3, #15
 800d068:	683a      	ldr	r2, [r7, #0]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d910      	bls.n	800d090 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d06e:	4b87      	ldr	r3, [pc, #540]	@ (800d28c <HAL_RCC_ClockConfig+0x240>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	f023 020f 	bic.w	r2, r3, #15
 800d076:	4985      	ldr	r1, [pc, #532]	@ (800d28c <HAL_RCC_ClockConfig+0x240>)
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	4313      	orrs	r3, r2
 800d07c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d07e:	4b83      	ldr	r3, [pc, #524]	@ (800d28c <HAL_RCC_ClockConfig+0x240>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	f003 030f 	and.w	r3, r3, #15
 800d086:	683a      	ldr	r2, [r7, #0]
 800d088:	429a      	cmp	r2, r3
 800d08a:	d001      	beq.n	800d090 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d08c:	2301      	movs	r3, #1
 800d08e:	e184      	b.n	800d39a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f003 0304 	and.w	r3, r3, #4
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d010      	beq.n	800d0be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	691a      	ldr	r2, [r3, #16]
 800d0a0:	4b7b      	ldr	r3, [pc, #492]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d0a2:	699b      	ldr	r3, [r3, #24]
 800d0a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d908      	bls.n	800d0be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d0ac:	4b78      	ldr	r3, [pc, #480]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d0ae:	699b      	ldr	r3, [r3, #24]
 800d0b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	691b      	ldr	r3, [r3, #16]
 800d0b8:	4975      	ldr	r1, [pc, #468]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d0ba:	4313      	orrs	r3, r2
 800d0bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f003 0308 	and.w	r3, r3, #8
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d010      	beq.n	800d0ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	695a      	ldr	r2, [r3, #20]
 800d0ce:	4b70      	ldr	r3, [pc, #448]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d0d0:	69db      	ldr	r3, [r3, #28]
 800d0d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d908      	bls.n	800d0ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d0da:	4b6d      	ldr	r3, [pc, #436]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d0dc:	69db      	ldr	r3, [r3, #28]
 800d0de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	695b      	ldr	r3, [r3, #20]
 800d0e6:	496a      	ldr	r1, [pc, #424]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f003 0310 	and.w	r3, r3, #16
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d010      	beq.n	800d11a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	699a      	ldr	r2, [r3, #24]
 800d0fc:	4b64      	ldr	r3, [pc, #400]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d0fe:	69db      	ldr	r3, [r3, #28]
 800d100:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d104:	429a      	cmp	r2, r3
 800d106:	d908      	bls.n	800d11a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d108:	4b61      	ldr	r3, [pc, #388]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d10a:	69db      	ldr	r3, [r3, #28]
 800d10c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	699b      	ldr	r3, [r3, #24]
 800d114:	495e      	ldr	r1, [pc, #376]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d116:	4313      	orrs	r3, r2
 800d118:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f003 0320 	and.w	r3, r3, #32
 800d122:	2b00      	cmp	r3, #0
 800d124:	d010      	beq.n	800d148 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	69da      	ldr	r2, [r3, #28]
 800d12a:	4b59      	ldr	r3, [pc, #356]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d12c:	6a1b      	ldr	r3, [r3, #32]
 800d12e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d132:	429a      	cmp	r2, r3
 800d134:	d908      	bls.n	800d148 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d136:	4b56      	ldr	r3, [pc, #344]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d138:	6a1b      	ldr	r3, [r3, #32]
 800d13a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	69db      	ldr	r3, [r3, #28]
 800d142:	4953      	ldr	r1, [pc, #332]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d144:	4313      	orrs	r3, r2
 800d146:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f003 0302 	and.w	r3, r3, #2
 800d150:	2b00      	cmp	r3, #0
 800d152:	d010      	beq.n	800d176 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	68da      	ldr	r2, [r3, #12]
 800d158:	4b4d      	ldr	r3, [pc, #308]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d15a:	699b      	ldr	r3, [r3, #24]
 800d15c:	f003 030f 	and.w	r3, r3, #15
 800d160:	429a      	cmp	r2, r3
 800d162:	d908      	bls.n	800d176 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d164:	4b4a      	ldr	r3, [pc, #296]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d166:	699b      	ldr	r3, [r3, #24]
 800d168:	f023 020f 	bic.w	r2, r3, #15
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	4947      	ldr	r1, [pc, #284]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d172:	4313      	orrs	r3, r2
 800d174:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f003 0301 	and.w	r3, r3, #1
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d055      	beq.n	800d22e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d182:	4b43      	ldr	r3, [pc, #268]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d184:	699b      	ldr	r3, [r3, #24]
 800d186:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	689b      	ldr	r3, [r3, #8]
 800d18e:	4940      	ldr	r1, [pc, #256]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d190:	4313      	orrs	r3, r2
 800d192:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	2b02      	cmp	r3, #2
 800d19a:	d107      	bne.n	800d1ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d19c:	4b3c      	ldr	r3, [pc, #240]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d121      	bne.n	800d1ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e0f6      	b.n	800d39a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	2b03      	cmp	r3, #3
 800d1b2:	d107      	bne.n	800d1c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d1b4:	4b36      	ldr	r3, [pc, #216]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d115      	bne.n	800d1ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e0ea      	b.n	800d39a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d107      	bne.n	800d1dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d1cc:	4b30      	ldr	r3, [pc, #192]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d109      	bne.n	800d1ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	e0de      	b.n	800d39a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d1dc:	4b2c      	ldr	r3, [pc, #176]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f003 0304 	and.w	r3, r3, #4
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d101      	bne.n	800d1ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	e0d6      	b.n	800d39a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d1ec:	4b28      	ldr	r3, [pc, #160]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d1ee:	691b      	ldr	r3, [r3, #16]
 800d1f0:	f023 0207 	bic.w	r2, r3, #7
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	685b      	ldr	r3, [r3, #4]
 800d1f8:	4925      	ldr	r1, [pc, #148]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d1fa:	4313      	orrs	r3, r2
 800d1fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1fe:	f7f6 f8e5 	bl	80033cc <HAL_GetTick>
 800d202:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d204:	e00a      	b.n	800d21c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d206:	f7f6 f8e1 	bl	80033cc <HAL_GetTick>
 800d20a:	4602      	mov	r2, r0
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	1ad3      	subs	r3, r2, r3
 800d210:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d214:	4293      	cmp	r3, r2
 800d216:	d901      	bls.n	800d21c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d218:	2303      	movs	r3, #3
 800d21a:	e0be      	b.n	800d39a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d21c:	4b1c      	ldr	r3, [pc, #112]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d21e:	691b      	ldr	r3, [r3, #16]
 800d220:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	00db      	lsls	r3, r3, #3
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d1eb      	bne.n	800d206 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f003 0302 	and.w	r3, r3, #2
 800d236:	2b00      	cmp	r3, #0
 800d238:	d010      	beq.n	800d25c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	68da      	ldr	r2, [r3, #12]
 800d23e:	4b14      	ldr	r3, [pc, #80]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d240:	699b      	ldr	r3, [r3, #24]
 800d242:	f003 030f 	and.w	r3, r3, #15
 800d246:	429a      	cmp	r2, r3
 800d248:	d208      	bcs.n	800d25c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d24a:	4b11      	ldr	r3, [pc, #68]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d24c:	699b      	ldr	r3, [r3, #24]
 800d24e:	f023 020f 	bic.w	r2, r3, #15
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	68db      	ldr	r3, [r3, #12]
 800d256:	490e      	ldr	r1, [pc, #56]	@ (800d290 <HAL_RCC_ClockConfig+0x244>)
 800d258:	4313      	orrs	r3, r2
 800d25a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d25c:	4b0b      	ldr	r3, [pc, #44]	@ (800d28c <HAL_RCC_ClockConfig+0x240>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f003 030f 	and.w	r3, r3, #15
 800d264:	683a      	ldr	r2, [r7, #0]
 800d266:	429a      	cmp	r2, r3
 800d268:	d214      	bcs.n	800d294 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d26a:	4b08      	ldr	r3, [pc, #32]	@ (800d28c <HAL_RCC_ClockConfig+0x240>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f023 020f 	bic.w	r2, r3, #15
 800d272:	4906      	ldr	r1, [pc, #24]	@ (800d28c <HAL_RCC_ClockConfig+0x240>)
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	4313      	orrs	r3, r2
 800d278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d27a:	4b04      	ldr	r3, [pc, #16]	@ (800d28c <HAL_RCC_ClockConfig+0x240>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	f003 030f 	and.w	r3, r3, #15
 800d282:	683a      	ldr	r2, [r7, #0]
 800d284:	429a      	cmp	r2, r3
 800d286:	d005      	beq.n	800d294 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d288:	2301      	movs	r3, #1
 800d28a:	e086      	b.n	800d39a <HAL_RCC_ClockConfig+0x34e>
 800d28c:	52002000 	.word	0x52002000
 800d290:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f003 0304 	and.w	r3, r3, #4
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d010      	beq.n	800d2c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	691a      	ldr	r2, [r3, #16]
 800d2a4:	4b3f      	ldr	r3, [pc, #252]	@ (800d3a4 <HAL_RCC_ClockConfig+0x358>)
 800d2a6:	699b      	ldr	r3, [r3, #24]
 800d2a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d208      	bcs.n	800d2c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d2b0:	4b3c      	ldr	r3, [pc, #240]	@ (800d3a4 <HAL_RCC_ClockConfig+0x358>)
 800d2b2:	699b      	ldr	r3, [r3, #24]
 800d2b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	691b      	ldr	r3, [r3, #16]
 800d2bc:	4939      	ldr	r1, [pc, #228]	@ (800d3a4 <HAL_RCC_ClockConfig+0x358>)
 800d2be:	4313      	orrs	r3, r2
 800d2c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f003 0308 	and.w	r3, r3, #8
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d010      	beq.n	800d2f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	695a      	ldr	r2, [r3, #20]
 800d2d2:	4b34      	ldr	r3, [pc, #208]	@ (800d3a4 <HAL_RCC_ClockConfig+0x358>)
 800d2d4:	69db      	ldr	r3, [r3, #28]
 800d2d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d208      	bcs.n	800d2f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d2de:	4b31      	ldr	r3, [pc, #196]	@ (800d3a4 <HAL_RCC_ClockConfig+0x358>)
 800d2e0:	69db      	ldr	r3, [r3, #28]
 800d2e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	695b      	ldr	r3, [r3, #20]
 800d2ea:	492e      	ldr	r1, [pc, #184]	@ (800d3a4 <HAL_RCC_ClockConfig+0x358>)
 800d2ec:	4313      	orrs	r3, r2
 800d2ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f003 0310 	and.w	r3, r3, #16
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d010      	beq.n	800d31e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	699a      	ldr	r2, [r3, #24]
 800d300:	4b28      	ldr	r3, [pc, #160]	@ (800d3a4 <HAL_RCC_ClockConfig+0x358>)
 800d302:	69db      	ldr	r3, [r3, #28]
 800d304:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d308:	429a      	cmp	r2, r3
 800d30a:	d208      	bcs.n	800d31e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d30c:	4b25      	ldr	r3, [pc, #148]	@ (800d3a4 <HAL_RCC_ClockConfig+0x358>)
 800d30e:	69db      	ldr	r3, [r3, #28]
 800d310:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	699b      	ldr	r3, [r3, #24]
 800d318:	4922      	ldr	r1, [pc, #136]	@ (800d3a4 <HAL_RCC_ClockConfig+0x358>)
 800d31a:	4313      	orrs	r3, r2
 800d31c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f003 0320 	and.w	r3, r3, #32
 800d326:	2b00      	cmp	r3, #0
 800d328:	d010      	beq.n	800d34c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	69da      	ldr	r2, [r3, #28]
 800d32e:	4b1d      	ldr	r3, [pc, #116]	@ (800d3a4 <HAL_RCC_ClockConfig+0x358>)
 800d330:	6a1b      	ldr	r3, [r3, #32]
 800d332:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800d336:	429a      	cmp	r2, r3
 800d338:	d208      	bcs.n	800d34c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d33a:	4b1a      	ldr	r3, [pc, #104]	@ (800d3a4 <HAL_RCC_ClockConfig+0x358>)
 800d33c:	6a1b      	ldr	r3, [r3, #32]
 800d33e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	69db      	ldr	r3, [r3, #28]
 800d346:	4917      	ldr	r1, [pc, #92]	@ (800d3a4 <HAL_RCC_ClockConfig+0x358>)
 800d348:	4313      	orrs	r3, r2
 800d34a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d34c:	f000 f834 	bl	800d3b8 <HAL_RCC_GetSysClockFreq>
 800d350:	4602      	mov	r2, r0
 800d352:	4b14      	ldr	r3, [pc, #80]	@ (800d3a4 <HAL_RCC_ClockConfig+0x358>)
 800d354:	699b      	ldr	r3, [r3, #24]
 800d356:	0a1b      	lsrs	r3, r3, #8
 800d358:	f003 030f 	and.w	r3, r3, #15
 800d35c:	4912      	ldr	r1, [pc, #72]	@ (800d3a8 <HAL_RCC_ClockConfig+0x35c>)
 800d35e:	5ccb      	ldrb	r3, [r1, r3]
 800d360:	f003 031f 	and.w	r3, r3, #31
 800d364:	fa22 f303 	lsr.w	r3, r2, r3
 800d368:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d36a:	4b0e      	ldr	r3, [pc, #56]	@ (800d3a4 <HAL_RCC_ClockConfig+0x358>)
 800d36c:	699b      	ldr	r3, [r3, #24]
 800d36e:	f003 030f 	and.w	r3, r3, #15
 800d372:	4a0d      	ldr	r2, [pc, #52]	@ (800d3a8 <HAL_RCC_ClockConfig+0x35c>)
 800d374:	5cd3      	ldrb	r3, [r2, r3]
 800d376:	f003 031f 	and.w	r3, r3, #31
 800d37a:	693a      	ldr	r2, [r7, #16]
 800d37c:	fa22 f303 	lsr.w	r3, r2, r3
 800d380:	4a0a      	ldr	r2, [pc, #40]	@ (800d3ac <HAL_RCC_ClockConfig+0x360>)
 800d382:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d384:	4a0a      	ldr	r2, [pc, #40]	@ (800d3b0 <HAL_RCC_ClockConfig+0x364>)
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800d38a:	4b0a      	ldr	r3, [pc, #40]	@ (800d3b4 <HAL_RCC_ClockConfig+0x368>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4618      	mov	r0, r3
 800d390:	f7f5 ffd2 	bl	8003338 <HAL_InitTick>
 800d394:	4603      	mov	r3, r0
 800d396:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d398:	7bfb      	ldrb	r3, [r7, #15]
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3718      	adds	r7, #24
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}
 800d3a2:	bf00      	nop
 800d3a4:	58024400 	.word	0x58024400
 800d3a8:	0801a4b4 	.word	0x0801a4b4
 800d3ac:	24000004 	.word	0x24000004
 800d3b0:	24000000 	.word	0x24000000
 800d3b4:	24000008 	.word	0x24000008

0800d3b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b089      	sub	sp, #36	@ 0x24
 800d3bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d3be:	4bb3      	ldr	r3, [pc, #716]	@ (800d68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d3c0:	691b      	ldr	r3, [r3, #16]
 800d3c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d3c6:	2b18      	cmp	r3, #24
 800d3c8:	f200 8155 	bhi.w	800d676 <HAL_RCC_GetSysClockFreq+0x2be>
 800d3cc:	a201      	add	r2, pc, #4	@ (adr r2, 800d3d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800d3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3d2:	bf00      	nop
 800d3d4:	0800d439 	.word	0x0800d439
 800d3d8:	0800d677 	.word	0x0800d677
 800d3dc:	0800d677 	.word	0x0800d677
 800d3e0:	0800d677 	.word	0x0800d677
 800d3e4:	0800d677 	.word	0x0800d677
 800d3e8:	0800d677 	.word	0x0800d677
 800d3ec:	0800d677 	.word	0x0800d677
 800d3f0:	0800d677 	.word	0x0800d677
 800d3f4:	0800d45f 	.word	0x0800d45f
 800d3f8:	0800d677 	.word	0x0800d677
 800d3fc:	0800d677 	.word	0x0800d677
 800d400:	0800d677 	.word	0x0800d677
 800d404:	0800d677 	.word	0x0800d677
 800d408:	0800d677 	.word	0x0800d677
 800d40c:	0800d677 	.word	0x0800d677
 800d410:	0800d677 	.word	0x0800d677
 800d414:	0800d465 	.word	0x0800d465
 800d418:	0800d677 	.word	0x0800d677
 800d41c:	0800d677 	.word	0x0800d677
 800d420:	0800d677 	.word	0x0800d677
 800d424:	0800d677 	.word	0x0800d677
 800d428:	0800d677 	.word	0x0800d677
 800d42c:	0800d677 	.word	0x0800d677
 800d430:	0800d677 	.word	0x0800d677
 800d434:	0800d46b 	.word	0x0800d46b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d438:	4b94      	ldr	r3, [pc, #592]	@ (800d68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f003 0320 	and.w	r3, r3, #32
 800d440:	2b00      	cmp	r3, #0
 800d442:	d009      	beq.n	800d458 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d444:	4b91      	ldr	r3, [pc, #580]	@ (800d68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	08db      	lsrs	r3, r3, #3
 800d44a:	f003 0303 	and.w	r3, r3, #3
 800d44e:	4a90      	ldr	r2, [pc, #576]	@ (800d690 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d450:	fa22 f303 	lsr.w	r3, r2, r3
 800d454:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800d456:	e111      	b.n	800d67c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d458:	4b8d      	ldr	r3, [pc, #564]	@ (800d690 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d45a:	61bb      	str	r3, [r7, #24]
      break;
 800d45c:	e10e      	b.n	800d67c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800d45e:	4b8d      	ldr	r3, [pc, #564]	@ (800d694 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d460:	61bb      	str	r3, [r7, #24]
      break;
 800d462:	e10b      	b.n	800d67c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800d464:	4b8c      	ldr	r3, [pc, #560]	@ (800d698 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d466:	61bb      	str	r3, [r7, #24]
      break;
 800d468:	e108      	b.n	800d67c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d46a:	4b88      	ldr	r3, [pc, #544]	@ (800d68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d46c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d46e:	f003 0303 	and.w	r3, r3, #3
 800d472:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d474:	4b85      	ldr	r3, [pc, #532]	@ (800d68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d478:	091b      	lsrs	r3, r3, #4
 800d47a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d47e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d480:	4b82      	ldr	r3, [pc, #520]	@ (800d68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d484:	f003 0301 	and.w	r3, r3, #1
 800d488:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d48a:	4b80      	ldr	r3, [pc, #512]	@ (800d68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d48c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d48e:	08db      	lsrs	r3, r3, #3
 800d490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d494:	68fa      	ldr	r2, [r7, #12]
 800d496:	fb02 f303 	mul.w	r3, r2, r3
 800d49a:	ee07 3a90 	vmov	s15, r3
 800d49e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	f000 80e1 	beq.w	800d670 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	2b02      	cmp	r3, #2
 800d4b2:	f000 8083 	beq.w	800d5bc <HAL_RCC_GetSysClockFreq+0x204>
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	2b02      	cmp	r3, #2
 800d4ba:	f200 80a1 	bhi.w	800d600 <HAL_RCC_GetSysClockFreq+0x248>
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d003      	beq.n	800d4cc <HAL_RCC_GetSysClockFreq+0x114>
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	2b01      	cmp	r3, #1
 800d4c8:	d056      	beq.n	800d578 <HAL_RCC_GetSysClockFreq+0x1c0>
 800d4ca:	e099      	b.n	800d600 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4cc:	4b6f      	ldr	r3, [pc, #444]	@ (800d68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f003 0320 	and.w	r3, r3, #32
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d02d      	beq.n	800d534 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d4d8:	4b6c      	ldr	r3, [pc, #432]	@ (800d68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	08db      	lsrs	r3, r3, #3
 800d4de:	f003 0303 	and.w	r3, r3, #3
 800d4e2:	4a6b      	ldr	r2, [pc, #428]	@ (800d690 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d4e4:	fa22 f303 	lsr.w	r3, r2, r3
 800d4e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	ee07 3a90 	vmov	s15, r3
 800d4f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	ee07 3a90 	vmov	s15, r3
 800d4fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d502:	4b62      	ldr	r3, [pc, #392]	@ (800d68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d50a:	ee07 3a90 	vmov	s15, r3
 800d50e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d512:	ed97 6a02 	vldr	s12, [r7, #8]
 800d516:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800d69c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d51a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d51e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d52a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d52e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800d532:	e087      	b.n	800d644 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	ee07 3a90 	vmov	s15, r3
 800d53a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d53e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800d6a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d546:	4b51      	ldr	r3, [pc, #324]	@ (800d68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d54a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d54e:	ee07 3a90 	vmov	s15, r3
 800d552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d556:	ed97 6a02 	vldr	s12, [r7, #8]
 800d55a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800d69c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d55e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d566:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d56a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d56e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d572:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d576:	e065      	b.n	800d644 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	ee07 3a90 	vmov	s15, r3
 800d57e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d582:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800d6a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d58a:	4b40      	ldr	r3, [pc, #256]	@ (800d68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d58c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d58e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d592:	ee07 3a90 	vmov	s15, r3
 800d596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d59a:	ed97 6a02 	vldr	s12, [r7, #8]
 800d59e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d69c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d5a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d5ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d5ba:	e043      	b.n	800d644 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	ee07 3a90 	vmov	s15, r3
 800d5c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5c6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800d6a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800d5ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5ce:	4b2f      	ldr	r3, [pc, #188]	@ (800d68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5d6:	ee07 3a90 	vmov	s15, r3
 800d5da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5de:	ed97 6a02 	vldr	s12, [r7, #8]
 800d5e2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800d69c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d5e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d5f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d5fe:	e021      	b.n	800d644 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	ee07 3a90 	vmov	s15, r3
 800d606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d60a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800d6a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d60e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d612:	4b1e      	ldr	r3, [pc, #120]	@ (800d68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d61a:	ee07 3a90 	vmov	s15, r3
 800d61e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d622:	ed97 6a02 	vldr	s12, [r7, #8]
 800d626:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800d69c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d62a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d62e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d63a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d63e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d642:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d644:	4b11      	ldr	r3, [pc, #68]	@ (800d68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d648:	0a5b      	lsrs	r3, r3, #9
 800d64a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d64e:	3301      	adds	r3, #1
 800d650:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	ee07 3a90 	vmov	s15, r3
 800d658:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d65c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d668:	ee17 3a90 	vmov	r3, s15
 800d66c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800d66e:	e005      	b.n	800d67c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800d670:	2300      	movs	r3, #0
 800d672:	61bb      	str	r3, [r7, #24]
      break;
 800d674:	e002      	b.n	800d67c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800d676:	4b07      	ldr	r3, [pc, #28]	@ (800d694 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d678:	61bb      	str	r3, [r7, #24]
      break;
 800d67a:	bf00      	nop
  }

  return sysclockfreq;
 800d67c:	69bb      	ldr	r3, [r7, #24]
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3724      	adds	r7, #36	@ 0x24
 800d682:	46bd      	mov	sp, r7
 800d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d688:	4770      	bx	lr
 800d68a:	bf00      	nop
 800d68c:	58024400 	.word	0x58024400
 800d690:	03d09000 	.word	0x03d09000
 800d694:	003d0900 	.word	0x003d0900
 800d698:	017d7840 	.word	0x017d7840
 800d69c:	46000000 	.word	0x46000000
 800d6a0:	4c742400 	.word	0x4c742400
 800d6a4:	4a742400 	.word	0x4a742400
 800d6a8:	4bbebc20 	.word	0x4bbebc20

0800d6ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d6b2:	f7ff fe81 	bl	800d3b8 <HAL_RCC_GetSysClockFreq>
 800d6b6:	4602      	mov	r2, r0
 800d6b8:	4b10      	ldr	r3, [pc, #64]	@ (800d6fc <HAL_RCC_GetHCLKFreq+0x50>)
 800d6ba:	699b      	ldr	r3, [r3, #24]
 800d6bc:	0a1b      	lsrs	r3, r3, #8
 800d6be:	f003 030f 	and.w	r3, r3, #15
 800d6c2:	490f      	ldr	r1, [pc, #60]	@ (800d700 <HAL_RCC_GetHCLKFreq+0x54>)
 800d6c4:	5ccb      	ldrb	r3, [r1, r3]
 800d6c6:	f003 031f 	and.w	r3, r3, #31
 800d6ca:	fa22 f303 	lsr.w	r3, r2, r3
 800d6ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d6d0:	4b0a      	ldr	r3, [pc, #40]	@ (800d6fc <HAL_RCC_GetHCLKFreq+0x50>)
 800d6d2:	699b      	ldr	r3, [r3, #24]
 800d6d4:	f003 030f 	and.w	r3, r3, #15
 800d6d8:	4a09      	ldr	r2, [pc, #36]	@ (800d700 <HAL_RCC_GetHCLKFreq+0x54>)
 800d6da:	5cd3      	ldrb	r3, [r2, r3]
 800d6dc:	f003 031f 	and.w	r3, r3, #31
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	fa22 f303 	lsr.w	r3, r2, r3
 800d6e6:	4a07      	ldr	r2, [pc, #28]	@ (800d704 <HAL_RCC_GetHCLKFreq+0x58>)
 800d6e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d6ea:	4a07      	ldr	r2, [pc, #28]	@ (800d708 <HAL_RCC_GetHCLKFreq+0x5c>)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d6f0:	4b04      	ldr	r3, [pc, #16]	@ (800d704 <HAL_RCC_GetHCLKFreq+0x58>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3708      	adds	r7, #8
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	58024400 	.word	0x58024400
 800d700:	0801a4b4 	.word	0x0801a4b4
 800d704:	24000004 	.word	0x24000004
 800d708:	24000000 	.word	0x24000000

0800d70c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800d710:	f7ff ffcc 	bl	800d6ac <HAL_RCC_GetHCLKFreq>
 800d714:	4602      	mov	r2, r0
 800d716:	4b06      	ldr	r3, [pc, #24]	@ (800d730 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d718:	69db      	ldr	r3, [r3, #28]
 800d71a:	091b      	lsrs	r3, r3, #4
 800d71c:	f003 0307 	and.w	r3, r3, #7
 800d720:	4904      	ldr	r1, [pc, #16]	@ (800d734 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d722:	5ccb      	ldrb	r3, [r1, r3]
 800d724:	f003 031f 	and.w	r3, r3, #31
 800d728:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	58024400 	.word	0x58024400
 800d734:	0801a4b4 	.word	0x0801a4b4

0800d738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800d73c:	f7ff ffb6 	bl	800d6ac <HAL_RCC_GetHCLKFreq>
 800d740:	4602      	mov	r2, r0
 800d742:	4b06      	ldr	r3, [pc, #24]	@ (800d75c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d744:	69db      	ldr	r3, [r3, #28]
 800d746:	0a1b      	lsrs	r3, r3, #8
 800d748:	f003 0307 	and.w	r3, r3, #7
 800d74c:	4904      	ldr	r1, [pc, #16]	@ (800d760 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d74e:	5ccb      	ldrb	r3, [r1, r3]
 800d750:	f003 031f 	and.w	r3, r3, #31
 800d754:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800d758:	4618      	mov	r0, r3
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	58024400 	.word	0x58024400
 800d760:	0801a4b4 	.word	0x0801a4b4

0800d764 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d768:	b0c6      	sub	sp, #280	@ 0x118
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d770:	2300      	movs	r3, #0
 800d772:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d776:	2300      	movs	r3, #0
 800d778:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d77c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d784:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800d788:	2500      	movs	r5, #0
 800d78a:	ea54 0305 	orrs.w	r3, r4, r5
 800d78e:	d049      	beq.n	800d824 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800d790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d794:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d796:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d79a:	d02f      	beq.n	800d7fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d79c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d7a0:	d828      	bhi.n	800d7f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d7a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d7a6:	d01a      	beq.n	800d7de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d7a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d7ac:	d822      	bhi.n	800d7f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d003      	beq.n	800d7ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d7b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d7b6:	d007      	beq.n	800d7c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d7b8:	e01c      	b.n	800d7f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d7ba:	4bab      	ldr	r3, [pc, #684]	@ (800da68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d7bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7be:	4aaa      	ldr	r2, [pc, #680]	@ (800da68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d7c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d7c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d7c6:	e01a      	b.n	800d7fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d7c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7cc:	3308      	adds	r3, #8
 800d7ce:	2102      	movs	r1, #2
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f002 fa49 	bl	800fc68 <RCCEx_PLL2_Config>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d7dc:	e00f      	b.n	800d7fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7e2:	3328      	adds	r3, #40	@ 0x28
 800d7e4:	2102      	movs	r1, #2
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f002 faf0 	bl	800fdcc <RCCEx_PLL3_Config>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d7f2:	e004      	b.n	800d7fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d7fa:	e000      	b.n	800d7fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800d7fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d7fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d802:	2b00      	cmp	r3, #0
 800d804:	d10a      	bne.n	800d81c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d806:	4b98      	ldr	r3, [pc, #608]	@ (800da68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d80a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d812:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d814:	4a94      	ldr	r2, [pc, #592]	@ (800da68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d816:	430b      	orrs	r3, r1
 800d818:	6513      	str	r3, [r2, #80]	@ 0x50
 800d81a:	e003      	b.n	800d824 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d81c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d820:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d82c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800d830:	f04f 0900 	mov.w	r9, #0
 800d834:	ea58 0309 	orrs.w	r3, r8, r9
 800d838:	d047      	beq.n	800d8ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800d83a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d83e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d840:	2b04      	cmp	r3, #4
 800d842:	d82a      	bhi.n	800d89a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d844:	a201      	add	r2, pc, #4	@ (adr r2, 800d84c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800d846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d84a:	bf00      	nop
 800d84c:	0800d861 	.word	0x0800d861
 800d850:	0800d86f 	.word	0x0800d86f
 800d854:	0800d885 	.word	0x0800d885
 800d858:	0800d8a3 	.word	0x0800d8a3
 800d85c:	0800d8a3 	.word	0x0800d8a3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d860:	4b81      	ldr	r3, [pc, #516]	@ (800da68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d864:	4a80      	ldr	r2, [pc, #512]	@ (800da68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d866:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d86a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d86c:	e01a      	b.n	800d8a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d86e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d872:	3308      	adds	r3, #8
 800d874:	2100      	movs	r1, #0
 800d876:	4618      	mov	r0, r3
 800d878:	f002 f9f6 	bl	800fc68 <RCCEx_PLL2_Config>
 800d87c:	4603      	mov	r3, r0
 800d87e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d882:	e00f      	b.n	800d8a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d888:	3328      	adds	r3, #40	@ 0x28
 800d88a:	2100      	movs	r1, #0
 800d88c:	4618      	mov	r0, r3
 800d88e:	f002 fa9d 	bl	800fdcc <RCCEx_PLL3_Config>
 800d892:	4603      	mov	r3, r0
 800d894:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d898:	e004      	b.n	800d8a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d89a:	2301      	movs	r3, #1
 800d89c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d8a0:	e000      	b.n	800d8a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800d8a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d8a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d10a      	bne.n	800d8c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d8ac:	4b6e      	ldr	r3, [pc, #440]	@ (800da68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d8ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d8b0:	f023 0107 	bic.w	r1, r3, #7
 800d8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d8ba:	4a6b      	ldr	r2, [pc, #428]	@ (800da68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d8bc:	430b      	orrs	r3, r1
 800d8be:	6513      	str	r3, [r2, #80]	@ 0x50
 800d8c0:	e003      	b.n	800d8ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d8c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800d8ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800d8d6:	f04f 0b00 	mov.w	fp, #0
 800d8da:	ea5a 030b 	orrs.w	r3, sl, fp
 800d8de:	d05b      	beq.n	800d998 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800d8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d8e8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800d8ec:	d03b      	beq.n	800d966 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800d8ee:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800d8f2:	d834      	bhi.n	800d95e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800d8f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d8f8:	d037      	beq.n	800d96a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800d8fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d8fe:	d82e      	bhi.n	800d95e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800d900:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d904:	d033      	beq.n	800d96e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800d906:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d90a:	d828      	bhi.n	800d95e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800d90c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d910:	d01a      	beq.n	800d948 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800d912:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d916:	d822      	bhi.n	800d95e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d003      	beq.n	800d924 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800d91c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d920:	d007      	beq.n	800d932 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800d922:	e01c      	b.n	800d95e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d924:	4b50      	ldr	r3, [pc, #320]	@ (800da68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d928:	4a4f      	ldr	r2, [pc, #316]	@ (800da68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d92a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d92e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d930:	e01e      	b.n	800d970 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d936:	3308      	adds	r3, #8
 800d938:	2100      	movs	r1, #0
 800d93a:	4618      	mov	r0, r3
 800d93c:	f002 f994 	bl	800fc68 <RCCEx_PLL2_Config>
 800d940:	4603      	mov	r3, r0
 800d942:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d946:	e013      	b.n	800d970 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d94c:	3328      	adds	r3, #40	@ 0x28
 800d94e:	2100      	movs	r1, #0
 800d950:	4618      	mov	r0, r3
 800d952:	f002 fa3b 	bl	800fdcc <RCCEx_PLL3_Config>
 800d956:	4603      	mov	r3, r0
 800d958:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d95c:	e008      	b.n	800d970 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d95e:	2301      	movs	r3, #1
 800d960:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d964:	e004      	b.n	800d970 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800d966:	bf00      	nop
 800d968:	e002      	b.n	800d970 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800d96a:	bf00      	nop
 800d96c:	e000      	b.n	800d970 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800d96e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d970:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d974:	2b00      	cmp	r3, #0
 800d976:	d10b      	bne.n	800d990 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800d978:	4b3b      	ldr	r3, [pc, #236]	@ (800da68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d97a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d97c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800d980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d984:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d988:	4a37      	ldr	r2, [pc, #220]	@ (800da68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d98a:	430b      	orrs	r3, r1
 800d98c:	6593      	str	r3, [r2, #88]	@ 0x58
 800d98e:	e003      	b.n	800d998 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d990:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d994:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800d998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800d9a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d9ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800d9b2:	460b      	mov	r3, r1
 800d9b4:	4313      	orrs	r3, r2
 800d9b6:	d05d      	beq.n	800da74 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800d9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d9c0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800d9c4:	d03b      	beq.n	800da3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800d9c6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800d9ca:	d834      	bhi.n	800da36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800d9cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d9d0:	d037      	beq.n	800da42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800d9d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d9d6:	d82e      	bhi.n	800da36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800d9d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d9dc:	d033      	beq.n	800da46 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800d9de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d9e2:	d828      	bhi.n	800da36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800d9e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d9e8:	d01a      	beq.n	800da20 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800d9ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d9ee:	d822      	bhi.n	800da36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d003      	beq.n	800d9fc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800d9f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d9f8:	d007      	beq.n	800da0a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800d9fa:	e01c      	b.n	800da36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d9fc:	4b1a      	ldr	r3, [pc, #104]	@ (800da68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800d9fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da00:	4a19      	ldr	r2, [pc, #100]	@ (800da68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800da02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800da06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800da08:	e01e      	b.n	800da48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800da0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da0e:	3308      	adds	r3, #8
 800da10:	2100      	movs	r1, #0
 800da12:	4618      	mov	r0, r3
 800da14:	f002 f928 	bl	800fc68 <RCCEx_PLL2_Config>
 800da18:	4603      	mov	r3, r0
 800da1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800da1e:	e013      	b.n	800da48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800da20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da24:	3328      	adds	r3, #40	@ 0x28
 800da26:	2100      	movs	r1, #0
 800da28:	4618      	mov	r0, r3
 800da2a:	f002 f9cf 	bl	800fdcc <RCCEx_PLL3_Config>
 800da2e:	4603      	mov	r3, r0
 800da30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800da34:	e008      	b.n	800da48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800da36:	2301      	movs	r3, #1
 800da38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800da3c:	e004      	b.n	800da48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800da3e:	bf00      	nop
 800da40:	e002      	b.n	800da48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800da42:	bf00      	nop
 800da44:	e000      	b.n	800da48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800da46:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d10d      	bne.n	800da6c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800da50:	4b05      	ldr	r3, [pc, #20]	@ (800da68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800da52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da54:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800da58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800da60:	4a01      	ldr	r2, [pc, #4]	@ (800da68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800da62:	430b      	orrs	r3, r1
 800da64:	6593      	str	r3, [r2, #88]	@ 0x58
 800da66:	e005      	b.n	800da74 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800da68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800da70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800da74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800da80:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800da84:	2300      	movs	r3, #0
 800da86:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800da8a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800da8e:	460b      	mov	r3, r1
 800da90:	4313      	orrs	r3, r2
 800da92:	d03a      	beq.n	800db0a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800da94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da9a:	2b30      	cmp	r3, #48	@ 0x30
 800da9c:	d01f      	beq.n	800dade <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800da9e:	2b30      	cmp	r3, #48	@ 0x30
 800daa0:	d819      	bhi.n	800dad6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800daa2:	2b20      	cmp	r3, #32
 800daa4:	d00c      	beq.n	800dac0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800daa6:	2b20      	cmp	r3, #32
 800daa8:	d815      	bhi.n	800dad6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d019      	beq.n	800dae2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800daae:	2b10      	cmp	r3, #16
 800dab0:	d111      	bne.n	800dad6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dab2:	4baa      	ldr	r3, [pc, #680]	@ (800dd5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dab6:	4aa9      	ldr	r2, [pc, #676]	@ (800dd5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dab8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dabc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800dabe:	e011      	b.n	800dae4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dac4:	3308      	adds	r3, #8
 800dac6:	2102      	movs	r1, #2
 800dac8:	4618      	mov	r0, r3
 800daca:	f002 f8cd 	bl	800fc68 <RCCEx_PLL2_Config>
 800dace:	4603      	mov	r3, r0
 800dad0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800dad4:	e006      	b.n	800dae4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800dad6:	2301      	movs	r3, #1
 800dad8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800dadc:	e002      	b.n	800dae4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800dade:	bf00      	nop
 800dae0:	e000      	b.n	800dae4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800dae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dae4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d10a      	bne.n	800db02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800daec:	4b9b      	ldr	r3, [pc, #620]	@ (800dd5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800daee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800daf0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800daf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800daf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dafa:	4a98      	ldr	r2, [pc, #608]	@ (800dd5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dafc:	430b      	orrs	r3, r1
 800dafe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800db00:	e003      	b.n	800db0a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800db06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800db0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db12:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800db16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800db1a:	2300      	movs	r3, #0
 800db1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800db20:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800db24:	460b      	mov	r3, r1
 800db26:	4313      	orrs	r3, r2
 800db28:	d051      	beq.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800db2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800db30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800db34:	d035      	beq.n	800dba2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800db36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800db3a:	d82e      	bhi.n	800db9a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800db3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800db40:	d031      	beq.n	800dba6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800db42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800db46:	d828      	bhi.n	800db9a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800db48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db4c:	d01a      	beq.n	800db84 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800db4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800db52:	d822      	bhi.n	800db9a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800db54:	2b00      	cmp	r3, #0
 800db56:	d003      	beq.n	800db60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800db58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db5c:	d007      	beq.n	800db6e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800db5e:	e01c      	b.n	800db9a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db60:	4b7e      	ldr	r3, [pc, #504]	@ (800dd5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800db62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db64:	4a7d      	ldr	r2, [pc, #500]	@ (800dd5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800db66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800db6c:	e01c      	b.n	800dba8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800db6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db72:	3308      	adds	r3, #8
 800db74:	2100      	movs	r1, #0
 800db76:	4618      	mov	r0, r3
 800db78:	f002 f876 	bl	800fc68 <RCCEx_PLL2_Config>
 800db7c:	4603      	mov	r3, r0
 800db7e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800db82:	e011      	b.n	800dba8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800db84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db88:	3328      	adds	r3, #40	@ 0x28
 800db8a:	2100      	movs	r1, #0
 800db8c:	4618      	mov	r0, r3
 800db8e:	f002 f91d 	bl	800fdcc <RCCEx_PLL3_Config>
 800db92:	4603      	mov	r3, r0
 800db94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800db98:	e006      	b.n	800dba8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db9a:	2301      	movs	r3, #1
 800db9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800dba0:	e002      	b.n	800dba8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800dba2:	bf00      	nop
 800dba4:	e000      	b.n	800dba8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800dba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dba8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d10a      	bne.n	800dbc6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800dbb0:	4b6a      	ldr	r3, [pc, #424]	@ (800dd5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dbb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbb4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800dbb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dbbe:	4a67      	ldr	r2, [pc, #412]	@ (800dd5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dbc0:	430b      	orrs	r3, r1
 800dbc2:	6513      	str	r3, [r2, #80]	@ 0x50
 800dbc4:	e003      	b.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dbca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800dbce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800dbda:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dbde:	2300      	movs	r3, #0
 800dbe0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dbe4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800dbe8:	460b      	mov	r3, r1
 800dbea:	4313      	orrs	r3, r2
 800dbec:	d053      	beq.n	800dc96 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800dbee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dbf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dbf8:	d033      	beq.n	800dc62 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800dbfa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dbfe:	d82c      	bhi.n	800dc5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800dc00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dc04:	d02f      	beq.n	800dc66 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800dc06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dc0a:	d826      	bhi.n	800dc5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800dc0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dc10:	d02b      	beq.n	800dc6a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800dc12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dc16:	d820      	bhi.n	800dc5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800dc18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc1c:	d012      	beq.n	800dc44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800dc1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc22:	d81a      	bhi.n	800dc5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d022      	beq.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800dc28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc2c:	d115      	bne.n	800dc5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dc2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc32:	3308      	adds	r3, #8
 800dc34:	2101      	movs	r1, #1
 800dc36:	4618      	mov	r0, r3
 800dc38:	f002 f816 	bl	800fc68 <RCCEx_PLL2_Config>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800dc42:	e015      	b.n	800dc70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dc44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc48:	3328      	adds	r3, #40	@ 0x28
 800dc4a:	2101      	movs	r1, #1
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f002 f8bd 	bl	800fdcc <RCCEx_PLL3_Config>
 800dc52:	4603      	mov	r3, r0
 800dc54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800dc58:	e00a      	b.n	800dc70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800dc60:	e006      	b.n	800dc70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800dc62:	bf00      	nop
 800dc64:	e004      	b.n	800dc70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800dc66:	bf00      	nop
 800dc68:	e002      	b.n	800dc70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800dc6a:	bf00      	nop
 800dc6c:	e000      	b.n	800dc70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800dc6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d10a      	bne.n	800dc8e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800dc78:	4b38      	ldr	r3, [pc, #224]	@ (800dd5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dc7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc7c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800dc80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dc86:	4a35      	ldr	r2, [pc, #212]	@ (800dd5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dc88:	430b      	orrs	r3, r1
 800dc8a:	6513      	str	r3, [r2, #80]	@ 0x50
 800dc8c:	e003      	b.n	800dc96 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dc92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800dc96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800dca2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800dca6:	2300      	movs	r3, #0
 800dca8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dcac:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800dcb0:	460b      	mov	r3, r1
 800dcb2:	4313      	orrs	r3, r2
 800dcb4:	d058      	beq.n	800dd68 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800dcb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800dcbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dcc2:	d033      	beq.n	800dd2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800dcc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dcc8:	d82c      	bhi.n	800dd24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800dcca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dcce:	d02f      	beq.n	800dd30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800dcd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dcd4:	d826      	bhi.n	800dd24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800dcd6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dcda:	d02b      	beq.n	800dd34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800dcdc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dce0:	d820      	bhi.n	800dd24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800dce2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dce6:	d012      	beq.n	800dd0e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800dce8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dcec:	d81a      	bhi.n	800dd24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d022      	beq.n	800dd38 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800dcf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dcf6:	d115      	bne.n	800dd24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dcf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcfc:	3308      	adds	r3, #8
 800dcfe:	2101      	movs	r1, #1
 800dd00:	4618      	mov	r0, r3
 800dd02:	f001 ffb1 	bl	800fc68 <RCCEx_PLL2_Config>
 800dd06:	4603      	mov	r3, r0
 800dd08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800dd0c:	e015      	b.n	800dd3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dd0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd12:	3328      	adds	r3, #40	@ 0x28
 800dd14:	2101      	movs	r1, #1
 800dd16:	4618      	mov	r0, r3
 800dd18:	f002 f858 	bl	800fdcc <RCCEx_PLL3_Config>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800dd22:	e00a      	b.n	800dd3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800dd24:	2301      	movs	r3, #1
 800dd26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800dd2a:	e006      	b.n	800dd3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800dd2c:	bf00      	nop
 800dd2e:	e004      	b.n	800dd3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800dd30:	bf00      	nop
 800dd32:	e002      	b.n	800dd3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800dd34:	bf00      	nop
 800dd36:	e000      	b.n	800dd3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800dd38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d10e      	bne.n	800dd60 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800dd42:	4b06      	ldr	r3, [pc, #24]	@ (800dd5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dd44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd46:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800dd4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800dd52:	4a02      	ldr	r2, [pc, #8]	@ (800dd5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800dd54:	430b      	orrs	r3, r1
 800dd56:	6593      	str	r3, [r2, #88]	@ 0x58
 800dd58:	e006      	b.n	800dd68 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800dd5a:	bf00      	nop
 800dd5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dd64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800dd68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd70:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800dd74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800dd78:	2300      	movs	r3, #0
 800dd7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800dd7e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800dd82:	460b      	mov	r3, r1
 800dd84:	4313      	orrs	r3, r2
 800dd86:	d037      	beq.n	800ddf8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800dd88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd92:	d00e      	beq.n	800ddb2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800dd94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd98:	d816      	bhi.n	800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d018      	beq.n	800ddd0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800dd9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dda2:	d111      	bne.n	800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dda4:	4bc4      	ldr	r3, [pc, #784]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dda6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dda8:	4ac3      	ldr	r2, [pc, #780]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ddaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ddae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ddb0:	e00f      	b.n	800ddd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ddb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddb6:	3308      	adds	r3, #8
 800ddb8:	2101      	movs	r1, #1
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f001 ff54 	bl	800fc68 <RCCEx_PLL2_Config>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ddc6:	e004      	b.n	800ddd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ddc8:	2301      	movs	r3, #1
 800ddca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ddce:	e000      	b.n	800ddd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800ddd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ddd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d10a      	bne.n	800ddf0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ddda:	4bb7      	ldr	r3, [pc, #732]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddde:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800dde2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dde6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dde8:	4ab3      	ldr	r2, [pc, #716]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ddea:	430b      	orrs	r3, r1
 800ddec:	6513      	str	r3, [r2, #80]	@ 0x50
 800ddee:	e003      	b.n	800ddf8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ddf4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ddf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de00:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800de04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800de08:	2300      	movs	r3, #0
 800de0a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800de0e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800de12:	460b      	mov	r3, r1
 800de14:	4313      	orrs	r3, r2
 800de16:	d039      	beq.n	800de8c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800de18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800de1e:	2b03      	cmp	r3, #3
 800de20:	d81c      	bhi.n	800de5c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800de22:	a201      	add	r2, pc, #4	@ (adr r2, 800de28 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800de24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de28:	0800de65 	.word	0x0800de65
 800de2c:	0800de39 	.word	0x0800de39
 800de30:	0800de47 	.word	0x0800de47
 800de34:	0800de65 	.word	0x0800de65
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800de38:	4b9f      	ldr	r3, [pc, #636]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800de3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de3c:	4a9e      	ldr	r2, [pc, #632]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800de3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800de42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800de44:	e00f      	b.n	800de66 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800de46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de4a:	3308      	adds	r3, #8
 800de4c:	2102      	movs	r1, #2
 800de4e:	4618      	mov	r0, r3
 800de50:	f001 ff0a 	bl	800fc68 <RCCEx_PLL2_Config>
 800de54:	4603      	mov	r3, r0
 800de56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800de5a:	e004      	b.n	800de66 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800de5c:	2301      	movs	r3, #1
 800de5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800de62:	e000      	b.n	800de66 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800de64:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d10a      	bne.n	800de84 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800de6e:	4b92      	ldr	r3, [pc, #584]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800de70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de72:	f023 0103 	bic.w	r1, r3, #3
 800de76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800de7c:	4a8e      	ldr	r2, [pc, #568]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800de7e:	430b      	orrs	r3, r1
 800de80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800de82:	e003      	b.n	800de8c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800de88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800de8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de94:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800de98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800de9c:	2300      	movs	r3, #0
 800de9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dea2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800dea6:	460b      	mov	r3, r1
 800dea8:	4313      	orrs	r3, r2
 800deaa:	f000 8099 	beq.w	800dfe0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800deae:	4b83      	ldr	r3, [pc, #524]	@ (800e0bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	4a82      	ldr	r2, [pc, #520]	@ (800e0bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800deb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800deb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800deba:	f7f5 fa87 	bl	80033cc <HAL_GetTick>
 800debe:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dec2:	e00b      	b.n	800dedc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dec4:	f7f5 fa82 	bl	80033cc <HAL_GetTick>
 800dec8:	4602      	mov	r2, r0
 800deca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800dece:	1ad3      	subs	r3, r2, r3
 800ded0:	2b64      	cmp	r3, #100	@ 0x64
 800ded2:	d903      	bls.n	800dedc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800ded4:	2303      	movs	r3, #3
 800ded6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800deda:	e005      	b.n	800dee8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dedc:	4b77      	ldr	r3, [pc, #476]	@ (800e0bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d0ed      	beq.n	800dec4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800dee8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800deec:	2b00      	cmp	r3, #0
 800deee:	d173      	bne.n	800dfd8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800def0:	4b71      	ldr	r3, [pc, #452]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800def2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800def4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800def8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800defc:	4053      	eors	r3, r2
 800defe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800df02:	2b00      	cmp	r3, #0
 800df04:	d015      	beq.n	800df32 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800df06:	4b6c      	ldr	r3, [pc, #432]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800df08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800df0e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800df12:	4b69      	ldr	r3, [pc, #420]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800df14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df16:	4a68      	ldr	r2, [pc, #416]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800df18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800df1c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800df1e:	4b66      	ldr	r3, [pc, #408]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800df20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df22:	4a65      	ldr	r2, [pc, #404]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800df24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800df28:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800df2a:	4a63      	ldr	r2, [pc, #396]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800df2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800df30:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800df32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800df3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800df3e:	d118      	bne.n	800df72 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df40:	f7f5 fa44 	bl	80033cc <HAL_GetTick>
 800df44:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800df48:	e00d      	b.n	800df66 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800df4a:	f7f5 fa3f 	bl	80033cc <HAL_GetTick>
 800df4e:	4602      	mov	r2, r0
 800df50:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800df54:	1ad2      	subs	r2, r2, r3
 800df56:	f241 3388 	movw	r3, #5000	@ 0x1388
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d903      	bls.n	800df66 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800df5e:	2303      	movs	r3, #3
 800df60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800df64:	e005      	b.n	800df72 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800df66:	4b54      	ldr	r3, [pc, #336]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800df68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df6a:	f003 0302 	and.w	r3, r3, #2
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d0eb      	beq.n	800df4a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800df72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800df76:	2b00      	cmp	r3, #0
 800df78:	d129      	bne.n	800dfce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800df7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800df82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800df86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800df8a:	d10e      	bne.n	800dfaa <HAL_RCCEx_PeriphCLKConfig+0x846>
 800df8c:	4b4a      	ldr	r3, [pc, #296]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800df8e:	691b      	ldr	r3, [r3, #16]
 800df90:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800df94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800df9c:	091a      	lsrs	r2, r3, #4
 800df9e:	4b48      	ldr	r3, [pc, #288]	@ (800e0c0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800dfa0:	4013      	ands	r3, r2
 800dfa2:	4a45      	ldr	r2, [pc, #276]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dfa4:	430b      	orrs	r3, r1
 800dfa6:	6113      	str	r3, [r2, #16]
 800dfa8:	e005      	b.n	800dfb6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800dfaa:	4b43      	ldr	r3, [pc, #268]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dfac:	691b      	ldr	r3, [r3, #16]
 800dfae:	4a42      	ldr	r2, [pc, #264]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dfb0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800dfb4:	6113      	str	r3, [r2, #16]
 800dfb6:	4b40      	ldr	r3, [pc, #256]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dfb8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800dfba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800dfc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dfc6:	4a3c      	ldr	r2, [pc, #240]	@ (800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800dfc8:	430b      	orrs	r3, r1
 800dfca:	6713      	str	r3, [r2, #112]	@ 0x70
 800dfcc:	e008      	b.n	800dfe0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800dfce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dfd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800dfd6:	e003      	b.n	800dfe0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800dfdc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800dfe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe8:	f002 0301 	and.w	r3, r2, #1
 800dfec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800dff0:	2300      	movs	r3, #0
 800dff2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800dff6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800dffa:	460b      	mov	r3, r1
 800dffc:	4313      	orrs	r3, r2
 800dffe:	f000 808f 	beq.w	800e120 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e006:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e008:	2b28      	cmp	r3, #40	@ 0x28
 800e00a:	d871      	bhi.n	800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800e00c:	a201      	add	r2, pc, #4	@ (adr r2, 800e014 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800e00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e012:	bf00      	nop
 800e014:	0800e0f9 	.word	0x0800e0f9
 800e018:	0800e0f1 	.word	0x0800e0f1
 800e01c:	0800e0f1 	.word	0x0800e0f1
 800e020:	0800e0f1 	.word	0x0800e0f1
 800e024:	0800e0f1 	.word	0x0800e0f1
 800e028:	0800e0f1 	.word	0x0800e0f1
 800e02c:	0800e0f1 	.word	0x0800e0f1
 800e030:	0800e0f1 	.word	0x0800e0f1
 800e034:	0800e0c5 	.word	0x0800e0c5
 800e038:	0800e0f1 	.word	0x0800e0f1
 800e03c:	0800e0f1 	.word	0x0800e0f1
 800e040:	0800e0f1 	.word	0x0800e0f1
 800e044:	0800e0f1 	.word	0x0800e0f1
 800e048:	0800e0f1 	.word	0x0800e0f1
 800e04c:	0800e0f1 	.word	0x0800e0f1
 800e050:	0800e0f1 	.word	0x0800e0f1
 800e054:	0800e0db 	.word	0x0800e0db
 800e058:	0800e0f1 	.word	0x0800e0f1
 800e05c:	0800e0f1 	.word	0x0800e0f1
 800e060:	0800e0f1 	.word	0x0800e0f1
 800e064:	0800e0f1 	.word	0x0800e0f1
 800e068:	0800e0f1 	.word	0x0800e0f1
 800e06c:	0800e0f1 	.word	0x0800e0f1
 800e070:	0800e0f1 	.word	0x0800e0f1
 800e074:	0800e0f9 	.word	0x0800e0f9
 800e078:	0800e0f1 	.word	0x0800e0f1
 800e07c:	0800e0f1 	.word	0x0800e0f1
 800e080:	0800e0f1 	.word	0x0800e0f1
 800e084:	0800e0f1 	.word	0x0800e0f1
 800e088:	0800e0f1 	.word	0x0800e0f1
 800e08c:	0800e0f1 	.word	0x0800e0f1
 800e090:	0800e0f1 	.word	0x0800e0f1
 800e094:	0800e0f9 	.word	0x0800e0f9
 800e098:	0800e0f1 	.word	0x0800e0f1
 800e09c:	0800e0f1 	.word	0x0800e0f1
 800e0a0:	0800e0f1 	.word	0x0800e0f1
 800e0a4:	0800e0f1 	.word	0x0800e0f1
 800e0a8:	0800e0f1 	.word	0x0800e0f1
 800e0ac:	0800e0f1 	.word	0x0800e0f1
 800e0b0:	0800e0f1 	.word	0x0800e0f1
 800e0b4:	0800e0f9 	.word	0x0800e0f9
 800e0b8:	58024400 	.word	0x58024400
 800e0bc:	58024800 	.word	0x58024800
 800e0c0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e0c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0c8:	3308      	adds	r3, #8
 800e0ca:	2101      	movs	r1, #1
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f001 fdcb 	bl	800fc68 <RCCEx_PLL2_Config>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e0d8:	e00f      	b.n	800e0fa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e0da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0de:	3328      	adds	r3, #40	@ 0x28
 800e0e0:	2101      	movs	r1, #1
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f001 fe72 	bl	800fdcc <RCCEx_PLL3_Config>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e0ee:	e004      	b.n	800e0fa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e0f6:	e000      	b.n	800e0fa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800e0f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e0fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d10a      	bne.n	800e118 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e102:	4bbf      	ldr	r3, [pc, #764]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e106:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800e10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e10e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e110:	4abb      	ldr	r2, [pc, #748]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e112:	430b      	orrs	r3, r1
 800e114:	6553      	str	r3, [r2, #84]	@ 0x54
 800e116:	e003      	b.n	800e120 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e118:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e11c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e128:	f002 0302 	and.w	r3, r2, #2
 800e12c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e130:	2300      	movs	r3, #0
 800e132:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e136:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800e13a:	460b      	mov	r3, r1
 800e13c:	4313      	orrs	r3, r2
 800e13e:	d041      	beq.n	800e1c4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e146:	2b05      	cmp	r3, #5
 800e148:	d824      	bhi.n	800e194 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800e14a:	a201      	add	r2, pc, #4	@ (adr r2, 800e150 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800e14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e150:	0800e19d 	.word	0x0800e19d
 800e154:	0800e169 	.word	0x0800e169
 800e158:	0800e17f 	.word	0x0800e17f
 800e15c:	0800e19d 	.word	0x0800e19d
 800e160:	0800e19d 	.word	0x0800e19d
 800e164:	0800e19d 	.word	0x0800e19d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e16c:	3308      	adds	r3, #8
 800e16e:	2101      	movs	r1, #1
 800e170:	4618      	mov	r0, r3
 800e172:	f001 fd79 	bl	800fc68 <RCCEx_PLL2_Config>
 800e176:	4603      	mov	r3, r0
 800e178:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e17c:	e00f      	b.n	800e19e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e17e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e182:	3328      	adds	r3, #40	@ 0x28
 800e184:	2101      	movs	r1, #1
 800e186:	4618      	mov	r0, r3
 800e188:	f001 fe20 	bl	800fdcc <RCCEx_PLL3_Config>
 800e18c:	4603      	mov	r3, r0
 800e18e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e192:	e004      	b.n	800e19e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e194:	2301      	movs	r3, #1
 800e196:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e19a:	e000      	b.n	800e19e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800e19c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e19e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d10a      	bne.n	800e1bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e1a6:	4b96      	ldr	r3, [pc, #600]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e1a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1aa:	f023 0107 	bic.w	r1, r3, #7
 800e1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1b4:	4a92      	ldr	r2, [pc, #584]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e1b6:	430b      	orrs	r3, r1
 800e1b8:	6553      	str	r3, [r2, #84]	@ 0x54
 800e1ba:	e003      	b.n	800e1c4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e1c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1cc:	f002 0304 	and.w	r3, r2, #4
 800e1d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e1da:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800e1de:	460b      	mov	r3, r1
 800e1e0:	4313      	orrs	r3, r2
 800e1e2:	d044      	beq.n	800e26e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1ec:	2b05      	cmp	r3, #5
 800e1ee:	d825      	bhi.n	800e23c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800e1f0:	a201      	add	r2, pc, #4	@ (adr r2, 800e1f8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800e1f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1f6:	bf00      	nop
 800e1f8:	0800e245 	.word	0x0800e245
 800e1fc:	0800e211 	.word	0x0800e211
 800e200:	0800e227 	.word	0x0800e227
 800e204:	0800e245 	.word	0x0800e245
 800e208:	0800e245 	.word	0x0800e245
 800e20c:	0800e245 	.word	0x0800e245
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e214:	3308      	adds	r3, #8
 800e216:	2101      	movs	r1, #1
 800e218:	4618      	mov	r0, r3
 800e21a:	f001 fd25 	bl	800fc68 <RCCEx_PLL2_Config>
 800e21e:	4603      	mov	r3, r0
 800e220:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e224:	e00f      	b.n	800e246 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e22a:	3328      	adds	r3, #40	@ 0x28
 800e22c:	2101      	movs	r1, #1
 800e22e:	4618      	mov	r0, r3
 800e230:	f001 fdcc 	bl	800fdcc <RCCEx_PLL3_Config>
 800e234:	4603      	mov	r3, r0
 800e236:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e23a:	e004      	b.n	800e246 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e23c:	2301      	movs	r3, #1
 800e23e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e242:	e000      	b.n	800e246 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800e244:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e246:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d10b      	bne.n	800e266 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e24e:	4b6c      	ldr	r3, [pc, #432]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e252:	f023 0107 	bic.w	r1, r3, #7
 800e256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e25a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e25e:	4a68      	ldr	r2, [pc, #416]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e260:	430b      	orrs	r3, r1
 800e262:	6593      	str	r3, [r2, #88]	@ 0x58
 800e264:	e003      	b.n	800e26e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e266:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e26a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e26e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e276:	f002 0320 	and.w	r3, r2, #32
 800e27a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e27e:	2300      	movs	r3, #0
 800e280:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e284:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800e288:	460b      	mov	r3, r1
 800e28a:	4313      	orrs	r3, r2
 800e28c:	d055      	beq.n	800e33a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e28e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e292:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e296:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e29a:	d033      	beq.n	800e304 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800e29c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e2a0:	d82c      	bhi.n	800e2fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e2a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2a6:	d02f      	beq.n	800e308 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800e2a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2ac:	d826      	bhi.n	800e2fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e2ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e2b2:	d02b      	beq.n	800e30c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800e2b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800e2b8:	d820      	bhi.n	800e2fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e2ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e2be:	d012      	beq.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800e2c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e2c4:	d81a      	bhi.n	800e2fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d022      	beq.n	800e310 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800e2ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e2ce:	d115      	bne.n	800e2fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e2d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2d4:	3308      	adds	r3, #8
 800e2d6:	2100      	movs	r1, #0
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f001 fcc5 	bl	800fc68 <RCCEx_PLL2_Config>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e2e4:	e015      	b.n	800e312 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e2e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2ea:	3328      	adds	r3, #40	@ 0x28
 800e2ec:	2102      	movs	r1, #2
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f001 fd6c 	bl	800fdcc <RCCEx_PLL3_Config>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e2fa:	e00a      	b.n	800e312 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e302:	e006      	b.n	800e312 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800e304:	bf00      	nop
 800e306:	e004      	b.n	800e312 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800e308:	bf00      	nop
 800e30a:	e002      	b.n	800e312 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800e30c:	bf00      	nop
 800e30e:	e000      	b.n	800e312 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800e310:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e312:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e316:	2b00      	cmp	r3, #0
 800e318:	d10b      	bne.n	800e332 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e31a:	4b39      	ldr	r3, [pc, #228]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e31c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e31e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800e322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e326:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e32a:	4a35      	ldr	r2, [pc, #212]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e32c:	430b      	orrs	r3, r1
 800e32e:	6553      	str	r3, [r2, #84]	@ 0x54
 800e330:	e003      	b.n	800e33a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e332:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e336:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e342:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800e346:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e34a:	2300      	movs	r3, #0
 800e34c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e350:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800e354:	460b      	mov	r3, r1
 800e356:	4313      	orrs	r3, r2
 800e358:	d058      	beq.n	800e40c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e35e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e362:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e366:	d033      	beq.n	800e3d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800e368:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800e36c:	d82c      	bhi.n	800e3c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e36e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e372:	d02f      	beq.n	800e3d4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800e374:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e378:	d826      	bhi.n	800e3c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e37a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e37e:	d02b      	beq.n	800e3d8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800e380:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e384:	d820      	bhi.n	800e3c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e386:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e38a:	d012      	beq.n	800e3b2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800e38c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e390:	d81a      	bhi.n	800e3c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800e392:	2b00      	cmp	r3, #0
 800e394:	d022      	beq.n	800e3dc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800e396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e39a:	d115      	bne.n	800e3c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e39c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3a0:	3308      	adds	r3, #8
 800e3a2:	2100      	movs	r1, #0
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f001 fc5f 	bl	800fc68 <RCCEx_PLL2_Config>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e3b0:	e015      	b.n	800e3de <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e3b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3b6:	3328      	adds	r3, #40	@ 0x28
 800e3b8:	2102      	movs	r1, #2
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f001 fd06 	bl	800fdcc <RCCEx_PLL3_Config>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e3c6:	e00a      	b.n	800e3de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e3ce:	e006      	b.n	800e3de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800e3d0:	bf00      	nop
 800e3d2:	e004      	b.n	800e3de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800e3d4:	bf00      	nop
 800e3d6:	e002      	b.n	800e3de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800e3d8:	bf00      	nop
 800e3da:	e000      	b.n	800e3de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800e3dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e3de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d10e      	bne.n	800e404 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e3e6:	4b06      	ldr	r3, [pc, #24]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e3e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3ea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800e3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e3f6:	4a02      	ldr	r2, [pc, #8]	@ (800e400 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800e3f8:	430b      	orrs	r3, r1
 800e3fa:	6593      	str	r3, [r2, #88]	@ 0x58
 800e3fc:	e006      	b.n	800e40c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800e3fe:	bf00      	nop
 800e400:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e404:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e408:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e40c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e414:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800e418:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e41c:	2300      	movs	r3, #0
 800e41e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e422:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800e426:	460b      	mov	r3, r1
 800e428:	4313      	orrs	r3, r2
 800e42a:	d055      	beq.n	800e4d8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e430:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e434:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e438:	d033      	beq.n	800e4a2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800e43a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800e43e:	d82c      	bhi.n	800e49a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e440:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e444:	d02f      	beq.n	800e4a6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800e446:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e44a:	d826      	bhi.n	800e49a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e44c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e450:	d02b      	beq.n	800e4aa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800e452:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800e456:	d820      	bhi.n	800e49a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e458:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e45c:	d012      	beq.n	800e484 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800e45e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e462:	d81a      	bhi.n	800e49a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800e464:	2b00      	cmp	r3, #0
 800e466:	d022      	beq.n	800e4ae <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800e468:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e46c:	d115      	bne.n	800e49a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e46e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e472:	3308      	adds	r3, #8
 800e474:	2100      	movs	r1, #0
 800e476:	4618      	mov	r0, r3
 800e478:	f001 fbf6 	bl	800fc68 <RCCEx_PLL2_Config>
 800e47c:	4603      	mov	r3, r0
 800e47e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e482:	e015      	b.n	800e4b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e488:	3328      	adds	r3, #40	@ 0x28
 800e48a:	2102      	movs	r1, #2
 800e48c:	4618      	mov	r0, r3
 800e48e:	f001 fc9d 	bl	800fdcc <RCCEx_PLL3_Config>
 800e492:	4603      	mov	r3, r0
 800e494:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e498:	e00a      	b.n	800e4b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e49a:	2301      	movs	r3, #1
 800e49c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e4a0:	e006      	b.n	800e4b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800e4a2:	bf00      	nop
 800e4a4:	e004      	b.n	800e4b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800e4a6:	bf00      	nop
 800e4a8:	e002      	b.n	800e4b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800e4aa:	bf00      	nop
 800e4ac:	e000      	b.n	800e4b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800e4ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e4b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d10b      	bne.n	800e4d0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e4b8:	4ba0      	ldr	r3, [pc, #640]	@ (800e73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e4ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4bc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800e4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e4c8:	4a9c      	ldr	r2, [pc, #624]	@ (800e73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e4ca:	430b      	orrs	r3, r1
 800e4cc:	6593      	str	r3, [r2, #88]	@ 0x58
 800e4ce:	e003      	b.n	800e4d8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e4d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800e4d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e0:	f002 0308 	and.w	r3, r2, #8
 800e4e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e4ee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	4313      	orrs	r3, r2
 800e4f6:	d01e      	beq.n	800e536 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800e4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e500:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e504:	d10c      	bne.n	800e520 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e50a:	3328      	adds	r3, #40	@ 0x28
 800e50c:	2102      	movs	r1, #2
 800e50e:	4618      	mov	r0, r3
 800e510:	f001 fc5c 	bl	800fdcc <RCCEx_PLL3_Config>
 800e514:	4603      	mov	r3, r0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d002      	beq.n	800e520 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800e51a:	2301      	movs	r3, #1
 800e51c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800e520:	4b86      	ldr	r3, [pc, #536]	@ (800e73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e524:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e52c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e530:	4a82      	ldr	r2, [pc, #520]	@ (800e73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e532:	430b      	orrs	r3, r1
 800e534:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53e:	f002 0310 	and.w	r3, r2, #16
 800e542:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e546:	2300      	movs	r3, #0
 800e548:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e54c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800e550:	460b      	mov	r3, r1
 800e552:	4313      	orrs	r3, r2
 800e554:	d01e      	beq.n	800e594 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e55a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e55e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e562:	d10c      	bne.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e568:	3328      	adds	r3, #40	@ 0x28
 800e56a:	2102      	movs	r1, #2
 800e56c:	4618      	mov	r0, r3
 800e56e:	f001 fc2d 	bl	800fdcc <RCCEx_PLL3_Config>
 800e572:	4603      	mov	r3, r0
 800e574:	2b00      	cmp	r3, #0
 800e576:	d002      	beq.n	800e57e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800e578:	2301      	movs	r3, #1
 800e57a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e57e:	4b6f      	ldr	r3, [pc, #444]	@ (800e73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e582:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e58a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e58e:	4a6b      	ldr	r2, [pc, #428]	@ (800e73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e590:	430b      	orrs	r3, r1
 800e592:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800e5a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e5a6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800e5aa:	460b      	mov	r3, r1
 800e5ac:	4313      	orrs	r3, r2
 800e5ae:	d03e      	beq.n	800e62e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800e5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e5b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e5bc:	d022      	beq.n	800e604 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800e5be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e5c2:	d81b      	bhi.n	800e5fc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d003      	beq.n	800e5d0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800e5c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e5cc:	d00b      	beq.n	800e5e6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800e5ce:	e015      	b.n	800e5fc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e5d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5d4:	3308      	adds	r3, #8
 800e5d6:	2100      	movs	r1, #0
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f001 fb45 	bl	800fc68 <RCCEx_PLL2_Config>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e5e4:	e00f      	b.n	800e606 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5ea:	3328      	adds	r3, #40	@ 0x28
 800e5ec:	2102      	movs	r1, #2
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f001 fbec 	bl	800fdcc <RCCEx_PLL3_Config>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e5fa:	e004      	b.n	800e606 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e602:	e000      	b.n	800e606 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800e604:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e606:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d10b      	bne.n	800e626 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e60e:	4b4b      	ldr	r3, [pc, #300]	@ (800e73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e612:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800e616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e61a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e61e:	4a47      	ldr	r2, [pc, #284]	@ (800e73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e620:	430b      	orrs	r3, r1
 800e622:	6593      	str	r3, [r2, #88]	@ 0x58
 800e624:	e003      	b.n	800e62e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e626:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e62a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e636:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800e63a:	673b      	str	r3, [r7, #112]	@ 0x70
 800e63c:	2300      	movs	r3, #0
 800e63e:	677b      	str	r3, [r7, #116]	@ 0x74
 800e640:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800e644:	460b      	mov	r3, r1
 800e646:	4313      	orrs	r3, r2
 800e648:	d03b      	beq.n	800e6c2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800e64a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e64e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e652:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e656:	d01f      	beq.n	800e698 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800e658:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e65c:	d818      	bhi.n	800e690 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800e65e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e662:	d003      	beq.n	800e66c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800e664:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e668:	d007      	beq.n	800e67a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800e66a:	e011      	b.n	800e690 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e66c:	4b33      	ldr	r3, [pc, #204]	@ (800e73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e66e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e670:	4a32      	ldr	r2, [pc, #200]	@ (800e73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e672:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e676:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800e678:	e00f      	b.n	800e69a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e67e:	3328      	adds	r3, #40	@ 0x28
 800e680:	2101      	movs	r1, #1
 800e682:	4618      	mov	r0, r3
 800e684:	f001 fba2 	bl	800fdcc <RCCEx_PLL3_Config>
 800e688:	4603      	mov	r3, r0
 800e68a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800e68e:	e004      	b.n	800e69a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e690:	2301      	movs	r3, #1
 800e692:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e696:	e000      	b.n	800e69a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800e698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e69a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d10b      	bne.n	800e6ba <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e6a2:	4b26      	ldr	r3, [pc, #152]	@ (800e73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e6a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e6aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e6b2:	4a22      	ldr	r2, [pc, #136]	@ (800e73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e6b4:	430b      	orrs	r3, r1
 800e6b6:	6553      	str	r3, [r2, #84]	@ 0x54
 800e6b8:	e003      	b.n	800e6c2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e6be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800e6ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e6d4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800e6d8:	460b      	mov	r3, r1
 800e6da:	4313      	orrs	r3, r2
 800e6dc:	d034      	beq.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800e6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d003      	beq.n	800e6f0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800e6e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e6ec:	d007      	beq.n	800e6fe <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800e6ee:	e011      	b.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e6f0:	4b12      	ldr	r3, [pc, #72]	@ (800e73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e6f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6f4:	4a11      	ldr	r2, [pc, #68]	@ (800e73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e6f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e6fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e6fc:	e00e      	b.n	800e71c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e702:	3308      	adds	r3, #8
 800e704:	2102      	movs	r1, #2
 800e706:	4618      	mov	r0, r3
 800e708:	f001 faae 	bl	800fc68 <RCCEx_PLL2_Config>
 800e70c:	4603      	mov	r3, r0
 800e70e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e712:	e003      	b.n	800e71c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800e714:	2301      	movs	r3, #1
 800e716:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e71a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e71c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e720:	2b00      	cmp	r3, #0
 800e722:	d10d      	bne.n	800e740 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e724:	4b05      	ldr	r3, [pc, #20]	@ (800e73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e728:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e72c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e732:	4a02      	ldr	r2, [pc, #8]	@ (800e73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800e734:	430b      	orrs	r3, r1
 800e736:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800e738:	e006      	b.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800e73a:	bf00      	nop
 800e73c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e740:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e744:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e750:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800e754:	663b      	str	r3, [r7, #96]	@ 0x60
 800e756:	2300      	movs	r3, #0
 800e758:	667b      	str	r3, [r7, #100]	@ 0x64
 800e75a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800e75e:	460b      	mov	r3, r1
 800e760:	4313      	orrs	r3, r2
 800e762:	d00c      	beq.n	800e77e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e768:	3328      	adds	r3, #40	@ 0x28
 800e76a:	2102      	movs	r1, #2
 800e76c:	4618      	mov	r0, r3
 800e76e:	f001 fb2d 	bl	800fdcc <RCCEx_PLL3_Config>
 800e772:	4603      	mov	r3, r0
 800e774:	2b00      	cmp	r3, #0
 800e776:	d002      	beq.n	800e77e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800e778:	2301      	movs	r3, #1
 800e77a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e77e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e786:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800e78a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e78c:	2300      	movs	r3, #0
 800e78e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e790:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800e794:	460b      	mov	r3, r1
 800e796:	4313      	orrs	r3, r2
 800e798:	d036      	beq.n	800e808 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800e79a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e79e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e7a4:	d018      	beq.n	800e7d8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800e7a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e7aa:	d811      	bhi.n	800e7d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800e7ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e7b0:	d014      	beq.n	800e7dc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800e7b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e7b6:	d80b      	bhi.n	800e7d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d011      	beq.n	800e7e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800e7bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e7c0:	d106      	bne.n	800e7d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e7c2:	4bb7      	ldr	r3, [pc, #732]	@ (800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e7c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7c6:	4ab6      	ldr	r2, [pc, #728]	@ (800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e7c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e7cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800e7ce:	e008      	b.n	800e7e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800e7d6:	e004      	b.n	800e7e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800e7d8:	bf00      	nop
 800e7da:	e002      	b.n	800e7e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800e7dc:	bf00      	nop
 800e7de:	e000      	b.n	800e7e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800e7e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e7e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d10a      	bne.n	800e800 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e7ea:	4bad      	ldr	r3, [pc, #692]	@ (800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e7ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800e7f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7f8:	4aa9      	ldr	r2, [pc, #676]	@ (800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e7fa:	430b      	orrs	r3, r1
 800e7fc:	6553      	str	r3, [r2, #84]	@ 0x54
 800e7fe:	e003      	b.n	800e808 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e800:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e804:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e810:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800e814:	653b      	str	r3, [r7, #80]	@ 0x50
 800e816:	2300      	movs	r3, #0
 800e818:	657b      	str	r3, [r7, #84]	@ 0x54
 800e81a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800e81e:	460b      	mov	r3, r1
 800e820:	4313      	orrs	r3, r2
 800e822:	d009      	beq.n	800e838 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e824:	4b9e      	ldr	r3, [pc, #632]	@ (800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e828:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e82c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e832:	4a9b      	ldr	r2, [pc, #620]	@ (800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e834:	430b      	orrs	r3, r1
 800e836:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e840:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800e844:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e846:	2300      	movs	r3, #0
 800e848:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e84a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800e84e:	460b      	mov	r3, r1
 800e850:	4313      	orrs	r3, r2
 800e852:	d009      	beq.n	800e868 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e854:	4b92      	ldr	r3, [pc, #584]	@ (800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e858:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800e85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e860:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e862:	4a8f      	ldr	r2, [pc, #572]	@ (800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e864:	430b      	orrs	r3, r1
 800e866:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e870:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800e874:	643b      	str	r3, [r7, #64]	@ 0x40
 800e876:	2300      	movs	r3, #0
 800e878:	647b      	str	r3, [r7, #68]	@ 0x44
 800e87a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800e87e:	460b      	mov	r3, r1
 800e880:	4313      	orrs	r3, r2
 800e882:	d00e      	beq.n	800e8a2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e884:	4b86      	ldr	r3, [pc, #536]	@ (800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e886:	691b      	ldr	r3, [r3, #16]
 800e888:	4a85      	ldr	r2, [pc, #532]	@ (800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e88a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e88e:	6113      	str	r3, [r2, #16]
 800e890:	4b83      	ldr	r3, [pc, #524]	@ (800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e892:	6919      	ldr	r1, [r3, #16]
 800e894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e898:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e89c:	4a80      	ldr	r2, [pc, #512]	@ (800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e89e:	430b      	orrs	r3, r1
 800e8a0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e8a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8aa:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800e8ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e8b4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800e8b8:	460b      	mov	r3, r1
 800e8ba:	4313      	orrs	r3, r2
 800e8bc:	d009      	beq.n	800e8d2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e8be:	4b78      	ldr	r3, [pc, #480]	@ (800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e8c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e8c2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800e8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8cc:	4a74      	ldr	r2, [pc, #464]	@ (800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e8ce:	430b      	orrs	r3, r1
 800e8d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e8d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8da:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800e8de:	633b      	str	r3, [r7, #48]	@ 0x30
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8e4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800e8e8:	460b      	mov	r3, r1
 800e8ea:	4313      	orrs	r3, r2
 800e8ec:	d00a      	beq.n	800e904 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e8ee:	4b6c      	ldr	r3, [pc, #432]	@ (800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e8f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8f2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800e8f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e8fe:	4a68      	ldr	r2, [pc, #416]	@ (800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800e900:	430b      	orrs	r3, r1
 800e902:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800e904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e90c:	2100      	movs	r1, #0
 800e90e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800e910:	f003 0301 	and.w	r3, r3, #1
 800e914:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e916:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800e91a:	460b      	mov	r3, r1
 800e91c:	4313      	orrs	r3, r2
 800e91e:	d011      	beq.n	800e944 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e924:	3308      	adds	r3, #8
 800e926:	2100      	movs	r1, #0
 800e928:	4618      	mov	r0, r3
 800e92a:	f001 f99d 	bl	800fc68 <RCCEx_PLL2_Config>
 800e92e:	4603      	mov	r3, r0
 800e930:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800e934:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d003      	beq.n	800e944 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e93c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e940:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800e944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e94c:	2100      	movs	r1, #0
 800e94e:	6239      	str	r1, [r7, #32]
 800e950:	f003 0302 	and.w	r3, r3, #2
 800e954:	627b      	str	r3, [r7, #36]	@ 0x24
 800e956:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e95a:	460b      	mov	r3, r1
 800e95c:	4313      	orrs	r3, r2
 800e95e:	d011      	beq.n	800e984 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e964:	3308      	adds	r3, #8
 800e966:	2101      	movs	r1, #1
 800e968:	4618      	mov	r0, r3
 800e96a:	f001 f97d 	bl	800fc68 <RCCEx_PLL2_Config>
 800e96e:	4603      	mov	r3, r0
 800e970:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800e974:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d003      	beq.n	800e984 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e97c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e980:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800e984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e98c:	2100      	movs	r1, #0
 800e98e:	61b9      	str	r1, [r7, #24]
 800e990:	f003 0304 	and.w	r3, r3, #4
 800e994:	61fb      	str	r3, [r7, #28]
 800e996:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e99a:	460b      	mov	r3, r1
 800e99c:	4313      	orrs	r3, r2
 800e99e:	d011      	beq.n	800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e9a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9a4:	3308      	adds	r3, #8
 800e9a6:	2102      	movs	r1, #2
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f001 f95d 	bl	800fc68 <RCCEx_PLL2_Config>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800e9b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d003      	beq.n	800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e9c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800e9c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9cc:	2100      	movs	r1, #0
 800e9ce:	6139      	str	r1, [r7, #16]
 800e9d0:	f003 0308 	and.w	r3, r3, #8
 800e9d4:	617b      	str	r3, [r7, #20]
 800e9d6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e9da:	460b      	mov	r3, r1
 800e9dc:	4313      	orrs	r3, r2
 800e9de:	d011      	beq.n	800ea04 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e9e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9e4:	3328      	adds	r3, #40	@ 0x28
 800e9e6:	2100      	movs	r1, #0
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f001 f9ef 	bl	800fdcc <RCCEx_PLL3_Config>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800e9f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d003      	beq.n	800ea04 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ea00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ea04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0c:	2100      	movs	r1, #0
 800ea0e:	60b9      	str	r1, [r7, #8]
 800ea10:	f003 0310 	and.w	r3, r3, #16
 800ea14:	60fb      	str	r3, [r7, #12]
 800ea16:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	4313      	orrs	r3, r2
 800ea1e:	d011      	beq.n	800ea44 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ea20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea24:	3328      	adds	r3, #40	@ 0x28
 800ea26:	2101      	movs	r1, #1
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f001 f9cf 	bl	800fdcc <RCCEx_PLL3_Config>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ea34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d003      	beq.n	800ea44 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ea40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ea44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4c:	2100      	movs	r1, #0
 800ea4e:	6039      	str	r1, [r7, #0]
 800ea50:	f003 0320 	and.w	r3, r3, #32
 800ea54:	607b      	str	r3, [r7, #4]
 800ea56:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ea5a:	460b      	mov	r3, r1
 800ea5c:	4313      	orrs	r3, r2
 800ea5e:	d011      	beq.n	800ea84 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ea60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ea64:	3328      	adds	r3, #40	@ 0x28
 800ea66:	2102      	movs	r1, #2
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f001 f9af 	bl	800fdcc <RCCEx_PLL3_Config>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ea74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d003      	beq.n	800ea84 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ea80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800ea84:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d101      	bne.n	800ea90 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	e000      	b.n	800ea92 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800ea90:	2301      	movs	r3, #1
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ea9e:	bf00      	nop
 800eaa0:	58024400 	.word	0x58024400

0800eaa4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b090      	sub	sp, #64	@ 0x40
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800eaae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eab2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800eab6:	430b      	orrs	r3, r1
 800eab8:	f040 8094 	bne.w	800ebe4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800eabc:	4b9b      	ldr	r3, [pc, #620]	@ (800ed2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eabe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eac0:	f003 0307 	and.w	r3, r3, #7
 800eac4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800eac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eac8:	2b04      	cmp	r3, #4
 800eaca:	f200 8087 	bhi.w	800ebdc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800eace:	a201      	add	r2, pc, #4	@ (adr r2, 800ead4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ead0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ead4:	0800eae9 	.word	0x0800eae9
 800ead8:	0800eb11 	.word	0x0800eb11
 800eadc:	0800eb39 	.word	0x0800eb39
 800eae0:	0800ebd5 	.word	0x0800ebd5
 800eae4:	0800eb61 	.word	0x0800eb61
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800eae8:	4b90      	ldr	r3, [pc, #576]	@ (800ed2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eaf0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800eaf4:	d108      	bne.n	800eb08 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eaf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eafa:	4618      	mov	r0, r3
 800eafc:	f000 ff62 	bl	800f9c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eb00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eb04:	f000 bc93 	b.w	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eb0c:	f000 bc8f 	b.w	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800eb10:	4b86      	ldr	r3, [pc, #536]	@ (800ed2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eb18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eb1c:	d108      	bne.n	800eb30 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb1e:	f107 0318 	add.w	r3, r7, #24
 800eb22:	4618      	mov	r0, r3
 800eb24:	f000 fca6 	bl	800f474 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800eb28:	69bb      	ldr	r3, [r7, #24]
 800eb2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eb2c:	f000 bc7f 	b.w	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800eb30:	2300      	movs	r3, #0
 800eb32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eb34:	f000 bc7b 	b.w	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800eb38:	4b7c      	ldr	r3, [pc, #496]	@ (800ed2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800eb40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eb44:	d108      	bne.n	800eb58 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb46:	f107 030c 	add.w	r3, r7, #12
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f000 fde6 	bl	800f71c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eb54:	f000 bc6b 	b.w	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eb5c:	f000 bc67 	b.w	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800eb60:	4b72      	ldr	r3, [pc, #456]	@ (800ed2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eb62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb64:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800eb68:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800eb6a:	4b70      	ldr	r3, [pc, #448]	@ (800ed2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	f003 0304 	and.w	r3, r3, #4
 800eb72:	2b04      	cmp	r3, #4
 800eb74:	d10c      	bne.n	800eb90 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800eb76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d109      	bne.n	800eb90 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eb7c:	4b6b      	ldr	r3, [pc, #428]	@ (800ed2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	08db      	lsrs	r3, r3, #3
 800eb82:	f003 0303 	and.w	r3, r3, #3
 800eb86:	4a6a      	ldr	r2, [pc, #424]	@ (800ed30 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800eb88:	fa22 f303 	lsr.w	r3, r2, r3
 800eb8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eb8e:	e01f      	b.n	800ebd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800eb90:	4b66      	ldr	r3, [pc, #408]	@ (800ed2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eb9c:	d106      	bne.n	800ebac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800eb9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eba0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eba4:	d102      	bne.n	800ebac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800eba6:	4b63      	ldr	r3, [pc, #396]	@ (800ed34 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800eba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ebaa:	e011      	b.n	800ebd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ebac:	4b5f      	ldr	r3, [pc, #380]	@ (800ed2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ebb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ebb8:	d106      	bne.n	800ebc8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ebba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ebc0:	d102      	bne.n	800ebc8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ebc2:	4b5d      	ldr	r3, [pc, #372]	@ (800ed38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ebc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ebc6:	e003      	b.n	800ebd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ebcc:	f000 bc2f 	b.w	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ebd0:	f000 bc2d 	b.w	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ebd4:	4b59      	ldr	r3, [pc, #356]	@ (800ed3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ebd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ebd8:	f000 bc29 	b.w	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ebe0:	f000 bc25 	b.w	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ebe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebe8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800ebec:	430b      	orrs	r3, r1
 800ebee:	f040 80a7 	bne.w	800ed40 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ebf2:	4b4e      	ldr	r3, [pc, #312]	@ (800ed2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ebf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ebf6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800ebfa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ebfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebfe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ec02:	d054      	beq.n	800ecae <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ec04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ec0a:	f200 808b 	bhi.w	800ed24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ec0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec10:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ec14:	f000 8083 	beq.w	800ed1e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800ec18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec1a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ec1e:	f200 8081 	bhi.w	800ed24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ec22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ec28:	d02f      	beq.n	800ec8a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ec2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ec30:	d878      	bhi.n	800ed24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ec32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d004      	beq.n	800ec42 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800ec38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ec3e:	d012      	beq.n	800ec66 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800ec40:	e070      	b.n	800ed24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ec42:	4b3a      	ldr	r3, [pc, #232]	@ (800ed2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ec4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ec4e:	d107      	bne.n	800ec60 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ec50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ec54:	4618      	mov	r0, r3
 800ec56:	f000 feb5 	bl	800f9c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ec5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ec5e:	e3e6      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ec60:	2300      	movs	r3, #0
 800ec62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec64:	e3e3      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ec66:	4b31      	ldr	r3, [pc, #196]	@ (800ed2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ec6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ec72:	d107      	bne.n	800ec84 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec74:	f107 0318 	add.w	r3, r7, #24
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f000 fbfb 	bl	800f474 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ec7e:	69bb      	ldr	r3, [r7, #24]
 800ec80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ec82:	e3d4      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ec84:	2300      	movs	r3, #0
 800ec86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec88:	e3d1      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ec8a:	4b28      	ldr	r3, [pc, #160]	@ (800ed2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ec92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec96:	d107      	bne.n	800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec98:	f107 030c 	add.w	r3, r7, #12
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f000 fd3d 	bl	800f71c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eca6:	e3c2      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ecac:	e3bf      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ecae:	4b1f      	ldr	r3, [pc, #124]	@ (800ed2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ecb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ecb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ecb6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ecb8:	4b1c      	ldr	r3, [pc, #112]	@ (800ed2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	f003 0304 	and.w	r3, r3, #4
 800ecc0:	2b04      	cmp	r3, #4
 800ecc2:	d10c      	bne.n	800ecde <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800ecc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d109      	bne.n	800ecde <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ecca:	4b18      	ldr	r3, [pc, #96]	@ (800ed2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	08db      	lsrs	r3, r3, #3
 800ecd0:	f003 0303 	and.w	r3, r3, #3
 800ecd4:	4a16      	ldr	r2, [pc, #88]	@ (800ed30 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ecd6:	fa22 f303 	lsr.w	r3, r2, r3
 800ecda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ecdc:	e01e      	b.n	800ed1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ecde:	4b13      	ldr	r3, [pc, #76]	@ (800ed2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ece6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ecea:	d106      	bne.n	800ecfa <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800ecec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ecf2:	d102      	bne.n	800ecfa <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ecf4:	4b0f      	ldr	r3, [pc, #60]	@ (800ed34 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ecf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ecf8:	e010      	b.n	800ed1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ecfa:	4b0c      	ldr	r3, [pc, #48]	@ (800ed2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ed02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ed06:	d106      	bne.n	800ed16 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ed08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed0e:	d102      	bne.n	800ed16 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ed10:	4b09      	ldr	r3, [pc, #36]	@ (800ed38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ed14:	e002      	b.n	800ed1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ed16:	2300      	movs	r3, #0
 800ed18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ed1a:	e388      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ed1c:	e387      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ed1e:	4b07      	ldr	r3, [pc, #28]	@ (800ed3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ed20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed22:	e384      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ed24:	2300      	movs	r3, #0
 800ed26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed28:	e381      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ed2a:	bf00      	nop
 800ed2c:	58024400 	.word	0x58024400
 800ed30:	03d09000 	.word	0x03d09000
 800ed34:	003d0900 	.word	0x003d0900
 800ed38:	017d7840 	.word	0x017d7840
 800ed3c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ed40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed44:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800ed48:	430b      	orrs	r3, r1
 800ed4a:	f040 809c 	bne.w	800ee86 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ed4e:	4b9e      	ldr	r3, [pc, #632]	@ (800efc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ed50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed52:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ed56:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ed58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ed5e:	d054      	beq.n	800ee0a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800ed60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ed66:	f200 808b 	bhi.w	800ee80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ed6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ed70:	f000 8083 	beq.w	800ee7a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800ed74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ed7a:	f200 8081 	bhi.w	800ee80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ed7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ed84:	d02f      	beq.n	800ede6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ed86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ed8c:	d878      	bhi.n	800ee80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ed8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d004      	beq.n	800ed9e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ed94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ed9a:	d012      	beq.n	800edc2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ed9c:	e070      	b.n	800ee80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ed9e:	4b8a      	ldr	r3, [pc, #552]	@ (800efc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eda6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800edaa:	d107      	bne.n	800edbc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800edac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800edb0:	4618      	mov	r0, r3
 800edb2:	f000 fe07 	bl	800f9c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800edb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800edba:	e338      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800edbc:	2300      	movs	r3, #0
 800edbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800edc0:	e335      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800edc2:	4b81      	ldr	r3, [pc, #516]	@ (800efc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800edca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800edce:	d107      	bne.n	800ede0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800edd0:	f107 0318 	add.w	r3, r7, #24
 800edd4:	4618      	mov	r0, r3
 800edd6:	f000 fb4d 	bl	800f474 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800edda:	69bb      	ldr	r3, [r7, #24]
 800eddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800edde:	e326      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ede0:	2300      	movs	r3, #0
 800ede2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ede4:	e323      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ede6:	4b78      	ldr	r3, [pc, #480]	@ (800efc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800edee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800edf2:	d107      	bne.n	800ee04 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800edf4:	f107 030c 	add.w	r3, r7, #12
 800edf8:	4618      	mov	r0, r3
 800edfa:	f000 fc8f 	bl	800f71c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee02:	e314      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ee04:	2300      	movs	r3, #0
 800ee06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee08:	e311      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ee0a:	4b6f      	ldr	r3, [pc, #444]	@ (800efc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ee0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ee12:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ee14:	4b6c      	ldr	r3, [pc, #432]	@ (800efc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f003 0304 	and.w	r3, r3, #4
 800ee1c:	2b04      	cmp	r3, #4
 800ee1e:	d10c      	bne.n	800ee3a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800ee20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d109      	bne.n	800ee3a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ee26:	4b68      	ldr	r3, [pc, #416]	@ (800efc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	08db      	lsrs	r3, r3, #3
 800ee2c:	f003 0303 	and.w	r3, r3, #3
 800ee30:	4a66      	ldr	r2, [pc, #408]	@ (800efcc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ee32:	fa22 f303 	lsr.w	r3, r2, r3
 800ee36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee38:	e01e      	b.n	800ee78 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ee3a:	4b63      	ldr	r3, [pc, #396]	@ (800efc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ee46:	d106      	bne.n	800ee56 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ee48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ee4e:	d102      	bne.n	800ee56 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ee50:	4b5f      	ldr	r3, [pc, #380]	@ (800efd0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ee52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee54:	e010      	b.n	800ee78 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ee56:	4b5c      	ldr	r3, [pc, #368]	@ (800efc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ee5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ee62:	d106      	bne.n	800ee72 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800ee64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ee6a:	d102      	bne.n	800ee72 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ee6c:	4b59      	ldr	r3, [pc, #356]	@ (800efd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ee6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ee70:	e002      	b.n	800ee78 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ee72:	2300      	movs	r3, #0
 800ee74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ee76:	e2da      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ee78:	e2d9      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ee7a:	4b57      	ldr	r3, [pc, #348]	@ (800efd8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ee7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee7e:	e2d6      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ee80:	2300      	movs	r3, #0
 800ee82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee84:	e2d3      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ee86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee8a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ee8e:	430b      	orrs	r3, r1
 800ee90:	f040 80a7 	bne.w	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ee94:	4b4c      	ldr	r3, [pc, #304]	@ (800efc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ee96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee98:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ee9c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ee9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eea0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800eea4:	d055      	beq.n	800ef52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800eea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eea8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800eeac:	f200 8096 	bhi.w	800efdc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800eeb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeb2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800eeb6:	f000 8084 	beq.w	800efc2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800eeba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eebc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800eec0:	f200 808c 	bhi.w	800efdc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800eec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eeca:	d030      	beq.n	800ef2e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800eecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eed2:	f200 8083 	bhi.w	800efdc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800eed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d004      	beq.n	800eee6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800eedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eee2:	d012      	beq.n	800ef0a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800eee4:	e07a      	b.n	800efdc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800eee6:	4b38      	ldr	r3, [pc, #224]	@ (800efc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eeee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800eef2:	d107      	bne.n	800ef04 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eef4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eef8:	4618      	mov	r0, r3
 800eefa:	f000 fd63 	bl	800f9c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eefe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ef02:	e294      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ef04:	2300      	movs	r3, #0
 800ef06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef08:	e291      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ef0a:	4b2f      	ldr	r3, [pc, #188]	@ (800efc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ef12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ef16:	d107      	bne.n	800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef18:	f107 0318 	add.w	r3, r7, #24
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f000 faa9 	bl	800f474 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ef22:	69bb      	ldr	r3, [r7, #24]
 800ef24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ef26:	e282      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef2c:	e27f      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ef2e:	4b26      	ldr	r3, [pc, #152]	@ (800efc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ef36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ef3a:	d107      	bne.n	800ef4c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef3c:	f107 030c 	add.w	r3, r7, #12
 800ef40:	4618      	mov	r0, r3
 800ef42:	f000 fbeb 	bl	800f71c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ef4a:	e270      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ef50:	e26d      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ef52:	4b1d      	ldr	r3, [pc, #116]	@ (800efc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ef54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ef5a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ef5c:	4b1a      	ldr	r3, [pc, #104]	@ (800efc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	f003 0304 	and.w	r3, r3, #4
 800ef64:	2b04      	cmp	r3, #4
 800ef66:	d10c      	bne.n	800ef82 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800ef68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d109      	bne.n	800ef82 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ef6e:	4b16      	ldr	r3, [pc, #88]	@ (800efc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	08db      	lsrs	r3, r3, #3
 800ef74:	f003 0303 	and.w	r3, r3, #3
 800ef78:	4a14      	ldr	r2, [pc, #80]	@ (800efcc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ef7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ef7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef80:	e01e      	b.n	800efc0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ef82:	4b11      	ldr	r3, [pc, #68]	@ (800efc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef8e:	d106      	bne.n	800ef9e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ef90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ef96:	d102      	bne.n	800ef9e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ef98:	4b0d      	ldr	r3, [pc, #52]	@ (800efd0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ef9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ef9c:	e010      	b.n	800efc0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ef9e:	4b0a      	ldr	r3, [pc, #40]	@ (800efc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800efa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800efaa:	d106      	bne.n	800efba <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800efac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800efb2:	d102      	bne.n	800efba <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800efb4:	4b07      	ldr	r3, [pc, #28]	@ (800efd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800efb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800efb8:	e002      	b.n	800efc0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800efba:	2300      	movs	r3, #0
 800efbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800efbe:	e236      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800efc0:	e235      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800efc2:	4b05      	ldr	r3, [pc, #20]	@ (800efd8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800efc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efc6:	e232      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800efc8:	58024400 	.word	0x58024400
 800efcc:	03d09000 	.word	0x03d09000
 800efd0:	003d0900 	.word	0x003d0900
 800efd4:	017d7840 	.word	0x017d7840
 800efd8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800efdc:	2300      	movs	r3, #0
 800efde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800efe0:	e225      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800efe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800efe6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800efea:	430b      	orrs	r3, r1
 800efec:	f040 8085 	bne.w	800f0fa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800eff0:	4b9c      	ldr	r3, [pc, #624]	@ (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800eff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eff4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800eff8:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800effa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800effc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f000:	d06b      	beq.n	800f0da <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800f002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f004:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f008:	d874      	bhi.n	800f0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f00c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f010:	d056      	beq.n	800f0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800f012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f014:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f018:	d86c      	bhi.n	800f0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f01c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f020:	d03b      	beq.n	800f09a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800f022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f024:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800f028:	d864      	bhi.n	800f0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f02c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f030:	d021      	beq.n	800f076 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800f032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f034:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f038:	d85c      	bhi.n	800f0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800f03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d004      	beq.n	800f04a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800f040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f042:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f046:	d004      	beq.n	800f052 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800f048:	e054      	b.n	800f0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800f04a:	f7fe fb5f 	bl	800d70c <HAL_RCC_GetPCLK1Freq>
 800f04e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f050:	e1ed      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f052:	4b84      	ldr	r3, [pc, #528]	@ (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f05a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f05e:	d107      	bne.n	800f070 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f060:	f107 0318 	add.w	r3, r7, #24
 800f064:	4618      	mov	r0, r3
 800f066:	f000 fa05 	bl	800f474 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f06a:	69fb      	ldr	r3, [r7, #28]
 800f06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f06e:	e1de      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f070:	2300      	movs	r3, #0
 800f072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f074:	e1db      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f076:	4b7b      	ldr	r3, [pc, #492]	@ (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f07e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f082:	d107      	bne.n	800f094 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f084:	f107 030c 	add.w	r3, r7, #12
 800f088:	4618      	mov	r0, r3
 800f08a:	f000 fb47 	bl	800f71c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f092:	e1cc      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f094:	2300      	movs	r3, #0
 800f096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f098:	e1c9      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f09a:	4b72      	ldr	r3, [pc, #456]	@ (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	f003 0304 	and.w	r3, r3, #4
 800f0a2:	2b04      	cmp	r3, #4
 800f0a4:	d109      	bne.n	800f0ba <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f0a6:	4b6f      	ldr	r3, [pc, #444]	@ (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	08db      	lsrs	r3, r3, #3
 800f0ac:	f003 0303 	and.w	r3, r3, #3
 800f0b0:	4a6d      	ldr	r2, [pc, #436]	@ (800f268 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800f0b2:	fa22 f303 	lsr.w	r3, r2, r3
 800f0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f0b8:	e1b9      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0be:	e1b6      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f0c0:	4b68      	ldr	r3, [pc, #416]	@ (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f0c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f0cc:	d102      	bne.n	800f0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800f0ce:	4b67      	ldr	r3, [pc, #412]	@ (800f26c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800f0d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f0d2:	e1ac      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0d8:	e1a9      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f0da:	4b62      	ldr	r3, [pc, #392]	@ (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f0e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f0e6:	d102      	bne.n	800f0ee <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800f0e8:	4b61      	ldr	r3, [pc, #388]	@ (800f270 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800f0ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f0ec:	e19f      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0f2:	e19c      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f0f8:	e199      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800f0fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0fe:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800f102:	430b      	orrs	r3, r1
 800f104:	d173      	bne.n	800f1ee <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800f106:	4b57      	ldr	r3, [pc, #348]	@ (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f10a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f10e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f112:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f116:	d02f      	beq.n	800f178 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800f118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f11a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f11e:	d863      	bhi.n	800f1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800f120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f122:	2b00      	cmp	r3, #0
 800f124:	d004      	beq.n	800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800f126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f12c:	d012      	beq.n	800f154 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800f12e:	e05b      	b.n	800f1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f130:	4b4c      	ldr	r3, [pc, #304]	@ (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f138:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f13c:	d107      	bne.n	800f14e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f13e:	f107 0318 	add.w	r3, r7, #24
 800f142:	4618      	mov	r0, r3
 800f144:	f000 f996 	bl	800f474 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f148:	69bb      	ldr	r3, [r7, #24]
 800f14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f14c:	e16f      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f14e:	2300      	movs	r3, #0
 800f150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f152:	e16c      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f154:	4b43      	ldr	r3, [pc, #268]	@ (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f15c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f160:	d107      	bne.n	800f172 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f162:	f107 030c 	add.w	r3, r7, #12
 800f166:	4618      	mov	r0, r3
 800f168:	f000 fad8 	bl	800f71c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f170:	e15d      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f172:	2300      	movs	r3, #0
 800f174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f176:	e15a      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f178:	4b3a      	ldr	r3, [pc, #232]	@ (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f17a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f17c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f180:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f182:	4b38      	ldr	r3, [pc, #224]	@ (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	f003 0304 	and.w	r3, r3, #4
 800f18a:	2b04      	cmp	r3, #4
 800f18c:	d10c      	bne.n	800f1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800f18e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f190:	2b00      	cmp	r3, #0
 800f192:	d109      	bne.n	800f1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f194:	4b33      	ldr	r3, [pc, #204]	@ (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	08db      	lsrs	r3, r3, #3
 800f19a:	f003 0303 	and.w	r3, r3, #3
 800f19e:	4a32      	ldr	r2, [pc, #200]	@ (800f268 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800f1a0:	fa22 f303 	lsr.w	r3, r2, r3
 800f1a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1a6:	e01e      	b.n	800f1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f1a8:	4b2e      	ldr	r3, [pc, #184]	@ (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f1b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f1b4:	d106      	bne.n	800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800f1b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f1bc:	d102      	bne.n	800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f1be:	4b2b      	ldr	r3, [pc, #172]	@ (800f26c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800f1c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1c2:	e010      	b.n	800f1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f1c4:	4b27      	ldr	r3, [pc, #156]	@ (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f1cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f1d0:	d106      	bne.n	800f1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800f1d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f1d8:	d102      	bne.n	800f1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f1da:	4b25      	ldr	r3, [pc, #148]	@ (800f270 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800f1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f1de:	e002      	b.n	800f1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800f1e4:	e123      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f1e6:	e122      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1ec:	e11f      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f1ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1f2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800f1f6:	430b      	orrs	r3, r1
 800f1f8:	d13c      	bne.n	800f274 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f1fa:	4b1a      	ldr	r3, [pc, #104]	@ (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f1fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f1fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f202:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f206:	2b00      	cmp	r3, #0
 800f208:	d004      	beq.n	800f214 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800f20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f20c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f210:	d012      	beq.n	800f238 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800f212:	e023      	b.n	800f25c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f214:	4b13      	ldr	r3, [pc, #76]	@ (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f21c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f220:	d107      	bne.n	800f232 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f222:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f226:	4618      	mov	r0, r3
 800f228:	f000 fbcc 	bl	800f9c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f230:	e0fd      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f232:	2300      	movs	r3, #0
 800f234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f236:	e0fa      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f238:	4b0a      	ldr	r3, [pc, #40]	@ (800f264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f240:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f244:	d107      	bne.n	800f256 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f246:	f107 0318 	add.w	r3, r7, #24
 800f24a:	4618      	mov	r0, r3
 800f24c:	f000 f912 	bl	800f474 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f250:	6a3b      	ldr	r3, [r7, #32]
 800f252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f254:	e0eb      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f256:	2300      	movs	r3, #0
 800f258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f25a:	e0e8      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800f25c:	2300      	movs	r3, #0
 800f25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f260:	e0e5      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800f262:	bf00      	nop
 800f264:	58024400 	.word	0x58024400
 800f268:	03d09000 	.word	0x03d09000
 800f26c:	003d0900 	.word	0x003d0900
 800f270:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f274:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f278:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800f27c:	430b      	orrs	r3, r1
 800f27e:	f040 8085 	bne.w	800f38c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800f282:	4b6d      	ldr	r3, [pc, #436]	@ (800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f286:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800f28a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f28e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f292:	d06b      	beq.n	800f36c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800f294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f296:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f29a:	d874      	bhi.n	800f386 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f29e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f2a2:	d056      	beq.n	800f352 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800f2a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f2aa:	d86c      	bhi.n	800f386 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f2b2:	d03b      	beq.n	800f32c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800f2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f2ba:	d864      	bhi.n	800f386 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f2c2:	d021      	beq.n	800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800f2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f2ca:	d85c      	bhi.n	800f386 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800f2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d004      	beq.n	800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800f2d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f2d8:	d004      	beq.n	800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800f2da:	e054      	b.n	800f386 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f2dc:	f000 f8b4 	bl	800f448 <HAL_RCCEx_GetD3PCLK1Freq>
 800f2e0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f2e2:	e0a4      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f2e4:	4b54      	ldr	r3, [pc, #336]	@ (800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f2ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f2f0:	d107      	bne.n	800f302 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f2f2:	f107 0318 	add.w	r3, r7, #24
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f000 f8bc 	bl	800f474 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f2fc:	69fb      	ldr	r3, [r7, #28]
 800f2fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f300:	e095      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f302:	2300      	movs	r3, #0
 800f304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f306:	e092      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f308:	4b4b      	ldr	r3, [pc, #300]	@ (800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f310:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f314:	d107      	bne.n	800f326 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f316:	f107 030c 	add.w	r3, r7, #12
 800f31a:	4618      	mov	r0, r3
 800f31c:	f000 f9fe 	bl	800f71c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f320:	693b      	ldr	r3, [r7, #16]
 800f322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f324:	e083      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f326:	2300      	movs	r3, #0
 800f328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f32a:	e080      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f32c:	4b42      	ldr	r3, [pc, #264]	@ (800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	f003 0304 	and.w	r3, r3, #4
 800f334:	2b04      	cmp	r3, #4
 800f336:	d109      	bne.n	800f34c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f338:	4b3f      	ldr	r3, [pc, #252]	@ (800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	08db      	lsrs	r3, r3, #3
 800f33e:	f003 0303 	and.w	r3, r3, #3
 800f342:	4a3e      	ldr	r2, [pc, #248]	@ (800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800f344:	fa22 f303 	lsr.w	r3, r2, r3
 800f348:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f34a:	e070      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f34c:	2300      	movs	r3, #0
 800f34e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f350:	e06d      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f352:	4b39      	ldr	r3, [pc, #228]	@ (800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f35a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f35e:	d102      	bne.n	800f366 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800f360:	4b37      	ldr	r3, [pc, #220]	@ (800f440 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800f362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f364:	e063      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f366:	2300      	movs	r3, #0
 800f368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f36a:	e060      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f36c:	4b32      	ldr	r3, [pc, #200]	@ (800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f378:	d102      	bne.n	800f380 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800f37a:	4b32      	ldr	r3, [pc, #200]	@ (800f444 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800f37c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f37e:	e056      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f380:	2300      	movs	r3, #0
 800f382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f384:	e053      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800f386:	2300      	movs	r3, #0
 800f388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f38a:	e050      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800f38c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f390:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800f394:	430b      	orrs	r3, r1
 800f396:	d148      	bne.n	800f42a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800f398:	4b27      	ldr	r3, [pc, #156]	@ (800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f39a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f39c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800f3a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800f3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f3a8:	d02a      	beq.n	800f400 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800f3aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f3b0:	d838      	bhi.n	800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800f3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d004      	beq.n	800f3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800f3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f3be:	d00d      	beq.n	800f3dc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800f3c0:	e030      	b.n	800f424 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f3c2:	4b1d      	ldr	r3, [pc, #116]	@ (800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f3ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f3ce:	d102      	bne.n	800f3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800f3d0:	4b1c      	ldr	r3, [pc, #112]	@ (800f444 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800f3d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3d4:	e02b      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3da:	e028      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f3dc:	4b16      	ldr	r3, [pc, #88]	@ (800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f3e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800f3e8:	d107      	bne.n	800f3fa <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f3ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f000 fae8 	bl	800f9c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3f8:	e019      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3fe:	e016      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f400:	4b0d      	ldr	r3, [pc, #52]	@ (800f438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f408:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f40c:	d107      	bne.n	800f41e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f40e:	f107 0318 	add.w	r3, r7, #24
 800f412:	4618      	mov	r0, r3
 800f414:	f000 f82e 	bl	800f474 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f418:	69fb      	ldr	r3, [r7, #28]
 800f41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f41c:	e007      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800f41e:	2300      	movs	r3, #0
 800f420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f422:	e004      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800f424:	2300      	movs	r3, #0
 800f426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f428:	e001      	b.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800f42a:	2300      	movs	r3, #0
 800f42c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800f42e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f430:	4618      	mov	r0, r3
 800f432:	3740      	adds	r7, #64	@ 0x40
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}
 800f438:	58024400 	.word	0x58024400
 800f43c:	03d09000 	.word	0x03d09000
 800f440:	003d0900 	.word	0x003d0900
 800f444:	017d7840 	.word	0x017d7840

0800f448 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f44c:	f7fe f92e 	bl	800d6ac <HAL_RCC_GetHCLKFreq>
 800f450:	4602      	mov	r2, r0
 800f452:	4b06      	ldr	r3, [pc, #24]	@ (800f46c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f454:	6a1b      	ldr	r3, [r3, #32]
 800f456:	091b      	lsrs	r3, r3, #4
 800f458:	f003 0307 	and.w	r3, r3, #7
 800f45c:	4904      	ldr	r1, [pc, #16]	@ (800f470 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f45e:	5ccb      	ldrb	r3, [r1, r3]
 800f460:	f003 031f 	and.w	r3, r3, #31
 800f464:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f468:	4618      	mov	r0, r3
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	58024400 	.word	0x58024400
 800f470:	0801a4b4 	.word	0x0801a4b4

0800f474 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800f474:	b480      	push	{r7}
 800f476:	b089      	sub	sp, #36	@ 0x24
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f47c:	4ba1      	ldr	r3, [pc, #644]	@ (800f704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f47e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f480:	f003 0303 	and.w	r3, r3, #3
 800f484:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f486:	4b9f      	ldr	r3, [pc, #636]	@ (800f704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f48a:	0b1b      	lsrs	r3, r3, #12
 800f48c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f490:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f492:	4b9c      	ldr	r3, [pc, #624]	@ (800f704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f496:	091b      	lsrs	r3, r3, #4
 800f498:	f003 0301 	and.w	r3, r3, #1
 800f49c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f49e:	4b99      	ldr	r3, [pc, #612]	@ (800f704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f4a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4a2:	08db      	lsrs	r3, r3, #3
 800f4a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f4a8:	693a      	ldr	r2, [r7, #16]
 800f4aa:	fb02 f303 	mul.w	r3, r2, r3
 800f4ae:	ee07 3a90 	vmov	s15, r3
 800f4b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	f000 8111 	beq.w	800f6e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f4c2:	69bb      	ldr	r3, [r7, #24]
 800f4c4:	2b02      	cmp	r3, #2
 800f4c6:	f000 8083 	beq.w	800f5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f4ca:	69bb      	ldr	r3, [r7, #24]
 800f4cc:	2b02      	cmp	r3, #2
 800f4ce:	f200 80a1 	bhi.w	800f614 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f4d2:	69bb      	ldr	r3, [r7, #24]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d003      	beq.n	800f4e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f4d8:	69bb      	ldr	r3, [r7, #24]
 800f4da:	2b01      	cmp	r3, #1
 800f4dc:	d056      	beq.n	800f58c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f4de:	e099      	b.n	800f614 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f4e0:	4b88      	ldr	r3, [pc, #544]	@ (800f704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	f003 0320 	and.w	r3, r3, #32
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d02d      	beq.n	800f548 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f4ec:	4b85      	ldr	r3, [pc, #532]	@ (800f704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	08db      	lsrs	r3, r3, #3
 800f4f2:	f003 0303 	and.w	r3, r3, #3
 800f4f6:	4a84      	ldr	r2, [pc, #528]	@ (800f708 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f4f8:	fa22 f303 	lsr.w	r3, r2, r3
 800f4fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	ee07 3a90 	vmov	s15, r3
 800f504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	ee07 3a90 	vmov	s15, r3
 800f50e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f516:	4b7b      	ldr	r3, [pc, #492]	@ (800f704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f51a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f51e:	ee07 3a90 	vmov	s15, r3
 800f522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f526:	ed97 6a03 	vldr	s12, [r7, #12]
 800f52a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f70c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f52e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f536:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f53a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f53e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f542:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f546:	e087      	b.n	800f658 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	ee07 3a90 	vmov	s15, r3
 800f54e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f552:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f710 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f55a:	4b6a      	ldr	r3, [pc, #424]	@ (800f704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f55c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f55e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f562:	ee07 3a90 	vmov	s15, r3
 800f566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f56a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f56e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f70c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f57a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f57e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f582:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f58a:	e065      	b.n	800f658 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	ee07 3a90 	vmov	s15, r3
 800f592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f596:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f59a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f59e:	4b59      	ldr	r3, [pc, #356]	@ (800f704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f5a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5a6:	ee07 3a90 	vmov	s15, r3
 800f5aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f5ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800f5b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f70c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f5b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f5ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f5be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f5c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f5c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f5ce:	e043      	b.n	800f658 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	ee07 3a90 	vmov	s15, r3
 800f5d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f718 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f5de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f5e2:	4b48      	ldr	r3, [pc, #288]	@ (800f704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f5e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5ea:	ee07 3a90 	vmov	s15, r3
 800f5ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f5f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f5f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f70c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f5fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f5fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f602:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f60a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f60e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f612:	e021      	b.n	800f658 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f614:	697b      	ldr	r3, [r7, #20]
 800f616:	ee07 3a90 	vmov	s15, r3
 800f61a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f61e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f626:	4b37      	ldr	r3, [pc, #220]	@ (800f704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f62a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f62e:	ee07 3a90 	vmov	s15, r3
 800f632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f636:	ed97 6a03 	vldr	s12, [r7, #12]
 800f63a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f70c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f63e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f64a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f64e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f652:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f656:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f658:	4b2a      	ldr	r3, [pc, #168]	@ (800f704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f65a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f65c:	0a5b      	lsrs	r3, r3, #9
 800f65e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f662:	ee07 3a90 	vmov	s15, r3
 800f666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f66a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f66e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f672:	edd7 6a07 	vldr	s13, [r7, #28]
 800f676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f67a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f67e:	ee17 2a90 	vmov	r2, s15
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f686:	4b1f      	ldr	r3, [pc, #124]	@ (800f704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f68a:	0c1b      	lsrs	r3, r3, #16
 800f68c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f690:	ee07 3a90 	vmov	s15, r3
 800f694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f698:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f69c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f6a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800f6a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f6a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f6ac:	ee17 2a90 	vmov	r2, s15
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800f6b4:	4b13      	ldr	r3, [pc, #76]	@ (800f704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6b8:	0e1b      	lsrs	r3, r3, #24
 800f6ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f6be:	ee07 3a90 	vmov	s15, r3
 800f6c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f6ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f6ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800f6d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f6d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f6da:	ee17 2a90 	vmov	r2, s15
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f6e2:	e008      	b.n	800f6f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	609a      	str	r2, [r3, #8]
}
 800f6f6:	bf00      	nop
 800f6f8:	3724      	adds	r7, #36	@ 0x24
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f700:	4770      	bx	lr
 800f702:	bf00      	nop
 800f704:	58024400 	.word	0x58024400
 800f708:	03d09000 	.word	0x03d09000
 800f70c:	46000000 	.word	0x46000000
 800f710:	4c742400 	.word	0x4c742400
 800f714:	4a742400 	.word	0x4a742400
 800f718:	4bbebc20 	.word	0x4bbebc20

0800f71c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800f71c:	b480      	push	{r7}
 800f71e:	b089      	sub	sp, #36	@ 0x24
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f724:	4ba1      	ldr	r3, [pc, #644]	@ (800f9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f728:	f003 0303 	and.w	r3, r3, #3
 800f72c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f72e:	4b9f      	ldr	r3, [pc, #636]	@ (800f9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f732:	0d1b      	lsrs	r3, r3, #20
 800f734:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f738:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f73a:	4b9c      	ldr	r3, [pc, #624]	@ (800f9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f73c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f73e:	0a1b      	lsrs	r3, r3, #8
 800f740:	f003 0301 	and.w	r3, r3, #1
 800f744:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f746:	4b99      	ldr	r3, [pc, #612]	@ (800f9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f74a:	08db      	lsrs	r3, r3, #3
 800f74c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f750:	693a      	ldr	r2, [r7, #16]
 800f752:	fb02 f303 	mul.w	r3, r2, r3
 800f756:	ee07 3a90 	vmov	s15, r3
 800f75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f75e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	2b00      	cmp	r3, #0
 800f766:	f000 8111 	beq.w	800f98c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f76a:	69bb      	ldr	r3, [r7, #24]
 800f76c:	2b02      	cmp	r3, #2
 800f76e:	f000 8083 	beq.w	800f878 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f772:	69bb      	ldr	r3, [r7, #24]
 800f774:	2b02      	cmp	r3, #2
 800f776:	f200 80a1 	bhi.w	800f8bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f77a:	69bb      	ldr	r3, [r7, #24]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d003      	beq.n	800f788 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f780:	69bb      	ldr	r3, [r7, #24]
 800f782:	2b01      	cmp	r3, #1
 800f784:	d056      	beq.n	800f834 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f786:	e099      	b.n	800f8bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f788:	4b88      	ldr	r3, [pc, #544]	@ (800f9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	f003 0320 	and.w	r3, r3, #32
 800f790:	2b00      	cmp	r3, #0
 800f792:	d02d      	beq.n	800f7f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f794:	4b85      	ldr	r3, [pc, #532]	@ (800f9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	08db      	lsrs	r3, r3, #3
 800f79a:	f003 0303 	and.w	r3, r3, #3
 800f79e:	4a84      	ldr	r2, [pc, #528]	@ (800f9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f7a0:	fa22 f303 	lsr.w	r3, r2, r3
 800f7a4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	ee07 3a90 	vmov	s15, r3
 800f7ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	ee07 3a90 	vmov	s15, r3
 800f7b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f7be:	4b7b      	ldr	r3, [pc, #492]	@ (800f9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f7c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f7c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7c6:	ee07 3a90 	vmov	s15, r3
 800f7ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f7ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800f7d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f7d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f7da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f7de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f7e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f7e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f7ee:	e087      	b.n	800f900 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	ee07 3a90 	vmov	s15, r3
 800f7f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f7fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f802:	4b6a      	ldr	r3, [pc, #424]	@ (800f9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f80a:	ee07 3a90 	vmov	s15, r3
 800f80e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f812:	ed97 6a03 	vldr	s12, [r7, #12]
 800f816:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f81a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f81e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f82a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f82e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f832:	e065      	b.n	800f900 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	ee07 3a90 	vmov	s15, r3
 800f83a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f83e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f9bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f846:	4b59      	ldr	r3, [pc, #356]	@ (800f9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f84a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f84e:	ee07 3a90 	vmov	s15, r3
 800f852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f856:	ed97 6a03 	vldr	s12, [r7, #12]
 800f85a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f85e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f86a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f86e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f876:	e043      	b.n	800f900 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	ee07 3a90 	vmov	s15, r3
 800f87e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f882:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800f886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f88a:	4b48      	ldr	r3, [pc, #288]	@ (800f9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f88c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f88e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f892:	ee07 3a90 	vmov	s15, r3
 800f896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f89a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f89e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f8a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f8a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f8aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f8ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f8b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f8ba:	e021      	b.n	800f900 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	ee07 3a90 	vmov	s15, r3
 800f8c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8c6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f9bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f8ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f8ce:	4b37      	ldr	r3, [pc, #220]	@ (800f9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f8d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8d6:	ee07 3a90 	vmov	s15, r3
 800f8da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f8de:	ed97 6a03 	vldr	s12, [r7, #12]
 800f8e2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f8e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f8ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f8ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f8f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f8f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f8fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800f900:	4b2a      	ldr	r3, [pc, #168]	@ (800f9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f904:	0a5b      	lsrs	r3, r3, #9
 800f906:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f90a:	ee07 3a90 	vmov	s15, r3
 800f90e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f912:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f916:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f91a:	edd7 6a07 	vldr	s13, [r7, #28]
 800f91e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f926:	ee17 2a90 	vmov	r2, s15
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800f92e:	4b1f      	ldr	r3, [pc, #124]	@ (800f9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f932:	0c1b      	lsrs	r3, r3, #16
 800f934:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f938:	ee07 3a90 	vmov	s15, r3
 800f93c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f940:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f944:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f948:	edd7 6a07 	vldr	s13, [r7, #28]
 800f94c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f954:	ee17 2a90 	vmov	r2, s15
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800f95c:	4b13      	ldr	r3, [pc, #76]	@ (800f9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f95e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f960:	0e1b      	lsrs	r3, r3, #24
 800f962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f966:	ee07 3a90 	vmov	s15, r3
 800f96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f96e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f972:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f976:	edd7 6a07 	vldr	s13, [r7, #28]
 800f97a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f97e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f982:	ee17 2a90 	vmov	r2, s15
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f98a:	e008      	b.n	800f99e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2200      	movs	r2, #0
 800f990:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2200      	movs	r2, #0
 800f996:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2200      	movs	r2, #0
 800f99c:	609a      	str	r2, [r3, #8]
}
 800f99e:	bf00      	nop
 800f9a0:	3724      	adds	r7, #36	@ 0x24
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a8:	4770      	bx	lr
 800f9aa:	bf00      	nop
 800f9ac:	58024400 	.word	0x58024400
 800f9b0:	03d09000 	.word	0x03d09000
 800f9b4:	46000000 	.word	0x46000000
 800f9b8:	4c742400 	.word	0x4c742400
 800f9bc:	4a742400 	.word	0x4a742400
 800f9c0:	4bbebc20 	.word	0x4bbebc20

0800f9c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b089      	sub	sp, #36	@ 0x24
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f9cc:	4ba0      	ldr	r3, [pc, #640]	@ (800fc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f9ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9d0:	f003 0303 	and.w	r3, r3, #3
 800f9d4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800f9d6:	4b9e      	ldr	r3, [pc, #632]	@ (800fc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f9d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9da:	091b      	lsrs	r3, r3, #4
 800f9dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f9e0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800f9e2:	4b9b      	ldr	r3, [pc, #620]	@ (800fc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f9e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9e6:	f003 0301 	and.w	r3, r3, #1
 800f9ea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f9ec:	4b98      	ldr	r3, [pc, #608]	@ (800fc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f9ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f9f0:	08db      	lsrs	r3, r3, #3
 800f9f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f9f6:	693a      	ldr	r2, [r7, #16]
 800f9f8:	fb02 f303 	mul.w	r3, r2, r3
 800f9fc:	ee07 3a90 	vmov	s15, r3
 800fa00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa04:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	f000 8111 	beq.w	800fc32 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800fa10:	69bb      	ldr	r3, [r7, #24]
 800fa12:	2b02      	cmp	r3, #2
 800fa14:	f000 8083 	beq.w	800fb1e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800fa18:	69bb      	ldr	r3, [r7, #24]
 800fa1a:	2b02      	cmp	r3, #2
 800fa1c:	f200 80a1 	bhi.w	800fb62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800fa20:	69bb      	ldr	r3, [r7, #24]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d003      	beq.n	800fa2e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800fa26:	69bb      	ldr	r3, [r7, #24]
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d056      	beq.n	800fada <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800fa2c:	e099      	b.n	800fb62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fa2e:	4b88      	ldr	r3, [pc, #544]	@ (800fc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	f003 0320 	and.w	r3, r3, #32
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d02d      	beq.n	800fa96 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fa3a:	4b85      	ldr	r3, [pc, #532]	@ (800fc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	08db      	lsrs	r3, r3, #3
 800fa40:	f003 0303 	and.w	r3, r3, #3
 800fa44:	4a83      	ldr	r2, [pc, #524]	@ (800fc54 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800fa46:	fa22 f303 	lsr.w	r3, r2, r3
 800fa4a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	ee07 3a90 	vmov	s15, r3
 800fa52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	ee07 3a90 	vmov	s15, r3
 800fa5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa64:	4b7a      	ldr	r3, [pc, #488]	@ (800fc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fa66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa6c:	ee07 3a90 	vmov	s15, r3
 800fa70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa74:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa78:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800fc58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fa7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa90:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fa94:	e087      	b.n	800fba6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fa96:	697b      	ldr	r3, [r7, #20]
 800fa98:	ee07 3a90 	vmov	s15, r3
 800fa9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800faa0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800fc5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800faa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800faa8:	4b69      	ldr	r3, [pc, #420]	@ (800fc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800faaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800faac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fab0:	ee07 3a90 	vmov	s15, r3
 800fab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fab8:	ed97 6a03 	vldr	s12, [r7, #12]
 800fabc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800fc58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fac0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fac4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fac8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800facc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fad4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fad8:	e065      	b.n	800fba6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	ee07 3a90 	vmov	s15, r3
 800fae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fae4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800fc60 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800fae8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800faec:	4b58      	ldr	r3, [pc, #352]	@ (800fc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800faee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800faf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800faf4:	ee07 3a90 	vmov	s15, r3
 800faf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fafc:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb00:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800fc58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fb04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fb10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fb1c:	e043      	b.n	800fba6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	ee07 3a90 	vmov	s15, r3
 800fb24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb28:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800fc64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800fb2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb30:	4b47      	ldr	r3, [pc, #284]	@ (800fc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fb32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb38:	ee07 3a90 	vmov	s15, r3
 800fb3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb40:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb44:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800fc58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fb48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fb54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fb60:	e021      	b.n	800fba6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	ee07 3a90 	vmov	s15, r3
 800fb68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb6c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800fc5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fb70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb74:	4b36      	ldr	r3, [pc, #216]	@ (800fc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fb76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb7c:	ee07 3a90 	vmov	s15, r3
 800fb80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb84:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb88:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800fc58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fb8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fb98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fba0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fba4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800fba6:	4b2a      	ldr	r3, [pc, #168]	@ (800fc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fbaa:	0a5b      	lsrs	r3, r3, #9
 800fbac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fbb0:	ee07 3a90 	vmov	s15, r3
 800fbb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fbbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fbc0:	edd7 6a07 	vldr	s13, [r7, #28]
 800fbc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fbc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fbcc:	ee17 2a90 	vmov	r2, s15
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800fbd4:	4b1e      	ldr	r3, [pc, #120]	@ (800fc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fbd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fbd8:	0c1b      	lsrs	r3, r3, #16
 800fbda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fbde:	ee07 3a90 	vmov	s15, r3
 800fbe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbe6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fbea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fbee:	edd7 6a07 	vldr	s13, [r7, #28]
 800fbf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fbf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fbfa:	ee17 2a90 	vmov	r2, s15
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800fc02:	4b13      	ldr	r3, [pc, #76]	@ (800fc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc06:	0e1b      	lsrs	r3, r3, #24
 800fc08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc0c:	ee07 3a90 	vmov	s15, r3
 800fc10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fc18:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fc1c:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc28:	ee17 2a90 	vmov	r2, s15
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800fc30:	e008      	b.n	800fc44 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2200      	movs	r2, #0
 800fc36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2200      	movs	r2, #0
 800fc42:	609a      	str	r2, [r3, #8]
}
 800fc44:	bf00      	nop
 800fc46:	3724      	adds	r7, #36	@ 0x24
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4e:	4770      	bx	lr
 800fc50:	58024400 	.word	0x58024400
 800fc54:	03d09000 	.word	0x03d09000
 800fc58:	46000000 	.word	0x46000000
 800fc5c:	4c742400 	.word	0x4c742400
 800fc60:	4a742400 	.word	0x4a742400
 800fc64:	4bbebc20 	.word	0x4bbebc20

0800fc68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b084      	sub	sp, #16
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fc72:	2300      	movs	r3, #0
 800fc74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fc76:	4b53      	ldr	r3, [pc, #332]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fc78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc7a:	f003 0303 	and.w	r3, r3, #3
 800fc7e:	2b03      	cmp	r3, #3
 800fc80:	d101      	bne.n	800fc86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800fc82:	2301      	movs	r3, #1
 800fc84:	e099      	b.n	800fdba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800fc86:	4b4f      	ldr	r3, [pc, #316]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	4a4e      	ldr	r2, [pc, #312]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fc8c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800fc90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fc92:	f7f3 fb9b 	bl	80033cc <HAL_GetTick>
 800fc96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fc98:	e008      	b.n	800fcac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fc9a:	f7f3 fb97 	bl	80033cc <HAL_GetTick>
 800fc9e:	4602      	mov	r2, r0
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	1ad3      	subs	r3, r2, r3
 800fca4:	2b02      	cmp	r3, #2
 800fca6:	d901      	bls.n	800fcac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fca8:	2303      	movs	r3, #3
 800fcaa:	e086      	b.n	800fdba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fcac:	4b45      	ldr	r3, [pc, #276]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d1f0      	bne.n	800fc9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800fcb8:	4b42      	ldr	r3, [pc, #264]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fcba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcbc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	031b      	lsls	r3, r3, #12
 800fcc6:	493f      	ldr	r1, [pc, #252]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fcc8:	4313      	orrs	r3, r2
 800fcca:	628b      	str	r3, [r1, #40]	@ 0x28
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	685b      	ldr	r3, [r3, #4]
 800fcd0:	3b01      	subs	r3, #1
 800fcd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	689b      	ldr	r3, [r3, #8]
 800fcda:	3b01      	subs	r3, #1
 800fcdc:	025b      	lsls	r3, r3, #9
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	431a      	orrs	r2, r3
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	68db      	ldr	r3, [r3, #12]
 800fce6:	3b01      	subs	r3, #1
 800fce8:	041b      	lsls	r3, r3, #16
 800fcea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800fcee:	431a      	orrs	r2, r3
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	691b      	ldr	r3, [r3, #16]
 800fcf4:	3b01      	subs	r3, #1
 800fcf6:	061b      	lsls	r3, r3, #24
 800fcf8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800fcfc:	4931      	ldr	r1, [pc, #196]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fcfe:	4313      	orrs	r3, r2
 800fd00:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800fd02:	4b30      	ldr	r3, [pc, #192]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fd04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	695b      	ldr	r3, [r3, #20]
 800fd0e:	492d      	ldr	r1, [pc, #180]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fd10:	4313      	orrs	r3, r2
 800fd12:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800fd14:	4b2b      	ldr	r3, [pc, #172]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fd16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd18:	f023 0220 	bic.w	r2, r3, #32
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	699b      	ldr	r3, [r3, #24]
 800fd20:	4928      	ldr	r1, [pc, #160]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fd22:	4313      	orrs	r3, r2
 800fd24:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800fd26:	4b27      	ldr	r3, [pc, #156]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fd28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd2a:	4a26      	ldr	r2, [pc, #152]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fd2c:	f023 0310 	bic.w	r3, r3, #16
 800fd30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800fd32:	4b24      	ldr	r3, [pc, #144]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fd34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fd36:	4b24      	ldr	r3, [pc, #144]	@ (800fdc8 <RCCEx_PLL2_Config+0x160>)
 800fd38:	4013      	ands	r3, r2
 800fd3a:	687a      	ldr	r2, [r7, #4]
 800fd3c:	69d2      	ldr	r2, [r2, #28]
 800fd3e:	00d2      	lsls	r2, r2, #3
 800fd40:	4920      	ldr	r1, [pc, #128]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fd42:	4313      	orrs	r3, r2
 800fd44:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800fd46:	4b1f      	ldr	r3, [pc, #124]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fd48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd4a:	4a1e      	ldr	r2, [pc, #120]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fd4c:	f043 0310 	orr.w	r3, r3, #16
 800fd50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d106      	bne.n	800fd66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800fd58:	4b1a      	ldr	r3, [pc, #104]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fd5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd5c:	4a19      	ldr	r2, [pc, #100]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fd5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fd62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fd64:	e00f      	b.n	800fd86 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	d106      	bne.n	800fd7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800fd6c:	4b15      	ldr	r3, [pc, #84]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fd6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd70:	4a14      	ldr	r2, [pc, #80]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fd72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fd76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fd78:	e005      	b.n	800fd86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800fd7a:	4b12      	ldr	r3, [pc, #72]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fd7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd7e:	4a11      	ldr	r2, [pc, #68]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fd80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800fd84:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800fd86:	4b0f      	ldr	r3, [pc, #60]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	4a0e      	ldr	r2, [pc, #56]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fd8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fd90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fd92:	f7f3 fb1b 	bl	80033cc <HAL_GetTick>
 800fd96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fd98:	e008      	b.n	800fdac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fd9a:	f7f3 fb17 	bl	80033cc <HAL_GetTick>
 800fd9e:	4602      	mov	r2, r0
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	1ad3      	subs	r3, r2, r3
 800fda4:	2b02      	cmp	r3, #2
 800fda6:	d901      	bls.n	800fdac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800fda8:	2303      	movs	r3, #3
 800fdaa:	e006      	b.n	800fdba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fdac:	4b05      	ldr	r3, [pc, #20]	@ (800fdc4 <RCCEx_PLL2_Config+0x15c>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d0f0      	beq.n	800fd9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800fdb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3710      	adds	r7, #16
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}
 800fdc2:	bf00      	nop
 800fdc4:	58024400 	.word	0x58024400
 800fdc8:	ffff0007 	.word	0xffff0007

0800fdcc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b084      	sub	sp, #16
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fdda:	4b53      	ldr	r3, [pc, #332]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800fddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdde:	f003 0303 	and.w	r3, r3, #3
 800fde2:	2b03      	cmp	r3, #3
 800fde4:	d101      	bne.n	800fdea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800fde6:	2301      	movs	r3, #1
 800fde8:	e099      	b.n	800ff1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800fdea:	4b4f      	ldr	r3, [pc, #316]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	4a4e      	ldr	r2, [pc, #312]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800fdf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fdf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fdf6:	f7f3 fae9 	bl	80033cc <HAL_GetTick>
 800fdfa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fdfc:	e008      	b.n	800fe10 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800fdfe:	f7f3 fae5 	bl	80033cc <HAL_GetTick>
 800fe02:	4602      	mov	r2, r0
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	1ad3      	subs	r3, r2, r3
 800fe08:	2b02      	cmp	r3, #2
 800fe0a:	d901      	bls.n	800fe10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fe0c:	2303      	movs	r3, #3
 800fe0e:	e086      	b.n	800ff1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fe10:	4b45      	ldr	r3, [pc, #276]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d1f0      	bne.n	800fdfe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800fe1c:	4b42      	ldr	r3, [pc, #264]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800fe1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe20:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	051b      	lsls	r3, r3, #20
 800fe2a:	493f      	ldr	r1, [pc, #252]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800fe2c:	4313      	orrs	r3, r2
 800fe2e:	628b      	str	r3, [r1, #40]	@ 0x28
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	685b      	ldr	r3, [r3, #4]
 800fe34:	3b01      	subs	r3, #1
 800fe36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	689b      	ldr	r3, [r3, #8]
 800fe3e:	3b01      	subs	r3, #1
 800fe40:	025b      	lsls	r3, r3, #9
 800fe42:	b29b      	uxth	r3, r3
 800fe44:	431a      	orrs	r2, r3
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	68db      	ldr	r3, [r3, #12]
 800fe4a:	3b01      	subs	r3, #1
 800fe4c:	041b      	lsls	r3, r3, #16
 800fe4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800fe52:	431a      	orrs	r2, r3
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	691b      	ldr	r3, [r3, #16]
 800fe58:	3b01      	subs	r3, #1
 800fe5a:	061b      	lsls	r3, r3, #24
 800fe5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800fe60:	4931      	ldr	r1, [pc, #196]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800fe62:	4313      	orrs	r3, r2
 800fe64:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800fe66:	4b30      	ldr	r3, [pc, #192]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800fe68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe6a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	695b      	ldr	r3, [r3, #20]
 800fe72:	492d      	ldr	r1, [pc, #180]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800fe74:	4313      	orrs	r3, r2
 800fe76:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800fe78:	4b2b      	ldr	r3, [pc, #172]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800fe7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe7c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	699b      	ldr	r3, [r3, #24]
 800fe84:	4928      	ldr	r1, [pc, #160]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800fe86:	4313      	orrs	r3, r2
 800fe88:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800fe8a:	4b27      	ldr	r3, [pc, #156]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800fe8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe8e:	4a26      	ldr	r2, [pc, #152]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800fe90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fe94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800fe96:	4b24      	ldr	r3, [pc, #144]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800fe98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fe9a:	4b24      	ldr	r3, [pc, #144]	@ (800ff2c <RCCEx_PLL3_Config+0x160>)
 800fe9c:	4013      	ands	r3, r2
 800fe9e:	687a      	ldr	r2, [r7, #4]
 800fea0:	69d2      	ldr	r2, [r2, #28]
 800fea2:	00d2      	lsls	r2, r2, #3
 800fea4:	4920      	ldr	r1, [pc, #128]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800fea6:	4313      	orrs	r3, r2
 800fea8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800feaa:	4b1f      	ldr	r3, [pc, #124]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800feac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800feae:	4a1e      	ldr	r2, [pc, #120]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800feb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800feb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d106      	bne.n	800feca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800febc:	4b1a      	ldr	r3, [pc, #104]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800febe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fec0:	4a19      	ldr	r2, [pc, #100]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800fec2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800fec6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fec8:	e00f      	b.n	800feea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	2b01      	cmp	r3, #1
 800fece:	d106      	bne.n	800fede <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800fed0:	4b15      	ldr	r3, [pc, #84]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800fed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fed4:	4a14      	ldr	r2, [pc, #80]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800fed6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800feda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800fedc:	e005      	b.n	800feea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800fede:	4b12      	ldr	r3, [pc, #72]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800fee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fee2:	4a11      	ldr	r2, [pc, #68]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800fee4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fee8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800feea:	4b0f      	ldr	r3, [pc, #60]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	4a0e      	ldr	r2, [pc, #56]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800fef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fef6:	f7f3 fa69 	bl	80033cc <HAL_GetTick>
 800fefa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fefc:	e008      	b.n	800ff10 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800fefe:	f7f3 fa65 	bl	80033cc <HAL_GetTick>
 800ff02:	4602      	mov	r2, r0
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	1ad3      	subs	r3, r2, r3
 800ff08:	2b02      	cmp	r3, #2
 800ff0a:	d901      	bls.n	800ff10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ff0c:	2303      	movs	r3, #3
 800ff0e:	e006      	b.n	800ff1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ff10:	4b05      	ldr	r3, [pc, #20]	@ (800ff28 <RCCEx_PLL3_Config+0x15c>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d0f0      	beq.n	800fefe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ff1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3710      	adds	r7, #16
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}
 800ff26:	bf00      	nop
 800ff28:	58024400 	.word	0x58024400
 800ff2c:	ffff0007 	.word	0xffff0007

0800ff30 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b084      	sub	sp, #16
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d101      	bne.n	800ff42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ff3e:	2301      	movs	r3, #1
 800ff40:	e10f      	b.n	8010162 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2200      	movs	r2, #0
 800ff46:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	4a87      	ldr	r2, [pc, #540]	@ (801016c <HAL_SPI_Init+0x23c>)
 800ff4e:	4293      	cmp	r3, r2
 800ff50:	d00f      	beq.n	800ff72 <HAL_SPI_Init+0x42>
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	4a86      	ldr	r2, [pc, #536]	@ (8010170 <HAL_SPI_Init+0x240>)
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d00a      	beq.n	800ff72 <HAL_SPI_Init+0x42>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	4a84      	ldr	r2, [pc, #528]	@ (8010174 <HAL_SPI_Init+0x244>)
 800ff62:	4293      	cmp	r3, r2
 800ff64:	d005      	beq.n	800ff72 <HAL_SPI_Init+0x42>
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	68db      	ldr	r3, [r3, #12]
 800ff6a:	2b0f      	cmp	r3, #15
 800ff6c:	d901      	bls.n	800ff72 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ff6e:	2301      	movs	r3, #1
 800ff70:	e0f7      	b.n	8010162 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ff72:	6878      	ldr	r0, [r7, #4]
 800ff74:	f000 fcec 	bl	8010950 <SPI_GetPacketSize>
 800ff78:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	4a7b      	ldr	r2, [pc, #492]	@ (801016c <HAL_SPI_Init+0x23c>)
 800ff80:	4293      	cmp	r3, r2
 800ff82:	d00c      	beq.n	800ff9e <HAL_SPI_Init+0x6e>
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	4a79      	ldr	r2, [pc, #484]	@ (8010170 <HAL_SPI_Init+0x240>)
 800ff8a:	4293      	cmp	r3, r2
 800ff8c:	d007      	beq.n	800ff9e <HAL_SPI_Init+0x6e>
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	4a78      	ldr	r2, [pc, #480]	@ (8010174 <HAL_SPI_Init+0x244>)
 800ff94:	4293      	cmp	r3, r2
 800ff96:	d002      	beq.n	800ff9e <HAL_SPI_Init+0x6e>
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	2b08      	cmp	r3, #8
 800ff9c:	d811      	bhi.n	800ffc2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ffa2:	4a72      	ldr	r2, [pc, #456]	@ (801016c <HAL_SPI_Init+0x23c>)
 800ffa4:	4293      	cmp	r3, r2
 800ffa6:	d009      	beq.n	800ffbc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	4a70      	ldr	r2, [pc, #448]	@ (8010170 <HAL_SPI_Init+0x240>)
 800ffae:	4293      	cmp	r3, r2
 800ffb0:	d004      	beq.n	800ffbc <HAL_SPI_Init+0x8c>
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	4a6f      	ldr	r2, [pc, #444]	@ (8010174 <HAL_SPI_Init+0x244>)
 800ffb8:	4293      	cmp	r3, r2
 800ffba:	d104      	bne.n	800ffc6 <HAL_SPI_Init+0x96>
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	2b10      	cmp	r3, #16
 800ffc0:	d901      	bls.n	800ffc6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	e0cd      	b.n	8010162 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ffcc:	b2db      	uxtb	r3, r3
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d106      	bne.n	800ffe0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	f7f1 f9b4 	bl	8001348 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2202      	movs	r2, #2
 800ffe4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	681a      	ldr	r2, [r3, #0]
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	f022 0201 	bic.w	r2, r2, #1
 800fff6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	689b      	ldr	r3, [r3, #8]
 800fffe:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8010002:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	699b      	ldr	r3, [r3, #24]
 8010008:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801000c:	d119      	bne.n	8010042 <HAL_SPI_Init+0x112>
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	685b      	ldr	r3, [r3, #4]
 8010012:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010016:	d103      	bne.n	8010020 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801001c:	2b00      	cmp	r3, #0
 801001e:	d008      	beq.n	8010032 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010024:	2b00      	cmp	r3, #0
 8010026:	d10c      	bne.n	8010042 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801002c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010030:	d107      	bne.n	8010042 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	681a      	ldr	r2, [r3, #0]
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8010040:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	685b      	ldr	r3, [r3, #4]
 8010046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801004a:	2b00      	cmp	r3, #0
 801004c:	d00f      	beq.n	801006e <HAL_SPI_Init+0x13e>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	68db      	ldr	r3, [r3, #12]
 8010052:	2b06      	cmp	r3, #6
 8010054:	d90b      	bls.n	801006e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	430a      	orrs	r2, r1
 801006a:	601a      	str	r2, [r3, #0]
 801006c:	e007      	b.n	801007e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	681a      	ldr	r2, [r3, #0]
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801007c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	69da      	ldr	r2, [r3, #28]
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010086:	431a      	orrs	r2, r3
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	431a      	orrs	r2, r3
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010090:	ea42 0103 	orr.w	r1, r2, r3
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	68da      	ldr	r2, [r3, #12]
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	430a      	orrs	r2, r1
 801009e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100a8:	431a      	orrs	r2, r3
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100ae:	431a      	orrs	r2, r3
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	699b      	ldr	r3, [r3, #24]
 80100b4:	431a      	orrs	r2, r3
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	691b      	ldr	r3, [r3, #16]
 80100ba:	431a      	orrs	r2, r3
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	695b      	ldr	r3, [r3, #20]
 80100c0:	431a      	orrs	r2, r3
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6a1b      	ldr	r3, [r3, #32]
 80100c6:	431a      	orrs	r2, r3
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	431a      	orrs	r2, r3
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80100d2:	431a      	orrs	r2, r3
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	689b      	ldr	r3, [r3, #8]
 80100d8:	431a      	orrs	r2, r3
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80100de:	ea42 0103 	orr.w	r1, r2, r3
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	430a      	orrs	r2, r1
 80100ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	685b      	ldr	r3, [r3, #4]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d113      	bne.n	801011e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	689b      	ldr	r3, [r3, #8]
 80100fc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010108:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	689b      	ldr	r3, [r3, #8]
 8010110:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801011c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	f022 0201 	bic.w	r2, r2, #1
 801012c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	685b      	ldr	r3, [r3, #4]
 8010132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010136:	2b00      	cmp	r3, #0
 8010138:	d00a      	beq.n	8010150 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	430a      	orrs	r2, r1
 801014e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2200      	movs	r2, #0
 8010154:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2201      	movs	r2, #1
 801015c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8010160:	2300      	movs	r3, #0
}
 8010162:	4618      	mov	r0, r3
 8010164:	3710      	adds	r7, #16
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}
 801016a:	bf00      	nop
 801016c:	40013000 	.word	0x40013000
 8010170:	40003800 	.word	0x40003800
 8010174:	40003c00 	.word	0x40003c00

08010178 <HAL_SPI_Transmit_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8010178:	b480      	push	{r7}
 801017a:	b085      	sub	sp, #20
 801017c:	af00      	add	r7, sp, #0
 801017e:	60f8      	str	r0, [r7, #12]
 8010180:	60b9      	str	r1, [r7, #8]
 8010182:	4613      	mov	r3, r2
 8010184:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if ((pData == NULL) || (Size == 0UL))
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d002      	beq.n	8010192 <HAL_SPI_Transmit_IT+0x1a>
 801018c:	88fb      	ldrh	r3, [r7, #6]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d101      	bne.n	8010196 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 8010192:	2301      	movs	r3, #1
 8010194:	e08b      	b.n	80102ae <HAL_SPI_Transmit_IT+0x136>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801019c:	b2db      	uxtb	r3, r3
 801019e:	2b01      	cmp	r3, #1
 80101a0:	d001      	beq.n	80101a6 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 80101a2:	2302      	movs	r3, #2
 80101a4:	e083      	b.n	80102ae <HAL_SPI_Transmit_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80101ac:	2b01      	cmp	r3, #1
 80101ae:	d101      	bne.n	80101b4 <HAL_SPI_Transmit_IT+0x3c>
 80101b0:	2302      	movs	r3, #2
 80101b2:	e07c      	b.n	80102ae <HAL_SPI_Transmit_IT+0x136>
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	2201      	movs	r2, #1
 80101b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	2203      	movs	r2, #3
 80101c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2200      	movs	r2, #0
 80101c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	68ba      	ldr	r2, [r7, #8]
 80101d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	88fa      	ldrh	r2, [r7, #6]
 80101d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	88fa      	ldrh	r2, [r7, #6]
 80101de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	2200      	movs	r2, #0
 80101e6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	2200      	movs	r2, #0
 80101ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	2200      	movs	r2, #0
 80101f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	2200      	movs	r2, #0
 80101fc:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->Reload.pTxBuffPtr  = NULL;
  hspi->Reload.TxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	68db      	ldr	r3, [r3, #12]
 8010202:	2b0f      	cmp	r3, #15
 8010204:	d903      	bls.n	801020e <HAL_SPI_Transmit_IT+0x96>
  {
    hspi->TxISR = SPI_TxISR_32BIT;
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	4a2c      	ldr	r2, [pc, #176]	@ (80102bc <HAL_SPI_Transmit_IT+0x144>)
 801020a:	675a      	str	r2, [r3, #116]	@ 0x74
 801020c:	e00a      	b.n	8010224 <HAL_SPI_Transmit_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	68db      	ldr	r3, [r3, #12]
 8010212:	2b07      	cmp	r3, #7
 8010214:	d903      	bls.n	801021e <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	4a29      	ldr	r2, [pc, #164]	@ (80102c0 <HAL_SPI_Transmit_IT+0x148>)
 801021a:	675a      	str	r2, [r3, #116]	@ 0x74
 801021c:	e002      	b.n	8010224 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	4a28      	ldr	r2, [pc, #160]	@ (80102c4 <HAL_SPI_Transmit_IT+0x14c>)
 8010222:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	689b      	ldr	r3, [r3, #8]
 8010228:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 801022c:	d108      	bne.n	8010240 <HAL_SPI_Transmit_IT+0xc8>
  {
    SPI_1LINE_TX(hspi);
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	681a      	ldr	r2, [r3, #0]
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801023c:	601a      	str	r2, [r3, #0]
 801023e:	e009      	b.n	8010254 <HAL_SPI_Transmit_IT+0xdc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	68db      	ldr	r3, [r3, #12]
 8010246:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8010252:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	685a      	ldr	r2, [r3, #4]
 801025a:	4b1b      	ldr	r3, [pc, #108]	@ (80102c8 <HAL_SPI_Transmit_IT+0x150>)
 801025c:	4013      	ands	r3, r2
 801025e:	88f9      	ldrh	r1, [r7, #6]
 8010260:	68fa      	ldr	r2, [r7, #12]
 8010262:	6812      	ldr	r2, [r2, #0]
 8010264:	430b      	orrs	r3, r1
 8010266:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	681a      	ldr	r2, [r3, #0]
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	f042 0201 	orr.w	r2, r2, #1
 8010276:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	2200      	movs	r2, #0
 801027c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, TXP, FRE, MODF, UDR and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	6919      	ldr	r1, [r3, #16]
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	681a      	ldr	r2, [r3, #0]
 801028a:	f240 732a 	movw	r3, #1834	@ 0x72a
 801028e:	430b      	orrs	r3, r1
 8010290:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	685b      	ldr	r3, [r3, #4]
 8010296:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801029a:	d107      	bne.n	80102ac <HAL_SPI_Transmit_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80102aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80102ac:	2300      	movs	r3, #0
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3714      	adds	r7, #20
 80102b2:	46bd      	mov	sp, r7
 80102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b8:	4770      	bx	lr
 80102ba:	bf00      	nop
 80102bc:	080107b9 	.word	0x080107b9
 80102c0:	0801075b 	.word	0x0801075b
 80102c4:	08010701 	.word	0x08010701
 80102c8:	ffff0000 	.word	0xffff0000

080102cc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b08a      	sub	sp, #40	@ 0x28
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	691b      	ldr	r3, [r3, #16]
 80102da:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	695b      	ldr	r3, [r3, #20]
 80102e2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80102e4:	6a3a      	ldr	r2, [r7, #32]
 80102e6:	69fb      	ldr	r3, [r7, #28]
 80102e8:	4013      	ands	r3, r2
 80102ea:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	689b      	ldr	r3, [r3, #8]
 80102f2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80102f4:	2300      	movs	r3, #0
 80102f6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80102fe:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	3330      	adds	r3, #48	@ 0x30
 8010306:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8010308:	69fb      	ldr	r3, [r7, #28]
 801030a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801030e:	2b00      	cmp	r3, #0
 8010310:	d010      	beq.n	8010334 <HAL_SPI_IRQHandler+0x68>
 8010312:	6a3b      	ldr	r3, [r7, #32]
 8010314:	f003 0308 	and.w	r3, r3, #8
 8010318:	2b00      	cmp	r3, #0
 801031a:	d00b      	beq.n	8010334 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	699a      	ldr	r2, [r3, #24]
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801032a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f000 f9c3 	bl	80106b8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8010332:	e192      	b.n	801065a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8010334:	69bb      	ldr	r3, [r7, #24]
 8010336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801033a:	2b00      	cmp	r3, #0
 801033c:	d113      	bne.n	8010366 <HAL_SPI_IRQHandler+0x9a>
 801033e:	69bb      	ldr	r3, [r7, #24]
 8010340:	f003 0320 	and.w	r3, r3, #32
 8010344:	2b00      	cmp	r3, #0
 8010346:	d10e      	bne.n	8010366 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8010348:	69bb      	ldr	r3, [r7, #24]
 801034a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801034e:	2b00      	cmp	r3, #0
 8010350:	d009      	beq.n	8010366 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	4798      	blx	r3
    hspi->RxISR(hspi);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	4798      	blx	r3
    handled = 1UL;
 8010362:	2301      	movs	r3, #1
 8010364:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8010366:	69bb      	ldr	r3, [r7, #24]
 8010368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801036c:	2b00      	cmp	r3, #0
 801036e:	d10f      	bne.n	8010390 <HAL_SPI_IRQHandler+0xc4>
 8010370:	69bb      	ldr	r3, [r7, #24]
 8010372:	f003 0301 	and.w	r3, r3, #1
 8010376:	2b00      	cmp	r3, #0
 8010378:	d00a      	beq.n	8010390 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801037a:	69bb      	ldr	r3, [r7, #24]
 801037c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8010380:	2b00      	cmp	r3, #0
 8010382:	d105      	bne.n	8010390 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	4798      	blx	r3
    handled = 1UL;
 801038c:	2301      	movs	r3, #1
 801038e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8010390:	69bb      	ldr	r3, [r7, #24]
 8010392:	f003 0320 	and.w	r3, r3, #32
 8010396:	2b00      	cmp	r3, #0
 8010398:	d10f      	bne.n	80103ba <HAL_SPI_IRQHandler+0xee>
 801039a:	69bb      	ldr	r3, [r7, #24]
 801039c:	f003 0302 	and.w	r3, r3, #2
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d00a      	beq.n	80103ba <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80103a4:	69bb      	ldr	r3, [r7, #24]
 80103a6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d105      	bne.n	80103ba <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	4798      	blx	r3
    handled = 1UL;
 80103b6:	2301      	movs	r3, #1
 80103b8:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80103ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103bc:	2b00      	cmp	r3, #0
 80103be:	f040 8147 	bne.w	8010650 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80103c2:	69bb      	ldr	r3, [r7, #24]
 80103c4:	f003 0308 	and.w	r3, r3, #8
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	f000 808b 	beq.w	80104e4 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	699a      	ldr	r2, [r3, #24]
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	f042 0208 	orr.w	r2, r2, #8
 80103dc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	699a      	ldr	r2, [r3, #24]
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	f042 0210 	orr.w	r2, r2, #16
 80103ec:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	699a      	ldr	r2, [r3, #24]
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80103fc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	691a      	ldr	r2, [r3, #16]
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	f022 0208 	bic.w	r2, r2, #8
 801040c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	689b      	ldr	r3, [r3, #8]
 8010414:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8010418:	2b00      	cmp	r3, #0
 801041a:	d13d      	bne.n	8010498 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 801041c:	e036      	b.n	801048c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	68db      	ldr	r3, [r3, #12]
 8010422:	2b0f      	cmp	r3, #15
 8010424:	d90b      	bls.n	801043e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681a      	ldr	r2, [r3, #0]
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801042e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010430:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010436:	1d1a      	adds	r2, r3, #4
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	665a      	str	r2, [r3, #100]	@ 0x64
 801043c:	e01d      	b.n	801047a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	68db      	ldr	r3, [r3, #12]
 8010442:	2b07      	cmp	r3, #7
 8010444:	d90b      	bls.n	801045e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801044a:	68fa      	ldr	r2, [r7, #12]
 801044c:	8812      	ldrh	r2, [r2, #0]
 801044e:	b292      	uxth	r2, r2
 8010450:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010456:	1c9a      	adds	r2, r3, #2
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	665a      	str	r2, [r3, #100]	@ 0x64
 801045c:	e00d      	b.n	801047a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801046a:	7812      	ldrb	r2, [r2, #0]
 801046c:	b2d2      	uxtb	r2, r2
 801046e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010474:	1c5a      	adds	r2, r3, #1
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010480:	b29b      	uxth	r3, r3
 8010482:	3b01      	subs	r3, #1
 8010484:	b29a      	uxth	r2, r3
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010492:	b29b      	uxth	r3, r3
 8010494:	2b00      	cmp	r3, #0
 8010496:	d1c2      	bne.n	801041e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f000 f9b9 	bl	8010810 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2201      	movs	r2, #1
 80104a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d003      	beq.n	80104b8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f000 f8f7 	bl	80106a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80104b6:	e0d0      	b.n	801065a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80104b8:	7cfb      	ldrb	r3, [r7, #19]
 80104ba:	2b05      	cmp	r3, #5
 80104bc:	d103      	bne.n	80104c6 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	f000 f8e6 	bl	8010690 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80104c4:	e0c6      	b.n	8010654 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80104c6:	7cfb      	ldrb	r3, [r7, #19]
 80104c8:	2b04      	cmp	r3, #4
 80104ca:	d103      	bne.n	80104d4 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	f000 f8d5 	bl	801067c <HAL_SPI_RxCpltCallback>
    return;
 80104d2:	e0bf      	b.n	8010654 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80104d4:	7cfb      	ldrb	r3, [r7, #19]
 80104d6:	2b03      	cmp	r3, #3
 80104d8:	f040 80bc 	bne.w	8010654 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f000 f8c3 	bl	8010668 <HAL_SPI_TxCpltCallback>
    return;
 80104e2:	e0b7      	b.n	8010654 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80104e4:	69bb      	ldr	r3, [r7, #24]
 80104e6:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	f000 80b5 	beq.w	801065a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80104f0:	69bb      	ldr	r3, [r7, #24]
 80104f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d00f      	beq.n	801051a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010500:	f043 0204 	orr.w	r2, r3, #4
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	699a      	ldr	r2, [r3, #24]
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010518:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801051a:	69bb      	ldr	r3, [r7, #24]
 801051c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8010520:	2b00      	cmp	r3, #0
 8010522:	d00f      	beq.n	8010544 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801052a:	f043 0201 	orr.w	r2, r3, #1
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	699a      	ldr	r2, [r3, #24]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010542:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8010544:	69bb      	ldr	r3, [r7, #24]
 8010546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801054a:	2b00      	cmp	r3, #0
 801054c:	d00f      	beq.n	801056e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010554:	f043 0208 	orr.w	r2, r3, #8
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	699a      	ldr	r2, [r3, #24]
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801056c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 801056e:	69bb      	ldr	r3, [r7, #24]
 8010570:	f003 0320 	and.w	r3, r3, #32
 8010574:	2b00      	cmp	r3, #0
 8010576:	d00f      	beq.n	8010598 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801057e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	699a      	ldr	r2, [r3, #24]
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	f042 0220 	orr.w	r2, r2, #32
 8010596:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d05a      	beq.n	8010658 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	681a      	ldr	r2, [r3, #0]
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	f022 0201 	bic.w	r2, r2, #1
 80105b0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	6919      	ldr	r1, [r3, #16]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681a      	ldr	r2, [r3, #0]
 80105bc:	4b28      	ldr	r3, [pc, #160]	@ (8010660 <HAL_SPI_IRQHandler+0x394>)
 80105be:	400b      	ands	r3, r1
 80105c0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80105c8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80105cc:	d138      	bne.n	8010640 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	689a      	ldr	r2, [r3, #8]
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80105dc:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d013      	beq.n	801060e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80105ea:	4a1e      	ldr	r2, [pc, #120]	@ (8010664 <HAL_SPI_IRQHandler+0x398>)
 80105ec:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7f6 ff7c 	bl	80074f0 <HAL_DMA_Abort_IT>
 80105f8:	4603      	mov	r3, r0
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d007      	beq.n	801060e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010604:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010612:	2b00      	cmp	r3, #0
 8010614:	d020      	beq.n	8010658 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801061a:	4a12      	ldr	r2, [pc, #72]	@ (8010664 <HAL_SPI_IRQHandler+0x398>)
 801061c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010622:	4618      	mov	r0, r3
 8010624:	f7f6 ff64 	bl	80074f0 <HAL_DMA_Abort_IT>
 8010628:	4603      	mov	r3, r0
 801062a:	2b00      	cmp	r3, #0
 801062c:	d014      	beq.n	8010658 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010634:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801063e:	e00b      	b.n	8010658 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2201      	movs	r2, #1
 8010644:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f000 f82b 	bl	80106a4 <HAL_SPI_ErrorCallback>
    return;
 801064e:	e003      	b.n	8010658 <HAL_SPI_IRQHandler+0x38c>
    return;
 8010650:	bf00      	nop
 8010652:	e002      	b.n	801065a <HAL_SPI_IRQHandler+0x38e>
    return;
 8010654:	bf00      	nop
 8010656:	e000      	b.n	801065a <HAL_SPI_IRQHandler+0x38e>
    return;
 8010658:	bf00      	nop
  }
}
 801065a:	3728      	adds	r7, #40	@ 0x28
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	fffffc94 	.word	0xfffffc94
 8010664:	080106cd 	.word	0x080106cd

08010668 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010668:	b480      	push	{r7}
 801066a:	b083      	sub	sp, #12
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8010670:	bf00      	nop
 8010672:	370c      	adds	r7, #12
 8010674:	46bd      	mov	sp, r7
 8010676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067a:	4770      	bx	lr

0801067c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801067c:	b480      	push	{r7}
 801067e:	b083      	sub	sp, #12
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8010684:	bf00      	nop
 8010686:	370c      	adds	r7, #12
 8010688:	46bd      	mov	sp, r7
 801068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068e:	4770      	bx	lr

08010690 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010690:	b480      	push	{r7}
 8010692:	b083      	sub	sp, #12
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8010698:	bf00      	nop
 801069a:	370c      	adds	r7, #12
 801069c:	46bd      	mov	sp, r7
 801069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a2:	4770      	bx	lr

080106a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80106a4:	b480      	push	{r7}
 80106a6:	b083      	sub	sp, #12
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80106ac:	bf00      	nop
 80106ae:	370c      	adds	r7, #12
 80106b0:	46bd      	mov	sp, r7
 80106b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b6:	4770      	bx	lr

080106b8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80106b8:	b480      	push	{r7}
 80106ba:	b083      	sub	sp, #12
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80106c0:	bf00      	nop
 80106c2:	370c      	adds	r7, #12
 80106c4:	46bd      	mov	sp, r7
 80106c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ca:	4770      	bx	lr

080106cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b084      	sub	sp, #16
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80106d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	2200      	movs	r2, #0
 80106de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	2200      	movs	r2, #0
 80106e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	2201      	movs	r2, #1
 80106ee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80106f2:	68f8      	ldr	r0, [r7, #12]
 80106f4:	f7ff ffd6 	bl	80106a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80106f8:	bf00      	nop
 80106fa:	3710      	adds	r7, #16
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}

08010700 <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8010700:	b480      	push	{r7}
 8010702:	b083      	sub	sp, #12
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	3320      	adds	r3, #32
 8010712:	7812      	ldrb	r2, [r2, #0]
 8010714:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801071a:	1c5a      	adds	r2, r3, #1
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010726:	b29b      	uxth	r3, r3
 8010728:	3b01      	subs	r3, #1
 801072a:	b29a      	uxth	r2, r3
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010738:	b29b      	uxth	r3, r3
 801073a:	2b00      	cmp	r3, #0
 801073c:	d107      	bne.n	801074e <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	691a      	ldr	r2, [r3, #16]
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	f022 0202 	bic.w	r2, r2, #2
 801074c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 801074e:	bf00      	nop
 8010750:	370c      	adds	r7, #12
 8010752:	46bd      	mov	sp, r7
 8010754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010758:	4770      	bx	lr

0801075a <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 801075a:	b480      	push	{r7}
 801075c:	b085      	sub	sp, #20
 801075e:	af00      	add	r7, sp, #0
 8010760:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	3320      	adds	r3, #32
 8010768:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801076e:	881a      	ldrh	r2, [r3, #0]
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010778:	1c9a      	adds	r2, r3, #2
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010784:	b29b      	uxth	r3, r3
 8010786:	3b01      	subs	r3, #1
 8010788:	b29a      	uxth	r2, r3
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010796:	b29b      	uxth	r3, r3
 8010798:	2b00      	cmp	r3, #0
 801079a:	d107      	bne.n	80107ac <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	691a      	ldr	r2, [r3, #16]
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	f022 0202 	bic.w	r2, r2, #2
 80107aa:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80107ac:	bf00      	nop
 80107ae:	3714      	adds	r7, #20
 80107b0:	46bd      	mov	sp, r7
 80107b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b6:	4770      	bx	lr

080107b8 <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 80107b8:	b480      	push	{r7}
 80107ba:	b083      	sub	sp, #12
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	6812      	ldr	r2, [r2, #0]
 80107ca:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80107d0:	1d1a      	adds	r2, r3, #4
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80107dc:	b29b      	uxth	r3, r3
 80107de:	3b01      	subs	r3, #1
 80107e0:	b29a      	uxth	r2, r3
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80107ee:	b29b      	uxth	r3, r3
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d107      	bne.n	8010804 <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	691a      	ldr	r2, [r3, #16]
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	f022 0202 	bic.w	r2, r2, #2
 8010802:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8010804:	bf00      	nop
 8010806:	370c      	adds	r7, #12
 8010808:	46bd      	mov	sp, r7
 801080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080e:	4770      	bx	lr

08010810 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010810:	b480      	push	{r7}
 8010812:	b085      	sub	sp, #20
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	695b      	ldr	r3, [r3, #20]
 801081e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	699a      	ldr	r2, [r3, #24]
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	f042 0208 	orr.w	r2, r2, #8
 801082e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	699a      	ldr	r2, [r3, #24]
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	f042 0210 	orr.w	r2, r2, #16
 801083e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	681a      	ldr	r2, [r3, #0]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	f022 0201 	bic.w	r2, r2, #1
 801084e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	6919      	ldr	r1, [r3, #16]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681a      	ldr	r2, [r3, #0]
 801085a:	4b3c      	ldr	r3, [pc, #240]	@ (801094c <SPI_CloseTransfer+0x13c>)
 801085c:	400b      	ands	r3, r1
 801085e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	689a      	ldr	r2, [r3, #8]
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801086e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8010876:	b2db      	uxtb	r3, r3
 8010878:	2b04      	cmp	r3, #4
 801087a:	d014      	beq.n	80108a6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	f003 0320 	and.w	r3, r3, #32
 8010882:	2b00      	cmp	r3, #0
 8010884:	d00f      	beq.n	80108a6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801088c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	699a      	ldr	r2, [r3, #24]
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	f042 0220 	orr.w	r2, r2, #32
 80108a4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80108ac:	b2db      	uxtb	r3, r3
 80108ae:	2b03      	cmp	r3, #3
 80108b0:	d014      	beq.n	80108dc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d00f      	beq.n	80108dc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80108c2:	f043 0204 	orr.w	r2, r3, #4
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	699a      	ldr	r2, [r3, #24]
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80108da:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d00f      	beq.n	8010906 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80108ec:	f043 0201 	orr.w	r2, r3, #1
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	699a      	ldr	r2, [r3, #24]
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010904:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801090c:	2b00      	cmp	r3, #0
 801090e:	d00f      	beq.n	8010930 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010916:	f043 0208 	orr.w	r2, r3, #8
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	699a      	ldr	r2, [r3, #24]
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801092e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2200      	movs	r2, #0
 8010934:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2200      	movs	r2, #0
 801093c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8010940:	bf00      	nop
 8010942:	3714      	adds	r7, #20
 8010944:	46bd      	mov	sp, r7
 8010946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094a:	4770      	bx	lr
 801094c:	fffffc90 	.word	0xfffffc90

08010950 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8010950:	b480      	push	{r7}
 8010952:	b085      	sub	sp, #20
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801095c:	095b      	lsrs	r3, r3, #5
 801095e:	3301      	adds	r3, #1
 8010960:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	68db      	ldr	r3, [r3, #12]
 8010966:	3301      	adds	r3, #1
 8010968:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	3307      	adds	r3, #7
 801096e:	08db      	lsrs	r3, r3, #3
 8010970:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010972:	68bb      	ldr	r3, [r7, #8]
 8010974:	68fa      	ldr	r2, [r7, #12]
 8010976:	fb02 f303 	mul.w	r3, r2, r3
}
 801097a:	4618      	mov	r0, r3
 801097c:	3714      	adds	r7, #20
 801097e:	46bd      	mov	sp, r7
 8010980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010984:	4770      	bx	lr

08010986 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010986:	b580      	push	{r7, lr}
 8010988:	b082      	sub	sp, #8
 801098a:	af00      	add	r7, sp, #0
 801098c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d101      	bne.n	8010998 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010994:	2301      	movs	r3, #1
 8010996:	e049      	b.n	8010a2c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801099e:	b2db      	uxtb	r3, r3
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d106      	bne.n	80109b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2200      	movs	r2, #0
 80109a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f7f1 f8d1 	bl	8001b54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	2202      	movs	r2, #2
 80109b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681a      	ldr	r2, [r3, #0]
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	3304      	adds	r3, #4
 80109c2:	4619      	mov	r1, r3
 80109c4:	4610      	mov	r0, r2
 80109c6:	f000 fbdb 	bl	8011180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2201      	movs	r2, #1
 80109ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2201      	movs	r2, #1
 80109d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	2201      	movs	r2, #1
 80109de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	2201      	movs	r2, #1
 80109e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	2201      	movs	r2, #1
 80109ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2201      	movs	r2, #1
 80109f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	2201      	movs	r2, #1
 80109fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2201      	movs	r2, #1
 8010a06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2201      	movs	r2, #1
 8010a0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2201      	movs	r2, #1
 8010a16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2201      	movs	r2, #1
 8010a1e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	2201      	movs	r2, #1
 8010a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010a2a:	2300      	movs	r3, #0
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3708      	adds	r7, #8
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b082      	sub	sp, #8
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d101      	bne.n	8010a46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010a42:	2301      	movs	r3, #1
 8010a44:	e049      	b.n	8010ada <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8010a4c:	b2db      	uxtb	r3, r3
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d106      	bne.n	8010a60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2200      	movs	r2, #0
 8010a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f000 f841 	bl	8010ae2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2202      	movs	r2, #2
 8010a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681a      	ldr	r2, [r3, #0]
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	3304      	adds	r3, #4
 8010a70:	4619      	mov	r1, r3
 8010a72:	4610      	mov	r0, r2
 8010a74:	f000 fb84 	bl	8011180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2201      	movs	r2, #1
 8010a7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2201      	movs	r2, #1
 8010a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2201      	movs	r2, #1
 8010a8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2201      	movs	r2, #1
 8010a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2201      	movs	r2, #1
 8010a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2201      	movs	r2, #1
 8010aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	2201      	movs	r2, #1
 8010aac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2201      	movs	r2, #1
 8010ab4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2201      	movs	r2, #1
 8010abc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2201      	movs	r2, #1
 8010ac4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2201      	movs	r2, #1
 8010acc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2201      	movs	r2, #1
 8010ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010ad8:	2300      	movs	r3, #0
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	3708      	adds	r7, #8
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}

08010ae2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010ae2:	b480      	push	{r7}
 8010ae4:	b083      	sub	sp, #12
 8010ae6:	af00      	add	r7, sp, #0
 8010ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8010aea:	bf00      	nop
 8010aec:	370c      	adds	r7, #12
 8010aee:	46bd      	mov	sp, r7
 8010af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af4:	4770      	bx	lr

08010af6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010af6:	b580      	push	{r7, lr}
 8010af8:	b084      	sub	sp, #16
 8010afa:	af00      	add	r7, sp, #0
 8010afc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	68db      	ldr	r3, [r3, #12]
 8010b04:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	691b      	ldr	r3, [r3, #16]
 8010b0c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	f003 0302 	and.w	r3, r3, #2
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d020      	beq.n	8010b5a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	f003 0302 	and.w	r3, r3, #2
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d01b      	beq.n	8010b5a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	f06f 0202 	mvn.w	r2, #2
 8010b2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2201      	movs	r2, #1
 8010b30:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	699b      	ldr	r3, [r3, #24]
 8010b38:	f003 0303 	and.w	r3, r3, #3
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d003      	beq.n	8010b48 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010b40:	6878      	ldr	r0, [r7, #4]
 8010b42:	f000 faff 	bl	8011144 <HAL_TIM_IC_CaptureCallback>
 8010b46:	e005      	b.n	8010b54 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f000 faf1 	bl	8011130 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f000 fb02 	bl	8011158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2200      	movs	r2, #0
 8010b58:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8010b5a:	68bb      	ldr	r3, [r7, #8]
 8010b5c:	f003 0304 	and.w	r3, r3, #4
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d020      	beq.n	8010ba6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	f003 0304 	and.w	r3, r3, #4
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d01b      	beq.n	8010ba6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	f06f 0204 	mvn.w	r2, #4
 8010b76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2202      	movs	r2, #2
 8010b7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	699b      	ldr	r3, [r3, #24]
 8010b84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d003      	beq.n	8010b94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010b8c:	6878      	ldr	r0, [r7, #4]
 8010b8e:	f000 fad9 	bl	8011144 <HAL_TIM_IC_CaptureCallback>
 8010b92:	e005      	b.n	8010ba0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f000 facb 	bl	8011130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f000 fadc 	bl	8011158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8010ba6:	68bb      	ldr	r3, [r7, #8]
 8010ba8:	f003 0308 	and.w	r3, r3, #8
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d020      	beq.n	8010bf2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	f003 0308 	and.w	r3, r3, #8
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d01b      	beq.n	8010bf2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	f06f 0208 	mvn.w	r2, #8
 8010bc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	2204      	movs	r2, #4
 8010bc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	69db      	ldr	r3, [r3, #28]
 8010bd0:	f003 0303 	and.w	r3, r3, #3
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d003      	beq.n	8010be0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010bd8:	6878      	ldr	r0, [r7, #4]
 8010bda:	f000 fab3 	bl	8011144 <HAL_TIM_IC_CaptureCallback>
 8010bde:	e005      	b.n	8010bec <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	f000 faa5 	bl	8011130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	f000 fab6 	bl	8011158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2200      	movs	r2, #0
 8010bf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	f003 0310 	and.w	r3, r3, #16
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d020      	beq.n	8010c3e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	f003 0310 	and.w	r3, r3, #16
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d01b      	beq.n	8010c3e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	f06f 0210 	mvn.w	r2, #16
 8010c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2208      	movs	r2, #8
 8010c14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	69db      	ldr	r3, [r3, #28]
 8010c1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d003      	beq.n	8010c2c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f000 fa8d 	bl	8011144 <HAL_TIM_IC_CaptureCallback>
 8010c2a:	e005      	b.n	8010c38 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010c2c:	6878      	ldr	r0, [r7, #4]
 8010c2e:	f000 fa7f 	bl	8011130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010c32:	6878      	ldr	r0, [r7, #4]
 8010c34:	f000 fa90 	bl	8011158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8010c3e:	68bb      	ldr	r3, [r7, #8]
 8010c40:	f003 0301 	and.w	r3, r3, #1
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d00c      	beq.n	8010c62 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	f003 0301 	and.w	r3, r3, #1
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d007      	beq.n	8010c62 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	f06f 0201 	mvn.w	r2, #1
 8010c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010c5c:	6878      	ldr	r0, [r7, #4]
 8010c5e:	f000 fa5d 	bl	801111c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010c62:	68bb      	ldr	r3, [r7, #8]
 8010c64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d104      	bne.n	8010c76 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8010c6c:	68bb      	ldr	r3, [r7, #8]
 8010c6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d00c      	beq.n	8010c90 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d007      	beq.n	8010c90 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8010c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	f000 ffca 	bl	8011c24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d00c      	beq.n	8010cb4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d007      	beq.n	8010cb4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8010cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010cae:	6878      	ldr	r0, [r7, #4]
 8010cb0:	f000 ffc2 	bl	8011c38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d00c      	beq.n	8010cd8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d007      	beq.n	8010cd8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8010cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f000 fa4a 	bl	801116c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	f003 0320 	and.w	r3, r3, #32
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d00c      	beq.n	8010cfc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	f003 0320 	and.w	r3, r3, #32
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d007      	beq.n	8010cfc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	f06f 0220 	mvn.w	r2, #32
 8010cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010cf6:	6878      	ldr	r0, [r7, #4]
 8010cf8:	f000 ff8a 	bl	8011c10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010cfc:	bf00      	nop
 8010cfe:	3710      	adds	r7, #16
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}

08010d04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b086      	sub	sp, #24
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	60f8      	str	r0, [r7, #12]
 8010d0c:	60b9      	str	r1, [r7, #8]
 8010d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010d10:	2300      	movs	r3, #0
 8010d12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010d1a:	2b01      	cmp	r3, #1
 8010d1c:	d101      	bne.n	8010d22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010d1e:	2302      	movs	r3, #2
 8010d20:	e0ff      	b.n	8010f22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	2201      	movs	r2, #1
 8010d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2b14      	cmp	r3, #20
 8010d2e:	f200 80f0 	bhi.w	8010f12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010d32:	a201      	add	r2, pc, #4	@ (adr r2, 8010d38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d38:	08010d8d 	.word	0x08010d8d
 8010d3c:	08010f13 	.word	0x08010f13
 8010d40:	08010f13 	.word	0x08010f13
 8010d44:	08010f13 	.word	0x08010f13
 8010d48:	08010dcd 	.word	0x08010dcd
 8010d4c:	08010f13 	.word	0x08010f13
 8010d50:	08010f13 	.word	0x08010f13
 8010d54:	08010f13 	.word	0x08010f13
 8010d58:	08010e0f 	.word	0x08010e0f
 8010d5c:	08010f13 	.word	0x08010f13
 8010d60:	08010f13 	.word	0x08010f13
 8010d64:	08010f13 	.word	0x08010f13
 8010d68:	08010e4f 	.word	0x08010e4f
 8010d6c:	08010f13 	.word	0x08010f13
 8010d70:	08010f13 	.word	0x08010f13
 8010d74:	08010f13 	.word	0x08010f13
 8010d78:	08010e91 	.word	0x08010e91
 8010d7c:	08010f13 	.word	0x08010f13
 8010d80:	08010f13 	.word	0x08010f13
 8010d84:	08010f13 	.word	0x08010f13
 8010d88:	08010ed1 	.word	0x08010ed1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	68b9      	ldr	r1, [r7, #8]
 8010d92:	4618      	mov	r0, r3
 8010d94:	f000 faa0 	bl	80112d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	699a      	ldr	r2, [r3, #24]
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	f042 0208 	orr.w	r2, r2, #8
 8010da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	699a      	ldr	r2, [r3, #24]
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	f022 0204 	bic.w	r2, r2, #4
 8010db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	6999      	ldr	r1, [r3, #24]
 8010dbe:	68bb      	ldr	r3, [r7, #8]
 8010dc0:	691a      	ldr	r2, [r3, #16]
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	430a      	orrs	r2, r1
 8010dc8:	619a      	str	r2, [r3, #24]
      break;
 8010dca:	e0a5      	b.n	8010f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	68b9      	ldr	r1, [r7, #8]
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f000 fb10 	bl	80113f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	699a      	ldr	r2, [r3, #24]
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	699a      	ldr	r2, [r3, #24]
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	6999      	ldr	r1, [r3, #24]
 8010dfe:	68bb      	ldr	r3, [r7, #8]
 8010e00:	691b      	ldr	r3, [r3, #16]
 8010e02:	021a      	lsls	r2, r3, #8
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	430a      	orrs	r2, r1
 8010e0a:	619a      	str	r2, [r3, #24]
      break;
 8010e0c:	e084      	b.n	8010f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	68b9      	ldr	r1, [r7, #8]
 8010e14:	4618      	mov	r0, r3
 8010e16:	f000 fb79 	bl	801150c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	69da      	ldr	r2, [r3, #28]
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	f042 0208 	orr.w	r2, r2, #8
 8010e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	69da      	ldr	r2, [r3, #28]
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	f022 0204 	bic.w	r2, r2, #4
 8010e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	69d9      	ldr	r1, [r3, #28]
 8010e40:	68bb      	ldr	r3, [r7, #8]
 8010e42:	691a      	ldr	r2, [r3, #16]
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	430a      	orrs	r2, r1
 8010e4a:	61da      	str	r2, [r3, #28]
      break;
 8010e4c:	e064      	b.n	8010f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	68b9      	ldr	r1, [r7, #8]
 8010e54:	4618      	mov	r0, r3
 8010e56:	f000 fbe1 	bl	801161c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	69da      	ldr	r2, [r3, #28]
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	69da      	ldr	r2, [r3, #28]
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	69d9      	ldr	r1, [r3, #28]
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	691b      	ldr	r3, [r3, #16]
 8010e84:	021a      	lsls	r2, r3, #8
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	430a      	orrs	r2, r1
 8010e8c:	61da      	str	r2, [r3, #28]
      break;
 8010e8e:	e043      	b.n	8010f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	68b9      	ldr	r1, [r7, #8]
 8010e96:	4618      	mov	r0, r3
 8010e98:	f000 fc2a 	bl	80116f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	f042 0208 	orr.w	r2, r2, #8
 8010eaa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	f022 0204 	bic.w	r2, r2, #4
 8010eba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8010ec2:	68bb      	ldr	r3, [r7, #8]
 8010ec4:	691a      	ldr	r2, [r3, #16]
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	430a      	orrs	r2, r1
 8010ecc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8010ece:	e023      	b.n	8010f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	68b9      	ldr	r1, [r7, #8]
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f000 fc6e 	bl	80117b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010eea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8010efa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	691b      	ldr	r3, [r3, #16]
 8010f06:	021a      	lsls	r2, r3, #8
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	430a      	orrs	r2, r1
 8010f0e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8010f10:	e002      	b.n	8010f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010f12:	2301      	movs	r3, #1
 8010f14:	75fb      	strb	r3, [r7, #23]
      break;
 8010f16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	3718      	adds	r7, #24
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}
 8010f2a:	bf00      	nop

08010f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b084      	sub	sp, #16
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
 8010f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010f36:	2300      	movs	r3, #0
 8010f38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010f40:	2b01      	cmp	r3, #1
 8010f42:	d101      	bne.n	8010f48 <HAL_TIM_ConfigClockSource+0x1c>
 8010f44:	2302      	movs	r3, #2
 8010f46:	e0dc      	b.n	8011102 <HAL_TIM_ConfigClockSource+0x1d6>
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	2201      	movs	r2, #1
 8010f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2202      	movs	r2, #2
 8010f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	689b      	ldr	r3, [r3, #8]
 8010f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010f60:	68ba      	ldr	r2, [r7, #8]
 8010f62:	4b6a      	ldr	r3, [pc, #424]	@ (801110c <HAL_TIM_ConfigClockSource+0x1e0>)
 8010f64:	4013      	ands	r3, r2
 8010f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010f68:	68bb      	ldr	r3, [r7, #8]
 8010f6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010f6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	68ba      	ldr	r2, [r7, #8]
 8010f76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	4a64      	ldr	r2, [pc, #400]	@ (8011110 <HAL_TIM_ConfigClockSource+0x1e4>)
 8010f7e:	4293      	cmp	r3, r2
 8010f80:	f000 80a9 	beq.w	80110d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010f84:	4a62      	ldr	r2, [pc, #392]	@ (8011110 <HAL_TIM_ConfigClockSource+0x1e4>)
 8010f86:	4293      	cmp	r3, r2
 8010f88:	f200 80ae 	bhi.w	80110e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8010f8c:	4a61      	ldr	r2, [pc, #388]	@ (8011114 <HAL_TIM_ConfigClockSource+0x1e8>)
 8010f8e:	4293      	cmp	r3, r2
 8010f90:	f000 80a1 	beq.w	80110d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010f94:	4a5f      	ldr	r2, [pc, #380]	@ (8011114 <HAL_TIM_ConfigClockSource+0x1e8>)
 8010f96:	4293      	cmp	r3, r2
 8010f98:	f200 80a6 	bhi.w	80110e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8010f9c:	4a5e      	ldr	r2, [pc, #376]	@ (8011118 <HAL_TIM_ConfigClockSource+0x1ec>)
 8010f9e:	4293      	cmp	r3, r2
 8010fa0:	f000 8099 	beq.w	80110d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010fa4:	4a5c      	ldr	r2, [pc, #368]	@ (8011118 <HAL_TIM_ConfigClockSource+0x1ec>)
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	f200 809e 	bhi.w	80110e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8010fac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8010fb0:	f000 8091 	beq.w	80110d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010fb4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8010fb8:	f200 8096 	bhi.w	80110e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8010fbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010fc0:	f000 8089 	beq.w	80110d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010fc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010fc8:	f200 808e 	bhi.w	80110e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8010fcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010fd0:	d03e      	beq.n	8011050 <HAL_TIM_ConfigClockSource+0x124>
 8010fd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010fd6:	f200 8087 	bhi.w	80110e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8010fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010fde:	f000 8086 	beq.w	80110ee <HAL_TIM_ConfigClockSource+0x1c2>
 8010fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010fe6:	d87f      	bhi.n	80110e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8010fe8:	2b70      	cmp	r3, #112	@ 0x70
 8010fea:	d01a      	beq.n	8011022 <HAL_TIM_ConfigClockSource+0xf6>
 8010fec:	2b70      	cmp	r3, #112	@ 0x70
 8010fee:	d87b      	bhi.n	80110e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8010ff0:	2b60      	cmp	r3, #96	@ 0x60
 8010ff2:	d050      	beq.n	8011096 <HAL_TIM_ConfigClockSource+0x16a>
 8010ff4:	2b60      	cmp	r3, #96	@ 0x60
 8010ff6:	d877      	bhi.n	80110e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8010ff8:	2b50      	cmp	r3, #80	@ 0x50
 8010ffa:	d03c      	beq.n	8011076 <HAL_TIM_ConfigClockSource+0x14a>
 8010ffc:	2b50      	cmp	r3, #80	@ 0x50
 8010ffe:	d873      	bhi.n	80110e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8011000:	2b40      	cmp	r3, #64	@ 0x40
 8011002:	d058      	beq.n	80110b6 <HAL_TIM_ConfigClockSource+0x18a>
 8011004:	2b40      	cmp	r3, #64	@ 0x40
 8011006:	d86f      	bhi.n	80110e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8011008:	2b30      	cmp	r3, #48	@ 0x30
 801100a:	d064      	beq.n	80110d6 <HAL_TIM_ConfigClockSource+0x1aa>
 801100c:	2b30      	cmp	r3, #48	@ 0x30
 801100e:	d86b      	bhi.n	80110e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8011010:	2b20      	cmp	r3, #32
 8011012:	d060      	beq.n	80110d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8011014:	2b20      	cmp	r3, #32
 8011016:	d867      	bhi.n	80110e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8011018:	2b00      	cmp	r3, #0
 801101a:	d05c      	beq.n	80110d6 <HAL_TIM_ConfigClockSource+0x1aa>
 801101c:	2b10      	cmp	r3, #16
 801101e:	d05a      	beq.n	80110d6 <HAL_TIM_ConfigClockSource+0x1aa>
 8011020:	e062      	b.n	80110e8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011026:	683b      	ldr	r3, [r7, #0]
 8011028:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801102e:	683b      	ldr	r3, [r7, #0]
 8011030:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011032:	f000 fca5 	bl	8011980 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	689b      	ldr	r3, [r3, #8]
 801103c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8011044:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	68ba      	ldr	r2, [r7, #8]
 801104c:	609a      	str	r2, [r3, #8]
      break;
 801104e:	e04f      	b.n	80110f0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801105c:	683b      	ldr	r3, [r7, #0]
 801105e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011060:	f000 fc8e 	bl	8011980 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	689a      	ldr	r2, [r3, #8]
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8011072:	609a      	str	r2, [r3, #8]
      break;
 8011074:	e03c      	b.n	80110f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801107a:	683b      	ldr	r3, [r7, #0]
 801107c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801107e:	683b      	ldr	r3, [r7, #0]
 8011080:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011082:	461a      	mov	r2, r3
 8011084:	f000 fbfe 	bl	8011884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	2150      	movs	r1, #80	@ 0x50
 801108e:	4618      	mov	r0, r3
 8011090:	f000 fc58 	bl	8011944 <TIM_ITRx_SetConfig>
      break;
 8011094:	e02c      	b.n	80110f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80110a2:	461a      	mov	r2, r3
 80110a4:	f000 fc1d 	bl	80118e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	2160      	movs	r1, #96	@ 0x60
 80110ae:	4618      	mov	r0, r3
 80110b0:	f000 fc48 	bl	8011944 <TIM_ITRx_SetConfig>
      break;
 80110b4:	e01c      	b.n	80110f0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80110c2:	461a      	mov	r2, r3
 80110c4:	f000 fbde 	bl	8011884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	2140      	movs	r1, #64	@ 0x40
 80110ce:	4618      	mov	r0, r3
 80110d0:	f000 fc38 	bl	8011944 <TIM_ITRx_SetConfig>
      break;
 80110d4:	e00c      	b.n	80110f0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	681a      	ldr	r2, [r3, #0]
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	4619      	mov	r1, r3
 80110e0:	4610      	mov	r0, r2
 80110e2:	f000 fc2f 	bl	8011944 <TIM_ITRx_SetConfig>
      break;
 80110e6:	e003      	b.n	80110f0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80110e8:	2301      	movs	r3, #1
 80110ea:	73fb      	strb	r3, [r7, #15]
      break;
 80110ec:	e000      	b.n	80110f0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80110ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2201      	movs	r2, #1
 80110f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2200      	movs	r2, #0
 80110fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8011100:	7bfb      	ldrb	r3, [r7, #15]
}
 8011102:	4618      	mov	r0, r3
 8011104:	3710      	adds	r7, #16
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}
 801110a:	bf00      	nop
 801110c:	ffceff88 	.word	0xffceff88
 8011110:	00100040 	.word	0x00100040
 8011114:	00100030 	.word	0x00100030
 8011118:	00100020 	.word	0x00100020

0801111c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801111c:	b480      	push	{r7}
 801111e:	b083      	sub	sp, #12
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8011124:	bf00      	nop
 8011126:	370c      	adds	r7, #12
 8011128:	46bd      	mov	sp, r7
 801112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112e:	4770      	bx	lr

08011130 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011130:	b480      	push	{r7}
 8011132:	b083      	sub	sp, #12
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011138:	bf00      	nop
 801113a:	370c      	adds	r7, #12
 801113c:	46bd      	mov	sp, r7
 801113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011142:	4770      	bx	lr

08011144 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011144:	b480      	push	{r7}
 8011146:	b083      	sub	sp, #12
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801114c:	bf00      	nop
 801114e:	370c      	adds	r7, #12
 8011150:	46bd      	mov	sp, r7
 8011152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011156:	4770      	bx	lr

08011158 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011158:	b480      	push	{r7}
 801115a:	b083      	sub	sp, #12
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011160:	bf00      	nop
 8011162:	370c      	adds	r7, #12
 8011164:	46bd      	mov	sp, r7
 8011166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116a:	4770      	bx	lr

0801116c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801116c:	b480      	push	{r7}
 801116e:	b083      	sub	sp, #12
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011174:	bf00      	nop
 8011176:	370c      	adds	r7, #12
 8011178:	46bd      	mov	sp, r7
 801117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117e:	4770      	bx	lr

08011180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011180:	b480      	push	{r7}
 8011182:	b085      	sub	sp, #20
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	4a47      	ldr	r2, [pc, #284]	@ (80112b0 <TIM_Base_SetConfig+0x130>)
 8011194:	4293      	cmp	r3, r2
 8011196:	d013      	beq.n	80111c0 <TIM_Base_SetConfig+0x40>
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801119e:	d00f      	beq.n	80111c0 <TIM_Base_SetConfig+0x40>
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	4a44      	ldr	r2, [pc, #272]	@ (80112b4 <TIM_Base_SetConfig+0x134>)
 80111a4:	4293      	cmp	r3, r2
 80111a6:	d00b      	beq.n	80111c0 <TIM_Base_SetConfig+0x40>
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	4a43      	ldr	r2, [pc, #268]	@ (80112b8 <TIM_Base_SetConfig+0x138>)
 80111ac:	4293      	cmp	r3, r2
 80111ae:	d007      	beq.n	80111c0 <TIM_Base_SetConfig+0x40>
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	4a42      	ldr	r2, [pc, #264]	@ (80112bc <TIM_Base_SetConfig+0x13c>)
 80111b4:	4293      	cmp	r3, r2
 80111b6:	d003      	beq.n	80111c0 <TIM_Base_SetConfig+0x40>
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	4a41      	ldr	r2, [pc, #260]	@ (80112c0 <TIM_Base_SetConfig+0x140>)
 80111bc:	4293      	cmp	r3, r2
 80111be:	d108      	bne.n	80111d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80111c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	685b      	ldr	r3, [r3, #4]
 80111cc:	68fa      	ldr	r2, [r7, #12]
 80111ce:	4313      	orrs	r3, r2
 80111d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	4a36      	ldr	r2, [pc, #216]	@ (80112b0 <TIM_Base_SetConfig+0x130>)
 80111d6:	4293      	cmp	r3, r2
 80111d8:	d027      	beq.n	801122a <TIM_Base_SetConfig+0xaa>
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80111e0:	d023      	beq.n	801122a <TIM_Base_SetConfig+0xaa>
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	4a33      	ldr	r2, [pc, #204]	@ (80112b4 <TIM_Base_SetConfig+0x134>)
 80111e6:	4293      	cmp	r3, r2
 80111e8:	d01f      	beq.n	801122a <TIM_Base_SetConfig+0xaa>
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	4a32      	ldr	r2, [pc, #200]	@ (80112b8 <TIM_Base_SetConfig+0x138>)
 80111ee:	4293      	cmp	r3, r2
 80111f0:	d01b      	beq.n	801122a <TIM_Base_SetConfig+0xaa>
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	4a31      	ldr	r2, [pc, #196]	@ (80112bc <TIM_Base_SetConfig+0x13c>)
 80111f6:	4293      	cmp	r3, r2
 80111f8:	d017      	beq.n	801122a <TIM_Base_SetConfig+0xaa>
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	4a30      	ldr	r2, [pc, #192]	@ (80112c0 <TIM_Base_SetConfig+0x140>)
 80111fe:	4293      	cmp	r3, r2
 8011200:	d013      	beq.n	801122a <TIM_Base_SetConfig+0xaa>
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	4a2f      	ldr	r2, [pc, #188]	@ (80112c4 <TIM_Base_SetConfig+0x144>)
 8011206:	4293      	cmp	r3, r2
 8011208:	d00f      	beq.n	801122a <TIM_Base_SetConfig+0xaa>
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	4a2e      	ldr	r2, [pc, #184]	@ (80112c8 <TIM_Base_SetConfig+0x148>)
 801120e:	4293      	cmp	r3, r2
 8011210:	d00b      	beq.n	801122a <TIM_Base_SetConfig+0xaa>
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	4a2d      	ldr	r2, [pc, #180]	@ (80112cc <TIM_Base_SetConfig+0x14c>)
 8011216:	4293      	cmp	r3, r2
 8011218:	d007      	beq.n	801122a <TIM_Base_SetConfig+0xaa>
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	4a2c      	ldr	r2, [pc, #176]	@ (80112d0 <TIM_Base_SetConfig+0x150>)
 801121e:	4293      	cmp	r3, r2
 8011220:	d003      	beq.n	801122a <TIM_Base_SetConfig+0xaa>
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	4a2b      	ldr	r2, [pc, #172]	@ (80112d4 <TIM_Base_SetConfig+0x154>)
 8011226:	4293      	cmp	r3, r2
 8011228:	d108      	bne.n	801123c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	68db      	ldr	r3, [r3, #12]
 8011236:	68fa      	ldr	r2, [r7, #12]
 8011238:	4313      	orrs	r3, r2
 801123a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	695b      	ldr	r3, [r3, #20]
 8011246:	4313      	orrs	r3, r2
 8011248:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	689a      	ldr	r2, [r3, #8]
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011252:	683b      	ldr	r3, [r7, #0]
 8011254:	681a      	ldr	r2, [r3, #0]
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	4a14      	ldr	r2, [pc, #80]	@ (80112b0 <TIM_Base_SetConfig+0x130>)
 801125e:	4293      	cmp	r3, r2
 8011260:	d00f      	beq.n	8011282 <TIM_Base_SetConfig+0x102>
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	4a16      	ldr	r2, [pc, #88]	@ (80112c0 <TIM_Base_SetConfig+0x140>)
 8011266:	4293      	cmp	r3, r2
 8011268:	d00b      	beq.n	8011282 <TIM_Base_SetConfig+0x102>
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	4a15      	ldr	r2, [pc, #84]	@ (80112c4 <TIM_Base_SetConfig+0x144>)
 801126e:	4293      	cmp	r3, r2
 8011270:	d007      	beq.n	8011282 <TIM_Base_SetConfig+0x102>
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	4a14      	ldr	r2, [pc, #80]	@ (80112c8 <TIM_Base_SetConfig+0x148>)
 8011276:	4293      	cmp	r3, r2
 8011278:	d003      	beq.n	8011282 <TIM_Base_SetConfig+0x102>
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	4a13      	ldr	r2, [pc, #76]	@ (80112cc <TIM_Base_SetConfig+0x14c>)
 801127e:	4293      	cmp	r3, r2
 8011280:	d103      	bne.n	801128a <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	691a      	ldr	r2, [r3, #16]
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	f043 0204 	orr.w	r2, r3, #4
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	2201      	movs	r2, #1
 801129a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	68fa      	ldr	r2, [r7, #12]
 80112a0:	601a      	str	r2, [r3, #0]
}
 80112a2:	bf00      	nop
 80112a4:	3714      	adds	r7, #20
 80112a6:	46bd      	mov	sp, r7
 80112a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ac:	4770      	bx	lr
 80112ae:	bf00      	nop
 80112b0:	40010000 	.word	0x40010000
 80112b4:	40000400 	.word	0x40000400
 80112b8:	40000800 	.word	0x40000800
 80112bc:	40000c00 	.word	0x40000c00
 80112c0:	40010400 	.word	0x40010400
 80112c4:	40014000 	.word	0x40014000
 80112c8:	40014400 	.word	0x40014400
 80112cc:	40014800 	.word	0x40014800
 80112d0:	4000e000 	.word	0x4000e000
 80112d4:	4000e400 	.word	0x4000e400

080112d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80112d8:	b480      	push	{r7}
 80112da:	b087      	sub	sp, #28
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6a1b      	ldr	r3, [r3, #32]
 80112e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	6a1b      	ldr	r3, [r3, #32]
 80112ec:	f023 0201 	bic.w	r2, r3, #1
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	685b      	ldr	r3, [r3, #4]
 80112f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	699b      	ldr	r3, [r3, #24]
 80112fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011300:	68fa      	ldr	r2, [r7, #12]
 8011302:	4b37      	ldr	r3, [pc, #220]	@ (80113e0 <TIM_OC1_SetConfig+0x108>)
 8011304:	4013      	ands	r3, r2
 8011306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	f023 0303 	bic.w	r3, r3, #3
 801130e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	68fa      	ldr	r2, [r7, #12]
 8011316:	4313      	orrs	r3, r2
 8011318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	f023 0302 	bic.w	r3, r3, #2
 8011320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011322:	683b      	ldr	r3, [r7, #0]
 8011324:	689b      	ldr	r3, [r3, #8]
 8011326:	697a      	ldr	r2, [r7, #20]
 8011328:	4313      	orrs	r3, r2
 801132a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	4a2d      	ldr	r2, [pc, #180]	@ (80113e4 <TIM_OC1_SetConfig+0x10c>)
 8011330:	4293      	cmp	r3, r2
 8011332:	d00f      	beq.n	8011354 <TIM_OC1_SetConfig+0x7c>
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	4a2c      	ldr	r2, [pc, #176]	@ (80113e8 <TIM_OC1_SetConfig+0x110>)
 8011338:	4293      	cmp	r3, r2
 801133a:	d00b      	beq.n	8011354 <TIM_OC1_SetConfig+0x7c>
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	4a2b      	ldr	r2, [pc, #172]	@ (80113ec <TIM_OC1_SetConfig+0x114>)
 8011340:	4293      	cmp	r3, r2
 8011342:	d007      	beq.n	8011354 <TIM_OC1_SetConfig+0x7c>
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	4a2a      	ldr	r2, [pc, #168]	@ (80113f0 <TIM_OC1_SetConfig+0x118>)
 8011348:	4293      	cmp	r3, r2
 801134a:	d003      	beq.n	8011354 <TIM_OC1_SetConfig+0x7c>
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	4a29      	ldr	r2, [pc, #164]	@ (80113f4 <TIM_OC1_SetConfig+0x11c>)
 8011350:	4293      	cmp	r3, r2
 8011352:	d10c      	bne.n	801136e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011354:	697b      	ldr	r3, [r7, #20]
 8011356:	f023 0308 	bic.w	r3, r3, #8
 801135a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	68db      	ldr	r3, [r3, #12]
 8011360:	697a      	ldr	r2, [r7, #20]
 8011362:	4313      	orrs	r3, r2
 8011364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011366:	697b      	ldr	r3, [r7, #20]
 8011368:	f023 0304 	bic.w	r3, r3, #4
 801136c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	4a1c      	ldr	r2, [pc, #112]	@ (80113e4 <TIM_OC1_SetConfig+0x10c>)
 8011372:	4293      	cmp	r3, r2
 8011374:	d00f      	beq.n	8011396 <TIM_OC1_SetConfig+0xbe>
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	4a1b      	ldr	r2, [pc, #108]	@ (80113e8 <TIM_OC1_SetConfig+0x110>)
 801137a:	4293      	cmp	r3, r2
 801137c:	d00b      	beq.n	8011396 <TIM_OC1_SetConfig+0xbe>
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	4a1a      	ldr	r2, [pc, #104]	@ (80113ec <TIM_OC1_SetConfig+0x114>)
 8011382:	4293      	cmp	r3, r2
 8011384:	d007      	beq.n	8011396 <TIM_OC1_SetConfig+0xbe>
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	4a19      	ldr	r2, [pc, #100]	@ (80113f0 <TIM_OC1_SetConfig+0x118>)
 801138a:	4293      	cmp	r3, r2
 801138c:	d003      	beq.n	8011396 <TIM_OC1_SetConfig+0xbe>
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	4a18      	ldr	r2, [pc, #96]	@ (80113f4 <TIM_OC1_SetConfig+0x11c>)
 8011392:	4293      	cmp	r3, r2
 8011394:	d111      	bne.n	80113ba <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011396:	693b      	ldr	r3, [r7, #16]
 8011398:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801139c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801139e:	693b      	ldr	r3, [r7, #16]
 80113a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80113a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	695b      	ldr	r3, [r3, #20]
 80113aa:	693a      	ldr	r2, [r7, #16]
 80113ac:	4313      	orrs	r3, r2
 80113ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	699b      	ldr	r3, [r3, #24]
 80113b4:	693a      	ldr	r2, [r7, #16]
 80113b6:	4313      	orrs	r3, r2
 80113b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	693a      	ldr	r2, [r7, #16]
 80113be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	68fa      	ldr	r2, [r7, #12]
 80113c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	685a      	ldr	r2, [r3, #4]
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	697a      	ldr	r2, [r7, #20]
 80113d2:	621a      	str	r2, [r3, #32]
}
 80113d4:	bf00      	nop
 80113d6:	371c      	adds	r7, #28
 80113d8:	46bd      	mov	sp, r7
 80113da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113de:	4770      	bx	lr
 80113e0:	fffeff8f 	.word	0xfffeff8f
 80113e4:	40010000 	.word	0x40010000
 80113e8:	40010400 	.word	0x40010400
 80113ec:	40014000 	.word	0x40014000
 80113f0:	40014400 	.word	0x40014400
 80113f4:	40014800 	.word	0x40014800

080113f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80113f8:	b480      	push	{r7}
 80113fa:	b087      	sub	sp, #28
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
 8011400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	6a1b      	ldr	r3, [r3, #32]
 8011406:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	6a1b      	ldr	r3, [r3, #32]
 801140c:	f023 0210 	bic.w	r2, r3, #16
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	685b      	ldr	r3, [r3, #4]
 8011418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	699b      	ldr	r3, [r3, #24]
 801141e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011420:	68fa      	ldr	r2, [r7, #12]
 8011422:	4b34      	ldr	r3, [pc, #208]	@ (80114f4 <TIM_OC2_SetConfig+0xfc>)
 8011424:	4013      	ands	r3, r2
 8011426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801142e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	021b      	lsls	r3, r3, #8
 8011436:	68fa      	ldr	r2, [r7, #12]
 8011438:	4313      	orrs	r3, r2
 801143a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801143c:	697b      	ldr	r3, [r7, #20]
 801143e:	f023 0320 	bic.w	r3, r3, #32
 8011442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	689b      	ldr	r3, [r3, #8]
 8011448:	011b      	lsls	r3, r3, #4
 801144a:	697a      	ldr	r2, [r7, #20]
 801144c:	4313      	orrs	r3, r2
 801144e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	4a29      	ldr	r2, [pc, #164]	@ (80114f8 <TIM_OC2_SetConfig+0x100>)
 8011454:	4293      	cmp	r3, r2
 8011456:	d003      	beq.n	8011460 <TIM_OC2_SetConfig+0x68>
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	4a28      	ldr	r2, [pc, #160]	@ (80114fc <TIM_OC2_SetConfig+0x104>)
 801145c:	4293      	cmp	r3, r2
 801145e:	d10d      	bne.n	801147c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	68db      	ldr	r3, [r3, #12]
 801146c:	011b      	lsls	r3, r3, #4
 801146e:	697a      	ldr	r2, [r7, #20]
 8011470:	4313      	orrs	r3, r2
 8011472:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011474:	697b      	ldr	r3, [r7, #20]
 8011476:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801147a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	4a1e      	ldr	r2, [pc, #120]	@ (80114f8 <TIM_OC2_SetConfig+0x100>)
 8011480:	4293      	cmp	r3, r2
 8011482:	d00f      	beq.n	80114a4 <TIM_OC2_SetConfig+0xac>
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	4a1d      	ldr	r2, [pc, #116]	@ (80114fc <TIM_OC2_SetConfig+0x104>)
 8011488:	4293      	cmp	r3, r2
 801148a:	d00b      	beq.n	80114a4 <TIM_OC2_SetConfig+0xac>
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	4a1c      	ldr	r2, [pc, #112]	@ (8011500 <TIM_OC2_SetConfig+0x108>)
 8011490:	4293      	cmp	r3, r2
 8011492:	d007      	beq.n	80114a4 <TIM_OC2_SetConfig+0xac>
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	4a1b      	ldr	r2, [pc, #108]	@ (8011504 <TIM_OC2_SetConfig+0x10c>)
 8011498:	4293      	cmp	r3, r2
 801149a:	d003      	beq.n	80114a4 <TIM_OC2_SetConfig+0xac>
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	4a1a      	ldr	r2, [pc, #104]	@ (8011508 <TIM_OC2_SetConfig+0x110>)
 80114a0:	4293      	cmp	r3, r2
 80114a2:	d113      	bne.n	80114cc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80114a4:	693b      	ldr	r3, [r7, #16]
 80114a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80114aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80114ac:	693b      	ldr	r3, [r7, #16]
 80114ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80114b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	695b      	ldr	r3, [r3, #20]
 80114b8:	009b      	lsls	r3, r3, #2
 80114ba:	693a      	ldr	r2, [r7, #16]
 80114bc:	4313      	orrs	r3, r2
 80114be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	699b      	ldr	r3, [r3, #24]
 80114c4:	009b      	lsls	r3, r3, #2
 80114c6:	693a      	ldr	r2, [r7, #16]
 80114c8:	4313      	orrs	r3, r2
 80114ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	693a      	ldr	r2, [r7, #16]
 80114d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	68fa      	ldr	r2, [r7, #12]
 80114d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	685a      	ldr	r2, [r3, #4]
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	697a      	ldr	r2, [r7, #20]
 80114e4:	621a      	str	r2, [r3, #32]
}
 80114e6:	bf00      	nop
 80114e8:	371c      	adds	r7, #28
 80114ea:	46bd      	mov	sp, r7
 80114ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f0:	4770      	bx	lr
 80114f2:	bf00      	nop
 80114f4:	feff8fff 	.word	0xfeff8fff
 80114f8:	40010000 	.word	0x40010000
 80114fc:	40010400 	.word	0x40010400
 8011500:	40014000 	.word	0x40014000
 8011504:	40014400 	.word	0x40014400
 8011508:	40014800 	.word	0x40014800

0801150c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801150c:	b480      	push	{r7}
 801150e:	b087      	sub	sp, #28
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
 8011514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6a1b      	ldr	r3, [r3, #32]
 801151a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	6a1b      	ldr	r3, [r3, #32]
 8011520:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	685b      	ldr	r3, [r3, #4]
 801152c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	69db      	ldr	r3, [r3, #28]
 8011532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011534:	68fa      	ldr	r2, [r7, #12]
 8011536:	4b33      	ldr	r3, [pc, #204]	@ (8011604 <TIM_OC3_SetConfig+0xf8>)
 8011538:	4013      	ands	r3, r2
 801153a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	f023 0303 	bic.w	r3, r3, #3
 8011542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	68fa      	ldr	r2, [r7, #12]
 801154a:	4313      	orrs	r3, r2
 801154c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801154e:	697b      	ldr	r3, [r7, #20]
 8011550:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8011554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	689b      	ldr	r3, [r3, #8]
 801155a:	021b      	lsls	r3, r3, #8
 801155c:	697a      	ldr	r2, [r7, #20]
 801155e:	4313      	orrs	r3, r2
 8011560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	4a28      	ldr	r2, [pc, #160]	@ (8011608 <TIM_OC3_SetConfig+0xfc>)
 8011566:	4293      	cmp	r3, r2
 8011568:	d003      	beq.n	8011572 <TIM_OC3_SetConfig+0x66>
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	4a27      	ldr	r2, [pc, #156]	@ (801160c <TIM_OC3_SetConfig+0x100>)
 801156e:	4293      	cmp	r3, r2
 8011570:	d10d      	bne.n	801158e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011572:	697b      	ldr	r3, [r7, #20]
 8011574:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	68db      	ldr	r3, [r3, #12]
 801157e:	021b      	lsls	r3, r3, #8
 8011580:	697a      	ldr	r2, [r7, #20]
 8011582:	4313      	orrs	r3, r2
 8011584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801158c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	4a1d      	ldr	r2, [pc, #116]	@ (8011608 <TIM_OC3_SetConfig+0xfc>)
 8011592:	4293      	cmp	r3, r2
 8011594:	d00f      	beq.n	80115b6 <TIM_OC3_SetConfig+0xaa>
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	4a1c      	ldr	r2, [pc, #112]	@ (801160c <TIM_OC3_SetConfig+0x100>)
 801159a:	4293      	cmp	r3, r2
 801159c:	d00b      	beq.n	80115b6 <TIM_OC3_SetConfig+0xaa>
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	4a1b      	ldr	r2, [pc, #108]	@ (8011610 <TIM_OC3_SetConfig+0x104>)
 80115a2:	4293      	cmp	r3, r2
 80115a4:	d007      	beq.n	80115b6 <TIM_OC3_SetConfig+0xaa>
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	4a1a      	ldr	r2, [pc, #104]	@ (8011614 <TIM_OC3_SetConfig+0x108>)
 80115aa:	4293      	cmp	r3, r2
 80115ac:	d003      	beq.n	80115b6 <TIM_OC3_SetConfig+0xaa>
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	4a19      	ldr	r2, [pc, #100]	@ (8011618 <TIM_OC3_SetConfig+0x10c>)
 80115b2:	4293      	cmp	r3, r2
 80115b4:	d113      	bne.n	80115de <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80115bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80115c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	695b      	ldr	r3, [r3, #20]
 80115ca:	011b      	lsls	r3, r3, #4
 80115cc:	693a      	ldr	r2, [r7, #16]
 80115ce:	4313      	orrs	r3, r2
 80115d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	699b      	ldr	r3, [r3, #24]
 80115d6:	011b      	lsls	r3, r3, #4
 80115d8:	693a      	ldr	r2, [r7, #16]
 80115da:	4313      	orrs	r3, r2
 80115dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	693a      	ldr	r2, [r7, #16]
 80115e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	68fa      	ldr	r2, [r7, #12]
 80115e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	685a      	ldr	r2, [r3, #4]
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	697a      	ldr	r2, [r7, #20]
 80115f6:	621a      	str	r2, [r3, #32]
}
 80115f8:	bf00      	nop
 80115fa:	371c      	adds	r7, #28
 80115fc:	46bd      	mov	sp, r7
 80115fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011602:	4770      	bx	lr
 8011604:	fffeff8f 	.word	0xfffeff8f
 8011608:	40010000 	.word	0x40010000
 801160c:	40010400 	.word	0x40010400
 8011610:	40014000 	.word	0x40014000
 8011614:	40014400 	.word	0x40014400
 8011618:	40014800 	.word	0x40014800

0801161c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801161c:	b480      	push	{r7}
 801161e:	b087      	sub	sp, #28
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
 8011624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	6a1b      	ldr	r3, [r3, #32]
 801162a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	6a1b      	ldr	r3, [r3, #32]
 8011630:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	685b      	ldr	r3, [r3, #4]
 801163c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	69db      	ldr	r3, [r3, #28]
 8011642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011644:	68fa      	ldr	r2, [r7, #12]
 8011646:	4b24      	ldr	r3, [pc, #144]	@ (80116d8 <TIM_OC4_SetConfig+0xbc>)
 8011648:	4013      	ands	r3, r2
 801164a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011654:	683b      	ldr	r3, [r7, #0]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	021b      	lsls	r3, r3, #8
 801165a:	68fa      	ldr	r2, [r7, #12]
 801165c:	4313      	orrs	r3, r2
 801165e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011660:	693b      	ldr	r3, [r7, #16]
 8011662:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8011666:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	689b      	ldr	r3, [r3, #8]
 801166c:	031b      	lsls	r3, r3, #12
 801166e:	693a      	ldr	r2, [r7, #16]
 8011670:	4313      	orrs	r3, r2
 8011672:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	4a19      	ldr	r2, [pc, #100]	@ (80116dc <TIM_OC4_SetConfig+0xc0>)
 8011678:	4293      	cmp	r3, r2
 801167a:	d00f      	beq.n	801169c <TIM_OC4_SetConfig+0x80>
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	4a18      	ldr	r2, [pc, #96]	@ (80116e0 <TIM_OC4_SetConfig+0xc4>)
 8011680:	4293      	cmp	r3, r2
 8011682:	d00b      	beq.n	801169c <TIM_OC4_SetConfig+0x80>
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	4a17      	ldr	r2, [pc, #92]	@ (80116e4 <TIM_OC4_SetConfig+0xc8>)
 8011688:	4293      	cmp	r3, r2
 801168a:	d007      	beq.n	801169c <TIM_OC4_SetConfig+0x80>
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	4a16      	ldr	r2, [pc, #88]	@ (80116e8 <TIM_OC4_SetConfig+0xcc>)
 8011690:	4293      	cmp	r3, r2
 8011692:	d003      	beq.n	801169c <TIM_OC4_SetConfig+0x80>
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	4a15      	ldr	r2, [pc, #84]	@ (80116ec <TIM_OC4_SetConfig+0xd0>)
 8011698:	4293      	cmp	r3, r2
 801169a:	d109      	bne.n	80116b0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80116a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	695b      	ldr	r3, [r3, #20]
 80116a8:	019b      	lsls	r3, r3, #6
 80116aa:	697a      	ldr	r2, [r7, #20]
 80116ac:	4313      	orrs	r3, r2
 80116ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	697a      	ldr	r2, [r7, #20]
 80116b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	68fa      	ldr	r2, [r7, #12]
 80116ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	685a      	ldr	r2, [r3, #4]
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	693a      	ldr	r2, [r7, #16]
 80116c8:	621a      	str	r2, [r3, #32]
}
 80116ca:	bf00      	nop
 80116cc:	371c      	adds	r7, #28
 80116ce:	46bd      	mov	sp, r7
 80116d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d4:	4770      	bx	lr
 80116d6:	bf00      	nop
 80116d8:	feff8fff 	.word	0xfeff8fff
 80116dc:	40010000 	.word	0x40010000
 80116e0:	40010400 	.word	0x40010400
 80116e4:	40014000 	.word	0x40014000
 80116e8:	40014400 	.word	0x40014400
 80116ec:	40014800 	.word	0x40014800

080116f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80116f0:	b480      	push	{r7}
 80116f2:	b087      	sub	sp, #28
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	6a1b      	ldr	r3, [r3, #32]
 80116fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	6a1b      	ldr	r3, [r3, #32]
 8011704:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	685b      	ldr	r3, [r3, #4]
 8011710:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011718:	68fa      	ldr	r2, [r7, #12]
 801171a:	4b21      	ldr	r3, [pc, #132]	@ (80117a0 <TIM_OC5_SetConfig+0xb0>)
 801171c:	4013      	ands	r3, r2
 801171e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	68fa      	ldr	r2, [r7, #12]
 8011726:	4313      	orrs	r3, r2
 8011728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801172a:	693b      	ldr	r3, [r7, #16]
 801172c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8011730:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	689b      	ldr	r3, [r3, #8]
 8011736:	041b      	lsls	r3, r3, #16
 8011738:	693a      	ldr	r2, [r7, #16]
 801173a:	4313      	orrs	r3, r2
 801173c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	4a18      	ldr	r2, [pc, #96]	@ (80117a4 <TIM_OC5_SetConfig+0xb4>)
 8011742:	4293      	cmp	r3, r2
 8011744:	d00f      	beq.n	8011766 <TIM_OC5_SetConfig+0x76>
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	4a17      	ldr	r2, [pc, #92]	@ (80117a8 <TIM_OC5_SetConfig+0xb8>)
 801174a:	4293      	cmp	r3, r2
 801174c:	d00b      	beq.n	8011766 <TIM_OC5_SetConfig+0x76>
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	4a16      	ldr	r2, [pc, #88]	@ (80117ac <TIM_OC5_SetConfig+0xbc>)
 8011752:	4293      	cmp	r3, r2
 8011754:	d007      	beq.n	8011766 <TIM_OC5_SetConfig+0x76>
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	4a15      	ldr	r2, [pc, #84]	@ (80117b0 <TIM_OC5_SetConfig+0xc0>)
 801175a:	4293      	cmp	r3, r2
 801175c:	d003      	beq.n	8011766 <TIM_OC5_SetConfig+0x76>
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	4a14      	ldr	r2, [pc, #80]	@ (80117b4 <TIM_OC5_SetConfig+0xc4>)
 8011762:	4293      	cmp	r3, r2
 8011764:	d109      	bne.n	801177a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801176c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	695b      	ldr	r3, [r3, #20]
 8011772:	021b      	lsls	r3, r3, #8
 8011774:	697a      	ldr	r2, [r7, #20]
 8011776:	4313      	orrs	r3, r2
 8011778:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	697a      	ldr	r2, [r7, #20]
 801177e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	68fa      	ldr	r2, [r7, #12]
 8011784:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	685a      	ldr	r2, [r3, #4]
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	693a      	ldr	r2, [r7, #16]
 8011792:	621a      	str	r2, [r3, #32]
}
 8011794:	bf00      	nop
 8011796:	371c      	adds	r7, #28
 8011798:	46bd      	mov	sp, r7
 801179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179e:	4770      	bx	lr
 80117a0:	fffeff8f 	.word	0xfffeff8f
 80117a4:	40010000 	.word	0x40010000
 80117a8:	40010400 	.word	0x40010400
 80117ac:	40014000 	.word	0x40014000
 80117b0:	40014400 	.word	0x40014400
 80117b4:	40014800 	.word	0x40014800

080117b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80117b8:	b480      	push	{r7}
 80117ba:	b087      	sub	sp, #28
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
 80117c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	6a1b      	ldr	r3, [r3, #32]
 80117c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	6a1b      	ldr	r3, [r3, #32]
 80117cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	685b      	ldr	r3, [r3, #4]
 80117d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80117de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80117e0:	68fa      	ldr	r2, [r7, #12]
 80117e2:	4b22      	ldr	r3, [pc, #136]	@ (801186c <TIM_OC6_SetConfig+0xb4>)
 80117e4:	4013      	ands	r3, r2
 80117e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	021b      	lsls	r3, r3, #8
 80117ee:	68fa      	ldr	r2, [r7, #12]
 80117f0:	4313      	orrs	r3, r2
 80117f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80117f4:	693b      	ldr	r3, [r7, #16]
 80117f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80117fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	689b      	ldr	r3, [r3, #8]
 8011800:	051b      	lsls	r3, r3, #20
 8011802:	693a      	ldr	r2, [r7, #16]
 8011804:	4313      	orrs	r3, r2
 8011806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	4a19      	ldr	r2, [pc, #100]	@ (8011870 <TIM_OC6_SetConfig+0xb8>)
 801180c:	4293      	cmp	r3, r2
 801180e:	d00f      	beq.n	8011830 <TIM_OC6_SetConfig+0x78>
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	4a18      	ldr	r2, [pc, #96]	@ (8011874 <TIM_OC6_SetConfig+0xbc>)
 8011814:	4293      	cmp	r3, r2
 8011816:	d00b      	beq.n	8011830 <TIM_OC6_SetConfig+0x78>
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	4a17      	ldr	r2, [pc, #92]	@ (8011878 <TIM_OC6_SetConfig+0xc0>)
 801181c:	4293      	cmp	r3, r2
 801181e:	d007      	beq.n	8011830 <TIM_OC6_SetConfig+0x78>
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	4a16      	ldr	r2, [pc, #88]	@ (801187c <TIM_OC6_SetConfig+0xc4>)
 8011824:	4293      	cmp	r3, r2
 8011826:	d003      	beq.n	8011830 <TIM_OC6_SetConfig+0x78>
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	4a15      	ldr	r2, [pc, #84]	@ (8011880 <TIM_OC6_SetConfig+0xc8>)
 801182c:	4293      	cmp	r3, r2
 801182e:	d109      	bne.n	8011844 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011830:	697b      	ldr	r3, [r7, #20]
 8011832:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011836:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011838:	683b      	ldr	r3, [r7, #0]
 801183a:	695b      	ldr	r3, [r3, #20]
 801183c:	029b      	lsls	r3, r3, #10
 801183e:	697a      	ldr	r2, [r7, #20]
 8011840:	4313      	orrs	r3, r2
 8011842:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	697a      	ldr	r2, [r7, #20]
 8011848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	68fa      	ldr	r2, [r7, #12]
 801184e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	685a      	ldr	r2, [r3, #4]
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	693a      	ldr	r2, [r7, #16]
 801185c:	621a      	str	r2, [r3, #32]
}
 801185e:	bf00      	nop
 8011860:	371c      	adds	r7, #28
 8011862:	46bd      	mov	sp, r7
 8011864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011868:	4770      	bx	lr
 801186a:	bf00      	nop
 801186c:	feff8fff 	.word	0xfeff8fff
 8011870:	40010000 	.word	0x40010000
 8011874:	40010400 	.word	0x40010400
 8011878:	40014000 	.word	0x40014000
 801187c:	40014400 	.word	0x40014400
 8011880:	40014800 	.word	0x40014800

08011884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011884:	b480      	push	{r7}
 8011886:	b087      	sub	sp, #28
 8011888:	af00      	add	r7, sp, #0
 801188a:	60f8      	str	r0, [r7, #12]
 801188c:	60b9      	str	r1, [r7, #8]
 801188e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	6a1b      	ldr	r3, [r3, #32]
 8011894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	6a1b      	ldr	r3, [r3, #32]
 801189a:	f023 0201 	bic.w	r2, r3, #1
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	699b      	ldr	r3, [r3, #24]
 80118a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80118a8:	693b      	ldr	r3, [r7, #16]
 80118aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80118ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	011b      	lsls	r3, r3, #4
 80118b4:	693a      	ldr	r2, [r7, #16]
 80118b6:	4313      	orrs	r3, r2
 80118b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	f023 030a 	bic.w	r3, r3, #10
 80118c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80118c2:	697a      	ldr	r2, [r7, #20]
 80118c4:	68bb      	ldr	r3, [r7, #8]
 80118c6:	4313      	orrs	r3, r2
 80118c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	693a      	ldr	r2, [r7, #16]
 80118ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	697a      	ldr	r2, [r7, #20]
 80118d4:	621a      	str	r2, [r3, #32]
}
 80118d6:	bf00      	nop
 80118d8:	371c      	adds	r7, #28
 80118da:	46bd      	mov	sp, r7
 80118dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e0:	4770      	bx	lr

080118e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80118e2:	b480      	push	{r7}
 80118e4:	b087      	sub	sp, #28
 80118e6:	af00      	add	r7, sp, #0
 80118e8:	60f8      	str	r0, [r7, #12]
 80118ea:	60b9      	str	r1, [r7, #8]
 80118ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	6a1b      	ldr	r3, [r3, #32]
 80118f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	6a1b      	ldr	r3, [r3, #32]
 80118f8:	f023 0210 	bic.w	r2, r3, #16
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	699b      	ldr	r3, [r3, #24]
 8011904:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011906:	693b      	ldr	r3, [r7, #16]
 8011908:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801190c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	031b      	lsls	r3, r3, #12
 8011912:	693a      	ldr	r2, [r7, #16]
 8011914:	4313      	orrs	r3, r2
 8011916:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801191e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011920:	68bb      	ldr	r3, [r7, #8]
 8011922:	011b      	lsls	r3, r3, #4
 8011924:	697a      	ldr	r2, [r7, #20]
 8011926:	4313      	orrs	r3, r2
 8011928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	693a      	ldr	r2, [r7, #16]
 801192e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	697a      	ldr	r2, [r7, #20]
 8011934:	621a      	str	r2, [r3, #32]
}
 8011936:	bf00      	nop
 8011938:	371c      	adds	r7, #28
 801193a:	46bd      	mov	sp, r7
 801193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011940:	4770      	bx	lr
	...

08011944 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011944:	b480      	push	{r7}
 8011946:	b085      	sub	sp, #20
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
 801194c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	689b      	ldr	r3, [r3, #8]
 8011952:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011954:	68fa      	ldr	r2, [r7, #12]
 8011956:	4b09      	ldr	r3, [pc, #36]	@ (801197c <TIM_ITRx_SetConfig+0x38>)
 8011958:	4013      	ands	r3, r2
 801195a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801195c:	683a      	ldr	r2, [r7, #0]
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	4313      	orrs	r3, r2
 8011962:	f043 0307 	orr.w	r3, r3, #7
 8011966:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	68fa      	ldr	r2, [r7, #12]
 801196c:	609a      	str	r2, [r3, #8]
}
 801196e:	bf00      	nop
 8011970:	3714      	adds	r7, #20
 8011972:	46bd      	mov	sp, r7
 8011974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011978:	4770      	bx	lr
 801197a:	bf00      	nop
 801197c:	ffcfff8f 	.word	0xffcfff8f

08011980 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011980:	b480      	push	{r7}
 8011982:	b087      	sub	sp, #28
 8011984:	af00      	add	r7, sp, #0
 8011986:	60f8      	str	r0, [r7, #12]
 8011988:	60b9      	str	r1, [r7, #8]
 801198a:	607a      	str	r2, [r7, #4]
 801198c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	689b      	ldr	r3, [r3, #8]
 8011992:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011994:	697b      	ldr	r3, [r7, #20]
 8011996:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801199a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	021a      	lsls	r2, r3, #8
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	431a      	orrs	r2, r3
 80119a4:	68bb      	ldr	r3, [r7, #8]
 80119a6:	4313      	orrs	r3, r2
 80119a8:	697a      	ldr	r2, [r7, #20]
 80119aa:	4313      	orrs	r3, r2
 80119ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	697a      	ldr	r2, [r7, #20]
 80119b2:	609a      	str	r2, [r3, #8]
}
 80119b4:	bf00      	nop
 80119b6:	371c      	adds	r7, #28
 80119b8:	46bd      	mov	sp, r7
 80119ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119be:	4770      	bx	lr

080119c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80119c0:	b480      	push	{r7}
 80119c2:	b085      	sub	sp, #20
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
 80119c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80119d0:	2b01      	cmp	r3, #1
 80119d2:	d101      	bne.n	80119d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80119d4:	2302      	movs	r3, #2
 80119d6:	e077      	b.n	8011ac8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2201      	movs	r2, #1
 80119dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2202      	movs	r2, #2
 80119e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	685b      	ldr	r3, [r3, #4]
 80119ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	689b      	ldr	r3, [r3, #8]
 80119f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	4a35      	ldr	r2, [pc, #212]	@ (8011ad4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80119fe:	4293      	cmp	r3, r2
 8011a00:	d004      	beq.n	8011a0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	4a34      	ldr	r2, [pc, #208]	@ (8011ad8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011a08:	4293      	cmp	r3, r2
 8011a0a:	d108      	bne.n	8011a1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8011a12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	685b      	ldr	r3, [r3, #4]
 8011a18:	68fa      	ldr	r2, [r7, #12]
 8011a1a:	4313      	orrs	r3, r2
 8011a1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011a24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	68fa      	ldr	r2, [r7, #12]
 8011a2c:	4313      	orrs	r3, r2
 8011a2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	68fa      	ldr	r2, [r7, #12]
 8011a36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	4a25      	ldr	r2, [pc, #148]	@ (8011ad4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011a3e:	4293      	cmp	r3, r2
 8011a40:	d02c      	beq.n	8011a9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011a4a:	d027      	beq.n	8011a9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	4a22      	ldr	r2, [pc, #136]	@ (8011adc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8011a52:	4293      	cmp	r3, r2
 8011a54:	d022      	beq.n	8011a9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	4a21      	ldr	r2, [pc, #132]	@ (8011ae0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8011a5c:	4293      	cmp	r3, r2
 8011a5e:	d01d      	beq.n	8011a9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	4a1f      	ldr	r2, [pc, #124]	@ (8011ae4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8011a66:	4293      	cmp	r3, r2
 8011a68:	d018      	beq.n	8011a9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8011ad8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011a70:	4293      	cmp	r3, r2
 8011a72:	d013      	beq.n	8011a9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	4a1b      	ldr	r2, [pc, #108]	@ (8011ae8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8011a7a:	4293      	cmp	r3, r2
 8011a7c:	d00e      	beq.n	8011a9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	4a1a      	ldr	r2, [pc, #104]	@ (8011aec <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8011a84:	4293      	cmp	r3, r2
 8011a86:	d009      	beq.n	8011a9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	4a18      	ldr	r2, [pc, #96]	@ (8011af0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8011a8e:	4293      	cmp	r3, r2
 8011a90:	d004      	beq.n	8011a9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	4a17      	ldr	r2, [pc, #92]	@ (8011af4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011a98:	4293      	cmp	r3, r2
 8011a9a:	d10c      	bne.n	8011ab6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011a9c:	68bb      	ldr	r3, [r7, #8]
 8011a9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011aa2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011aa4:	683b      	ldr	r3, [r7, #0]
 8011aa6:	689b      	ldr	r3, [r3, #8]
 8011aa8:	68ba      	ldr	r2, [r7, #8]
 8011aaa:	4313      	orrs	r3, r2
 8011aac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	68ba      	ldr	r2, [r7, #8]
 8011ab4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	2201      	movs	r2, #1
 8011aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011ac6:	2300      	movs	r3, #0
}
 8011ac8:	4618      	mov	r0, r3
 8011aca:	3714      	adds	r7, #20
 8011acc:	46bd      	mov	sp, r7
 8011ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad2:	4770      	bx	lr
 8011ad4:	40010000 	.word	0x40010000
 8011ad8:	40010400 	.word	0x40010400
 8011adc:	40000400 	.word	0x40000400
 8011ae0:	40000800 	.word	0x40000800
 8011ae4:	40000c00 	.word	0x40000c00
 8011ae8:	40001800 	.word	0x40001800
 8011aec:	40014000 	.word	0x40014000
 8011af0:	4000e000 	.word	0x4000e000
 8011af4:	4000e400 	.word	0x4000e400

08011af8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011af8:	b480      	push	{r7}
 8011afa:	b085      	sub	sp, #20
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
 8011b00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011b02:	2300      	movs	r3, #0
 8011b04:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011b0c:	2b01      	cmp	r3, #1
 8011b0e:	d101      	bne.n	8011b14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011b10:	2302      	movs	r3, #2
 8011b12:	e073      	b.n	8011bfc <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2201      	movs	r2, #1
 8011b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	68db      	ldr	r3, [r3, #12]
 8011b26:	4313      	orrs	r3, r2
 8011b28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8011b30:	683b      	ldr	r3, [r7, #0]
 8011b32:	689b      	ldr	r3, [r3, #8]
 8011b34:	4313      	orrs	r3, r2
 8011b36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	685b      	ldr	r3, [r3, #4]
 8011b42:	4313      	orrs	r3, r2
 8011b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8011b4c:	683b      	ldr	r3, [r7, #0]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	4313      	orrs	r3, r2
 8011b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8011b5a:	683b      	ldr	r3, [r7, #0]
 8011b5c:	691b      	ldr	r3, [r3, #16]
 8011b5e:	4313      	orrs	r3, r2
 8011b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	695b      	ldr	r3, [r3, #20]
 8011b6c:	4313      	orrs	r3, r2
 8011b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b7a:	4313      	orrs	r3, r2
 8011b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8011b84:	683b      	ldr	r3, [r7, #0]
 8011b86:	699b      	ldr	r3, [r3, #24]
 8011b88:	041b      	lsls	r3, r3, #16
 8011b8a:	4313      	orrs	r3, r2
 8011b8c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8011b94:	683b      	ldr	r3, [r7, #0]
 8011b96:	69db      	ldr	r3, [r3, #28]
 8011b98:	4313      	orrs	r3, r2
 8011b9a:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	4a19      	ldr	r2, [pc, #100]	@ (8011c08 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8011ba2:	4293      	cmp	r3, r2
 8011ba4:	d004      	beq.n	8011bb0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	4a18      	ldr	r2, [pc, #96]	@ (8011c0c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8011bac:	4293      	cmp	r3, r2
 8011bae:	d11c      	bne.n	8011bea <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011bba:	051b      	lsls	r3, r3, #20
 8011bbc:	4313      	orrs	r3, r2
 8011bbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	6a1b      	ldr	r3, [r3, #32]
 8011bca:	4313      	orrs	r3, r2
 8011bcc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bd8:	4313      	orrs	r3, r2
 8011bda:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011be6:	4313      	orrs	r3, r2
 8011be8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	68fa      	ldr	r2, [r7, #12]
 8011bf0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8011bfa:	2300      	movs	r3, #0
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3714      	adds	r7, #20
 8011c00:	46bd      	mov	sp, r7
 8011c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c06:	4770      	bx	lr
 8011c08:	40010000 	.word	0x40010000
 8011c0c:	40010400 	.word	0x40010400

08011c10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011c10:	b480      	push	{r7}
 8011c12:	b083      	sub	sp, #12
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011c18:	bf00      	nop
 8011c1a:	370c      	adds	r7, #12
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c22:	4770      	bx	lr

08011c24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011c24:	b480      	push	{r7}
 8011c26:	b083      	sub	sp, #12
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011c2c:	bf00      	nop
 8011c2e:	370c      	adds	r7, #12
 8011c30:	46bd      	mov	sp, r7
 8011c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c36:	4770      	bx	lr

08011c38 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011c38:	b480      	push	{r7}
 8011c3a:	b083      	sub	sp, #12
 8011c3c:	af00      	add	r7, sp, #0
 8011c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011c40:	bf00      	nop
 8011c42:	370c      	adds	r7, #12
 8011c44:	46bd      	mov	sp, r7
 8011c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4a:	4770      	bx	lr

08011c4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b082      	sub	sp, #8
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d101      	bne.n	8011c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011c5a:	2301      	movs	r3, #1
 8011c5c:	e042      	b.n	8011ce4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d106      	bne.n	8011c76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011c70:	6878      	ldr	r0, [r7, #4]
 8011c72:	f7f0 f867 	bl	8001d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	2224      	movs	r2, #36	@ 0x24
 8011c7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	681a      	ldr	r2, [r3, #0]
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	f022 0201 	bic.w	r2, r2, #1
 8011c8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d002      	beq.n	8011c9c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8011c96:	6878      	ldr	r0, [r7, #4]
 8011c98:	f001 fb74 	bl	8013384 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011c9c:	6878      	ldr	r0, [r7, #4]
 8011c9e:	f000 fd05 	bl	80126ac <UART_SetConfig>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	2b01      	cmp	r3, #1
 8011ca6:	d101      	bne.n	8011cac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8011ca8:	2301      	movs	r3, #1
 8011caa:	e01b      	b.n	8011ce4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	685a      	ldr	r2, [r3, #4]
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8011cba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	689a      	ldr	r2, [r3, #8]
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8011cca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	681a      	ldr	r2, [r3, #0]
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	f042 0201 	orr.w	r2, r2, #1
 8011cda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011cdc:	6878      	ldr	r0, [r7, #4]
 8011cde:	f001 fbf3 	bl	80134c8 <UART_CheckIdleState>
 8011ce2:	4603      	mov	r3, r0
}
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	3708      	adds	r7, #8
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	bd80      	pop	{r7, pc}

08011cec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b08a      	sub	sp, #40	@ 0x28
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	60f8      	str	r0, [r7, #12]
 8011cf4:	60b9      	str	r1, [r7, #8]
 8011cf6:	4613      	mov	r3, r2
 8011cf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011d00:	2b20      	cmp	r3, #32
 8011d02:	d167      	bne.n	8011dd4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8011d04:	68bb      	ldr	r3, [r7, #8]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d002      	beq.n	8011d10 <HAL_UART_Transmit_DMA+0x24>
 8011d0a:	88fb      	ldrh	r3, [r7, #6]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d101      	bne.n	8011d14 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8011d10:	2301      	movs	r3, #1
 8011d12:	e060      	b.n	8011dd6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	68ba      	ldr	r2, [r7, #8]
 8011d18:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	88fa      	ldrh	r2, [r7, #6]
 8011d1e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	88fa      	ldrh	r2, [r7, #6]
 8011d26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	2221      	movs	r2, #33	@ 0x21
 8011d36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d028      	beq.n	8011d94 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011d46:	4a26      	ldr	r2, [pc, #152]	@ (8011de0 <HAL_UART_Transmit_DMA+0xf4>)
 8011d48:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011d4e:	4a25      	ldr	r2, [pc, #148]	@ (8011de4 <HAL_UART_Transmit_DMA+0xf8>)
 8011d50:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011d56:	4a24      	ldr	r2, [pc, #144]	@ (8011de8 <HAL_UART_Transmit_DMA+0xfc>)
 8011d58:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011d5e:	2200      	movs	r2, #0
 8011d60:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011d6a:	4619      	mov	r1, r3
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	3328      	adds	r3, #40	@ 0x28
 8011d72:	461a      	mov	r2, r3
 8011d74:	88fb      	ldrh	r3, [r7, #6]
 8011d76:	f7f4 fe33 	bl	80069e0 <HAL_DMA_Start_IT>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d009      	beq.n	8011d94 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	2210      	movs	r2, #16
 8011d84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	2220      	movs	r2, #32
 8011d8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8011d90:	2301      	movs	r3, #1
 8011d92:	e020      	b.n	8011dd6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	2240      	movs	r2, #64	@ 0x40
 8011d9a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	3308      	adds	r3, #8
 8011da2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011da4:	697b      	ldr	r3, [r7, #20]
 8011da6:	e853 3f00 	ldrex	r3, [r3]
 8011daa:	613b      	str	r3, [r7, #16]
   return(result);
 8011dac:	693b      	ldr	r3, [r7, #16]
 8011dae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	3308      	adds	r3, #8
 8011dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011dbc:	623a      	str	r2, [r7, #32]
 8011dbe:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dc0:	69f9      	ldr	r1, [r7, #28]
 8011dc2:	6a3a      	ldr	r2, [r7, #32]
 8011dc4:	e841 2300 	strex	r3, r2, [r1]
 8011dc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8011dca:	69bb      	ldr	r3, [r7, #24]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d1e5      	bne.n	8011d9c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	e000      	b.n	8011dd6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8011dd4:	2302      	movs	r3, #2
  }
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	3728      	adds	r7, #40	@ 0x28
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	bd80      	pop	{r7, pc}
 8011dde:	bf00      	nop
 8011de0:	08013995 	.word	0x08013995
 8011de4:	08013a2b 	.word	0x08013a2b
 8011de8:	08013bad 	.word	0x08013bad

08011dec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b08a      	sub	sp, #40	@ 0x28
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	60f8      	str	r0, [r7, #12]
 8011df4:	60b9      	str	r1, [r7, #8]
 8011df6:	4613      	mov	r3, r2
 8011df8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011e00:	2b20      	cmp	r3, #32
 8011e02:	d137      	bne.n	8011e74 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8011e04:	68bb      	ldr	r3, [r7, #8]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d002      	beq.n	8011e10 <HAL_UART_Receive_DMA+0x24>
 8011e0a:	88fb      	ldrh	r3, [r7, #6]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d101      	bne.n	8011e14 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8011e10:	2301      	movs	r3, #1
 8011e12:	e030      	b.n	8011e76 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	2200      	movs	r2, #0
 8011e18:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	4a18      	ldr	r2, [pc, #96]	@ (8011e80 <HAL_UART_Receive_DMA+0x94>)
 8011e20:	4293      	cmp	r3, r2
 8011e22:	d01f      	beq.n	8011e64 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	685b      	ldr	r3, [r3, #4]
 8011e2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d018      	beq.n	8011e64 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e38:	697b      	ldr	r3, [r7, #20]
 8011e3a:	e853 3f00 	ldrex	r3, [r3]
 8011e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8011e40:	693b      	ldr	r3, [r7, #16]
 8011e42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8011e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	461a      	mov	r2, r3
 8011e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e50:	623b      	str	r3, [r7, #32]
 8011e52:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e54:	69f9      	ldr	r1, [r7, #28]
 8011e56:	6a3a      	ldr	r2, [r7, #32]
 8011e58:	e841 2300 	strex	r3, r2, [r1]
 8011e5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8011e5e:	69bb      	ldr	r3, [r7, #24]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d1e6      	bne.n	8011e32 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8011e64:	88fb      	ldrh	r3, [r7, #6]
 8011e66:	461a      	mov	r2, r3
 8011e68:	68b9      	ldr	r1, [r7, #8]
 8011e6a:	68f8      	ldr	r0, [r7, #12]
 8011e6c:	f001 fc44 	bl	80136f8 <UART_Start_Receive_DMA>
 8011e70:	4603      	mov	r3, r0
 8011e72:	e000      	b.n	8011e76 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011e74:	2302      	movs	r3, #2
  }
}
 8011e76:	4618      	mov	r0, r3
 8011e78:	3728      	adds	r7, #40	@ 0x28
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd80      	pop	{r7, pc}
 8011e7e:	bf00      	nop
 8011e80:	58000c00 	.word	0x58000c00

08011e84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b0ba      	sub	sp, #232	@ 0xe8
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	69db      	ldr	r3, [r3, #28]
 8011e92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	689b      	ldr	r3, [r3, #8]
 8011ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011eaa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8011eae:	f640 030f 	movw	r3, #2063	@ 0x80f
 8011eb2:	4013      	ands	r3, r2
 8011eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8011eb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d11b      	bne.n	8011ef8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011ec4:	f003 0320 	and.w	r3, r3, #32
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d015      	beq.n	8011ef8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011ed0:	f003 0320 	and.w	r3, r3, #32
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d105      	bne.n	8011ee4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011edc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d009      	beq.n	8011ef8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	f000 8393 	beq.w	8012614 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ef2:	6878      	ldr	r0, [r7, #4]
 8011ef4:	4798      	blx	r3
      }
      return;
 8011ef6:	e38d      	b.n	8012614 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8011ef8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	f000 8123 	beq.w	8012148 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8011f02:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011f06:	4b8d      	ldr	r3, [pc, #564]	@ (801213c <HAL_UART_IRQHandler+0x2b8>)
 8011f08:	4013      	ands	r3, r2
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d106      	bne.n	8011f1c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8011f0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8011f12:	4b8b      	ldr	r3, [pc, #556]	@ (8012140 <HAL_UART_IRQHandler+0x2bc>)
 8011f14:	4013      	ands	r3, r2
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	f000 8116 	beq.w	8012148 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011f20:	f003 0301 	and.w	r3, r3, #1
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d011      	beq.n	8011f4c <HAL_UART_IRQHandler+0xc8>
 8011f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d00b      	beq.n	8011f4c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	2201      	movs	r2, #1
 8011f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011f42:	f043 0201 	orr.w	r2, r3, #1
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011f50:	f003 0302 	and.w	r3, r3, #2
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d011      	beq.n	8011f7c <HAL_UART_IRQHandler+0xf8>
 8011f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011f5c:	f003 0301 	and.w	r3, r3, #1
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d00b      	beq.n	8011f7c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	2202      	movs	r2, #2
 8011f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011f72:	f043 0204 	orr.w	r2, r3, #4
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011f80:	f003 0304 	and.w	r3, r3, #4
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d011      	beq.n	8011fac <HAL_UART_IRQHandler+0x128>
 8011f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011f8c:	f003 0301 	and.w	r3, r3, #1
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d00b      	beq.n	8011fac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	2204      	movs	r2, #4
 8011f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011fa2:	f043 0202 	orr.w	r2, r3, #2
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011fb0:	f003 0308 	and.w	r3, r3, #8
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d017      	beq.n	8011fe8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011fbc:	f003 0320 	and.w	r3, r3, #32
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d105      	bne.n	8011fd0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8011fc4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011fc8:	4b5c      	ldr	r3, [pc, #368]	@ (801213c <HAL_UART_IRQHandler+0x2b8>)
 8011fca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d00b      	beq.n	8011fe8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	2208      	movs	r2, #8
 8011fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011fde:	f043 0208 	orr.w	r2, r3, #8
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d012      	beq.n	801201a <HAL_UART_IRQHandler+0x196>
 8011ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011ff8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d00c      	beq.n	801201a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012008:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012010:	f043 0220 	orr.w	r2, r3, #32
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012020:	2b00      	cmp	r3, #0
 8012022:	f000 82f9 	beq.w	8012618 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801202a:	f003 0320 	and.w	r3, r3, #32
 801202e:	2b00      	cmp	r3, #0
 8012030:	d013      	beq.n	801205a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012036:	f003 0320 	and.w	r3, r3, #32
 801203a:	2b00      	cmp	r3, #0
 801203c:	d105      	bne.n	801204a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801203e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012046:	2b00      	cmp	r3, #0
 8012048:	d007      	beq.n	801205a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801204e:	2b00      	cmp	r3, #0
 8012050:	d003      	beq.n	801205a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012060:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	689b      	ldr	r3, [r3, #8]
 801206a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801206e:	2b40      	cmp	r3, #64	@ 0x40
 8012070:	d005      	beq.n	801207e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012072:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012076:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801207a:	2b00      	cmp	r3, #0
 801207c:	d054      	beq.n	8012128 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801207e:	6878      	ldr	r0, [r7, #4]
 8012080:	f001 fc22 	bl	80138c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	689b      	ldr	r3, [r3, #8]
 801208a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801208e:	2b40      	cmp	r3, #64	@ 0x40
 8012090:	d146      	bne.n	8012120 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	3308      	adds	r3, #8
 8012098:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801209c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80120a0:	e853 3f00 	ldrex	r3, [r3]
 80120a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80120a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80120ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80120b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	3308      	adds	r3, #8
 80120ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80120be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80120c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80120ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80120ce:	e841 2300 	strex	r3, r2, [r1]
 80120d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80120d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d1d9      	bne.n	8012092 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d017      	beq.n	8012118 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80120ee:	4a15      	ldr	r2, [pc, #84]	@ (8012144 <HAL_UART_IRQHandler+0x2c0>)
 80120f0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80120f8:	4618      	mov	r0, r3
 80120fa:	f7f5 f9f9 	bl	80074f0 <HAL_DMA_Abort_IT>
 80120fe:	4603      	mov	r3, r0
 8012100:	2b00      	cmp	r3, #0
 8012102:	d019      	beq.n	8012138 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801210a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801210c:	687a      	ldr	r2, [r7, #4]
 801210e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8012112:	4610      	mov	r0, r2
 8012114:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012116:	e00f      	b.n	8012138 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	f000 fab1 	bl	8012680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801211e:	e00b      	b.n	8012138 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	f000 faad 	bl	8012680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012126:	e007      	b.n	8012138 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012128:	6878      	ldr	r0, [r7, #4]
 801212a:	f000 faa9 	bl	8012680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	2200      	movs	r2, #0
 8012132:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8012136:	e26f      	b.n	8012618 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012138:	bf00      	nop
    return;
 801213a:	e26d      	b.n	8012618 <HAL_UART_IRQHandler+0x794>
 801213c:	10000001 	.word	0x10000001
 8012140:	04000120 	.word	0x04000120
 8012144:	08013c2d 	.word	0x08013c2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801214c:	2b01      	cmp	r3, #1
 801214e:	f040 8203 	bne.w	8012558 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8012152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012156:	f003 0310 	and.w	r3, r3, #16
 801215a:	2b00      	cmp	r3, #0
 801215c:	f000 81fc 	beq.w	8012558 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012164:	f003 0310 	and.w	r3, r3, #16
 8012168:	2b00      	cmp	r3, #0
 801216a:	f000 81f5 	beq.w	8012558 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	2210      	movs	r2, #16
 8012174:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	689b      	ldr	r3, [r3, #8]
 801217c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012180:	2b40      	cmp	r3, #64	@ 0x40
 8012182:	f040 816d 	bne.w	8012460 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	4aa4      	ldr	r2, [pc, #656]	@ (8012420 <HAL_UART_IRQHandler+0x59c>)
 8012190:	4293      	cmp	r3, r2
 8012192:	d068      	beq.n	8012266 <HAL_UART_IRQHandler+0x3e2>
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	4aa1      	ldr	r2, [pc, #644]	@ (8012424 <HAL_UART_IRQHandler+0x5a0>)
 801219e:	4293      	cmp	r3, r2
 80121a0:	d061      	beq.n	8012266 <HAL_UART_IRQHandler+0x3e2>
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	4a9f      	ldr	r2, [pc, #636]	@ (8012428 <HAL_UART_IRQHandler+0x5a4>)
 80121ac:	4293      	cmp	r3, r2
 80121ae:	d05a      	beq.n	8012266 <HAL_UART_IRQHandler+0x3e2>
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	4a9c      	ldr	r2, [pc, #624]	@ (801242c <HAL_UART_IRQHandler+0x5a8>)
 80121ba:	4293      	cmp	r3, r2
 80121bc:	d053      	beq.n	8012266 <HAL_UART_IRQHandler+0x3e2>
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	4a9a      	ldr	r2, [pc, #616]	@ (8012430 <HAL_UART_IRQHandler+0x5ac>)
 80121c8:	4293      	cmp	r3, r2
 80121ca:	d04c      	beq.n	8012266 <HAL_UART_IRQHandler+0x3e2>
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	4a97      	ldr	r2, [pc, #604]	@ (8012434 <HAL_UART_IRQHandler+0x5b0>)
 80121d6:	4293      	cmp	r3, r2
 80121d8:	d045      	beq.n	8012266 <HAL_UART_IRQHandler+0x3e2>
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	4a95      	ldr	r2, [pc, #596]	@ (8012438 <HAL_UART_IRQHandler+0x5b4>)
 80121e4:	4293      	cmp	r3, r2
 80121e6:	d03e      	beq.n	8012266 <HAL_UART_IRQHandler+0x3e2>
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	4a92      	ldr	r2, [pc, #584]	@ (801243c <HAL_UART_IRQHandler+0x5b8>)
 80121f2:	4293      	cmp	r3, r2
 80121f4:	d037      	beq.n	8012266 <HAL_UART_IRQHandler+0x3e2>
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	4a90      	ldr	r2, [pc, #576]	@ (8012440 <HAL_UART_IRQHandler+0x5bc>)
 8012200:	4293      	cmp	r3, r2
 8012202:	d030      	beq.n	8012266 <HAL_UART_IRQHandler+0x3e2>
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	4a8d      	ldr	r2, [pc, #564]	@ (8012444 <HAL_UART_IRQHandler+0x5c0>)
 801220e:	4293      	cmp	r3, r2
 8012210:	d029      	beq.n	8012266 <HAL_UART_IRQHandler+0x3e2>
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	4a8b      	ldr	r2, [pc, #556]	@ (8012448 <HAL_UART_IRQHandler+0x5c4>)
 801221c:	4293      	cmp	r3, r2
 801221e:	d022      	beq.n	8012266 <HAL_UART_IRQHandler+0x3e2>
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	4a88      	ldr	r2, [pc, #544]	@ (801244c <HAL_UART_IRQHandler+0x5c8>)
 801222a:	4293      	cmp	r3, r2
 801222c:	d01b      	beq.n	8012266 <HAL_UART_IRQHandler+0x3e2>
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	4a86      	ldr	r2, [pc, #536]	@ (8012450 <HAL_UART_IRQHandler+0x5cc>)
 8012238:	4293      	cmp	r3, r2
 801223a:	d014      	beq.n	8012266 <HAL_UART_IRQHandler+0x3e2>
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	4a83      	ldr	r2, [pc, #524]	@ (8012454 <HAL_UART_IRQHandler+0x5d0>)
 8012246:	4293      	cmp	r3, r2
 8012248:	d00d      	beq.n	8012266 <HAL_UART_IRQHandler+0x3e2>
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	4a81      	ldr	r2, [pc, #516]	@ (8012458 <HAL_UART_IRQHandler+0x5d4>)
 8012254:	4293      	cmp	r3, r2
 8012256:	d006      	beq.n	8012266 <HAL_UART_IRQHandler+0x3e2>
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	4a7e      	ldr	r2, [pc, #504]	@ (801245c <HAL_UART_IRQHandler+0x5d8>)
 8012262:	4293      	cmp	r3, r2
 8012264:	d106      	bne.n	8012274 <HAL_UART_IRQHandler+0x3f0>
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	685b      	ldr	r3, [r3, #4]
 8012270:	b29b      	uxth	r3, r3
 8012272:	e005      	b.n	8012280 <HAL_UART_IRQHandler+0x3fc>
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	685b      	ldr	r3, [r3, #4]
 801227e:	b29b      	uxth	r3, r3
 8012280:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012284:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8012288:	2b00      	cmp	r3, #0
 801228a:	f000 80ad 	beq.w	80123e8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012294:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012298:	429a      	cmp	r2, r3
 801229a:	f080 80a5 	bcs.w	80123e8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80122a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80122ae:	69db      	ldr	r3, [r3, #28]
 80122b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80122b4:	f000 8087 	beq.w	80123c6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80122c4:	e853 3f00 	ldrex	r3, [r3]
 80122c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80122cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80122d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80122d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	461a      	mov	r2, r3
 80122de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80122e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80122e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80122ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80122f2:	e841 2300 	strex	r3, r2, [r1]
 80122f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80122fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d1da      	bne.n	80122b8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	3308      	adds	r3, #8
 8012308:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801230a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801230c:	e853 3f00 	ldrex	r3, [r3]
 8012310:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8012312:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012314:	f023 0301 	bic.w	r3, r3, #1
 8012318:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	3308      	adds	r3, #8
 8012322:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8012326:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801232a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801232c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801232e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012332:	e841 2300 	strex	r3, r2, [r1]
 8012336:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8012338:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801233a:	2b00      	cmp	r3, #0
 801233c:	d1e1      	bne.n	8012302 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	3308      	adds	r3, #8
 8012344:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012346:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012348:	e853 3f00 	ldrex	r3, [r3]
 801234c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801234e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012350:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012354:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	3308      	adds	r3, #8
 801235e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8012362:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012364:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012366:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8012368:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801236a:	e841 2300 	strex	r3, r2, [r1]
 801236e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8012370:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012372:	2b00      	cmp	r3, #0
 8012374:	d1e3      	bne.n	801233e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	2220      	movs	r2, #32
 801237a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	2200      	movs	r2, #0
 8012382:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801238a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801238c:	e853 3f00 	ldrex	r3, [r3]
 8012390:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8012392:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012394:	f023 0310 	bic.w	r3, r3, #16
 8012398:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	461a      	mov	r2, r3
 80123a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80123a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80123a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80123ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80123ae:	e841 2300 	strex	r3, r2, [r1]
 80123b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80123b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d1e4      	bne.n	8012384 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80123c0:	4618      	mov	r0, r3
 80123c2:	f7f4 fd77 	bl	8006eb4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	2202      	movs	r2, #2
 80123ca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80123d8:	b29b      	uxth	r3, r3
 80123da:	1ad3      	subs	r3, r2, r3
 80123dc:	b29b      	uxth	r3, r3
 80123de:	4619      	mov	r1, r3
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f000 f957 	bl	8012694 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80123e6:	e119      	b.n	801261c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80123ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80123f2:	429a      	cmp	r2, r3
 80123f4:	f040 8112 	bne.w	801261c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80123fe:	69db      	ldr	r3, [r3, #28]
 8012400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012404:	f040 810a 	bne.w	801261c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	2202      	movs	r2, #2
 801240c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012414:	4619      	mov	r1, r3
 8012416:	6878      	ldr	r0, [r7, #4]
 8012418:	f000 f93c 	bl	8012694 <HAL_UARTEx_RxEventCallback>
      return;
 801241c:	e0fe      	b.n	801261c <HAL_UART_IRQHandler+0x798>
 801241e:	bf00      	nop
 8012420:	40020010 	.word	0x40020010
 8012424:	40020028 	.word	0x40020028
 8012428:	40020040 	.word	0x40020040
 801242c:	40020058 	.word	0x40020058
 8012430:	40020070 	.word	0x40020070
 8012434:	40020088 	.word	0x40020088
 8012438:	400200a0 	.word	0x400200a0
 801243c:	400200b8 	.word	0x400200b8
 8012440:	40020410 	.word	0x40020410
 8012444:	40020428 	.word	0x40020428
 8012448:	40020440 	.word	0x40020440
 801244c:	40020458 	.word	0x40020458
 8012450:	40020470 	.word	0x40020470
 8012454:	40020488 	.word	0x40020488
 8012458:	400204a0 	.word	0x400204a0
 801245c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801246c:	b29b      	uxth	r3, r3
 801246e:	1ad3      	subs	r3, r2, r3
 8012470:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801247a:	b29b      	uxth	r3, r3
 801247c:	2b00      	cmp	r3, #0
 801247e:	f000 80cf 	beq.w	8012620 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8012482:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8012486:	2b00      	cmp	r3, #0
 8012488:	f000 80ca 	beq.w	8012620 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012494:	e853 3f00 	ldrex	r3, [r3]
 8012498:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801249a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801249c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80124a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	461a      	mov	r2, r3
 80124aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80124ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80124b0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80124b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80124b6:	e841 2300 	strex	r3, r2, [r1]
 80124ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80124bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d1e4      	bne.n	801248c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	3308      	adds	r3, #8
 80124c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124cc:	e853 3f00 	ldrex	r3, [r3]
 80124d0:	623b      	str	r3, [r7, #32]
   return(result);
 80124d2:	6a3a      	ldr	r2, [r7, #32]
 80124d4:	4b55      	ldr	r3, [pc, #340]	@ (801262c <HAL_UART_IRQHandler+0x7a8>)
 80124d6:	4013      	ands	r3, r2
 80124d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	3308      	adds	r3, #8
 80124e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80124e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80124e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80124ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80124ee:	e841 2300 	strex	r3, r2, [r1]
 80124f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80124f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d1e3      	bne.n	80124c2 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	2220      	movs	r2, #32
 80124fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	2200      	movs	r2, #0
 8012506:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	2200      	movs	r2, #0
 801250c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012514:	693b      	ldr	r3, [r7, #16]
 8012516:	e853 3f00 	ldrex	r3, [r3]
 801251a:	60fb      	str	r3, [r7, #12]
   return(result);
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	f023 0310 	bic.w	r3, r3, #16
 8012522:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	461a      	mov	r2, r3
 801252c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012530:	61fb      	str	r3, [r7, #28]
 8012532:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012534:	69b9      	ldr	r1, [r7, #24]
 8012536:	69fa      	ldr	r2, [r7, #28]
 8012538:	e841 2300 	strex	r3, r2, [r1]
 801253c:	617b      	str	r3, [r7, #20]
   return(result);
 801253e:	697b      	ldr	r3, [r7, #20]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d1e4      	bne.n	801250e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	2202      	movs	r2, #2
 8012548:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801254a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801254e:	4619      	mov	r1, r3
 8012550:	6878      	ldr	r0, [r7, #4]
 8012552:	f000 f89f 	bl	8012694 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012556:	e063      	b.n	8012620 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801255c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012560:	2b00      	cmp	r3, #0
 8012562:	d00e      	beq.n	8012582 <HAL_UART_IRQHandler+0x6fe>
 8012564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012568:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801256c:	2b00      	cmp	r3, #0
 801256e:	d008      	beq.n	8012582 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8012578:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f001 fb93 	bl	8013ca6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012580:	e051      	b.n	8012626 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8012582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801258a:	2b00      	cmp	r3, #0
 801258c:	d014      	beq.n	80125b8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801258e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012596:	2b00      	cmp	r3, #0
 8012598:	d105      	bne.n	80125a6 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801259a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801259e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d008      	beq.n	80125b8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d03a      	beq.n	8012624 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80125b2:	6878      	ldr	r0, [r7, #4]
 80125b4:	4798      	blx	r3
    }
    return;
 80125b6:	e035      	b.n	8012624 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80125b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80125bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d009      	beq.n	80125d8 <HAL_UART_IRQHandler+0x754>
 80125c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80125c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d003      	beq.n	80125d8 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f001 fb3d 	bl	8013c50 <UART_EndTransmit_IT>
    return;
 80125d6:	e026      	b.n	8012626 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80125d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80125dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d009      	beq.n	80125f8 <HAL_UART_IRQHandler+0x774>
 80125e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80125e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d003      	beq.n	80125f8 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f001 fb6c 	bl	8013cce <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80125f6:	e016      	b.n	8012626 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80125f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80125fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012600:	2b00      	cmp	r3, #0
 8012602:	d010      	beq.n	8012626 <HAL_UART_IRQHandler+0x7a2>
 8012604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012608:	2b00      	cmp	r3, #0
 801260a:	da0c      	bge.n	8012626 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f001 fb54 	bl	8013cba <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012612:	e008      	b.n	8012626 <HAL_UART_IRQHandler+0x7a2>
      return;
 8012614:	bf00      	nop
 8012616:	e006      	b.n	8012626 <HAL_UART_IRQHandler+0x7a2>
    return;
 8012618:	bf00      	nop
 801261a:	e004      	b.n	8012626 <HAL_UART_IRQHandler+0x7a2>
      return;
 801261c:	bf00      	nop
 801261e:	e002      	b.n	8012626 <HAL_UART_IRQHandler+0x7a2>
      return;
 8012620:	bf00      	nop
 8012622:	e000      	b.n	8012626 <HAL_UART_IRQHandler+0x7a2>
    return;
 8012624:	bf00      	nop
  }
}
 8012626:	37e8      	adds	r7, #232	@ 0xe8
 8012628:	46bd      	mov	sp, r7
 801262a:	bd80      	pop	{r7, pc}
 801262c:	effffffe 	.word	0xeffffffe

08012630 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012630:	b480      	push	{r7}
 8012632:	b083      	sub	sp, #12
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012638:	bf00      	nop
 801263a:	370c      	adds	r7, #12
 801263c:	46bd      	mov	sp, r7
 801263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012642:	4770      	bx	lr

08012644 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012644:	b480      	push	{r7}
 8012646:	b083      	sub	sp, #12
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801264c:	bf00      	nop
 801264e:	370c      	adds	r7, #12
 8012650:	46bd      	mov	sp, r7
 8012652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012656:	4770      	bx	lr

08012658 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8012658:	b480      	push	{r7}
 801265a:	b083      	sub	sp, #12
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8012660:	bf00      	nop
 8012662:	370c      	adds	r7, #12
 8012664:	46bd      	mov	sp, r7
 8012666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266a:	4770      	bx	lr

0801266c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801266c:	b480      	push	{r7}
 801266e:	b083      	sub	sp, #12
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8012674:	bf00      	nop
 8012676:	370c      	adds	r7, #12
 8012678:	46bd      	mov	sp, r7
 801267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267e:	4770      	bx	lr

08012680 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012680:	b480      	push	{r7}
 8012682:	b083      	sub	sp, #12
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012688:	bf00      	nop
 801268a:	370c      	adds	r7, #12
 801268c:	46bd      	mov	sp, r7
 801268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012692:	4770      	bx	lr

08012694 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012694:	b480      	push	{r7}
 8012696:	b083      	sub	sp, #12
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
 801269c:	460b      	mov	r3, r1
 801269e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80126a0:	bf00      	nop
 80126a2:	370c      	adds	r7, #12
 80126a4:	46bd      	mov	sp, r7
 80126a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126aa:	4770      	bx	lr

080126ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80126ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80126b0:	b092      	sub	sp, #72	@ 0x48
 80126b2:	af00      	add	r7, sp, #0
 80126b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80126b6:	2300      	movs	r3, #0
 80126b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80126bc:	697b      	ldr	r3, [r7, #20]
 80126be:	689a      	ldr	r2, [r3, #8]
 80126c0:	697b      	ldr	r3, [r7, #20]
 80126c2:	691b      	ldr	r3, [r3, #16]
 80126c4:	431a      	orrs	r2, r3
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	695b      	ldr	r3, [r3, #20]
 80126ca:	431a      	orrs	r2, r3
 80126cc:	697b      	ldr	r3, [r7, #20]
 80126ce:	69db      	ldr	r3, [r3, #28]
 80126d0:	4313      	orrs	r3, r2
 80126d2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80126d4:	697b      	ldr	r3, [r7, #20]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	681a      	ldr	r2, [r3, #0]
 80126da:	4bbe      	ldr	r3, [pc, #760]	@ (80129d4 <UART_SetConfig+0x328>)
 80126dc:	4013      	ands	r3, r2
 80126de:	697a      	ldr	r2, [r7, #20]
 80126e0:	6812      	ldr	r2, [r2, #0]
 80126e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80126e4:	430b      	orrs	r3, r1
 80126e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80126e8:	697b      	ldr	r3, [r7, #20]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	685b      	ldr	r3, [r3, #4]
 80126ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80126f2:	697b      	ldr	r3, [r7, #20]
 80126f4:	68da      	ldr	r2, [r3, #12]
 80126f6:	697b      	ldr	r3, [r7, #20]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	430a      	orrs	r2, r1
 80126fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80126fe:	697b      	ldr	r3, [r7, #20]
 8012700:	699b      	ldr	r3, [r3, #24]
 8012702:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012704:	697b      	ldr	r3, [r7, #20]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	4ab3      	ldr	r2, [pc, #716]	@ (80129d8 <UART_SetConfig+0x32c>)
 801270a:	4293      	cmp	r3, r2
 801270c:	d004      	beq.n	8012718 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	6a1b      	ldr	r3, [r3, #32]
 8012712:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012714:	4313      	orrs	r3, r2
 8012716:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	689a      	ldr	r2, [r3, #8]
 801271e:	4baf      	ldr	r3, [pc, #700]	@ (80129dc <UART_SetConfig+0x330>)
 8012720:	4013      	ands	r3, r2
 8012722:	697a      	ldr	r2, [r7, #20]
 8012724:	6812      	ldr	r2, [r2, #0]
 8012726:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012728:	430b      	orrs	r3, r1
 801272a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801272c:	697b      	ldr	r3, [r7, #20]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012732:	f023 010f 	bic.w	r1, r3, #15
 8012736:	697b      	ldr	r3, [r7, #20]
 8012738:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801273a:	697b      	ldr	r3, [r7, #20]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	430a      	orrs	r2, r1
 8012740:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012742:	697b      	ldr	r3, [r7, #20]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	4aa6      	ldr	r2, [pc, #664]	@ (80129e0 <UART_SetConfig+0x334>)
 8012748:	4293      	cmp	r3, r2
 801274a:	d177      	bne.n	801283c <UART_SetConfig+0x190>
 801274c:	4ba5      	ldr	r3, [pc, #660]	@ (80129e4 <UART_SetConfig+0x338>)
 801274e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012750:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012754:	2b28      	cmp	r3, #40	@ 0x28
 8012756:	d86d      	bhi.n	8012834 <UART_SetConfig+0x188>
 8012758:	a201      	add	r2, pc, #4	@ (adr r2, 8012760 <UART_SetConfig+0xb4>)
 801275a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801275e:	bf00      	nop
 8012760:	08012805 	.word	0x08012805
 8012764:	08012835 	.word	0x08012835
 8012768:	08012835 	.word	0x08012835
 801276c:	08012835 	.word	0x08012835
 8012770:	08012835 	.word	0x08012835
 8012774:	08012835 	.word	0x08012835
 8012778:	08012835 	.word	0x08012835
 801277c:	08012835 	.word	0x08012835
 8012780:	0801280d 	.word	0x0801280d
 8012784:	08012835 	.word	0x08012835
 8012788:	08012835 	.word	0x08012835
 801278c:	08012835 	.word	0x08012835
 8012790:	08012835 	.word	0x08012835
 8012794:	08012835 	.word	0x08012835
 8012798:	08012835 	.word	0x08012835
 801279c:	08012835 	.word	0x08012835
 80127a0:	08012815 	.word	0x08012815
 80127a4:	08012835 	.word	0x08012835
 80127a8:	08012835 	.word	0x08012835
 80127ac:	08012835 	.word	0x08012835
 80127b0:	08012835 	.word	0x08012835
 80127b4:	08012835 	.word	0x08012835
 80127b8:	08012835 	.word	0x08012835
 80127bc:	08012835 	.word	0x08012835
 80127c0:	0801281d 	.word	0x0801281d
 80127c4:	08012835 	.word	0x08012835
 80127c8:	08012835 	.word	0x08012835
 80127cc:	08012835 	.word	0x08012835
 80127d0:	08012835 	.word	0x08012835
 80127d4:	08012835 	.word	0x08012835
 80127d8:	08012835 	.word	0x08012835
 80127dc:	08012835 	.word	0x08012835
 80127e0:	08012825 	.word	0x08012825
 80127e4:	08012835 	.word	0x08012835
 80127e8:	08012835 	.word	0x08012835
 80127ec:	08012835 	.word	0x08012835
 80127f0:	08012835 	.word	0x08012835
 80127f4:	08012835 	.word	0x08012835
 80127f8:	08012835 	.word	0x08012835
 80127fc:	08012835 	.word	0x08012835
 8012800:	0801282d 	.word	0x0801282d
 8012804:	2301      	movs	r3, #1
 8012806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801280a:	e326      	b.n	8012e5a <UART_SetConfig+0x7ae>
 801280c:	2304      	movs	r3, #4
 801280e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012812:	e322      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012814:	2308      	movs	r3, #8
 8012816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801281a:	e31e      	b.n	8012e5a <UART_SetConfig+0x7ae>
 801281c:	2310      	movs	r3, #16
 801281e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012822:	e31a      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012824:	2320      	movs	r3, #32
 8012826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801282a:	e316      	b.n	8012e5a <UART_SetConfig+0x7ae>
 801282c:	2340      	movs	r3, #64	@ 0x40
 801282e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012832:	e312      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012834:	2380      	movs	r3, #128	@ 0x80
 8012836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801283a:	e30e      	b.n	8012e5a <UART_SetConfig+0x7ae>
 801283c:	697b      	ldr	r3, [r7, #20]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	4a69      	ldr	r2, [pc, #420]	@ (80129e8 <UART_SetConfig+0x33c>)
 8012842:	4293      	cmp	r3, r2
 8012844:	d130      	bne.n	80128a8 <UART_SetConfig+0x1fc>
 8012846:	4b67      	ldr	r3, [pc, #412]	@ (80129e4 <UART_SetConfig+0x338>)
 8012848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801284a:	f003 0307 	and.w	r3, r3, #7
 801284e:	2b05      	cmp	r3, #5
 8012850:	d826      	bhi.n	80128a0 <UART_SetConfig+0x1f4>
 8012852:	a201      	add	r2, pc, #4	@ (adr r2, 8012858 <UART_SetConfig+0x1ac>)
 8012854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012858:	08012871 	.word	0x08012871
 801285c:	08012879 	.word	0x08012879
 8012860:	08012881 	.word	0x08012881
 8012864:	08012889 	.word	0x08012889
 8012868:	08012891 	.word	0x08012891
 801286c:	08012899 	.word	0x08012899
 8012870:	2300      	movs	r3, #0
 8012872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012876:	e2f0      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012878:	2304      	movs	r3, #4
 801287a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801287e:	e2ec      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012880:	2308      	movs	r3, #8
 8012882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012886:	e2e8      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012888:	2310      	movs	r3, #16
 801288a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801288e:	e2e4      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012890:	2320      	movs	r3, #32
 8012892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012896:	e2e0      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012898:	2340      	movs	r3, #64	@ 0x40
 801289a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801289e:	e2dc      	b.n	8012e5a <UART_SetConfig+0x7ae>
 80128a0:	2380      	movs	r3, #128	@ 0x80
 80128a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80128a6:	e2d8      	b.n	8012e5a <UART_SetConfig+0x7ae>
 80128a8:	697b      	ldr	r3, [r7, #20]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	4a4f      	ldr	r2, [pc, #316]	@ (80129ec <UART_SetConfig+0x340>)
 80128ae:	4293      	cmp	r3, r2
 80128b0:	d130      	bne.n	8012914 <UART_SetConfig+0x268>
 80128b2:	4b4c      	ldr	r3, [pc, #304]	@ (80129e4 <UART_SetConfig+0x338>)
 80128b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80128b6:	f003 0307 	and.w	r3, r3, #7
 80128ba:	2b05      	cmp	r3, #5
 80128bc:	d826      	bhi.n	801290c <UART_SetConfig+0x260>
 80128be:	a201      	add	r2, pc, #4	@ (adr r2, 80128c4 <UART_SetConfig+0x218>)
 80128c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128c4:	080128dd 	.word	0x080128dd
 80128c8:	080128e5 	.word	0x080128e5
 80128cc:	080128ed 	.word	0x080128ed
 80128d0:	080128f5 	.word	0x080128f5
 80128d4:	080128fd 	.word	0x080128fd
 80128d8:	08012905 	.word	0x08012905
 80128dc:	2300      	movs	r3, #0
 80128de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80128e2:	e2ba      	b.n	8012e5a <UART_SetConfig+0x7ae>
 80128e4:	2304      	movs	r3, #4
 80128e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80128ea:	e2b6      	b.n	8012e5a <UART_SetConfig+0x7ae>
 80128ec:	2308      	movs	r3, #8
 80128ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80128f2:	e2b2      	b.n	8012e5a <UART_SetConfig+0x7ae>
 80128f4:	2310      	movs	r3, #16
 80128f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80128fa:	e2ae      	b.n	8012e5a <UART_SetConfig+0x7ae>
 80128fc:	2320      	movs	r3, #32
 80128fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012902:	e2aa      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012904:	2340      	movs	r3, #64	@ 0x40
 8012906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801290a:	e2a6      	b.n	8012e5a <UART_SetConfig+0x7ae>
 801290c:	2380      	movs	r3, #128	@ 0x80
 801290e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012912:	e2a2      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012914:	697b      	ldr	r3, [r7, #20]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	4a35      	ldr	r2, [pc, #212]	@ (80129f0 <UART_SetConfig+0x344>)
 801291a:	4293      	cmp	r3, r2
 801291c:	d130      	bne.n	8012980 <UART_SetConfig+0x2d4>
 801291e:	4b31      	ldr	r3, [pc, #196]	@ (80129e4 <UART_SetConfig+0x338>)
 8012920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012922:	f003 0307 	and.w	r3, r3, #7
 8012926:	2b05      	cmp	r3, #5
 8012928:	d826      	bhi.n	8012978 <UART_SetConfig+0x2cc>
 801292a:	a201      	add	r2, pc, #4	@ (adr r2, 8012930 <UART_SetConfig+0x284>)
 801292c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012930:	08012949 	.word	0x08012949
 8012934:	08012951 	.word	0x08012951
 8012938:	08012959 	.word	0x08012959
 801293c:	08012961 	.word	0x08012961
 8012940:	08012969 	.word	0x08012969
 8012944:	08012971 	.word	0x08012971
 8012948:	2300      	movs	r3, #0
 801294a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801294e:	e284      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012950:	2304      	movs	r3, #4
 8012952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012956:	e280      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012958:	2308      	movs	r3, #8
 801295a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801295e:	e27c      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012960:	2310      	movs	r3, #16
 8012962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012966:	e278      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012968:	2320      	movs	r3, #32
 801296a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801296e:	e274      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012970:	2340      	movs	r3, #64	@ 0x40
 8012972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012976:	e270      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012978:	2380      	movs	r3, #128	@ 0x80
 801297a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801297e:	e26c      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	4a1b      	ldr	r2, [pc, #108]	@ (80129f4 <UART_SetConfig+0x348>)
 8012986:	4293      	cmp	r3, r2
 8012988:	d142      	bne.n	8012a10 <UART_SetConfig+0x364>
 801298a:	4b16      	ldr	r3, [pc, #88]	@ (80129e4 <UART_SetConfig+0x338>)
 801298c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801298e:	f003 0307 	and.w	r3, r3, #7
 8012992:	2b05      	cmp	r3, #5
 8012994:	d838      	bhi.n	8012a08 <UART_SetConfig+0x35c>
 8012996:	a201      	add	r2, pc, #4	@ (adr r2, 801299c <UART_SetConfig+0x2f0>)
 8012998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801299c:	080129b5 	.word	0x080129b5
 80129a0:	080129bd 	.word	0x080129bd
 80129a4:	080129c5 	.word	0x080129c5
 80129a8:	080129cd 	.word	0x080129cd
 80129ac:	080129f9 	.word	0x080129f9
 80129b0:	08012a01 	.word	0x08012a01
 80129b4:	2300      	movs	r3, #0
 80129b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129ba:	e24e      	b.n	8012e5a <UART_SetConfig+0x7ae>
 80129bc:	2304      	movs	r3, #4
 80129be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129c2:	e24a      	b.n	8012e5a <UART_SetConfig+0x7ae>
 80129c4:	2308      	movs	r3, #8
 80129c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129ca:	e246      	b.n	8012e5a <UART_SetConfig+0x7ae>
 80129cc:	2310      	movs	r3, #16
 80129ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129d2:	e242      	b.n	8012e5a <UART_SetConfig+0x7ae>
 80129d4:	cfff69f3 	.word	0xcfff69f3
 80129d8:	58000c00 	.word	0x58000c00
 80129dc:	11fff4ff 	.word	0x11fff4ff
 80129e0:	40011000 	.word	0x40011000
 80129e4:	58024400 	.word	0x58024400
 80129e8:	40004400 	.word	0x40004400
 80129ec:	40004800 	.word	0x40004800
 80129f0:	40004c00 	.word	0x40004c00
 80129f4:	40005000 	.word	0x40005000
 80129f8:	2320      	movs	r3, #32
 80129fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80129fe:	e22c      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012a00:	2340      	movs	r3, #64	@ 0x40
 8012a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a06:	e228      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012a08:	2380      	movs	r3, #128	@ 0x80
 8012a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012a0e:	e224      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	4ab1      	ldr	r2, [pc, #708]	@ (8012cdc <UART_SetConfig+0x630>)
 8012a16:	4293      	cmp	r3, r2
 8012a18:	d176      	bne.n	8012b08 <UART_SetConfig+0x45c>
 8012a1a:	4bb1      	ldr	r3, [pc, #708]	@ (8012ce0 <UART_SetConfig+0x634>)
 8012a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012a1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012a22:	2b28      	cmp	r3, #40	@ 0x28
 8012a24:	d86c      	bhi.n	8012b00 <UART_SetConfig+0x454>
 8012a26:	a201      	add	r2, pc, #4	@ (adr r2, 8012a2c <UART_SetConfig+0x380>)
 8012a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a2c:	08012ad1 	.word	0x08012ad1
 8012a30:	08012b01 	.word	0x08012b01
 8012a34:	08012b01 	.word	0x08012b01
 8012a38:	08012b01 	.word	0x08012b01
 8012a3c:	08012b01 	.word	0x08012b01
 8012a40:	08012b01 	.word	0x08012b01
 8012a44:	08012b01 	.word	0x08012b01
 8012a48:	08012b01 	.word	0x08012b01
 8012a4c:	08012ad9 	.word	0x08012ad9
 8012a50:	08012b01 	.word	0x08012b01
 8012a54:	08012b01 	.word	0x08012b01
 8012a58:	08012b01 	.word	0x08012b01
 8012a5c:	08012b01 	.word	0x08012b01
 8012a60:	08012b01 	.word	0x08012b01
 8012a64:	08012b01 	.word	0x08012b01
 8012a68:	08012b01 	.word	0x08012b01
 8012a6c:	08012ae1 	.word	0x08012ae1
 8012a70:	08012b01 	.word	0x08012b01
 8012a74:	08012b01 	.word	0x08012b01
 8012a78:	08012b01 	.word	0x08012b01
 8012a7c:	08012b01 	.word	0x08012b01
 8012a80:	08012b01 	.word	0x08012b01
 8012a84:	08012b01 	.word	0x08012b01
 8012a88:	08012b01 	.word	0x08012b01
 8012a8c:	08012ae9 	.word	0x08012ae9
 8012a90:	08012b01 	.word	0x08012b01
 8012a94:	08012b01 	.word	0x08012b01
 8012a98:	08012b01 	.word	0x08012b01
 8012a9c:	08012b01 	.word	0x08012b01
 8012aa0:	08012b01 	.word	0x08012b01
 8012aa4:	08012b01 	.word	0x08012b01
 8012aa8:	08012b01 	.word	0x08012b01
 8012aac:	08012af1 	.word	0x08012af1
 8012ab0:	08012b01 	.word	0x08012b01
 8012ab4:	08012b01 	.word	0x08012b01
 8012ab8:	08012b01 	.word	0x08012b01
 8012abc:	08012b01 	.word	0x08012b01
 8012ac0:	08012b01 	.word	0x08012b01
 8012ac4:	08012b01 	.word	0x08012b01
 8012ac8:	08012b01 	.word	0x08012b01
 8012acc:	08012af9 	.word	0x08012af9
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ad6:	e1c0      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012ad8:	2304      	movs	r3, #4
 8012ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ade:	e1bc      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012ae0:	2308      	movs	r3, #8
 8012ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ae6:	e1b8      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012ae8:	2310      	movs	r3, #16
 8012aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012aee:	e1b4      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012af0:	2320      	movs	r3, #32
 8012af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012af6:	e1b0      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012af8:	2340      	movs	r3, #64	@ 0x40
 8012afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012afe:	e1ac      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012b00:	2380      	movs	r3, #128	@ 0x80
 8012b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b06:	e1a8      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012b08:	697b      	ldr	r3, [r7, #20]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	4a75      	ldr	r2, [pc, #468]	@ (8012ce4 <UART_SetConfig+0x638>)
 8012b0e:	4293      	cmp	r3, r2
 8012b10:	d130      	bne.n	8012b74 <UART_SetConfig+0x4c8>
 8012b12:	4b73      	ldr	r3, [pc, #460]	@ (8012ce0 <UART_SetConfig+0x634>)
 8012b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012b16:	f003 0307 	and.w	r3, r3, #7
 8012b1a:	2b05      	cmp	r3, #5
 8012b1c:	d826      	bhi.n	8012b6c <UART_SetConfig+0x4c0>
 8012b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8012b24 <UART_SetConfig+0x478>)
 8012b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b24:	08012b3d 	.word	0x08012b3d
 8012b28:	08012b45 	.word	0x08012b45
 8012b2c:	08012b4d 	.word	0x08012b4d
 8012b30:	08012b55 	.word	0x08012b55
 8012b34:	08012b5d 	.word	0x08012b5d
 8012b38:	08012b65 	.word	0x08012b65
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b42:	e18a      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012b44:	2304      	movs	r3, #4
 8012b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b4a:	e186      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012b4c:	2308      	movs	r3, #8
 8012b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b52:	e182      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012b54:	2310      	movs	r3, #16
 8012b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b5a:	e17e      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012b5c:	2320      	movs	r3, #32
 8012b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b62:	e17a      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012b64:	2340      	movs	r3, #64	@ 0x40
 8012b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b6a:	e176      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012b6c:	2380      	movs	r3, #128	@ 0x80
 8012b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012b72:	e172      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012b74:	697b      	ldr	r3, [r7, #20]
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	4a5b      	ldr	r2, [pc, #364]	@ (8012ce8 <UART_SetConfig+0x63c>)
 8012b7a:	4293      	cmp	r3, r2
 8012b7c:	d130      	bne.n	8012be0 <UART_SetConfig+0x534>
 8012b7e:	4b58      	ldr	r3, [pc, #352]	@ (8012ce0 <UART_SetConfig+0x634>)
 8012b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012b82:	f003 0307 	and.w	r3, r3, #7
 8012b86:	2b05      	cmp	r3, #5
 8012b88:	d826      	bhi.n	8012bd8 <UART_SetConfig+0x52c>
 8012b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8012b90 <UART_SetConfig+0x4e4>)
 8012b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b90:	08012ba9 	.word	0x08012ba9
 8012b94:	08012bb1 	.word	0x08012bb1
 8012b98:	08012bb9 	.word	0x08012bb9
 8012b9c:	08012bc1 	.word	0x08012bc1
 8012ba0:	08012bc9 	.word	0x08012bc9
 8012ba4:	08012bd1 	.word	0x08012bd1
 8012ba8:	2300      	movs	r3, #0
 8012baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bae:	e154      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012bb0:	2304      	movs	r3, #4
 8012bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bb6:	e150      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012bb8:	2308      	movs	r3, #8
 8012bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bbe:	e14c      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012bc0:	2310      	movs	r3, #16
 8012bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bc6:	e148      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012bc8:	2320      	movs	r3, #32
 8012bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bce:	e144      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012bd0:	2340      	movs	r3, #64	@ 0x40
 8012bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bd6:	e140      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012bd8:	2380      	movs	r3, #128	@ 0x80
 8012bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012bde:	e13c      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012be0:	697b      	ldr	r3, [r7, #20]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	4a41      	ldr	r2, [pc, #260]	@ (8012cec <UART_SetConfig+0x640>)
 8012be6:	4293      	cmp	r3, r2
 8012be8:	f040 8082 	bne.w	8012cf0 <UART_SetConfig+0x644>
 8012bec:	4b3c      	ldr	r3, [pc, #240]	@ (8012ce0 <UART_SetConfig+0x634>)
 8012bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012bf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012bf4:	2b28      	cmp	r3, #40	@ 0x28
 8012bf6:	d86d      	bhi.n	8012cd4 <UART_SetConfig+0x628>
 8012bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8012c00 <UART_SetConfig+0x554>)
 8012bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bfe:	bf00      	nop
 8012c00:	08012ca5 	.word	0x08012ca5
 8012c04:	08012cd5 	.word	0x08012cd5
 8012c08:	08012cd5 	.word	0x08012cd5
 8012c0c:	08012cd5 	.word	0x08012cd5
 8012c10:	08012cd5 	.word	0x08012cd5
 8012c14:	08012cd5 	.word	0x08012cd5
 8012c18:	08012cd5 	.word	0x08012cd5
 8012c1c:	08012cd5 	.word	0x08012cd5
 8012c20:	08012cad 	.word	0x08012cad
 8012c24:	08012cd5 	.word	0x08012cd5
 8012c28:	08012cd5 	.word	0x08012cd5
 8012c2c:	08012cd5 	.word	0x08012cd5
 8012c30:	08012cd5 	.word	0x08012cd5
 8012c34:	08012cd5 	.word	0x08012cd5
 8012c38:	08012cd5 	.word	0x08012cd5
 8012c3c:	08012cd5 	.word	0x08012cd5
 8012c40:	08012cb5 	.word	0x08012cb5
 8012c44:	08012cd5 	.word	0x08012cd5
 8012c48:	08012cd5 	.word	0x08012cd5
 8012c4c:	08012cd5 	.word	0x08012cd5
 8012c50:	08012cd5 	.word	0x08012cd5
 8012c54:	08012cd5 	.word	0x08012cd5
 8012c58:	08012cd5 	.word	0x08012cd5
 8012c5c:	08012cd5 	.word	0x08012cd5
 8012c60:	08012cbd 	.word	0x08012cbd
 8012c64:	08012cd5 	.word	0x08012cd5
 8012c68:	08012cd5 	.word	0x08012cd5
 8012c6c:	08012cd5 	.word	0x08012cd5
 8012c70:	08012cd5 	.word	0x08012cd5
 8012c74:	08012cd5 	.word	0x08012cd5
 8012c78:	08012cd5 	.word	0x08012cd5
 8012c7c:	08012cd5 	.word	0x08012cd5
 8012c80:	08012cc5 	.word	0x08012cc5
 8012c84:	08012cd5 	.word	0x08012cd5
 8012c88:	08012cd5 	.word	0x08012cd5
 8012c8c:	08012cd5 	.word	0x08012cd5
 8012c90:	08012cd5 	.word	0x08012cd5
 8012c94:	08012cd5 	.word	0x08012cd5
 8012c98:	08012cd5 	.word	0x08012cd5
 8012c9c:	08012cd5 	.word	0x08012cd5
 8012ca0:	08012ccd 	.word	0x08012ccd
 8012ca4:	2301      	movs	r3, #1
 8012ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012caa:	e0d6      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012cac:	2304      	movs	r3, #4
 8012cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cb2:	e0d2      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012cb4:	2308      	movs	r3, #8
 8012cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cba:	e0ce      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012cbc:	2310      	movs	r3, #16
 8012cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cc2:	e0ca      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012cc4:	2320      	movs	r3, #32
 8012cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cca:	e0c6      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012ccc:	2340      	movs	r3, #64	@ 0x40
 8012cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cd2:	e0c2      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012cd4:	2380      	movs	r3, #128	@ 0x80
 8012cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012cda:	e0be      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012cdc:	40011400 	.word	0x40011400
 8012ce0:	58024400 	.word	0x58024400
 8012ce4:	40007800 	.word	0x40007800
 8012ce8:	40007c00 	.word	0x40007c00
 8012cec:	40011800 	.word	0x40011800
 8012cf0:	697b      	ldr	r3, [r7, #20]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	4aad      	ldr	r2, [pc, #692]	@ (8012fac <UART_SetConfig+0x900>)
 8012cf6:	4293      	cmp	r3, r2
 8012cf8:	d176      	bne.n	8012de8 <UART_SetConfig+0x73c>
 8012cfa:	4bad      	ldr	r3, [pc, #692]	@ (8012fb0 <UART_SetConfig+0x904>)
 8012cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012cfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012d02:	2b28      	cmp	r3, #40	@ 0x28
 8012d04:	d86c      	bhi.n	8012de0 <UART_SetConfig+0x734>
 8012d06:	a201      	add	r2, pc, #4	@ (adr r2, 8012d0c <UART_SetConfig+0x660>)
 8012d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d0c:	08012db1 	.word	0x08012db1
 8012d10:	08012de1 	.word	0x08012de1
 8012d14:	08012de1 	.word	0x08012de1
 8012d18:	08012de1 	.word	0x08012de1
 8012d1c:	08012de1 	.word	0x08012de1
 8012d20:	08012de1 	.word	0x08012de1
 8012d24:	08012de1 	.word	0x08012de1
 8012d28:	08012de1 	.word	0x08012de1
 8012d2c:	08012db9 	.word	0x08012db9
 8012d30:	08012de1 	.word	0x08012de1
 8012d34:	08012de1 	.word	0x08012de1
 8012d38:	08012de1 	.word	0x08012de1
 8012d3c:	08012de1 	.word	0x08012de1
 8012d40:	08012de1 	.word	0x08012de1
 8012d44:	08012de1 	.word	0x08012de1
 8012d48:	08012de1 	.word	0x08012de1
 8012d4c:	08012dc1 	.word	0x08012dc1
 8012d50:	08012de1 	.word	0x08012de1
 8012d54:	08012de1 	.word	0x08012de1
 8012d58:	08012de1 	.word	0x08012de1
 8012d5c:	08012de1 	.word	0x08012de1
 8012d60:	08012de1 	.word	0x08012de1
 8012d64:	08012de1 	.word	0x08012de1
 8012d68:	08012de1 	.word	0x08012de1
 8012d6c:	08012dc9 	.word	0x08012dc9
 8012d70:	08012de1 	.word	0x08012de1
 8012d74:	08012de1 	.word	0x08012de1
 8012d78:	08012de1 	.word	0x08012de1
 8012d7c:	08012de1 	.word	0x08012de1
 8012d80:	08012de1 	.word	0x08012de1
 8012d84:	08012de1 	.word	0x08012de1
 8012d88:	08012de1 	.word	0x08012de1
 8012d8c:	08012dd1 	.word	0x08012dd1
 8012d90:	08012de1 	.word	0x08012de1
 8012d94:	08012de1 	.word	0x08012de1
 8012d98:	08012de1 	.word	0x08012de1
 8012d9c:	08012de1 	.word	0x08012de1
 8012da0:	08012de1 	.word	0x08012de1
 8012da4:	08012de1 	.word	0x08012de1
 8012da8:	08012de1 	.word	0x08012de1
 8012dac:	08012dd9 	.word	0x08012dd9
 8012db0:	2301      	movs	r3, #1
 8012db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012db6:	e050      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012db8:	2304      	movs	r3, #4
 8012dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012dbe:	e04c      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012dc0:	2308      	movs	r3, #8
 8012dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012dc6:	e048      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012dc8:	2310      	movs	r3, #16
 8012dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012dce:	e044      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012dd0:	2320      	movs	r3, #32
 8012dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012dd6:	e040      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012dd8:	2340      	movs	r3, #64	@ 0x40
 8012dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012dde:	e03c      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012de0:	2380      	movs	r3, #128	@ 0x80
 8012de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012de6:	e038      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012de8:	697b      	ldr	r3, [r7, #20]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	4a71      	ldr	r2, [pc, #452]	@ (8012fb4 <UART_SetConfig+0x908>)
 8012dee:	4293      	cmp	r3, r2
 8012df0:	d130      	bne.n	8012e54 <UART_SetConfig+0x7a8>
 8012df2:	4b6f      	ldr	r3, [pc, #444]	@ (8012fb0 <UART_SetConfig+0x904>)
 8012df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012df6:	f003 0307 	and.w	r3, r3, #7
 8012dfa:	2b05      	cmp	r3, #5
 8012dfc:	d826      	bhi.n	8012e4c <UART_SetConfig+0x7a0>
 8012dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8012e04 <UART_SetConfig+0x758>)
 8012e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e04:	08012e1d 	.word	0x08012e1d
 8012e08:	08012e25 	.word	0x08012e25
 8012e0c:	08012e2d 	.word	0x08012e2d
 8012e10:	08012e35 	.word	0x08012e35
 8012e14:	08012e3d 	.word	0x08012e3d
 8012e18:	08012e45 	.word	0x08012e45
 8012e1c:	2302      	movs	r3, #2
 8012e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e22:	e01a      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012e24:	2304      	movs	r3, #4
 8012e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e2a:	e016      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012e2c:	2308      	movs	r3, #8
 8012e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e32:	e012      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012e34:	2310      	movs	r3, #16
 8012e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e3a:	e00e      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012e3c:	2320      	movs	r3, #32
 8012e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e42:	e00a      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012e44:	2340      	movs	r3, #64	@ 0x40
 8012e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e4a:	e006      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012e4c:	2380      	movs	r3, #128	@ 0x80
 8012e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e52:	e002      	b.n	8012e5a <UART_SetConfig+0x7ae>
 8012e54:	2380      	movs	r3, #128	@ 0x80
 8012e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012e5a:	697b      	ldr	r3, [r7, #20]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	4a55      	ldr	r2, [pc, #340]	@ (8012fb4 <UART_SetConfig+0x908>)
 8012e60:	4293      	cmp	r3, r2
 8012e62:	f040 80f8 	bne.w	8013056 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012e66:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012e6a:	2b20      	cmp	r3, #32
 8012e6c:	dc46      	bgt.n	8012efc <UART_SetConfig+0x850>
 8012e6e:	2b02      	cmp	r3, #2
 8012e70:	db75      	blt.n	8012f5e <UART_SetConfig+0x8b2>
 8012e72:	3b02      	subs	r3, #2
 8012e74:	2b1e      	cmp	r3, #30
 8012e76:	d872      	bhi.n	8012f5e <UART_SetConfig+0x8b2>
 8012e78:	a201      	add	r2, pc, #4	@ (adr r2, 8012e80 <UART_SetConfig+0x7d4>)
 8012e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e7e:	bf00      	nop
 8012e80:	08012f03 	.word	0x08012f03
 8012e84:	08012f5f 	.word	0x08012f5f
 8012e88:	08012f0b 	.word	0x08012f0b
 8012e8c:	08012f5f 	.word	0x08012f5f
 8012e90:	08012f5f 	.word	0x08012f5f
 8012e94:	08012f5f 	.word	0x08012f5f
 8012e98:	08012f1b 	.word	0x08012f1b
 8012e9c:	08012f5f 	.word	0x08012f5f
 8012ea0:	08012f5f 	.word	0x08012f5f
 8012ea4:	08012f5f 	.word	0x08012f5f
 8012ea8:	08012f5f 	.word	0x08012f5f
 8012eac:	08012f5f 	.word	0x08012f5f
 8012eb0:	08012f5f 	.word	0x08012f5f
 8012eb4:	08012f5f 	.word	0x08012f5f
 8012eb8:	08012f2b 	.word	0x08012f2b
 8012ebc:	08012f5f 	.word	0x08012f5f
 8012ec0:	08012f5f 	.word	0x08012f5f
 8012ec4:	08012f5f 	.word	0x08012f5f
 8012ec8:	08012f5f 	.word	0x08012f5f
 8012ecc:	08012f5f 	.word	0x08012f5f
 8012ed0:	08012f5f 	.word	0x08012f5f
 8012ed4:	08012f5f 	.word	0x08012f5f
 8012ed8:	08012f5f 	.word	0x08012f5f
 8012edc:	08012f5f 	.word	0x08012f5f
 8012ee0:	08012f5f 	.word	0x08012f5f
 8012ee4:	08012f5f 	.word	0x08012f5f
 8012ee8:	08012f5f 	.word	0x08012f5f
 8012eec:	08012f5f 	.word	0x08012f5f
 8012ef0:	08012f5f 	.word	0x08012f5f
 8012ef4:	08012f5f 	.word	0x08012f5f
 8012ef8:	08012f51 	.word	0x08012f51
 8012efc:	2b40      	cmp	r3, #64	@ 0x40
 8012efe:	d02a      	beq.n	8012f56 <UART_SetConfig+0x8aa>
 8012f00:	e02d      	b.n	8012f5e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8012f02:	f7fc faa1 	bl	800f448 <HAL_RCCEx_GetD3PCLK1Freq>
 8012f06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8012f08:	e02f      	b.n	8012f6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012f0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f7fc fab0 	bl	800f474 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012f18:	e027      	b.n	8012f6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012f1a:	f107 0318 	add.w	r3, r7, #24
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7fc fbfc 	bl	800f71c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012f24:	69fb      	ldr	r3, [r7, #28]
 8012f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012f28:	e01f      	b.n	8012f6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012f2a:	4b21      	ldr	r3, [pc, #132]	@ (8012fb0 <UART_SetConfig+0x904>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	f003 0320 	and.w	r3, r3, #32
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d009      	beq.n	8012f4a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012f36:	4b1e      	ldr	r3, [pc, #120]	@ (8012fb0 <UART_SetConfig+0x904>)
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	08db      	lsrs	r3, r3, #3
 8012f3c:	f003 0303 	and.w	r3, r3, #3
 8012f40:	4a1d      	ldr	r2, [pc, #116]	@ (8012fb8 <UART_SetConfig+0x90c>)
 8012f42:	fa22 f303 	lsr.w	r3, r2, r3
 8012f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012f48:	e00f      	b.n	8012f6a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8012f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8012fb8 <UART_SetConfig+0x90c>)
 8012f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012f4e:	e00c      	b.n	8012f6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012f50:	4b1a      	ldr	r3, [pc, #104]	@ (8012fbc <UART_SetConfig+0x910>)
 8012f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012f54:	e009      	b.n	8012f6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012f5c:	e005      	b.n	8012f6a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8012f5e:	2300      	movs	r3, #0
 8012f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8012f62:	2301      	movs	r3, #1
 8012f64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8012f68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	f000 81ee 	beq.w	801334e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012f72:	697b      	ldr	r3, [r7, #20]
 8012f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f76:	4a12      	ldr	r2, [pc, #72]	@ (8012fc0 <UART_SetConfig+0x914>)
 8012f78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012f7c:	461a      	mov	r2, r3
 8012f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f80:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f84:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012f86:	697b      	ldr	r3, [r7, #20]
 8012f88:	685a      	ldr	r2, [r3, #4]
 8012f8a:	4613      	mov	r3, r2
 8012f8c:	005b      	lsls	r3, r3, #1
 8012f8e:	4413      	add	r3, r2
 8012f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012f92:	429a      	cmp	r2, r3
 8012f94:	d305      	bcc.n	8012fa2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012f96:	697b      	ldr	r3, [r7, #20]
 8012f98:	685b      	ldr	r3, [r3, #4]
 8012f9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012f9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d910      	bls.n	8012fc4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8012fa2:	2301      	movs	r3, #1
 8012fa4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012fa8:	e1d1      	b.n	801334e <UART_SetConfig+0xca2>
 8012faa:	bf00      	nop
 8012fac:	40011c00 	.word	0x40011c00
 8012fb0:	58024400 	.word	0x58024400
 8012fb4:	58000c00 	.word	0x58000c00
 8012fb8:	03d09000 	.word	0x03d09000
 8012fbc:	003d0900 	.word	0x003d0900
 8012fc0:	0801a4cc 	.word	0x0801a4cc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	60bb      	str	r3, [r7, #8]
 8012fca:	60fa      	str	r2, [r7, #12]
 8012fcc:	697b      	ldr	r3, [r7, #20]
 8012fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fd0:	4ac0      	ldr	r2, [pc, #768]	@ (80132d4 <UART_SetConfig+0xc28>)
 8012fd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012fd6:	b29b      	uxth	r3, r3
 8012fd8:	2200      	movs	r2, #0
 8012fda:	603b      	str	r3, [r7, #0]
 8012fdc:	607a      	str	r2, [r7, #4]
 8012fde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012fe2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012fe6:	f7ed fa4b 	bl	8000480 <__aeabi_uldivmod>
 8012fea:	4602      	mov	r2, r0
 8012fec:	460b      	mov	r3, r1
 8012fee:	4610      	mov	r0, r2
 8012ff0:	4619      	mov	r1, r3
 8012ff2:	f04f 0200 	mov.w	r2, #0
 8012ff6:	f04f 0300 	mov.w	r3, #0
 8012ffa:	020b      	lsls	r3, r1, #8
 8012ffc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013000:	0202      	lsls	r2, r0, #8
 8013002:	6979      	ldr	r1, [r7, #20]
 8013004:	6849      	ldr	r1, [r1, #4]
 8013006:	0849      	lsrs	r1, r1, #1
 8013008:	2000      	movs	r0, #0
 801300a:	460c      	mov	r4, r1
 801300c:	4605      	mov	r5, r0
 801300e:	eb12 0804 	adds.w	r8, r2, r4
 8013012:	eb43 0905 	adc.w	r9, r3, r5
 8013016:	697b      	ldr	r3, [r7, #20]
 8013018:	685b      	ldr	r3, [r3, #4]
 801301a:	2200      	movs	r2, #0
 801301c:	469a      	mov	sl, r3
 801301e:	4693      	mov	fp, r2
 8013020:	4652      	mov	r2, sl
 8013022:	465b      	mov	r3, fp
 8013024:	4640      	mov	r0, r8
 8013026:	4649      	mov	r1, r9
 8013028:	f7ed fa2a 	bl	8000480 <__aeabi_uldivmod>
 801302c:	4602      	mov	r2, r0
 801302e:	460b      	mov	r3, r1
 8013030:	4613      	mov	r3, r2
 8013032:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013036:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801303a:	d308      	bcc.n	801304e <UART_SetConfig+0x9a2>
 801303c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801303e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013042:	d204      	bcs.n	801304e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8013044:	697b      	ldr	r3, [r7, #20]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801304a:	60da      	str	r2, [r3, #12]
 801304c:	e17f      	b.n	801334e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801304e:	2301      	movs	r3, #1
 8013050:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013054:	e17b      	b.n	801334e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013056:	697b      	ldr	r3, [r7, #20]
 8013058:	69db      	ldr	r3, [r3, #28]
 801305a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801305e:	f040 80bd 	bne.w	80131dc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8013062:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013066:	2b20      	cmp	r3, #32
 8013068:	dc48      	bgt.n	80130fc <UART_SetConfig+0xa50>
 801306a:	2b00      	cmp	r3, #0
 801306c:	db7b      	blt.n	8013166 <UART_SetConfig+0xaba>
 801306e:	2b20      	cmp	r3, #32
 8013070:	d879      	bhi.n	8013166 <UART_SetConfig+0xaba>
 8013072:	a201      	add	r2, pc, #4	@ (adr r2, 8013078 <UART_SetConfig+0x9cc>)
 8013074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013078:	08013103 	.word	0x08013103
 801307c:	0801310b 	.word	0x0801310b
 8013080:	08013167 	.word	0x08013167
 8013084:	08013167 	.word	0x08013167
 8013088:	08013113 	.word	0x08013113
 801308c:	08013167 	.word	0x08013167
 8013090:	08013167 	.word	0x08013167
 8013094:	08013167 	.word	0x08013167
 8013098:	08013123 	.word	0x08013123
 801309c:	08013167 	.word	0x08013167
 80130a0:	08013167 	.word	0x08013167
 80130a4:	08013167 	.word	0x08013167
 80130a8:	08013167 	.word	0x08013167
 80130ac:	08013167 	.word	0x08013167
 80130b0:	08013167 	.word	0x08013167
 80130b4:	08013167 	.word	0x08013167
 80130b8:	08013133 	.word	0x08013133
 80130bc:	08013167 	.word	0x08013167
 80130c0:	08013167 	.word	0x08013167
 80130c4:	08013167 	.word	0x08013167
 80130c8:	08013167 	.word	0x08013167
 80130cc:	08013167 	.word	0x08013167
 80130d0:	08013167 	.word	0x08013167
 80130d4:	08013167 	.word	0x08013167
 80130d8:	08013167 	.word	0x08013167
 80130dc:	08013167 	.word	0x08013167
 80130e0:	08013167 	.word	0x08013167
 80130e4:	08013167 	.word	0x08013167
 80130e8:	08013167 	.word	0x08013167
 80130ec:	08013167 	.word	0x08013167
 80130f0:	08013167 	.word	0x08013167
 80130f4:	08013167 	.word	0x08013167
 80130f8:	08013159 	.word	0x08013159
 80130fc:	2b40      	cmp	r3, #64	@ 0x40
 80130fe:	d02e      	beq.n	801315e <UART_SetConfig+0xab2>
 8013100:	e031      	b.n	8013166 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013102:	f7fa fb03 	bl	800d70c <HAL_RCC_GetPCLK1Freq>
 8013106:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013108:	e033      	b.n	8013172 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801310a:	f7fa fb15 	bl	800d738 <HAL_RCC_GetPCLK2Freq>
 801310e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013110:	e02f      	b.n	8013172 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013112:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013116:	4618      	mov	r0, r3
 8013118:	f7fc f9ac 	bl	800f474 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801311c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801311e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013120:	e027      	b.n	8013172 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013122:	f107 0318 	add.w	r3, r7, #24
 8013126:	4618      	mov	r0, r3
 8013128:	f7fc faf8 	bl	800f71c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801312c:	69fb      	ldr	r3, [r7, #28]
 801312e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013130:	e01f      	b.n	8013172 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013132:	4b69      	ldr	r3, [pc, #420]	@ (80132d8 <UART_SetConfig+0xc2c>)
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	f003 0320 	and.w	r3, r3, #32
 801313a:	2b00      	cmp	r3, #0
 801313c:	d009      	beq.n	8013152 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801313e:	4b66      	ldr	r3, [pc, #408]	@ (80132d8 <UART_SetConfig+0xc2c>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	08db      	lsrs	r3, r3, #3
 8013144:	f003 0303 	and.w	r3, r3, #3
 8013148:	4a64      	ldr	r2, [pc, #400]	@ (80132dc <UART_SetConfig+0xc30>)
 801314a:	fa22 f303 	lsr.w	r3, r2, r3
 801314e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013150:	e00f      	b.n	8013172 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8013152:	4b62      	ldr	r3, [pc, #392]	@ (80132dc <UART_SetConfig+0xc30>)
 8013154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013156:	e00c      	b.n	8013172 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013158:	4b61      	ldr	r3, [pc, #388]	@ (80132e0 <UART_SetConfig+0xc34>)
 801315a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801315c:	e009      	b.n	8013172 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801315e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013164:	e005      	b.n	8013172 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8013166:	2300      	movs	r3, #0
 8013168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801316a:	2301      	movs	r3, #1
 801316c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013170:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013174:	2b00      	cmp	r3, #0
 8013176:	f000 80ea 	beq.w	801334e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801317a:	697b      	ldr	r3, [r7, #20]
 801317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801317e:	4a55      	ldr	r2, [pc, #340]	@ (80132d4 <UART_SetConfig+0xc28>)
 8013180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013184:	461a      	mov	r2, r3
 8013186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013188:	fbb3 f3f2 	udiv	r3, r3, r2
 801318c:	005a      	lsls	r2, r3, #1
 801318e:	697b      	ldr	r3, [r7, #20]
 8013190:	685b      	ldr	r3, [r3, #4]
 8013192:	085b      	lsrs	r3, r3, #1
 8013194:	441a      	add	r2, r3
 8013196:	697b      	ldr	r3, [r7, #20]
 8013198:	685b      	ldr	r3, [r3, #4]
 801319a:	fbb2 f3f3 	udiv	r3, r2, r3
 801319e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80131a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131a2:	2b0f      	cmp	r3, #15
 80131a4:	d916      	bls.n	80131d4 <UART_SetConfig+0xb28>
 80131a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80131ac:	d212      	bcs.n	80131d4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80131ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131b0:	b29b      	uxth	r3, r3
 80131b2:	f023 030f 	bic.w	r3, r3, #15
 80131b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80131b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131ba:	085b      	lsrs	r3, r3, #1
 80131bc:	b29b      	uxth	r3, r3
 80131be:	f003 0307 	and.w	r3, r3, #7
 80131c2:	b29a      	uxth	r2, r3
 80131c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80131c6:	4313      	orrs	r3, r2
 80131c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80131ca:	697b      	ldr	r3, [r7, #20]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80131d0:	60da      	str	r2, [r3, #12]
 80131d2:	e0bc      	b.n	801334e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80131d4:	2301      	movs	r3, #1
 80131d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80131da:	e0b8      	b.n	801334e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80131dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80131e0:	2b20      	cmp	r3, #32
 80131e2:	dc4b      	bgt.n	801327c <UART_SetConfig+0xbd0>
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	f2c0 8087 	blt.w	80132f8 <UART_SetConfig+0xc4c>
 80131ea:	2b20      	cmp	r3, #32
 80131ec:	f200 8084 	bhi.w	80132f8 <UART_SetConfig+0xc4c>
 80131f0:	a201      	add	r2, pc, #4	@ (adr r2, 80131f8 <UART_SetConfig+0xb4c>)
 80131f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131f6:	bf00      	nop
 80131f8:	08013283 	.word	0x08013283
 80131fc:	0801328b 	.word	0x0801328b
 8013200:	080132f9 	.word	0x080132f9
 8013204:	080132f9 	.word	0x080132f9
 8013208:	08013293 	.word	0x08013293
 801320c:	080132f9 	.word	0x080132f9
 8013210:	080132f9 	.word	0x080132f9
 8013214:	080132f9 	.word	0x080132f9
 8013218:	080132a3 	.word	0x080132a3
 801321c:	080132f9 	.word	0x080132f9
 8013220:	080132f9 	.word	0x080132f9
 8013224:	080132f9 	.word	0x080132f9
 8013228:	080132f9 	.word	0x080132f9
 801322c:	080132f9 	.word	0x080132f9
 8013230:	080132f9 	.word	0x080132f9
 8013234:	080132f9 	.word	0x080132f9
 8013238:	080132b3 	.word	0x080132b3
 801323c:	080132f9 	.word	0x080132f9
 8013240:	080132f9 	.word	0x080132f9
 8013244:	080132f9 	.word	0x080132f9
 8013248:	080132f9 	.word	0x080132f9
 801324c:	080132f9 	.word	0x080132f9
 8013250:	080132f9 	.word	0x080132f9
 8013254:	080132f9 	.word	0x080132f9
 8013258:	080132f9 	.word	0x080132f9
 801325c:	080132f9 	.word	0x080132f9
 8013260:	080132f9 	.word	0x080132f9
 8013264:	080132f9 	.word	0x080132f9
 8013268:	080132f9 	.word	0x080132f9
 801326c:	080132f9 	.word	0x080132f9
 8013270:	080132f9 	.word	0x080132f9
 8013274:	080132f9 	.word	0x080132f9
 8013278:	080132eb 	.word	0x080132eb
 801327c:	2b40      	cmp	r3, #64	@ 0x40
 801327e:	d037      	beq.n	80132f0 <UART_SetConfig+0xc44>
 8013280:	e03a      	b.n	80132f8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013282:	f7fa fa43 	bl	800d70c <HAL_RCC_GetPCLK1Freq>
 8013286:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013288:	e03c      	b.n	8013304 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801328a:	f7fa fa55 	bl	800d738 <HAL_RCC_GetPCLK2Freq>
 801328e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013290:	e038      	b.n	8013304 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013292:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013296:	4618      	mov	r0, r3
 8013298:	f7fc f8ec 	bl	800f474 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801329c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801329e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80132a0:	e030      	b.n	8013304 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80132a2:	f107 0318 	add.w	r3, r7, #24
 80132a6:	4618      	mov	r0, r3
 80132a8:	f7fc fa38 	bl	800f71c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80132ac:	69fb      	ldr	r3, [r7, #28]
 80132ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80132b0:	e028      	b.n	8013304 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80132b2:	4b09      	ldr	r3, [pc, #36]	@ (80132d8 <UART_SetConfig+0xc2c>)
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	f003 0320 	and.w	r3, r3, #32
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d012      	beq.n	80132e4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80132be:	4b06      	ldr	r3, [pc, #24]	@ (80132d8 <UART_SetConfig+0xc2c>)
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	08db      	lsrs	r3, r3, #3
 80132c4:	f003 0303 	and.w	r3, r3, #3
 80132c8:	4a04      	ldr	r2, [pc, #16]	@ (80132dc <UART_SetConfig+0xc30>)
 80132ca:	fa22 f303 	lsr.w	r3, r2, r3
 80132ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80132d0:	e018      	b.n	8013304 <UART_SetConfig+0xc58>
 80132d2:	bf00      	nop
 80132d4:	0801a4cc 	.word	0x0801a4cc
 80132d8:	58024400 	.word	0x58024400
 80132dc:	03d09000 	.word	0x03d09000
 80132e0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80132e4:	4b24      	ldr	r3, [pc, #144]	@ (8013378 <UART_SetConfig+0xccc>)
 80132e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80132e8:	e00c      	b.n	8013304 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80132ea:	4b24      	ldr	r3, [pc, #144]	@ (801337c <UART_SetConfig+0xcd0>)
 80132ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80132ee:	e009      	b.n	8013304 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80132f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80132f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80132f6:	e005      	b.n	8013304 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80132f8:	2300      	movs	r3, #0
 80132fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80132fc:	2301      	movs	r3, #1
 80132fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013302:	bf00      	nop
    }

    if (pclk != 0U)
 8013304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013306:	2b00      	cmp	r3, #0
 8013308:	d021      	beq.n	801334e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801330a:	697b      	ldr	r3, [r7, #20]
 801330c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801330e:	4a1c      	ldr	r2, [pc, #112]	@ (8013380 <UART_SetConfig+0xcd4>)
 8013310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013314:	461a      	mov	r2, r3
 8013316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013318:	fbb3 f2f2 	udiv	r2, r3, r2
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	685b      	ldr	r3, [r3, #4]
 8013320:	085b      	lsrs	r3, r3, #1
 8013322:	441a      	add	r2, r3
 8013324:	697b      	ldr	r3, [r7, #20]
 8013326:	685b      	ldr	r3, [r3, #4]
 8013328:	fbb2 f3f3 	udiv	r3, r2, r3
 801332c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801332e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013330:	2b0f      	cmp	r3, #15
 8013332:	d909      	bls.n	8013348 <UART_SetConfig+0xc9c>
 8013334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013336:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801333a:	d205      	bcs.n	8013348 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801333c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801333e:	b29a      	uxth	r2, r3
 8013340:	697b      	ldr	r3, [r7, #20]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	60da      	str	r2, [r3, #12]
 8013346:	e002      	b.n	801334e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8013348:	2301      	movs	r3, #1
 801334a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801334e:	697b      	ldr	r3, [r7, #20]
 8013350:	2201      	movs	r2, #1
 8013352:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8013356:	697b      	ldr	r3, [r7, #20]
 8013358:	2201      	movs	r2, #1
 801335a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801335e:	697b      	ldr	r3, [r7, #20]
 8013360:	2200      	movs	r2, #0
 8013362:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8013364:	697b      	ldr	r3, [r7, #20]
 8013366:	2200      	movs	r2, #0
 8013368:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801336a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801336e:	4618      	mov	r0, r3
 8013370:	3748      	adds	r7, #72	@ 0x48
 8013372:	46bd      	mov	sp, r7
 8013374:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013378:	03d09000 	.word	0x03d09000
 801337c:	003d0900 	.word	0x003d0900
 8013380:	0801a4cc 	.word	0x0801a4cc

08013384 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013384:	b480      	push	{r7}
 8013386:	b083      	sub	sp, #12
 8013388:	af00      	add	r7, sp, #0
 801338a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013390:	f003 0308 	and.w	r3, r3, #8
 8013394:	2b00      	cmp	r3, #0
 8013396:	d00a      	beq.n	80133ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	685b      	ldr	r3, [r3, #4]
 801339e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	430a      	orrs	r2, r1
 80133ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80133b2:	f003 0301 	and.w	r3, r3, #1
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d00a      	beq.n	80133d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	685b      	ldr	r3, [r3, #4]
 80133c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	430a      	orrs	r2, r1
 80133ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80133d4:	f003 0302 	and.w	r3, r3, #2
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d00a      	beq.n	80133f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	685b      	ldr	r3, [r3, #4]
 80133e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	430a      	orrs	r2, r1
 80133f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80133f6:	f003 0304 	and.w	r3, r3, #4
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d00a      	beq.n	8013414 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	685b      	ldr	r3, [r3, #4]
 8013404:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	430a      	orrs	r2, r1
 8013412:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013418:	f003 0310 	and.w	r3, r3, #16
 801341c:	2b00      	cmp	r3, #0
 801341e:	d00a      	beq.n	8013436 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	689b      	ldr	r3, [r3, #8]
 8013426:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	430a      	orrs	r2, r1
 8013434:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801343a:	f003 0320 	and.w	r3, r3, #32
 801343e:	2b00      	cmp	r3, #0
 8013440:	d00a      	beq.n	8013458 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	689b      	ldr	r3, [r3, #8]
 8013448:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	430a      	orrs	r2, r1
 8013456:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801345c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013460:	2b00      	cmp	r3, #0
 8013462:	d01a      	beq.n	801349a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	685b      	ldr	r3, [r3, #4]
 801346a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	430a      	orrs	r2, r1
 8013478:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801347e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013482:	d10a      	bne.n	801349a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	685b      	ldr	r3, [r3, #4]
 801348a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	430a      	orrs	r2, r1
 8013498:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801349e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d00a      	beq.n	80134bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	685b      	ldr	r3, [r3, #4]
 80134ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	430a      	orrs	r2, r1
 80134ba:	605a      	str	r2, [r3, #4]
  }
}
 80134bc:	bf00      	nop
 80134be:	370c      	adds	r7, #12
 80134c0:	46bd      	mov	sp, r7
 80134c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c6:	4770      	bx	lr

080134c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b098      	sub	sp, #96	@ 0x60
 80134cc:	af02      	add	r7, sp, #8
 80134ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	2200      	movs	r2, #0
 80134d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80134d8:	f7ef ff78 	bl	80033cc <HAL_GetTick>
 80134dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	f003 0308 	and.w	r3, r3, #8
 80134e8:	2b08      	cmp	r3, #8
 80134ea:	d12f      	bne.n	801354c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80134ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80134f0:	9300      	str	r3, [sp, #0]
 80134f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134f4:	2200      	movs	r2, #0
 80134f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	f000 f88e 	bl	801361c <UART_WaitOnFlagUntilTimeout>
 8013500:	4603      	mov	r3, r0
 8013502:	2b00      	cmp	r3, #0
 8013504:	d022      	beq.n	801354c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801350c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801350e:	e853 3f00 	ldrex	r3, [r3]
 8013512:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013516:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801351a:	653b      	str	r3, [r7, #80]	@ 0x50
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	461a      	mov	r2, r3
 8013522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013524:	647b      	str	r3, [r7, #68]	@ 0x44
 8013526:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013528:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801352a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801352c:	e841 2300 	strex	r3, r2, [r1]
 8013530:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013534:	2b00      	cmp	r3, #0
 8013536:	d1e6      	bne.n	8013506 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	2220      	movs	r2, #32
 801353c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	2200      	movs	r2, #0
 8013544:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013548:	2303      	movs	r3, #3
 801354a:	e063      	b.n	8013614 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	f003 0304 	and.w	r3, r3, #4
 8013556:	2b04      	cmp	r3, #4
 8013558:	d149      	bne.n	80135ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801355a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801355e:	9300      	str	r3, [sp, #0]
 8013560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013562:	2200      	movs	r2, #0
 8013564:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8013568:	6878      	ldr	r0, [r7, #4]
 801356a:	f000 f857 	bl	801361c <UART_WaitOnFlagUntilTimeout>
 801356e:	4603      	mov	r3, r0
 8013570:	2b00      	cmp	r3, #0
 8013572:	d03c      	beq.n	80135ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801357a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801357c:	e853 3f00 	ldrex	r3, [r3]
 8013580:	623b      	str	r3, [r7, #32]
   return(result);
 8013582:	6a3b      	ldr	r3, [r7, #32]
 8013584:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013588:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	461a      	mov	r2, r3
 8013590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013592:	633b      	str	r3, [r7, #48]	@ 0x30
 8013594:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013596:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013598:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801359a:	e841 2300 	strex	r3, r2, [r1]
 801359e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80135a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d1e6      	bne.n	8013574 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	3308      	adds	r3, #8
 80135ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135ae:	693b      	ldr	r3, [r7, #16]
 80135b0:	e853 3f00 	ldrex	r3, [r3]
 80135b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	f023 0301 	bic.w	r3, r3, #1
 80135bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	3308      	adds	r3, #8
 80135c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80135c6:	61fa      	str	r2, [r7, #28]
 80135c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135ca:	69b9      	ldr	r1, [r7, #24]
 80135cc:	69fa      	ldr	r2, [r7, #28]
 80135ce:	e841 2300 	strex	r3, r2, [r1]
 80135d2:	617b      	str	r3, [r7, #20]
   return(result);
 80135d4:	697b      	ldr	r3, [r7, #20]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d1e5      	bne.n	80135a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	2220      	movs	r2, #32
 80135de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	2200      	movs	r2, #0
 80135e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80135ea:	2303      	movs	r3, #3
 80135ec:	e012      	b.n	8013614 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	2220      	movs	r2, #32
 80135f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	2220      	movs	r2, #32
 80135fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	2200      	movs	r2, #0
 8013602:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	2200      	movs	r2, #0
 8013608:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	2200      	movs	r2, #0
 801360e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013612:	2300      	movs	r3, #0
}
 8013614:	4618      	mov	r0, r3
 8013616:	3758      	adds	r7, #88	@ 0x58
 8013618:	46bd      	mov	sp, r7
 801361a:	bd80      	pop	{r7, pc}

0801361c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b084      	sub	sp, #16
 8013620:	af00      	add	r7, sp, #0
 8013622:	60f8      	str	r0, [r7, #12]
 8013624:	60b9      	str	r1, [r7, #8]
 8013626:	603b      	str	r3, [r7, #0]
 8013628:	4613      	mov	r3, r2
 801362a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801362c:	e04f      	b.n	80136ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801362e:	69bb      	ldr	r3, [r7, #24]
 8013630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013634:	d04b      	beq.n	80136ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013636:	f7ef fec9 	bl	80033cc <HAL_GetTick>
 801363a:	4602      	mov	r2, r0
 801363c:	683b      	ldr	r3, [r7, #0]
 801363e:	1ad3      	subs	r3, r2, r3
 8013640:	69ba      	ldr	r2, [r7, #24]
 8013642:	429a      	cmp	r2, r3
 8013644:	d302      	bcc.n	801364c <UART_WaitOnFlagUntilTimeout+0x30>
 8013646:	69bb      	ldr	r3, [r7, #24]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d101      	bne.n	8013650 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801364c:	2303      	movs	r3, #3
 801364e:	e04e      	b.n	80136ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	f003 0304 	and.w	r3, r3, #4
 801365a:	2b00      	cmp	r3, #0
 801365c:	d037      	beq.n	80136ce <UART_WaitOnFlagUntilTimeout+0xb2>
 801365e:	68bb      	ldr	r3, [r7, #8]
 8013660:	2b80      	cmp	r3, #128	@ 0x80
 8013662:	d034      	beq.n	80136ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	2b40      	cmp	r3, #64	@ 0x40
 8013668:	d031      	beq.n	80136ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	69db      	ldr	r3, [r3, #28]
 8013670:	f003 0308 	and.w	r3, r3, #8
 8013674:	2b08      	cmp	r3, #8
 8013676:	d110      	bne.n	801369a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	2208      	movs	r2, #8
 801367e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013680:	68f8      	ldr	r0, [r7, #12]
 8013682:	f000 f921 	bl	80138c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	2208      	movs	r2, #8
 801368a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	2200      	movs	r2, #0
 8013692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8013696:	2301      	movs	r3, #1
 8013698:	e029      	b.n	80136ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	69db      	ldr	r3, [r3, #28]
 80136a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80136a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80136a8:	d111      	bne.n	80136ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80136b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80136b4:	68f8      	ldr	r0, [r7, #12]
 80136b6:	f000 f907 	bl	80138c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	2220      	movs	r2, #32
 80136be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	2200      	movs	r2, #0
 80136c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80136ca:	2303      	movs	r3, #3
 80136cc:	e00f      	b.n	80136ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	69da      	ldr	r2, [r3, #28]
 80136d4:	68bb      	ldr	r3, [r7, #8]
 80136d6:	4013      	ands	r3, r2
 80136d8:	68ba      	ldr	r2, [r7, #8]
 80136da:	429a      	cmp	r2, r3
 80136dc:	bf0c      	ite	eq
 80136de:	2301      	moveq	r3, #1
 80136e0:	2300      	movne	r3, #0
 80136e2:	b2db      	uxtb	r3, r3
 80136e4:	461a      	mov	r2, r3
 80136e6:	79fb      	ldrb	r3, [r7, #7]
 80136e8:	429a      	cmp	r2, r3
 80136ea:	d0a0      	beq.n	801362e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80136ec:	2300      	movs	r3, #0
}
 80136ee:	4618      	mov	r0, r3
 80136f0:	3710      	adds	r7, #16
 80136f2:	46bd      	mov	sp, r7
 80136f4:	bd80      	pop	{r7, pc}
	...

080136f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b096      	sub	sp, #88	@ 0x58
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	60f8      	str	r0, [r7, #12]
 8013700:	60b9      	str	r1, [r7, #8]
 8013702:	4613      	mov	r3, r2
 8013704:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	68ba      	ldr	r2, [r7, #8]
 801370a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	88fa      	ldrh	r2, [r7, #6]
 8013710:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	2200      	movs	r2, #0
 8013718:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	2222      	movs	r2, #34	@ 0x22
 8013720:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801372a:	2b00      	cmp	r3, #0
 801372c:	d02d      	beq.n	801378a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013734:	4a40      	ldr	r2, [pc, #256]	@ (8013838 <UART_Start_Receive_DMA+0x140>)
 8013736:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801373e:	4a3f      	ldr	r2, [pc, #252]	@ (801383c <UART_Start_Receive_DMA+0x144>)
 8013740:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013748:	4a3d      	ldr	r2, [pc, #244]	@ (8013840 <UART_Start_Receive_DMA+0x148>)
 801374a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013752:	2200      	movs	r2, #0
 8013754:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	3324      	adds	r3, #36	@ 0x24
 8013762:	4619      	mov	r1, r3
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013768:	461a      	mov	r2, r3
 801376a:	88fb      	ldrh	r3, [r7, #6]
 801376c:	f7f3 f938 	bl	80069e0 <HAL_DMA_Start_IT>
 8013770:	4603      	mov	r3, r0
 8013772:	2b00      	cmp	r3, #0
 8013774:	d009      	beq.n	801378a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	2210      	movs	r2, #16
 801377a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	2220      	movs	r2, #32
 8013782:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8013786:	2301      	movs	r3, #1
 8013788:	e051      	b.n	801382e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	691b      	ldr	r3, [r3, #16]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d018      	beq.n	80137c4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801379a:	e853 3f00 	ldrex	r3, [r3]
 801379e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80137a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80137a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	461a      	mov	r2, r3
 80137ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80137b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80137b2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80137b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80137b8:	e841 2300 	strex	r3, r2, [r1]
 80137bc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80137be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d1e6      	bne.n	8013792 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	3308      	adds	r3, #8
 80137ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137ce:	e853 3f00 	ldrex	r3, [r3]
 80137d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80137d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137d6:	f043 0301 	orr.w	r3, r3, #1
 80137da:	653b      	str	r3, [r7, #80]	@ 0x50
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	3308      	adds	r3, #8
 80137e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80137e4:	637a      	str	r2, [r7, #52]	@ 0x34
 80137e6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80137ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80137ec:	e841 2300 	strex	r3, r2, [r1]
 80137f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80137f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d1e5      	bne.n	80137c4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	3308      	adds	r3, #8
 80137fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013800:	697b      	ldr	r3, [r7, #20]
 8013802:	e853 3f00 	ldrex	r3, [r3]
 8013806:	613b      	str	r3, [r7, #16]
   return(result);
 8013808:	693b      	ldr	r3, [r7, #16]
 801380a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801380e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	3308      	adds	r3, #8
 8013816:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013818:	623a      	str	r2, [r7, #32]
 801381a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801381c:	69f9      	ldr	r1, [r7, #28]
 801381e:	6a3a      	ldr	r2, [r7, #32]
 8013820:	e841 2300 	strex	r3, r2, [r1]
 8013824:	61bb      	str	r3, [r7, #24]
   return(result);
 8013826:	69bb      	ldr	r3, [r7, #24]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d1e5      	bne.n	80137f8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 801382c:	2300      	movs	r3, #0
}
 801382e:	4618      	mov	r0, r3
 8013830:	3758      	adds	r7, #88	@ 0x58
 8013832:	46bd      	mov	sp, r7
 8013834:	bd80      	pop	{r7, pc}
 8013836:	bf00      	nop
 8013838:	08013a47 	.word	0x08013a47
 801383c:	08013b6f 	.word	0x08013b6f
 8013840:	08013bad 	.word	0x08013bad

08013844 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8013844:	b480      	push	{r7}
 8013846:	b08f      	sub	sp, #60	@ 0x3c
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013852:	6a3b      	ldr	r3, [r7, #32]
 8013854:	e853 3f00 	ldrex	r3, [r3]
 8013858:	61fb      	str	r3, [r7, #28]
   return(result);
 801385a:	69fb      	ldr	r3, [r7, #28]
 801385c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8013860:	637b      	str	r3, [r7, #52]	@ 0x34
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	461a      	mov	r2, r3
 8013868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801386a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801386c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801386e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013872:	e841 2300 	strex	r3, r2, [r1]
 8013876:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801387a:	2b00      	cmp	r3, #0
 801387c:	d1e6      	bne.n	801384c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	3308      	adds	r3, #8
 8013884:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	e853 3f00 	ldrex	r3, [r3]
 801388c:	60bb      	str	r3, [r7, #8]
   return(result);
 801388e:	68bb      	ldr	r3, [r7, #8]
 8013890:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8013894:	633b      	str	r3, [r7, #48]	@ 0x30
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	3308      	adds	r3, #8
 801389c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801389e:	61ba      	str	r2, [r7, #24]
 80138a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138a2:	6979      	ldr	r1, [r7, #20]
 80138a4:	69ba      	ldr	r2, [r7, #24]
 80138a6:	e841 2300 	strex	r3, r2, [r1]
 80138aa:	613b      	str	r3, [r7, #16]
   return(result);
 80138ac:	693b      	ldr	r3, [r7, #16]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d1e5      	bne.n	801387e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	2220      	movs	r2, #32
 80138b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80138ba:	bf00      	nop
 80138bc:	373c      	adds	r7, #60	@ 0x3c
 80138be:	46bd      	mov	sp, r7
 80138c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c4:	4770      	bx	lr
	...

080138c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80138c8:	b480      	push	{r7}
 80138ca:	b095      	sub	sp, #84	@ 0x54
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138d8:	e853 3f00 	ldrex	r3, [r3]
 80138dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80138de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80138e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	461a      	mov	r2, r3
 80138ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80138ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80138f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80138f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80138f6:	e841 2300 	strex	r3, r2, [r1]
 80138fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80138fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d1e6      	bne.n	80138d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	3308      	adds	r3, #8
 8013908:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801390a:	6a3b      	ldr	r3, [r7, #32]
 801390c:	e853 3f00 	ldrex	r3, [r3]
 8013910:	61fb      	str	r3, [r7, #28]
   return(result);
 8013912:	69fa      	ldr	r2, [r7, #28]
 8013914:	4b1e      	ldr	r3, [pc, #120]	@ (8013990 <UART_EndRxTransfer+0xc8>)
 8013916:	4013      	ands	r3, r2
 8013918:	64bb      	str	r3, [r7, #72]	@ 0x48
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	3308      	adds	r3, #8
 8013920:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013922:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013924:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013926:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013928:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801392a:	e841 2300 	strex	r3, r2, [r1]
 801392e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013932:	2b00      	cmp	r3, #0
 8013934:	d1e5      	bne.n	8013902 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801393a:	2b01      	cmp	r3, #1
 801393c:	d118      	bne.n	8013970 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	e853 3f00 	ldrex	r3, [r3]
 801394a:	60bb      	str	r3, [r7, #8]
   return(result);
 801394c:	68bb      	ldr	r3, [r7, #8]
 801394e:	f023 0310 	bic.w	r3, r3, #16
 8013952:	647b      	str	r3, [r7, #68]	@ 0x44
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	461a      	mov	r2, r3
 801395a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801395c:	61bb      	str	r3, [r7, #24]
 801395e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013960:	6979      	ldr	r1, [r7, #20]
 8013962:	69ba      	ldr	r2, [r7, #24]
 8013964:	e841 2300 	strex	r3, r2, [r1]
 8013968:	613b      	str	r3, [r7, #16]
   return(result);
 801396a:	693b      	ldr	r3, [r7, #16]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d1e6      	bne.n	801393e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	2220      	movs	r2, #32
 8013974:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	2200      	movs	r2, #0
 801397c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	2200      	movs	r2, #0
 8013982:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8013984:	bf00      	nop
 8013986:	3754      	adds	r7, #84	@ 0x54
 8013988:	46bd      	mov	sp, r7
 801398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398e:	4770      	bx	lr
 8013990:	effffffe 	.word	0xeffffffe

08013994 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013994:	b580      	push	{r7, lr}
 8013996:	b090      	sub	sp, #64	@ 0x40
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80139a0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	69db      	ldr	r3, [r3, #28]
 80139a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80139aa:	d037      	beq.n	8013a1c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80139ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80139ae:	2200      	movs	r2, #0
 80139b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80139b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	3308      	adds	r3, #8
 80139ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139be:	e853 3f00 	ldrex	r3, [r3]
 80139c2:	623b      	str	r3, [r7, #32]
   return(result);
 80139c4:	6a3b      	ldr	r3, [r7, #32]
 80139c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80139ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80139cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	3308      	adds	r3, #8
 80139d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80139d4:	633a      	str	r2, [r7, #48]	@ 0x30
 80139d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80139da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80139dc:	e841 2300 	strex	r3, r2, [r1]
 80139e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80139e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d1e5      	bne.n	80139b4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80139e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139ee:	693b      	ldr	r3, [r7, #16]
 80139f0:	e853 3f00 	ldrex	r3, [r3]
 80139f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80139fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80139fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	461a      	mov	r2, r3
 8013a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a06:	61fb      	str	r3, [r7, #28]
 8013a08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a0a:	69b9      	ldr	r1, [r7, #24]
 8013a0c:	69fa      	ldr	r2, [r7, #28]
 8013a0e:	e841 2300 	strex	r3, r2, [r1]
 8013a12:	617b      	str	r3, [r7, #20]
   return(result);
 8013a14:	697b      	ldr	r3, [r7, #20]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d1e6      	bne.n	80139e8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013a1a:	e002      	b.n	8013a22 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8013a1c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8013a1e:	f7fe fe07 	bl	8012630 <HAL_UART_TxCpltCallback>
}
 8013a22:	bf00      	nop
 8013a24:	3740      	adds	r7, #64	@ 0x40
 8013a26:	46bd      	mov	sp, r7
 8013a28:	bd80      	pop	{r7, pc}

08013a2a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013a2a:	b580      	push	{r7, lr}
 8013a2c:	b084      	sub	sp, #16
 8013a2e:	af00      	add	r7, sp, #0
 8013a30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a36:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8013a38:	68f8      	ldr	r0, [r7, #12]
 8013a3a:	f7fe fe03 	bl	8012644 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013a3e:	bf00      	nop
 8013a40:	3710      	adds	r7, #16
 8013a42:	46bd      	mov	sp, r7
 8013a44:	bd80      	pop	{r7, pc}

08013a46 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013a46:	b580      	push	{r7, lr}
 8013a48:	b09c      	sub	sp, #112	@ 0x70
 8013a4a:	af00      	add	r7, sp, #0
 8013a4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013a52:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	69db      	ldr	r3, [r3, #28]
 8013a58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013a5c:	d071      	beq.n	8013b42 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8013a5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013a60:	2200      	movs	r2, #0
 8013a62:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013a66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a6e:	e853 3f00 	ldrex	r3, [r3]
 8013a72:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8013a74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013a76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013a7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013a7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	461a      	mov	r2, r3
 8013a82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013a84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013a86:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013a8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013a8c:	e841 2300 	strex	r3, r2, [r1]
 8013a90:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8013a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d1e6      	bne.n	8013a66 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013a98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	3308      	adds	r3, #8
 8013a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aa2:	e853 3f00 	ldrex	r3, [r3]
 8013aa6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013aaa:	f023 0301 	bic.w	r3, r3, #1
 8013aae:	667b      	str	r3, [r7, #100]	@ 0x64
 8013ab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	3308      	adds	r3, #8
 8013ab6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013ab8:	647a      	str	r2, [r7, #68]	@ 0x44
 8013aba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013abc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013abe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013ac0:	e841 2300 	strex	r3, r2, [r1]
 8013ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d1e5      	bne.n	8013a98 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013acc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	3308      	adds	r3, #8
 8013ad2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ad6:	e853 3f00 	ldrex	r3, [r3]
 8013ada:	623b      	str	r3, [r7, #32]
   return(result);
 8013adc:	6a3b      	ldr	r3, [r7, #32]
 8013ade:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013ae2:	663b      	str	r3, [r7, #96]	@ 0x60
 8013ae4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	3308      	adds	r3, #8
 8013aea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013aec:	633a      	str	r2, [r7, #48]	@ 0x30
 8013aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013af0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013af4:	e841 2300 	strex	r3, r2, [r1]
 8013af8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d1e5      	bne.n	8013acc <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013b00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b02:	2220      	movs	r2, #32
 8013b04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013b08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b0c:	2b01      	cmp	r3, #1
 8013b0e:	d118      	bne.n	8013b42 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013b10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b16:	693b      	ldr	r3, [r7, #16]
 8013b18:	e853 3f00 	ldrex	r3, [r3]
 8013b1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	f023 0310 	bic.w	r3, r3, #16
 8013b24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013b26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	461a      	mov	r2, r3
 8013b2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013b2e:	61fb      	str	r3, [r7, #28]
 8013b30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b32:	69b9      	ldr	r1, [r7, #24]
 8013b34:	69fa      	ldr	r2, [r7, #28]
 8013b36:	e841 2300 	strex	r3, r2, [r1]
 8013b3a:	617b      	str	r3, [r7, #20]
   return(result);
 8013b3c:	697b      	ldr	r3, [r7, #20]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d1e6      	bne.n	8013b10 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013b42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b44:	2200      	movs	r2, #0
 8013b46:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013b48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b4c:	2b01      	cmp	r3, #1
 8013b4e:	d107      	bne.n	8013b60 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013b50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013b56:	4619      	mov	r1, r3
 8013b58:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013b5a:	f7fe fd9b 	bl	8012694 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013b5e:	e002      	b.n	8013b66 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8013b60:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013b62:	f7fe fd79 	bl	8012658 <HAL_UART_RxCpltCallback>
}
 8013b66:	bf00      	nop
 8013b68:	3770      	adds	r7, #112	@ 0x70
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	bd80      	pop	{r7, pc}

08013b6e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013b6e:	b580      	push	{r7, lr}
 8013b70:	b084      	sub	sp, #16
 8013b72:	af00      	add	r7, sp, #0
 8013b74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b7a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	2201      	movs	r2, #1
 8013b80:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b86:	2b01      	cmp	r3, #1
 8013b88:	d109      	bne.n	8013b9e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013b90:	085b      	lsrs	r3, r3, #1
 8013b92:	b29b      	uxth	r3, r3
 8013b94:	4619      	mov	r1, r3
 8013b96:	68f8      	ldr	r0, [r7, #12]
 8013b98:	f7fe fd7c 	bl	8012694 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013b9c:	e002      	b.n	8013ba4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8013b9e:	68f8      	ldr	r0, [r7, #12]
 8013ba0:	f7fe fd64 	bl	801266c <HAL_UART_RxHalfCpltCallback>
}
 8013ba4:	bf00      	nop
 8013ba6:	3710      	adds	r7, #16
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	bd80      	pop	{r7, pc}

08013bac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b086      	sub	sp, #24
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013bb8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8013bba:	697b      	ldr	r3, [r7, #20]
 8013bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013bc0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013bc2:	697b      	ldr	r3, [r7, #20]
 8013bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013bc8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8013bca:	697b      	ldr	r3, [r7, #20]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	689b      	ldr	r3, [r3, #8]
 8013bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013bd4:	2b80      	cmp	r3, #128	@ 0x80
 8013bd6:	d109      	bne.n	8013bec <UART_DMAError+0x40>
 8013bd8:	693b      	ldr	r3, [r7, #16]
 8013bda:	2b21      	cmp	r3, #33	@ 0x21
 8013bdc:	d106      	bne.n	8013bec <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8013bde:	697b      	ldr	r3, [r7, #20]
 8013be0:	2200      	movs	r2, #0
 8013be2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8013be6:	6978      	ldr	r0, [r7, #20]
 8013be8:	f7ff fe2c 	bl	8013844 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8013bec:	697b      	ldr	r3, [r7, #20]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	689b      	ldr	r3, [r3, #8]
 8013bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013bf6:	2b40      	cmp	r3, #64	@ 0x40
 8013bf8:	d109      	bne.n	8013c0e <UART_DMAError+0x62>
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	2b22      	cmp	r3, #34	@ 0x22
 8013bfe:	d106      	bne.n	8013c0e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8013c00:	697b      	ldr	r3, [r7, #20]
 8013c02:	2200      	movs	r2, #0
 8013c04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8013c08:	6978      	ldr	r0, [r7, #20]
 8013c0a:	f7ff fe5d 	bl	80138c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013c0e:	697b      	ldr	r3, [r7, #20]
 8013c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013c14:	f043 0210 	orr.w	r2, r3, #16
 8013c18:	697b      	ldr	r3, [r7, #20]
 8013c1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013c1e:	6978      	ldr	r0, [r7, #20]
 8013c20:	f7fe fd2e 	bl	8012680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013c24:	bf00      	nop
 8013c26:	3718      	adds	r7, #24
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bd80      	pop	{r7, pc}

08013c2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b084      	sub	sp, #16
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013c38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013c42:	68f8      	ldr	r0, [r7, #12]
 8013c44:	f7fe fd1c 	bl	8012680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013c48:	bf00      	nop
 8013c4a:	3710      	adds	r7, #16
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bd80      	pop	{r7, pc}

08013c50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b088      	sub	sp, #32
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	e853 3f00 	ldrex	r3, [r3]
 8013c64:	60bb      	str	r3, [r7, #8]
   return(result);
 8013c66:	68bb      	ldr	r3, [r7, #8]
 8013c68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013c6c:	61fb      	str	r3, [r7, #28]
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	461a      	mov	r2, r3
 8013c74:	69fb      	ldr	r3, [r7, #28]
 8013c76:	61bb      	str	r3, [r7, #24]
 8013c78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c7a:	6979      	ldr	r1, [r7, #20]
 8013c7c:	69ba      	ldr	r2, [r7, #24]
 8013c7e:	e841 2300 	strex	r3, r2, [r1]
 8013c82:	613b      	str	r3, [r7, #16]
   return(result);
 8013c84:	693b      	ldr	r3, [r7, #16]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d1e6      	bne.n	8013c58 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	2220      	movs	r2, #32
 8013c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	2200      	movs	r2, #0
 8013c96:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013c98:	6878      	ldr	r0, [r7, #4]
 8013c9a:	f7fe fcc9 	bl	8012630 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013c9e:	bf00      	nop
 8013ca0:	3720      	adds	r7, #32
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	bd80      	pop	{r7, pc}

08013ca6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013ca6:	b480      	push	{r7}
 8013ca8:	b083      	sub	sp, #12
 8013caa:	af00      	add	r7, sp, #0
 8013cac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013cae:	bf00      	nop
 8013cb0:	370c      	adds	r7, #12
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cb8:	4770      	bx	lr

08013cba <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8013cba:	b480      	push	{r7}
 8013cbc:	b083      	sub	sp, #12
 8013cbe:	af00      	add	r7, sp, #0
 8013cc0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8013cc2:	bf00      	nop
 8013cc4:	370c      	adds	r7, #12
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ccc:	4770      	bx	lr

08013cce <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8013cce:	b480      	push	{r7}
 8013cd0:	b083      	sub	sp, #12
 8013cd2:	af00      	add	r7, sp, #0
 8013cd4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8013cd6:	bf00      	nop
 8013cd8:	370c      	adds	r7, #12
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce0:	4770      	bx	lr

08013ce2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013ce2:	b480      	push	{r7}
 8013ce4:	b085      	sub	sp, #20
 8013ce6:	af00      	add	r7, sp, #0
 8013ce8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013cf0:	2b01      	cmp	r3, #1
 8013cf2:	d101      	bne.n	8013cf8 <HAL_UARTEx_DisableFifoMode+0x16>
 8013cf4:	2302      	movs	r3, #2
 8013cf6:	e027      	b.n	8013d48 <HAL_UARTEx_DisableFifoMode+0x66>
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	2201      	movs	r2, #1
 8013cfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	2224      	movs	r2, #36	@ 0x24
 8013d04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	681a      	ldr	r2, [r3, #0]
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	f022 0201 	bic.w	r2, r2, #1
 8013d1e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8013d26:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	68fa      	ldr	r2, [r7, #12]
 8013d34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	2220      	movs	r2, #32
 8013d3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	2200      	movs	r2, #0
 8013d42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013d46:	2300      	movs	r3, #0
}
 8013d48:	4618      	mov	r0, r3
 8013d4a:	3714      	adds	r7, #20
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d52:	4770      	bx	lr

08013d54 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b084      	sub	sp, #16
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	6078      	str	r0, [r7, #4]
 8013d5c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013d64:	2b01      	cmp	r3, #1
 8013d66:	d101      	bne.n	8013d6c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013d68:	2302      	movs	r3, #2
 8013d6a:	e02d      	b.n	8013dc8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	2201      	movs	r2, #1
 8013d70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2224      	movs	r2, #36	@ 0x24
 8013d78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	681a      	ldr	r2, [r3, #0]
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	f022 0201 	bic.w	r2, r2, #1
 8013d92:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	689b      	ldr	r3, [r3, #8]
 8013d9a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	683a      	ldr	r2, [r7, #0]
 8013da4:	430a      	orrs	r2, r1
 8013da6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013da8:	6878      	ldr	r0, [r7, #4]
 8013daa:	f000 f84f 	bl	8013e4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	68fa      	ldr	r2, [r7, #12]
 8013db4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	2220      	movs	r2, #32
 8013dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013dc6:	2300      	movs	r3, #0
}
 8013dc8:	4618      	mov	r0, r3
 8013dca:	3710      	adds	r7, #16
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	bd80      	pop	{r7, pc}

08013dd0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b084      	sub	sp, #16
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
 8013dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8013de0:	2b01      	cmp	r3, #1
 8013de2:	d101      	bne.n	8013de8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013de4:	2302      	movs	r3, #2
 8013de6:	e02d      	b.n	8013e44 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	2201      	movs	r2, #1
 8013dec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	2224      	movs	r2, #36	@ 0x24
 8013df4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	681a      	ldr	r2, [r3, #0]
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	f022 0201 	bic.w	r2, r2, #1
 8013e0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	689b      	ldr	r3, [r3, #8]
 8013e16:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	683a      	ldr	r2, [r7, #0]
 8013e20:	430a      	orrs	r2, r1
 8013e22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013e24:	6878      	ldr	r0, [r7, #4]
 8013e26:	f000 f811 	bl	8013e4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	68fa      	ldr	r2, [r7, #12]
 8013e30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	2220      	movs	r2, #32
 8013e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013e42:	2300      	movs	r3, #0
}
 8013e44:	4618      	mov	r0, r3
 8013e46:	3710      	adds	r7, #16
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	bd80      	pop	{r7, pc}

08013e4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013e4c:	b480      	push	{r7}
 8013e4e:	b085      	sub	sp, #20
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d108      	bne.n	8013e6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	2201      	movs	r2, #1
 8013e60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	2201      	movs	r2, #1
 8013e68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013e6c:	e031      	b.n	8013ed2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013e6e:	2310      	movs	r3, #16
 8013e70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013e72:	2310      	movs	r3, #16
 8013e74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	689b      	ldr	r3, [r3, #8]
 8013e7c:	0e5b      	lsrs	r3, r3, #25
 8013e7e:	b2db      	uxtb	r3, r3
 8013e80:	f003 0307 	and.w	r3, r3, #7
 8013e84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	689b      	ldr	r3, [r3, #8]
 8013e8c:	0f5b      	lsrs	r3, r3, #29
 8013e8e:	b2db      	uxtb	r3, r3
 8013e90:	f003 0307 	and.w	r3, r3, #7
 8013e94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013e96:	7bbb      	ldrb	r3, [r7, #14]
 8013e98:	7b3a      	ldrb	r2, [r7, #12]
 8013e9a:	4911      	ldr	r1, [pc, #68]	@ (8013ee0 <UARTEx_SetNbDataToProcess+0x94>)
 8013e9c:	5c8a      	ldrb	r2, [r1, r2]
 8013e9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013ea2:	7b3a      	ldrb	r2, [r7, #12]
 8013ea4:	490f      	ldr	r1, [pc, #60]	@ (8013ee4 <UARTEx_SetNbDataToProcess+0x98>)
 8013ea6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013ea8:	fb93 f3f2 	sdiv	r3, r3, r2
 8013eac:	b29a      	uxth	r2, r3
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013eb4:	7bfb      	ldrb	r3, [r7, #15]
 8013eb6:	7b7a      	ldrb	r2, [r7, #13]
 8013eb8:	4909      	ldr	r1, [pc, #36]	@ (8013ee0 <UARTEx_SetNbDataToProcess+0x94>)
 8013eba:	5c8a      	ldrb	r2, [r1, r2]
 8013ebc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013ec0:	7b7a      	ldrb	r2, [r7, #13]
 8013ec2:	4908      	ldr	r1, [pc, #32]	@ (8013ee4 <UARTEx_SetNbDataToProcess+0x98>)
 8013ec4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013ec6:	fb93 f3f2 	sdiv	r3, r3, r2
 8013eca:	b29a      	uxth	r2, r3
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8013ed2:	bf00      	nop
 8013ed4:	3714      	adds	r7, #20
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013edc:	4770      	bx	lr
 8013ede:	bf00      	nop
 8013ee0:	0801a4e4 	.word	0x0801a4e4
 8013ee4:	0801a4ec 	.word	0x0801a4ec

08013ee8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013ee8:	b084      	sub	sp, #16
 8013eea:	b580      	push	{r7, lr}
 8013eec:	b084      	sub	sp, #16
 8013eee:	af00      	add	r7, sp, #0
 8013ef0:	6078      	str	r0, [r7, #4]
 8013ef2:	f107 001c 	add.w	r0, r7, #28
 8013ef6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013efa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8013efe:	2b01      	cmp	r3, #1
 8013f00:	d121      	bne.n	8013f46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f06:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	68da      	ldr	r2, [r3, #12]
 8013f12:	4b2c      	ldr	r3, [pc, #176]	@ (8013fc4 <USB_CoreInit+0xdc>)
 8013f14:	4013      	ands	r3, r2
 8013f16:	687a      	ldr	r2, [r7, #4]
 8013f18:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	68db      	ldr	r3, [r3, #12]
 8013f1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013f26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013f2a:	2b01      	cmp	r3, #1
 8013f2c:	d105      	bne.n	8013f3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	68db      	ldr	r3, [r3, #12]
 8013f32:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013f3a:	6878      	ldr	r0, [r7, #4]
 8013f3c:	f001 fafa 	bl	8015534 <USB_CoreReset>
 8013f40:	4603      	mov	r3, r0
 8013f42:	73fb      	strb	r3, [r7, #15]
 8013f44:	e01b      	b.n	8013f7e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	68db      	ldr	r3, [r3, #12]
 8013f4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013f52:	6878      	ldr	r0, [r7, #4]
 8013f54:	f001 faee 	bl	8015534 <USB_CoreReset>
 8013f58:	4603      	mov	r3, r0
 8013f5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013f5c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d106      	bne.n	8013f72 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f68:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8013f70:	e005      	b.n	8013f7e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f76:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013f7e:	7fbb      	ldrb	r3, [r7, #30]
 8013f80:	2b01      	cmp	r3, #1
 8013f82:	d116      	bne.n	8013fb2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013f88:	b29a      	uxth	r2, r3
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8013f92:	4b0d      	ldr	r3, [pc, #52]	@ (8013fc8 <USB_CoreInit+0xe0>)
 8013f94:	4313      	orrs	r3, r2
 8013f96:	687a      	ldr	r2, [r7, #4]
 8013f98:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	689b      	ldr	r3, [r3, #8]
 8013f9e:	f043 0206 	orr.w	r2, r3, #6
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	689b      	ldr	r3, [r3, #8]
 8013faa:	f043 0220 	orr.w	r2, r3, #32
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	3710      	adds	r7, #16
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013fbe:	b004      	add	sp, #16
 8013fc0:	4770      	bx	lr
 8013fc2:	bf00      	nop
 8013fc4:	ffbdffbf 	.word	0xffbdffbf
 8013fc8:	03ee0000 	.word	0x03ee0000

08013fcc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013fcc:	b480      	push	{r7}
 8013fce:	b087      	sub	sp, #28
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	60f8      	str	r0, [r7, #12]
 8013fd4:	60b9      	str	r1, [r7, #8]
 8013fd6:	4613      	mov	r3, r2
 8013fd8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013fda:	79fb      	ldrb	r3, [r7, #7]
 8013fdc:	2b02      	cmp	r3, #2
 8013fde:	d165      	bne.n	80140ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013fe0:	68bb      	ldr	r3, [r7, #8]
 8013fe2:	4a41      	ldr	r2, [pc, #260]	@ (80140e8 <USB_SetTurnaroundTime+0x11c>)
 8013fe4:	4293      	cmp	r3, r2
 8013fe6:	d906      	bls.n	8013ff6 <USB_SetTurnaroundTime+0x2a>
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	4a40      	ldr	r2, [pc, #256]	@ (80140ec <USB_SetTurnaroundTime+0x120>)
 8013fec:	4293      	cmp	r3, r2
 8013fee:	d202      	bcs.n	8013ff6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013ff0:	230f      	movs	r3, #15
 8013ff2:	617b      	str	r3, [r7, #20]
 8013ff4:	e062      	b.n	80140bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	4a3c      	ldr	r2, [pc, #240]	@ (80140ec <USB_SetTurnaroundTime+0x120>)
 8013ffa:	4293      	cmp	r3, r2
 8013ffc:	d306      	bcc.n	801400c <USB_SetTurnaroundTime+0x40>
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	4a3b      	ldr	r2, [pc, #236]	@ (80140f0 <USB_SetTurnaroundTime+0x124>)
 8014002:	4293      	cmp	r3, r2
 8014004:	d202      	bcs.n	801400c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8014006:	230e      	movs	r3, #14
 8014008:	617b      	str	r3, [r7, #20]
 801400a:	e057      	b.n	80140bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801400c:	68bb      	ldr	r3, [r7, #8]
 801400e:	4a38      	ldr	r2, [pc, #224]	@ (80140f0 <USB_SetTurnaroundTime+0x124>)
 8014010:	4293      	cmp	r3, r2
 8014012:	d306      	bcc.n	8014022 <USB_SetTurnaroundTime+0x56>
 8014014:	68bb      	ldr	r3, [r7, #8]
 8014016:	4a37      	ldr	r2, [pc, #220]	@ (80140f4 <USB_SetTurnaroundTime+0x128>)
 8014018:	4293      	cmp	r3, r2
 801401a:	d202      	bcs.n	8014022 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801401c:	230d      	movs	r3, #13
 801401e:	617b      	str	r3, [r7, #20]
 8014020:	e04c      	b.n	80140bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	4a33      	ldr	r2, [pc, #204]	@ (80140f4 <USB_SetTurnaroundTime+0x128>)
 8014026:	4293      	cmp	r3, r2
 8014028:	d306      	bcc.n	8014038 <USB_SetTurnaroundTime+0x6c>
 801402a:	68bb      	ldr	r3, [r7, #8]
 801402c:	4a32      	ldr	r2, [pc, #200]	@ (80140f8 <USB_SetTurnaroundTime+0x12c>)
 801402e:	4293      	cmp	r3, r2
 8014030:	d802      	bhi.n	8014038 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8014032:	230c      	movs	r3, #12
 8014034:	617b      	str	r3, [r7, #20]
 8014036:	e041      	b.n	80140bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8014038:	68bb      	ldr	r3, [r7, #8]
 801403a:	4a2f      	ldr	r2, [pc, #188]	@ (80140f8 <USB_SetTurnaroundTime+0x12c>)
 801403c:	4293      	cmp	r3, r2
 801403e:	d906      	bls.n	801404e <USB_SetTurnaroundTime+0x82>
 8014040:	68bb      	ldr	r3, [r7, #8]
 8014042:	4a2e      	ldr	r2, [pc, #184]	@ (80140fc <USB_SetTurnaroundTime+0x130>)
 8014044:	4293      	cmp	r3, r2
 8014046:	d802      	bhi.n	801404e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8014048:	230b      	movs	r3, #11
 801404a:	617b      	str	r3, [r7, #20]
 801404c:	e036      	b.n	80140bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	4a2a      	ldr	r2, [pc, #168]	@ (80140fc <USB_SetTurnaroundTime+0x130>)
 8014052:	4293      	cmp	r3, r2
 8014054:	d906      	bls.n	8014064 <USB_SetTurnaroundTime+0x98>
 8014056:	68bb      	ldr	r3, [r7, #8]
 8014058:	4a29      	ldr	r2, [pc, #164]	@ (8014100 <USB_SetTurnaroundTime+0x134>)
 801405a:	4293      	cmp	r3, r2
 801405c:	d802      	bhi.n	8014064 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801405e:	230a      	movs	r3, #10
 8014060:	617b      	str	r3, [r7, #20]
 8014062:	e02b      	b.n	80140bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8014064:	68bb      	ldr	r3, [r7, #8]
 8014066:	4a26      	ldr	r2, [pc, #152]	@ (8014100 <USB_SetTurnaroundTime+0x134>)
 8014068:	4293      	cmp	r3, r2
 801406a:	d906      	bls.n	801407a <USB_SetTurnaroundTime+0xae>
 801406c:	68bb      	ldr	r3, [r7, #8]
 801406e:	4a25      	ldr	r2, [pc, #148]	@ (8014104 <USB_SetTurnaroundTime+0x138>)
 8014070:	4293      	cmp	r3, r2
 8014072:	d202      	bcs.n	801407a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8014074:	2309      	movs	r3, #9
 8014076:	617b      	str	r3, [r7, #20]
 8014078:	e020      	b.n	80140bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	4a21      	ldr	r2, [pc, #132]	@ (8014104 <USB_SetTurnaroundTime+0x138>)
 801407e:	4293      	cmp	r3, r2
 8014080:	d306      	bcc.n	8014090 <USB_SetTurnaroundTime+0xc4>
 8014082:	68bb      	ldr	r3, [r7, #8]
 8014084:	4a20      	ldr	r2, [pc, #128]	@ (8014108 <USB_SetTurnaroundTime+0x13c>)
 8014086:	4293      	cmp	r3, r2
 8014088:	d802      	bhi.n	8014090 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801408a:	2308      	movs	r3, #8
 801408c:	617b      	str	r3, [r7, #20]
 801408e:	e015      	b.n	80140bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8014090:	68bb      	ldr	r3, [r7, #8]
 8014092:	4a1d      	ldr	r2, [pc, #116]	@ (8014108 <USB_SetTurnaroundTime+0x13c>)
 8014094:	4293      	cmp	r3, r2
 8014096:	d906      	bls.n	80140a6 <USB_SetTurnaroundTime+0xda>
 8014098:	68bb      	ldr	r3, [r7, #8]
 801409a:	4a1c      	ldr	r2, [pc, #112]	@ (801410c <USB_SetTurnaroundTime+0x140>)
 801409c:	4293      	cmp	r3, r2
 801409e:	d202      	bcs.n	80140a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80140a0:	2307      	movs	r3, #7
 80140a2:	617b      	str	r3, [r7, #20]
 80140a4:	e00a      	b.n	80140bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80140a6:	2306      	movs	r3, #6
 80140a8:	617b      	str	r3, [r7, #20]
 80140aa:	e007      	b.n	80140bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80140ac:	79fb      	ldrb	r3, [r7, #7]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d102      	bne.n	80140b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80140b2:	2309      	movs	r3, #9
 80140b4:	617b      	str	r3, [r7, #20]
 80140b6:	e001      	b.n	80140bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80140b8:	2309      	movs	r3, #9
 80140ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	68db      	ldr	r3, [r3, #12]
 80140c0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	68da      	ldr	r2, [r3, #12]
 80140cc:	697b      	ldr	r3, [r7, #20]
 80140ce:	029b      	lsls	r3, r3, #10
 80140d0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80140d4:	431a      	orrs	r2, r3
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80140da:	2300      	movs	r3, #0
}
 80140dc:	4618      	mov	r0, r3
 80140de:	371c      	adds	r7, #28
 80140e0:	46bd      	mov	sp, r7
 80140e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e6:	4770      	bx	lr
 80140e8:	00d8acbf 	.word	0x00d8acbf
 80140ec:	00e4e1c0 	.word	0x00e4e1c0
 80140f0:	00f42400 	.word	0x00f42400
 80140f4:	01067380 	.word	0x01067380
 80140f8:	011a499f 	.word	0x011a499f
 80140fc:	01312cff 	.word	0x01312cff
 8014100:	014ca43f 	.word	0x014ca43f
 8014104:	016e3600 	.word	0x016e3600
 8014108:	01a6ab1f 	.word	0x01a6ab1f
 801410c:	01e84800 	.word	0x01e84800

08014110 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014110:	b480      	push	{r7}
 8014112:	b083      	sub	sp, #12
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	689b      	ldr	r3, [r3, #8]
 801411c:	f043 0201 	orr.w	r2, r3, #1
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014124:	2300      	movs	r3, #0
}
 8014126:	4618      	mov	r0, r3
 8014128:	370c      	adds	r7, #12
 801412a:	46bd      	mov	sp, r7
 801412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014130:	4770      	bx	lr

08014132 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014132:	b480      	push	{r7}
 8014134:	b083      	sub	sp, #12
 8014136:	af00      	add	r7, sp, #0
 8014138:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	689b      	ldr	r3, [r3, #8]
 801413e:	f023 0201 	bic.w	r2, r3, #1
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014146:	2300      	movs	r3, #0
}
 8014148:	4618      	mov	r0, r3
 801414a:	370c      	adds	r7, #12
 801414c:	46bd      	mov	sp, r7
 801414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014152:	4770      	bx	lr

08014154 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8014154:	b580      	push	{r7, lr}
 8014156:	b084      	sub	sp, #16
 8014158:	af00      	add	r7, sp, #0
 801415a:	6078      	str	r0, [r7, #4]
 801415c:	460b      	mov	r3, r1
 801415e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014160:	2300      	movs	r3, #0
 8014162:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	68db      	ldr	r3, [r3, #12]
 8014168:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014170:	78fb      	ldrb	r3, [r7, #3]
 8014172:	2b01      	cmp	r3, #1
 8014174:	d115      	bne.n	80141a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	68db      	ldr	r3, [r3, #12]
 801417a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014182:	200a      	movs	r0, #10
 8014184:	f7ef f92e 	bl	80033e4 <HAL_Delay>
      ms += 10U;
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	330a      	adds	r3, #10
 801418c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801418e:	6878      	ldr	r0, [r7, #4]
 8014190:	f001 f93f 	bl	8015412 <USB_GetMode>
 8014194:	4603      	mov	r3, r0
 8014196:	2b01      	cmp	r3, #1
 8014198:	d01e      	beq.n	80141d8 <USB_SetCurrentMode+0x84>
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	2bc7      	cmp	r3, #199	@ 0xc7
 801419e:	d9f0      	bls.n	8014182 <USB_SetCurrentMode+0x2e>
 80141a0:	e01a      	b.n	80141d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80141a2:	78fb      	ldrb	r3, [r7, #3]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d115      	bne.n	80141d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	68db      	ldr	r3, [r3, #12]
 80141ac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80141b4:	200a      	movs	r0, #10
 80141b6:	f7ef f915 	bl	80033e4 <HAL_Delay>
      ms += 10U;
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	330a      	adds	r3, #10
 80141be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80141c0:	6878      	ldr	r0, [r7, #4]
 80141c2:	f001 f926 	bl	8015412 <USB_GetMode>
 80141c6:	4603      	mov	r3, r0
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d005      	beq.n	80141d8 <USB_SetCurrentMode+0x84>
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	2bc7      	cmp	r3, #199	@ 0xc7
 80141d0:	d9f0      	bls.n	80141b4 <USB_SetCurrentMode+0x60>
 80141d2:	e001      	b.n	80141d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80141d4:	2301      	movs	r3, #1
 80141d6:	e005      	b.n	80141e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	2bc8      	cmp	r3, #200	@ 0xc8
 80141dc:	d101      	bne.n	80141e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80141de:	2301      	movs	r3, #1
 80141e0:	e000      	b.n	80141e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80141e2:	2300      	movs	r3, #0
}
 80141e4:	4618      	mov	r0, r3
 80141e6:	3710      	adds	r7, #16
 80141e8:	46bd      	mov	sp, r7
 80141ea:	bd80      	pop	{r7, pc}

080141ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80141ec:	b084      	sub	sp, #16
 80141ee:	b580      	push	{r7, lr}
 80141f0:	b086      	sub	sp, #24
 80141f2:	af00      	add	r7, sp, #0
 80141f4:	6078      	str	r0, [r7, #4]
 80141f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80141fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80141fe:	2300      	movs	r3, #0
 8014200:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8014206:	2300      	movs	r3, #0
 8014208:	613b      	str	r3, [r7, #16]
 801420a:	e009      	b.n	8014220 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801420c:	687a      	ldr	r2, [r7, #4]
 801420e:	693b      	ldr	r3, [r7, #16]
 8014210:	3340      	adds	r3, #64	@ 0x40
 8014212:	009b      	lsls	r3, r3, #2
 8014214:	4413      	add	r3, r2
 8014216:	2200      	movs	r2, #0
 8014218:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801421a:	693b      	ldr	r3, [r7, #16]
 801421c:	3301      	adds	r3, #1
 801421e:	613b      	str	r3, [r7, #16]
 8014220:	693b      	ldr	r3, [r7, #16]
 8014222:	2b0e      	cmp	r3, #14
 8014224:	d9f2      	bls.n	801420c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8014226:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801422a:	2b00      	cmp	r3, #0
 801422c:	d11c      	bne.n	8014268 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014234:	685b      	ldr	r3, [r3, #4]
 8014236:	68fa      	ldr	r2, [r7, #12]
 8014238:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801423c:	f043 0302 	orr.w	r3, r3, #2
 8014240:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014246:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	601a      	str	r2, [r3, #0]
 8014266:	e005      	b.n	8014274 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801426c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801427a:	461a      	mov	r2, r3
 801427c:	2300      	movs	r3, #0
 801427e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014280:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8014284:	2b01      	cmp	r3, #1
 8014286:	d10d      	bne.n	80142a4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8014288:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801428c:	2b00      	cmp	r3, #0
 801428e:	d104      	bne.n	801429a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8014290:	2100      	movs	r1, #0
 8014292:	6878      	ldr	r0, [r7, #4]
 8014294:	f000 f968 	bl	8014568 <USB_SetDevSpeed>
 8014298:	e008      	b.n	80142ac <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801429a:	2101      	movs	r1, #1
 801429c:	6878      	ldr	r0, [r7, #4]
 801429e:	f000 f963 	bl	8014568 <USB_SetDevSpeed>
 80142a2:	e003      	b.n	80142ac <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80142a4:	2103      	movs	r1, #3
 80142a6:	6878      	ldr	r0, [r7, #4]
 80142a8:	f000 f95e 	bl	8014568 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80142ac:	2110      	movs	r1, #16
 80142ae:	6878      	ldr	r0, [r7, #4]
 80142b0:	f000 f8fa 	bl	80144a8 <USB_FlushTxFifo>
 80142b4:	4603      	mov	r3, r0
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d001      	beq.n	80142be <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80142ba:	2301      	movs	r3, #1
 80142bc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80142be:	6878      	ldr	r0, [r7, #4]
 80142c0:	f000 f924 	bl	801450c <USB_FlushRxFifo>
 80142c4:	4603      	mov	r3, r0
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d001      	beq.n	80142ce <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80142ca:	2301      	movs	r3, #1
 80142cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80142d4:	461a      	mov	r2, r3
 80142d6:	2300      	movs	r3, #0
 80142d8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80142e0:	461a      	mov	r2, r3
 80142e2:	2300      	movs	r3, #0
 80142e4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80142ec:	461a      	mov	r2, r3
 80142ee:	2300      	movs	r3, #0
 80142f0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80142f2:	2300      	movs	r3, #0
 80142f4:	613b      	str	r3, [r7, #16]
 80142f6:	e043      	b.n	8014380 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80142f8:	693b      	ldr	r3, [r7, #16]
 80142fa:	015a      	lsls	r2, r3, #5
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	4413      	add	r3, r2
 8014300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801430a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801430e:	d118      	bne.n	8014342 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8014310:	693b      	ldr	r3, [r7, #16]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d10a      	bne.n	801432c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014316:	693b      	ldr	r3, [r7, #16]
 8014318:	015a      	lsls	r2, r3, #5
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	4413      	add	r3, r2
 801431e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014322:	461a      	mov	r2, r3
 8014324:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014328:	6013      	str	r3, [r2, #0]
 801432a:	e013      	b.n	8014354 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801432c:	693b      	ldr	r3, [r7, #16]
 801432e:	015a      	lsls	r2, r3, #5
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	4413      	add	r3, r2
 8014334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014338:	461a      	mov	r2, r3
 801433a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801433e:	6013      	str	r3, [r2, #0]
 8014340:	e008      	b.n	8014354 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8014342:	693b      	ldr	r3, [r7, #16]
 8014344:	015a      	lsls	r2, r3, #5
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	4413      	add	r3, r2
 801434a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801434e:	461a      	mov	r2, r3
 8014350:	2300      	movs	r3, #0
 8014352:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8014354:	693b      	ldr	r3, [r7, #16]
 8014356:	015a      	lsls	r2, r3, #5
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	4413      	add	r3, r2
 801435c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014360:	461a      	mov	r2, r3
 8014362:	2300      	movs	r3, #0
 8014364:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8014366:	693b      	ldr	r3, [r7, #16]
 8014368:	015a      	lsls	r2, r3, #5
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	4413      	add	r3, r2
 801436e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014372:	461a      	mov	r2, r3
 8014374:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014378:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801437a:	693b      	ldr	r3, [r7, #16]
 801437c:	3301      	adds	r3, #1
 801437e:	613b      	str	r3, [r7, #16]
 8014380:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014384:	461a      	mov	r2, r3
 8014386:	693b      	ldr	r3, [r7, #16]
 8014388:	4293      	cmp	r3, r2
 801438a:	d3b5      	bcc.n	80142f8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801438c:	2300      	movs	r3, #0
 801438e:	613b      	str	r3, [r7, #16]
 8014390:	e043      	b.n	801441a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014392:	693b      	ldr	r3, [r7, #16]
 8014394:	015a      	lsls	r2, r3, #5
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	4413      	add	r3, r2
 801439a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80143a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80143a8:	d118      	bne.n	80143dc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80143aa:	693b      	ldr	r3, [r7, #16]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d10a      	bne.n	80143c6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80143b0:	693b      	ldr	r3, [r7, #16]
 80143b2:	015a      	lsls	r2, r3, #5
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	4413      	add	r3, r2
 80143b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80143bc:	461a      	mov	r2, r3
 80143be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80143c2:	6013      	str	r3, [r2, #0]
 80143c4:	e013      	b.n	80143ee <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80143c6:	693b      	ldr	r3, [r7, #16]
 80143c8:	015a      	lsls	r2, r3, #5
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	4413      	add	r3, r2
 80143ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80143d2:	461a      	mov	r2, r3
 80143d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80143d8:	6013      	str	r3, [r2, #0]
 80143da:	e008      	b.n	80143ee <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80143dc:	693b      	ldr	r3, [r7, #16]
 80143de:	015a      	lsls	r2, r3, #5
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	4413      	add	r3, r2
 80143e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80143e8:	461a      	mov	r2, r3
 80143ea:	2300      	movs	r3, #0
 80143ec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80143ee:	693b      	ldr	r3, [r7, #16]
 80143f0:	015a      	lsls	r2, r3, #5
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	4413      	add	r3, r2
 80143f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80143fa:	461a      	mov	r2, r3
 80143fc:	2300      	movs	r3, #0
 80143fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014400:	693b      	ldr	r3, [r7, #16]
 8014402:	015a      	lsls	r2, r3, #5
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	4413      	add	r3, r2
 8014408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801440c:	461a      	mov	r2, r3
 801440e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014412:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014414:	693b      	ldr	r3, [r7, #16]
 8014416:	3301      	adds	r3, #1
 8014418:	613b      	str	r3, [r7, #16]
 801441a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801441e:	461a      	mov	r2, r3
 8014420:	693b      	ldr	r3, [r7, #16]
 8014422:	4293      	cmp	r3, r2
 8014424:	d3b5      	bcc.n	8014392 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801442c:	691b      	ldr	r3, [r3, #16]
 801442e:	68fa      	ldr	r2, [r7, #12]
 8014430:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014438:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	2200      	movs	r2, #0
 801443e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8014446:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8014448:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801444c:	2b00      	cmp	r3, #0
 801444e:	d105      	bne.n	801445c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	699b      	ldr	r3, [r3, #24]
 8014454:	f043 0210 	orr.w	r2, r3, #16
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	699a      	ldr	r2, [r3, #24]
 8014460:	4b0f      	ldr	r3, [pc, #60]	@ (80144a0 <USB_DevInit+0x2b4>)
 8014462:	4313      	orrs	r3, r2
 8014464:	687a      	ldr	r2, [r7, #4]
 8014466:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8014468:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801446c:	2b00      	cmp	r3, #0
 801446e:	d005      	beq.n	801447c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	699b      	ldr	r3, [r3, #24]
 8014474:	f043 0208 	orr.w	r2, r3, #8
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801447c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014480:	2b01      	cmp	r3, #1
 8014482:	d105      	bne.n	8014490 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	699a      	ldr	r2, [r3, #24]
 8014488:	4b06      	ldr	r3, [pc, #24]	@ (80144a4 <USB_DevInit+0x2b8>)
 801448a:	4313      	orrs	r3, r2
 801448c:	687a      	ldr	r2, [r7, #4]
 801448e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8014490:	7dfb      	ldrb	r3, [r7, #23]
}
 8014492:	4618      	mov	r0, r3
 8014494:	3718      	adds	r7, #24
 8014496:	46bd      	mov	sp, r7
 8014498:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801449c:	b004      	add	sp, #16
 801449e:	4770      	bx	lr
 80144a0:	803c3800 	.word	0x803c3800
 80144a4:	40000004 	.word	0x40000004

080144a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80144a8:	b480      	push	{r7}
 80144aa:	b085      	sub	sp, #20
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]
 80144b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80144b2:	2300      	movs	r3, #0
 80144b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	3301      	adds	r3, #1
 80144ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80144c2:	d901      	bls.n	80144c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80144c4:	2303      	movs	r3, #3
 80144c6:	e01b      	b.n	8014500 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	691b      	ldr	r3, [r3, #16]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	daf2      	bge.n	80144b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80144d0:	2300      	movs	r3, #0
 80144d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80144d4:	683b      	ldr	r3, [r7, #0]
 80144d6:	019b      	lsls	r3, r3, #6
 80144d8:	f043 0220 	orr.w	r2, r3, #32
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	3301      	adds	r3, #1
 80144e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80144ec:	d901      	bls.n	80144f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80144ee:	2303      	movs	r3, #3
 80144f0:	e006      	b.n	8014500 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	691b      	ldr	r3, [r3, #16]
 80144f6:	f003 0320 	and.w	r3, r3, #32
 80144fa:	2b20      	cmp	r3, #32
 80144fc:	d0f0      	beq.n	80144e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80144fe:	2300      	movs	r3, #0
}
 8014500:	4618      	mov	r0, r3
 8014502:	3714      	adds	r7, #20
 8014504:	46bd      	mov	sp, r7
 8014506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450a:	4770      	bx	lr

0801450c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801450c:	b480      	push	{r7}
 801450e:	b085      	sub	sp, #20
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014514:	2300      	movs	r3, #0
 8014516:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	3301      	adds	r3, #1
 801451c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014524:	d901      	bls.n	801452a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8014526:	2303      	movs	r3, #3
 8014528:	e018      	b.n	801455c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	691b      	ldr	r3, [r3, #16]
 801452e:	2b00      	cmp	r3, #0
 8014530:	daf2      	bge.n	8014518 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8014532:	2300      	movs	r3, #0
 8014534:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	2210      	movs	r2, #16
 801453a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	3301      	adds	r3, #1
 8014540:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014548:	d901      	bls.n	801454e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801454a:	2303      	movs	r3, #3
 801454c:	e006      	b.n	801455c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	691b      	ldr	r3, [r3, #16]
 8014552:	f003 0310 	and.w	r3, r3, #16
 8014556:	2b10      	cmp	r3, #16
 8014558:	d0f0      	beq.n	801453c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801455a:	2300      	movs	r3, #0
}
 801455c:	4618      	mov	r0, r3
 801455e:	3714      	adds	r7, #20
 8014560:	46bd      	mov	sp, r7
 8014562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014566:	4770      	bx	lr

08014568 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8014568:	b480      	push	{r7}
 801456a:	b085      	sub	sp, #20
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]
 8014570:	460b      	mov	r3, r1
 8014572:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801457e:	681a      	ldr	r2, [r3, #0]
 8014580:	78fb      	ldrb	r3, [r7, #3]
 8014582:	68f9      	ldr	r1, [r7, #12]
 8014584:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014588:	4313      	orrs	r3, r2
 801458a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801458c:	2300      	movs	r3, #0
}
 801458e:	4618      	mov	r0, r3
 8014590:	3714      	adds	r7, #20
 8014592:	46bd      	mov	sp, r7
 8014594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014598:	4770      	bx	lr

0801459a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 801459a:	b480      	push	{r7}
 801459c:	b087      	sub	sp, #28
 801459e:	af00      	add	r7, sp, #0
 80145a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80145a6:	693b      	ldr	r3, [r7, #16]
 80145a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80145ac:	689b      	ldr	r3, [r3, #8]
 80145ae:	f003 0306 	and.w	r3, r3, #6
 80145b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d102      	bne.n	80145c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80145ba:	2300      	movs	r3, #0
 80145bc:	75fb      	strb	r3, [r7, #23]
 80145be:	e00a      	b.n	80145d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	2b02      	cmp	r3, #2
 80145c4:	d002      	beq.n	80145cc <USB_GetDevSpeed+0x32>
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	2b06      	cmp	r3, #6
 80145ca:	d102      	bne.n	80145d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80145cc:	2302      	movs	r3, #2
 80145ce:	75fb      	strb	r3, [r7, #23]
 80145d0:	e001      	b.n	80145d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80145d2:	230f      	movs	r3, #15
 80145d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80145d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80145d8:	4618      	mov	r0, r3
 80145da:	371c      	adds	r7, #28
 80145dc:	46bd      	mov	sp, r7
 80145de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e2:	4770      	bx	lr

080145e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80145e4:	b480      	push	{r7}
 80145e6:	b085      	sub	sp, #20
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
 80145ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	781b      	ldrb	r3, [r3, #0]
 80145f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80145f8:	683b      	ldr	r3, [r7, #0]
 80145fa:	785b      	ldrb	r3, [r3, #1]
 80145fc:	2b01      	cmp	r3, #1
 80145fe:	d139      	bne.n	8014674 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014606:	69da      	ldr	r2, [r3, #28]
 8014608:	683b      	ldr	r3, [r7, #0]
 801460a:	781b      	ldrb	r3, [r3, #0]
 801460c:	f003 030f 	and.w	r3, r3, #15
 8014610:	2101      	movs	r1, #1
 8014612:	fa01 f303 	lsl.w	r3, r1, r3
 8014616:	b29b      	uxth	r3, r3
 8014618:	68f9      	ldr	r1, [r7, #12]
 801461a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801461e:	4313      	orrs	r3, r2
 8014620:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014622:	68bb      	ldr	r3, [r7, #8]
 8014624:	015a      	lsls	r2, r3, #5
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	4413      	add	r3, r2
 801462a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014634:	2b00      	cmp	r3, #0
 8014636:	d153      	bne.n	80146e0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014638:	68bb      	ldr	r3, [r7, #8]
 801463a:	015a      	lsls	r2, r3, #5
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	4413      	add	r3, r2
 8014640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014644:	681a      	ldr	r2, [r3, #0]
 8014646:	683b      	ldr	r3, [r7, #0]
 8014648:	689b      	ldr	r3, [r3, #8]
 801464a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801464e:	683b      	ldr	r3, [r7, #0]
 8014650:	791b      	ldrb	r3, [r3, #4]
 8014652:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014654:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014656:	68bb      	ldr	r3, [r7, #8]
 8014658:	059b      	lsls	r3, r3, #22
 801465a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801465c:	431a      	orrs	r2, r3
 801465e:	68bb      	ldr	r3, [r7, #8]
 8014660:	0159      	lsls	r1, r3, #5
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	440b      	add	r3, r1
 8014666:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801466a:	4619      	mov	r1, r3
 801466c:	4b20      	ldr	r3, [pc, #128]	@ (80146f0 <USB_ActivateEndpoint+0x10c>)
 801466e:	4313      	orrs	r3, r2
 8014670:	600b      	str	r3, [r1, #0]
 8014672:	e035      	b.n	80146e0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801467a:	69da      	ldr	r2, [r3, #28]
 801467c:	683b      	ldr	r3, [r7, #0]
 801467e:	781b      	ldrb	r3, [r3, #0]
 8014680:	f003 030f 	and.w	r3, r3, #15
 8014684:	2101      	movs	r1, #1
 8014686:	fa01 f303 	lsl.w	r3, r1, r3
 801468a:	041b      	lsls	r3, r3, #16
 801468c:	68f9      	ldr	r1, [r7, #12]
 801468e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014692:	4313      	orrs	r3, r2
 8014694:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8014696:	68bb      	ldr	r3, [r7, #8]
 8014698:	015a      	lsls	r2, r3, #5
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	4413      	add	r3, r2
 801469e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d119      	bne.n	80146e0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	015a      	lsls	r2, r3, #5
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	4413      	add	r3, r2
 80146b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80146b8:	681a      	ldr	r2, [r3, #0]
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	689b      	ldr	r3, [r3, #8]
 80146be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80146c2:	683b      	ldr	r3, [r7, #0]
 80146c4:	791b      	ldrb	r3, [r3, #4]
 80146c6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80146c8:	430b      	orrs	r3, r1
 80146ca:	431a      	orrs	r2, r3
 80146cc:	68bb      	ldr	r3, [r7, #8]
 80146ce:	0159      	lsls	r1, r3, #5
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	440b      	add	r3, r1
 80146d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80146d8:	4619      	mov	r1, r3
 80146da:	4b05      	ldr	r3, [pc, #20]	@ (80146f0 <USB_ActivateEndpoint+0x10c>)
 80146dc:	4313      	orrs	r3, r2
 80146de:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80146e0:	2300      	movs	r3, #0
}
 80146e2:	4618      	mov	r0, r3
 80146e4:	3714      	adds	r7, #20
 80146e6:	46bd      	mov	sp, r7
 80146e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ec:	4770      	bx	lr
 80146ee:	bf00      	nop
 80146f0:	10008000 	.word	0x10008000

080146f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80146f4:	b480      	push	{r7}
 80146f6:	b085      	sub	sp, #20
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
 80146fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014702:	683b      	ldr	r3, [r7, #0]
 8014704:	781b      	ldrb	r3, [r3, #0]
 8014706:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8014708:	683b      	ldr	r3, [r7, #0]
 801470a:	785b      	ldrb	r3, [r3, #1]
 801470c:	2b01      	cmp	r3, #1
 801470e:	d161      	bne.n	80147d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014710:	68bb      	ldr	r3, [r7, #8]
 8014712:	015a      	lsls	r2, r3, #5
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	4413      	add	r3, r2
 8014718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014722:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014726:	d11f      	bne.n	8014768 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014728:	68bb      	ldr	r3, [r7, #8]
 801472a:	015a      	lsls	r2, r3, #5
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	4413      	add	r3, r2
 8014730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	68ba      	ldr	r2, [r7, #8]
 8014738:	0151      	lsls	r1, r2, #5
 801473a:	68fa      	ldr	r2, [r7, #12]
 801473c:	440a      	add	r2, r1
 801473e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014742:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014746:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8014748:	68bb      	ldr	r3, [r7, #8]
 801474a:	015a      	lsls	r2, r3, #5
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	4413      	add	r3, r2
 8014750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	68ba      	ldr	r2, [r7, #8]
 8014758:	0151      	lsls	r1, r2, #5
 801475a:	68fa      	ldr	r2, [r7, #12]
 801475c:	440a      	add	r2, r1
 801475e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014762:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014766:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801476e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014770:	683b      	ldr	r3, [r7, #0]
 8014772:	781b      	ldrb	r3, [r3, #0]
 8014774:	f003 030f 	and.w	r3, r3, #15
 8014778:	2101      	movs	r1, #1
 801477a:	fa01 f303 	lsl.w	r3, r1, r3
 801477e:	b29b      	uxth	r3, r3
 8014780:	43db      	mvns	r3, r3
 8014782:	68f9      	ldr	r1, [r7, #12]
 8014784:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014788:	4013      	ands	r3, r2
 801478a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014792:	69da      	ldr	r2, [r3, #28]
 8014794:	683b      	ldr	r3, [r7, #0]
 8014796:	781b      	ldrb	r3, [r3, #0]
 8014798:	f003 030f 	and.w	r3, r3, #15
 801479c:	2101      	movs	r1, #1
 801479e:	fa01 f303 	lsl.w	r3, r1, r3
 80147a2:	b29b      	uxth	r3, r3
 80147a4:	43db      	mvns	r3, r3
 80147a6:	68f9      	ldr	r1, [r7, #12]
 80147a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80147ac:	4013      	ands	r3, r2
 80147ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80147b0:	68bb      	ldr	r3, [r7, #8]
 80147b2:	015a      	lsls	r2, r3, #5
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	4413      	add	r3, r2
 80147b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147bc:	681a      	ldr	r2, [r3, #0]
 80147be:	68bb      	ldr	r3, [r7, #8]
 80147c0:	0159      	lsls	r1, r3, #5
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	440b      	add	r3, r1
 80147c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80147ca:	4619      	mov	r1, r3
 80147cc:	4b35      	ldr	r3, [pc, #212]	@ (80148a4 <USB_DeactivateEndpoint+0x1b0>)
 80147ce:	4013      	ands	r3, r2
 80147d0:	600b      	str	r3, [r1, #0]
 80147d2:	e060      	b.n	8014896 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80147d4:	68bb      	ldr	r3, [r7, #8]
 80147d6:	015a      	lsls	r2, r3, #5
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	4413      	add	r3, r2
 80147dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80147e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80147ea:	d11f      	bne.n	801482c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80147ec:	68bb      	ldr	r3, [r7, #8]
 80147ee:	015a      	lsls	r2, r3, #5
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	4413      	add	r3, r2
 80147f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	68ba      	ldr	r2, [r7, #8]
 80147fc:	0151      	lsls	r1, r2, #5
 80147fe:	68fa      	ldr	r2, [r7, #12]
 8014800:	440a      	add	r2, r1
 8014802:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014806:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801480a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801480c:	68bb      	ldr	r3, [r7, #8]
 801480e:	015a      	lsls	r2, r3, #5
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	4413      	add	r3, r2
 8014814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	68ba      	ldr	r2, [r7, #8]
 801481c:	0151      	lsls	r1, r2, #5
 801481e:	68fa      	ldr	r2, [r7, #12]
 8014820:	440a      	add	r2, r1
 8014822:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014826:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801482a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014832:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	781b      	ldrb	r3, [r3, #0]
 8014838:	f003 030f 	and.w	r3, r3, #15
 801483c:	2101      	movs	r1, #1
 801483e:	fa01 f303 	lsl.w	r3, r1, r3
 8014842:	041b      	lsls	r3, r3, #16
 8014844:	43db      	mvns	r3, r3
 8014846:	68f9      	ldr	r1, [r7, #12]
 8014848:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801484c:	4013      	ands	r3, r2
 801484e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014856:	69da      	ldr	r2, [r3, #28]
 8014858:	683b      	ldr	r3, [r7, #0]
 801485a:	781b      	ldrb	r3, [r3, #0]
 801485c:	f003 030f 	and.w	r3, r3, #15
 8014860:	2101      	movs	r1, #1
 8014862:	fa01 f303 	lsl.w	r3, r1, r3
 8014866:	041b      	lsls	r3, r3, #16
 8014868:	43db      	mvns	r3, r3
 801486a:	68f9      	ldr	r1, [r7, #12]
 801486c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014870:	4013      	ands	r3, r2
 8014872:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014874:	68bb      	ldr	r3, [r7, #8]
 8014876:	015a      	lsls	r2, r3, #5
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	4413      	add	r3, r2
 801487c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014880:	681a      	ldr	r2, [r3, #0]
 8014882:	68bb      	ldr	r3, [r7, #8]
 8014884:	0159      	lsls	r1, r3, #5
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	440b      	add	r3, r1
 801488a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801488e:	4619      	mov	r1, r3
 8014890:	4b05      	ldr	r3, [pc, #20]	@ (80148a8 <USB_DeactivateEndpoint+0x1b4>)
 8014892:	4013      	ands	r3, r2
 8014894:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8014896:	2300      	movs	r3, #0
}
 8014898:	4618      	mov	r0, r3
 801489a:	3714      	adds	r7, #20
 801489c:	46bd      	mov	sp, r7
 801489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a2:	4770      	bx	lr
 80148a4:	ec337800 	.word	0xec337800
 80148a8:	eff37800 	.word	0xeff37800

080148ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b08a      	sub	sp, #40	@ 0x28
 80148b0:	af02      	add	r7, sp, #8
 80148b2:	60f8      	str	r0, [r7, #12]
 80148b4:	60b9      	str	r1, [r7, #8]
 80148b6:	4613      	mov	r3, r2
 80148b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	781b      	ldrb	r3, [r3, #0]
 80148c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	785b      	ldrb	r3, [r3, #1]
 80148c8:	2b01      	cmp	r3, #1
 80148ca:	f040 8185 	bne.w	8014bd8 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80148ce:	68bb      	ldr	r3, [r7, #8]
 80148d0:	691b      	ldr	r3, [r3, #16]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d132      	bne.n	801493c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80148d6:	69bb      	ldr	r3, [r7, #24]
 80148d8:	015a      	lsls	r2, r3, #5
 80148da:	69fb      	ldr	r3, [r7, #28]
 80148dc:	4413      	add	r3, r2
 80148de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80148e2:	691a      	ldr	r2, [r3, #16]
 80148e4:	69bb      	ldr	r3, [r7, #24]
 80148e6:	0159      	lsls	r1, r3, #5
 80148e8:	69fb      	ldr	r3, [r7, #28]
 80148ea:	440b      	add	r3, r1
 80148ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80148f0:	4619      	mov	r1, r3
 80148f2:	4ba7      	ldr	r3, [pc, #668]	@ (8014b90 <USB_EPStartXfer+0x2e4>)
 80148f4:	4013      	ands	r3, r2
 80148f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80148f8:	69bb      	ldr	r3, [r7, #24]
 80148fa:	015a      	lsls	r2, r3, #5
 80148fc:	69fb      	ldr	r3, [r7, #28]
 80148fe:	4413      	add	r3, r2
 8014900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014904:	691b      	ldr	r3, [r3, #16]
 8014906:	69ba      	ldr	r2, [r7, #24]
 8014908:	0151      	lsls	r1, r2, #5
 801490a:	69fa      	ldr	r2, [r7, #28]
 801490c:	440a      	add	r2, r1
 801490e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014912:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014916:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014918:	69bb      	ldr	r3, [r7, #24]
 801491a:	015a      	lsls	r2, r3, #5
 801491c:	69fb      	ldr	r3, [r7, #28]
 801491e:	4413      	add	r3, r2
 8014920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014924:	691a      	ldr	r2, [r3, #16]
 8014926:	69bb      	ldr	r3, [r7, #24]
 8014928:	0159      	lsls	r1, r3, #5
 801492a:	69fb      	ldr	r3, [r7, #28]
 801492c:	440b      	add	r3, r1
 801492e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014932:	4619      	mov	r1, r3
 8014934:	4b97      	ldr	r3, [pc, #604]	@ (8014b94 <USB_EPStartXfer+0x2e8>)
 8014936:	4013      	ands	r3, r2
 8014938:	610b      	str	r3, [r1, #16]
 801493a:	e097      	b.n	8014a6c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801493c:	69bb      	ldr	r3, [r7, #24]
 801493e:	015a      	lsls	r2, r3, #5
 8014940:	69fb      	ldr	r3, [r7, #28]
 8014942:	4413      	add	r3, r2
 8014944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014948:	691a      	ldr	r2, [r3, #16]
 801494a:	69bb      	ldr	r3, [r7, #24]
 801494c:	0159      	lsls	r1, r3, #5
 801494e:	69fb      	ldr	r3, [r7, #28]
 8014950:	440b      	add	r3, r1
 8014952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014956:	4619      	mov	r1, r3
 8014958:	4b8e      	ldr	r3, [pc, #568]	@ (8014b94 <USB_EPStartXfer+0x2e8>)
 801495a:	4013      	ands	r3, r2
 801495c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801495e:	69bb      	ldr	r3, [r7, #24]
 8014960:	015a      	lsls	r2, r3, #5
 8014962:	69fb      	ldr	r3, [r7, #28]
 8014964:	4413      	add	r3, r2
 8014966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801496a:	691a      	ldr	r2, [r3, #16]
 801496c:	69bb      	ldr	r3, [r7, #24]
 801496e:	0159      	lsls	r1, r3, #5
 8014970:	69fb      	ldr	r3, [r7, #28]
 8014972:	440b      	add	r3, r1
 8014974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014978:	4619      	mov	r1, r3
 801497a:	4b85      	ldr	r3, [pc, #532]	@ (8014b90 <USB_EPStartXfer+0x2e4>)
 801497c:	4013      	ands	r3, r2
 801497e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8014980:	69bb      	ldr	r3, [r7, #24]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d11a      	bne.n	80149bc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8014986:	68bb      	ldr	r3, [r7, #8]
 8014988:	691a      	ldr	r2, [r3, #16]
 801498a:	68bb      	ldr	r3, [r7, #8]
 801498c:	689b      	ldr	r3, [r3, #8]
 801498e:	429a      	cmp	r2, r3
 8014990:	d903      	bls.n	801499a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8014992:	68bb      	ldr	r3, [r7, #8]
 8014994:	689a      	ldr	r2, [r3, #8]
 8014996:	68bb      	ldr	r3, [r7, #8]
 8014998:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801499a:	69bb      	ldr	r3, [r7, #24]
 801499c:	015a      	lsls	r2, r3, #5
 801499e:	69fb      	ldr	r3, [r7, #28]
 80149a0:	4413      	add	r3, r2
 80149a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80149a6:	691b      	ldr	r3, [r3, #16]
 80149a8:	69ba      	ldr	r2, [r7, #24]
 80149aa:	0151      	lsls	r1, r2, #5
 80149ac:	69fa      	ldr	r2, [r7, #28]
 80149ae:	440a      	add	r2, r1
 80149b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80149b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80149b8:	6113      	str	r3, [r2, #16]
 80149ba:	e044      	b.n	8014a46 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80149bc:	68bb      	ldr	r3, [r7, #8]
 80149be:	691a      	ldr	r2, [r3, #16]
 80149c0:	68bb      	ldr	r3, [r7, #8]
 80149c2:	689b      	ldr	r3, [r3, #8]
 80149c4:	4413      	add	r3, r2
 80149c6:	1e5a      	subs	r2, r3, #1
 80149c8:	68bb      	ldr	r3, [r7, #8]
 80149ca:	689b      	ldr	r3, [r3, #8]
 80149cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80149d0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80149d2:	69bb      	ldr	r3, [r7, #24]
 80149d4:	015a      	lsls	r2, r3, #5
 80149d6:	69fb      	ldr	r3, [r7, #28]
 80149d8:	4413      	add	r3, r2
 80149da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80149de:	691a      	ldr	r2, [r3, #16]
 80149e0:	8afb      	ldrh	r3, [r7, #22]
 80149e2:	04d9      	lsls	r1, r3, #19
 80149e4:	4b6c      	ldr	r3, [pc, #432]	@ (8014b98 <USB_EPStartXfer+0x2ec>)
 80149e6:	400b      	ands	r3, r1
 80149e8:	69b9      	ldr	r1, [r7, #24]
 80149ea:	0148      	lsls	r0, r1, #5
 80149ec:	69f9      	ldr	r1, [r7, #28]
 80149ee:	4401      	add	r1, r0
 80149f0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80149f4:	4313      	orrs	r3, r2
 80149f6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80149f8:	68bb      	ldr	r3, [r7, #8]
 80149fa:	791b      	ldrb	r3, [r3, #4]
 80149fc:	2b01      	cmp	r3, #1
 80149fe:	d122      	bne.n	8014a46 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014a00:	69bb      	ldr	r3, [r7, #24]
 8014a02:	015a      	lsls	r2, r3, #5
 8014a04:	69fb      	ldr	r3, [r7, #28]
 8014a06:	4413      	add	r3, r2
 8014a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a0c:	691b      	ldr	r3, [r3, #16]
 8014a0e:	69ba      	ldr	r2, [r7, #24]
 8014a10:	0151      	lsls	r1, r2, #5
 8014a12:	69fa      	ldr	r2, [r7, #28]
 8014a14:	440a      	add	r2, r1
 8014a16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014a1a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8014a1e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8014a20:	69bb      	ldr	r3, [r7, #24]
 8014a22:	015a      	lsls	r2, r3, #5
 8014a24:	69fb      	ldr	r3, [r7, #28]
 8014a26:	4413      	add	r3, r2
 8014a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a2c:	691a      	ldr	r2, [r3, #16]
 8014a2e:	8afb      	ldrh	r3, [r7, #22]
 8014a30:	075b      	lsls	r3, r3, #29
 8014a32:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8014a36:	69b9      	ldr	r1, [r7, #24]
 8014a38:	0148      	lsls	r0, r1, #5
 8014a3a:	69f9      	ldr	r1, [r7, #28]
 8014a3c:	4401      	add	r1, r0
 8014a3e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014a42:	4313      	orrs	r3, r2
 8014a44:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014a46:	69bb      	ldr	r3, [r7, #24]
 8014a48:	015a      	lsls	r2, r3, #5
 8014a4a:	69fb      	ldr	r3, [r7, #28]
 8014a4c:	4413      	add	r3, r2
 8014a4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a52:	691a      	ldr	r2, [r3, #16]
 8014a54:	68bb      	ldr	r3, [r7, #8]
 8014a56:	691b      	ldr	r3, [r3, #16]
 8014a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014a5c:	69b9      	ldr	r1, [r7, #24]
 8014a5e:	0148      	lsls	r0, r1, #5
 8014a60:	69f9      	ldr	r1, [r7, #28]
 8014a62:	4401      	add	r1, r0
 8014a64:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014a68:	4313      	orrs	r3, r2
 8014a6a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014a6c:	79fb      	ldrb	r3, [r7, #7]
 8014a6e:	2b01      	cmp	r3, #1
 8014a70:	d14b      	bne.n	8014b0a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014a72:	68bb      	ldr	r3, [r7, #8]
 8014a74:	69db      	ldr	r3, [r3, #28]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d009      	beq.n	8014a8e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014a7a:	69bb      	ldr	r3, [r7, #24]
 8014a7c:	015a      	lsls	r2, r3, #5
 8014a7e:	69fb      	ldr	r3, [r7, #28]
 8014a80:	4413      	add	r3, r2
 8014a82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a86:	461a      	mov	r2, r3
 8014a88:	68bb      	ldr	r3, [r7, #8]
 8014a8a:	69db      	ldr	r3, [r3, #28]
 8014a8c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014a8e:	68bb      	ldr	r3, [r7, #8]
 8014a90:	791b      	ldrb	r3, [r3, #4]
 8014a92:	2b01      	cmp	r3, #1
 8014a94:	d128      	bne.n	8014ae8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014a96:	69fb      	ldr	r3, [r7, #28]
 8014a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014a9c:	689b      	ldr	r3, [r3, #8]
 8014a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d110      	bne.n	8014ac8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014aa6:	69bb      	ldr	r3, [r7, #24]
 8014aa8:	015a      	lsls	r2, r3, #5
 8014aaa:	69fb      	ldr	r3, [r7, #28]
 8014aac:	4413      	add	r3, r2
 8014aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	69ba      	ldr	r2, [r7, #24]
 8014ab6:	0151      	lsls	r1, r2, #5
 8014ab8:	69fa      	ldr	r2, [r7, #28]
 8014aba:	440a      	add	r2, r1
 8014abc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014ac0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014ac4:	6013      	str	r3, [r2, #0]
 8014ac6:	e00f      	b.n	8014ae8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014ac8:	69bb      	ldr	r3, [r7, #24]
 8014aca:	015a      	lsls	r2, r3, #5
 8014acc:	69fb      	ldr	r3, [r7, #28]
 8014ace:	4413      	add	r3, r2
 8014ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	69ba      	ldr	r2, [r7, #24]
 8014ad8:	0151      	lsls	r1, r2, #5
 8014ada:	69fa      	ldr	r2, [r7, #28]
 8014adc:	440a      	add	r2, r1
 8014ade:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014ae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014ae6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014ae8:	69bb      	ldr	r3, [r7, #24]
 8014aea:	015a      	lsls	r2, r3, #5
 8014aec:	69fb      	ldr	r3, [r7, #28]
 8014aee:	4413      	add	r3, r2
 8014af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	69ba      	ldr	r2, [r7, #24]
 8014af8:	0151      	lsls	r1, r2, #5
 8014afa:	69fa      	ldr	r2, [r7, #28]
 8014afc:	440a      	add	r2, r1
 8014afe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014b02:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014b06:	6013      	str	r3, [r2, #0]
 8014b08:	e169      	b.n	8014dde <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014b0a:	69bb      	ldr	r3, [r7, #24]
 8014b0c:	015a      	lsls	r2, r3, #5
 8014b0e:	69fb      	ldr	r3, [r7, #28]
 8014b10:	4413      	add	r3, r2
 8014b12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	69ba      	ldr	r2, [r7, #24]
 8014b1a:	0151      	lsls	r1, r2, #5
 8014b1c:	69fa      	ldr	r2, [r7, #28]
 8014b1e:	440a      	add	r2, r1
 8014b20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014b24:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014b28:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014b2a:	68bb      	ldr	r3, [r7, #8]
 8014b2c:	791b      	ldrb	r3, [r3, #4]
 8014b2e:	2b01      	cmp	r3, #1
 8014b30:	d015      	beq.n	8014b5e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014b32:	68bb      	ldr	r3, [r7, #8]
 8014b34:	691b      	ldr	r3, [r3, #16]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	f000 8151 	beq.w	8014dde <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014b3c:	69fb      	ldr	r3, [r7, #28]
 8014b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014b42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014b44:	68bb      	ldr	r3, [r7, #8]
 8014b46:	781b      	ldrb	r3, [r3, #0]
 8014b48:	f003 030f 	and.w	r3, r3, #15
 8014b4c:	2101      	movs	r1, #1
 8014b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8014b52:	69f9      	ldr	r1, [r7, #28]
 8014b54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014b58:	4313      	orrs	r3, r2
 8014b5a:	634b      	str	r3, [r1, #52]	@ 0x34
 8014b5c:	e13f      	b.n	8014dde <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014b5e:	69fb      	ldr	r3, [r7, #28]
 8014b60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014b64:	689b      	ldr	r3, [r3, #8]
 8014b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d116      	bne.n	8014b9c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014b6e:	69bb      	ldr	r3, [r7, #24]
 8014b70:	015a      	lsls	r2, r3, #5
 8014b72:	69fb      	ldr	r3, [r7, #28]
 8014b74:	4413      	add	r3, r2
 8014b76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	69ba      	ldr	r2, [r7, #24]
 8014b7e:	0151      	lsls	r1, r2, #5
 8014b80:	69fa      	ldr	r2, [r7, #28]
 8014b82:	440a      	add	r2, r1
 8014b84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014b88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014b8c:	6013      	str	r3, [r2, #0]
 8014b8e:	e015      	b.n	8014bbc <USB_EPStartXfer+0x310>
 8014b90:	e007ffff 	.word	0xe007ffff
 8014b94:	fff80000 	.word	0xfff80000
 8014b98:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014b9c:	69bb      	ldr	r3, [r7, #24]
 8014b9e:	015a      	lsls	r2, r3, #5
 8014ba0:	69fb      	ldr	r3, [r7, #28]
 8014ba2:	4413      	add	r3, r2
 8014ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	69ba      	ldr	r2, [r7, #24]
 8014bac:	0151      	lsls	r1, r2, #5
 8014bae:	69fa      	ldr	r2, [r7, #28]
 8014bb0:	440a      	add	r2, r1
 8014bb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014bba:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014bbc:	68bb      	ldr	r3, [r7, #8]
 8014bbe:	68d9      	ldr	r1, [r3, #12]
 8014bc0:	68bb      	ldr	r3, [r7, #8]
 8014bc2:	781a      	ldrb	r2, [r3, #0]
 8014bc4:	68bb      	ldr	r3, [r7, #8]
 8014bc6:	691b      	ldr	r3, [r3, #16]
 8014bc8:	b298      	uxth	r0, r3
 8014bca:	79fb      	ldrb	r3, [r7, #7]
 8014bcc:	9300      	str	r3, [sp, #0]
 8014bce:	4603      	mov	r3, r0
 8014bd0:	68f8      	ldr	r0, [r7, #12]
 8014bd2:	f000 f9b9 	bl	8014f48 <USB_WritePacket>
 8014bd6:	e102      	b.n	8014dde <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014bd8:	69bb      	ldr	r3, [r7, #24]
 8014bda:	015a      	lsls	r2, r3, #5
 8014bdc:	69fb      	ldr	r3, [r7, #28]
 8014bde:	4413      	add	r3, r2
 8014be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014be4:	691a      	ldr	r2, [r3, #16]
 8014be6:	69bb      	ldr	r3, [r7, #24]
 8014be8:	0159      	lsls	r1, r3, #5
 8014bea:	69fb      	ldr	r3, [r7, #28]
 8014bec:	440b      	add	r3, r1
 8014bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014bf2:	4619      	mov	r1, r3
 8014bf4:	4b7c      	ldr	r3, [pc, #496]	@ (8014de8 <USB_EPStartXfer+0x53c>)
 8014bf6:	4013      	ands	r3, r2
 8014bf8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014bfa:	69bb      	ldr	r3, [r7, #24]
 8014bfc:	015a      	lsls	r2, r3, #5
 8014bfe:	69fb      	ldr	r3, [r7, #28]
 8014c00:	4413      	add	r3, r2
 8014c02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014c06:	691a      	ldr	r2, [r3, #16]
 8014c08:	69bb      	ldr	r3, [r7, #24]
 8014c0a:	0159      	lsls	r1, r3, #5
 8014c0c:	69fb      	ldr	r3, [r7, #28]
 8014c0e:	440b      	add	r3, r1
 8014c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014c14:	4619      	mov	r1, r3
 8014c16:	4b75      	ldr	r3, [pc, #468]	@ (8014dec <USB_EPStartXfer+0x540>)
 8014c18:	4013      	ands	r3, r2
 8014c1a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8014c1c:	69bb      	ldr	r3, [r7, #24]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d12f      	bne.n	8014c82 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8014c22:	68bb      	ldr	r3, [r7, #8]
 8014c24:	691b      	ldr	r3, [r3, #16]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d003      	beq.n	8014c32 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8014c2a:	68bb      	ldr	r3, [r7, #8]
 8014c2c:	689a      	ldr	r2, [r3, #8]
 8014c2e:	68bb      	ldr	r3, [r7, #8]
 8014c30:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8014c32:	68bb      	ldr	r3, [r7, #8]
 8014c34:	689a      	ldr	r2, [r3, #8]
 8014c36:	68bb      	ldr	r3, [r7, #8]
 8014c38:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014c3a:	69bb      	ldr	r3, [r7, #24]
 8014c3c:	015a      	lsls	r2, r3, #5
 8014c3e:	69fb      	ldr	r3, [r7, #28]
 8014c40:	4413      	add	r3, r2
 8014c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014c46:	691a      	ldr	r2, [r3, #16]
 8014c48:	68bb      	ldr	r3, [r7, #8]
 8014c4a:	6a1b      	ldr	r3, [r3, #32]
 8014c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014c50:	69b9      	ldr	r1, [r7, #24]
 8014c52:	0148      	lsls	r0, r1, #5
 8014c54:	69f9      	ldr	r1, [r7, #28]
 8014c56:	4401      	add	r1, r0
 8014c58:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014c5c:	4313      	orrs	r3, r2
 8014c5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014c60:	69bb      	ldr	r3, [r7, #24]
 8014c62:	015a      	lsls	r2, r3, #5
 8014c64:	69fb      	ldr	r3, [r7, #28]
 8014c66:	4413      	add	r3, r2
 8014c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014c6c:	691b      	ldr	r3, [r3, #16]
 8014c6e:	69ba      	ldr	r2, [r7, #24]
 8014c70:	0151      	lsls	r1, r2, #5
 8014c72:	69fa      	ldr	r2, [r7, #28]
 8014c74:	440a      	add	r2, r1
 8014c76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014c7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014c7e:	6113      	str	r3, [r2, #16]
 8014c80:	e05f      	b.n	8014d42 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8014c82:	68bb      	ldr	r3, [r7, #8]
 8014c84:	691b      	ldr	r3, [r3, #16]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d123      	bne.n	8014cd2 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014c8a:	69bb      	ldr	r3, [r7, #24]
 8014c8c:	015a      	lsls	r2, r3, #5
 8014c8e:	69fb      	ldr	r3, [r7, #28]
 8014c90:	4413      	add	r3, r2
 8014c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014c96:	691a      	ldr	r2, [r3, #16]
 8014c98:	68bb      	ldr	r3, [r7, #8]
 8014c9a:	689b      	ldr	r3, [r3, #8]
 8014c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014ca0:	69b9      	ldr	r1, [r7, #24]
 8014ca2:	0148      	lsls	r0, r1, #5
 8014ca4:	69f9      	ldr	r1, [r7, #28]
 8014ca6:	4401      	add	r1, r0
 8014ca8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014cac:	4313      	orrs	r3, r2
 8014cae:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014cb0:	69bb      	ldr	r3, [r7, #24]
 8014cb2:	015a      	lsls	r2, r3, #5
 8014cb4:	69fb      	ldr	r3, [r7, #28]
 8014cb6:	4413      	add	r3, r2
 8014cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014cbc:	691b      	ldr	r3, [r3, #16]
 8014cbe:	69ba      	ldr	r2, [r7, #24]
 8014cc0:	0151      	lsls	r1, r2, #5
 8014cc2:	69fa      	ldr	r2, [r7, #28]
 8014cc4:	440a      	add	r2, r1
 8014cc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014cca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014cce:	6113      	str	r3, [r2, #16]
 8014cd0:	e037      	b.n	8014d42 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014cd2:	68bb      	ldr	r3, [r7, #8]
 8014cd4:	691a      	ldr	r2, [r3, #16]
 8014cd6:	68bb      	ldr	r3, [r7, #8]
 8014cd8:	689b      	ldr	r3, [r3, #8]
 8014cda:	4413      	add	r3, r2
 8014cdc:	1e5a      	subs	r2, r3, #1
 8014cde:	68bb      	ldr	r3, [r7, #8]
 8014ce0:	689b      	ldr	r3, [r3, #8]
 8014ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8014ce6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8014ce8:	68bb      	ldr	r3, [r7, #8]
 8014cea:	689b      	ldr	r3, [r3, #8]
 8014cec:	8afa      	ldrh	r2, [r7, #22]
 8014cee:	fb03 f202 	mul.w	r2, r3, r2
 8014cf2:	68bb      	ldr	r3, [r7, #8]
 8014cf4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014cf6:	69bb      	ldr	r3, [r7, #24]
 8014cf8:	015a      	lsls	r2, r3, #5
 8014cfa:	69fb      	ldr	r3, [r7, #28]
 8014cfc:	4413      	add	r3, r2
 8014cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d02:	691a      	ldr	r2, [r3, #16]
 8014d04:	8afb      	ldrh	r3, [r7, #22]
 8014d06:	04d9      	lsls	r1, r3, #19
 8014d08:	4b39      	ldr	r3, [pc, #228]	@ (8014df0 <USB_EPStartXfer+0x544>)
 8014d0a:	400b      	ands	r3, r1
 8014d0c:	69b9      	ldr	r1, [r7, #24]
 8014d0e:	0148      	lsls	r0, r1, #5
 8014d10:	69f9      	ldr	r1, [r7, #28]
 8014d12:	4401      	add	r1, r0
 8014d14:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014d18:	4313      	orrs	r3, r2
 8014d1a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014d1c:	69bb      	ldr	r3, [r7, #24]
 8014d1e:	015a      	lsls	r2, r3, #5
 8014d20:	69fb      	ldr	r3, [r7, #28]
 8014d22:	4413      	add	r3, r2
 8014d24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d28:	691a      	ldr	r2, [r3, #16]
 8014d2a:	68bb      	ldr	r3, [r7, #8]
 8014d2c:	6a1b      	ldr	r3, [r3, #32]
 8014d2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014d32:	69b9      	ldr	r1, [r7, #24]
 8014d34:	0148      	lsls	r0, r1, #5
 8014d36:	69f9      	ldr	r1, [r7, #28]
 8014d38:	4401      	add	r1, r0
 8014d3a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014d3e:	4313      	orrs	r3, r2
 8014d40:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8014d42:	79fb      	ldrb	r3, [r7, #7]
 8014d44:	2b01      	cmp	r3, #1
 8014d46:	d10d      	bne.n	8014d64 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014d48:	68bb      	ldr	r3, [r7, #8]
 8014d4a:	68db      	ldr	r3, [r3, #12]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d009      	beq.n	8014d64 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	68d9      	ldr	r1, [r3, #12]
 8014d54:	69bb      	ldr	r3, [r7, #24]
 8014d56:	015a      	lsls	r2, r3, #5
 8014d58:	69fb      	ldr	r3, [r7, #28]
 8014d5a:	4413      	add	r3, r2
 8014d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d60:	460a      	mov	r2, r1
 8014d62:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014d64:	68bb      	ldr	r3, [r7, #8]
 8014d66:	791b      	ldrb	r3, [r3, #4]
 8014d68:	2b01      	cmp	r3, #1
 8014d6a:	d128      	bne.n	8014dbe <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014d6c:	69fb      	ldr	r3, [r7, #28]
 8014d6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014d72:	689b      	ldr	r3, [r3, #8]
 8014d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d110      	bne.n	8014d9e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014d7c:	69bb      	ldr	r3, [r7, #24]
 8014d7e:	015a      	lsls	r2, r3, #5
 8014d80:	69fb      	ldr	r3, [r7, #28]
 8014d82:	4413      	add	r3, r2
 8014d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	69ba      	ldr	r2, [r7, #24]
 8014d8c:	0151      	lsls	r1, r2, #5
 8014d8e:	69fa      	ldr	r2, [r7, #28]
 8014d90:	440a      	add	r2, r1
 8014d92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014d96:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014d9a:	6013      	str	r3, [r2, #0]
 8014d9c:	e00f      	b.n	8014dbe <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014d9e:	69bb      	ldr	r3, [r7, #24]
 8014da0:	015a      	lsls	r2, r3, #5
 8014da2:	69fb      	ldr	r3, [r7, #28]
 8014da4:	4413      	add	r3, r2
 8014da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	69ba      	ldr	r2, [r7, #24]
 8014dae:	0151      	lsls	r1, r2, #5
 8014db0:	69fa      	ldr	r2, [r7, #28]
 8014db2:	440a      	add	r2, r1
 8014db4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014dbc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014dbe:	69bb      	ldr	r3, [r7, #24]
 8014dc0:	015a      	lsls	r2, r3, #5
 8014dc2:	69fb      	ldr	r3, [r7, #28]
 8014dc4:	4413      	add	r3, r2
 8014dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	69ba      	ldr	r2, [r7, #24]
 8014dce:	0151      	lsls	r1, r2, #5
 8014dd0:	69fa      	ldr	r2, [r7, #28]
 8014dd2:	440a      	add	r2, r1
 8014dd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014dd8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014ddc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014dde:	2300      	movs	r3, #0
}
 8014de0:	4618      	mov	r0, r3
 8014de2:	3720      	adds	r7, #32
 8014de4:	46bd      	mov	sp, r7
 8014de6:	bd80      	pop	{r7, pc}
 8014de8:	fff80000 	.word	0xfff80000
 8014dec:	e007ffff 	.word	0xe007ffff
 8014df0:	1ff80000 	.word	0x1ff80000

08014df4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014df4:	b480      	push	{r7}
 8014df6:	b087      	sub	sp, #28
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
 8014dfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014dfe:	2300      	movs	r3, #0
 8014e00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8014e02:	2300      	movs	r3, #0
 8014e04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014e0a:	683b      	ldr	r3, [r7, #0]
 8014e0c:	785b      	ldrb	r3, [r3, #1]
 8014e0e:	2b01      	cmp	r3, #1
 8014e10:	d14a      	bne.n	8014ea8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014e12:	683b      	ldr	r3, [r7, #0]
 8014e14:	781b      	ldrb	r3, [r3, #0]
 8014e16:	015a      	lsls	r2, r3, #5
 8014e18:	693b      	ldr	r3, [r7, #16]
 8014e1a:	4413      	add	r3, r2
 8014e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014e26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014e2a:	f040 8086 	bne.w	8014f3a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8014e2e:	683b      	ldr	r3, [r7, #0]
 8014e30:	781b      	ldrb	r3, [r3, #0]
 8014e32:	015a      	lsls	r2, r3, #5
 8014e34:	693b      	ldr	r3, [r7, #16]
 8014e36:	4413      	add	r3, r2
 8014e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	683a      	ldr	r2, [r7, #0]
 8014e40:	7812      	ldrb	r2, [r2, #0]
 8014e42:	0151      	lsls	r1, r2, #5
 8014e44:	693a      	ldr	r2, [r7, #16]
 8014e46:	440a      	add	r2, r1
 8014e48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014e4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014e50:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014e52:	683b      	ldr	r3, [r7, #0]
 8014e54:	781b      	ldrb	r3, [r3, #0]
 8014e56:	015a      	lsls	r2, r3, #5
 8014e58:	693b      	ldr	r3, [r7, #16]
 8014e5a:	4413      	add	r3, r2
 8014e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	683a      	ldr	r2, [r7, #0]
 8014e64:	7812      	ldrb	r2, [r2, #0]
 8014e66:	0151      	lsls	r1, r2, #5
 8014e68:	693a      	ldr	r2, [r7, #16]
 8014e6a:	440a      	add	r2, r1
 8014e6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014e70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014e74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	3301      	adds	r3, #1
 8014e7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8014e82:	4293      	cmp	r3, r2
 8014e84:	d902      	bls.n	8014e8c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014e86:	2301      	movs	r3, #1
 8014e88:	75fb      	strb	r3, [r7, #23]
          break;
 8014e8a:	e056      	b.n	8014f3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	781b      	ldrb	r3, [r3, #0]
 8014e90:	015a      	lsls	r2, r3, #5
 8014e92:	693b      	ldr	r3, [r7, #16]
 8014e94:	4413      	add	r3, r2
 8014e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014ea4:	d0e7      	beq.n	8014e76 <USB_EPStopXfer+0x82>
 8014ea6:	e048      	b.n	8014f3a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014ea8:	683b      	ldr	r3, [r7, #0]
 8014eaa:	781b      	ldrb	r3, [r3, #0]
 8014eac:	015a      	lsls	r2, r3, #5
 8014eae:	693b      	ldr	r3, [r7, #16]
 8014eb0:	4413      	add	r3, r2
 8014eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014ec0:	d13b      	bne.n	8014f3a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8014ec2:	683b      	ldr	r3, [r7, #0]
 8014ec4:	781b      	ldrb	r3, [r3, #0]
 8014ec6:	015a      	lsls	r2, r3, #5
 8014ec8:	693b      	ldr	r3, [r7, #16]
 8014eca:	4413      	add	r3, r2
 8014ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	683a      	ldr	r2, [r7, #0]
 8014ed4:	7812      	ldrb	r2, [r2, #0]
 8014ed6:	0151      	lsls	r1, r2, #5
 8014ed8:	693a      	ldr	r2, [r7, #16]
 8014eda:	440a      	add	r2, r1
 8014edc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014ee0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014ee4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8014ee6:	683b      	ldr	r3, [r7, #0]
 8014ee8:	781b      	ldrb	r3, [r3, #0]
 8014eea:	015a      	lsls	r2, r3, #5
 8014eec:	693b      	ldr	r3, [r7, #16]
 8014eee:	4413      	add	r3, r2
 8014ef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	683a      	ldr	r2, [r7, #0]
 8014ef8:	7812      	ldrb	r2, [r2, #0]
 8014efa:	0151      	lsls	r1, r2, #5
 8014efc:	693a      	ldr	r2, [r7, #16]
 8014efe:	440a      	add	r2, r1
 8014f00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014f04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014f08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	3301      	adds	r3, #1
 8014f0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	f242 7210 	movw	r2, #10000	@ 0x2710
 8014f16:	4293      	cmp	r3, r2
 8014f18:	d902      	bls.n	8014f20 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014f1a:	2301      	movs	r3, #1
 8014f1c:	75fb      	strb	r3, [r7, #23]
          break;
 8014f1e:	e00c      	b.n	8014f3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8014f20:	683b      	ldr	r3, [r7, #0]
 8014f22:	781b      	ldrb	r3, [r3, #0]
 8014f24:	015a      	lsls	r2, r3, #5
 8014f26:	693b      	ldr	r3, [r7, #16]
 8014f28:	4413      	add	r3, r2
 8014f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014f34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014f38:	d0e7      	beq.n	8014f0a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8014f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	371c      	adds	r7, #28
 8014f40:	46bd      	mov	sp, r7
 8014f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f46:	4770      	bx	lr

08014f48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014f48:	b480      	push	{r7}
 8014f4a:	b089      	sub	sp, #36	@ 0x24
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	60f8      	str	r0, [r7, #12]
 8014f50:	60b9      	str	r1, [r7, #8]
 8014f52:	4611      	mov	r1, r2
 8014f54:	461a      	mov	r2, r3
 8014f56:	460b      	mov	r3, r1
 8014f58:	71fb      	strb	r3, [r7, #7]
 8014f5a:	4613      	mov	r3, r2
 8014f5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014f62:	68bb      	ldr	r3, [r7, #8]
 8014f64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014f66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d123      	bne.n	8014fb6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014f6e:	88bb      	ldrh	r3, [r7, #4]
 8014f70:	3303      	adds	r3, #3
 8014f72:	089b      	lsrs	r3, r3, #2
 8014f74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014f76:	2300      	movs	r3, #0
 8014f78:	61bb      	str	r3, [r7, #24]
 8014f7a:	e018      	b.n	8014fae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014f7c:	79fb      	ldrb	r3, [r7, #7]
 8014f7e:	031a      	lsls	r2, r3, #12
 8014f80:	697b      	ldr	r3, [r7, #20]
 8014f82:	4413      	add	r3, r2
 8014f84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014f88:	461a      	mov	r2, r3
 8014f8a:	69fb      	ldr	r3, [r7, #28]
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014f90:	69fb      	ldr	r3, [r7, #28]
 8014f92:	3301      	adds	r3, #1
 8014f94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014f96:	69fb      	ldr	r3, [r7, #28]
 8014f98:	3301      	adds	r3, #1
 8014f9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014f9c:	69fb      	ldr	r3, [r7, #28]
 8014f9e:	3301      	adds	r3, #1
 8014fa0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014fa2:	69fb      	ldr	r3, [r7, #28]
 8014fa4:	3301      	adds	r3, #1
 8014fa6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014fa8:	69bb      	ldr	r3, [r7, #24]
 8014faa:	3301      	adds	r3, #1
 8014fac:	61bb      	str	r3, [r7, #24]
 8014fae:	69ba      	ldr	r2, [r7, #24]
 8014fb0:	693b      	ldr	r3, [r7, #16]
 8014fb2:	429a      	cmp	r2, r3
 8014fb4:	d3e2      	bcc.n	8014f7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014fb6:	2300      	movs	r3, #0
}
 8014fb8:	4618      	mov	r0, r3
 8014fba:	3724      	adds	r7, #36	@ 0x24
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc2:	4770      	bx	lr

08014fc4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014fc4:	b480      	push	{r7}
 8014fc6:	b08b      	sub	sp, #44	@ 0x2c
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	60f8      	str	r0, [r7, #12]
 8014fcc:	60b9      	str	r1, [r7, #8]
 8014fce:	4613      	mov	r3, r2
 8014fd0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014fd6:	68bb      	ldr	r3, [r7, #8]
 8014fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014fda:	88fb      	ldrh	r3, [r7, #6]
 8014fdc:	089b      	lsrs	r3, r3, #2
 8014fde:	b29b      	uxth	r3, r3
 8014fe0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8014fe2:	88fb      	ldrh	r3, [r7, #6]
 8014fe4:	f003 0303 	and.w	r3, r3, #3
 8014fe8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014fea:	2300      	movs	r3, #0
 8014fec:	623b      	str	r3, [r7, #32]
 8014fee:	e014      	b.n	801501a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014ff0:	69bb      	ldr	r3, [r7, #24]
 8014ff2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014ff6:	681a      	ldr	r2, [r3, #0]
 8014ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ffa:	601a      	str	r2, [r3, #0]
    pDest++;
 8014ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ffe:	3301      	adds	r3, #1
 8015000:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015004:	3301      	adds	r3, #1
 8015006:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801500a:	3301      	adds	r3, #1
 801500c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801500e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015010:	3301      	adds	r3, #1
 8015012:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8015014:	6a3b      	ldr	r3, [r7, #32]
 8015016:	3301      	adds	r3, #1
 8015018:	623b      	str	r3, [r7, #32]
 801501a:	6a3a      	ldr	r2, [r7, #32]
 801501c:	697b      	ldr	r3, [r7, #20]
 801501e:	429a      	cmp	r2, r3
 8015020:	d3e6      	bcc.n	8014ff0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8015022:	8bfb      	ldrh	r3, [r7, #30]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d01e      	beq.n	8015066 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8015028:	2300      	movs	r3, #0
 801502a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801502c:	69bb      	ldr	r3, [r7, #24]
 801502e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015032:	461a      	mov	r2, r3
 8015034:	f107 0310 	add.w	r3, r7, #16
 8015038:	6812      	ldr	r2, [r2, #0]
 801503a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801503c:	693a      	ldr	r2, [r7, #16]
 801503e:	6a3b      	ldr	r3, [r7, #32]
 8015040:	b2db      	uxtb	r3, r3
 8015042:	00db      	lsls	r3, r3, #3
 8015044:	fa22 f303 	lsr.w	r3, r2, r3
 8015048:	b2da      	uxtb	r2, r3
 801504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801504c:	701a      	strb	r2, [r3, #0]
      i++;
 801504e:	6a3b      	ldr	r3, [r7, #32]
 8015050:	3301      	adds	r3, #1
 8015052:	623b      	str	r3, [r7, #32]
      pDest++;
 8015054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015056:	3301      	adds	r3, #1
 8015058:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801505a:	8bfb      	ldrh	r3, [r7, #30]
 801505c:	3b01      	subs	r3, #1
 801505e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8015060:	8bfb      	ldrh	r3, [r7, #30]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d1ea      	bne.n	801503c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8015066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015068:	4618      	mov	r0, r3
 801506a:	372c      	adds	r7, #44	@ 0x2c
 801506c:	46bd      	mov	sp, r7
 801506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015072:	4770      	bx	lr

08015074 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015074:	b480      	push	{r7}
 8015076:	b085      	sub	sp, #20
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
 801507c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015082:	683b      	ldr	r3, [r7, #0]
 8015084:	781b      	ldrb	r3, [r3, #0]
 8015086:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015088:	683b      	ldr	r3, [r7, #0]
 801508a:	785b      	ldrb	r3, [r3, #1]
 801508c:	2b01      	cmp	r3, #1
 801508e:	d12c      	bne.n	80150ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015090:	68bb      	ldr	r3, [r7, #8]
 8015092:	015a      	lsls	r2, r3, #5
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	4413      	add	r3, r2
 8015098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	db12      	blt.n	80150c8 <USB_EPSetStall+0x54>
 80150a2:	68bb      	ldr	r3, [r7, #8]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d00f      	beq.n	80150c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80150a8:	68bb      	ldr	r3, [r7, #8]
 80150aa:	015a      	lsls	r2, r3, #5
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	4413      	add	r3, r2
 80150b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	68ba      	ldr	r2, [r7, #8]
 80150b8:	0151      	lsls	r1, r2, #5
 80150ba:	68fa      	ldr	r2, [r7, #12]
 80150bc:	440a      	add	r2, r1
 80150be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80150c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80150c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80150c8:	68bb      	ldr	r3, [r7, #8]
 80150ca:	015a      	lsls	r2, r3, #5
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	4413      	add	r3, r2
 80150d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	68ba      	ldr	r2, [r7, #8]
 80150d8:	0151      	lsls	r1, r2, #5
 80150da:	68fa      	ldr	r2, [r7, #12]
 80150dc:	440a      	add	r2, r1
 80150de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80150e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80150e6:	6013      	str	r3, [r2, #0]
 80150e8:	e02b      	b.n	8015142 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80150ea:	68bb      	ldr	r3, [r7, #8]
 80150ec:	015a      	lsls	r2, r3, #5
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	4413      	add	r3, r2
 80150f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	db12      	blt.n	8015122 <USB_EPSetStall+0xae>
 80150fc:	68bb      	ldr	r3, [r7, #8]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d00f      	beq.n	8015122 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8015102:	68bb      	ldr	r3, [r7, #8]
 8015104:	015a      	lsls	r2, r3, #5
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	4413      	add	r3, r2
 801510a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	68ba      	ldr	r2, [r7, #8]
 8015112:	0151      	lsls	r1, r2, #5
 8015114:	68fa      	ldr	r2, [r7, #12]
 8015116:	440a      	add	r2, r1
 8015118:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801511c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015120:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8015122:	68bb      	ldr	r3, [r7, #8]
 8015124:	015a      	lsls	r2, r3, #5
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	4413      	add	r3, r2
 801512a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	68ba      	ldr	r2, [r7, #8]
 8015132:	0151      	lsls	r1, r2, #5
 8015134:	68fa      	ldr	r2, [r7, #12]
 8015136:	440a      	add	r2, r1
 8015138:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801513c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015140:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015142:	2300      	movs	r3, #0
}
 8015144:	4618      	mov	r0, r3
 8015146:	3714      	adds	r7, #20
 8015148:	46bd      	mov	sp, r7
 801514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801514e:	4770      	bx	lr

08015150 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015150:	b480      	push	{r7}
 8015152:	b085      	sub	sp, #20
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
 8015158:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801515e:	683b      	ldr	r3, [r7, #0]
 8015160:	781b      	ldrb	r3, [r3, #0]
 8015162:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015164:	683b      	ldr	r3, [r7, #0]
 8015166:	785b      	ldrb	r3, [r3, #1]
 8015168:	2b01      	cmp	r3, #1
 801516a:	d128      	bne.n	80151be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801516c:	68bb      	ldr	r3, [r7, #8]
 801516e:	015a      	lsls	r2, r3, #5
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	4413      	add	r3, r2
 8015174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	68ba      	ldr	r2, [r7, #8]
 801517c:	0151      	lsls	r1, r2, #5
 801517e:	68fa      	ldr	r2, [r7, #12]
 8015180:	440a      	add	r2, r1
 8015182:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015186:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801518a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801518c:	683b      	ldr	r3, [r7, #0]
 801518e:	791b      	ldrb	r3, [r3, #4]
 8015190:	2b03      	cmp	r3, #3
 8015192:	d003      	beq.n	801519c <USB_EPClearStall+0x4c>
 8015194:	683b      	ldr	r3, [r7, #0]
 8015196:	791b      	ldrb	r3, [r3, #4]
 8015198:	2b02      	cmp	r3, #2
 801519a:	d138      	bne.n	801520e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801519c:	68bb      	ldr	r3, [r7, #8]
 801519e:	015a      	lsls	r2, r3, #5
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	4413      	add	r3, r2
 80151a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	68ba      	ldr	r2, [r7, #8]
 80151ac:	0151      	lsls	r1, r2, #5
 80151ae:	68fa      	ldr	r2, [r7, #12]
 80151b0:	440a      	add	r2, r1
 80151b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80151b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80151ba:	6013      	str	r3, [r2, #0]
 80151bc:	e027      	b.n	801520e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80151be:	68bb      	ldr	r3, [r7, #8]
 80151c0:	015a      	lsls	r2, r3, #5
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	4413      	add	r3, r2
 80151c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	68ba      	ldr	r2, [r7, #8]
 80151ce:	0151      	lsls	r1, r2, #5
 80151d0:	68fa      	ldr	r2, [r7, #12]
 80151d2:	440a      	add	r2, r1
 80151d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80151d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80151dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80151de:	683b      	ldr	r3, [r7, #0]
 80151e0:	791b      	ldrb	r3, [r3, #4]
 80151e2:	2b03      	cmp	r3, #3
 80151e4:	d003      	beq.n	80151ee <USB_EPClearStall+0x9e>
 80151e6:	683b      	ldr	r3, [r7, #0]
 80151e8:	791b      	ldrb	r3, [r3, #4]
 80151ea:	2b02      	cmp	r3, #2
 80151ec:	d10f      	bne.n	801520e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80151ee:	68bb      	ldr	r3, [r7, #8]
 80151f0:	015a      	lsls	r2, r3, #5
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	4413      	add	r3, r2
 80151f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	68ba      	ldr	r2, [r7, #8]
 80151fe:	0151      	lsls	r1, r2, #5
 8015200:	68fa      	ldr	r2, [r7, #12]
 8015202:	440a      	add	r2, r1
 8015204:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801520c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801520e:	2300      	movs	r3, #0
}
 8015210:	4618      	mov	r0, r3
 8015212:	3714      	adds	r7, #20
 8015214:	46bd      	mov	sp, r7
 8015216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801521a:	4770      	bx	lr

0801521c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801521c:	b480      	push	{r7}
 801521e:	b085      	sub	sp, #20
 8015220:	af00      	add	r7, sp, #0
 8015222:	6078      	str	r0, [r7, #4]
 8015224:	460b      	mov	r3, r1
 8015226:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	68fa      	ldr	r2, [r7, #12]
 8015236:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801523a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 801523e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015246:	681a      	ldr	r2, [r3, #0]
 8015248:	78fb      	ldrb	r3, [r7, #3]
 801524a:	011b      	lsls	r3, r3, #4
 801524c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8015250:	68f9      	ldr	r1, [r7, #12]
 8015252:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8015256:	4313      	orrs	r3, r2
 8015258:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801525a:	2300      	movs	r3, #0
}
 801525c:	4618      	mov	r0, r3
 801525e:	3714      	adds	r7, #20
 8015260:	46bd      	mov	sp, r7
 8015262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015266:	4770      	bx	lr

08015268 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8015268:	b480      	push	{r7}
 801526a:	b085      	sub	sp, #20
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	68fa      	ldr	r2, [r7, #12]
 801527e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015282:	f023 0303 	bic.w	r3, r3, #3
 8015286:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801528e:	685b      	ldr	r3, [r3, #4]
 8015290:	68fa      	ldr	r2, [r7, #12]
 8015292:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015296:	f023 0302 	bic.w	r3, r3, #2
 801529a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801529c:	2300      	movs	r3, #0
}
 801529e:	4618      	mov	r0, r3
 80152a0:	3714      	adds	r7, #20
 80152a2:	46bd      	mov	sp, r7
 80152a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a8:	4770      	bx	lr

080152aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80152aa:	b480      	push	{r7}
 80152ac:	b085      	sub	sp, #20
 80152ae:	af00      	add	r7, sp, #0
 80152b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	68fa      	ldr	r2, [r7, #12]
 80152c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80152c4:	f023 0303 	bic.w	r3, r3, #3
 80152c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80152d0:	685b      	ldr	r3, [r3, #4]
 80152d2:	68fa      	ldr	r2, [r7, #12]
 80152d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80152d8:	f043 0302 	orr.w	r3, r3, #2
 80152dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80152de:	2300      	movs	r3, #0
}
 80152e0:	4618      	mov	r0, r3
 80152e2:	3714      	adds	r7, #20
 80152e4:	46bd      	mov	sp, r7
 80152e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ea:	4770      	bx	lr

080152ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80152ec:	b480      	push	{r7}
 80152ee:	b085      	sub	sp, #20
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	695b      	ldr	r3, [r3, #20]
 80152f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	699b      	ldr	r3, [r3, #24]
 80152fe:	68fa      	ldr	r2, [r7, #12]
 8015300:	4013      	ands	r3, r2
 8015302:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015304:	68fb      	ldr	r3, [r7, #12]
}
 8015306:	4618      	mov	r0, r3
 8015308:	3714      	adds	r7, #20
 801530a:	46bd      	mov	sp, r7
 801530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015310:	4770      	bx	lr

08015312 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8015312:	b480      	push	{r7}
 8015314:	b085      	sub	sp, #20
 8015316:	af00      	add	r7, sp, #0
 8015318:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015324:	699b      	ldr	r3, [r3, #24]
 8015326:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801532e:	69db      	ldr	r3, [r3, #28]
 8015330:	68ba      	ldr	r2, [r7, #8]
 8015332:	4013      	ands	r3, r2
 8015334:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8015336:	68bb      	ldr	r3, [r7, #8]
 8015338:	0c1b      	lsrs	r3, r3, #16
}
 801533a:	4618      	mov	r0, r3
 801533c:	3714      	adds	r7, #20
 801533e:	46bd      	mov	sp, r7
 8015340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015344:	4770      	bx	lr

08015346 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8015346:	b480      	push	{r7}
 8015348:	b085      	sub	sp, #20
 801534a:	af00      	add	r7, sp, #0
 801534c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015358:	699b      	ldr	r3, [r3, #24]
 801535a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015362:	69db      	ldr	r3, [r3, #28]
 8015364:	68ba      	ldr	r2, [r7, #8]
 8015366:	4013      	ands	r3, r2
 8015368:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801536a:	68bb      	ldr	r3, [r7, #8]
 801536c:	b29b      	uxth	r3, r3
}
 801536e:	4618      	mov	r0, r3
 8015370:	3714      	adds	r7, #20
 8015372:	46bd      	mov	sp, r7
 8015374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015378:	4770      	bx	lr

0801537a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801537a:	b480      	push	{r7}
 801537c:	b085      	sub	sp, #20
 801537e:	af00      	add	r7, sp, #0
 8015380:	6078      	str	r0, [r7, #4]
 8015382:	460b      	mov	r3, r1
 8015384:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801538a:	78fb      	ldrb	r3, [r7, #3]
 801538c:	015a      	lsls	r2, r3, #5
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	4413      	add	r3, r2
 8015392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015396:	689b      	ldr	r3, [r3, #8]
 8015398:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80153a0:	695b      	ldr	r3, [r3, #20]
 80153a2:	68ba      	ldr	r2, [r7, #8]
 80153a4:	4013      	ands	r3, r2
 80153a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80153a8:	68bb      	ldr	r3, [r7, #8]
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	3714      	adds	r7, #20
 80153ae:	46bd      	mov	sp, r7
 80153b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b4:	4770      	bx	lr

080153b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80153b6:	b480      	push	{r7}
 80153b8:	b087      	sub	sp, #28
 80153ba:	af00      	add	r7, sp, #0
 80153bc:	6078      	str	r0, [r7, #4]
 80153be:	460b      	mov	r3, r1
 80153c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80153c6:	697b      	ldr	r3, [r7, #20]
 80153c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80153cc:	691b      	ldr	r3, [r3, #16]
 80153ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80153d0:	697b      	ldr	r3, [r7, #20]
 80153d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80153d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80153d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80153da:	78fb      	ldrb	r3, [r7, #3]
 80153dc:	f003 030f 	and.w	r3, r3, #15
 80153e0:	68fa      	ldr	r2, [r7, #12]
 80153e2:	fa22 f303 	lsr.w	r3, r2, r3
 80153e6:	01db      	lsls	r3, r3, #7
 80153e8:	b2db      	uxtb	r3, r3
 80153ea:	693a      	ldr	r2, [r7, #16]
 80153ec:	4313      	orrs	r3, r2
 80153ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80153f0:	78fb      	ldrb	r3, [r7, #3]
 80153f2:	015a      	lsls	r2, r3, #5
 80153f4:	697b      	ldr	r3, [r7, #20]
 80153f6:	4413      	add	r3, r2
 80153f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80153fc:	689b      	ldr	r3, [r3, #8]
 80153fe:	693a      	ldr	r2, [r7, #16]
 8015400:	4013      	ands	r3, r2
 8015402:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015404:	68bb      	ldr	r3, [r7, #8]
}
 8015406:	4618      	mov	r0, r3
 8015408:	371c      	adds	r7, #28
 801540a:	46bd      	mov	sp, r7
 801540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015410:	4770      	bx	lr

08015412 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8015412:	b480      	push	{r7}
 8015414:	b083      	sub	sp, #12
 8015416:	af00      	add	r7, sp, #0
 8015418:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	695b      	ldr	r3, [r3, #20]
 801541e:	f003 0301 	and.w	r3, r3, #1
}
 8015422:	4618      	mov	r0, r3
 8015424:	370c      	adds	r7, #12
 8015426:	46bd      	mov	sp, r7
 8015428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801542c:	4770      	bx	lr
	...

08015430 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8015430:	b480      	push	{r7}
 8015432:	b085      	sub	sp, #20
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015442:	681a      	ldr	r2, [r3, #0]
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801544a:	4619      	mov	r1, r3
 801544c:	4b09      	ldr	r3, [pc, #36]	@ (8015474 <USB_ActivateSetup+0x44>)
 801544e:	4013      	ands	r3, r2
 8015450:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015458:	685b      	ldr	r3, [r3, #4]
 801545a:	68fa      	ldr	r2, [r7, #12]
 801545c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015464:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015466:	2300      	movs	r3, #0
}
 8015468:	4618      	mov	r0, r3
 801546a:	3714      	adds	r7, #20
 801546c:	46bd      	mov	sp, r7
 801546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015472:	4770      	bx	lr
 8015474:	fffff800 	.word	0xfffff800

08015478 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8015478:	b480      	push	{r7}
 801547a:	b087      	sub	sp, #28
 801547c:	af00      	add	r7, sp, #0
 801547e:	60f8      	str	r0, [r7, #12]
 8015480:	460b      	mov	r3, r1
 8015482:	607a      	str	r2, [r7, #4]
 8015484:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	333c      	adds	r3, #60	@ 0x3c
 801548e:	3304      	adds	r3, #4
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8015494:	693b      	ldr	r3, [r7, #16]
 8015496:	4a26      	ldr	r2, [pc, #152]	@ (8015530 <USB_EP0_OutStart+0xb8>)
 8015498:	4293      	cmp	r3, r2
 801549a:	d90a      	bls.n	80154b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801549c:	697b      	ldr	r3, [r7, #20]
 801549e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80154a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80154ac:	d101      	bne.n	80154b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80154ae:	2300      	movs	r3, #0
 80154b0:	e037      	b.n	8015522 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80154b2:	697b      	ldr	r3, [r7, #20]
 80154b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80154b8:	461a      	mov	r2, r3
 80154ba:	2300      	movs	r3, #0
 80154bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80154be:	697b      	ldr	r3, [r7, #20]
 80154c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80154c4:	691b      	ldr	r3, [r3, #16]
 80154c6:	697a      	ldr	r2, [r7, #20]
 80154c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80154cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80154d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80154d2:	697b      	ldr	r3, [r7, #20]
 80154d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80154d8:	691b      	ldr	r3, [r3, #16]
 80154da:	697a      	ldr	r2, [r7, #20]
 80154dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80154e0:	f043 0318 	orr.w	r3, r3, #24
 80154e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80154e6:	697b      	ldr	r3, [r7, #20]
 80154e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80154ec:	691b      	ldr	r3, [r3, #16]
 80154ee:	697a      	ldr	r2, [r7, #20]
 80154f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80154f4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80154f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80154fa:	7afb      	ldrb	r3, [r7, #11]
 80154fc:	2b01      	cmp	r3, #1
 80154fe:	d10f      	bne.n	8015520 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015500:	697b      	ldr	r3, [r7, #20]
 8015502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015506:	461a      	mov	r2, r3
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801550c:	697b      	ldr	r3, [r7, #20]
 801550e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	697a      	ldr	r2, [r7, #20]
 8015516:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801551a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 801551e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015520:	2300      	movs	r3, #0
}
 8015522:	4618      	mov	r0, r3
 8015524:	371c      	adds	r7, #28
 8015526:	46bd      	mov	sp, r7
 8015528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552c:	4770      	bx	lr
 801552e:	bf00      	nop
 8015530:	4f54300a 	.word	0x4f54300a

08015534 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8015534:	b480      	push	{r7}
 8015536:	b085      	sub	sp, #20
 8015538:	af00      	add	r7, sp, #0
 801553a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801553c:	2300      	movs	r3, #0
 801553e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	3301      	adds	r3, #1
 8015544:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801554c:	d901      	bls.n	8015552 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801554e:	2303      	movs	r3, #3
 8015550:	e01b      	b.n	801558a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	691b      	ldr	r3, [r3, #16]
 8015556:	2b00      	cmp	r3, #0
 8015558:	daf2      	bge.n	8015540 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801555a:	2300      	movs	r3, #0
 801555c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	691b      	ldr	r3, [r3, #16]
 8015562:	f043 0201 	orr.w	r2, r3, #1
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	3301      	adds	r3, #1
 801556e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015576:	d901      	bls.n	801557c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8015578:	2303      	movs	r3, #3
 801557a:	e006      	b.n	801558a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	691b      	ldr	r3, [r3, #16]
 8015580:	f003 0301 	and.w	r3, r3, #1
 8015584:	2b01      	cmp	r3, #1
 8015586:	d0f0      	beq.n	801556a <USB_CoreReset+0x36>

  return HAL_OK;
 8015588:	2300      	movs	r3, #0
}
 801558a:	4618      	mov	r0, r3
 801558c:	3714      	adds	r7, #20
 801558e:	46bd      	mov	sp, r7
 8015590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015594:	4770      	bx	lr
	...

08015598 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b084      	sub	sp, #16
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]
 80155a0:	460b      	mov	r3, r1
 80155a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80155a4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80155a8:	f002 fd12 	bl	8017fd0 <USBD_static_malloc>
 80155ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d109      	bne.n	80155c8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	32b0      	adds	r2, #176	@ 0xb0
 80155be:	2100      	movs	r1, #0
 80155c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80155c4:	2302      	movs	r3, #2
 80155c6:	e0d4      	b.n	8015772 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80155c8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80155cc:	2100      	movs	r1, #0
 80155ce:	68f8      	ldr	r0, [r7, #12]
 80155d0:	f003 ffd8 	bl	8019584 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	32b0      	adds	r2, #176	@ 0xb0
 80155de:	68f9      	ldr	r1, [r7, #12]
 80155e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	32b0      	adds	r2, #176	@ 0xb0
 80155ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	7c1b      	ldrb	r3, [r3, #16]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d138      	bne.n	8015672 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015600:	4b5e      	ldr	r3, [pc, #376]	@ (801577c <USBD_CDC_Init+0x1e4>)
 8015602:	7819      	ldrb	r1, [r3, #0]
 8015604:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015608:	2202      	movs	r2, #2
 801560a:	6878      	ldr	r0, [r7, #4]
 801560c:	f002 fbbd 	bl	8017d8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015610:	4b5a      	ldr	r3, [pc, #360]	@ (801577c <USBD_CDC_Init+0x1e4>)
 8015612:	781b      	ldrb	r3, [r3, #0]
 8015614:	f003 020f 	and.w	r2, r3, #15
 8015618:	6879      	ldr	r1, [r7, #4]
 801561a:	4613      	mov	r3, r2
 801561c:	009b      	lsls	r3, r3, #2
 801561e:	4413      	add	r3, r2
 8015620:	009b      	lsls	r3, r3, #2
 8015622:	440b      	add	r3, r1
 8015624:	3324      	adds	r3, #36	@ 0x24
 8015626:	2201      	movs	r2, #1
 8015628:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801562a:	4b55      	ldr	r3, [pc, #340]	@ (8015780 <USBD_CDC_Init+0x1e8>)
 801562c:	7819      	ldrb	r1, [r3, #0]
 801562e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015632:	2202      	movs	r2, #2
 8015634:	6878      	ldr	r0, [r7, #4]
 8015636:	f002 fba8 	bl	8017d8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801563a:	4b51      	ldr	r3, [pc, #324]	@ (8015780 <USBD_CDC_Init+0x1e8>)
 801563c:	781b      	ldrb	r3, [r3, #0]
 801563e:	f003 020f 	and.w	r2, r3, #15
 8015642:	6879      	ldr	r1, [r7, #4]
 8015644:	4613      	mov	r3, r2
 8015646:	009b      	lsls	r3, r3, #2
 8015648:	4413      	add	r3, r2
 801564a:	009b      	lsls	r3, r3, #2
 801564c:	440b      	add	r3, r1
 801564e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015652:	2201      	movs	r2, #1
 8015654:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8015656:	4b4b      	ldr	r3, [pc, #300]	@ (8015784 <USBD_CDC_Init+0x1ec>)
 8015658:	781b      	ldrb	r3, [r3, #0]
 801565a:	f003 020f 	and.w	r2, r3, #15
 801565e:	6879      	ldr	r1, [r7, #4]
 8015660:	4613      	mov	r3, r2
 8015662:	009b      	lsls	r3, r3, #2
 8015664:	4413      	add	r3, r2
 8015666:	009b      	lsls	r3, r3, #2
 8015668:	440b      	add	r3, r1
 801566a:	3326      	adds	r3, #38	@ 0x26
 801566c:	2210      	movs	r2, #16
 801566e:	801a      	strh	r2, [r3, #0]
 8015670:	e035      	b.n	80156de <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015672:	4b42      	ldr	r3, [pc, #264]	@ (801577c <USBD_CDC_Init+0x1e4>)
 8015674:	7819      	ldrb	r1, [r3, #0]
 8015676:	2340      	movs	r3, #64	@ 0x40
 8015678:	2202      	movs	r2, #2
 801567a:	6878      	ldr	r0, [r7, #4]
 801567c:	f002 fb85 	bl	8017d8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015680:	4b3e      	ldr	r3, [pc, #248]	@ (801577c <USBD_CDC_Init+0x1e4>)
 8015682:	781b      	ldrb	r3, [r3, #0]
 8015684:	f003 020f 	and.w	r2, r3, #15
 8015688:	6879      	ldr	r1, [r7, #4]
 801568a:	4613      	mov	r3, r2
 801568c:	009b      	lsls	r3, r3, #2
 801568e:	4413      	add	r3, r2
 8015690:	009b      	lsls	r3, r3, #2
 8015692:	440b      	add	r3, r1
 8015694:	3324      	adds	r3, #36	@ 0x24
 8015696:	2201      	movs	r2, #1
 8015698:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801569a:	4b39      	ldr	r3, [pc, #228]	@ (8015780 <USBD_CDC_Init+0x1e8>)
 801569c:	7819      	ldrb	r1, [r3, #0]
 801569e:	2340      	movs	r3, #64	@ 0x40
 80156a0:	2202      	movs	r2, #2
 80156a2:	6878      	ldr	r0, [r7, #4]
 80156a4:	f002 fb71 	bl	8017d8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80156a8:	4b35      	ldr	r3, [pc, #212]	@ (8015780 <USBD_CDC_Init+0x1e8>)
 80156aa:	781b      	ldrb	r3, [r3, #0]
 80156ac:	f003 020f 	and.w	r2, r3, #15
 80156b0:	6879      	ldr	r1, [r7, #4]
 80156b2:	4613      	mov	r3, r2
 80156b4:	009b      	lsls	r3, r3, #2
 80156b6:	4413      	add	r3, r2
 80156b8:	009b      	lsls	r3, r3, #2
 80156ba:	440b      	add	r3, r1
 80156bc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80156c0:	2201      	movs	r2, #1
 80156c2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80156c4:	4b2f      	ldr	r3, [pc, #188]	@ (8015784 <USBD_CDC_Init+0x1ec>)
 80156c6:	781b      	ldrb	r3, [r3, #0]
 80156c8:	f003 020f 	and.w	r2, r3, #15
 80156cc:	6879      	ldr	r1, [r7, #4]
 80156ce:	4613      	mov	r3, r2
 80156d0:	009b      	lsls	r3, r3, #2
 80156d2:	4413      	add	r3, r2
 80156d4:	009b      	lsls	r3, r3, #2
 80156d6:	440b      	add	r3, r1
 80156d8:	3326      	adds	r3, #38	@ 0x26
 80156da:	2210      	movs	r2, #16
 80156dc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80156de:	4b29      	ldr	r3, [pc, #164]	@ (8015784 <USBD_CDC_Init+0x1ec>)
 80156e0:	7819      	ldrb	r1, [r3, #0]
 80156e2:	2308      	movs	r3, #8
 80156e4:	2203      	movs	r2, #3
 80156e6:	6878      	ldr	r0, [r7, #4]
 80156e8:	f002 fb4f 	bl	8017d8a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80156ec:	4b25      	ldr	r3, [pc, #148]	@ (8015784 <USBD_CDC_Init+0x1ec>)
 80156ee:	781b      	ldrb	r3, [r3, #0]
 80156f0:	f003 020f 	and.w	r2, r3, #15
 80156f4:	6879      	ldr	r1, [r7, #4]
 80156f6:	4613      	mov	r3, r2
 80156f8:	009b      	lsls	r3, r3, #2
 80156fa:	4413      	add	r3, r2
 80156fc:	009b      	lsls	r3, r3, #2
 80156fe:	440b      	add	r3, r1
 8015700:	3324      	adds	r3, #36	@ 0x24
 8015702:	2201      	movs	r2, #1
 8015704:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	2200      	movs	r2, #0
 801570a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015714:	687a      	ldr	r2, [r7, #4]
 8015716:	33b0      	adds	r3, #176	@ 0xb0
 8015718:	009b      	lsls	r3, r3, #2
 801571a:	4413      	add	r3, r2
 801571c:	685b      	ldr	r3, [r3, #4]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	2200      	movs	r2, #0
 8015726:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	2200      	movs	r2, #0
 801572e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8015738:	2b00      	cmp	r3, #0
 801573a:	d101      	bne.n	8015740 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801573c:	2302      	movs	r3, #2
 801573e:	e018      	b.n	8015772 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	7c1b      	ldrb	r3, [r3, #16]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d10a      	bne.n	801575e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015748:	4b0d      	ldr	r3, [pc, #52]	@ (8015780 <USBD_CDC_Init+0x1e8>)
 801574a:	7819      	ldrb	r1, [r3, #0]
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015752:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015756:	6878      	ldr	r0, [r7, #4]
 8015758:	f002 fc06 	bl	8017f68 <USBD_LL_PrepareReceive>
 801575c:	e008      	b.n	8015770 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801575e:	4b08      	ldr	r3, [pc, #32]	@ (8015780 <USBD_CDC_Init+0x1e8>)
 8015760:	7819      	ldrb	r1, [r3, #0]
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015768:	2340      	movs	r3, #64	@ 0x40
 801576a:	6878      	ldr	r0, [r7, #4]
 801576c:	f002 fbfc 	bl	8017f68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015770:	2300      	movs	r3, #0
}
 8015772:	4618      	mov	r0, r3
 8015774:	3710      	adds	r7, #16
 8015776:	46bd      	mov	sp, r7
 8015778:	bd80      	pop	{r7, pc}
 801577a:	bf00      	nop
 801577c:	24000097 	.word	0x24000097
 8015780:	24000098 	.word	0x24000098
 8015784:	24000099 	.word	0x24000099

08015788 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b082      	sub	sp, #8
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
 8015790:	460b      	mov	r3, r1
 8015792:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8015794:	4b3a      	ldr	r3, [pc, #232]	@ (8015880 <USBD_CDC_DeInit+0xf8>)
 8015796:	781b      	ldrb	r3, [r3, #0]
 8015798:	4619      	mov	r1, r3
 801579a:	6878      	ldr	r0, [r7, #4]
 801579c:	f002 fb1b 	bl	8017dd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80157a0:	4b37      	ldr	r3, [pc, #220]	@ (8015880 <USBD_CDC_DeInit+0xf8>)
 80157a2:	781b      	ldrb	r3, [r3, #0]
 80157a4:	f003 020f 	and.w	r2, r3, #15
 80157a8:	6879      	ldr	r1, [r7, #4]
 80157aa:	4613      	mov	r3, r2
 80157ac:	009b      	lsls	r3, r3, #2
 80157ae:	4413      	add	r3, r2
 80157b0:	009b      	lsls	r3, r3, #2
 80157b2:	440b      	add	r3, r1
 80157b4:	3324      	adds	r3, #36	@ 0x24
 80157b6:	2200      	movs	r2, #0
 80157b8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80157ba:	4b32      	ldr	r3, [pc, #200]	@ (8015884 <USBD_CDC_DeInit+0xfc>)
 80157bc:	781b      	ldrb	r3, [r3, #0]
 80157be:	4619      	mov	r1, r3
 80157c0:	6878      	ldr	r0, [r7, #4]
 80157c2:	f002 fb08 	bl	8017dd6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80157c6:	4b2f      	ldr	r3, [pc, #188]	@ (8015884 <USBD_CDC_DeInit+0xfc>)
 80157c8:	781b      	ldrb	r3, [r3, #0]
 80157ca:	f003 020f 	and.w	r2, r3, #15
 80157ce:	6879      	ldr	r1, [r7, #4]
 80157d0:	4613      	mov	r3, r2
 80157d2:	009b      	lsls	r3, r3, #2
 80157d4:	4413      	add	r3, r2
 80157d6:	009b      	lsls	r3, r3, #2
 80157d8:	440b      	add	r3, r1
 80157da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80157de:	2200      	movs	r2, #0
 80157e0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80157e2:	4b29      	ldr	r3, [pc, #164]	@ (8015888 <USBD_CDC_DeInit+0x100>)
 80157e4:	781b      	ldrb	r3, [r3, #0]
 80157e6:	4619      	mov	r1, r3
 80157e8:	6878      	ldr	r0, [r7, #4]
 80157ea:	f002 faf4 	bl	8017dd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80157ee:	4b26      	ldr	r3, [pc, #152]	@ (8015888 <USBD_CDC_DeInit+0x100>)
 80157f0:	781b      	ldrb	r3, [r3, #0]
 80157f2:	f003 020f 	and.w	r2, r3, #15
 80157f6:	6879      	ldr	r1, [r7, #4]
 80157f8:	4613      	mov	r3, r2
 80157fa:	009b      	lsls	r3, r3, #2
 80157fc:	4413      	add	r3, r2
 80157fe:	009b      	lsls	r3, r3, #2
 8015800:	440b      	add	r3, r1
 8015802:	3324      	adds	r3, #36	@ 0x24
 8015804:	2200      	movs	r2, #0
 8015806:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8015808:	4b1f      	ldr	r3, [pc, #124]	@ (8015888 <USBD_CDC_DeInit+0x100>)
 801580a:	781b      	ldrb	r3, [r3, #0]
 801580c:	f003 020f 	and.w	r2, r3, #15
 8015810:	6879      	ldr	r1, [r7, #4]
 8015812:	4613      	mov	r3, r2
 8015814:	009b      	lsls	r3, r3, #2
 8015816:	4413      	add	r3, r2
 8015818:	009b      	lsls	r3, r3, #2
 801581a:	440b      	add	r3, r1
 801581c:	3326      	adds	r3, #38	@ 0x26
 801581e:	2200      	movs	r2, #0
 8015820:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	32b0      	adds	r2, #176	@ 0xb0
 801582c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015830:	2b00      	cmp	r3, #0
 8015832:	d01f      	beq.n	8015874 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801583a:	687a      	ldr	r2, [r7, #4]
 801583c:	33b0      	adds	r3, #176	@ 0xb0
 801583e:	009b      	lsls	r3, r3, #2
 8015840:	4413      	add	r3, r2
 8015842:	685b      	ldr	r3, [r3, #4]
 8015844:	685b      	ldr	r3, [r3, #4]
 8015846:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	32b0      	adds	r2, #176	@ 0xb0
 8015852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015856:	4618      	mov	r0, r3
 8015858:	f002 fbc8 	bl	8017fec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	32b0      	adds	r2, #176	@ 0xb0
 8015866:	2100      	movs	r1, #0
 8015868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	2200      	movs	r2, #0
 8015870:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015874:	2300      	movs	r3, #0
}
 8015876:	4618      	mov	r0, r3
 8015878:	3708      	adds	r7, #8
 801587a:	46bd      	mov	sp, r7
 801587c:	bd80      	pop	{r7, pc}
 801587e:	bf00      	nop
 8015880:	24000097 	.word	0x24000097
 8015884:	24000098 	.word	0x24000098
 8015888:	24000099 	.word	0x24000099

0801588c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b086      	sub	sp, #24
 8015890:	af00      	add	r7, sp, #0
 8015892:	6078      	str	r0, [r7, #4]
 8015894:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	32b0      	adds	r2, #176	@ 0xb0
 80158a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80158a6:	2300      	movs	r3, #0
 80158a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80158aa:	2300      	movs	r3, #0
 80158ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80158ae:	2300      	movs	r3, #0
 80158b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80158b2:	693b      	ldr	r3, [r7, #16]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d101      	bne.n	80158bc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80158b8:	2303      	movs	r3, #3
 80158ba:	e0bf      	b.n	8015a3c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80158bc:	683b      	ldr	r3, [r7, #0]
 80158be:	781b      	ldrb	r3, [r3, #0]
 80158c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d050      	beq.n	801596a <USBD_CDC_Setup+0xde>
 80158c8:	2b20      	cmp	r3, #32
 80158ca:	f040 80af 	bne.w	8015a2c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80158ce:	683b      	ldr	r3, [r7, #0]
 80158d0:	88db      	ldrh	r3, [r3, #6]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d03a      	beq.n	801594c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80158d6:	683b      	ldr	r3, [r7, #0]
 80158d8:	781b      	ldrb	r3, [r3, #0]
 80158da:	b25b      	sxtb	r3, r3
 80158dc:	2b00      	cmp	r3, #0
 80158de:	da1b      	bge.n	8015918 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80158e6:	687a      	ldr	r2, [r7, #4]
 80158e8:	33b0      	adds	r3, #176	@ 0xb0
 80158ea:	009b      	lsls	r3, r3, #2
 80158ec:	4413      	add	r3, r2
 80158ee:	685b      	ldr	r3, [r3, #4]
 80158f0:	689b      	ldr	r3, [r3, #8]
 80158f2:	683a      	ldr	r2, [r7, #0]
 80158f4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80158f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80158f8:	683a      	ldr	r2, [r7, #0]
 80158fa:	88d2      	ldrh	r2, [r2, #6]
 80158fc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80158fe:	683b      	ldr	r3, [r7, #0]
 8015900:	88db      	ldrh	r3, [r3, #6]
 8015902:	2b07      	cmp	r3, #7
 8015904:	bf28      	it	cs
 8015906:	2307      	movcs	r3, #7
 8015908:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801590a:	693b      	ldr	r3, [r7, #16]
 801590c:	89fa      	ldrh	r2, [r7, #14]
 801590e:	4619      	mov	r1, r3
 8015910:	6878      	ldr	r0, [r7, #4]
 8015912:	f001 fdbd 	bl	8017490 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015916:	e090      	b.n	8015a3a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015918:	683b      	ldr	r3, [r7, #0]
 801591a:	785a      	ldrb	r2, [r3, #1]
 801591c:	693b      	ldr	r3, [r7, #16]
 801591e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015922:	683b      	ldr	r3, [r7, #0]
 8015924:	88db      	ldrh	r3, [r3, #6]
 8015926:	2b3f      	cmp	r3, #63	@ 0x3f
 8015928:	d803      	bhi.n	8015932 <USBD_CDC_Setup+0xa6>
 801592a:	683b      	ldr	r3, [r7, #0]
 801592c:	88db      	ldrh	r3, [r3, #6]
 801592e:	b2da      	uxtb	r2, r3
 8015930:	e000      	b.n	8015934 <USBD_CDC_Setup+0xa8>
 8015932:	2240      	movs	r2, #64	@ 0x40
 8015934:	693b      	ldr	r3, [r7, #16]
 8015936:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801593a:	6939      	ldr	r1, [r7, #16]
 801593c:	693b      	ldr	r3, [r7, #16]
 801593e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8015942:	461a      	mov	r2, r3
 8015944:	6878      	ldr	r0, [r7, #4]
 8015946:	f001 fdcf 	bl	80174e8 <USBD_CtlPrepareRx>
      break;
 801594a:	e076      	b.n	8015a3a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015952:	687a      	ldr	r2, [r7, #4]
 8015954:	33b0      	adds	r3, #176	@ 0xb0
 8015956:	009b      	lsls	r3, r3, #2
 8015958:	4413      	add	r3, r2
 801595a:	685b      	ldr	r3, [r3, #4]
 801595c:	689b      	ldr	r3, [r3, #8]
 801595e:	683a      	ldr	r2, [r7, #0]
 8015960:	7850      	ldrb	r0, [r2, #1]
 8015962:	2200      	movs	r2, #0
 8015964:	6839      	ldr	r1, [r7, #0]
 8015966:	4798      	blx	r3
      break;
 8015968:	e067      	b.n	8015a3a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801596a:	683b      	ldr	r3, [r7, #0]
 801596c:	785b      	ldrb	r3, [r3, #1]
 801596e:	2b0b      	cmp	r3, #11
 8015970:	d851      	bhi.n	8015a16 <USBD_CDC_Setup+0x18a>
 8015972:	a201      	add	r2, pc, #4	@ (adr r2, 8015978 <USBD_CDC_Setup+0xec>)
 8015974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015978:	080159a9 	.word	0x080159a9
 801597c:	08015a25 	.word	0x08015a25
 8015980:	08015a17 	.word	0x08015a17
 8015984:	08015a17 	.word	0x08015a17
 8015988:	08015a17 	.word	0x08015a17
 801598c:	08015a17 	.word	0x08015a17
 8015990:	08015a17 	.word	0x08015a17
 8015994:	08015a17 	.word	0x08015a17
 8015998:	08015a17 	.word	0x08015a17
 801599c:	08015a17 	.word	0x08015a17
 80159a0:	080159d3 	.word	0x080159d3
 80159a4:	080159fd 	.word	0x080159fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80159ae:	b2db      	uxtb	r3, r3
 80159b0:	2b03      	cmp	r3, #3
 80159b2:	d107      	bne.n	80159c4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80159b4:	f107 030a 	add.w	r3, r7, #10
 80159b8:	2202      	movs	r2, #2
 80159ba:	4619      	mov	r1, r3
 80159bc:	6878      	ldr	r0, [r7, #4]
 80159be:	f001 fd67 	bl	8017490 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80159c2:	e032      	b.n	8015a2a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80159c4:	6839      	ldr	r1, [r7, #0]
 80159c6:	6878      	ldr	r0, [r7, #4]
 80159c8:	f001 fce5 	bl	8017396 <USBD_CtlError>
            ret = USBD_FAIL;
 80159cc:	2303      	movs	r3, #3
 80159ce:	75fb      	strb	r3, [r7, #23]
          break;
 80159d0:	e02b      	b.n	8015a2a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80159d8:	b2db      	uxtb	r3, r3
 80159da:	2b03      	cmp	r3, #3
 80159dc:	d107      	bne.n	80159ee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80159de:	f107 030d 	add.w	r3, r7, #13
 80159e2:	2201      	movs	r2, #1
 80159e4:	4619      	mov	r1, r3
 80159e6:	6878      	ldr	r0, [r7, #4]
 80159e8:	f001 fd52 	bl	8017490 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80159ec:	e01d      	b.n	8015a2a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80159ee:	6839      	ldr	r1, [r7, #0]
 80159f0:	6878      	ldr	r0, [r7, #4]
 80159f2:	f001 fcd0 	bl	8017396 <USBD_CtlError>
            ret = USBD_FAIL;
 80159f6:	2303      	movs	r3, #3
 80159f8:	75fb      	strb	r3, [r7, #23]
          break;
 80159fa:	e016      	b.n	8015a2a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015a02:	b2db      	uxtb	r3, r3
 8015a04:	2b03      	cmp	r3, #3
 8015a06:	d00f      	beq.n	8015a28 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015a08:	6839      	ldr	r1, [r7, #0]
 8015a0a:	6878      	ldr	r0, [r7, #4]
 8015a0c:	f001 fcc3 	bl	8017396 <USBD_CtlError>
            ret = USBD_FAIL;
 8015a10:	2303      	movs	r3, #3
 8015a12:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015a14:	e008      	b.n	8015a28 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015a16:	6839      	ldr	r1, [r7, #0]
 8015a18:	6878      	ldr	r0, [r7, #4]
 8015a1a:	f001 fcbc 	bl	8017396 <USBD_CtlError>
          ret = USBD_FAIL;
 8015a1e:	2303      	movs	r3, #3
 8015a20:	75fb      	strb	r3, [r7, #23]
          break;
 8015a22:	e002      	b.n	8015a2a <USBD_CDC_Setup+0x19e>
          break;
 8015a24:	bf00      	nop
 8015a26:	e008      	b.n	8015a3a <USBD_CDC_Setup+0x1ae>
          break;
 8015a28:	bf00      	nop
      }
      break;
 8015a2a:	e006      	b.n	8015a3a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015a2c:	6839      	ldr	r1, [r7, #0]
 8015a2e:	6878      	ldr	r0, [r7, #4]
 8015a30:	f001 fcb1 	bl	8017396 <USBD_CtlError>
      ret = USBD_FAIL;
 8015a34:	2303      	movs	r3, #3
 8015a36:	75fb      	strb	r3, [r7, #23]
      break;
 8015a38:	bf00      	nop
  }

  return (uint8_t)ret;
 8015a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	3718      	adds	r7, #24
 8015a40:	46bd      	mov	sp, r7
 8015a42:	bd80      	pop	{r7, pc}

08015a44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015a44:	b580      	push	{r7, lr}
 8015a46:	b084      	sub	sp, #16
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	6078      	str	r0, [r7, #4]
 8015a4c:	460b      	mov	r3, r1
 8015a4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015a56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	32b0      	adds	r2, #176	@ 0xb0
 8015a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d101      	bne.n	8015a6e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8015a6a:	2303      	movs	r3, #3
 8015a6c:	e065      	b.n	8015b3a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	32b0      	adds	r2, #176	@ 0xb0
 8015a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a7c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015a7e:	78fb      	ldrb	r3, [r7, #3]
 8015a80:	f003 020f 	and.w	r2, r3, #15
 8015a84:	6879      	ldr	r1, [r7, #4]
 8015a86:	4613      	mov	r3, r2
 8015a88:	009b      	lsls	r3, r3, #2
 8015a8a:	4413      	add	r3, r2
 8015a8c:	009b      	lsls	r3, r3, #2
 8015a8e:	440b      	add	r3, r1
 8015a90:	3318      	adds	r3, #24
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d02f      	beq.n	8015af8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015a98:	78fb      	ldrb	r3, [r7, #3]
 8015a9a:	f003 020f 	and.w	r2, r3, #15
 8015a9e:	6879      	ldr	r1, [r7, #4]
 8015aa0:	4613      	mov	r3, r2
 8015aa2:	009b      	lsls	r3, r3, #2
 8015aa4:	4413      	add	r3, r2
 8015aa6:	009b      	lsls	r3, r3, #2
 8015aa8:	440b      	add	r3, r1
 8015aaa:	3318      	adds	r3, #24
 8015aac:	681a      	ldr	r2, [r3, #0]
 8015aae:	78fb      	ldrb	r3, [r7, #3]
 8015ab0:	f003 010f 	and.w	r1, r3, #15
 8015ab4:	68f8      	ldr	r0, [r7, #12]
 8015ab6:	460b      	mov	r3, r1
 8015ab8:	00db      	lsls	r3, r3, #3
 8015aba:	440b      	add	r3, r1
 8015abc:	009b      	lsls	r3, r3, #2
 8015abe:	4403      	add	r3, r0
 8015ac0:	331c      	adds	r3, #28
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	fbb2 f1f3 	udiv	r1, r2, r3
 8015ac8:	fb01 f303 	mul.w	r3, r1, r3
 8015acc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d112      	bne.n	8015af8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015ad2:	78fb      	ldrb	r3, [r7, #3]
 8015ad4:	f003 020f 	and.w	r2, r3, #15
 8015ad8:	6879      	ldr	r1, [r7, #4]
 8015ada:	4613      	mov	r3, r2
 8015adc:	009b      	lsls	r3, r3, #2
 8015ade:	4413      	add	r3, r2
 8015ae0:	009b      	lsls	r3, r3, #2
 8015ae2:	440b      	add	r3, r1
 8015ae4:	3318      	adds	r3, #24
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015aea:	78f9      	ldrb	r1, [r7, #3]
 8015aec:	2300      	movs	r3, #0
 8015aee:	2200      	movs	r2, #0
 8015af0:	6878      	ldr	r0, [r7, #4]
 8015af2:	f002 fa18 	bl	8017f26 <USBD_LL_Transmit>
 8015af6:	e01f      	b.n	8015b38 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015af8:	68bb      	ldr	r3, [r7, #8]
 8015afa:	2200      	movs	r2, #0
 8015afc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015b06:	687a      	ldr	r2, [r7, #4]
 8015b08:	33b0      	adds	r3, #176	@ 0xb0
 8015b0a:	009b      	lsls	r3, r3, #2
 8015b0c:	4413      	add	r3, r2
 8015b0e:	685b      	ldr	r3, [r3, #4]
 8015b10:	691b      	ldr	r3, [r3, #16]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d010      	beq.n	8015b38 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015b1c:	687a      	ldr	r2, [r7, #4]
 8015b1e:	33b0      	adds	r3, #176	@ 0xb0
 8015b20:	009b      	lsls	r3, r3, #2
 8015b22:	4413      	add	r3, r2
 8015b24:	685b      	ldr	r3, [r3, #4]
 8015b26:	691b      	ldr	r3, [r3, #16]
 8015b28:	68ba      	ldr	r2, [r7, #8]
 8015b2a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8015b2e:	68ba      	ldr	r2, [r7, #8]
 8015b30:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8015b34:	78fa      	ldrb	r2, [r7, #3]
 8015b36:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015b38:	2300      	movs	r3, #0
}
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	3710      	adds	r7, #16
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	bd80      	pop	{r7, pc}

08015b42 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015b42:	b580      	push	{r7, lr}
 8015b44:	b084      	sub	sp, #16
 8015b46:	af00      	add	r7, sp, #0
 8015b48:	6078      	str	r0, [r7, #4]
 8015b4a:	460b      	mov	r3, r1
 8015b4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	32b0      	adds	r2, #176	@ 0xb0
 8015b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	32b0      	adds	r2, #176	@ 0xb0
 8015b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d101      	bne.n	8015b74 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8015b70:	2303      	movs	r3, #3
 8015b72:	e01a      	b.n	8015baa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015b74:	78fb      	ldrb	r3, [r7, #3]
 8015b76:	4619      	mov	r1, r3
 8015b78:	6878      	ldr	r0, [r7, #4]
 8015b7a:	f002 fa16 	bl	8017faa <USBD_LL_GetRxDataSize>
 8015b7e:	4602      	mov	r2, r0
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015b8c:	687a      	ldr	r2, [r7, #4]
 8015b8e:	33b0      	adds	r3, #176	@ 0xb0
 8015b90:	009b      	lsls	r3, r3, #2
 8015b92:	4413      	add	r3, r2
 8015b94:	685b      	ldr	r3, [r3, #4]
 8015b96:	68db      	ldr	r3, [r3, #12]
 8015b98:	68fa      	ldr	r2, [r7, #12]
 8015b9a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8015b9e:	68fa      	ldr	r2, [r7, #12]
 8015ba0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8015ba4:	4611      	mov	r1, r2
 8015ba6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015ba8:	2300      	movs	r3, #0
}
 8015baa:	4618      	mov	r0, r3
 8015bac:	3710      	adds	r7, #16
 8015bae:	46bd      	mov	sp, r7
 8015bb0:	bd80      	pop	{r7, pc}

08015bb2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015bb2:	b580      	push	{r7, lr}
 8015bb4:	b084      	sub	sp, #16
 8015bb6:	af00      	add	r7, sp, #0
 8015bb8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	32b0      	adds	r2, #176	@ 0xb0
 8015bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bc8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d101      	bne.n	8015bd4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015bd0:	2303      	movs	r3, #3
 8015bd2:	e024      	b.n	8015c1e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015bda:	687a      	ldr	r2, [r7, #4]
 8015bdc:	33b0      	adds	r3, #176	@ 0xb0
 8015bde:	009b      	lsls	r3, r3, #2
 8015be0:	4413      	add	r3, r2
 8015be2:	685b      	ldr	r3, [r3, #4]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d019      	beq.n	8015c1c <USBD_CDC_EP0_RxReady+0x6a>
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8015bee:	2bff      	cmp	r3, #255	@ 0xff
 8015bf0:	d014      	beq.n	8015c1c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015bf8:	687a      	ldr	r2, [r7, #4]
 8015bfa:	33b0      	adds	r3, #176	@ 0xb0
 8015bfc:	009b      	lsls	r3, r3, #2
 8015bfe:	4413      	add	r3, r2
 8015c00:	685b      	ldr	r3, [r3, #4]
 8015c02:	689b      	ldr	r3, [r3, #8]
 8015c04:	68fa      	ldr	r2, [r7, #12]
 8015c06:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8015c0a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015c0c:	68fa      	ldr	r2, [r7, #12]
 8015c0e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015c12:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	22ff      	movs	r2, #255	@ 0xff
 8015c18:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8015c1c:	2300      	movs	r3, #0
}
 8015c1e:	4618      	mov	r0, r3
 8015c20:	3710      	adds	r7, #16
 8015c22:	46bd      	mov	sp, r7
 8015c24:	bd80      	pop	{r7, pc}
	...

08015c28 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b086      	sub	sp, #24
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015c30:	2182      	movs	r1, #130	@ 0x82
 8015c32:	4818      	ldr	r0, [pc, #96]	@ (8015c94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015c34:	f000 fd4f 	bl	80166d6 <USBD_GetEpDesc>
 8015c38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015c3a:	2101      	movs	r1, #1
 8015c3c:	4815      	ldr	r0, [pc, #84]	@ (8015c94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015c3e:	f000 fd4a 	bl	80166d6 <USBD_GetEpDesc>
 8015c42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015c44:	2181      	movs	r1, #129	@ 0x81
 8015c46:	4813      	ldr	r0, [pc, #76]	@ (8015c94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015c48:	f000 fd45 	bl	80166d6 <USBD_GetEpDesc>
 8015c4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015c4e:	697b      	ldr	r3, [r7, #20]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d002      	beq.n	8015c5a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015c54:	697b      	ldr	r3, [r7, #20]
 8015c56:	2210      	movs	r2, #16
 8015c58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015c5a:	693b      	ldr	r3, [r7, #16]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d006      	beq.n	8015c6e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015c60:	693b      	ldr	r3, [r7, #16]
 8015c62:	2200      	movs	r2, #0
 8015c64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015c68:	711a      	strb	r2, [r3, #4]
 8015c6a:	2200      	movs	r2, #0
 8015c6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d006      	beq.n	8015c82 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	2200      	movs	r2, #0
 8015c78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015c7c:	711a      	strb	r2, [r3, #4]
 8015c7e:	2200      	movs	r2, #0
 8015c80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	2243      	movs	r2, #67	@ 0x43
 8015c86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015c88:	4b02      	ldr	r3, [pc, #8]	@ (8015c94 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	3718      	adds	r7, #24
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	bd80      	pop	{r7, pc}
 8015c92:	bf00      	nop
 8015c94:	24000054 	.word	0x24000054

08015c98 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b086      	sub	sp, #24
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015ca0:	2182      	movs	r1, #130	@ 0x82
 8015ca2:	4818      	ldr	r0, [pc, #96]	@ (8015d04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015ca4:	f000 fd17 	bl	80166d6 <USBD_GetEpDesc>
 8015ca8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015caa:	2101      	movs	r1, #1
 8015cac:	4815      	ldr	r0, [pc, #84]	@ (8015d04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015cae:	f000 fd12 	bl	80166d6 <USBD_GetEpDesc>
 8015cb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015cb4:	2181      	movs	r1, #129	@ 0x81
 8015cb6:	4813      	ldr	r0, [pc, #76]	@ (8015d04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015cb8:	f000 fd0d 	bl	80166d6 <USBD_GetEpDesc>
 8015cbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015cbe:	697b      	ldr	r3, [r7, #20]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d002      	beq.n	8015cca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015cc4:	697b      	ldr	r3, [r7, #20]
 8015cc6:	2210      	movs	r2, #16
 8015cc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015cca:	693b      	ldr	r3, [r7, #16]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d006      	beq.n	8015cde <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015cd0:	693b      	ldr	r3, [r7, #16]
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	711a      	strb	r2, [r3, #4]
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	f042 0202 	orr.w	r2, r2, #2
 8015cdc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015cde:	68fb      	ldr	r3, [r7, #12]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d006      	beq.n	8015cf2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	2200      	movs	r2, #0
 8015ce8:	711a      	strb	r2, [r3, #4]
 8015cea:	2200      	movs	r2, #0
 8015cec:	f042 0202 	orr.w	r2, r2, #2
 8015cf0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	2243      	movs	r2, #67	@ 0x43
 8015cf6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015cf8:	4b02      	ldr	r3, [pc, #8]	@ (8015d04 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	3718      	adds	r7, #24
 8015cfe:	46bd      	mov	sp, r7
 8015d00:	bd80      	pop	{r7, pc}
 8015d02:	bf00      	nop
 8015d04:	24000054 	.word	0x24000054

08015d08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b086      	sub	sp, #24
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015d10:	2182      	movs	r1, #130	@ 0x82
 8015d12:	4818      	ldr	r0, [pc, #96]	@ (8015d74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015d14:	f000 fcdf 	bl	80166d6 <USBD_GetEpDesc>
 8015d18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015d1a:	2101      	movs	r1, #1
 8015d1c:	4815      	ldr	r0, [pc, #84]	@ (8015d74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015d1e:	f000 fcda 	bl	80166d6 <USBD_GetEpDesc>
 8015d22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015d24:	2181      	movs	r1, #129	@ 0x81
 8015d26:	4813      	ldr	r0, [pc, #76]	@ (8015d74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015d28:	f000 fcd5 	bl	80166d6 <USBD_GetEpDesc>
 8015d2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015d2e:	697b      	ldr	r3, [r7, #20]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d002      	beq.n	8015d3a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015d34:	697b      	ldr	r3, [r7, #20]
 8015d36:	2210      	movs	r2, #16
 8015d38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015d3a:	693b      	ldr	r3, [r7, #16]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d006      	beq.n	8015d4e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015d40:	693b      	ldr	r3, [r7, #16]
 8015d42:	2200      	movs	r2, #0
 8015d44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015d48:	711a      	strb	r2, [r3, #4]
 8015d4a:	2200      	movs	r2, #0
 8015d4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d006      	beq.n	8015d62 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	2200      	movs	r2, #0
 8015d58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015d5c:	711a      	strb	r2, [r3, #4]
 8015d5e:	2200      	movs	r2, #0
 8015d60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	2243      	movs	r2, #67	@ 0x43
 8015d66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015d68:	4b02      	ldr	r3, [pc, #8]	@ (8015d74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	3718      	adds	r7, #24
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	bd80      	pop	{r7, pc}
 8015d72:	bf00      	nop
 8015d74:	24000054 	.word	0x24000054

08015d78 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015d78:	b480      	push	{r7}
 8015d7a:	b083      	sub	sp, #12
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	220a      	movs	r2, #10
 8015d84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015d86:	4b03      	ldr	r3, [pc, #12]	@ (8015d94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015d88:	4618      	mov	r0, r3
 8015d8a:	370c      	adds	r7, #12
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d92:	4770      	bx	lr
 8015d94:	24000010 	.word	0x24000010

08015d98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015d98:	b480      	push	{r7}
 8015d9a:	b083      	sub	sp, #12
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	6078      	str	r0, [r7, #4]
 8015da0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015da2:	683b      	ldr	r3, [r7, #0]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d101      	bne.n	8015dac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015da8:	2303      	movs	r3, #3
 8015daa:	e009      	b.n	8015dc0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015db2:	687a      	ldr	r2, [r7, #4]
 8015db4:	33b0      	adds	r3, #176	@ 0xb0
 8015db6:	009b      	lsls	r3, r3, #2
 8015db8:	4413      	add	r3, r2
 8015dba:	683a      	ldr	r2, [r7, #0]
 8015dbc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015dbe:	2300      	movs	r3, #0
}
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	370c      	adds	r7, #12
 8015dc4:	46bd      	mov	sp, r7
 8015dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dca:	4770      	bx	lr

08015dcc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015dcc:	b480      	push	{r7}
 8015dce:	b087      	sub	sp, #28
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	60f8      	str	r0, [r7, #12]
 8015dd4:	60b9      	str	r1, [r7, #8]
 8015dd6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	32b0      	adds	r2, #176	@ 0xb0
 8015de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015de6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015de8:	697b      	ldr	r3, [r7, #20]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d101      	bne.n	8015df2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015dee:	2303      	movs	r3, #3
 8015df0:	e008      	b.n	8015e04 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015df2:	697b      	ldr	r3, [r7, #20]
 8015df4:	68ba      	ldr	r2, [r7, #8]
 8015df6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8015dfa:	697b      	ldr	r3, [r7, #20]
 8015dfc:	687a      	ldr	r2, [r7, #4]
 8015dfe:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8015e02:	2300      	movs	r3, #0
}
 8015e04:	4618      	mov	r0, r3
 8015e06:	371c      	adds	r7, #28
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0e:	4770      	bx	lr

08015e10 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015e10:	b480      	push	{r7}
 8015e12:	b085      	sub	sp, #20
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
 8015e18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	32b0      	adds	r2, #176	@ 0xb0
 8015e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d101      	bne.n	8015e34 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015e30:	2303      	movs	r3, #3
 8015e32:	e004      	b.n	8015e3e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	683a      	ldr	r2, [r7, #0]
 8015e38:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8015e3c:	2300      	movs	r3, #0
}
 8015e3e:	4618      	mov	r0, r3
 8015e40:	3714      	adds	r7, #20
 8015e42:	46bd      	mov	sp, r7
 8015e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e48:	4770      	bx	lr
	...

08015e4c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b084      	sub	sp, #16
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	32b0      	adds	r2, #176	@ 0xb0
 8015e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e62:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015e64:	2301      	movs	r3, #1
 8015e66:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015e68:	68bb      	ldr	r3, [r7, #8]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d101      	bne.n	8015e72 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015e6e:	2303      	movs	r3, #3
 8015e70:	e025      	b.n	8015ebe <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8015e72:	68bb      	ldr	r3, [r7, #8]
 8015e74:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d11f      	bne.n	8015ebc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015e7c:	68bb      	ldr	r3, [r7, #8]
 8015e7e:	2201      	movs	r2, #1
 8015e80:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015e84:	4b10      	ldr	r3, [pc, #64]	@ (8015ec8 <USBD_CDC_TransmitPacket+0x7c>)
 8015e86:	781b      	ldrb	r3, [r3, #0]
 8015e88:	f003 020f 	and.w	r2, r3, #15
 8015e8c:	68bb      	ldr	r3, [r7, #8]
 8015e8e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8015e92:	6878      	ldr	r0, [r7, #4]
 8015e94:	4613      	mov	r3, r2
 8015e96:	009b      	lsls	r3, r3, #2
 8015e98:	4413      	add	r3, r2
 8015e9a:	009b      	lsls	r3, r3, #2
 8015e9c:	4403      	add	r3, r0
 8015e9e:	3318      	adds	r3, #24
 8015ea0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8015ea2:	4b09      	ldr	r3, [pc, #36]	@ (8015ec8 <USBD_CDC_TransmitPacket+0x7c>)
 8015ea4:	7819      	ldrb	r1, [r3, #0]
 8015ea6:	68bb      	ldr	r3, [r7, #8]
 8015ea8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8015eac:	68bb      	ldr	r3, [r7, #8]
 8015eae:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8015eb2:	6878      	ldr	r0, [r7, #4]
 8015eb4:	f002 f837 	bl	8017f26 <USBD_LL_Transmit>

    ret = USBD_OK;
 8015eb8:	2300      	movs	r3, #0
 8015eba:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	3710      	adds	r7, #16
 8015ec2:	46bd      	mov	sp, r7
 8015ec4:	bd80      	pop	{r7, pc}
 8015ec6:	bf00      	nop
 8015ec8:	24000097 	.word	0x24000097

08015ecc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	b084      	sub	sp, #16
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	32b0      	adds	r2, #176	@ 0xb0
 8015ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ee2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	32b0      	adds	r2, #176	@ 0xb0
 8015eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d101      	bne.n	8015efa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8015ef6:	2303      	movs	r3, #3
 8015ef8:	e018      	b.n	8015f2c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	7c1b      	ldrb	r3, [r3, #16]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d10a      	bne.n	8015f18 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015f02:	4b0c      	ldr	r3, [pc, #48]	@ (8015f34 <USBD_CDC_ReceivePacket+0x68>)
 8015f04:	7819      	ldrb	r1, [r3, #0]
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015f0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015f10:	6878      	ldr	r0, [r7, #4]
 8015f12:	f002 f829 	bl	8017f68 <USBD_LL_PrepareReceive>
 8015f16:	e008      	b.n	8015f2a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015f18:	4b06      	ldr	r3, [pc, #24]	@ (8015f34 <USBD_CDC_ReceivePacket+0x68>)
 8015f1a:	7819      	ldrb	r1, [r3, #0]
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015f22:	2340      	movs	r3, #64	@ 0x40
 8015f24:	6878      	ldr	r0, [r7, #4]
 8015f26:	f002 f81f 	bl	8017f68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015f2a:	2300      	movs	r3, #0
}
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	3710      	adds	r7, #16
 8015f30:	46bd      	mov	sp, r7
 8015f32:	bd80      	pop	{r7, pc}
 8015f34:	24000098 	.word	0x24000098

08015f38 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015f38:	b580      	push	{r7, lr}
 8015f3a:	b086      	sub	sp, #24
 8015f3c:	af00      	add	r7, sp, #0
 8015f3e:	60f8      	str	r0, [r7, #12]
 8015f40:	60b9      	str	r1, [r7, #8]
 8015f42:	4613      	mov	r3, r2
 8015f44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d101      	bne.n	8015f50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015f4c:	2303      	movs	r3, #3
 8015f4e:	e01f      	b.n	8015f90 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	2200      	movs	r2, #0
 8015f54:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	2200      	movs	r2, #0
 8015f64:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015f68:	68bb      	ldr	r3, [r7, #8]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d003      	beq.n	8015f76 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	68ba      	ldr	r2, [r7, #8]
 8015f72:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	2201      	movs	r2, #1
 8015f7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	79fa      	ldrb	r2, [r7, #7]
 8015f82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015f84:	68f8      	ldr	r0, [r7, #12]
 8015f86:	f001 fe93 	bl	8017cb0 <USBD_LL_Init>
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f90:	4618      	mov	r0, r3
 8015f92:	3718      	adds	r7, #24
 8015f94:	46bd      	mov	sp, r7
 8015f96:	bd80      	pop	{r7, pc}

08015f98 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	b084      	sub	sp, #16
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
 8015fa0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015fa2:	2300      	movs	r3, #0
 8015fa4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015fa6:	683b      	ldr	r3, [r7, #0]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d101      	bne.n	8015fb0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015fac:	2303      	movs	r3, #3
 8015fae:	e025      	b.n	8015ffc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	683a      	ldr	r2, [r7, #0]
 8015fb4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	32ae      	adds	r2, #174	@ 0xae
 8015fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d00f      	beq.n	8015fec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	32ae      	adds	r2, #174	@ 0xae
 8015fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015fdc:	f107 020e 	add.w	r2, r7, #14
 8015fe0:	4610      	mov	r0, r2
 8015fe2:	4798      	blx	r3
 8015fe4:	4602      	mov	r2, r0
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015ff2:	1c5a      	adds	r2, r3, #1
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8015ffa:	2300      	movs	r3, #0
}
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	3710      	adds	r7, #16
 8016000:	46bd      	mov	sp, r7
 8016002:	bd80      	pop	{r7, pc}

08016004 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016004:	b580      	push	{r7, lr}
 8016006:	b082      	sub	sp, #8
 8016008:	af00      	add	r7, sp, #0
 801600a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801600c:	6878      	ldr	r0, [r7, #4]
 801600e:	f001 fea1 	bl	8017d54 <USBD_LL_Start>
 8016012:	4603      	mov	r3, r0
}
 8016014:	4618      	mov	r0, r3
 8016016:	3708      	adds	r7, #8
 8016018:	46bd      	mov	sp, r7
 801601a:	bd80      	pop	{r7, pc}

0801601c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801601c:	b480      	push	{r7}
 801601e:	b083      	sub	sp, #12
 8016020:	af00      	add	r7, sp, #0
 8016022:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016024:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8016026:	4618      	mov	r0, r3
 8016028:	370c      	adds	r7, #12
 801602a:	46bd      	mov	sp, r7
 801602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016030:	4770      	bx	lr

08016032 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016032:	b580      	push	{r7, lr}
 8016034:	b084      	sub	sp, #16
 8016036:	af00      	add	r7, sp, #0
 8016038:	6078      	str	r0, [r7, #4]
 801603a:	460b      	mov	r3, r1
 801603c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801603e:	2300      	movs	r3, #0
 8016040:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016048:	2b00      	cmp	r3, #0
 801604a:	d009      	beq.n	8016060 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	78fa      	ldrb	r2, [r7, #3]
 8016056:	4611      	mov	r1, r2
 8016058:	6878      	ldr	r0, [r7, #4]
 801605a:	4798      	blx	r3
 801605c:	4603      	mov	r3, r0
 801605e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016060:	7bfb      	ldrb	r3, [r7, #15]
}
 8016062:	4618      	mov	r0, r3
 8016064:	3710      	adds	r7, #16
 8016066:	46bd      	mov	sp, r7
 8016068:	bd80      	pop	{r7, pc}

0801606a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801606a:	b580      	push	{r7, lr}
 801606c:	b084      	sub	sp, #16
 801606e:	af00      	add	r7, sp, #0
 8016070:	6078      	str	r0, [r7, #4]
 8016072:	460b      	mov	r3, r1
 8016074:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016076:	2300      	movs	r3, #0
 8016078:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016080:	685b      	ldr	r3, [r3, #4]
 8016082:	78fa      	ldrb	r2, [r7, #3]
 8016084:	4611      	mov	r1, r2
 8016086:	6878      	ldr	r0, [r7, #4]
 8016088:	4798      	blx	r3
 801608a:	4603      	mov	r3, r0
 801608c:	2b00      	cmp	r3, #0
 801608e:	d001      	beq.n	8016094 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8016090:	2303      	movs	r3, #3
 8016092:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016094:	7bfb      	ldrb	r3, [r7, #15]
}
 8016096:	4618      	mov	r0, r3
 8016098:	3710      	adds	r7, #16
 801609a:	46bd      	mov	sp, r7
 801609c:	bd80      	pop	{r7, pc}

0801609e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801609e:	b580      	push	{r7, lr}
 80160a0:	b084      	sub	sp, #16
 80160a2:	af00      	add	r7, sp, #0
 80160a4:	6078      	str	r0, [r7, #4]
 80160a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80160ae:	6839      	ldr	r1, [r7, #0]
 80160b0:	4618      	mov	r0, r3
 80160b2:	f001 f936 	bl	8017322 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	2201      	movs	r2, #1
 80160ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80160c4:	461a      	mov	r2, r3
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80160d2:	f003 031f 	and.w	r3, r3, #31
 80160d6:	2b02      	cmp	r3, #2
 80160d8:	d01a      	beq.n	8016110 <USBD_LL_SetupStage+0x72>
 80160da:	2b02      	cmp	r3, #2
 80160dc:	d822      	bhi.n	8016124 <USBD_LL_SetupStage+0x86>
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d002      	beq.n	80160e8 <USBD_LL_SetupStage+0x4a>
 80160e2:	2b01      	cmp	r3, #1
 80160e4:	d00a      	beq.n	80160fc <USBD_LL_SetupStage+0x5e>
 80160e6:	e01d      	b.n	8016124 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80160ee:	4619      	mov	r1, r3
 80160f0:	6878      	ldr	r0, [r7, #4]
 80160f2:	f000 fb63 	bl	80167bc <USBD_StdDevReq>
 80160f6:	4603      	mov	r3, r0
 80160f8:	73fb      	strb	r3, [r7, #15]
      break;
 80160fa:	e020      	b.n	801613e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016102:	4619      	mov	r1, r3
 8016104:	6878      	ldr	r0, [r7, #4]
 8016106:	f000 fbcb 	bl	80168a0 <USBD_StdItfReq>
 801610a:	4603      	mov	r3, r0
 801610c:	73fb      	strb	r3, [r7, #15]
      break;
 801610e:	e016      	b.n	801613e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016116:	4619      	mov	r1, r3
 8016118:	6878      	ldr	r0, [r7, #4]
 801611a:	f000 fc2d 	bl	8016978 <USBD_StdEPReq>
 801611e:	4603      	mov	r3, r0
 8016120:	73fb      	strb	r3, [r7, #15]
      break;
 8016122:	e00c      	b.n	801613e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801612a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801612e:	b2db      	uxtb	r3, r3
 8016130:	4619      	mov	r1, r3
 8016132:	6878      	ldr	r0, [r7, #4]
 8016134:	f001 fe6e 	bl	8017e14 <USBD_LL_StallEP>
 8016138:	4603      	mov	r3, r0
 801613a:	73fb      	strb	r3, [r7, #15]
      break;
 801613c:	bf00      	nop
  }

  return ret;
 801613e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016140:	4618      	mov	r0, r3
 8016142:	3710      	adds	r7, #16
 8016144:	46bd      	mov	sp, r7
 8016146:	bd80      	pop	{r7, pc}

08016148 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b086      	sub	sp, #24
 801614c:	af00      	add	r7, sp, #0
 801614e:	60f8      	str	r0, [r7, #12]
 8016150:	460b      	mov	r3, r1
 8016152:	607a      	str	r2, [r7, #4]
 8016154:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8016156:	2300      	movs	r3, #0
 8016158:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801615a:	7afb      	ldrb	r3, [r7, #11]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d16e      	bne.n	801623e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8016166:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801616e:	2b03      	cmp	r3, #3
 8016170:	f040 8098 	bne.w	80162a4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8016174:	693b      	ldr	r3, [r7, #16]
 8016176:	689a      	ldr	r2, [r3, #8]
 8016178:	693b      	ldr	r3, [r7, #16]
 801617a:	68db      	ldr	r3, [r3, #12]
 801617c:	429a      	cmp	r2, r3
 801617e:	d913      	bls.n	80161a8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8016180:	693b      	ldr	r3, [r7, #16]
 8016182:	689a      	ldr	r2, [r3, #8]
 8016184:	693b      	ldr	r3, [r7, #16]
 8016186:	68db      	ldr	r3, [r3, #12]
 8016188:	1ad2      	subs	r2, r2, r3
 801618a:	693b      	ldr	r3, [r7, #16]
 801618c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801618e:	693b      	ldr	r3, [r7, #16]
 8016190:	68da      	ldr	r2, [r3, #12]
 8016192:	693b      	ldr	r3, [r7, #16]
 8016194:	689b      	ldr	r3, [r3, #8]
 8016196:	4293      	cmp	r3, r2
 8016198:	bf28      	it	cs
 801619a:	4613      	movcs	r3, r2
 801619c:	461a      	mov	r2, r3
 801619e:	6879      	ldr	r1, [r7, #4]
 80161a0:	68f8      	ldr	r0, [r7, #12]
 80161a2:	f001 f9be 	bl	8017522 <USBD_CtlContinueRx>
 80161a6:	e07d      	b.n	80162a4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80161ae:	f003 031f 	and.w	r3, r3, #31
 80161b2:	2b02      	cmp	r3, #2
 80161b4:	d014      	beq.n	80161e0 <USBD_LL_DataOutStage+0x98>
 80161b6:	2b02      	cmp	r3, #2
 80161b8:	d81d      	bhi.n	80161f6 <USBD_LL_DataOutStage+0xae>
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d002      	beq.n	80161c4 <USBD_LL_DataOutStage+0x7c>
 80161be:	2b01      	cmp	r3, #1
 80161c0:	d003      	beq.n	80161ca <USBD_LL_DataOutStage+0x82>
 80161c2:	e018      	b.n	80161f6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80161c4:	2300      	movs	r3, #0
 80161c6:	75bb      	strb	r3, [r7, #22]
            break;
 80161c8:	e018      	b.n	80161fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80161d0:	b2db      	uxtb	r3, r3
 80161d2:	4619      	mov	r1, r3
 80161d4:	68f8      	ldr	r0, [r7, #12]
 80161d6:	f000 fa64 	bl	80166a2 <USBD_CoreFindIF>
 80161da:	4603      	mov	r3, r0
 80161dc:	75bb      	strb	r3, [r7, #22]
            break;
 80161de:	e00d      	b.n	80161fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80161e6:	b2db      	uxtb	r3, r3
 80161e8:	4619      	mov	r1, r3
 80161ea:	68f8      	ldr	r0, [r7, #12]
 80161ec:	f000 fa66 	bl	80166bc <USBD_CoreFindEP>
 80161f0:	4603      	mov	r3, r0
 80161f2:	75bb      	strb	r3, [r7, #22]
            break;
 80161f4:	e002      	b.n	80161fc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80161f6:	2300      	movs	r3, #0
 80161f8:	75bb      	strb	r3, [r7, #22]
            break;
 80161fa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80161fc:	7dbb      	ldrb	r3, [r7, #22]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d119      	bne.n	8016236 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016208:	b2db      	uxtb	r3, r3
 801620a:	2b03      	cmp	r3, #3
 801620c:	d113      	bne.n	8016236 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801620e:	7dba      	ldrb	r2, [r7, #22]
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	32ae      	adds	r2, #174	@ 0xae
 8016214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016218:	691b      	ldr	r3, [r3, #16]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d00b      	beq.n	8016236 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801621e:	7dba      	ldrb	r2, [r7, #22]
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8016226:	7dba      	ldrb	r2, [r7, #22]
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	32ae      	adds	r2, #174	@ 0xae
 801622c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016230:	691b      	ldr	r3, [r3, #16]
 8016232:	68f8      	ldr	r0, [r7, #12]
 8016234:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016236:	68f8      	ldr	r0, [r7, #12]
 8016238:	f001 f984 	bl	8017544 <USBD_CtlSendStatus>
 801623c:	e032      	b.n	80162a4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801623e:	7afb      	ldrb	r3, [r7, #11]
 8016240:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016244:	b2db      	uxtb	r3, r3
 8016246:	4619      	mov	r1, r3
 8016248:	68f8      	ldr	r0, [r7, #12]
 801624a:	f000 fa37 	bl	80166bc <USBD_CoreFindEP>
 801624e:	4603      	mov	r3, r0
 8016250:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016252:	7dbb      	ldrb	r3, [r7, #22]
 8016254:	2bff      	cmp	r3, #255	@ 0xff
 8016256:	d025      	beq.n	80162a4 <USBD_LL_DataOutStage+0x15c>
 8016258:	7dbb      	ldrb	r3, [r7, #22]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d122      	bne.n	80162a4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016264:	b2db      	uxtb	r3, r3
 8016266:	2b03      	cmp	r3, #3
 8016268:	d117      	bne.n	801629a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801626a:	7dba      	ldrb	r2, [r7, #22]
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	32ae      	adds	r2, #174	@ 0xae
 8016270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016274:	699b      	ldr	r3, [r3, #24]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d00f      	beq.n	801629a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801627a:	7dba      	ldrb	r2, [r7, #22]
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8016282:	7dba      	ldrb	r2, [r7, #22]
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	32ae      	adds	r2, #174	@ 0xae
 8016288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801628c:	699b      	ldr	r3, [r3, #24]
 801628e:	7afa      	ldrb	r2, [r7, #11]
 8016290:	4611      	mov	r1, r2
 8016292:	68f8      	ldr	r0, [r7, #12]
 8016294:	4798      	blx	r3
 8016296:	4603      	mov	r3, r0
 8016298:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801629a:	7dfb      	ldrb	r3, [r7, #23]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d001      	beq.n	80162a4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80162a0:	7dfb      	ldrb	r3, [r7, #23]
 80162a2:	e000      	b.n	80162a6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80162a4:	2300      	movs	r3, #0
}
 80162a6:	4618      	mov	r0, r3
 80162a8:	3718      	adds	r7, #24
 80162aa:	46bd      	mov	sp, r7
 80162ac:	bd80      	pop	{r7, pc}

080162ae <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80162ae:	b580      	push	{r7, lr}
 80162b0:	b086      	sub	sp, #24
 80162b2:	af00      	add	r7, sp, #0
 80162b4:	60f8      	str	r0, [r7, #12]
 80162b6:	460b      	mov	r3, r1
 80162b8:	607a      	str	r2, [r7, #4]
 80162ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80162bc:	7afb      	ldrb	r3, [r7, #11]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d16f      	bne.n	80163a2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	3314      	adds	r3, #20
 80162c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80162ce:	2b02      	cmp	r3, #2
 80162d0:	d15a      	bne.n	8016388 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80162d2:	693b      	ldr	r3, [r7, #16]
 80162d4:	689a      	ldr	r2, [r3, #8]
 80162d6:	693b      	ldr	r3, [r7, #16]
 80162d8:	68db      	ldr	r3, [r3, #12]
 80162da:	429a      	cmp	r2, r3
 80162dc:	d914      	bls.n	8016308 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80162de:	693b      	ldr	r3, [r7, #16]
 80162e0:	689a      	ldr	r2, [r3, #8]
 80162e2:	693b      	ldr	r3, [r7, #16]
 80162e4:	68db      	ldr	r3, [r3, #12]
 80162e6:	1ad2      	subs	r2, r2, r3
 80162e8:	693b      	ldr	r3, [r7, #16]
 80162ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80162ec:	693b      	ldr	r3, [r7, #16]
 80162ee:	689b      	ldr	r3, [r3, #8]
 80162f0:	461a      	mov	r2, r3
 80162f2:	6879      	ldr	r1, [r7, #4]
 80162f4:	68f8      	ldr	r0, [r7, #12]
 80162f6:	f001 f8e6 	bl	80174c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80162fa:	2300      	movs	r3, #0
 80162fc:	2200      	movs	r2, #0
 80162fe:	2100      	movs	r1, #0
 8016300:	68f8      	ldr	r0, [r7, #12]
 8016302:	f001 fe31 	bl	8017f68 <USBD_LL_PrepareReceive>
 8016306:	e03f      	b.n	8016388 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016308:	693b      	ldr	r3, [r7, #16]
 801630a:	68da      	ldr	r2, [r3, #12]
 801630c:	693b      	ldr	r3, [r7, #16]
 801630e:	689b      	ldr	r3, [r3, #8]
 8016310:	429a      	cmp	r2, r3
 8016312:	d11c      	bne.n	801634e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016314:	693b      	ldr	r3, [r7, #16]
 8016316:	685a      	ldr	r2, [r3, #4]
 8016318:	693b      	ldr	r3, [r7, #16]
 801631a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801631c:	429a      	cmp	r2, r3
 801631e:	d316      	bcc.n	801634e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8016320:	693b      	ldr	r3, [r7, #16]
 8016322:	685a      	ldr	r2, [r3, #4]
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801632a:	429a      	cmp	r2, r3
 801632c:	d20f      	bcs.n	801634e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801632e:	2200      	movs	r2, #0
 8016330:	2100      	movs	r1, #0
 8016332:	68f8      	ldr	r0, [r7, #12]
 8016334:	f001 f8c7 	bl	80174c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	2200      	movs	r2, #0
 801633c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016340:	2300      	movs	r3, #0
 8016342:	2200      	movs	r2, #0
 8016344:	2100      	movs	r1, #0
 8016346:	68f8      	ldr	r0, [r7, #12]
 8016348:	f001 fe0e 	bl	8017f68 <USBD_LL_PrepareReceive>
 801634c:	e01c      	b.n	8016388 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016354:	b2db      	uxtb	r3, r3
 8016356:	2b03      	cmp	r3, #3
 8016358:	d10f      	bne.n	801637a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016360:	68db      	ldr	r3, [r3, #12]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d009      	beq.n	801637a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	2200      	movs	r2, #0
 801636a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016374:	68db      	ldr	r3, [r3, #12]
 8016376:	68f8      	ldr	r0, [r7, #12]
 8016378:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801637a:	2180      	movs	r1, #128	@ 0x80
 801637c:	68f8      	ldr	r0, [r7, #12]
 801637e:	f001 fd49 	bl	8017e14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016382:	68f8      	ldr	r0, [r7, #12]
 8016384:	f001 f8f1 	bl	801756a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801638e:	2b00      	cmp	r3, #0
 8016390:	d03a      	beq.n	8016408 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8016392:	68f8      	ldr	r0, [r7, #12]
 8016394:	f7ff fe42 	bl	801601c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	2200      	movs	r2, #0
 801639c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80163a0:	e032      	b.n	8016408 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80163a2:	7afb      	ldrb	r3, [r7, #11]
 80163a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80163a8:	b2db      	uxtb	r3, r3
 80163aa:	4619      	mov	r1, r3
 80163ac:	68f8      	ldr	r0, [r7, #12]
 80163ae:	f000 f985 	bl	80166bc <USBD_CoreFindEP>
 80163b2:	4603      	mov	r3, r0
 80163b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80163b6:	7dfb      	ldrb	r3, [r7, #23]
 80163b8:	2bff      	cmp	r3, #255	@ 0xff
 80163ba:	d025      	beq.n	8016408 <USBD_LL_DataInStage+0x15a>
 80163bc:	7dfb      	ldrb	r3, [r7, #23]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d122      	bne.n	8016408 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80163c8:	b2db      	uxtb	r3, r3
 80163ca:	2b03      	cmp	r3, #3
 80163cc:	d11c      	bne.n	8016408 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80163ce:	7dfa      	ldrb	r2, [r7, #23]
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	32ae      	adds	r2, #174	@ 0xae
 80163d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163d8:	695b      	ldr	r3, [r3, #20]
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d014      	beq.n	8016408 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80163de:	7dfa      	ldrb	r2, [r7, #23]
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80163e6:	7dfa      	ldrb	r2, [r7, #23]
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	32ae      	adds	r2, #174	@ 0xae
 80163ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163f0:	695b      	ldr	r3, [r3, #20]
 80163f2:	7afa      	ldrb	r2, [r7, #11]
 80163f4:	4611      	mov	r1, r2
 80163f6:	68f8      	ldr	r0, [r7, #12]
 80163f8:	4798      	blx	r3
 80163fa:	4603      	mov	r3, r0
 80163fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80163fe:	7dbb      	ldrb	r3, [r7, #22]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d001      	beq.n	8016408 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016404:	7dbb      	ldrb	r3, [r7, #22]
 8016406:	e000      	b.n	801640a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8016408:	2300      	movs	r3, #0
}
 801640a:	4618      	mov	r0, r3
 801640c:	3718      	adds	r7, #24
 801640e:	46bd      	mov	sp, r7
 8016410:	bd80      	pop	{r7, pc}

08016412 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016412:	b580      	push	{r7, lr}
 8016414:	b084      	sub	sp, #16
 8016416:	af00      	add	r7, sp, #0
 8016418:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801641a:	2300      	movs	r3, #0
 801641c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	2201      	movs	r2, #1
 8016422:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	2200      	movs	r2, #0
 801642a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	2200      	movs	r2, #0
 8016432:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	2200      	movs	r2, #0
 8016438:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	2200      	movs	r2, #0
 8016440:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801644a:	2b00      	cmp	r3, #0
 801644c:	d014      	beq.n	8016478 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016454:	685b      	ldr	r3, [r3, #4]
 8016456:	2b00      	cmp	r3, #0
 8016458:	d00e      	beq.n	8016478 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016460:	685b      	ldr	r3, [r3, #4]
 8016462:	687a      	ldr	r2, [r7, #4]
 8016464:	6852      	ldr	r2, [r2, #4]
 8016466:	b2d2      	uxtb	r2, r2
 8016468:	4611      	mov	r1, r2
 801646a:	6878      	ldr	r0, [r7, #4]
 801646c:	4798      	blx	r3
 801646e:	4603      	mov	r3, r0
 8016470:	2b00      	cmp	r3, #0
 8016472:	d001      	beq.n	8016478 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016474:	2303      	movs	r3, #3
 8016476:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016478:	2340      	movs	r3, #64	@ 0x40
 801647a:	2200      	movs	r2, #0
 801647c:	2100      	movs	r1, #0
 801647e:	6878      	ldr	r0, [r7, #4]
 8016480:	f001 fc83 	bl	8017d8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	2201      	movs	r2, #1
 8016488:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	2240      	movs	r2, #64	@ 0x40
 8016490:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016494:	2340      	movs	r3, #64	@ 0x40
 8016496:	2200      	movs	r2, #0
 8016498:	2180      	movs	r1, #128	@ 0x80
 801649a:	6878      	ldr	r0, [r7, #4]
 801649c:	f001 fc75 	bl	8017d8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	2201      	movs	r2, #1
 80164a4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	2240      	movs	r2, #64	@ 0x40
 80164aa:	621a      	str	r2, [r3, #32]

  return ret;
 80164ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80164ae:	4618      	mov	r0, r3
 80164b0:	3710      	adds	r7, #16
 80164b2:	46bd      	mov	sp, r7
 80164b4:	bd80      	pop	{r7, pc}

080164b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80164b6:	b480      	push	{r7}
 80164b8:	b083      	sub	sp, #12
 80164ba:	af00      	add	r7, sp, #0
 80164bc:	6078      	str	r0, [r7, #4]
 80164be:	460b      	mov	r3, r1
 80164c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	78fa      	ldrb	r2, [r7, #3]
 80164c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80164c8:	2300      	movs	r3, #0
}
 80164ca:	4618      	mov	r0, r3
 80164cc:	370c      	adds	r7, #12
 80164ce:	46bd      	mov	sp, r7
 80164d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164d4:	4770      	bx	lr

080164d6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80164d6:	b480      	push	{r7}
 80164d8:	b083      	sub	sp, #12
 80164da:	af00      	add	r7, sp, #0
 80164dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80164e4:	b2db      	uxtb	r3, r3
 80164e6:	2b04      	cmp	r3, #4
 80164e8:	d006      	beq.n	80164f8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80164f0:	b2da      	uxtb	r2, r3
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	2204      	movs	r2, #4
 80164fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8016500:	2300      	movs	r3, #0
}
 8016502:	4618      	mov	r0, r3
 8016504:	370c      	adds	r7, #12
 8016506:	46bd      	mov	sp, r7
 8016508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650c:	4770      	bx	lr

0801650e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801650e:	b480      	push	{r7}
 8016510:	b083      	sub	sp, #12
 8016512:	af00      	add	r7, sp, #0
 8016514:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801651c:	b2db      	uxtb	r3, r3
 801651e:	2b04      	cmp	r3, #4
 8016520:	d106      	bne.n	8016530 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8016528:	b2da      	uxtb	r2, r3
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8016530:	2300      	movs	r3, #0
}
 8016532:	4618      	mov	r0, r3
 8016534:	370c      	adds	r7, #12
 8016536:	46bd      	mov	sp, r7
 8016538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801653c:	4770      	bx	lr

0801653e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801653e:	b580      	push	{r7, lr}
 8016540:	b082      	sub	sp, #8
 8016542:	af00      	add	r7, sp, #0
 8016544:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801654c:	b2db      	uxtb	r3, r3
 801654e:	2b03      	cmp	r3, #3
 8016550:	d110      	bne.n	8016574 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016558:	2b00      	cmp	r3, #0
 801655a:	d00b      	beq.n	8016574 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016562:	69db      	ldr	r3, [r3, #28]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d005      	beq.n	8016574 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801656e:	69db      	ldr	r3, [r3, #28]
 8016570:	6878      	ldr	r0, [r7, #4]
 8016572:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016574:	2300      	movs	r3, #0
}
 8016576:	4618      	mov	r0, r3
 8016578:	3708      	adds	r7, #8
 801657a:	46bd      	mov	sp, r7
 801657c:	bd80      	pop	{r7, pc}

0801657e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801657e:	b580      	push	{r7, lr}
 8016580:	b082      	sub	sp, #8
 8016582:	af00      	add	r7, sp, #0
 8016584:	6078      	str	r0, [r7, #4]
 8016586:	460b      	mov	r3, r1
 8016588:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	32ae      	adds	r2, #174	@ 0xae
 8016594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d101      	bne.n	80165a0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801659c:	2303      	movs	r3, #3
 801659e:	e01c      	b.n	80165da <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80165a6:	b2db      	uxtb	r3, r3
 80165a8:	2b03      	cmp	r3, #3
 80165aa:	d115      	bne.n	80165d8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	32ae      	adds	r2, #174	@ 0xae
 80165b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165ba:	6a1b      	ldr	r3, [r3, #32]
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d00b      	beq.n	80165d8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	32ae      	adds	r2, #174	@ 0xae
 80165ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165ce:	6a1b      	ldr	r3, [r3, #32]
 80165d0:	78fa      	ldrb	r2, [r7, #3]
 80165d2:	4611      	mov	r1, r2
 80165d4:	6878      	ldr	r0, [r7, #4]
 80165d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80165d8:	2300      	movs	r3, #0
}
 80165da:	4618      	mov	r0, r3
 80165dc:	3708      	adds	r7, #8
 80165de:	46bd      	mov	sp, r7
 80165e0:	bd80      	pop	{r7, pc}

080165e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80165e2:	b580      	push	{r7, lr}
 80165e4:	b082      	sub	sp, #8
 80165e6:	af00      	add	r7, sp, #0
 80165e8:	6078      	str	r0, [r7, #4]
 80165ea:	460b      	mov	r3, r1
 80165ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	32ae      	adds	r2, #174	@ 0xae
 80165f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d101      	bne.n	8016604 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016600:	2303      	movs	r3, #3
 8016602:	e01c      	b.n	801663e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801660a:	b2db      	uxtb	r3, r3
 801660c:	2b03      	cmp	r3, #3
 801660e:	d115      	bne.n	801663c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	32ae      	adds	r2, #174	@ 0xae
 801661a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801661e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016620:	2b00      	cmp	r3, #0
 8016622:	d00b      	beq.n	801663c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	32ae      	adds	r2, #174	@ 0xae
 801662e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016634:	78fa      	ldrb	r2, [r7, #3]
 8016636:	4611      	mov	r1, r2
 8016638:	6878      	ldr	r0, [r7, #4]
 801663a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801663c:	2300      	movs	r3, #0
}
 801663e:	4618      	mov	r0, r3
 8016640:	3708      	adds	r7, #8
 8016642:	46bd      	mov	sp, r7
 8016644:	bd80      	pop	{r7, pc}

08016646 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016646:	b480      	push	{r7}
 8016648:	b083      	sub	sp, #12
 801664a:	af00      	add	r7, sp, #0
 801664c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801664e:	2300      	movs	r3, #0
}
 8016650:	4618      	mov	r0, r3
 8016652:	370c      	adds	r7, #12
 8016654:	46bd      	mov	sp, r7
 8016656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801665a:	4770      	bx	lr

0801665c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801665c:	b580      	push	{r7, lr}
 801665e:	b084      	sub	sp, #16
 8016660:	af00      	add	r7, sp, #0
 8016662:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8016664:	2300      	movs	r3, #0
 8016666:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	2201      	movs	r2, #1
 801666c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016676:	2b00      	cmp	r3, #0
 8016678:	d00e      	beq.n	8016698 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016680:	685b      	ldr	r3, [r3, #4]
 8016682:	687a      	ldr	r2, [r7, #4]
 8016684:	6852      	ldr	r2, [r2, #4]
 8016686:	b2d2      	uxtb	r2, r2
 8016688:	4611      	mov	r1, r2
 801668a:	6878      	ldr	r0, [r7, #4]
 801668c:	4798      	blx	r3
 801668e:	4603      	mov	r3, r0
 8016690:	2b00      	cmp	r3, #0
 8016692:	d001      	beq.n	8016698 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8016694:	2303      	movs	r3, #3
 8016696:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016698:	7bfb      	ldrb	r3, [r7, #15]
}
 801669a:	4618      	mov	r0, r3
 801669c:	3710      	adds	r7, #16
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd80      	pop	{r7, pc}

080166a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80166a2:	b480      	push	{r7}
 80166a4:	b083      	sub	sp, #12
 80166a6:	af00      	add	r7, sp, #0
 80166a8:	6078      	str	r0, [r7, #4]
 80166aa:	460b      	mov	r3, r1
 80166ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80166ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80166b0:	4618      	mov	r0, r3
 80166b2:	370c      	adds	r7, #12
 80166b4:	46bd      	mov	sp, r7
 80166b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ba:	4770      	bx	lr

080166bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80166bc:	b480      	push	{r7}
 80166be:	b083      	sub	sp, #12
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	6078      	str	r0, [r7, #4]
 80166c4:	460b      	mov	r3, r1
 80166c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80166c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80166ca:	4618      	mov	r0, r3
 80166cc:	370c      	adds	r7, #12
 80166ce:	46bd      	mov	sp, r7
 80166d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d4:	4770      	bx	lr

080166d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80166d6:	b580      	push	{r7, lr}
 80166d8:	b086      	sub	sp, #24
 80166da:	af00      	add	r7, sp, #0
 80166dc:	6078      	str	r0, [r7, #4]
 80166de:	460b      	mov	r3, r1
 80166e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80166ea:	2300      	movs	r3, #0
 80166ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	885b      	ldrh	r3, [r3, #2]
 80166f2:	b29b      	uxth	r3, r3
 80166f4:	68fa      	ldr	r2, [r7, #12]
 80166f6:	7812      	ldrb	r2, [r2, #0]
 80166f8:	4293      	cmp	r3, r2
 80166fa:	d91f      	bls.n	801673c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	781b      	ldrb	r3, [r3, #0]
 8016700:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8016702:	e013      	b.n	801672c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016704:	f107 030a 	add.w	r3, r7, #10
 8016708:	4619      	mov	r1, r3
 801670a:	6978      	ldr	r0, [r7, #20]
 801670c:	f000 f81b 	bl	8016746 <USBD_GetNextDesc>
 8016710:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016712:	697b      	ldr	r3, [r7, #20]
 8016714:	785b      	ldrb	r3, [r3, #1]
 8016716:	2b05      	cmp	r3, #5
 8016718:	d108      	bne.n	801672c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801671a:	697b      	ldr	r3, [r7, #20]
 801671c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801671e:	693b      	ldr	r3, [r7, #16]
 8016720:	789b      	ldrb	r3, [r3, #2]
 8016722:	78fa      	ldrb	r2, [r7, #3]
 8016724:	429a      	cmp	r2, r3
 8016726:	d008      	beq.n	801673a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016728:	2300      	movs	r3, #0
 801672a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	885b      	ldrh	r3, [r3, #2]
 8016730:	b29a      	uxth	r2, r3
 8016732:	897b      	ldrh	r3, [r7, #10]
 8016734:	429a      	cmp	r2, r3
 8016736:	d8e5      	bhi.n	8016704 <USBD_GetEpDesc+0x2e>
 8016738:	e000      	b.n	801673c <USBD_GetEpDesc+0x66>
          break;
 801673a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801673c:	693b      	ldr	r3, [r7, #16]
}
 801673e:	4618      	mov	r0, r3
 8016740:	3718      	adds	r7, #24
 8016742:	46bd      	mov	sp, r7
 8016744:	bd80      	pop	{r7, pc}

08016746 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016746:	b480      	push	{r7}
 8016748:	b085      	sub	sp, #20
 801674a:	af00      	add	r7, sp, #0
 801674c:	6078      	str	r0, [r7, #4]
 801674e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8016754:	683b      	ldr	r3, [r7, #0]
 8016756:	881b      	ldrh	r3, [r3, #0]
 8016758:	68fa      	ldr	r2, [r7, #12]
 801675a:	7812      	ldrb	r2, [r2, #0]
 801675c:	4413      	add	r3, r2
 801675e:	b29a      	uxth	r2, r3
 8016760:	683b      	ldr	r3, [r7, #0]
 8016762:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	781b      	ldrb	r3, [r3, #0]
 8016768:	461a      	mov	r2, r3
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	4413      	add	r3, r2
 801676e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016770:	68fb      	ldr	r3, [r7, #12]
}
 8016772:	4618      	mov	r0, r3
 8016774:	3714      	adds	r7, #20
 8016776:	46bd      	mov	sp, r7
 8016778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801677c:	4770      	bx	lr

0801677e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801677e:	b480      	push	{r7}
 8016780:	b087      	sub	sp, #28
 8016782:	af00      	add	r7, sp, #0
 8016784:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801678a:	697b      	ldr	r3, [r7, #20]
 801678c:	781b      	ldrb	r3, [r3, #0]
 801678e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016790:	697b      	ldr	r3, [r7, #20]
 8016792:	3301      	adds	r3, #1
 8016794:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016796:	697b      	ldr	r3, [r7, #20]
 8016798:	781b      	ldrb	r3, [r3, #0]
 801679a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801679c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80167a0:	021b      	lsls	r3, r3, #8
 80167a2:	b21a      	sxth	r2, r3
 80167a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80167a8:	4313      	orrs	r3, r2
 80167aa:	b21b      	sxth	r3, r3
 80167ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80167ae:	89fb      	ldrh	r3, [r7, #14]
}
 80167b0:	4618      	mov	r0, r3
 80167b2:	371c      	adds	r7, #28
 80167b4:	46bd      	mov	sp, r7
 80167b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ba:	4770      	bx	lr

080167bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80167bc:	b580      	push	{r7, lr}
 80167be:	b084      	sub	sp, #16
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	6078      	str	r0, [r7, #4]
 80167c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80167c6:	2300      	movs	r3, #0
 80167c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80167ca:	683b      	ldr	r3, [r7, #0]
 80167cc:	781b      	ldrb	r3, [r3, #0]
 80167ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80167d2:	2b40      	cmp	r3, #64	@ 0x40
 80167d4:	d005      	beq.n	80167e2 <USBD_StdDevReq+0x26>
 80167d6:	2b40      	cmp	r3, #64	@ 0x40
 80167d8:	d857      	bhi.n	801688a <USBD_StdDevReq+0xce>
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d00f      	beq.n	80167fe <USBD_StdDevReq+0x42>
 80167de:	2b20      	cmp	r3, #32
 80167e0:	d153      	bne.n	801688a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	32ae      	adds	r2, #174	@ 0xae
 80167ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167f0:	689b      	ldr	r3, [r3, #8]
 80167f2:	6839      	ldr	r1, [r7, #0]
 80167f4:	6878      	ldr	r0, [r7, #4]
 80167f6:	4798      	blx	r3
 80167f8:	4603      	mov	r3, r0
 80167fa:	73fb      	strb	r3, [r7, #15]
      break;
 80167fc:	e04a      	b.n	8016894 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80167fe:	683b      	ldr	r3, [r7, #0]
 8016800:	785b      	ldrb	r3, [r3, #1]
 8016802:	2b09      	cmp	r3, #9
 8016804:	d83b      	bhi.n	801687e <USBD_StdDevReq+0xc2>
 8016806:	a201      	add	r2, pc, #4	@ (adr r2, 801680c <USBD_StdDevReq+0x50>)
 8016808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801680c:	08016861 	.word	0x08016861
 8016810:	08016875 	.word	0x08016875
 8016814:	0801687f 	.word	0x0801687f
 8016818:	0801686b 	.word	0x0801686b
 801681c:	0801687f 	.word	0x0801687f
 8016820:	0801683f 	.word	0x0801683f
 8016824:	08016835 	.word	0x08016835
 8016828:	0801687f 	.word	0x0801687f
 801682c:	08016857 	.word	0x08016857
 8016830:	08016849 	.word	0x08016849
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016834:	6839      	ldr	r1, [r7, #0]
 8016836:	6878      	ldr	r0, [r7, #4]
 8016838:	f000 fa3c 	bl	8016cb4 <USBD_GetDescriptor>
          break;
 801683c:	e024      	b.n	8016888 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801683e:	6839      	ldr	r1, [r7, #0]
 8016840:	6878      	ldr	r0, [r7, #4]
 8016842:	f000 fbcb 	bl	8016fdc <USBD_SetAddress>
          break;
 8016846:	e01f      	b.n	8016888 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016848:	6839      	ldr	r1, [r7, #0]
 801684a:	6878      	ldr	r0, [r7, #4]
 801684c:	f000 fc0a 	bl	8017064 <USBD_SetConfig>
 8016850:	4603      	mov	r3, r0
 8016852:	73fb      	strb	r3, [r7, #15]
          break;
 8016854:	e018      	b.n	8016888 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016856:	6839      	ldr	r1, [r7, #0]
 8016858:	6878      	ldr	r0, [r7, #4]
 801685a:	f000 fcad 	bl	80171b8 <USBD_GetConfig>
          break;
 801685e:	e013      	b.n	8016888 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016860:	6839      	ldr	r1, [r7, #0]
 8016862:	6878      	ldr	r0, [r7, #4]
 8016864:	f000 fcde 	bl	8017224 <USBD_GetStatus>
          break;
 8016868:	e00e      	b.n	8016888 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801686a:	6839      	ldr	r1, [r7, #0]
 801686c:	6878      	ldr	r0, [r7, #4]
 801686e:	f000 fd0d 	bl	801728c <USBD_SetFeature>
          break;
 8016872:	e009      	b.n	8016888 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016874:	6839      	ldr	r1, [r7, #0]
 8016876:	6878      	ldr	r0, [r7, #4]
 8016878:	f000 fd31 	bl	80172de <USBD_ClrFeature>
          break;
 801687c:	e004      	b.n	8016888 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801687e:	6839      	ldr	r1, [r7, #0]
 8016880:	6878      	ldr	r0, [r7, #4]
 8016882:	f000 fd88 	bl	8017396 <USBD_CtlError>
          break;
 8016886:	bf00      	nop
      }
      break;
 8016888:	e004      	b.n	8016894 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801688a:	6839      	ldr	r1, [r7, #0]
 801688c:	6878      	ldr	r0, [r7, #4]
 801688e:	f000 fd82 	bl	8017396 <USBD_CtlError>
      break;
 8016892:	bf00      	nop
  }

  return ret;
 8016894:	7bfb      	ldrb	r3, [r7, #15]
}
 8016896:	4618      	mov	r0, r3
 8016898:	3710      	adds	r7, #16
 801689a:	46bd      	mov	sp, r7
 801689c:	bd80      	pop	{r7, pc}
 801689e:	bf00      	nop

080168a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b084      	sub	sp, #16
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
 80168a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80168aa:	2300      	movs	r3, #0
 80168ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80168ae:	683b      	ldr	r3, [r7, #0]
 80168b0:	781b      	ldrb	r3, [r3, #0]
 80168b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80168b6:	2b40      	cmp	r3, #64	@ 0x40
 80168b8:	d005      	beq.n	80168c6 <USBD_StdItfReq+0x26>
 80168ba:	2b40      	cmp	r3, #64	@ 0x40
 80168bc:	d852      	bhi.n	8016964 <USBD_StdItfReq+0xc4>
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d001      	beq.n	80168c6 <USBD_StdItfReq+0x26>
 80168c2:	2b20      	cmp	r3, #32
 80168c4:	d14e      	bne.n	8016964 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80168cc:	b2db      	uxtb	r3, r3
 80168ce:	3b01      	subs	r3, #1
 80168d0:	2b02      	cmp	r3, #2
 80168d2:	d840      	bhi.n	8016956 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80168d4:	683b      	ldr	r3, [r7, #0]
 80168d6:	889b      	ldrh	r3, [r3, #4]
 80168d8:	b2db      	uxtb	r3, r3
 80168da:	2b01      	cmp	r3, #1
 80168dc:	d836      	bhi.n	801694c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80168de:	683b      	ldr	r3, [r7, #0]
 80168e0:	889b      	ldrh	r3, [r3, #4]
 80168e2:	b2db      	uxtb	r3, r3
 80168e4:	4619      	mov	r1, r3
 80168e6:	6878      	ldr	r0, [r7, #4]
 80168e8:	f7ff fedb 	bl	80166a2 <USBD_CoreFindIF>
 80168ec:	4603      	mov	r3, r0
 80168ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80168f0:	7bbb      	ldrb	r3, [r7, #14]
 80168f2:	2bff      	cmp	r3, #255	@ 0xff
 80168f4:	d01d      	beq.n	8016932 <USBD_StdItfReq+0x92>
 80168f6:	7bbb      	ldrb	r3, [r7, #14]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d11a      	bne.n	8016932 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80168fc:	7bba      	ldrb	r2, [r7, #14]
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	32ae      	adds	r2, #174	@ 0xae
 8016902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016906:	689b      	ldr	r3, [r3, #8]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d00f      	beq.n	801692c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801690c:	7bba      	ldrb	r2, [r7, #14]
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016914:	7bba      	ldrb	r2, [r7, #14]
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	32ae      	adds	r2, #174	@ 0xae
 801691a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801691e:	689b      	ldr	r3, [r3, #8]
 8016920:	6839      	ldr	r1, [r7, #0]
 8016922:	6878      	ldr	r0, [r7, #4]
 8016924:	4798      	blx	r3
 8016926:	4603      	mov	r3, r0
 8016928:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801692a:	e004      	b.n	8016936 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801692c:	2303      	movs	r3, #3
 801692e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016930:	e001      	b.n	8016936 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016932:	2303      	movs	r3, #3
 8016934:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016936:	683b      	ldr	r3, [r7, #0]
 8016938:	88db      	ldrh	r3, [r3, #6]
 801693a:	2b00      	cmp	r3, #0
 801693c:	d110      	bne.n	8016960 <USBD_StdItfReq+0xc0>
 801693e:	7bfb      	ldrb	r3, [r7, #15]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d10d      	bne.n	8016960 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016944:	6878      	ldr	r0, [r7, #4]
 8016946:	f000 fdfd 	bl	8017544 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801694a:	e009      	b.n	8016960 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801694c:	6839      	ldr	r1, [r7, #0]
 801694e:	6878      	ldr	r0, [r7, #4]
 8016950:	f000 fd21 	bl	8017396 <USBD_CtlError>
          break;
 8016954:	e004      	b.n	8016960 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016956:	6839      	ldr	r1, [r7, #0]
 8016958:	6878      	ldr	r0, [r7, #4]
 801695a:	f000 fd1c 	bl	8017396 <USBD_CtlError>
          break;
 801695e:	e000      	b.n	8016962 <USBD_StdItfReq+0xc2>
          break;
 8016960:	bf00      	nop
      }
      break;
 8016962:	e004      	b.n	801696e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016964:	6839      	ldr	r1, [r7, #0]
 8016966:	6878      	ldr	r0, [r7, #4]
 8016968:	f000 fd15 	bl	8017396 <USBD_CtlError>
      break;
 801696c:	bf00      	nop
  }

  return ret;
 801696e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016970:	4618      	mov	r0, r3
 8016972:	3710      	adds	r7, #16
 8016974:	46bd      	mov	sp, r7
 8016976:	bd80      	pop	{r7, pc}

08016978 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016978:	b580      	push	{r7, lr}
 801697a:	b084      	sub	sp, #16
 801697c:	af00      	add	r7, sp, #0
 801697e:	6078      	str	r0, [r7, #4]
 8016980:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016982:	2300      	movs	r3, #0
 8016984:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016986:	683b      	ldr	r3, [r7, #0]
 8016988:	889b      	ldrh	r3, [r3, #4]
 801698a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801698c:	683b      	ldr	r3, [r7, #0]
 801698e:	781b      	ldrb	r3, [r3, #0]
 8016990:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016994:	2b40      	cmp	r3, #64	@ 0x40
 8016996:	d007      	beq.n	80169a8 <USBD_StdEPReq+0x30>
 8016998:	2b40      	cmp	r3, #64	@ 0x40
 801699a:	f200 817f 	bhi.w	8016c9c <USBD_StdEPReq+0x324>
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d02a      	beq.n	80169f8 <USBD_StdEPReq+0x80>
 80169a2:	2b20      	cmp	r3, #32
 80169a4:	f040 817a 	bne.w	8016c9c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80169a8:	7bbb      	ldrb	r3, [r7, #14]
 80169aa:	4619      	mov	r1, r3
 80169ac:	6878      	ldr	r0, [r7, #4]
 80169ae:	f7ff fe85 	bl	80166bc <USBD_CoreFindEP>
 80169b2:	4603      	mov	r3, r0
 80169b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80169b6:	7b7b      	ldrb	r3, [r7, #13]
 80169b8:	2bff      	cmp	r3, #255	@ 0xff
 80169ba:	f000 8174 	beq.w	8016ca6 <USBD_StdEPReq+0x32e>
 80169be:	7b7b      	ldrb	r3, [r7, #13]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	f040 8170 	bne.w	8016ca6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80169c6:	7b7a      	ldrb	r2, [r7, #13]
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80169ce:	7b7a      	ldrb	r2, [r7, #13]
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	32ae      	adds	r2, #174	@ 0xae
 80169d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169d8:	689b      	ldr	r3, [r3, #8]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	f000 8163 	beq.w	8016ca6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80169e0:	7b7a      	ldrb	r2, [r7, #13]
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	32ae      	adds	r2, #174	@ 0xae
 80169e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169ea:	689b      	ldr	r3, [r3, #8]
 80169ec:	6839      	ldr	r1, [r7, #0]
 80169ee:	6878      	ldr	r0, [r7, #4]
 80169f0:	4798      	blx	r3
 80169f2:	4603      	mov	r3, r0
 80169f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80169f6:	e156      	b.n	8016ca6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80169f8:	683b      	ldr	r3, [r7, #0]
 80169fa:	785b      	ldrb	r3, [r3, #1]
 80169fc:	2b03      	cmp	r3, #3
 80169fe:	d008      	beq.n	8016a12 <USBD_StdEPReq+0x9a>
 8016a00:	2b03      	cmp	r3, #3
 8016a02:	f300 8145 	bgt.w	8016c90 <USBD_StdEPReq+0x318>
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	f000 809b 	beq.w	8016b42 <USBD_StdEPReq+0x1ca>
 8016a0c:	2b01      	cmp	r3, #1
 8016a0e:	d03c      	beq.n	8016a8a <USBD_StdEPReq+0x112>
 8016a10:	e13e      	b.n	8016c90 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a18:	b2db      	uxtb	r3, r3
 8016a1a:	2b02      	cmp	r3, #2
 8016a1c:	d002      	beq.n	8016a24 <USBD_StdEPReq+0xac>
 8016a1e:	2b03      	cmp	r3, #3
 8016a20:	d016      	beq.n	8016a50 <USBD_StdEPReq+0xd8>
 8016a22:	e02c      	b.n	8016a7e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016a24:	7bbb      	ldrb	r3, [r7, #14]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d00d      	beq.n	8016a46 <USBD_StdEPReq+0xce>
 8016a2a:	7bbb      	ldrb	r3, [r7, #14]
 8016a2c:	2b80      	cmp	r3, #128	@ 0x80
 8016a2e:	d00a      	beq.n	8016a46 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016a30:	7bbb      	ldrb	r3, [r7, #14]
 8016a32:	4619      	mov	r1, r3
 8016a34:	6878      	ldr	r0, [r7, #4]
 8016a36:	f001 f9ed 	bl	8017e14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016a3a:	2180      	movs	r1, #128	@ 0x80
 8016a3c:	6878      	ldr	r0, [r7, #4]
 8016a3e:	f001 f9e9 	bl	8017e14 <USBD_LL_StallEP>
 8016a42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016a44:	e020      	b.n	8016a88 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016a46:	6839      	ldr	r1, [r7, #0]
 8016a48:	6878      	ldr	r0, [r7, #4]
 8016a4a:	f000 fca4 	bl	8017396 <USBD_CtlError>
              break;
 8016a4e:	e01b      	b.n	8016a88 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016a50:	683b      	ldr	r3, [r7, #0]
 8016a52:	885b      	ldrh	r3, [r3, #2]
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d10e      	bne.n	8016a76 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016a58:	7bbb      	ldrb	r3, [r7, #14]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d00b      	beq.n	8016a76 <USBD_StdEPReq+0xfe>
 8016a5e:	7bbb      	ldrb	r3, [r7, #14]
 8016a60:	2b80      	cmp	r3, #128	@ 0x80
 8016a62:	d008      	beq.n	8016a76 <USBD_StdEPReq+0xfe>
 8016a64:	683b      	ldr	r3, [r7, #0]
 8016a66:	88db      	ldrh	r3, [r3, #6]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d104      	bne.n	8016a76 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016a6c:	7bbb      	ldrb	r3, [r7, #14]
 8016a6e:	4619      	mov	r1, r3
 8016a70:	6878      	ldr	r0, [r7, #4]
 8016a72:	f001 f9cf 	bl	8017e14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016a76:	6878      	ldr	r0, [r7, #4]
 8016a78:	f000 fd64 	bl	8017544 <USBD_CtlSendStatus>

              break;
 8016a7c:	e004      	b.n	8016a88 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016a7e:	6839      	ldr	r1, [r7, #0]
 8016a80:	6878      	ldr	r0, [r7, #4]
 8016a82:	f000 fc88 	bl	8017396 <USBD_CtlError>
              break;
 8016a86:	bf00      	nop
          }
          break;
 8016a88:	e107      	b.n	8016c9a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016a90:	b2db      	uxtb	r3, r3
 8016a92:	2b02      	cmp	r3, #2
 8016a94:	d002      	beq.n	8016a9c <USBD_StdEPReq+0x124>
 8016a96:	2b03      	cmp	r3, #3
 8016a98:	d016      	beq.n	8016ac8 <USBD_StdEPReq+0x150>
 8016a9a:	e04b      	b.n	8016b34 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016a9c:	7bbb      	ldrb	r3, [r7, #14]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d00d      	beq.n	8016abe <USBD_StdEPReq+0x146>
 8016aa2:	7bbb      	ldrb	r3, [r7, #14]
 8016aa4:	2b80      	cmp	r3, #128	@ 0x80
 8016aa6:	d00a      	beq.n	8016abe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016aa8:	7bbb      	ldrb	r3, [r7, #14]
 8016aaa:	4619      	mov	r1, r3
 8016aac:	6878      	ldr	r0, [r7, #4]
 8016aae:	f001 f9b1 	bl	8017e14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016ab2:	2180      	movs	r1, #128	@ 0x80
 8016ab4:	6878      	ldr	r0, [r7, #4]
 8016ab6:	f001 f9ad 	bl	8017e14 <USBD_LL_StallEP>
 8016aba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016abc:	e040      	b.n	8016b40 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016abe:	6839      	ldr	r1, [r7, #0]
 8016ac0:	6878      	ldr	r0, [r7, #4]
 8016ac2:	f000 fc68 	bl	8017396 <USBD_CtlError>
              break;
 8016ac6:	e03b      	b.n	8016b40 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016ac8:	683b      	ldr	r3, [r7, #0]
 8016aca:	885b      	ldrh	r3, [r3, #2]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d136      	bne.n	8016b3e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016ad0:	7bbb      	ldrb	r3, [r7, #14]
 8016ad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d004      	beq.n	8016ae4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016ada:	7bbb      	ldrb	r3, [r7, #14]
 8016adc:	4619      	mov	r1, r3
 8016ade:	6878      	ldr	r0, [r7, #4]
 8016ae0:	f001 f9b7 	bl	8017e52 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016ae4:	6878      	ldr	r0, [r7, #4]
 8016ae6:	f000 fd2d 	bl	8017544 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016aea:	7bbb      	ldrb	r3, [r7, #14]
 8016aec:	4619      	mov	r1, r3
 8016aee:	6878      	ldr	r0, [r7, #4]
 8016af0:	f7ff fde4 	bl	80166bc <USBD_CoreFindEP>
 8016af4:	4603      	mov	r3, r0
 8016af6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016af8:	7b7b      	ldrb	r3, [r7, #13]
 8016afa:	2bff      	cmp	r3, #255	@ 0xff
 8016afc:	d01f      	beq.n	8016b3e <USBD_StdEPReq+0x1c6>
 8016afe:	7b7b      	ldrb	r3, [r7, #13]
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d11c      	bne.n	8016b3e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016b04:	7b7a      	ldrb	r2, [r7, #13]
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016b0c:	7b7a      	ldrb	r2, [r7, #13]
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	32ae      	adds	r2, #174	@ 0xae
 8016b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b16:	689b      	ldr	r3, [r3, #8]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d010      	beq.n	8016b3e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016b1c:	7b7a      	ldrb	r2, [r7, #13]
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	32ae      	adds	r2, #174	@ 0xae
 8016b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016b26:	689b      	ldr	r3, [r3, #8]
 8016b28:	6839      	ldr	r1, [r7, #0]
 8016b2a:	6878      	ldr	r0, [r7, #4]
 8016b2c:	4798      	blx	r3
 8016b2e:	4603      	mov	r3, r0
 8016b30:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016b32:	e004      	b.n	8016b3e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016b34:	6839      	ldr	r1, [r7, #0]
 8016b36:	6878      	ldr	r0, [r7, #4]
 8016b38:	f000 fc2d 	bl	8017396 <USBD_CtlError>
              break;
 8016b3c:	e000      	b.n	8016b40 <USBD_StdEPReq+0x1c8>
              break;
 8016b3e:	bf00      	nop
          }
          break;
 8016b40:	e0ab      	b.n	8016c9a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b48:	b2db      	uxtb	r3, r3
 8016b4a:	2b02      	cmp	r3, #2
 8016b4c:	d002      	beq.n	8016b54 <USBD_StdEPReq+0x1dc>
 8016b4e:	2b03      	cmp	r3, #3
 8016b50:	d032      	beq.n	8016bb8 <USBD_StdEPReq+0x240>
 8016b52:	e097      	b.n	8016c84 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016b54:	7bbb      	ldrb	r3, [r7, #14]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d007      	beq.n	8016b6a <USBD_StdEPReq+0x1f2>
 8016b5a:	7bbb      	ldrb	r3, [r7, #14]
 8016b5c:	2b80      	cmp	r3, #128	@ 0x80
 8016b5e:	d004      	beq.n	8016b6a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016b60:	6839      	ldr	r1, [r7, #0]
 8016b62:	6878      	ldr	r0, [r7, #4]
 8016b64:	f000 fc17 	bl	8017396 <USBD_CtlError>
                break;
 8016b68:	e091      	b.n	8016c8e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016b6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	da0b      	bge.n	8016b8a <USBD_StdEPReq+0x212>
 8016b72:	7bbb      	ldrb	r3, [r7, #14]
 8016b74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016b78:	4613      	mov	r3, r2
 8016b7a:	009b      	lsls	r3, r3, #2
 8016b7c:	4413      	add	r3, r2
 8016b7e:	009b      	lsls	r3, r3, #2
 8016b80:	3310      	adds	r3, #16
 8016b82:	687a      	ldr	r2, [r7, #4]
 8016b84:	4413      	add	r3, r2
 8016b86:	3304      	adds	r3, #4
 8016b88:	e00b      	b.n	8016ba2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016b8a:	7bbb      	ldrb	r3, [r7, #14]
 8016b8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016b90:	4613      	mov	r3, r2
 8016b92:	009b      	lsls	r3, r3, #2
 8016b94:	4413      	add	r3, r2
 8016b96:	009b      	lsls	r3, r3, #2
 8016b98:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016b9c:	687a      	ldr	r2, [r7, #4]
 8016b9e:	4413      	add	r3, r2
 8016ba0:	3304      	adds	r3, #4
 8016ba2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016ba4:	68bb      	ldr	r3, [r7, #8]
 8016ba6:	2200      	movs	r2, #0
 8016ba8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016baa:	68bb      	ldr	r3, [r7, #8]
 8016bac:	2202      	movs	r2, #2
 8016bae:	4619      	mov	r1, r3
 8016bb0:	6878      	ldr	r0, [r7, #4]
 8016bb2:	f000 fc6d 	bl	8017490 <USBD_CtlSendData>
              break;
 8016bb6:	e06a      	b.n	8016c8e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016bb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	da11      	bge.n	8016be4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016bc0:	7bbb      	ldrb	r3, [r7, #14]
 8016bc2:	f003 020f 	and.w	r2, r3, #15
 8016bc6:	6879      	ldr	r1, [r7, #4]
 8016bc8:	4613      	mov	r3, r2
 8016bca:	009b      	lsls	r3, r3, #2
 8016bcc:	4413      	add	r3, r2
 8016bce:	009b      	lsls	r3, r3, #2
 8016bd0:	440b      	add	r3, r1
 8016bd2:	3324      	adds	r3, #36	@ 0x24
 8016bd4:	881b      	ldrh	r3, [r3, #0]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d117      	bne.n	8016c0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016bda:	6839      	ldr	r1, [r7, #0]
 8016bdc:	6878      	ldr	r0, [r7, #4]
 8016bde:	f000 fbda 	bl	8017396 <USBD_CtlError>
                  break;
 8016be2:	e054      	b.n	8016c8e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016be4:	7bbb      	ldrb	r3, [r7, #14]
 8016be6:	f003 020f 	and.w	r2, r3, #15
 8016bea:	6879      	ldr	r1, [r7, #4]
 8016bec:	4613      	mov	r3, r2
 8016bee:	009b      	lsls	r3, r3, #2
 8016bf0:	4413      	add	r3, r2
 8016bf2:	009b      	lsls	r3, r3, #2
 8016bf4:	440b      	add	r3, r1
 8016bf6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016bfa:	881b      	ldrh	r3, [r3, #0]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d104      	bne.n	8016c0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016c00:	6839      	ldr	r1, [r7, #0]
 8016c02:	6878      	ldr	r0, [r7, #4]
 8016c04:	f000 fbc7 	bl	8017396 <USBD_CtlError>
                  break;
 8016c08:	e041      	b.n	8016c8e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016c0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	da0b      	bge.n	8016c2a <USBD_StdEPReq+0x2b2>
 8016c12:	7bbb      	ldrb	r3, [r7, #14]
 8016c14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8016c18:	4613      	mov	r3, r2
 8016c1a:	009b      	lsls	r3, r3, #2
 8016c1c:	4413      	add	r3, r2
 8016c1e:	009b      	lsls	r3, r3, #2
 8016c20:	3310      	adds	r3, #16
 8016c22:	687a      	ldr	r2, [r7, #4]
 8016c24:	4413      	add	r3, r2
 8016c26:	3304      	adds	r3, #4
 8016c28:	e00b      	b.n	8016c42 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016c2a:	7bbb      	ldrb	r3, [r7, #14]
 8016c2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016c30:	4613      	mov	r3, r2
 8016c32:	009b      	lsls	r3, r3, #2
 8016c34:	4413      	add	r3, r2
 8016c36:	009b      	lsls	r3, r3, #2
 8016c38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8016c3c:	687a      	ldr	r2, [r7, #4]
 8016c3e:	4413      	add	r3, r2
 8016c40:	3304      	adds	r3, #4
 8016c42:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016c44:	7bbb      	ldrb	r3, [r7, #14]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d002      	beq.n	8016c50 <USBD_StdEPReq+0x2d8>
 8016c4a:	7bbb      	ldrb	r3, [r7, #14]
 8016c4c:	2b80      	cmp	r3, #128	@ 0x80
 8016c4e:	d103      	bne.n	8016c58 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016c50:	68bb      	ldr	r3, [r7, #8]
 8016c52:	2200      	movs	r2, #0
 8016c54:	601a      	str	r2, [r3, #0]
 8016c56:	e00e      	b.n	8016c76 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016c58:	7bbb      	ldrb	r3, [r7, #14]
 8016c5a:	4619      	mov	r1, r3
 8016c5c:	6878      	ldr	r0, [r7, #4]
 8016c5e:	f001 f917 	bl	8017e90 <USBD_LL_IsStallEP>
 8016c62:	4603      	mov	r3, r0
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d003      	beq.n	8016c70 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016c68:	68bb      	ldr	r3, [r7, #8]
 8016c6a:	2201      	movs	r2, #1
 8016c6c:	601a      	str	r2, [r3, #0]
 8016c6e:	e002      	b.n	8016c76 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016c70:	68bb      	ldr	r3, [r7, #8]
 8016c72:	2200      	movs	r2, #0
 8016c74:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016c76:	68bb      	ldr	r3, [r7, #8]
 8016c78:	2202      	movs	r2, #2
 8016c7a:	4619      	mov	r1, r3
 8016c7c:	6878      	ldr	r0, [r7, #4]
 8016c7e:	f000 fc07 	bl	8017490 <USBD_CtlSendData>
              break;
 8016c82:	e004      	b.n	8016c8e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016c84:	6839      	ldr	r1, [r7, #0]
 8016c86:	6878      	ldr	r0, [r7, #4]
 8016c88:	f000 fb85 	bl	8017396 <USBD_CtlError>
              break;
 8016c8c:	bf00      	nop
          }
          break;
 8016c8e:	e004      	b.n	8016c9a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016c90:	6839      	ldr	r1, [r7, #0]
 8016c92:	6878      	ldr	r0, [r7, #4]
 8016c94:	f000 fb7f 	bl	8017396 <USBD_CtlError>
          break;
 8016c98:	bf00      	nop
      }
      break;
 8016c9a:	e005      	b.n	8016ca8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016c9c:	6839      	ldr	r1, [r7, #0]
 8016c9e:	6878      	ldr	r0, [r7, #4]
 8016ca0:	f000 fb79 	bl	8017396 <USBD_CtlError>
      break;
 8016ca4:	e000      	b.n	8016ca8 <USBD_StdEPReq+0x330>
      break;
 8016ca6:	bf00      	nop
  }

  return ret;
 8016ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016caa:	4618      	mov	r0, r3
 8016cac:	3710      	adds	r7, #16
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	bd80      	pop	{r7, pc}
	...

08016cb4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b084      	sub	sp, #16
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]
 8016cbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016cbe:	2300      	movs	r3, #0
 8016cc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016cc6:	2300      	movs	r3, #0
 8016cc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016cca:	683b      	ldr	r3, [r7, #0]
 8016ccc:	885b      	ldrh	r3, [r3, #2]
 8016cce:	0a1b      	lsrs	r3, r3, #8
 8016cd0:	b29b      	uxth	r3, r3
 8016cd2:	3b01      	subs	r3, #1
 8016cd4:	2b0e      	cmp	r3, #14
 8016cd6:	f200 8152 	bhi.w	8016f7e <USBD_GetDescriptor+0x2ca>
 8016cda:	a201      	add	r2, pc, #4	@ (adr r2, 8016ce0 <USBD_GetDescriptor+0x2c>)
 8016cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ce0:	08016d51 	.word	0x08016d51
 8016ce4:	08016d69 	.word	0x08016d69
 8016ce8:	08016da9 	.word	0x08016da9
 8016cec:	08016f7f 	.word	0x08016f7f
 8016cf0:	08016f7f 	.word	0x08016f7f
 8016cf4:	08016f1f 	.word	0x08016f1f
 8016cf8:	08016f4b 	.word	0x08016f4b
 8016cfc:	08016f7f 	.word	0x08016f7f
 8016d00:	08016f7f 	.word	0x08016f7f
 8016d04:	08016f7f 	.word	0x08016f7f
 8016d08:	08016f7f 	.word	0x08016f7f
 8016d0c:	08016f7f 	.word	0x08016f7f
 8016d10:	08016f7f 	.word	0x08016f7f
 8016d14:	08016f7f 	.word	0x08016f7f
 8016d18:	08016d1d 	.word	0x08016d1d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016d22:	69db      	ldr	r3, [r3, #28]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d00b      	beq.n	8016d40 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016d2e:	69db      	ldr	r3, [r3, #28]
 8016d30:	687a      	ldr	r2, [r7, #4]
 8016d32:	7c12      	ldrb	r2, [r2, #16]
 8016d34:	f107 0108 	add.w	r1, r7, #8
 8016d38:	4610      	mov	r0, r2
 8016d3a:	4798      	blx	r3
 8016d3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016d3e:	e126      	b.n	8016f8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8016d40:	6839      	ldr	r1, [r7, #0]
 8016d42:	6878      	ldr	r0, [r7, #4]
 8016d44:	f000 fb27 	bl	8017396 <USBD_CtlError>
        err++;
 8016d48:	7afb      	ldrb	r3, [r7, #11]
 8016d4a:	3301      	adds	r3, #1
 8016d4c:	72fb      	strb	r3, [r7, #11]
      break;
 8016d4e:	e11e      	b.n	8016f8e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	687a      	ldr	r2, [r7, #4]
 8016d5a:	7c12      	ldrb	r2, [r2, #16]
 8016d5c:	f107 0108 	add.w	r1, r7, #8
 8016d60:	4610      	mov	r0, r2
 8016d62:	4798      	blx	r3
 8016d64:	60f8      	str	r0, [r7, #12]
      break;
 8016d66:	e112      	b.n	8016f8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	7c1b      	ldrb	r3, [r3, #16]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d10d      	bne.n	8016d8c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016d78:	f107 0208 	add.w	r2, r7, #8
 8016d7c:	4610      	mov	r0, r2
 8016d7e:	4798      	blx	r3
 8016d80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	3301      	adds	r3, #1
 8016d86:	2202      	movs	r2, #2
 8016d88:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016d8a:	e100      	b.n	8016f8e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016d94:	f107 0208 	add.w	r2, r7, #8
 8016d98:	4610      	mov	r0, r2
 8016d9a:	4798      	blx	r3
 8016d9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	3301      	adds	r3, #1
 8016da2:	2202      	movs	r2, #2
 8016da4:	701a      	strb	r2, [r3, #0]
      break;
 8016da6:	e0f2      	b.n	8016f8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016da8:	683b      	ldr	r3, [r7, #0]
 8016daa:	885b      	ldrh	r3, [r3, #2]
 8016dac:	b2db      	uxtb	r3, r3
 8016dae:	2b05      	cmp	r3, #5
 8016db0:	f200 80ac 	bhi.w	8016f0c <USBD_GetDescriptor+0x258>
 8016db4:	a201      	add	r2, pc, #4	@ (adr r2, 8016dbc <USBD_GetDescriptor+0x108>)
 8016db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016dba:	bf00      	nop
 8016dbc:	08016dd5 	.word	0x08016dd5
 8016dc0:	08016e09 	.word	0x08016e09
 8016dc4:	08016e3d 	.word	0x08016e3d
 8016dc8:	08016e71 	.word	0x08016e71
 8016dcc:	08016ea5 	.word	0x08016ea5
 8016dd0:	08016ed9 	.word	0x08016ed9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016dda:	685b      	ldr	r3, [r3, #4]
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d00b      	beq.n	8016df8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016de6:	685b      	ldr	r3, [r3, #4]
 8016de8:	687a      	ldr	r2, [r7, #4]
 8016dea:	7c12      	ldrb	r2, [r2, #16]
 8016dec:	f107 0108 	add.w	r1, r7, #8
 8016df0:	4610      	mov	r0, r2
 8016df2:	4798      	blx	r3
 8016df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016df6:	e091      	b.n	8016f1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016df8:	6839      	ldr	r1, [r7, #0]
 8016dfa:	6878      	ldr	r0, [r7, #4]
 8016dfc:	f000 facb 	bl	8017396 <USBD_CtlError>
            err++;
 8016e00:	7afb      	ldrb	r3, [r7, #11]
 8016e02:	3301      	adds	r3, #1
 8016e04:	72fb      	strb	r3, [r7, #11]
          break;
 8016e06:	e089      	b.n	8016f1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016e0e:	689b      	ldr	r3, [r3, #8]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d00b      	beq.n	8016e2c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016e1a:	689b      	ldr	r3, [r3, #8]
 8016e1c:	687a      	ldr	r2, [r7, #4]
 8016e1e:	7c12      	ldrb	r2, [r2, #16]
 8016e20:	f107 0108 	add.w	r1, r7, #8
 8016e24:	4610      	mov	r0, r2
 8016e26:	4798      	blx	r3
 8016e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016e2a:	e077      	b.n	8016f1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016e2c:	6839      	ldr	r1, [r7, #0]
 8016e2e:	6878      	ldr	r0, [r7, #4]
 8016e30:	f000 fab1 	bl	8017396 <USBD_CtlError>
            err++;
 8016e34:	7afb      	ldrb	r3, [r7, #11]
 8016e36:	3301      	adds	r3, #1
 8016e38:	72fb      	strb	r3, [r7, #11]
          break;
 8016e3a:	e06f      	b.n	8016f1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016e42:	68db      	ldr	r3, [r3, #12]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d00b      	beq.n	8016e60 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016e4e:	68db      	ldr	r3, [r3, #12]
 8016e50:	687a      	ldr	r2, [r7, #4]
 8016e52:	7c12      	ldrb	r2, [r2, #16]
 8016e54:	f107 0108 	add.w	r1, r7, #8
 8016e58:	4610      	mov	r0, r2
 8016e5a:	4798      	blx	r3
 8016e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016e5e:	e05d      	b.n	8016f1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016e60:	6839      	ldr	r1, [r7, #0]
 8016e62:	6878      	ldr	r0, [r7, #4]
 8016e64:	f000 fa97 	bl	8017396 <USBD_CtlError>
            err++;
 8016e68:	7afb      	ldrb	r3, [r7, #11]
 8016e6a:	3301      	adds	r3, #1
 8016e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8016e6e:	e055      	b.n	8016f1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016e76:	691b      	ldr	r3, [r3, #16]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d00b      	beq.n	8016e94 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016e82:	691b      	ldr	r3, [r3, #16]
 8016e84:	687a      	ldr	r2, [r7, #4]
 8016e86:	7c12      	ldrb	r2, [r2, #16]
 8016e88:	f107 0108 	add.w	r1, r7, #8
 8016e8c:	4610      	mov	r0, r2
 8016e8e:	4798      	blx	r3
 8016e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016e92:	e043      	b.n	8016f1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016e94:	6839      	ldr	r1, [r7, #0]
 8016e96:	6878      	ldr	r0, [r7, #4]
 8016e98:	f000 fa7d 	bl	8017396 <USBD_CtlError>
            err++;
 8016e9c:	7afb      	ldrb	r3, [r7, #11]
 8016e9e:	3301      	adds	r3, #1
 8016ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8016ea2:	e03b      	b.n	8016f1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016eaa:	695b      	ldr	r3, [r3, #20]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d00b      	beq.n	8016ec8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016eb6:	695b      	ldr	r3, [r3, #20]
 8016eb8:	687a      	ldr	r2, [r7, #4]
 8016eba:	7c12      	ldrb	r2, [r2, #16]
 8016ebc:	f107 0108 	add.w	r1, r7, #8
 8016ec0:	4610      	mov	r0, r2
 8016ec2:	4798      	blx	r3
 8016ec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016ec6:	e029      	b.n	8016f1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016ec8:	6839      	ldr	r1, [r7, #0]
 8016eca:	6878      	ldr	r0, [r7, #4]
 8016ecc:	f000 fa63 	bl	8017396 <USBD_CtlError>
            err++;
 8016ed0:	7afb      	ldrb	r3, [r7, #11]
 8016ed2:	3301      	adds	r3, #1
 8016ed4:	72fb      	strb	r3, [r7, #11]
          break;
 8016ed6:	e021      	b.n	8016f1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016ede:	699b      	ldr	r3, [r3, #24]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d00b      	beq.n	8016efc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8016eea:	699b      	ldr	r3, [r3, #24]
 8016eec:	687a      	ldr	r2, [r7, #4]
 8016eee:	7c12      	ldrb	r2, [r2, #16]
 8016ef0:	f107 0108 	add.w	r1, r7, #8
 8016ef4:	4610      	mov	r0, r2
 8016ef6:	4798      	blx	r3
 8016ef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016efa:	e00f      	b.n	8016f1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016efc:	6839      	ldr	r1, [r7, #0]
 8016efe:	6878      	ldr	r0, [r7, #4]
 8016f00:	f000 fa49 	bl	8017396 <USBD_CtlError>
            err++;
 8016f04:	7afb      	ldrb	r3, [r7, #11]
 8016f06:	3301      	adds	r3, #1
 8016f08:	72fb      	strb	r3, [r7, #11]
          break;
 8016f0a:	e007      	b.n	8016f1c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016f0c:	6839      	ldr	r1, [r7, #0]
 8016f0e:	6878      	ldr	r0, [r7, #4]
 8016f10:	f000 fa41 	bl	8017396 <USBD_CtlError>
          err++;
 8016f14:	7afb      	ldrb	r3, [r7, #11]
 8016f16:	3301      	adds	r3, #1
 8016f18:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016f1a:	bf00      	nop
      }
      break;
 8016f1c:	e037      	b.n	8016f8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	7c1b      	ldrb	r3, [r3, #16]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d109      	bne.n	8016f3a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016f2e:	f107 0208 	add.w	r2, r7, #8
 8016f32:	4610      	mov	r0, r2
 8016f34:	4798      	blx	r3
 8016f36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016f38:	e029      	b.n	8016f8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8016f3a:	6839      	ldr	r1, [r7, #0]
 8016f3c:	6878      	ldr	r0, [r7, #4]
 8016f3e:	f000 fa2a 	bl	8017396 <USBD_CtlError>
        err++;
 8016f42:	7afb      	ldrb	r3, [r7, #11]
 8016f44:	3301      	adds	r3, #1
 8016f46:	72fb      	strb	r3, [r7, #11]
      break;
 8016f48:	e021      	b.n	8016f8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	7c1b      	ldrb	r3, [r3, #16]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d10d      	bne.n	8016f6e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016f5a:	f107 0208 	add.w	r2, r7, #8
 8016f5e:	4610      	mov	r0, r2
 8016f60:	4798      	blx	r3
 8016f62:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	3301      	adds	r3, #1
 8016f68:	2207      	movs	r2, #7
 8016f6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016f6c:	e00f      	b.n	8016f8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8016f6e:	6839      	ldr	r1, [r7, #0]
 8016f70:	6878      	ldr	r0, [r7, #4]
 8016f72:	f000 fa10 	bl	8017396 <USBD_CtlError>
        err++;
 8016f76:	7afb      	ldrb	r3, [r7, #11]
 8016f78:	3301      	adds	r3, #1
 8016f7a:	72fb      	strb	r3, [r7, #11]
      break;
 8016f7c:	e007      	b.n	8016f8e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8016f7e:	6839      	ldr	r1, [r7, #0]
 8016f80:	6878      	ldr	r0, [r7, #4]
 8016f82:	f000 fa08 	bl	8017396 <USBD_CtlError>
      err++;
 8016f86:	7afb      	ldrb	r3, [r7, #11]
 8016f88:	3301      	adds	r3, #1
 8016f8a:	72fb      	strb	r3, [r7, #11]
      break;
 8016f8c:	bf00      	nop
  }

  if (err != 0U)
 8016f8e:	7afb      	ldrb	r3, [r7, #11]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d11e      	bne.n	8016fd2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8016f94:	683b      	ldr	r3, [r7, #0]
 8016f96:	88db      	ldrh	r3, [r3, #6]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d016      	beq.n	8016fca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8016f9c:	893b      	ldrh	r3, [r7, #8]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d00e      	beq.n	8016fc0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8016fa2:	683b      	ldr	r3, [r7, #0]
 8016fa4:	88da      	ldrh	r2, [r3, #6]
 8016fa6:	893b      	ldrh	r3, [r7, #8]
 8016fa8:	4293      	cmp	r3, r2
 8016faa:	bf28      	it	cs
 8016fac:	4613      	movcs	r3, r2
 8016fae:	b29b      	uxth	r3, r3
 8016fb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016fb2:	893b      	ldrh	r3, [r7, #8]
 8016fb4:	461a      	mov	r2, r3
 8016fb6:	68f9      	ldr	r1, [r7, #12]
 8016fb8:	6878      	ldr	r0, [r7, #4]
 8016fba:	f000 fa69 	bl	8017490 <USBD_CtlSendData>
 8016fbe:	e009      	b.n	8016fd4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016fc0:	6839      	ldr	r1, [r7, #0]
 8016fc2:	6878      	ldr	r0, [r7, #4]
 8016fc4:	f000 f9e7 	bl	8017396 <USBD_CtlError>
 8016fc8:	e004      	b.n	8016fd4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016fca:	6878      	ldr	r0, [r7, #4]
 8016fcc:	f000 faba 	bl	8017544 <USBD_CtlSendStatus>
 8016fd0:	e000      	b.n	8016fd4 <USBD_GetDescriptor+0x320>
    return;
 8016fd2:	bf00      	nop
  }
}
 8016fd4:	3710      	adds	r7, #16
 8016fd6:	46bd      	mov	sp, r7
 8016fd8:	bd80      	pop	{r7, pc}
 8016fda:	bf00      	nop

08016fdc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	b084      	sub	sp, #16
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	6078      	str	r0, [r7, #4]
 8016fe4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016fe6:	683b      	ldr	r3, [r7, #0]
 8016fe8:	889b      	ldrh	r3, [r3, #4]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d131      	bne.n	8017052 <USBD_SetAddress+0x76>
 8016fee:	683b      	ldr	r3, [r7, #0]
 8016ff0:	88db      	ldrh	r3, [r3, #6]
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d12d      	bne.n	8017052 <USBD_SetAddress+0x76>
 8016ff6:	683b      	ldr	r3, [r7, #0]
 8016ff8:	885b      	ldrh	r3, [r3, #2]
 8016ffa:	2b7f      	cmp	r3, #127	@ 0x7f
 8016ffc:	d829      	bhi.n	8017052 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016ffe:	683b      	ldr	r3, [r7, #0]
 8017000:	885b      	ldrh	r3, [r3, #2]
 8017002:	b2db      	uxtb	r3, r3
 8017004:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017008:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017010:	b2db      	uxtb	r3, r3
 8017012:	2b03      	cmp	r3, #3
 8017014:	d104      	bne.n	8017020 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8017016:	6839      	ldr	r1, [r7, #0]
 8017018:	6878      	ldr	r0, [r7, #4]
 801701a:	f000 f9bc 	bl	8017396 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801701e:	e01d      	b.n	801705c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	7bfa      	ldrb	r2, [r7, #15]
 8017024:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017028:	7bfb      	ldrb	r3, [r7, #15]
 801702a:	4619      	mov	r1, r3
 801702c:	6878      	ldr	r0, [r7, #4]
 801702e:	f000 ff5b 	bl	8017ee8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8017032:	6878      	ldr	r0, [r7, #4]
 8017034:	f000 fa86 	bl	8017544 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017038:	7bfb      	ldrb	r3, [r7, #15]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d004      	beq.n	8017048 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	2202      	movs	r2, #2
 8017042:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017046:	e009      	b.n	801705c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	2201      	movs	r2, #1
 801704c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017050:	e004      	b.n	801705c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8017052:	6839      	ldr	r1, [r7, #0]
 8017054:	6878      	ldr	r0, [r7, #4]
 8017056:	f000 f99e 	bl	8017396 <USBD_CtlError>
  }
}
 801705a:	bf00      	nop
 801705c:	bf00      	nop
 801705e:	3710      	adds	r7, #16
 8017060:	46bd      	mov	sp, r7
 8017062:	bd80      	pop	{r7, pc}

08017064 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017064:	b580      	push	{r7, lr}
 8017066:	b084      	sub	sp, #16
 8017068:	af00      	add	r7, sp, #0
 801706a:	6078      	str	r0, [r7, #4]
 801706c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801706e:	2300      	movs	r3, #0
 8017070:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8017072:	683b      	ldr	r3, [r7, #0]
 8017074:	885b      	ldrh	r3, [r3, #2]
 8017076:	b2da      	uxtb	r2, r3
 8017078:	4b4e      	ldr	r3, [pc, #312]	@ (80171b4 <USBD_SetConfig+0x150>)
 801707a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801707c:	4b4d      	ldr	r3, [pc, #308]	@ (80171b4 <USBD_SetConfig+0x150>)
 801707e:	781b      	ldrb	r3, [r3, #0]
 8017080:	2b01      	cmp	r3, #1
 8017082:	d905      	bls.n	8017090 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017084:	6839      	ldr	r1, [r7, #0]
 8017086:	6878      	ldr	r0, [r7, #4]
 8017088:	f000 f985 	bl	8017396 <USBD_CtlError>
    return USBD_FAIL;
 801708c:	2303      	movs	r3, #3
 801708e:	e08c      	b.n	80171aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017096:	b2db      	uxtb	r3, r3
 8017098:	2b02      	cmp	r3, #2
 801709a:	d002      	beq.n	80170a2 <USBD_SetConfig+0x3e>
 801709c:	2b03      	cmp	r3, #3
 801709e:	d029      	beq.n	80170f4 <USBD_SetConfig+0x90>
 80170a0:	e075      	b.n	801718e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80170a2:	4b44      	ldr	r3, [pc, #272]	@ (80171b4 <USBD_SetConfig+0x150>)
 80170a4:	781b      	ldrb	r3, [r3, #0]
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d020      	beq.n	80170ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80170aa:	4b42      	ldr	r3, [pc, #264]	@ (80171b4 <USBD_SetConfig+0x150>)
 80170ac:	781b      	ldrb	r3, [r3, #0]
 80170ae:	461a      	mov	r2, r3
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80170b4:	4b3f      	ldr	r3, [pc, #252]	@ (80171b4 <USBD_SetConfig+0x150>)
 80170b6:	781b      	ldrb	r3, [r3, #0]
 80170b8:	4619      	mov	r1, r3
 80170ba:	6878      	ldr	r0, [r7, #4]
 80170bc:	f7fe ffb9 	bl	8016032 <USBD_SetClassConfig>
 80170c0:	4603      	mov	r3, r0
 80170c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80170c4:	7bfb      	ldrb	r3, [r7, #15]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d008      	beq.n	80170dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80170ca:	6839      	ldr	r1, [r7, #0]
 80170cc:	6878      	ldr	r0, [r7, #4]
 80170ce:	f000 f962 	bl	8017396 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	2202      	movs	r2, #2
 80170d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80170da:	e065      	b.n	80171a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80170dc:	6878      	ldr	r0, [r7, #4]
 80170de:	f000 fa31 	bl	8017544 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	2203      	movs	r2, #3
 80170e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80170ea:	e05d      	b.n	80171a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80170ec:	6878      	ldr	r0, [r7, #4]
 80170ee:	f000 fa29 	bl	8017544 <USBD_CtlSendStatus>
      break;
 80170f2:	e059      	b.n	80171a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80170f4:	4b2f      	ldr	r3, [pc, #188]	@ (80171b4 <USBD_SetConfig+0x150>)
 80170f6:	781b      	ldrb	r3, [r3, #0]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d112      	bne.n	8017122 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	2202      	movs	r2, #2
 8017100:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8017104:	4b2b      	ldr	r3, [pc, #172]	@ (80171b4 <USBD_SetConfig+0x150>)
 8017106:	781b      	ldrb	r3, [r3, #0]
 8017108:	461a      	mov	r2, r3
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801710e:	4b29      	ldr	r3, [pc, #164]	@ (80171b4 <USBD_SetConfig+0x150>)
 8017110:	781b      	ldrb	r3, [r3, #0]
 8017112:	4619      	mov	r1, r3
 8017114:	6878      	ldr	r0, [r7, #4]
 8017116:	f7fe ffa8 	bl	801606a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801711a:	6878      	ldr	r0, [r7, #4]
 801711c:	f000 fa12 	bl	8017544 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017120:	e042      	b.n	80171a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8017122:	4b24      	ldr	r3, [pc, #144]	@ (80171b4 <USBD_SetConfig+0x150>)
 8017124:	781b      	ldrb	r3, [r3, #0]
 8017126:	461a      	mov	r2, r3
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	685b      	ldr	r3, [r3, #4]
 801712c:	429a      	cmp	r2, r3
 801712e:	d02a      	beq.n	8017186 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	685b      	ldr	r3, [r3, #4]
 8017134:	b2db      	uxtb	r3, r3
 8017136:	4619      	mov	r1, r3
 8017138:	6878      	ldr	r0, [r7, #4]
 801713a:	f7fe ff96 	bl	801606a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801713e:	4b1d      	ldr	r3, [pc, #116]	@ (80171b4 <USBD_SetConfig+0x150>)
 8017140:	781b      	ldrb	r3, [r3, #0]
 8017142:	461a      	mov	r2, r3
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017148:	4b1a      	ldr	r3, [pc, #104]	@ (80171b4 <USBD_SetConfig+0x150>)
 801714a:	781b      	ldrb	r3, [r3, #0]
 801714c:	4619      	mov	r1, r3
 801714e:	6878      	ldr	r0, [r7, #4]
 8017150:	f7fe ff6f 	bl	8016032 <USBD_SetClassConfig>
 8017154:	4603      	mov	r3, r0
 8017156:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017158:	7bfb      	ldrb	r3, [r7, #15]
 801715a:	2b00      	cmp	r3, #0
 801715c:	d00f      	beq.n	801717e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801715e:	6839      	ldr	r1, [r7, #0]
 8017160:	6878      	ldr	r0, [r7, #4]
 8017162:	f000 f918 	bl	8017396 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	685b      	ldr	r3, [r3, #4]
 801716a:	b2db      	uxtb	r3, r3
 801716c:	4619      	mov	r1, r3
 801716e:	6878      	ldr	r0, [r7, #4]
 8017170:	f7fe ff7b 	bl	801606a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	2202      	movs	r2, #2
 8017178:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801717c:	e014      	b.n	80171a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801717e:	6878      	ldr	r0, [r7, #4]
 8017180:	f000 f9e0 	bl	8017544 <USBD_CtlSendStatus>
      break;
 8017184:	e010      	b.n	80171a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017186:	6878      	ldr	r0, [r7, #4]
 8017188:	f000 f9dc 	bl	8017544 <USBD_CtlSendStatus>
      break;
 801718c:	e00c      	b.n	80171a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801718e:	6839      	ldr	r1, [r7, #0]
 8017190:	6878      	ldr	r0, [r7, #4]
 8017192:	f000 f900 	bl	8017396 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017196:	4b07      	ldr	r3, [pc, #28]	@ (80171b4 <USBD_SetConfig+0x150>)
 8017198:	781b      	ldrb	r3, [r3, #0]
 801719a:	4619      	mov	r1, r3
 801719c:	6878      	ldr	r0, [r7, #4]
 801719e:	f7fe ff64 	bl	801606a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80171a2:	2303      	movs	r3, #3
 80171a4:	73fb      	strb	r3, [r7, #15]
      break;
 80171a6:	bf00      	nop
  }

  return ret;
 80171a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80171aa:	4618      	mov	r0, r3
 80171ac:	3710      	adds	r7, #16
 80171ae:	46bd      	mov	sp, r7
 80171b0:	bd80      	pop	{r7, pc}
 80171b2:	bf00      	nop
 80171b4:	24002d3c 	.word	0x24002d3c

080171b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80171b8:	b580      	push	{r7, lr}
 80171ba:	b082      	sub	sp, #8
 80171bc:	af00      	add	r7, sp, #0
 80171be:	6078      	str	r0, [r7, #4]
 80171c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80171c2:	683b      	ldr	r3, [r7, #0]
 80171c4:	88db      	ldrh	r3, [r3, #6]
 80171c6:	2b01      	cmp	r3, #1
 80171c8:	d004      	beq.n	80171d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80171ca:	6839      	ldr	r1, [r7, #0]
 80171cc:	6878      	ldr	r0, [r7, #4]
 80171ce:	f000 f8e2 	bl	8017396 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80171d2:	e023      	b.n	801721c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80171da:	b2db      	uxtb	r3, r3
 80171dc:	2b02      	cmp	r3, #2
 80171de:	dc02      	bgt.n	80171e6 <USBD_GetConfig+0x2e>
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	dc03      	bgt.n	80171ec <USBD_GetConfig+0x34>
 80171e4:	e015      	b.n	8017212 <USBD_GetConfig+0x5a>
 80171e6:	2b03      	cmp	r3, #3
 80171e8:	d00b      	beq.n	8017202 <USBD_GetConfig+0x4a>
 80171ea:	e012      	b.n	8017212 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	2200      	movs	r2, #0
 80171f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	3308      	adds	r3, #8
 80171f6:	2201      	movs	r2, #1
 80171f8:	4619      	mov	r1, r3
 80171fa:	6878      	ldr	r0, [r7, #4]
 80171fc:	f000 f948 	bl	8017490 <USBD_CtlSendData>
        break;
 8017200:	e00c      	b.n	801721c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	3304      	adds	r3, #4
 8017206:	2201      	movs	r2, #1
 8017208:	4619      	mov	r1, r3
 801720a:	6878      	ldr	r0, [r7, #4]
 801720c:	f000 f940 	bl	8017490 <USBD_CtlSendData>
        break;
 8017210:	e004      	b.n	801721c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017212:	6839      	ldr	r1, [r7, #0]
 8017214:	6878      	ldr	r0, [r7, #4]
 8017216:	f000 f8be 	bl	8017396 <USBD_CtlError>
        break;
 801721a:	bf00      	nop
}
 801721c:	bf00      	nop
 801721e:	3708      	adds	r7, #8
 8017220:	46bd      	mov	sp, r7
 8017222:	bd80      	pop	{r7, pc}

08017224 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017224:	b580      	push	{r7, lr}
 8017226:	b082      	sub	sp, #8
 8017228:	af00      	add	r7, sp, #0
 801722a:	6078      	str	r0, [r7, #4]
 801722c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017234:	b2db      	uxtb	r3, r3
 8017236:	3b01      	subs	r3, #1
 8017238:	2b02      	cmp	r3, #2
 801723a:	d81e      	bhi.n	801727a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801723c:	683b      	ldr	r3, [r7, #0]
 801723e:	88db      	ldrh	r3, [r3, #6]
 8017240:	2b02      	cmp	r3, #2
 8017242:	d004      	beq.n	801724e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017244:	6839      	ldr	r1, [r7, #0]
 8017246:	6878      	ldr	r0, [r7, #4]
 8017248:	f000 f8a5 	bl	8017396 <USBD_CtlError>
        break;
 801724c:	e01a      	b.n	8017284 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	2201      	movs	r2, #1
 8017252:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801725a:	2b00      	cmp	r3, #0
 801725c:	d005      	beq.n	801726a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	68db      	ldr	r3, [r3, #12]
 8017262:	f043 0202 	orr.w	r2, r3, #2
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	330c      	adds	r3, #12
 801726e:	2202      	movs	r2, #2
 8017270:	4619      	mov	r1, r3
 8017272:	6878      	ldr	r0, [r7, #4]
 8017274:	f000 f90c 	bl	8017490 <USBD_CtlSendData>
      break;
 8017278:	e004      	b.n	8017284 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801727a:	6839      	ldr	r1, [r7, #0]
 801727c:	6878      	ldr	r0, [r7, #4]
 801727e:	f000 f88a 	bl	8017396 <USBD_CtlError>
      break;
 8017282:	bf00      	nop
  }
}
 8017284:	bf00      	nop
 8017286:	3708      	adds	r7, #8
 8017288:	46bd      	mov	sp, r7
 801728a:	bd80      	pop	{r7, pc}

0801728c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b082      	sub	sp, #8
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
 8017294:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017296:	683b      	ldr	r3, [r7, #0]
 8017298:	885b      	ldrh	r3, [r3, #2]
 801729a:	2b01      	cmp	r3, #1
 801729c:	d107      	bne.n	80172ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	2201      	movs	r2, #1
 80172a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80172a6:	6878      	ldr	r0, [r7, #4]
 80172a8:	f000 f94c 	bl	8017544 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80172ac:	e013      	b.n	80172d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80172ae:	683b      	ldr	r3, [r7, #0]
 80172b0:	885b      	ldrh	r3, [r3, #2]
 80172b2:	2b02      	cmp	r3, #2
 80172b4:	d10b      	bne.n	80172ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80172b6:	683b      	ldr	r3, [r7, #0]
 80172b8:	889b      	ldrh	r3, [r3, #4]
 80172ba:	0a1b      	lsrs	r3, r3, #8
 80172bc:	b29b      	uxth	r3, r3
 80172be:	b2da      	uxtb	r2, r3
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80172c6:	6878      	ldr	r0, [r7, #4]
 80172c8:	f000 f93c 	bl	8017544 <USBD_CtlSendStatus>
}
 80172cc:	e003      	b.n	80172d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80172ce:	6839      	ldr	r1, [r7, #0]
 80172d0:	6878      	ldr	r0, [r7, #4]
 80172d2:	f000 f860 	bl	8017396 <USBD_CtlError>
}
 80172d6:	bf00      	nop
 80172d8:	3708      	adds	r7, #8
 80172da:	46bd      	mov	sp, r7
 80172dc:	bd80      	pop	{r7, pc}

080172de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80172de:	b580      	push	{r7, lr}
 80172e0:	b082      	sub	sp, #8
 80172e2:	af00      	add	r7, sp, #0
 80172e4:	6078      	str	r0, [r7, #4]
 80172e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80172ee:	b2db      	uxtb	r3, r3
 80172f0:	3b01      	subs	r3, #1
 80172f2:	2b02      	cmp	r3, #2
 80172f4:	d80b      	bhi.n	801730e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80172f6:	683b      	ldr	r3, [r7, #0]
 80172f8:	885b      	ldrh	r3, [r3, #2]
 80172fa:	2b01      	cmp	r3, #1
 80172fc:	d10c      	bne.n	8017318 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	2200      	movs	r2, #0
 8017302:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017306:	6878      	ldr	r0, [r7, #4]
 8017308:	f000 f91c 	bl	8017544 <USBD_CtlSendStatus>
      }
      break;
 801730c:	e004      	b.n	8017318 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801730e:	6839      	ldr	r1, [r7, #0]
 8017310:	6878      	ldr	r0, [r7, #4]
 8017312:	f000 f840 	bl	8017396 <USBD_CtlError>
      break;
 8017316:	e000      	b.n	801731a <USBD_ClrFeature+0x3c>
      break;
 8017318:	bf00      	nop
  }
}
 801731a:	bf00      	nop
 801731c:	3708      	adds	r7, #8
 801731e:	46bd      	mov	sp, r7
 8017320:	bd80      	pop	{r7, pc}

08017322 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017322:	b580      	push	{r7, lr}
 8017324:	b084      	sub	sp, #16
 8017326:	af00      	add	r7, sp, #0
 8017328:	6078      	str	r0, [r7, #4]
 801732a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801732c:	683b      	ldr	r3, [r7, #0]
 801732e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	781a      	ldrb	r2, [r3, #0]
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017338:	68fb      	ldr	r3, [r7, #12]
 801733a:	3301      	adds	r3, #1
 801733c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	781a      	ldrb	r2, [r3, #0]
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	3301      	adds	r3, #1
 801734a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801734c:	68f8      	ldr	r0, [r7, #12]
 801734e:	f7ff fa16 	bl	801677e <SWAPBYTE>
 8017352:	4603      	mov	r3, r0
 8017354:	461a      	mov	r2, r3
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	3301      	adds	r3, #1
 801735e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	3301      	adds	r3, #1
 8017364:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017366:	68f8      	ldr	r0, [r7, #12]
 8017368:	f7ff fa09 	bl	801677e <SWAPBYTE>
 801736c:	4603      	mov	r3, r0
 801736e:	461a      	mov	r2, r3
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	3301      	adds	r3, #1
 8017378:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	3301      	adds	r3, #1
 801737e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017380:	68f8      	ldr	r0, [r7, #12]
 8017382:	f7ff f9fc 	bl	801677e <SWAPBYTE>
 8017386:	4603      	mov	r3, r0
 8017388:	461a      	mov	r2, r3
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	80da      	strh	r2, [r3, #6]
}
 801738e:	bf00      	nop
 8017390:	3710      	adds	r7, #16
 8017392:	46bd      	mov	sp, r7
 8017394:	bd80      	pop	{r7, pc}

08017396 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017396:	b580      	push	{r7, lr}
 8017398:	b082      	sub	sp, #8
 801739a:	af00      	add	r7, sp, #0
 801739c:	6078      	str	r0, [r7, #4]
 801739e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80173a0:	2180      	movs	r1, #128	@ 0x80
 80173a2:	6878      	ldr	r0, [r7, #4]
 80173a4:	f000 fd36 	bl	8017e14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80173a8:	2100      	movs	r1, #0
 80173aa:	6878      	ldr	r0, [r7, #4]
 80173ac:	f000 fd32 	bl	8017e14 <USBD_LL_StallEP>
}
 80173b0:	bf00      	nop
 80173b2:	3708      	adds	r7, #8
 80173b4:	46bd      	mov	sp, r7
 80173b6:	bd80      	pop	{r7, pc}

080173b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80173b8:	b580      	push	{r7, lr}
 80173ba:	b086      	sub	sp, #24
 80173bc:	af00      	add	r7, sp, #0
 80173be:	60f8      	str	r0, [r7, #12]
 80173c0:	60b9      	str	r1, [r7, #8]
 80173c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80173c4:	2300      	movs	r3, #0
 80173c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	d042      	beq.n	8017454 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80173d2:	6938      	ldr	r0, [r7, #16]
 80173d4:	f000 f842 	bl	801745c <USBD_GetLen>
 80173d8:	4603      	mov	r3, r0
 80173da:	3301      	adds	r3, #1
 80173dc:	005b      	lsls	r3, r3, #1
 80173de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80173e2:	d808      	bhi.n	80173f6 <USBD_GetString+0x3e>
 80173e4:	6938      	ldr	r0, [r7, #16]
 80173e6:	f000 f839 	bl	801745c <USBD_GetLen>
 80173ea:	4603      	mov	r3, r0
 80173ec:	3301      	adds	r3, #1
 80173ee:	b29b      	uxth	r3, r3
 80173f0:	005b      	lsls	r3, r3, #1
 80173f2:	b29a      	uxth	r2, r3
 80173f4:	e001      	b.n	80173fa <USBD_GetString+0x42>
 80173f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80173fe:	7dfb      	ldrb	r3, [r7, #23]
 8017400:	68ba      	ldr	r2, [r7, #8]
 8017402:	4413      	add	r3, r2
 8017404:	687a      	ldr	r2, [r7, #4]
 8017406:	7812      	ldrb	r2, [r2, #0]
 8017408:	701a      	strb	r2, [r3, #0]
  idx++;
 801740a:	7dfb      	ldrb	r3, [r7, #23]
 801740c:	3301      	adds	r3, #1
 801740e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017410:	7dfb      	ldrb	r3, [r7, #23]
 8017412:	68ba      	ldr	r2, [r7, #8]
 8017414:	4413      	add	r3, r2
 8017416:	2203      	movs	r2, #3
 8017418:	701a      	strb	r2, [r3, #0]
  idx++;
 801741a:	7dfb      	ldrb	r3, [r7, #23]
 801741c:	3301      	adds	r3, #1
 801741e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017420:	e013      	b.n	801744a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8017422:	7dfb      	ldrb	r3, [r7, #23]
 8017424:	68ba      	ldr	r2, [r7, #8]
 8017426:	4413      	add	r3, r2
 8017428:	693a      	ldr	r2, [r7, #16]
 801742a:	7812      	ldrb	r2, [r2, #0]
 801742c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801742e:	693b      	ldr	r3, [r7, #16]
 8017430:	3301      	adds	r3, #1
 8017432:	613b      	str	r3, [r7, #16]
    idx++;
 8017434:	7dfb      	ldrb	r3, [r7, #23]
 8017436:	3301      	adds	r3, #1
 8017438:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801743a:	7dfb      	ldrb	r3, [r7, #23]
 801743c:	68ba      	ldr	r2, [r7, #8]
 801743e:	4413      	add	r3, r2
 8017440:	2200      	movs	r2, #0
 8017442:	701a      	strb	r2, [r3, #0]
    idx++;
 8017444:	7dfb      	ldrb	r3, [r7, #23]
 8017446:	3301      	adds	r3, #1
 8017448:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801744a:	693b      	ldr	r3, [r7, #16]
 801744c:	781b      	ldrb	r3, [r3, #0]
 801744e:	2b00      	cmp	r3, #0
 8017450:	d1e7      	bne.n	8017422 <USBD_GetString+0x6a>
 8017452:	e000      	b.n	8017456 <USBD_GetString+0x9e>
    return;
 8017454:	bf00      	nop
  }
}
 8017456:	3718      	adds	r7, #24
 8017458:	46bd      	mov	sp, r7
 801745a:	bd80      	pop	{r7, pc}

0801745c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801745c:	b480      	push	{r7}
 801745e:	b085      	sub	sp, #20
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017464:	2300      	movs	r3, #0
 8017466:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801746c:	e005      	b.n	801747a <USBD_GetLen+0x1e>
  {
    len++;
 801746e:	7bfb      	ldrb	r3, [r7, #15]
 8017470:	3301      	adds	r3, #1
 8017472:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017474:	68bb      	ldr	r3, [r7, #8]
 8017476:	3301      	adds	r3, #1
 8017478:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801747a:	68bb      	ldr	r3, [r7, #8]
 801747c:	781b      	ldrb	r3, [r3, #0]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d1f5      	bne.n	801746e <USBD_GetLen+0x12>
  }

  return len;
 8017482:	7bfb      	ldrb	r3, [r7, #15]
}
 8017484:	4618      	mov	r0, r3
 8017486:	3714      	adds	r7, #20
 8017488:	46bd      	mov	sp, r7
 801748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801748e:	4770      	bx	lr

08017490 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8017490:	b580      	push	{r7, lr}
 8017492:	b084      	sub	sp, #16
 8017494:	af00      	add	r7, sp, #0
 8017496:	60f8      	str	r0, [r7, #12]
 8017498:	60b9      	str	r1, [r7, #8]
 801749a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	2202      	movs	r2, #2
 80174a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	687a      	ldr	r2, [r7, #4]
 80174a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	687a      	ldr	r2, [r7, #4]
 80174ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	68ba      	ldr	r2, [r7, #8]
 80174b4:	2100      	movs	r1, #0
 80174b6:	68f8      	ldr	r0, [r7, #12]
 80174b8:	f000 fd35 	bl	8017f26 <USBD_LL_Transmit>

  return USBD_OK;
 80174bc:	2300      	movs	r3, #0
}
 80174be:	4618      	mov	r0, r3
 80174c0:	3710      	adds	r7, #16
 80174c2:	46bd      	mov	sp, r7
 80174c4:	bd80      	pop	{r7, pc}

080174c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80174c6:	b580      	push	{r7, lr}
 80174c8:	b084      	sub	sp, #16
 80174ca:	af00      	add	r7, sp, #0
 80174cc:	60f8      	str	r0, [r7, #12]
 80174ce:	60b9      	str	r1, [r7, #8]
 80174d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	68ba      	ldr	r2, [r7, #8]
 80174d6:	2100      	movs	r1, #0
 80174d8:	68f8      	ldr	r0, [r7, #12]
 80174da:	f000 fd24 	bl	8017f26 <USBD_LL_Transmit>

  return USBD_OK;
 80174de:	2300      	movs	r3, #0
}
 80174e0:	4618      	mov	r0, r3
 80174e2:	3710      	adds	r7, #16
 80174e4:	46bd      	mov	sp, r7
 80174e6:	bd80      	pop	{r7, pc}

080174e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b084      	sub	sp, #16
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	60f8      	str	r0, [r7, #12]
 80174f0:	60b9      	str	r1, [r7, #8]
 80174f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	2203      	movs	r2, #3
 80174f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80174fc:	68fb      	ldr	r3, [r7, #12]
 80174fe:	687a      	ldr	r2, [r7, #4]
 8017500:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	687a      	ldr	r2, [r7, #4]
 8017508:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	68ba      	ldr	r2, [r7, #8]
 8017510:	2100      	movs	r1, #0
 8017512:	68f8      	ldr	r0, [r7, #12]
 8017514:	f000 fd28 	bl	8017f68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017518:	2300      	movs	r3, #0
}
 801751a:	4618      	mov	r0, r3
 801751c:	3710      	adds	r7, #16
 801751e:	46bd      	mov	sp, r7
 8017520:	bd80      	pop	{r7, pc}

08017522 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017522:	b580      	push	{r7, lr}
 8017524:	b084      	sub	sp, #16
 8017526:	af00      	add	r7, sp, #0
 8017528:	60f8      	str	r0, [r7, #12]
 801752a:	60b9      	str	r1, [r7, #8]
 801752c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	68ba      	ldr	r2, [r7, #8]
 8017532:	2100      	movs	r1, #0
 8017534:	68f8      	ldr	r0, [r7, #12]
 8017536:	f000 fd17 	bl	8017f68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801753a:	2300      	movs	r3, #0
}
 801753c:	4618      	mov	r0, r3
 801753e:	3710      	adds	r7, #16
 8017540:	46bd      	mov	sp, r7
 8017542:	bd80      	pop	{r7, pc}

08017544 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b082      	sub	sp, #8
 8017548:	af00      	add	r7, sp, #0
 801754a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	2204      	movs	r2, #4
 8017550:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017554:	2300      	movs	r3, #0
 8017556:	2200      	movs	r2, #0
 8017558:	2100      	movs	r1, #0
 801755a:	6878      	ldr	r0, [r7, #4]
 801755c:	f000 fce3 	bl	8017f26 <USBD_LL_Transmit>

  return USBD_OK;
 8017560:	2300      	movs	r3, #0
}
 8017562:	4618      	mov	r0, r3
 8017564:	3708      	adds	r7, #8
 8017566:	46bd      	mov	sp, r7
 8017568:	bd80      	pop	{r7, pc}

0801756a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801756a:	b580      	push	{r7, lr}
 801756c:	b082      	sub	sp, #8
 801756e:	af00      	add	r7, sp, #0
 8017570:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	2205      	movs	r2, #5
 8017576:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801757a:	2300      	movs	r3, #0
 801757c:	2200      	movs	r2, #0
 801757e:	2100      	movs	r1, #0
 8017580:	6878      	ldr	r0, [r7, #4]
 8017582:	f000 fcf1 	bl	8017f68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017586:	2300      	movs	r3, #0
}
 8017588:	4618      	mov	r0, r3
 801758a:	3708      	adds	r7, #8
 801758c:	46bd      	mov	sp, r7
 801758e:	bd80      	pop	{r7, pc}

08017590 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017590:	b580      	push	{r7, lr}
 8017592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8017594:	2201      	movs	r2, #1
 8017596:	4913      	ldr	r1, [pc, #76]	@ (80175e4 <MX_USB_DEVICE_Init+0x54>)
 8017598:	4813      	ldr	r0, [pc, #76]	@ (80175e8 <MX_USB_DEVICE_Init+0x58>)
 801759a:	f7fe fccd 	bl	8015f38 <USBD_Init>
 801759e:	4603      	mov	r3, r0
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d001      	beq.n	80175a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80175a4:	f7e9 fe74 	bl	8001290 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80175a8:	4910      	ldr	r1, [pc, #64]	@ (80175ec <MX_USB_DEVICE_Init+0x5c>)
 80175aa:	480f      	ldr	r0, [pc, #60]	@ (80175e8 <MX_USB_DEVICE_Init+0x58>)
 80175ac:	f7fe fcf4 	bl	8015f98 <USBD_RegisterClass>
 80175b0:	4603      	mov	r3, r0
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d001      	beq.n	80175ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80175b6:	f7e9 fe6b 	bl	8001290 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80175ba:	490d      	ldr	r1, [pc, #52]	@ (80175f0 <MX_USB_DEVICE_Init+0x60>)
 80175bc:	480a      	ldr	r0, [pc, #40]	@ (80175e8 <MX_USB_DEVICE_Init+0x58>)
 80175be:	f7fe fbeb 	bl	8015d98 <USBD_CDC_RegisterInterface>
 80175c2:	4603      	mov	r3, r0
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d001      	beq.n	80175cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80175c8:	f7e9 fe62 	bl	8001290 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80175cc:	4806      	ldr	r0, [pc, #24]	@ (80175e8 <MX_USB_DEVICE_Init+0x58>)
 80175ce:	f7fe fd19 	bl	8016004 <USBD_Start>
 80175d2:	4603      	mov	r3, r0
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d001      	beq.n	80175dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80175d8:	f7e9 fe5a 	bl	8001290 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80175dc:	f7f5 f94c 	bl	800c878 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80175e0:	bf00      	nop
 80175e2:	bd80      	pop	{r7, pc}
 80175e4:	240000b0 	.word	0x240000b0
 80175e8:	24002d40 	.word	0x24002d40
 80175ec:	2400001c 	.word	0x2400001c
 80175f0:	2400009c 	.word	0x2400009c

080175f4 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80175f4:	b580      	push	{r7, lr}
 80175f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80175f8:	2200      	movs	r2, #0
 80175fa:	4905      	ldr	r1, [pc, #20]	@ (8017610 <CDC_Init_HS+0x1c>)
 80175fc:	4805      	ldr	r0, [pc, #20]	@ (8017614 <CDC_Init_HS+0x20>)
 80175fe:	f7fe fbe5 	bl	8015dcc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8017602:	4905      	ldr	r1, [pc, #20]	@ (8017618 <CDC_Init_HS+0x24>)
 8017604:	4803      	ldr	r0, [pc, #12]	@ (8017614 <CDC_Init_HS+0x20>)
 8017606:	f7fe fc03 	bl	8015e10 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801760a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801760c:	4618      	mov	r0, r3
 801760e:	bd80      	pop	{r7, pc}
 8017610:	24003820 	.word	0x24003820
 8017614:	24002d40 	.word	0x24002d40
 8017618:	24003020 	.word	0x24003020

0801761c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801761c:	b480      	push	{r7}
 801761e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8017620:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8017622:	4618      	mov	r0, r3
 8017624:	46bd      	mov	sp, r7
 8017626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801762a:	4770      	bx	lr

0801762c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801762c:	b480      	push	{r7}
 801762e:	b083      	sub	sp, #12
 8017630:	af00      	add	r7, sp, #0
 8017632:	4603      	mov	r3, r0
 8017634:	6039      	str	r1, [r7, #0]
 8017636:	71fb      	strb	r3, [r7, #7]
 8017638:	4613      	mov	r3, r2
 801763a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801763c:	79fb      	ldrb	r3, [r7, #7]
 801763e:	2b23      	cmp	r3, #35	@ 0x23
 8017640:	d84a      	bhi.n	80176d8 <CDC_Control_HS+0xac>
 8017642:	a201      	add	r2, pc, #4	@ (adr r2, 8017648 <CDC_Control_HS+0x1c>)
 8017644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017648:	080176d9 	.word	0x080176d9
 801764c:	080176d9 	.word	0x080176d9
 8017650:	080176d9 	.word	0x080176d9
 8017654:	080176d9 	.word	0x080176d9
 8017658:	080176d9 	.word	0x080176d9
 801765c:	080176d9 	.word	0x080176d9
 8017660:	080176d9 	.word	0x080176d9
 8017664:	080176d9 	.word	0x080176d9
 8017668:	080176d9 	.word	0x080176d9
 801766c:	080176d9 	.word	0x080176d9
 8017670:	080176d9 	.word	0x080176d9
 8017674:	080176d9 	.word	0x080176d9
 8017678:	080176d9 	.word	0x080176d9
 801767c:	080176d9 	.word	0x080176d9
 8017680:	080176d9 	.word	0x080176d9
 8017684:	080176d9 	.word	0x080176d9
 8017688:	080176d9 	.word	0x080176d9
 801768c:	080176d9 	.word	0x080176d9
 8017690:	080176d9 	.word	0x080176d9
 8017694:	080176d9 	.word	0x080176d9
 8017698:	080176d9 	.word	0x080176d9
 801769c:	080176d9 	.word	0x080176d9
 80176a0:	080176d9 	.word	0x080176d9
 80176a4:	080176d9 	.word	0x080176d9
 80176a8:	080176d9 	.word	0x080176d9
 80176ac:	080176d9 	.word	0x080176d9
 80176b0:	080176d9 	.word	0x080176d9
 80176b4:	080176d9 	.word	0x080176d9
 80176b8:	080176d9 	.word	0x080176d9
 80176bc:	080176d9 	.word	0x080176d9
 80176c0:	080176d9 	.word	0x080176d9
 80176c4:	080176d9 	.word	0x080176d9
 80176c8:	080176d9 	.word	0x080176d9
 80176cc:	080176d9 	.word	0x080176d9
 80176d0:	080176d9 	.word	0x080176d9
 80176d4:	080176d9 	.word	0x080176d9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80176d8:	bf00      	nop
  }

  return (USBD_OK);
 80176da:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80176dc:	4618      	mov	r0, r3
 80176de:	370c      	adds	r7, #12
 80176e0:	46bd      	mov	sp, r7
 80176e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e6:	4770      	bx	lr

080176e8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80176e8:	b580      	push	{r7, lr}
 80176ea:	b082      	sub	sp, #8
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	6078      	str	r0, [r7, #4]
 80176f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80176f2:	6879      	ldr	r1, [r7, #4]
 80176f4:	4808      	ldr	r0, [pc, #32]	@ (8017718 <CDC_Receive_HS+0x30>)
 80176f6:	f7fe fb8b 	bl	8015e10 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80176fa:	4807      	ldr	r0, [pc, #28]	@ (8017718 <CDC_Receive_HS+0x30>)
 80176fc:	f7fe fbe6 	bl	8015ecc <USBD_CDC_ReceivePacket>

  usbReceivedFlag = true;
 8017700:	4b06      	ldr	r3, [pc, #24]	@ (801771c <CDC_Receive_HS+0x34>)
 8017702:	2201      	movs	r2, #1
 8017704:	701a      	strb	r2, [r3, #0]
  receiveDataToBuffer(Buf,Len);
 8017706:	6839      	ldr	r1, [r7, #0]
 8017708:	6878      	ldr	r0, [r7, #4]
 801770a:	f000 f841 	bl	8017790 <receiveDataToBuffer>

  return (USBD_OK);
 801770e:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8017710:	4618      	mov	r0, r3
 8017712:	3708      	adds	r7, #8
 8017714:	46bd      	mov	sp, r7
 8017716:	bd80      	pop	{r7, pc}
 8017718:	24002d40 	.word	0x24002d40
 801771c:	2400301c 	.word	0x2400301c

08017720 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8017720:	b580      	push	{r7, lr}
 8017722:	b084      	sub	sp, #16
 8017724:	af00      	add	r7, sp, #0
 8017726:	6078      	str	r0, [r7, #4]
 8017728:	460b      	mov	r3, r1
 801772a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801772c:	2300      	movs	r3, #0
 801772e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8017730:	4b0d      	ldr	r3, [pc, #52]	@ (8017768 <CDC_Transmit_HS+0x48>)
 8017732:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8017736:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8017738:	68bb      	ldr	r3, [r7, #8]
 801773a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801773e:	2b00      	cmp	r3, #0
 8017740:	d001      	beq.n	8017746 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8017742:	2301      	movs	r3, #1
 8017744:	e00b      	b.n	801775e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8017746:	887b      	ldrh	r3, [r7, #2]
 8017748:	461a      	mov	r2, r3
 801774a:	6879      	ldr	r1, [r7, #4]
 801774c:	4806      	ldr	r0, [pc, #24]	@ (8017768 <CDC_Transmit_HS+0x48>)
 801774e:	f7fe fb3d 	bl	8015dcc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8017752:	4805      	ldr	r0, [pc, #20]	@ (8017768 <CDC_Transmit_HS+0x48>)
 8017754:	f7fe fb7a 	bl	8015e4c <USBD_CDC_TransmitPacket>
 8017758:	4603      	mov	r3, r0
 801775a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801775c:	7bfb      	ldrb	r3, [r7, #15]
}
 801775e:	4618      	mov	r0, r3
 8017760:	3710      	adds	r7, #16
 8017762:	46bd      	mov	sp, r7
 8017764:	bd80      	pop	{r7, pc}
 8017766:	bf00      	nop
 8017768:	24002d40 	.word	0x24002d40

0801776c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801776c:	b480      	push	{r7}
 801776e:	b087      	sub	sp, #28
 8017770:	af00      	add	r7, sp, #0
 8017772:	60f8      	str	r0, [r7, #12]
 8017774:	60b9      	str	r1, [r7, #8]
 8017776:	4613      	mov	r3, r2
 8017778:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801777a:	2300      	movs	r3, #0
 801777c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801777e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017782:	4618      	mov	r0, r3
 8017784:	371c      	adds	r7, #28
 8017786:	46bd      	mov	sp, r7
 8017788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801778c:	4770      	bx	lr
	...

08017790 <receiveDataToBuffer>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void receiveDataToBuffer(uint8_t* Buf, uint32_t *Len)
{
 8017790:	b580      	push	{r7, lr}
 8017792:	b084      	sub	sp, #16
 8017794:	af00      	add	r7, sp, #0
 8017796:	6078      	str	r0, [r7, #4]
 8017798:	6039      	str	r1, [r7, #0]
  uint8_t len = (uint8_t)* Len;
 801779a:	683b      	ldr	r3, [r7, #0]
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	73fb      	strb	r3, [r7, #15]
  memset(UsbRxDataBuffer, '\0', USB_RX_BUFF_SIZE);
 80177a0:	220f      	movs	r2, #15
 80177a2:	2100      	movs	r1, #0
 80177a4:	4809      	ldr	r0, [pc, #36]	@ (80177cc <receiveDataToBuffer+0x3c>)
 80177a6:	f001 feed 	bl	8019584 <memset>
  memcpy(UsbRxDataBuffer, Buf, len);
 80177aa:	7bfb      	ldrb	r3, [r7, #15]
 80177ac:	461a      	mov	r2, r3
 80177ae:	6879      	ldr	r1, [r7, #4]
 80177b0:	4806      	ldr	r0, [pc, #24]	@ (80177cc <receiveDataToBuffer+0x3c>)
 80177b2:	f001 ff62 	bl	801967a <memcpy>
  memset(Buf, '\0', len);
 80177b6:	7bfb      	ldrb	r3, [r7, #15]
 80177b8:	461a      	mov	r2, r3
 80177ba:	2100      	movs	r1, #0
 80177bc:	6878      	ldr	r0, [r7, #4]
 80177be:	f001 fee1 	bl	8019584 <memset>

}
 80177c2:	bf00      	nop
 80177c4:	3710      	adds	r7, #16
 80177c6:	46bd      	mov	sp, r7
 80177c8:	bd80      	pop	{r7, pc}
 80177ca:	bf00      	nop
 80177cc:	24002d28 	.word	0x24002d28

080177d0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80177d0:	b480      	push	{r7}
 80177d2:	b083      	sub	sp, #12
 80177d4:	af00      	add	r7, sp, #0
 80177d6:	4603      	mov	r3, r0
 80177d8:	6039      	str	r1, [r7, #0]
 80177da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80177dc:	683b      	ldr	r3, [r7, #0]
 80177de:	2212      	movs	r2, #18
 80177e0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80177e2:	4b03      	ldr	r3, [pc, #12]	@ (80177f0 <USBD_HS_DeviceDescriptor+0x20>)
}
 80177e4:	4618      	mov	r0, r3
 80177e6:	370c      	adds	r7, #12
 80177e8:	46bd      	mov	sp, r7
 80177ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ee:	4770      	bx	lr
 80177f0:	240000d0 	.word	0x240000d0

080177f4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80177f4:	b480      	push	{r7}
 80177f6:	b083      	sub	sp, #12
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	4603      	mov	r3, r0
 80177fc:	6039      	str	r1, [r7, #0]
 80177fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017800:	683b      	ldr	r3, [r7, #0]
 8017802:	2204      	movs	r2, #4
 8017804:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017806:	4b03      	ldr	r3, [pc, #12]	@ (8017814 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8017808:	4618      	mov	r0, r3
 801780a:	370c      	adds	r7, #12
 801780c:	46bd      	mov	sp, r7
 801780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017812:	4770      	bx	lr
 8017814:	240000e4 	.word	0x240000e4

08017818 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017818:	b580      	push	{r7, lr}
 801781a:	b082      	sub	sp, #8
 801781c:	af00      	add	r7, sp, #0
 801781e:	4603      	mov	r3, r0
 8017820:	6039      	str	r1, [r7, #0]
 8017822:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017824:	79fb      	ldrb	r3, [r7, #7]
 8017826:	2b00      	cmp	r3, #0
 8017828:	d105      	bne.n	8017836 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801782a:	683a      	ldr	r2, [r7, #0]
 801782c:	4907      	ldr	r1, [pc, #28]	@ (801784c <USBD_HS_ProductStrDescriptor+0x34>)
 801782e:	4808      	ldr	r0, [pc, #32]	@ (8017850 <USBD_HS_ProductStrDescriptor+0x38>)
 8017830:	f7ff fdc2 	bl	80173b8 <USBD_GetString>
 8017834:	e004      	b.n	8017840 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8017836:	683a      	ldr	r2, [r7, #0]
 8017838:	4904      	ldr	r1, [pc, #16]	@ (801784c <USBD_HS_ProductStrDescriptor+0x34>)
 801783a:	4805      	ldr	r0, [pc, #20]	@ (8017850 <USBD_HS_ProductStrDescriptor+0x38>)
 801783c:	f7ff fdbc 	bl	80173b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017840:	4b02      	ldr	r3, [pc, #8]	@ (801784c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8017842:	4618      	mov	r0, r3
 8017844:	3708      	adds	r7, #8
 8017846:	46bd      	mov	sp, r7
 8017848:	bd80      	pop	{r7, pc}
 801784a:	bf00      	nop
 801784c:	24004020 	.word	0x24004020
 8017850:	0801a46c 	.word	0x0801a46c

08017854 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017854:	b580      	push	{r7, lr}
 8017856:	b082      	sub	sp, #8
 8017858:	af00      	add	r7, sp, #0
 801785a:	4603      	mov	r3, r0
 801785c:	6039      	str	r1, [r7, #0]
 801785e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017860:	683a      	ldr	r2, [r7, #0]
 8017862:	4904      	ldr	r1, [pc, #16]	@ (8017874 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8017864:	4804      	ldr	r0, [pc, #16]	@ (8017878 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8017866:	f7ff fda7 	bl	80173b8 <USBD_GetString>
  return USBD_StrDesc;
 801786a:	4b02      	ldr	r3, [pc, #8]	@ (8017874 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801786c:	4618      	mov	r0, r3
 801786e:	3708      	adds	r7, #8
 8017870:	46bd      	mov	sp, r7
 8017872:	bd80      	pop	{r7, pc}
 8017874:	24004020 	.word	0x24004020
 8017878:	0801a484 	.word	0x0801a484

0801787c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801787c:	b580      	push	{r7, lr}
 801787e:	b082      	sub	sp, #8
 8017880:	af00      	add	r7, sp, #0
 8017882:	4603      	mov	r3, r0
 8017884:	6039      	str	r1, [r7, #0]
 8017886:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017888:	683b      	ldr	r3, [r7, #0]
 801788a:	221a      	movs	r2, #26
 801788c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801788e:	f000 f843 	bl	8017918 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8017892:	4b02      	ldr	r3, [pc, #8]	@ (801789c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8017894:	4618      	mov	r0, r3
 8017896:	3708      	adds	r7, #8
 8017898:	46bd      	mov	sp, r7
 801789a:	bd80      	pop	{r7, pc}
 801789c:	240000e8 	.word	0x240000e8

080178a0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80178a0:	b580      	push	{r7, lr}
 80178a2:	b082      	sub	sp, #8
 80178a4:	af00      	add	r7, sp, #0
 80178a6:	4603      	mov	r3, r0
 80178a8:	6039      	str	r1, [r7, #0]
 80178aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80178ac:	79fb      	ldrb	r3, [r7, #7]
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d105      	bne.n	80178be <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80178b2:	683a      	ldr	r2, [r7, #0]
 80178b4:	4907      	ldr	r1, [pc, #28]	@ (80178d4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80178b6:	4808      	ldr	r0, [pc, #32]	@ (80178d8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80178b8:	f7ff fd7e 	bl	80173b8 <USBD_GetString>
 80178bc:	e004      	b.n	80178c8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80178be:	683a      	ldr	r2, [r7, #0]
 80178c0:	4904      	ldr	r1, [pc, #16]	@ (80178d4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80178c2:	4805      	ldr	r0, [pc, #20]	@ (80178d8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80178c4:	f7ff fd78 	bl	80173b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80178c8:	4b02      	ldr	r3, [pc, #8]	@ (80178d4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80178ca:	4618      	mov	r0, r3
 80178cc:	3708      	adds	r7, #8
 80178ce:	46bd      	mov	sp, r7
 80178d0:	bd80      	pop	{r7, pc}
 80178d2:	bf00      	nop
 80178d4:	24004020 	.word	0x24004020
 80178d8:	0801a498 	.word	0x0801a498

080178dc <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80178dc:	b580      	push	{r7, lr}
 80178de:	b082      	sub	sp, #8
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	4603      	mov	r3, r0
 80178e4:	6039      	str	r1, [r7, #0]
 80178e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80178e8:	79fb      	ldrb	r3, [r7, #7]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d105      	bne.n	80178fa <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80178ee:	683a      	ldr	r2, [r7, #0]
 80178f0:	4907      	ldr	r1, [pc, #28]	@ (8017910 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80178f2:	4808      	ldr	r0, [pc, #32]	@ (8017914 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80178f4:	f7ff fd60 	bl	80173b8 <USBD_GetString>
 80178f8:	e004      	b.n	8017904 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80178fa:	683a      	ldr	r2, [r7, #0]
 80178fc:	4904      	ldr	r1, [pc, #16]	@ (8017910 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80178fe:	4805      	ldr	r0, [pc, #20]	@ (8017914 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8017900:	f7ff fd5a 	bl	80173b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017904:	4b02      	ldr	r3, [pc, #8]	@ (8017910 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8017906:	4618      	mov	r0, r3
 8017908:	3708      	adds	r7, #8
 801790a:	46bd      	mov	sp, r7
 801790c:	bd80      	pop	{r7, pc}
 801790e:	bf00      	nop
 8017910:	24004020 	.word	0x24004020
 8017914:	0801a4a4 	.word	0x0801a4a4

08017918 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017918:	b580      	push	{r7, lr}
 801791a:	b084      	sub	sp, #16
 801791c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801791e:	4b0f      	ldr	r3, [pc, #60]	@ (801795c <Get_SerialNum+0x44>)
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017924:	4b0e      	ldr	r3, [pc, #56]	@ (8017960 <Get_SerialNum+0x48>)
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801792a:	4b0e      	ldr	r3, [pc, #56]	@ (8017964 <Get_SerialNum+0x4c>)
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017930:	68fa      	ldr	r2, [r7, #12]
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	4413      	add	r3, r2
 8017936:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017938:	68fb      	ldr	r3, [r7, #12]
 801793a:	2b00      	cmp	r3, #0
 801793c:	d009      	beq.n	8017952 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801793e:	2208      	movs	r2, #8
 8017940:	4909      	ldr	r1, [pc, #36]	@ (8017968 <Get_SerialNum+0x50>)
 8017942:	68f8      	ldr	r0, [r7, #12]
 8017944:	f000 f814 	bl	8017970 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017948:	2204      	movs	r2, #4
 801794a:	4908      	ldr	r1, [pc, #32]	@ (801796c <Get_SerialNum+0x54>)
 801794c:	68b8      	ldr	r0, [r7, #8]
 801794e:	f000 f80f 	bl	8017970 <IntToUnicode>
  }
}
 8017952:	bf00      	nop
 8017954:	3710      	adds	r7, #16
 8017956:	46bd      	mov	sp, r7
 8017958:	bd80      	pop	{r7, pc}
 801795a:	bf00      	nop
 801795c:	1ff1e800 	.word	0x1ff1e800
 8017960:	1ff1e804 	.word	0x1ff1e804
 8017964:	1ff1e808 	.word	0x1ff1e808
 8017968:	240000ea 	.word	0x240000ea
 801796c:	240000fa 	.word	0x240000fa

08017970 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017970:	b480      	push	{r7}
 8017972:	b087      	sub	sp, #28
 8017974:	af00      	add	r7, sp, #0
 8017976:	60f8      	str	r0, [r7, #12]
 8017978:	60b9      	str	r1, [r7, #8]
 801797a:	4613      	mov	r3, r2
 801797c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801797e:	2300      	movs	r3, #0
 8017980:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017982:	2300      	movs	r3, #0
 8017984:	75fb      	strb	r3, [r7, #23]
 8017986:	e027      	b.n	80179d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	0f1b      	lsrs	r3, r3, #28
 801798c:	2b09      	cmp	r3, #9
 801798e:	d80b      	bhi.n	80179a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	0f1b      	lsrs	r3, r3, #28
 8017994:	b2da      	uxtb	r2, r3
 8017996:	7dfb      	ldrb	r3, [r7, #23]
 8017998:	005b      	lsls	r3, r3, #1
 801799a:	4619      	mov	r1, r3
 801799c:	68bb      	ldr	r3, [r7, #8]
 801799e:	440b      	add	r3, r1
 80179a0:	3230      	adds	r2, #48	@ 0x30
 80179a2:	b2d2      	uxtb	r2, r2
 80179a4:	701a      	strb	r2, [r3, #0]
 80179a6:	e00a      	b.n	80179be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	0f1b      	lsrs	r3, r3, #28
 80179ac:	b2da      	uxtb	r2, r3
 80179ae:	7dfb      	ldrb	r3, [r7, #23]
 80179b0:	005b      	lsls	r3, r3, #1
 80179b2:	4619      	mov	r1, r3
 80179b4:	68bb      	ldr	r3, [r7, #8]
 80179b6:	440b      	add	r3, r1
 80179b8:	3237      	adds	r2, #55	@ 0x37
 80179ba:	b2d2      	uxtb	r2, r2
 80179bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	011b      	lsls	r3, r3, #4
 80179c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80179c4:	7dfb      	ldrb	r3, [r7, #23]
 80179c6:	005b      	lsls	r3, r3, #1
 80179c8:	3301      	adds	r3, #1
 80179ca:	68ba      	ldr	r2, [r7, #8]
 80179cc:	4413      	add	r3, r2
 80179ce:	2200      	movs	r2, #0
 80179d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80179d2:	7dfb      	ldrb	r3, [r7, #23]
 80179d4:	3301      	adds	r3, #1
 80179d6:	75fb      	strb	r3, [r7, #23]
 80179d8:	7dfa      	ldrb	r2, [r7, #23]
 80179da:	79fb      	ldrb	r3, [r7, #7]
 80179dc:	429a      	cmp	r2, r3
 80179de:	d3d3      	bcc.n	8017988 <IntToUnicode+0x18>
  }
}
 80179e0:	bf00      	nop
 80179e2:	bf00      	nop
 80179e4:	371c      	adds	r7, #28
 80179e6:	46bd      	mov	sp, r7
 80179e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ec:	4770      	bx	lr
	...

080179f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80179f0:	b580      	push	{r7, lr}
 80179f2:	b0b8      	sub	sp, #224	@ 0xe0
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80179f8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80179fc:	2200      	movs	r2, #0
 80179fe:	601a      	str	r2, [r3, #0]
 8017a00:	605a      	str	r2, [r3, #4]
 8017a02:	609a      	str	r2, [r3, #8]
 8017a04:	60da      	str	r2, [r3, #12]
 8017a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017a08:	f107 0310 	add.w	r3, r7, #16
 8017a0c:	22b8      	movs	r2, #184	@ 0xb8
 8017a0e:	2100      	movs	r1, #0
 8017a10:	4618      	mov	r0, r3
 8017a12:	f001 fdb7 	bl	8019584 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	4a29      	ldr	r2, [pc, #164]	@ (8017ac0 <HAL_PCD_MspInit+0xd0>)
 8017a1c:	4293      	cmp	r3, r2
 8017a1e:	d14b      	bne.n	8017ab8 <HAL_PCD_MspInit+0xc8>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017a20:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8017a24:	f04f 0300 	mov.w	r3, #0
 8017a28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8017a2c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8017a30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017a34:	f107 0310 	add.w	r3, r7, #16
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f7f5 fe93 	bl	800d764 <HAL_RCCEx_PeriphCLKConfig>
 8017a3e:	4603      	mov	r3, r0
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d001      	beq.n	8017a48 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8017a44:	f7e9 fc24 	bl	8001290 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8017a48:	f7f4 ff16 	bl	800c878 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8017ac4 <HAL_PCD_MspInit+0xd4>)
 8017a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017a52:	4a1c      	ldr	r2, [pc, #112]	@ (8017ac4 <HAL_PCD_MspInit+0xd4>)
 8017a54:	f043 0301 	orr.w	r3, r3, #1
 8017a58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8017a5c:	4b19      	ldr	r3, [pc, #100]	@ (8017ac4 <HAL_PCD_MspInit+0xd4>)
 8017a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017a62:	f003 0301 	and.w	r3, r3, #1
 8017a66:	60fb      	str	r3, [r7, #12]
 8017a68:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8017a6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017a6e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017a72:	2300      	movs	r3, #0
 8017a74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a78:	2300      	movs	r3, #0
 8017a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017a7e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8017a82:	4619      	mov	r1, r3
 8017a84:	4810      	ldr	r0, [pc, #64]	@ (8017ac8 <HAL_PCD_MspInit+0xd8>)
 8017a86:	f7f1 fa99 	bl	8008fbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8017a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8017ac4 <HAL_PCD_MspInit+0xd4>)
 8017a8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017a90:	4a0c      	ldr	r2, [pc, #48]	@ (8017ac4 <HAL_PCD_MspInit+0xd4>)
 8017a92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8017a96:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8017a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8017ac4 <HAL_PCD_MspInit+0xd4>)
 8017a9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017aa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017aa4:	60bb      	str	r3, [r7, #8]
 8017aa6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8017aa8:	2200      	movs	r2, #0
 8017aaa:	2100      	movs	r1, #0
 8017aac:	204d      	movs	r0, #77	@ 0x4d
 8017aae:	f7ee f8c2 	bl	8005c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8017ab2:	204d      	movs	r0, #77	@ 0x4d
 8017ab4:	f7ee f8d9 	bl	8005c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8017ab8:	bf00      	nop
 8017aba:	37e0      	adds	r7, #224	@ 0xe0
 8017abc:	46bd      	mov	sp, r7
 8017abe:	bd80      	pop	{r7, pc}
 8017ac0:	40040000 	.word	0x40040000
 8017ac4:	58024400 	.word	0x58024400
 8017ac8:	58020000 	.word	0x58020000

08017acc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017acc:	b580      	push	{r7, lr}
 8017ace:	b082      	sub	sp, #8
 8017ad0:	af00      	add	r7, sp, #0
 8017ad2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8017ae0:	4619      	mov	r1, r3
 8017ae2:	4610      	mov	r0, r2
 8017ae4:	f7fe fadb 	bl	801609e <USBD_LL_SetupStage>
}
 8017ae8:	bf00      	nop
 8017aea:	3708      	adds	r7, #8
 8017aec:	46bd      	mov	sp, r7
 8017aee:	bd80      	pop	{r7, pc}

08017af0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017af0:	b580      	push	{r7, lr}
 8017af2:	b082      	sub	sp, #8
 8017af4:	af00      	add	r7, sp, #0
 8017af6:	6078      	str	r0, [r7, #4]
 8017af8:	460b      	mov	r3, r1
 8017afa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017b02:	78fa      	ldrb	r2, [r7, #3]
 8017b04:	6879      	ldr	r1, [r7, #4]
 8017b06:	4613      	mov	r3, r2
 8017b08:	00db      	lsls	r3, r3, #3
 8017b0a:	4413      	add	r3, r2
 8017b0c:	009b      	lsls	r3, r3, #2
 8017b0e:	440b      	add	r3, r1
 8017b10:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8017b14:	681a      	ldr	r2, [r3, #0]
 8017b16:	78fb      	ldrb	r3, [r7, #3]
 8017b18:	4619      	mov	r1, r3
 8017b1a:	f7fe fb15 	bl	8016148 <USBD_LL_DataOutStage>
}
 8017b1e:	bf00      	nop
 8017b20:	3708      	adds	r7, #8
 8017b22:	46bd      	mov	sp, r7
 8017b24:	bd80      	pop	{r7, pc}

08017b26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b26:	b580      	push	{r7, lr}
 8017b28:	b082      	sub	sp, #8
 8017b2a:	af00      	add	r7, sp, #0
 8017b2c:	6078      	str	r0, [r7, #4]
 8017b2e:	460b      	mov	r3, r1
 8017b30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017b38:	78fa      	ldrb	r2, [r7, #3]
 8017b3a:	6879      	ldr	r1, [r7, #4]
 8017b3c:	4613      	mov	r3, r2
 8017b3e:	00db      	lsls	r3, r3, #3
 8017b40:	4413      	add	r3, r2
 8017b42:	009b      	lsls	r3, r3, #2
 8017b44:	440b      	add	r3, r1
 8017b46:	3320      	adds	r3, #32
 8017b48:	681a      	ldr	r2, [r3, #0]
 8017b4a:	78fb      	ldrb	r3, [r7, #3]
 8017b4c:	4619      	mov	r1, r3
 8017b4e:	f7fe fbae 	bl	80162ae <USBD_LL_DataInStage>
}
 8017b52:	bf00      	nop
 8017b54:	3708      	adds	r7, #8
 8017b56:	46bd      	mov	sp, r7
 8017b58:	bd80      	pop	{r7, pc}

08017b5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b5a:	b580      	push	{r7, lr}
 8017b5c:	b082      	sub	sp, #8
 8017b5e:	af00      	add	r7, sp, #0
 8017b60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017b68:	4618      	mov	r0, r3
 8017b6a:	f7fe fce8 	bl	801653e <USBD_LL_SOF>
}
 8017b6e:	bf00      	nop
 8017b70:	3708      	adds	r7, #8
 8017b72:	46bd      	mov	sp, r7
 8017b74:	bd80      	pop	{r7, pc}

08017b76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b76:	b580      	push	{r7, lr}
 8017b78:	b084      	sub	sp, #16
 8017b7a:	af00      	add	r7, sp, #0
 8017b7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017b7e:	2301      	movs	r3, #1
 8017b80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	79db      	ldrb	r3, [r3, #7]
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d102      	bne.n	8017b90 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	73fb      	strb	r3, [r7, #15]
 8017b8e:	e008      	b.n	8017ba2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	79db      	ldrb	r3, [r3, #7]
 8017b94:	2b02      	cmp	r3, #2
 8017b96:	d102      	bne.n	8017b9e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017b98:	2301      	movs	r3, #1
 8017b9a:	73fb      	strb	r3, [r7, #15]
 8017b9c:	e001      	b.n	8017ba2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017b9e:	f7e9 fb77 	bl	8001290 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017ba8:	7bfa      	ldrb	r2, [r7, #15]
 8017baa:	4611      	mov	r1, r2
 8017bac:	4618      	mov	r0, r3
 8017bae:	f7fe fc82 	bl	80164b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017bb8:	4618      	mov	r0, r3
 8017bba:	f7fe fc2a 	bl	8016412 <USBD_LL_Reset>
}
 8017bbe:	bf00      	nop
 8017bc0:	3710      	adds	r7, #16
 8017bc2:	46bd      	mov	sp, r7
 8017bc4:	bd80      	pop	{r7, pc}
	...

08017bc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017bc8:	b580      	push	{r7, lr}
 8017bca:	b082      	sub	sp, #8
 8017bcc:	af00      	add	r7, sp, #0
 8017bce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017bd6:	4618      	mov	r0, r3
 8017bd8:	f7fe fc7d 	bl	80164d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	687a      	ldr	r2, [r7, #4]
 8017be8:	6812      	ldr	r2, [r2, #0]
 8017bea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8017bee:	f043 0301 	orr.w	r3, r3, #1
 8017bf2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	7adb      	ldrb	r3, [r3, #11]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d005      	beq.n	8017c08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017bfc:	4b04      	ldr	r3, [pc, #16]	@ (8017c10 <HAL_PCD_SuspendCallback+0x48>)
 8017bfe:	691b      	ldr	r3, [r3, #16]
 8017c00:	4a03      	ldr	r2, [pc, #12]	@ (8017c10 <HAL_PCD_SuspendCallback+0x48>)
 8017c02:	f043 0306 	orr.w	r3, r3, #6
 8017c06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017c08:	bf00      	nop
 8017c0a:	3708      	adds	r7, #8
 8017c0c:	46bd      	mov	sp, r7
 8017c0e:	bd80      	pop	{r7, pc}
 8017c10:	e000ed00 	.word	0xe000ed00

08017c14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c14:	b580      	push	{r7, lr}
 8017c16:	b082      	sub	sp, #8
 8017c18:	af00      	add	r7, sp, #0
 8017c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017c22:	4618      	mov	r0, r3
 8017c24:	f7fe fc73 	bl	801650e <USBD_LL_Resume>
}
 8017c28:	bf00      	nop
 8017c2a:	3708      	adds	r7, #8
 8017c2c:	46bd      	mov	sp, r7
 8017c2e:	bd80      	pop	{r7, pc}

08017c30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c30:	b580      	push	{r7, lr}
 8017c32:	b082      	sub	sp, #8
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	6078      	str	r0, [r7, #4]
 8017c38:	460b      	mov	r3, r1
 8017c3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017c42:	78fa      	ldrb	r2, [r7, #3]
 8017c44:	4611      	mov	r1, r2
 8017c46:	4618      	mov	r0, r3
 8017c48:	f7fe fccb 	bl	80165e2 <USBD_LL_IsoOUTIncomplete>
}
 8017c4c:	bf00      	nop
 8017c4e:	3708      	adds	r7, #8
 8017c50:	46bd      	mov	sp, r7
 8017c52:	bd80      	pop	{r7, pc}

08017c54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c54:	b580      	push	{r7, lr}
 8017c56:	b082      	sub	sp, #8
 8017c58:	af00      	add	r7, sp, #0
 8017c5a:	6078      	str	r0, [r7, #4]
 8017c5c:	460b      	mov	r3, r1
 8017c5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017c66:	78fa      	ldrb	r2, [r7, #3]
 8017c68:	4611      	mov	r1, r2
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	f7fe fc87 	bl	801657e <USBD_LL_IsoINIncomplete>
}
 8017c70:	bf00      	nop
 8017c72:	3708      	adds	r7, #8
 8017c74:	46bd      	mov	sp, r7
 8017c76:	bd80      	pop	{r7, pc}

08017c78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c78:	b580      	push	{r7, lr}
 8017c7a:	b082      	sub	sp, #8
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017c86:	4618      	mov	r0, r3
 8017c88:	f7fe fcdd 	bl	8016646 <USBD_LL_DevConnected>
}
 8017c8c:	bf00      	nop
 8017c8e:	3708      	adds	r7, #8
 8017c90:	46bd      	mov	sp, r7
 8017c92:	bd80      	pop	{r7, pc}

08017c94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c94:	b580      	push	{r7, lr}
 8017c96:	b082      	sub	sp, #8
 8017c98:	af00      	add	r7, sp, #0
 8017c9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	f7fe fcda 	bl	801665c <USBD_LL_DevDisconnected>
}
 8017ca8:	bf00      	nop
 8017caa:	3708      	adds	r7, #8
 8017cac:	46bd      	mov	sp, r7
 8017cae:	bd80      	pop	{r7, pc}

08017cb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017cb0:	b580      	push	{r7, lr}
 8017cb2:	b082      	sub	sp, #8
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	781b      	ldrb	r3, [r3, #0]
 8017cbc:	2b01      	cmp	r3, #1
 8017cbe:	d140      	bne.n	8017d42 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8017cc0:	4a22      	ldr	r2, [pc, #136]	@ (8017d4c <USBD_LL_Init+0x9c>)
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	4a20      	ldr	r2, [pc, #128]	@ (8017d4c <USBD_LL_Init+0x9c>)
 8017ccc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8017cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8017d4c <USBD_LL_Init+0x9c>)
 8017cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8017d50 <USBD_LL_Init+0xa0>)
 8017cd4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8017cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8017d4c <USBD_LL_Init+0x9c>)
 8017cd8:	2209      	movs	r2, #9
 8017cda:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8017cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8017d4c <USBD_LL_Init+0x9c>)
 8017cde:	2202      	movs	r2, #2
 8017ce0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8017ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8017d4c <USBD_LL_Init+0x9c>)
 8017ce4:	2200      	movs	r2, #0
 8017ce6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8017ce8:	4b18      	ldr	r3, [pc, #96]	@ (8017d4c <USBD_LL_Init+0x9c>)
 8017cea:	2202      	movs	r2, #2
 8017cec:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8017cee:	4b17      	ldr	r3, [pc, #92]	@ (8017d4c <USBD_LL_Init+0x9c>)
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8017cf4:	4b15      	ldr	r3, [pc, #84]	@ (8017d4c <USBD_LL_Init+0x9c>)
 8017cf6:	2200      	movs	r2, #0
 8017cf8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8017cfa:	4b14      	ldr	r3, [pc, #80]	@ (8017d4c <USBD_LL_Init+0x9c>)
 8017cfc:	2200      	movs	r2, #0
 8017cfe:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8017d00:	4b12      	ldr	r3, [pc, #72]	@ (8017d4c <USBD_LL_Init+0x9c>)
 8017d02:	2201      	movs	r2, #1
 8017d04:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8017d06:	4b11      	ldr	r3, [pc, #68]	@ (8017d4c <USBD_LL_Init+0x9c>)
 8017d08:	2200      	movs	r2, #0
 8017d0a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8017d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8017d4c <USBD_LL_Init+0x9c>)
 8017d0e:	2200      	movs	r2, #0
 8017d10:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8017d12:	480e      	ldr	r0, [pc, #56]	@ (8017d4c <USBD_LL_Init+0x9c>)
 8017d14:	f7f3 fad6 	bl	800b2c4 <HAL_PCD_Init>
 8017d18:	4603      	mov	r3, r0
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d001      	beq.n	8017d22 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8017d1e:	f7e9 fab7 	bl	8001290 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8017d22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8017d26:	4809      	ldr	r0, [pc, #36]	@ (8017d4c <USBD_LL_Init+0x9c>)
 8017d28:	f7f4 fd2b 	bl	800c782 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8017d2c:	2280      	movs	r2, #128	@ 0x80
 8017d2e:	2100      	movs	r1, #0
 8017d30:	4806      	ldr	r0, [pc, #24]	@ (8017d4c <USBD_LL_Init+0x9c>)
 8017d32:	f7f4 fcdf 	bl	800c6f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8017d36:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8017d3a:	2101      	movs	r1, #1
 8017d3c:	4803      	ldr	r0, [pc, #12]	@ (8017d4c <USBD_LL_Init+0x9c>)
 8017d3e:	f7f4 fcd9 	bl	800c6f4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8017d42:	2300      	movs	r3, #0
}
 8017d44:	4618      	mov	r0, r3
 8017d46:	3708      	adds	r7, #8
 8017d48:	46bd      	mov	sp, r7
 8017d4a:	bd80      	pop	{r7, pc}
 8017d4c:	24004220 	.word	0x24004220
 8017d50:	40040000 	.word	0x40040000

08017d54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017d54:	b580      	push	{r7, lr}
 8017d56:	b084      	sub	sp, #16
 8017d58:	af00      	add	r7, sp, #0
 8017d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d60:	2300      	movs	r3, #0
 8017d62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	f7f3 fbb6 	bl	800b4dc <HAL_PCD_Start>
 8017d70:	4603      	mov	r3, r0
 8017d72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017d74:	7bfb      	ldrb	r3, [r7, #15]
 8017d76:	4618      	mov	r0, r3
 8017d78:	f000 f942 	bl	8018000 <USBD_Get_USB_Status>
 8017d7c:	4603      	mov	r3, r0
 8017d7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017d80:	7bbb      	ldrb	r3, [r7, #14]
}
 8017d82:	4618      	mov	r0, r3
 8017d84:	3710      	adds	r7, #16
 8017d86:	46bd      	mov	sp, r7
 8017d88:	bd80      	pop	{r7, pc}

08017d8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017d8a:	b580      	push	{r7, lr}
 8017d8c:	b084      	sub	sp, #16
 8017d8e:	af00      	add	r7, sp, #0
 8017d90:	6078      	str	r0, [r7, #4]
 8017d92:	4608      	mov	r0, r1
 8017d94:	4611      	mov	r1, r2
 8017d96:	461a      	mov	r2, r3
 8017d98:	4603      	mov	r3, r0
 8017d9a:	70fb      	strb	r3, [r7, #3]
 8017d9c:	460b      	mov	r3, r1
 8017d9e:	70bb      	strb	r3, [r7, #2]
 8017da0:	4613      	mov	r3, r2
 8017da2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017da4:	2300      	movs	r3, #0
 8017da6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017da8:	2300      	movs	r3, #0
 8017daa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017db2:	78bb      	ldrb	r3, [r7, #2]
 8017db4:	883a      	ldrh	r2, [r7, #0]
 8017db6:	78f9      	ldrb	r1, [r7, #3]
 8017db8:	f7f4 f8b7 	bl	800bf2a <HAL_PCD_EP_Open>
 8017dbc:	4603      	mov	r3, r0
 8017dbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017dc0:	7bfb      	ldrb	r3, [r7, #15]
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	f000 f91c 	bl	8018000 <USBD_Get_USB_Status>
 8017dc8:	4603      	mov	r3, r0
 8017dca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017dcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8017dce:	4618      	mov	r0, r3
 8017dd0:	3710      	adds	r7, #16
 8017dd2:	46bd      	mov	sp, r7
 8017dd4:	bd80      	pop	{r7, pc}

08017dd6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017dd6:	b580      	push	{r7, lr}
 8017dd8:	b084      	sub	sp, #16
 8017dda:	af00      	add	r7, sp, #0
 8017ddc:	6078      	str	r0, [r7, #4]
 8017dde:	460b      	mov	r3, r1
 8017de0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017de2:	2300      	movs	r3, #0
 8017de4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017de6:	2300      	movs	r3, #0
 8017de8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017df0:	78fa      	ldrb	r2, [r7, #3]
 8017df2:	4611      	mov	r1, r2
 8017df4:	4618      	mov	r0, r3
 8017df6:	f7f4 f902 	bl	800bffe <HAL_PCD_EP_Close>
 8017dfa:	4603      	mov	r3, r0
 8017dfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017dfe:	7bfb      	ldrb	r3, [r7, #15]
 8017e00:	4618      	mov	r0, r3
 8017e02:	f000 f8fd 	bl	8018000 <USBD_Get_USB_Status>
 8017e06:	4603      	mov	r3, r0
 8017e08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017e0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8017e0c:	4618      	mov	r0, r3
 8017e0e:	3710      	adds	r7, #16
 8017e10:	46bd      	mov	sp, r7
 8017e12:	bd80      	pop	{r7, pc}

08017e14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017e14:	b580      	push	{r7, lr}
 8017e16:	b084      	sub	sp, #16
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	6078      	str	r0, [r7, #4]
 8017e1c:	460b      	mov	r3, r1
 8017e1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e20:	2300      	movs	r3, #0
 8017e22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e24:	2300      	movs	r3, #0
 8017e26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017e2e:	78fa      	ldrb	r2, [r7, #3]
 8017e30:	4611      	mov	r1, r2
 8017e32:	4618      	mov	r0, r3
 8017e34:	f7f4 f9ba 	bl	800c1ac <HAL_PCD_EP_SetStall>
 8017e38:	4603      	mov	r3, r0
 8017e3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017e3c:	7bfb      	ldrb	r3, [r7, #15]
 8017e3e:	4618      	mov	r0, r3
 8017e40:	f000 f8de 	bl	8018000 <USBD_Get_USB_Status>
 8017e44:	4603      	mov	r3, r0
 8017e46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017e48:	7bbb      	ldrb	r3, [r7, #14]
}
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	3710      	adds	r7, #16
 8017e4e:	46bd      	mov	sp, r7
 8017e50:	bd80      	pop	{r7, pc}

08017e52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017e52:	b580      	push	{r7, lr}
 8017e54:	b084      	sub	sp, #16
 8017e56:	af00      	add	r7, sp, #0
 8017e58:	6078      	str	r0, [r7, #4]
 8017e5a:	460b      	mov	r3, r1
 8017e5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e5e:	2300      	movs	r3, #0
 8017e60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e62:	2300      	movs	r3, #0
 8017e64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017e6c:	78fa      	ldrb	r2, [r7, #3]
 8017e6e:	4611      	mov	r1, r2
 8017e70:	4618      	mov	r0, r3
 8017e72:	f7f4 f9fe 	bl	800c272 <HAL_PCD_EP_ClrStall>
 8017e76:	4603      	mov	r3, r0
 8017e78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017e7a:	7bfb      	ldrb	r3, [r7, #15]
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	f000 f8bf 	bl	8018000 <USBD_Get_USB_Status>
 8017e82:	4603      	mov	r3, r0
 8017e84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017e86:	7bbb      	ldrb	r3, [r7, #14]
}
 8017e88:	4618      	mov	r0, r3
 8017e8a:	3710      	adds	r7, #16
 8017e8c:	46bd      	mov	sp, r7
 8017e8e:	bd80      	pop	{r7, pc}

08017e90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017e90:	b480      	push	{r7}
 8017e92:	b085      	sub	sp, #20
 8017e94:	af00      	add	r7, sp, #0
 8017e96:	6078      	str	r0, [r7, #4]
 8017e98:	460b      	mov	r3, r1
 8017e9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017ea2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017ea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	da0b      	bge.n	8017ec4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017eac:	78fb      	ldrb	r3, [r7, #3]
 8017eae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017eb2:	68f9      	ldr	r1, [r7, #12]
 8017eb4:	4613      	mov	r3, r2
 8017eb6:	00db      	lsls	r3, r3, #3
 8017eb8:	4413      	add	r3, r2
 8017eba:	009b      	lsls	r3, r3, #2
 8017ebc:	440b      	add	r3, r1
 8017ebe:	3316      	adds	r3, #22
 8017ec0:	781b      	ldrb	r3, [r3, #0]
 8017ec2:	e00b      	b.n	8017edc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017ec4:	78fb      	ldrb	r3, [r7, #3]
 8017ec6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017eca:	68f9      	ldr	r1, [r7, #12]
 8017ecc:	4613      	mov	r3, r2
 8017ece:	00db      	lsls	r3, r3, #3
 8017ed0:	4413      	add	r3, r2
 8017ed2:	009b      	lsls	r3, r3, #2
 8017ed4:	440b      	add	r3, r1
 8017ed6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8017eda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017edc:	4618      	mov	r0, r3
 8017ede:	3714      	adds	r7, #20
 8017ee0:	46bd      	mov	sp, r7
 8017ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ee6:	4770      	bx	lr

08017ee8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017ee8:	b580      	push	{r7, lr}
 8017eea:	b084      	sub	sp, #16
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	6078      	str	r0, [r7, #4]
 8017ef0:	460b      	mov	r3, r1
 8017ef2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ef4:	2300      	movs	r3, #0
 8017ef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ef8:	2300      	movs	r3, #0
 8017efa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017f02:	78fa      	ldrb	r2, [r7, #3]
 8017f04:	4611      	mov	r1, r2
 8017f06:	4618      	mov	r0, r3
 8017f08:	f7f3 ffeb 	bl	800bee2 <HAL_PCD_SetAddress>
 8017f0c:	4603      	mov	r3, r0
 8017f0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f10:	7bfb      	ldrb	r3, [r7, #15]
 8017f12:	4618      	mov	r0, r3
 8017f14:	f000 f874 	bl	8018000 <USBD_Get_USB_Status>
 8017f18:	4603      	mov	r3, r0
 8017f1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f1e:	4618      	mov	r0, r3
 8017f20:	3710      	adds	r7, #16
 8017f22:	46bd      	mov	sp, r7
 8017f24:	bd80      	pop	{r7, pc}

08017f26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017f26:	b580      	push	{r7, lr}
 8017f28:	b086      	sub	sp, #24
 8017f2a:	af00      	add	r7, sp, #0
 8017f2c:	60f8      	str	r0, [r7, #12]
 8017f2e:	607a      	str	r2, [r7, #4]
 8017f30:	603b      	str	r3, [r7, #0]
 8017f32:	460b      	mov	r3, r1
 8017f34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f36:	2300      	movs	r3, #0
 8017f38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017f44:	7af9      	ldrb	r1, [r7, #11]
 8017f46:	683b      	ldr	r3, [r7, #0]
 8017f48:	687a      	ldr	r2, [r7, #4]
 8017f4a:	f7f4 f8f5 	bl	800c138 <HAL_PCD_EP_Transmit>
 8017f4e:	4603      	mov	r3, r0
 8017f50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f52:	7dfb      	ldrb	r3, [r7, #23]
 8017f54:	4618      	mov	r0, r3
 8017f56:	f000 f853 	bl	8018000 <USBD_Get_USB_Status>
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017f5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8017f60:	4618      	mov	r0, r3
 8017f62:	3718      	adds	r7, #24
 8017f64:	46bd      	mov	sp, r7
 8017f66:	bd80      	pop	{r7, pc}

08017f68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017f68:	b580      	push	{r7, lr}
 8017f6a:	b086      	sub	sp, #24
 8017f6c:	af00      	add	r7, sp, #0
 8017f6e:	60f8      	str	r0, [r7, #12]
 8017f70:	607a      	str	r2, [r7, #4]
 8017f72:	603b      	str	r3, [r7, #0]
 8017f74:	460b      	mov	r3, r1
 8017f76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f78:	2300      	movs	r3, #0
 8017f7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017f86:	7af9      	ldrb	r1, [r7, #11]
 8017f88:	683b      	ldr	r3, [r7, #0]
 8017f8a:	687a      	ldr	r2, [r7, #4]
 8017f8c:	f7f4 f881 	bl	800c092 <HAL_PCD_EP_Receive>
 8017f90:	4603      	mov	r3, r0
 8017f92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f94:	7dfb      	ldrb	r3, [r7, #23]
 8017f96:	4618      	mov	r0, r3
 8017f98:	f000 f832 	bl	8018000 <USBD_Get_USB_Status>
 8017f9c:	4603      	mov	r3, r0
 8017f9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017fa0:	7dbb      	ldrb	r3, [r7, #22]
}
 8017fa2:	4618      	mov	r0, r3
 8017fa4:	3718      	adds	r7, #24
 8017fa6:	46bd      	mov	sp, r7
 8017fa8:	bd80      	pop	{r7, pc}

08017faa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017faa:	b580      	push	{r7, lr}
 8017fac:	b082      	sub	sp, #8
 8017fae:	af00      	add	r7, sp, #0
 8017fb0:	6078      	str	r0, [r7, #4]
 8017fb2:	460b      	mov	r3, r1
 8017fb4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017fbc:	78fa      	ldrb	r2, [r7, #3]
 8017fbe:	4611      	mov	r1, r2
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	f7f4 f8a1 	bl	800c108 <HAL_PCD_EP_GetRxCount>
 8017fc6:	4603      	mov	r3, r0
}
 8017fc8:	4618      	mov	r0, r3
 8017fca:	3708      	adds	r7, #8
 8017fcc:	46bd      	mov	sp, r7
 8017fce:	bd80      	pop	{r7, pc}

08017fd0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017fd0:	b480      	push	{r7}
 8017fd2:	b083      	sub	sp, #12
 8017fd4:	af00      	add	r7, sp, #0
 8017fd6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017fd8:	4b03      	ldr	r3, [pc, #12]	@ (8017fe8 <USBD_static_malloc+0x18>)
}
 8017fda:	4618      	mov	r0, r3
 8017fdc:	370c      	adds	r7, #12
 8017fde:	46bd      	mov	sp, r7
 8017fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe4:	4770      	bx	lr
 8017fe6:	bf00      	nop
 8017fe8:	24004704 	.word	0x24004704

08017fec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017fec:	b480      	push	{r7}
 8017fee:	b083      	sub	sp, #12
 8017ff0:	af00      	add	r7, sp, #0
 8017ff2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8017ff4:	bf00      	nop
 8017ff6:	370c      	adds	r7, #12
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ffe:	4770      	bx	lr

08018000 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018000:	b480      	push	{r7}
 8018002:	b085      	sub	sp, #20
 8018004:	af00      	add	r7, sp, #0
 8018006:	4603      	mov	r3, r0
 8018008:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801800a:	2300      	movs	r3, #0
 801800c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801800e:	79fb      	ldrb	r3, [r7, #7]
 8018010:	2b03      	cmp	r3, #3
 8018012:	d817      	bhi.n	8018044 <USBD_Get_USB_Status+0x44>
 8018014:	a201      	add	r2, pc, #4	@ (adr r2, 801801c <USBD_Get_USB_Status+0x1c>)
 8018016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801801a:	bf00      	nop
 801801c:	0801802d 	.word	0x0801802d
 8018020:	08018033 	.word	0x08018033
 8018024:	08018039 	.word	0x08018039
 8018028:	0801803f 	.word	0x0801803f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801802c:	2300      	movs	r3, #0
 801802e:	73fb      	strb	r3, [r7, #15]
    break;
 8018030:	e00b      	b.n	801804a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018032:	2303      	movs	r3, #3
 8018034:	73fb      	strb	r3, [r7, #15]
    break;
 8018036:	e008      	b.n	801804a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018038:	2301      	movs	r3, #1
 801803a:	73fb      	strb	r3, [r7, #15]
    break;
 801803c:	e005      	b.n	801804a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801803e:	2303      	movs	r3, #3
 8018040:	73fb      	strb	r3, [r7, #15]
    break;
 8018042:	e002      	b.n	801804a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018044:	2303      	movs	r3, #3
 8018046:	73fb      	strb	r3, [r7, #15]
    break;
 8018048:	bf00      	nop
  }
  return usb_status;
 801804a:	7bfb      	ldrb	r3, [r7, #15]
}
 801804c:	4618      	mov	r0, r3
 801804e:	3714      	adds	r7, #20
 8018050:	46bd      	mov	sp, r7
 8018052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018056:	4770      	bx	lr

08018058 <arm_rfft_fast_init_f32>:
 8018058:	084b      	lsrs	r3, r1, #1
 801805a:	2b80      	cmp	r3, #128	@ 0x80
 801805c:	b430      	push	{r4, r5}
 801805e:	8201      	strh	r1, [r0, #16]
 8018060:	8003      	strh	r3, [r0, #0]
 8018062:	d06f      	beq.n	8018144 <arm_rfft_fast_init_f32+0xec>
 8018064:	d916      	bls.n	8018094 <arm_rfft_fast_init_f32+0x3c>
 8018066:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801806a:	d05e      	beq.n	801812a <arm_rfft_fast_init_f32+0xd2>
 801806c:	d935      	bls.n	80180da <arm_rfft_fast_init_f32+0x82>
 801806e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018072:	d025      	beq.n	80180c0 <arm_rfft_fast_init_f32+0x68>
 8018074:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8018078:	d112      	bne.n	80180a0 <arm_rfft_fast_init_f32+0x48>
 801807a:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 801807e:	4c37      	ldr	r4, [pc, #220]	@ (801815c <arm_rfft_fast_init_f32+0x104>)
 8018080:	4937      	ldr	r1, [pc, #220]	@ (8018160 <arm_rfft_fast_init_f32+0x108>)
 8018082:	2300      	movs	r3, #0
 8018084:	4a37      	ldr	r2, [pc, #220]	@ (8018164 <arm_rfft_fast_init_f32+0x10c>)
 8018086:	8185      	strh	r5, [r0, #12]
 8018088:	6084      	str	r4, [r0, #8]
 801808a:	6041      	str	r1, [r0, #4]
 801808c:	6142      	str	r2, [r0, #20]
 801808e:	b258      	sxtb	r0, r3
 8018090:	bc30      	pop	{r4, r5}
 8018092:	4770      	bx	lr
 8018094:	2b20      	cmp	r3, #32
 8018096:	d030      	beq.n	80180fa <arm_rfft_fast_init_f32+0xa2>
 8018098:	2b40      	cmp	r3, #64	@ 0x40
 801809a:	d005      	beq.n	80180a8 <arm_rfft_fast_init_f32+0x50>
 801809c:	2b10      	cmp	r3, #16
 801809e:	d038      	beq.n	8018112 <arm_rfft_fast_init_f32+0xba>
 80180a0:	23ff      	movs	r3, #255	@ 0xff
 80180a2:	bc30      	pop	{r4, r5}
 80180a4:	b258      	sxtb	r0, r3
 80180a6:	4770      	bx	lr
 80180a8:	2538      	movs	r5, #56	@ 0x38
 80180aa:	4c2f      	ldr	r4, [pc, #188]	@ (8018168 <arm_rfft_fast_init_f32+0x110>)
 80180ac:	492f      	ldr	r1, [pc, #188]	@ (801816c <arm_rfft_fast_init_f32+0x114>)
 80180ae:	2300      	movs	r3, #0
 80180b0:	4a2f      	ldr	r2, [pc, #188]	@ (8018170 <arm_rfft_fast_init_f32+0x118>)
 80180b2:	8185      	strh	r5, [r0, #12]
 80180b4:	6084      	str	r4, [r0, #8]
 80180b6:	6041      	str	r1, [r0, #4]
 80180b8:	6142      	str	r2, [r0, #20]
 80180ba:	b258      	sxtb	r0, r3
 80180bc:	bc30      	pop	{r4, r5}
 80180be:	4770      	bx	lr
 80180c0:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 80180c4:	4c2b      	ldr	r4, [pc, #172]	@ (8018174 <arm_rfft_fast_init_f32+0x11c>)
 80180c6:	492c      	ldr	r1, [pc, #176]	@ (8018178 <arm_rfft_fast_init_f32+0x120>)
 80180c8:	2300      	movs	r3, #0
 80180ca:	4a2c      	ldr	r2, [pc, #176]	@ (801817c <arm_rfft_fast_init_f32+0x124>)
 80180cc:	8185      	strh	r5, [r0, #12]
 80180ce:	6084      	str	r4, [r0, #8]
 80180d0:	6041      	str	r1, [r0, #4]
 80180d2:	6142      	str	r2, [r0, #20]
 80180d4:	b258      	sxtb	r0, r3
 80180d6:	bc30      	pop	{r4, r5}
 80180d8:	4770      	bx	lr
 80180da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80180de:	d1df      	bne.n	80180a0 <arm_rfft_fast_init_f32+0x48>
 80180e0:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 80180e4:	4c26      	ldr	r4, [pc, #152]	@ (8018180 <arm_rfft_fast_init_f32+0x128>)
 80180e6:	4927      	ldr	r1, [pc, #156]	@ (8018184 <arm_rfft_fast_init_f32+0x12c>)
 80180e8:	2300      	movs	r3, #0
 80180ea:	4a27      	ldr	r2, [pc, #156]	@ (8018188 <arm_rfft_fast_init_f32+0x130>)
 80180ec:	8185      	strh	r5, [r0, #12]
 80180ee:	6084      	str	r4, [r0, #8]
 80180f0:	6041      	str	r1, [r0, #4]
 80180f2:	6142      	str	r2, [r0, #20]
 80180f4:	b258      	sxtb	r0, r3
 80180f6:	bc30      	pop	{r4, r5}
 80180f8:	4770      	bx	lr
 80180fa:	2530      	movs	r5, #48	@ 0x30
 80180fc:	4c23      	ldr	r4, [pc, #140]	@ (801818c <arm_rfft_fast_init_f32+0x134>)
 80180fe:	4924      	ldr	r1, [pc, #144]	@ (8018190 <arm_rfft_fast_init_f32+0x138>)
 8018100:	2300      	movs	r3, #0
 8018102:	4a24      	ldr	r2, [pc, #144]	@ (8018194 <arm_rfft_fast_init_f32+0x13c>)
 8018104:	8185      	strh	r5, [r0, #12]
 8018106:	6084      	str	r4, [r0, #8]
 8018108:	6041      	str	r1, [r0, #4]
 801810a:	6142      	str	r2, [r0, #20]
 801810c:	b258      	sxtb	r0, r3
 801810e:	bc30      	pop	{r4, r5}
 8018110:	4770      	bx	lr
 8018112:	2514      	movs	r5, #20
 8018114:	4c20      	ldr	r4, [pc, #128]	@ (8018198 <arm_rfft_fast_init_f32+0x140>)
 8018116:	4921      	ldr	r1, [pc, #132]	@ (801819c <arm_rfft_fast_init_f32+0x144>)
 8018118:	2300      	movs	r3, #0
 801811a:	4a21      	ldr	r2, [pc, #132]	@ (80181a0 <arm_rfft_fast_init_f32+0x148>)
 801811c:	8185      	strh	r5, [r0, #12]
 801811e:	6084      	str	r4, [r0, #8]
 8018120:	6041      	str	r1, [r0, #4]
 8018122:	6142      	str	r2, [r0, #20]
 8018124:	b258      	sxtb	r0, r3
 8018126:	bc30      	pop	{r4, r5}
 8018128:	4770      	bx	lr
 801812a:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 801812e:	4c1d      	ldr	r4, [pc, #116]	@ (80181a4 <arm_rfft_fast_init_f32+0x14c>)
 8018130:	491d      	ldr	r1, [pc, #116]	@ (80181a8 <arm_rfft_fast_init_f32+0x150>)
 8018132:	2300      	movs	r3, #0
 8018134:	4a1d      	ldr	r2, [pc, #116]	@ (80181ac <arm_rfft_fast_init_f32+0x154>)
 8018136:	8185      	strh	r5, [r0, #12]
 8018138:	6084      	str	r4, [r0, #8]
 801813a:	6041      	str	r1, [r0, #4]
 801813c:	6142      	str	r2, [r0, #20]
 801813e:	b258      	sxtb	r0, r3
 8018140:	bc30      	pop	{r4, r5}
 8018142:	4770      	bx	lr
 8018144:	25d0      	movs	r5, #208	@ 0xd0
 8018146:	4c1a      	ldr	r4, [pc, #104]	@ (80181b0 <arm_rfft_fast_init_f32+0x158>)
 8018148:	491a      	ldr	r1, [pc, #104]	@ (80181b4 <arm_rfft_fast_init_f32+0x15c>)
 801814a:	2300      	movs	r3, #0
 801814c:	4a1a      	ldr	r2, [pc, #104]	@ (80181b8 <arm_rfft_fast_init_f32+0x160>)
 801814e:	8185      	strh	r5, [r0, #12]
 8018150:	6084      	str	r4, [r0, #8]
 8018152:	6041      	str	r1, [r0, #4]
 8018154:	6142      	str	r2, [r0, #20]
 8018156:	b258      	sxtb	r0, r3
 8018158:	bc30      	pop	{r4, r5}
 801815a:	4770      	bx	lr
 801815c:	08029b00 	.word	0x08029b00
 8018160:	0801a4f4 	.word	0x0801a4f4
 8018164:	08020664 	.word	0x08020664
 8018168:	0801e5f4 	.word	0x0801e5f4
 801816c:	0802b8c0 	.word	0x0802b8c0
 8018170:	0802ddb0 	.word	0x0802ddb0
 8018174:	08026fe4 	.word	0x08026fe4
 8018178:	08024ee4 	.word	0x08024ee4
 801817c:	0801e664 	.word	0x0801e664
 8018180:	0802da40 	.word	0x0802da40
 8018184:	08024664 	.word	0x08024664
 8018188:	0802bac0 	.word	0x0802bac0
 801818c:	08027e9c 	.word	0x08027e9c
 8018190:	08026ee4 	.word	0x08026ee4
 8018194:	0801e4f4 	.word	0x0801e4f4
 8018198:	08027df4 	.word	0x08027df4
 801819c:	08024e64 	.word	0x08024e64
 80181a0:	08027e1c 	.word	0x08027e1c
 80181a4:	0802c2c0 	.word	0x0802c2c0
 80181a8:	08028b00 	.word	0x08028b00
 80181ac:	0802c640 	.word	0x0802c640
 80181b0:	0802dfb0 	.word	0x0802dfb0
 80181b4:	08028700 	.word	0x08028700
 80181b8:	0802d640 	.word	0x0802d640

080181bc <arm_rfft_fast_f32>:
 80181bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181c0:	8a05      	ldrh	r5, [r0, #16]
 80181c2:	4606      	mov	r6, r0
 80181c4:	4690      	mov	r8, r2
 80181c6:	460c      	mov	r4, r1
 80181c8:	086d      	lsrs	r5, r5, #1
 80181ca:	8005      	strh	r5, [r0, #0]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d15e      	bne.n	801828e <arm_rfft_fast_f32+0xd2>
 80181d0:	461a      	mov	r2, r3
 80181d2:	2301      	movs	r3, #1
 80181d4:	f000 fbe0 	bl	8018998 <arm_cfft_f32>
 80181d8:	edd4 7a00 	vldr	s15, [r4]
 80181dc:	ed94 7a01 	vldr	s14, [r4, #4]
 80181e0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80181e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80181e8:	8837      	ldrh	r7, [r6, #0]
 80181ea:	ee37 7a07 	vadd.f32	s14, s14, s14
 80181ee:	6975      	ldr	r5, [r6, #20]
 80181f0:	3f01      	subs	r7, #1
 80181f2:	eef0 3a46 	vmov.f32	s7, s12
 80181f6:	3510      	adds	r5, #16
 80181f8:	f108 0610 	add.w	r6, r8, #16
 80181fc:	ee77 6a87 	vadd.f32	s13, s15, s14
 8018200:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 8018204:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018208:	f104 0310 	add.w	r3, r4, #16
 801820c:	3808      	subs	r0, #8
 801820e:	ee26 7a86 	vmul.f32	s14, s13, s12
 8018212:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018216:	ed88 7a00 	vstr	s14, [r8]
 801821a:	edc8 7a01 	vstr	s15, [r8, #4]
 801821e:	edd0 6a02 	vldr	s13, [r0, #8]
 8018222:	3f01      	subs	r7, #1
 8018224:	ed13 5a02 	vldr	s10, [r3, #-8]
 8018228:	f1a0 0008 	sub.w	r0, r0, #8
 801822c:	ed13 7a01 	vldr	s14, [r3, #-4]
 8018230:	f105 0508 	add.w	r5, r5, #8
 8018234:	ee76 7ac5 	vsub.f32	s15, s13, s10
 8018238:	ed15 6a04 	vldr	s12, [r5, #-16]
 801823c:	edd0 5a05 	vldr	s11, [r0, #20]
 8018240:	ee36 5a85 	vadd.f32	s10, s13, s10
 8018244:	ed55 6a03 	vldr	s13, [r5, #-12]
 8018248:	f103 0308 	add.w	r3, r3, #8
 801824c:	ee35 4a87 	vadd.f32	s8, s11, s14
 8018250:	f106 0608 	add.w	r6, r6, #8
 8018254:	ee66 4a27 	vmul.f32	s9, s12, s15
 8018258:	ee77 5a65 	vsub.f32	s11, s14, s11
 801825c:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8018260:	ee34 5a85 	vadd.f32	s10, s9, s10
 8018264:	ee26 6a04 	vmul.f32	s12, s12, s8
 8018268:	ee66 6a84 	vmul.f32	s13, s13, s8
 801826c:	ee77 7a25 	vadd.f32	s15, s14, s11
 8018270:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018274:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018278:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801827c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8018280:	ed46 6a04 	vstr	s13, [r6, #-16]
 8018284:	ed46 7a03 	vstr	s15, [r6, #-12]
 8018288:	d1c9      	bne.n	801821e <arm_rfft_fast_f32+0x62>
 801828a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801828e:	edd1 7a00 	vldr	s15, [r1]
 8018292:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8018296:	edd1 6a01 	vldr	s13, [r1, #4]
 801829a:	1e68      	subs	r0, r5, #1
 801829c:	6975      	ldr	r5, [r6, #20]
 801829e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80182a2:	00c1      	lsls	r1, r0, #3
 80182a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80182a8:	ee27 7a23 	vmul.f32	s14, s14, s7
 80182ac:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80182b0:	ed82 7a00 	vstr	s14, [r2]
 80182b4:	edc2 7a01 	vstr	s15, [r2, #4]
 80182b8:	b3e0      	cbz	r0, 8018334 <arm_rfft_fast_f32+0x178>
 80182ba:	3908      	subs	r1, #8
 80182bc:	f104 0210 	add.w	r2, r4, #16
 80182c0:	3510      	adds	r5, #16
 80182c2:	440c      	add	r4, r1
 80182c4:	f108 0110 	add.w	r1, r8, #16
 80182c8:	ed94 7a02 	vldr	s14, [r4, #8]
 80182cc:	3801      	subs	r0, #1
 80182ce:	ed52 6a02 	vldr	s13, [r2, #-8]
 80182d2:	f1a4 0408 	sub.w	r4, r4, #8
 80182d6:	ed15 6a02 	vldr	s12, [r5, #-8]
 80182da:	f102 0208 	add.w	r2, r2, #8
 80182de:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80182e2:	ed94 4a05 	vldr	s8, [r4, #20]
 80182e6:	ed12 5a03 	vldr	s10, [r2, #-12]
 80182ea:	ee77 6a26 	vadd.f32	s13, s14, s13
 80182ee:	ed55 5a01 	vldr	s11, [r5, #-4]
 80182f2:	f101 0108 	add.w	r1, r1, #8
 80182f6:	ee26 3a27 	vmul.f32	s6, s12, s15
 80182fa:	f105 0508 	add.w	r5, r5, #8
 80182fe:	ee74 4a05 	vadd.f32	s9, s8, s10
 8018302:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8018306:	ee35 5a44 	vsub.f32	s10, s10, s8
 801830a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 801830e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8018312:	ee77 7a05 	vadd.f32	s15, s14, s10
 8018316:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801831a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801831e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8018322:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8018326:	ee27 7a23 	vmul.f32	s14, s14, s7
 801832a:	ed41 7a03 	vstr	s15, [r1, #-12]
 801832e:	ed01 7a04 	vstr	s14, [r1, #-16]
 8018332:	d1c9      	bne.n	80182c8 <arm_rfft_fast_f32+0x10c>
 8018334:	4630      	mov	r0, r6
 8018336:	4641      	mov	r1, r8
 8018338:	461a      	mov	r2, r3
 801833a:	2301      	movs	r3, #1
 801833c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018340:	f000 bb2a 	b.w	8018998 <arm_cfft_f32>

08018344 <arm_cfft_radix8by2_f32>:
 8018344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018348:	ed2d 8b06 	vpush	{d8-d10}
 801834c:	f8b0 e000 	ldrh.w	lr, [r0]
 8018350:	4607      	mov	r7, r0
 8018352:	6842      	ldr	r2, [r0, #4]
 8018354:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8018358:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 801835c:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8018360:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8018364:	f000 80af 	beq.w	80184c6 <arm_cfft_radix8by2_f32+0x182>
 8018368:	3310      	adds	r3, #16
 801836a:	3210      	adds	r2, #16
 801836c:	f101 0610 	add.w	r6, r1, #16
 8018370:	f108 0510 	add.w	r5, r8, #16
 8018374:	18cc      	adds	r4, r1, r3
 8018376:	4443      	add	r3, r8
 8018378:	ed55 6a04 	vldr	s13, [r5, #-16]
 801837c:	f1be 0e01 	subs.w	lr, lr, #1
 8018380:	ed56 4a04 	vldr	s9, [r6, #-16]
 8018384:	f104 0410 	add.w	r4, r4, #16
 8018388:	ed55 7a02 	vldr	s15, [r5, #-8]
 801838c:	f106 0610 	add.w	r6, r6, #16
 8018390:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8018394:	ed53 0a04 	vldr	s1, [r3, #-16]
 8018398:	ed13 5a03 	vldr	s10, [r3, #-12]
 801839c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80183a0:	ed13 3a02 	vldr	s6, [r3, #-8]
 80183a4:	f102 0210 	add.w	r2, r2, #16
 80183a8:	ed15 7a03 	vldr	s14, [r5, #-12]
 80183ac:	f103 0310 	add.w	r3, r3, #16
 80183b0:	ed55 2a01 	vldr	s5, [r5, #-4]
 80183b4:	f105 0510 	add.w	r5, r5, #16
 80183b8:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 80183bc:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 80183c0:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 80183c4:	ee33 8a83 	vadd.f32	s16, s7, s6
 80183c8:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 80183cc:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 80183d0:	ee34 0a06 	vadd.f32	s0, s8, s12
 80183d4:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 80183d8:	ee76 aa87 	vadd.f32	s21, s13, s14
 80183dc:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 80183e0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80183e4:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 80183e8:	ee35 9aa0 	vadd.f32	s18, s11, s1
 80183ec:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 80183f0:	ee71 8a05 	vadd.f32	s17, s2, s10
 80183f4:	ee31 aaa7 	vadd.f32	s20, s3, s15
 80183f8:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 80183fc:	ee72 9a22 	vadd.f32	s19, s4, s5
 8018400:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8018404:	ee35 5a41 	vsub.f32	s10, s10, s2
 8018408:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 801840c:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 8018410:	ee36 6a44 	vsub.f32	s12, s12, s8
 8018414:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 8018418:	ee71 1ae7 	vsub.f32	s3, s3, s15
 801841c:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 8018420:	ee72 7a62 	vsub.f32	s15, s4, s5
 8018424:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 8018428:	ee73 2a63 	vsub.f32	s5, s6, s7
 801842c:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 8018430:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 8018434:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 8018438:	ee24 3a84 	vmul.f32	s6, s9, s8
 801843c:	ee27 2a26 	vmul.f32	s4, s14, s13
 8018440:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8018444:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8018448:	ee27 7a04 	vmul.f32	s14, s14, s8
 801844c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8018450:	ee65 6a26 	vmul.f32	s13, s10, s13
 8018454:	ee25 5a04 	vmul.f32	s10, s10, s8
 8018458:	ee37 7a64 	vsub.f32	s14, s14, s9
 801845c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018460:	ee33 4a02 	vadd.f32	s8, s6, s4
 8018464:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8018468:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 801846c:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 8018470:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 8018474:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 8018478:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 801847c:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8018480:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8018484:	ee27 4a87 	vmul.f32	s8, s15, s14
 8018488:	ee61 5a87 	vmul.f32	s11, s3, s14
 801848c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018490:	ee22 5a87 	vmul.f32	s10, s5, s14
 8018494:	ee26 7a07 	vmul.f32	s14, s12, s14
 8018498:	ee26 6a26 	vmul.f32	s12, s12, s13
 801849c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80184a0:	ee74 4a84 	vadd.f32	s9, s9, s8
 80184a4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80184a8:	ee35 6a46 	vsub.f32	s12, s10, s12
 80184ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 80184b0:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 80184b4:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 80184b8:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 80184bc:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 80184c0:	f47f af5a 	bne.w	8018378 <arm_cfft_radix8by2_f32+0x34>
 80184c4:	687a      	ldr	r2, [r7, #4]
 80184c6:	fa1f f48c 	uxth.w	r4, ip
 80184ca:	4608      	mov	r0, r1
 80184cc:	2302      	movs	r3, #2
 80184ce:	4621      	mov	r1, r4
 80184d0:	f000 fb1e 	bl	8018b10 <arm_radix8_butterfly_f32>
 80184d4:	4640      	mov	r0, r8
 80184d6:	4621      	mov	r1, r4
 80184d8:	687a      	ldr	r2, [r7, #4]
 80184da:	2302      	movs	r3, #2
 80184dc:	ecbd 8b06 	vpop	{d8-d10}
 80184e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80184e4:	f000 bb14 	b.w	8018b10 <arm_radix8_butterfly_f32>

080184e8 <arm_cfft_radix8by4_f32>:
 80184e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184ec:	ed2d 8b06 	vpush	{d8-d10}
 80184f0:	8804      	ldrh	r4, [r0, #0]
 80184f2:	b08f      	sub	sp, #60	@ 0x3c
 80184f4:	ed91 6a00 	vldr	s12, [r1]
 80184f8:	460a      	mov	r2, r1
 80184fa:	0864      	lsrs	r4, r4, #1
 80184fc:	ed91 7a01 	vldr	s14, [r1, #4]
 8018500:	9101      	str	r1, [sp, #4]
 8018502:	00a3      	lsls	r3, r4, #2
 8018504:	9104      	str	r1, [sp, #16]
 8018506:	0864      	lsrs	r4, r4, #1
 8018508:	6841      	ldr	r1, [r0, #4]
 801850a:	900c      	str	r0, [sp, #48]	@ 0x30
 801850c:	4625      	mov	r5, r4
 801850e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018510:	f101 0408 	add.w	r4, r1, #8
 8018514:	f101 0610 	add.w	r6, r1, #16
 8018518:	9406      	str	r4, [sp, #24]
 801851a:	18d4      	adds	r4, r2, r3
 801851c:	1eaa      	subs	r2, r5, #2
 801851e:	f101 0518 	add.w	r5, r1, #24
 8018522:	18e0      	adds	r0, r4, r3
 8018524:	ed94 4a00 	vldr	s8, [r4]
 8018528:	edd4 3a01 	vldr	s7, [r4, #4]
 801852c:	46a6      	mov	lr, r4
 801852e:	edd0 6a00 	vldr	s13, [r0]
 8018532:	18c7      	adds	r7, r0, r3
 8018534:	edd0 7a01 	vldr	s15, [r0, #4]
 8018538:	46a0      	mov	r8, r4
 801853a:	ee76 5a26 	vadd.f32	s11, s12, s13
 801853e:	edd7 4a00 	vldr	s9, [r7]
 8018542:	9402      	str	r4, [sp, #8]
 8018544:	4604      	mov	r4, r0
 8018546:	9507      	str	r5, [sp, #28]
 8018548:	4605      	mov	r5, r0
 801854a:	ee75 2a84 	vadd.f32	s5, s11, s8
 801854e:	900a      	str	r0, [sp, #40]	@ 0x28
 8018550:	9801      	ldr	r0, [sp, #4]
 8018552:	ee76 6a66 	vsub.f32	s13, s12, s13
 8018556:	ee37 6a27 	vadd.f32	s12, s14, s15
 801855a:	ed97 5a01 	vldr	s10, [r7, #4]
 801855e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8018562:	46bc      	mov	ip, r7
 8018564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018568:	9605      	str	r6, [sp, #20]
 801856a:	ee36 7a63 	vsub.f32	s14, s12, s7
 801856e:	9703      	str	r7, [sp, #12]
 8018570:	ee12 9a90 	vmov	r9, s5
 8018574:	ee33 3aa6 	vadd.f32	s6, s7, s13
 8018578:	ee75 5ac4 	vsub.f32	s11, s11, s8
 801857c:	1f3e      	subs	r6, r7, #4
 801857e:	f840 9b08 	str.w	r9, [r0], #8
 8018582:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8018586:	edde 2a01 	vldr	s5, [lr, #4]
 801858a:	ee77 3ac4 	vsub.f32	s7, s15, s8
 801858e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018592:	ed9c 4a01 	vldr	s8, [ip, #4]
 8018596:	ee36 6a22 	vadd.f32	s12, s12, s5
 801859a:	9001      	str	r0, [sp, #4]
 801859c:	ee37 7a45 	vsub.f32	s14, s14, s10
 80185a0:	9804      	ldr	r0, [sp, #16]
 80185a2:	ee75 6a26 	vadd.f32	s13, s10, s13
 80185a6:	f1ae 0704 	sub.w	r7, lr, #4
 80185aa:	ee36 6a04 	vadd.f32	s12, s12, s8
 80185ae:	ee33 4a45 	vsub.f32	s8, s6, s10
 80185b2:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80185b6:	ee33 5aa4 	vadd.f32	s10, s7, s9
 80185ba:	ed80 6a01 	vstr	s12, [r0, #4]
 80185be:	ee14 9a10 	vmov	r9, s8
 80185c2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80185c6:	f848 9b08 	str.w	r9, [r8], #8
 80185ca:	ed8e 5a01 	vstr	s10, [lr, #4]
 80185ce:	ee15 ea90 	vmov	lr, s11
 80185d2:	f844 eb08 	str.w	lr, [r4], #8
 80185d6:	ee16 ea90 	vmov	lr, s13
 80185da:	9408      	str	r4, [sp, #32]
 80185dc:	462c      	mov	r4, r5
 80185de:	ed85 7a01 	vstr	s14, [r5, #4]
 80185e2:	9d03      	ldr	r5, [sp, #12]
 80185e4:	f84c eb08 	str.w	lr, [ip], #8
 80185e8:	edc5 7a01 	vstr	s15, [r5, #4]
 80185ec:	0855      	lsrs	r5, r2, #1
 80185ee:	9509      	str	r5, [sp, #36]	@ 0x24
 80185f0:	f000 8130 	beq.w	8018854 <arm_cfft_radix8by4_f32+0x36c>
 80185f4:	9804      	ldr	r0, [sp, #16]
 80185f6:	3b08      	subs	r3, #8
 80185f8:	46ab      	mov	fp, r5
 80185fa:	f1a4 020c 	sub.w	r2, r4, #12
 80185fe:	f100 0510 	add.w	r5, r0, #16
 8018602:	f101 0920 	add.w	r9, r1, #32
 8018606:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 801860a:	f8dd a014 	ldr.w	sl, [sp, #20]
 801860e:	4433      	add	r3, r6
 8018610:	3410      	adds	r4, #16
 8018612:	4660      	mov	r0, ip
 8018614:	4641      	mov	r1, r8
 8018616:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 801861a:	ed54 6a02 	vldr	s13, [r4, #-8]
 801861e:	f1bb 0b01 	subs.w	fp, fp, #1
 8018622:	ed55 5a02 	vldr	s11, [r5, #-8]
 8018626:	f10a 0a08 	add.w	sl, sl, #8
 801862a:	edd1 7a00 	vldr	s15, [r1]
 801862e:	f105 0508 	add.w	r5, r5, #8
 8018632:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8018636:	edd0 2a00 	vldr	s5, [r0]
 801863a:	ed14 7a01 	vldr	s14, [r4, #-4]
 801863e:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8018642:	ed55 6a03 	vldr	s13, [r5, #-12]
 8018646:	f1a2 0208 	sub.w	r2, r2, #8
 801864a:	ee73 4aa7 	vadd.f32	s9, s7, s15
 801864e:	ed90 2a01 	vldr	s4, [r0, #4]
 8018652:	ee36 5a87 	vadd.f32	s10, s13, s14
 8018656:	ed91 6a01 	vldr	s12, [r1, #4]
 801865a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801865e:	f109 0910 	add.w	r9, r9, #16
 8018662:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8018666:	f104 0408 	add.w	r4, r4, #8
 801866a:	ee73 3ae7 	vsub.f32	s7, s7, s15
 801866e:	f10e 0e18 	add.w	lr, lr, #24
 8018672:	ee37 3a67 	vsub.f32	s6, s14, s15
 8018676:	f1a3 0308 	sub.w	r3, r3, #8
 801867a:	ed45 6a04 	vstr	s13, [r5, #-16]
 801867e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018682:	edd1 6a01 	vldr	s13, [r1, #4]
 8018686:	ee76 1a25 	vadd.f32	s3, s12, s11
 801868a:	edd0 4a01 	vldr	s9, [r0, #4]
 801868e:	ee33 3a22 	vadd.f32	s6, s6, s5
 8018692:	ee75 6a26 	vadd.f32	s13, s10, s13
 8018696:	ee35 5a46 	vsub.f32	s10, s10, s12
 801869a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801869e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80186a2:	ee71 1ac2 	vsub.f32	s3, s3, s4
 80186a6:	ee35 5a42 	vsub.f32	s10, s10, s4
 80186aa:	ed45 6a03 	vstr	s13, [r5, #-12]
 80186ae:	ee32 2a06 	vadd.f32	s4, s4, s12
 80186b2:	edd6 7a00 	vldr	s15, [r6]
 80186b6:	ee73 3ae2 	vsub.f32	s7, s7, s5
 80186ba:	ed97 1a00 	vldr	s2, [r7]
 80186be:	ee77 2a62 	vsub.f32	s5, s14, s5
 80186c2:	ed92 8a04 	vldr	s16, [r2, #16]
 80186c6:	ee71 8a27 	vadd.f32	s17, s2, s15
 80186ca:	ed93 aa04 	vldr	s20, [r3, #16]
 80186ce:	ed16 7a01 	vldr	s14, [r6, #-4]
 80186d2:	ee71 7a67 	vsub.f32	s15, s2, s15
 80186d6:	ed57 0a01 	vldr	s1, [r7, #-4]
 80186da:	ee38 1a4a 	vsub.f32	s2, s16, s20
 80186de:	ee38 6a88 	vadd.f32	s12, s17, s16
 80186e2:	edd3 9a03 	vldr	s19, [r3, #12]
 80186e6:	ee30 0a87 	vadd.f32	s0, s1, s14
 80186ea:	ed92 9a03 	vldr	s18, [r2, #12]
 80186ee:	ee78 5ac8 	vsub.f32	s11, s17, s16
 80186f2:	ee3a 6a06 	vadd.f32	s12, s20, s12
 80186f6:	ee30 7ac7 	vsub.f32	s14, s1, s14
 80186fa:	ee37 4ac9 	vsub.f32	s8, s15, s18
 80186fe:	ee16 ca10 	vmov	ip, s12
 8018702:	ee30 6a49 	vsub.f32	s12, s0, s18
 8018706:	ee71 4a07 	vadd.f32	s9, s2, s14
 801870a:	f847 c908 	str.w	ip, [r7], #-8
 801870e:	ee34 4a29 	vadd.f32	s8, s8, s19
 8018712:	edd2 8a03 	vldr	s17, [r2, #12]
 8018716:	ee39 9ac9 	vsub.f32	s18, s19, s18
 801871a:	ed93 8a03 	vldr	s16, [r3, #12]
 801871e:	ee71 0a47 	vsub.f32	s1, s2, s14
 8018722:	ee30 0a28 	vadd.f32	s0, s0, s17
 8018726:	ee39 1a67 	vsub.f32	s2, s18, s15
 801872a:	ee36 6a69 	vsub.f32	s12, s12, s19
 801872e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8018732:	ee75 5aca 	vsub.f32	s11, s11, s20
 8018736:	ed87 0a01 	vstr	s0, [r7, #4]
 801873a:	ed1a 0a04 	vldr	s0, [sl, #-16]
 801873e:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8018742:	ee21 8a80 	vmul.f32	s16, s3, s0
 8018746:	ee23 7a26 	vmul.f32	s14, s6, s13
 801874a:	ee64 7a26 	vmul.f32	s15, s8, s13
 801874e:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8018752:	ee24 4a00 	vmul.f32	s8, s8, s0
 8018756:	ee23 3a00 	vmul.f32	s6, s6, s0
 801875a:	ee64 6aa6 	vmul.f32	s13, s9, s13
 801875e:	ee24 0a80 	vmul.f32	s0, s9, s0
 8018762:	ee38 7a07 	vadd.f32	s14, s16, s14
 8018766:	ee76 6a84 	vadd.f32	s13, s13, s8
 801876a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801876e:	ee33 3a61 	vsub.f32	s6, s6, s3
 8018772:	ee17 ca10 	vmov	ip, s14
 8018776:	f841 cb08 	str.w	ip, [r1], #8
 801877a:	ed01 3a01 	vstr	s6, [r1, #-4]
 801877e:	ed82 0a04 	vstr	s0, [r2, #16]
 8018782:	edc2 6a03 	vstr	s13, [r2, #12]
 8018786:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 801878a:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 801878e:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8018792:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8018796:	ee65 4a27 	vmul.f32	s9, s10, s15
 801879a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801879e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 80187a2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80187a6:	ee25 5a26 	vmul.f32	s10, s10, s13
 80187aa:	ee66 6a26 	vmul.f32	s13, s12, s13
 80187ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80187b2:	ee34 6a24 	vadd.f32	s12, s8, s9
 80187b6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80187ba:	ee35 5a63 	vsub.f32	s10, s10, s7
 80187be:	ee17 ca90 	vmov	ip, s15
 80187c2:	ed04 6a04 	vstr	s12, [r4, #-16]
 80187c6:	ed04 5a03 	vstr	s10, [r4, #-12]
 80187ca:	f846 c908 	str.w	ip, [r6], #-8
 80187ce:	edc6 6a01 	vstr	s13, [r6, #4]
 80187d2:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 80187d6:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 80187da:	ee62 5a27 	vmul.f32	s11, s4, s15
 80187de:	ee22 6a87 	vmul.f32	s12, s5, s14
 80187e2:	ee22 2a07 	vmul.f32	s4, s4, s14
 80187e6:	ee62 2aa7 	vmul.f32	s5, s5, s15
 80187ea:	ee61 6a07 	vmul.f32	s13, s2, s14
 80187ee:	ee20 7a87 	vmul.f32	s14, s1, s14
 80187f2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80187f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80187fa:	ee35 6a86 	vadd.f32	s12, s11, s12
 80187fe:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8018802:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8018806:	ee77 7a27 	vadd.f32	s15, s14, s15
 801880a:	ee16 ca10 	vmov	ip, s12
 801880e:	f840 cb08 	str.w	ip, [r0], #8
 8018812:	ed40 2a01 	vstr	s5, [r0, #-4]
 8018816:	edc3 0a04 	vstr	s1, [r3, #16]
 801881a:	edc3 7a03 	vstr	s15, [r3, #12]
 801881e:	f47f aefc 	bne.w	801861a <arm_cfft_radix8by4_f32+0x132>
 8018822:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018824:	9805      	ldr	r0, [sp, #20]
 8018826:	00cb      	lsls	r3, r1, #3
 8018828:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 801882c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8018830:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8018834:	4498      	add	r8, r3
 8018836:	449c      	add	ip, r3
 8018838:	9105      	str	r1, [sp, #20]
 801883a:	9901      	ldr	r1, [sp, #4]
 801883c:	4419      	add	r1, r3
 801883e:	9101      	str	r1, [sp, #4]
 8018840:	9906      	ldr	r1, [sp, #24]
 8018842:	4419      	add	r1, r3
 8018844:	9106      	str	r1, [sp, #24]
 8018846:	9908      	ldr	r1, [sp, #32]
 8018848:	4419      	add	r1, r3
 801884a:	9b07      	ldr	r3, [sp, #28]
 801884c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018850:	9108      	str	r1, [sp, #32]
 8018852:	9307      	str	r3, [sp, #28]
 8018854:	9a01      	ldr	r2, [sp, #4]
 8018856:	2304      	movs	r3, #4
 8018858:	9e08      	ldr	r6, [sp, #32]
 801885a:	edd2 6a00 	vldr	s13, [r2]
 801885e:	ed96 4a00 	vldr	s8, [r6]
 8018862:	edd8 7a00 	vldr	s15, [r8]
 8018866:	ee36 6a84 	vadd.f32	s12, s13, s8
 801886a:	eddc 2a00 	vldr	s5, [ip]
 801886e:	ed96 7a01 	vldr	s14, [r6, #4]
 8018872:	ee36 4ac4 	vsub.f32	s8, s13, s8
 8018876:	edd2 6a01 	vldr	s13, [r2, #4]
 801887a:	ee76 4a27 	vadd.f32	s9, s12, s15
 801887e:	ed98 2a01 	vldr	s4, [r8, #4]
 8018882:	ee76 5a87 	vadd.f32	s11, s13, s14
 8018886:	ed9c 5a01 	vldr	s10, [ip, #4]
 801888a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801888e:	9d05      	ldr	r5, [sp, #20]
 8018890:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8018894:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8018898:	ee72 3a04 	vadd.f32	s7, s4, s8
 801889c:	9804      	ldr	r0, [sp, #16]
 801889e:	ee77 4a67 	vsub.f32	s9, s14, s15
 80188a2:	4621      	mov	r1, r4
 80188a4:	edc2 6a00 	vstr	s13, [r2]
 80188a8:	ee76 6a67 	vsub.f32	s13, s12, s15
 80188ac:	ed98 3a01 	vldr	s6, [r8, #4]
 80188b0:	ee35 6ac2 	vsub.f32	s12, s11, s4
 80188b4:	eddc 1a01 	vldr	s3, [ip, #4]
 80188b8:	ee74 4aa2 	vadd.f32	s9, s9, s5
 80188bc:	ee35 3a83 	vadd.f32	s6, s11, s6
 80188c0:	ee34 4a42 	vsub.f32	s8, s8, s4
 80188c4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80188c8:	ee73 5a21 	vadd.f32	s11, s6, s3
 80188cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80188d0:	ee36 6a45 	vsub.f32	s12, s12, s10
 80188d4:	edc2 5a01 	vstr	s11, [r2, #4]
 80188d8:	ee35 5a04 	vadd.f32	s10, s10, s8
 80188dc:	9a06      	ldr	r2, [sp, #24]
 80188de:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80188e2:	edd2 7a00 	vldr	s15, [r2]
 80188e6:	edd2 5a01 	vldr	s11, [r2, #4]
 80188ea:	ee23 4aa7 	vmul.f32	s8, s7, s15
 80188ee:	ee63 3aa5 	vmul.f32	s7, s7, s11
 80188f2:	ee64 5aa5 	vmul.f32	s11, s9, s11
 80188f6:	ee64 4aa7 	vmul.f32	s9, s9, s15
 80188fa:	ee77 7a62 	vsub.f32	s15, s14, s5
 80188fe:	ee74 5a25 	vadd.f32	s11, s8, s11
 8018902:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8018906:	edc8 5a00 	vstr	s11, [r8]
 801890a:	edc8 4a01 	vstr	s9, [r8, #4]
 801890e:	edd5 4a01 	vldr	s9, [r5, #4]
 8018912:	ed95 7a00 	vldr	s14, [r5]
 8018916:	9d07      	ldr	r5, [sp, #28]
 8018918:	ee66 5a87 	vmul.f32	s11, s13, s14
 801891c:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8018920:	ee26 7a07 	vmul.f32	s14, s12, s14
 8018924:	ee26 6a24 	vmul.f32	s12, s12, s9
 8018928:	ee77 6a66 	vsub.f32	s13, s14, s13
 801892c:	ee35 6a86 	vadd.f32	s12, s11, s12
 8018930:	edc6 6a01 	vstr	s13, [r6, #4]
 8018934:	ed86 6a00 	vstr	s12, [r6]
 8018938:	ed95 6a01 	vldr	s12, [r5, #4]
 801893c:	ed95 7a00 	vldr	s14, [r5]
 8018940:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018942:	ee65 6a07 	vmul.f32	s13, s10, s14
 8018946:	ee27 7a87 	vmul.f32	s14, s15, s14
 801894a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801894e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018952:	ee37 5a45 	vsub.f32	s10, s14, s10
 8018956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801895a:	ed8c 5a01 	vstr	s10, [ip, #4]
 801895e:	edcc 7a00 	vstr	s15, [ip]
 8018962:	6872      	ldr	r2, [r6, #4]
 8018964:	f000 f8d4 	bl	8018b10 <arm_radix8_butterfly_f32>
 8018968:	9802      	ldr	r0, [sp, #8]
 801896a:	4621      	mov	r1, r4
 801896c:	6872      	ldr	r2, [r6, #4]
 801896e:	2304      	movs	r3, #4
 8018970:	f000 f8ce 	bl	8018b10 <arm_radix8_butterfly_f32>
 8018974:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018976:	4621      	mov	r1, r4
 8018978:	6872      	ldr	r2, [r6, #4]
 801897a:	2304      	movs	r3, #4
 801897c:	f000 f8c8 	bl	8018b10 <arm_radix8_butterfly_f32>
 8018980:	9803      	ldr	r0, [sp, #12]
 8018982:	4621      	mov	r1, r4
 8018984:	6872      	ldr	r2, [r6, #4]
 8018986:	2304      	movs	r3, #4
 8018988:	b00f      	add	sp, #60	@ 0x3c
 801898a:	ecbd 8b06 	vpop	{d8-d10}
 801898e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018992:	f000 b8bd 	b.w	8018b10 <arm_radix8_butterfly_f32>
 8018996:	bf00      	nop

08018998 <arm_cfft_f32>:
 8018998:	2a01      	cmp	r2, #1
 801899a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801899e:	4606      	mov	r6, r0
 80189a0:	4617      	mov	r7, r2
 80189a2:	460c      	mov	r4, r1
 80189a4:	4698      	mov	r8, r3
 80189a6:	8805      	ldrh	r5, [r0, #0]
 80189a8:	d053      	beq.n	8018a52 <arm_cfft_f32+0xba>
 80189aa:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80189ae:	d04b      	beq.n	8018a48 <arm_cfft_f32+0xb0>
 80189b0:	d916      	bls.n	80189e0 <arm_cfft_f32+0x48>
 80189b2:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 80189b6:	d01a      	beq.n	80189ee <arm_cfft_f32+0x56>
 80189b8:	d95a      	bls.n	8018a70 <arm_cfft_f32+0xd8>
 80189ba:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 80189be:	d043      	beq.n	8018a48 <arm_cfft_f32+0xb0>
 80189c0:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 80189c4:	d105      	bne.n	80189d2 <arm_cfft_f32+0x3a>
 80189c6:	4620      	mov	r0, r4
 80189c8:	4629      	mov	r1, r5
 80189ca:	6872      	ldr	r2, [r6, #4]
 80189cc:	2301      	movs	r3, #1
 80189ce:	f000 f89f 	bl	8018b10 <arm_radix8_butterfly_f32>
 80189d2:	f1b8 0f00 	cmp.w	r8, #0
 80189d6:	d111      	bne.n	80189fc <arm_cfft_f32+0x64>
 80189d8:	2f01      	cmp	r7, #1
 80189da:	d016      	beq.n	8018a0a <arm_cfft_f32+0x72>
 80189dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189e0:	2d20      	cmp	r5, #32
 80189e2:	d031      	beq.n	8018a48 <arm_cfft_f32+0xb0>
 80189e4:	d948      	bls.n	8018a78 <arm_cfft_f32+0xe0>
 80189e6:	2d40      	cmp	r5, #64	@ 0x40
 80189e8:	d0ed      	beq.n	80189c6 <arm_cfft_f32+0x2e>
 80189ea:	2d80      	cmp	r5, #128	@ 0x80
 80189ec:	d1f1      	bne.n	80189d2 <arm_cfft_f32+0x3a>
 80189ee:	4630      	mov	r0, r6
 80189f0:	4621      	mov	r1, r4
 80189f2:	f7ff fca7 	bl	8018344 <arm_cfft_radix8by2_f32>
 80189f6:	f1b8 0f00 	cmp.w	r8, #0
 80189fa:	d0ed      	beq.n	80189d8 <arm_cfft_f32+0x40>
 80189fc:	4620      	mov	r0, r4
 80189fe:	89b1      	ldrh	r1, [r6, #12]
 8018a00:	68b2      	ldr	r2, [r6, #8]
 8018a02:	f7e7 fc85 	bl	8000310 <arm_bitreversal_32>
 8018a06:	2f01      	cmp	r7, #1
 8018a08:	d1e8      	bne.n	80189dc <arm_cfft_f32+0x44>
 8018a0a:	ee07 5a90 	vmov	s15, r5
 8018a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8018a12:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018a16:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8018a1a:	2d00      	cmp	r5, #0
 8018a1c:	d0de      	beq.n	80189dc <arm_cfft_f32+0x44>
 8018a1e:	f104 0108 	add.w	r1, r4, #8
 8018a22:	2300      	movs	r3, #0
 8018a24:	ed11 7a02 	vldr	s14, [r1, #-8]
 8018a28:	3301      	adds	r3, #1
 8018a2a:	ed51 7a01 	vldr	s15, [r1, #-4]
 8018a2e:	3108      	adds	r1, #8
 8018a30:	429d      	cmp	r5, r3
 8018a32:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018a36:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8018a3a:	ed01 7a04 	vstr	s14, [r1, #-16]
 8018a3e:	ed41 7a03 	vstr	s15, [r1, #-12]
 8018a42:	d1ef      	bne.n	8018a24 <arm_cfft_f32+0x8c>
 8018a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a48:	4630      	mov	r0, r6
 8018a4a:	4621      	mov	r1, r4
 8018a4c:	f7ff fd4c 	bl	80184e8 <arm_cfft_radix8by4_f32>
 8018a50:	e7bf      	b.n	80189d2 <arm_cfft_f32+0x3a>
 8018a52:	b1a5      	cbz	r5, 8018a7e <arm_cfft_f32+0xe6>
 8018a54:	f101 030c 	add.w	r3, r1, #12
 8018a58:	2200      	movs	r2, #0
 8018a5a:	ed53 7a02 	vldr	s15, [r3, #-8]
 8018a5e:	3201      	adds	r2, #1
 8018a60:	3308      	adds	r3, #8
 8018a62:	eef1 7a67 	vneg.f32	s15, s15
 8018a66:	4295      	cmp	r5, r2
 8018a68:	ed43 7a04 	vstr	s15, [r3, #-16]
 8018a6c:	d1f5      	bne.n	8018a5a <arm_cfft_f32+0xc2>
 8018a6e:	e79c      	b.n	80189aa <arm_cfft_f32+0x12>
 8018a70:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8018a74:	d0a7      	beq.n	80189c6 <arm_cfft_f32+0x2e>
 8018a76:	e7ac      	b.n	80189d2 <arm_cfft_f32+0x3a>
 8018a78:	2d10      	cmp	r5, #16
 8018a7a:	d0b8      	beq.n	80189ee <arm_cfft_f32+0x56>
 8018a7c:	e7a9      	b.n	80189d2 <arm_cfft_f32+0x3a>
 8018a7e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8018a82:	d896      	bhi.n	80189b2 <arm_cfft_f32+0x1a>
 8018a84:	e7ac      	b.n	80189e0 <arm_cfft_f32+0x48>
 8018a86:	bf00      	nop

08018a88 <arm_sin_f32>:
 8018a88:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018a8c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8018b04 <arm_sin_f32+0x7c>
 8018a90:	ee20 7a07 	vmul.f32	s14, s0, s14
 8018a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a98:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8018a9c:	d42c      	bmi.n	8018af8 <arm_sin_f32+0x70>
 8018a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018aa2:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8018b08 <arm_sin_f32+0x80>
 8018aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018aaa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018aae:	eef4 7ae6 	vcmpe.f32	s15, s13
 8018ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ab6:	db01      	blt.n	8018abc <arm_sin_f32+0x34>
 8018ab8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018abc:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8018ac0:	4a12      	ldr	r2, [pc, #72]	@ (8018b0c <arm_sin_f32+0x84>)
 8018ac2:	ee17 3a10 	vmov	r3, s14
 8018ac6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8018aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018ace:	ee06 3a90 	vmov	s13, r3
 8018ad2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8018ad6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8018ada:	ed91 0a00 	vldr	s0, [r1]
 8018ade:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018ae2:	edd1 6a01 	vldr	s13, [r1, #4]
 8018ae6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018aea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018aee:	ee27 0a00 	vmul.f32	s0, s14, s0
 8018af2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018af6:	4770      	bx	lr
 8018af8:	ee17 3a90 	vmov	r3, s15
 8018afc:	3b01      	subs	r3, #1
 8018afe:	ee07 3a90 	vmov	s15, r3
 8018b02:	e7cc      	b.n	8018a9e <arm_sin_f32+0x16>
 8018b04:	3e22f983 	.word	0x3e22f983
 8018b08:	44000000 	.word	0x44000000
 8018b0c:	08027efc 	.word	0x08027efc

08018b10 <arm_radix8_butterfly_f32>:
 8018b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b14:	469e      	mov	lr, r3
 8018b16:	1d03      	adds	r3, r0, #4
 8018b18:	4683      	mov	fp, r0
 8018b1a:	468a      	mov	sl, r1
 8018b1c:	4688      	mov	r8, r1
 8018b1e:	469c      	mov	ip, r3
 8018b20:	ed2d 8b10 	vpush	{d8-d15}
 8018b24:	ed9f 9ac4 	vldr	s18, [pc, #784]	@ 8018e38 <arm_radix8_butterfly_f32+0x328>
 8018b28:	b09f      	sub	sp, #124	@ 0x7c
 8018b2a:	921c      	str	r2, [sp, #112]	@ 0x70
 8018b2c:	931d      	str	r3, [sp, #116]	@ 0x74
 8018b2e:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 8018b32:	f04f 0900 	mov.w	r9, #0
 8018b36:	461a      	mov	r2, r3
 8018b38:	930e      	str	r3, [sp, #56]	@ 0x38
 8018b3a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8018b3e:	0051      	lsls	r1, r2, #1
 8018b40:	4608      	mov	r0, r1
 8018b42:	9103      	str	r1, [sp, #12]
 8018b44:	00d1      	lsls	r1, r2, #3
 8018b46:	1885      	adds	r5, r0, r2
 8018b48:	0110      	lsls	r0, r2, #4
 8018b4a:	eb0b 0601 	add.w	r6, fp, r1
 8018b4e:	9101      	str	r1, [sp, #4]
 8018b50:	18ac      	adds	r4, r5, r2
 8018b52:	9002      	str	r0, [sp, #8]
 8018b54:	1877      	adds	r7, r6, r1
 8018b56:	4611      	mov	r1, r2
 8018b58:	4422      	add	r2, r4
 8018b5a:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8018b5e:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8018b62:	1850      	adds	r0, r2, r1
 8018b64:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8018b68:	4401      	add	r1, r0
 8018b6a:	3204      	adds	r2, #4
 8018b6c:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8018b70:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 8018b74:	3104      	adds	r1, #4
 8018b76:	ed1c 7a01 	vldr	s14, [ip, #-4]
 8018b7a:	44c1      	add	r9, r8
 8018b7c:	edd4 6a00 	vldr	s13, [r4]
 8018b80:	ed97 6a00 	vldr	s12, [r7]
 8018b84:	45ca      	cmp	sl, r9
 8018b86:	edd0 7a00 	vldr	s15, [r0]
 8018b8a:	ee37 5a66 	vsub.f32	s10, s14, s13
 8018b8e:	edd6 5a00 	vldr	s11, [r6]
 8018b92:	ee37 2a26 	vadd.f32	s4, s14, s13
 8018b96:	ee76 2a67 	vsub.f32	s5, s12, s15
 8018b9a:	edd5 6a00 	vldr	s13, [r5]
 8018b9e:	ed12 7a01 	vldr	s14, [r2, #-4]
 8018ba2:	ee76 4a27 	vadd.f32	s9, s12, s15
 8018ba6:	ed11 6a01 	vldr	s12, [r1, #-4]
 8018baa:	ee75 1a87 	vadd.f32	s3, s11, s14
 8018bae:	ee36 4a86 	vadd.f32	s8, s13, s12
 8018bb2:	ee72 7a24 	vadd.f32	s15, s4, s9
 8018bb6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8018bba:	ee76 5ac6 	vsub.f32	s11, s13, s12
 8018bbe:	ee31 6a84 	vadd.f32	s12, s3, s8
 8018bc2:	ee32 2a64 	vsub.f32	s4, s4, s9
 8018bc6:	ee77 6a65 	vsub.f32	s13, s14, s11
 8018bca:	ee77 4a86 	vadd.f32	s9, s15, s12
 8018bce:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018bd2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018bd6:	ed4c 4a01 	vstr	s9, [ip, #-4]
 8018bda:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8018bde:	edc4 7a00 	vstr	s15, [r4]
 8018be2:	ee66 6a89 	vmul.f32	s13, s13, s18
 8018be6:	edd6 5a01 	vldr	s11, [r6, #4]
 8018bea:	ee27 6a09 	vmul.f32	s12, s14, s18
 8018bee:	edd5 3a01 	vldr	s7, [r5, #4]
 8018bf2:	ed92 4a00 	vldr	s8, [r2]
 8018bf6:	ee35 1a26 	vadd.f32	s2, s10, s13
 8018bfa:	edd1 4a00 	vldr	s9, [r1]
 8018bfe:	ee75 6a66 	vsub.f32	s13, s10, s13
 8018c02:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8018c06:	ed94 0a01 	vldr	s0, [r4, #4]
 8018c0a:	ee73 7ae4 	vsub.f32	s15, s7, s9
 8018c0e:	ed9c 7a00 	vldr	s14, [ip]
 8018c12:	edd0 0a01 	vldr	s1, [r0, #4]
 8018c16:	ee35 4a84 	vadd.f32	s8, s11, s8
 8018c1a:	ed97 5a01 	vldr	s10, [r7, #4]
 8018c1e:	ee73 4aa4 	vadd.f32	s9, s7, s9
 8018c22:	ee73 5a27 	vadd.f32	s11, s6, s15
 8018c26:	ee77 3a00 	vadd.f32	s7, s14, s0
 8018c2a:	ee33 3a67 	vsub.f32	s6, s6, s15
 8018c2e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8018c32:	ee35 0a20 	vadd.f32	s0, s10, s1
 8018c36:	ee63 7a09 	vmul.f32	s15, s6, s18
 8018c3a:	ee35 5a60 	vsub.f32	s10, s10, s1
 8018c3e:	ee33 3a80 	vadd.f32	s6, s7, s0
 8018c42:	ee74 0a24 	vadd.f32	s1, s8, s9
 8018c46:	ee65 5a89 	vmul.f32	s11, s11, s18
 8018c4a:	ee74 4a64 	vsub.f32	s9, s8, s9
 8018c4e:	ee33 4ac0 	vsub.f32	s8, s7, s0
 8018c52:	ee75 3a25 	vadd.f32	s7, s10, s11
 8018c56:	ee75 5a65 	vsub.f32	s11, s10, s11
 8018c5a:	ee37 5a27 	vadd.f32	s10, s14, s15
 8018c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018c62:	ee32 7a86 	vadd.f32	s14, s5, s12
 8018c66:	ee32 6ac6 	vsub.f32	s12, s5, s12
 8018c6a:	ee73 2a20 	vadd.f32	s5, s6, s1
 8018c6e:	ee33 3a60 	vsub.f32	s6, s6, s1
 8018c72:	ee72 0a24 	vadd.f32	s1, s4, s9
 8018c76:	edcc 2a00 	vstr	s5, [ip]
 8018c7a:	ee72 4a64 	vsub.f32	s9, s4, s9
 8018c7e:	ed84 3a01 	vstr	s6, [r4, #4]
 8018c82:	ee74 2a61 	vsub.f32	s5, s8, s3
 8018c86:	ee31 3a23 	vadd.f32	s6, s2, s7
 8018c8a:	edc7 0a00 	vstr	s1, [r7]
 8018c8e:	ee31 1a63 	vsub.f32	s2, s2, s7
 8018c92:	edc0 4a00 	vstr	s9, [r0]
 8018c96:	ee76 3aa5 	vadd.f32	s7, s13, s11
 8018c9a:	edc7 2a01 	vstr	s5, [r7, #4]
 8018c9e:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8018ca2:	441c      	add	r4, r3
 8018ca4:	ee75 5a47 	vsub.f32	s11, s10, s14
 8018ca8:	449c      	add	ip, r3
 8018caa:	ee35 5a07 	vadd.f32	s10, s10, s14
 8018cae:	441f      	add	r7, r3
 8018cb0:	ee37 7ac6 	vsub.f32	s14, s15, s12
 8018cb4:	ee34 4a21 	vadd.f32	s8, s8, s3
 8018cb8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018cbc:	ed80 4a01 	vstr	s8, [r0, #4]
 8018cc0:	4418      	add	r0, r3
 8018cc2:	ed86 3a00 	vstr	s6, [r6]
 8018cc6:	ed01 1a01 	vstr	s2, [r1, #-4]
 8018cca:	ed42 3a01 	vstr	s7, [r2, #-4]
 8018cce:	edc5 6a00 	vstr	s13, [r5]
 8018cd2:	edc6 5a01 	vstr	s11, [r6, #4]
 8018cd6:	441e      	add	r6, r3
 8018cd8:	ed81 5a00 	vstr	s10, [r1]
 8018cdc:	4419      	add	r1, r3
 8018cde:	ed82 7a00 	vstr	s14, [r2]
 8018ce2:	441a      	add	r2, r3
 8018ce4:	edc5 7a01 	vstr	s15, [r5, #4]
 8018ce8:	441d      	add	r5, r3
 8018cea:	f63f af44 	bhi.w	8018b76 <arm_radix8_butterfly_f32+0x66>
 8018cee:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8018cf0:	2f07      	cmp	r7, #7
 8018cf2:	f240 81e8 	bls.w	80190c6 <arm_radix8_butterfly_f32+0x5b6>
 8018cf6:	9903      	ldr	r1, [sp, #12]
 8018cf8:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 8018cfc:	9e01      	ldr	r6, [sp, #4]
 8018cfe:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 8018d02:	19ca      	adds	r2, r1, r7
 8018d04:	1c4c      	adds	r4, r1, #1
 8018d06:	eb05 010e 	add.w	r1, r5, lr
 8018d0a:	00ed      	lsls	r5, r5, #3
 8018d0c:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8018d10:	3608      	adds	r6, #8
 8018d12:	950f      	str	r5, [sp, #60]	@ 0x3c
 8018d14:	eb01 050e 	add.w	r5, r1, lr
 8018d18:	00c9      	lsls	r1, r1, #3
 8018d1a:	443c      	add	r4, r7
 8018d1c:	9618      	str	r6, [sp, #96]	@ 0x60
 8018d1e:	00ee      	lsls	r6, r5, #3
 8018d20:	460f      	mov	r7, r1
 8018d22:	9114      	str	r1, [sp, #80]	@ 0x50
 8018d24:	9902      	ldr	r1, [sp, #8]
 8018d26:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8018d2a:	9611      	str	r6, [sp, #68]	@ 0x44
 8018d2c:	00c0      	lsls	r0, r0, #3
 8018d2e:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8018d30:	3108      	adds	r1, #8
 8018d32:	3404      	adds	r4, #4
 8018d34:	f04f 0901 	mov.w	r9, #1
 8018d38:	9119      	str	r1, [sp, #100]	@ 0x64
 8018d3a:	eb05 010e 	add.w	r1, r5, lr
 8018d3e:	4635      	mov	r5, r6
 8018d40:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018d42:	9301      	str	r3, [sp, #4]
 8018d44:	443d      	add	r5, r7
 8018d46:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8018d48:	9507      	str	r5, [sp, #28]
 8018d4a:	eb01 050e 	add.w	r5, r1, lr
 8018d4e:	00c9      	lsls	r1, r1, #3
 8018d50:	19f7      	adds	r7, r6, r7
 8018d52:	00ed      	lsls	r5, r5, #3
 8018d54:	9110      	str	r1, [sp, #64]	@ 0x40
 8018d56:	00d1      	lsls	r1, r2, #3
 8018d58:	970a      	str	r7, [sp, #40]	@ 0x28
 8018d5a:	462f      	mov	r7, r5
 8018d5c:	9515      	str	r5, [sp, #84]	@ 0x54
 8018d5e:	0112      	lsls	r2, r2, #4
 8018d60:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8018d62:	19f4      	adds	r4, r6, r7
 8018d64:	320c      	adds	r2, #12
 8018d66:	3108      	adds	r1, #8
 8018d68:	1975      	adds	r5, r6, r5
 8018d6a:	9408      	str	r4, [sp, #32]
 8018d6c:	9217      	str	r2, [sp, #92]	@ 0x5c
 8018d6e:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8018d72:	9509      	str	r5, [sp, #36]	@ 0x24
 8018d74:	f100 020c 	add.w	r2, r0, #12
 8018d78:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8018d7a:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8018d7c:	1975      	adds	r5, r6, r5
 8018d7e:	9216      	str	r2, [sp, #88]	@ 0x58
 8018d80:	1932      	adds	r2, r6, r4
 8018d82:	911b      	str	r1, [sp, #108]	@ 0x6c
 8018d84:	9505      	str	r5, [sp, #20]
 8018d86:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8018d8a:	0179      	lsls	r1, r7, #5
 8018d8c:	9204      	str	r2, [sp, #16]
 8018d8e:	1972      	adds	r2, r6, r5
 8018d90:	9412      	str	r4, [sp, #72]	@ 0x48
 8018d92:	9513      	str	r5, [sp, #76]	@ 0x4c
 8018d94:	9206      	str	r2, [sp, #24]
 8018d96:	f101 0208 	add.w	r2, r1, #8
 8018d9a:	921a      	str	r2, [sp, #104]	@ 0x68
 8018d9c:	2200      	movs	r2, #0
 8018d9e:	f102 0108 	add.w	r1, r2, #8
 8018da2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8018da4:	46cc      	mov	ip, r9
 8018da6:	460f      	mov	r7, r1
 8018da8:	910c      	str	r1, [sp, #48]	@ 0x30
 8018daa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8018dac:	eb0b 0e07 	add.w	lr, fp, r7
 8018db0:	9f04      	ldr	r7, [sp, #16]
 8018db2:	188e      	adds	r6, r1, r2
 8018db4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018db6:	edd7 fa00 	vldr	s31, [r7]
 8018dba:	9f06      	ldr	r7, [sp, #24]
 8018dbc:	188d      	adds	r5, r1, r2
 8018dbe:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8018dc0:	445e      	add	r6, fp
 8018dc2:	ed97 fa00 	vldr	s30, [r7]
 8018dc6:	445d      	add	r5, fp
 8018dc8:	9f05      	ldr	r7, [sp, #20]
 8018dca:	188c      	adds	r4, r1, r2
 8018dcc:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8018dce:	edd7 ea00 	vldr	s29, [r7]
 8018dd2:	445c      	add	r4, fp
 8018dd4:	9f07      	ldr	r7, [sp, #28]
 8018dd6:	1888      	adds	r0, r1, r2
 8018dd8:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8018dda:	ed97 ea00 	vldr	s28, [r7]
 8018dde:	4458      	add	r0, fp
 8018de0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8018de2:	4411      	add	r1, r2
 8018de4:	441a      	add	r2, r3
 8018de6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018de8:	edd7 da00 	vldr	s27, [r7]
 8018dec:	4459      	add	r1, fp
 8018dee:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8018df0:	445a      	add	r2, fp
 8018df2:	930d      	str	r3, [sp, #52]	@ 0x34
 8018df4:	ed97 da00 	vldr	s26, [r7]
 8018df8:	9f08      	ldr	r7, [sp, #32]
 8018dfa:	edd7 ca00 	vldr	s25, [r7]
 8018dfe:	9f04      	ldr	r7, [sp, #16]
 8018e00:	ed97 ca01 	vldr	s24, [r7, #4]
 8018e04:	9f06      	ldr	r7, [sp, #24]
 8018e06:	edd7 ba01 	vldr	s23, [r7, #4]
 8018e0a:	9f05      	ldr	r7, [sp, #20]
 8018e0c:	ed97 ba01 	vldr	s22, [r7, #4]
 8018e10:	9f07      	ldr	r7, [sp, #28]
 8018e12:	edd7 aa01 	vldr	s21, [r7, #4]
 8018e16:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8018e18:	ed97 aa01 	vldr	s20, [r7, #4]
 8018e1c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8018e1e:	9b01      	ldr	r3, [sp, #4]
 8018e20:	edd7 7a01 	vldr	s15, [r7, #4]
 8018e24:	9f08      	ldr	r7, [sp, #32]
 8018e26:	edcd 7a02 	vstr	s15, [sp, #8]
 8018e2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8018e2e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8018e30:	edcd 7a03 	vstr	s15, [sp, #12]
 8018e34:	e002      	b.n	8018e3c <arm_radix8_butterfly_f32+0x32c>
 8018e36:	bf00      	nop
 8018e38:	3f3504f3 	.word	0x3f3504f3
 8018e3c:	ed90 2a00 	vldr	s4, [r0]
 8018e40:	44c4      	add	ip, r8
 8018e42:	ed96 7a00 	vldr	s14, [r6]
 8018e46:	ed94 8a00 	vldr	s16, [r4]
 8018e4a:	45e2      	cmp	sl, ip
 8018e4c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8018e50:	ed95 5a00 	vldr	s10, [r5]
 8018e54:	ed51 5a01 	vldr	s11, [r1, #-4]
 8018e58:	ee38 6a27 	vadd.f32	s12, s16, s15
 8018e5c:	ed9e 1a00 	vldr	s2, [lr]
 8018e60:	ee78 2a67 	vsub.f32	s5, s16, s15
 8018e64:	ed17 4a01 	vldr	s8, [r7, #-4]
 8018e68:	ee75 3a25 	vadd.f32	s7, s10, s11
 8018e6c:	ee31 3a07 	vadd.f32	s6, s2, s14
 8018e70:	edde 4a01 	vldr	s9, [lr, #4]
 8018e74:	ee72 6a04 	vadd.f32	s13, s4, s8
 8018e78:	ee75 5a65 	vsub.f32	s11, s10, s11
 8018e7c:	ee73 1a06 	vadd.f32	s3, s6, s12
 8018e80:	ee33 5aa6 	vadd.f32	s10, s7, s13
 8018e84:	ee32 4a44 	vsub.f32	s8, s4, s8
 8018e88:	ee31 1a47 	vsub.f32	s2, s2, s14
 8018e8c:	ee31 7a85 	vadd.f32	s14, s3, s10
 8018e90:	ee75 7a84 	vadd.f32	s15, s11, s8
 8018e94:	ee33 3a46 	vsub.f32	s6, s6, s12
 8018e98:	ed8e 7a00 	vstr	s14, [lr]
 8018e9c:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8018ea0:	ee67 7a89 	vmul.f32	s15, s15, s18
 8018ea4:	ed90 2a01 	vldr	s4, [r0, #4]
 8018ea8:	ed95 7a01 	vldr	s14, [r5, #4]
 8018eac:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8018eb0:	ed91 6a00 	vldr	s12, [r1]
 8018eb4:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8018eb8:	edd7 8a00 	vldr	s17, [r7]
 8018ebc:	ee32 8ae7 	vsub.f32	s16, s5, s15
 8018ec0:	ee72 5aa7 	vadd.f32	s11, s5, s15
 8018ec4:	edd2 0a00 	vldr	s1, [r2]
 8018ec8:	ee72 6a68 	vsub.f32	s13, s4, s17
 8018ecc:	edd6 7a01 	vldr	s15, [r6, #4]
 8018ed0:	ee77 2a46 	vsub.f32	s5, s14, s12
 8018ed4:	ee37 0a06 	vadd.f32	s0, s14, s12
 8018ed8:	ed94 7a01 	vldr	s14, [r4, #4]
 8018edc:	ee32 6a28 	vadd.f32	s12, s4, s17
 8018ee0:	ee72 9ae6 	vsub.f32	s19, s5, s13
 8018ee4:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8018ee8:	ee72 2aa6 	vadd.f32	s5, s5, s13
 8018eec:	ee77 6a20 	vadd.f32	s13, s14, s1
 8018ef0:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8018ef4:	ee37 7a60 	vsub.f32	s14, s14, s1
 8018ef8:	ee24 4a09 	vmul.f32	s8, s8, s18
 8018efc:	ee70 0a06 	vadd.f32	s1, s0, s12
 8018f00:	ee69 7a89 	vmul.f32	s15, s19, s18
 8018f04:	ee62 2a89 	vmul.f32	s5, s5, s18
 8018f08:	ee30 6a46 	vsub.f32	s12, s0, s12
 8018f0c:	ee32 0a26 	vadd.f32	s0, s4, s13
 8018f10:	ee72 6a66 	vsub.f32	s13, s4, s13
 8018f14:	ee77 8a62 	vsub.f32	s17, s14, s5
 8018f18:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8018f1c:	ee74 7ae7 	vsub.f32	s15, s9, s15
 8018f20:	ee77 4a22 	vadd.f32	s9, s14, s5
 8018f24:	ee71 2a04 	vadd.f32	s5, s2, s8
 8018f28:	ee31 7a44 	vsub.f32	s14, s2, s8
 8018f2c:	ee30 1a60 	vsub.f32	s2, s0, s1
 8018f30:	ee73 1a06 	vadd.f32	s3, s6, s12
 8018f34:	ee33 6a46 	vsub.f32	s12, s6, s12
 8018f38:	ee36 3ae3 	vsub.f32	s6, s13, s7
 8018f3c:	ee37 4ac8 	vsub.f32	s8, s15, s16
 8018f40:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8018f44:	ee77 7a88 	vadd.f32	s15, s15, s16
 8018f48:	ee72 3a65 	vsub.f32	s7, s4, s11
 8018f4c:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8018f50:	ee72 5a25 	vadd.f32	s11, s4, s11
 8018f54:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8018f58:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8018f5c:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8018f60:	ee77 2a28 	vadd.f32	s5, s14, s17
 8018f64:	ee37 7a68 	vsub.f32	s14, s14, s17
 8018f68:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8018f6c:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8018f70:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8018f74:	ee70 0a20 	vadd.f32	s1, s0, s1
 8018f78:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8018f7c:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8018f80:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8018f84:	edce 0a01 	vstr	s1, [lr, #4]
 8018f88:	ee38 8a88 	vadd.f32	s16, s17, s16
 8018f8c:	449e      	add	lr, r3
 8018f8e:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8018f92:	ee31 5a45 	vsub.f32	s10, s2, s10
 8018f96:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8018f9a:	ed86 8a00 	vstr	s16, [r6]
 8018f9e:	ee39 0a80 	vadd.f32	s0, s19, s0
 8018fa2:	ee33 3a61 	vsub.f32	s6, s6, s3
 8018fa6:	ed86 5a01 	vstr	s10, [r6, #4]
 8018faa:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8018fae:	edcd 3a01 	vstr	s7, [sp, #4]
 8018fb2:	ed9d 5a03 	vldr	s10, [sp, #12]
 8018fb6:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8018fba:	eddd 3a02 	vldr	s7, [sp, #8]
 8018fbe:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8018fc2:	ed84 0a00 	vstr	s0, [r4]
 8018fc6:	ee65 4a24 	vmul.f32	s9, s10, s9
 8018fca:	ed84 3a01 	vstr	s6, [r4, #4]
 8018fce:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8018fd2:	ee23 6a86 	vmul.f32	s12, s7, s12
 8018fd6:	eddd 3a01 	vldr	s7, [sp, #4]
 8018fda:	ee25 5a25 	vmul.f32	s10, s10, s11
 8018fde:	441e      	add	r6, r3
 8018fe0:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8018fe4:	441c      	add	r4, r3
 8018fe6:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8018fea:	ee70 0aa8 	vadd.f32	s1, s1, s17
 8018fee:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8018ff2:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8018ff6:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8018ffa:	ee6d 6a26 	vmul.f32	s13, s26, s13
 8018ffe:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8019002:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8019006:	ee2d 4a84 	vmul.f32	s8, s27, s8
 801900a:	ee2b 7a07 	vmul.f32	s14, s22, s14
 801900e:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8019012:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8019016:	ee38 8a01 	vadd.f32	s16, s16, s2
 801901a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801901e:	ee39 5a85 	vadd.f32	s10, s19, s10
 8019022:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8019026:	ed02 8a01 	vstr	s16, [r2, #-4]
 801902a:	ee30 0a21 	vadd.f32	s0, s0, s3
 801902e:	ed82 6a00 	vstr	s12, [r2]
 8019032:	ee74 2a62 	vsub.f32	s5, s8, s5
 8019036:	edc5 0a00 	vstr	s1, [r5]
 801903a:	ee33 3a28 	vadd.f32	s6, s6, s17
 801903e:	edc5 3a01 	vstr	s7, [r5, #4]
 8019042:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8019046:	ed07 5a01 	vstr	s10, [r7, #-4]
 801904a:	edc7 4a00 	vstr	s9, [r7]
 801904e:	441d      	add	r5, r3
 8019050:	ed01 0a01 	vstr	s0, [r1, #-4]
 8019054:	441a      	add	r2, r3
 8019056:	edc1 2a00 	vstr	s5, [r1]
 801905a:	441f      	add	r7, r3
 801905c:	ed80 3a00 	vstr	s6, [r0]
 8019060:	4419      	add	r1, r3
 8019062:	ed80 7a01 	vstr	s14, [r0, #4]
 8019066:	4418      	add	r0, r3
 8019068:	f63f aee8 	bhi.w	8018e3c <arm_radix8_butterfly_f32+0x32c>
 801906c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801906e:	f109 0901 	add.w	r9, r9, #1
 8019072:	9301      	str	r3, [sp, #4]
 8019074:	9b04      	ldr	r3, [sp, #16]
 8019076:	4413      	add	r3, r2
 8019078:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801907a:	9304      	str	r3, [sp, #16]
 801907c:	9b06      	ldr	r3, [sp, #24]
 801907e:	4413      	add	r3, r2
 8019080:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019082:	9306      	str	r3, [sp, #24]
 8019084:	9b05      	ldr	r3, [sp, #20]
 8019086:	4413      	add	r3, r2
 8019088:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801908a:	9305      	str	r3, [sp, #20]
 801908c:	9b07      	ldr	r3, [sp, #28]
 801908e:	4413      	add	r3, r2
 8019090:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019092:	9307      	str	r3, [sp, #28]
 8019094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019096:	4413      	add	r3, r2
 8019098:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801909a:	930a      	str	r3, [sp, #40]	@ 0x28
 801909c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801909e:	4413      	add	r3, r2
 80190a0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80190a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80190a4:	9b08      	ldr	r3, [sp, #32]
 80190a6:	4413      	add	r3, r2
 80190a8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80190aa:	9308      	str	r3, [sp, #32]
 80190ac:	3208      	adds	r2, #8
 80190ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80190b0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80190b2:	4599      	cmp	r9, r3
 80190b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80190b6:	f47f ae72 	bne.w	8018d9e <arm_radix8_butterfly_f32+0x28e>
 80190ba:	f8bd e048 	ldrh.w	lr, [sp, #72]	@ 0x48
 80190be:	46c8      	mov	r8, r9
 80190c0:	f8dd c074 	ldr.w	ip, [sp, #116]	@ 0x74
 80190c4:	e533      	b.n	8018b2e <arm_radix8_butterfly_f32+0x1e>
 80190c6:	b01f      	add	sp, #124	@ 0x7c
 80190c8:	ecbd 8b10 	vpop	{d8-d15}
 80190cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080190d0 <std>:
 80190d0:	2300      	movs	r3, #0
 80190d2:	b510      	push	{r4, lr}
 80190d4:	4604      	mov	r4, r0
 80190d6:	e9c0 3300 	strd	r3, r3, [r0]
 80190da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80190de:	6083      	str	r3, [r0, #8]
 80190e0:	8181      	strh	r1, [r0, #12]
 80190e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80190e4:	81c2      	strh	r2, [r0, #14]
 80190e6:	6183      	str	r3, [r0, #24]
 80190e8:	4619      	mov	r1, r3
 80190ea:	2208      	movs	r2, #8
 80190ec:	305c      	adds	r0, #92	@ 0x5c
 80190ee:	f000 fa49 	bl	8019584 <memset>
 80190f2:	4b0d      	ldr	r3, [pc, #52]	@ (8019128 <std+0x58>)
 80190f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80190f6:	4b0d      	ldr	r3, [pc, #52]	@ (801912c <std+0x5c>)
 80190f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80190fa:	4b0d      	ldr	r3, [pc, #52]	@ (8019130 <std+0x60>)
 80190fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80190fe:	4b0d      	ldr	r3, [pc, #52]	@ (8019134 <std+0x64>)
 8019100:	6323      	str	r3, [r4, #48]	@ 0x30
 8019102:	4b0d      	ldr	r3, [pc, #52]	@ (8019138 <std+0x68>)
 8019104:	6224      	str	r4, [r4, #32]
 8019106:	429c      	cmp	r4, r3
 8019108:	d006      	beq.n	8019118 <std+0x48>
 801910a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801910e:	4294      	cmp	r4, r2
 8019110:	d002      	beq.n	8019118 <std+0x48>
 8019112:	33d0      	adds	r3, #208	@ 0xd0
 8019114:	429c      	cmp	r4, r3
 8019116:	d105      	bne.n	8019124 <std+0x54>
 8019118:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801911c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019120:	f000 baa8 	b.w	8019674 <__retarget_lock_init_recursive>
 8019124:	bd10      	pop	{r4, pc}
 8019126:	bf00      	nop
 8019128:	080193a1 	.word	0x080193a1
 801912c:	080193c3 	.word	0x080193c3
 8019130:	080193fb 	.word	0x080193fb
 8019134:	0801941f 	.word	0x0801941f
 8019138:	24004924 	.word	0x24004924

0801913c <stdio_exit_handler>:
 801913c:	4a02      	ldr	r2, [pc, #8]	@ (8019148 <stdio_exit_handler+0xc>)
 801913e:	4903      	ldr	r1, [pc, #12]	@ (801914c <stdio_exit_handler+0x10>)
 8019140:	4803      	ldr	r0, [pc, #12]	@ (8019150 <stdio_exit_handler+0x14>)
 8019142:	f000 b869 	b.w	8019218 <_fwalk_sglue>
 8019146:	bf00      	nop
 8019148:	24000104 	.word	0x24000104
 801914c:	0801a1dd 	.word	0x0801a1dd
 8019150:	24000114 	.word	0x24000114

08019154 <cleanup_stdio>:
 8019154:	6841      	ldr	r1, [r0, #4]
 8019156:	4b0c      	ldr	r3, [pc, #48]	@ (8019188 <cleanup_stdio+0x34>)
 8019158:	4299      	cmp	r1, r3
 801915a:	b510      	push	{r4, lr}
 801915c:	4604      	mov	r4, r0
 801915e:	d001      	beq.n	8019164 <cleanup_stdio+0x10>
 8019160:	f001 f83c 	bl	801a1dc <_fflush_r>
 8019164:	68a1      	ldr	r1, [r4, #8]
 8019166:	4b09      	ldr	r3, [pc, #36]	@ (801918c <cleanup_stdio+0x38>)
 8019168:	4299      	cmp	r1, r3
 801916a:	d002      	beq.n	8019172 <cleanup_stdio+0x1e>
 801916c:	4620      	mov	r0, r4
 801916e:	f001 f835 	bl	801a1dc <_fflush_r>
 8019172:	68e1      	ldr	r1, [r4, #12]
 8019174:	4b06      	ldr	r3, [pc, #24]	@ (8019190 <cleanup_stdio+0x3c>)
 8019176:	4299      	cmp	r1, r3
 8019178:	d004      	beq.n	8019184 <cleanup_stdio+0x30>
 801917a:	4620      	mov	r0, r4
 801917c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019180:	f001 b82c 	b.w	801a1dc <_fflush_r>
 8019184:	bd10      	pop	{r4, pc}
 8019186:	bf00      	nop
 8019188:	24004924 	.word	0x24004924
 801918c:	2400498c 	.word	0x2400498c
 8019190:	240049f4 	.word	0x240049f4

08019194 <global_stdio_init.part.0>:
 8019194:	b510      	push	{r4, lr}
 8019196:	4b0b      	ldr	r3, [pc, #44]	@ (80191c4 <global_stdio_init.part.0+0x30>)
 8019198:	4c0b      	ldr	r4, [pc, #44]	@ (80191c8 <global_stdio_init.part.0+0x34>)
 801919a:	4a0c      	ldr	r2, [pc, #48]	@ (80191cc <global_stdio_init.part.0+0x38>)
 801919c:	601a      	str	r2, [r3, #0]
 801919e:	4620      	mov	r0, r4
 80191a0:	2200      	movs	r2, #0
 80191a2:	2104      	movs	r1, #4
 80191a4:	f7ff ff94 	bl	80190d0 <std>
 80191a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80191ac:	2201      	movs	r2, #1
 80191ae:	2109      	movs	r1, #9
 80191b0:	f7ff ff8e 	bl	80190d0 <std>
 80191b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80191b8:	2202      	movs	r2, #2
 80191ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80191be:	2112      	movs	r1, #18
 80191c0:	f7ff bf86 	b.w	80190d0 <std>
 80191c4:	24004a5c 	.word	0x24004a5c
 80191c8:	24004924 	.word	0x24004924
 80191cc:	0801913d 	.word	0x0801913d

080191d0 <__sfp_lock_acquire>:
 80191d0:	4801      	ldr	r0, [pc, #4]	@ (80191d8 <__sfp_lock_acquire+0x8>)
 80191d2:	f000 ba50 	b.w	8019676 <__retarget_lock_acquire_recursive>
 80191d6:	bf00      	nop
 80191d8:	24004a65 	.word	0x24004a65

080191dc <__sfp_lock_release>:
 80191dc:	4801      	ldr	r0, [pc, #4]	@ (80191e4 <__sfp_lock_release+0x8>)
 80191de:	f000 ba4b 	b.w	8019678 <__retarget_lock_release_recursive>
 80191e2:	bf00      	nop
 80191e4:	24004a65 	.word	0x24004a65

080191e8 <__sinit>:
 80191e8:	b510      	push	{r4, lr}
 80191ea:	4604      	mov	r4, r0
 80191ec:	f7ff fff0 	bl	80191d0 <__sfp_lock_acquire>
 80191f0:	6a23      	ldr	r3, [r4, #32]
 80191f2:	b11b      	cbz	r3, 80191fc <__sinit+0x14>
 80191f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80191f8:	f7ff bff0 	b.w	80191dc <__sfp_lock_release>
 80191fc:	4b04      	ldr	r3, [pc, #16]	@ (8019210 <__sinit+0x28>)
 80191fe:	6223      	str	r3, [r4, #32]
 8019200:	4b04      	ldr	r3, [pc, #16]	@ (8019214 <__sinit+0x2c>)
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	2b00      	cmp	r3, #0
 8019206:	d1f5      	bne.n	80191f4 <__sinit+0xc>
 8019208:	f7ff ffc4 	bl	8019194 <global_stdio_init.part.0>
 801920c:	e7f2      	b.n	80191f4 <__sinit+0xc>
 801920e:	bf00      	nop
 8019210:	08019155 	.word	0x08019155
 8019214:	24004a5c 	.word	0x24004a5c

08019218 <_fwalk_sglue>:
 8019218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801921c:	4607      	mov	r7, r0
 801921e:	4688      	mov	r8, r1
 8019220:	4614      	mov	r4, r2
 8019222:	2600      	movs	r6, #0
 8019224:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019228:	f1b9 0901 	subs.w	r9, r9, #1
 801922c:	d505      	bpl.n	801923a <_fwalk_sglue+0x22>
 801922e:	6824      	ldr	r4, [r4, #0]
 8019230:	2c00      	cmp	r4, #0
 8019232:	d1f7      	bne.n	8019224 <_fwalk_sglue+0xc>
 8019234:	4630      	mov	r0, r6
 8019236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801923a:	89ab      	ldrh	r3, [r5, #12]
 801923c:	2b01      	cmp	r3, #1
 801923e:	d907      	bls.n	8019250 <_fwalk_sglue+0x38>
 8019240:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019244:	3301      	adds	r3, #1
 8019246:	d003      	beq.n	8019250 <_fwalk_sglue+0x38>
 8019248:	4629      	mov	r1, r5
 801924a:	4638      	mov	r0, r7
 801924c:	47c0      	blx	r8
 801924e:	4306      	orrs	r6, r0
 8019250:	3568      	adds	r5, #104	@ 0x68
 8019252:	e7e9      	b.n	8019228 <_fwalk_sglue+0x10>

08019254 <iprintf>:
 8019254:	b40f      	push	{r0, r1, r2, r3}
 8019256:	b507      	push	{r0, r1, r2, lr}
 8019258:	4906      	ldr	r1, [pc, #24]	@ (8019274 <iprintf+0x20>)
 801925a:	ab04      	add	r3, sp, #16
 801925c:	6808      	ldr	r0, [r1, #0]
 801925e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019262:	6881      	ldr	r1, [r0, #8]
 8019264:	9301      	str	r3, [sp, #4]
 8019266:	f000 fc91 	bl	8019b8c <_vfiprintf_r>
 801926a:	b003      	add	sp, #12
 801926c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019270:	b004      	add	sp, #16
 8019272:	4770      	bx	lr
 8019274:	24000110 	.word	0x24000110

08019278 <_puts_r>:
 8019278:	6a03      	ldr	r3, [r0, #32]
 801927a:	b570      	push	{r4, r5, r6, lr}
 801927c:	6884      	ldr	r4, [r0, #8]
 801927e:	4605      	mov	r5, r0
 8019280:	460e      	mov	r6, r1
 8019282:	b90b      	cbnz	r3, 8019288 <_puts_r+0x10>
 8019284:	f7ff ffb0 	bl	80191e8 <__sinit>
 8019288:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801928a:	07db      	lsls	r3, r3, #31
 801928c:	d405      	bmi.n	801929a <_puts_r+0x22>
 801928e:	89a3      	ldrh	r3, [r4, #12]
 8019290:	0598      	lsls	r0, r3, #22
 8019292:	d402      	bmi.n	801929a <_puts_r+0x22>
 8019294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019296:	f000 f9ee 	bl	8019676 <__retarget_lock_acquire_recursive>
 801929a:	89a3      	ldrh	r3, [r4, #12]
 801929c:	0719      	lsls	r1, r3, #28
 801929e:	d502      	bpl.n	80192a6 <_puts_r+0x2e>
 80192a0:	6923      	ldr	r3, [r4, #16]
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d135      	bne.n	8019312 <_puts_r+0x9a>
 80192a6:	4621      	mov	r1, r4
 80192a8:	4628      	mov	r0, r5
 80192aa:	f000 f8fb 	bl	80194a4 <__swsetup_r>
 80192ae:	b380      	cbz	r0, 8019312 <_puts_r+0x9a>
 80192b0:	f04f 35ff 	mov.w	r5, #4294967295
 80192b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80192b6:	07da      	lsls	r2, r3, #31
 80192b8:	d405      	bmi.n	80192c6 <_puts_r+0x4e>
 80192ba:	89a3      	ldrh	r3, [r4, #12]
 80192bc:	059b      	lsls	r3, r3, #22
 80192be:	d402      	bmi.n	80192c6 <_puts_r+0x4e>
 80192c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80192c2:	f000 f9d9 	bl	8019678 <__retarget_lock_release_recursive>
 80192c6:	4628      	mov	r0, r5
 80192c8:	bd70      	pop	{r4, r5, r6, pc}
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	da04      	bge.n	80192d8 <_puts_r+0x60>
 80192ce:	69a2      	ldr	r2, [r4, #24]
 80192d0:	429a      	cmp	r2, r3
 80192d2:	dc17      	bgt.n	8019304 <_puts_r+0x8c>
 80192d4:	290a      	cmp	r1, #10
 80192d6:	d015      	beq.n	8019304 <_puts_r+0x8c>
 80192d8:	6823      	ldr	r3, [r4, #0]
 80192da:	1c5a      	adds	r2, r3, #1
 80192dc:	6022      	str	r2, [r4, #0]
 80192de:	7019      	strb	r1, [r3, #0]
 80192e0:	68a3      	ldr	r3, [r4, #8]
 80192e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80192e6:	3b01      	subs	r3, #1
 80192e8:	60a3      	str	r3, [r4, #8]
 80192ea:	2900      	cmp	r1, #0
 80192ec:	d1ed      	bne.n	80192ca <_puts_r+0x52>
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	da11      	bge.n	8019316 <_puts_r+0x9e>
 80192f2:	4622      	mov	r2, r4
 80192f4:	210a      	movs	r1, #10
 80192f6:	4628      	mov	r0, r5
 80192f8:	f000 f895 	bl	8019426 <__swbuf_r>
 80192fc:	3001      	adds	r0, #1
 80192fe:	d0d7      	beq.n	80192b0 <_puts_r+0x38>
 8019300:	250a      	movs	r5, #10
 8019302:	e7d7      	b.n	80192b4 <_puts_r+0x3c>
 8019304:	4622      	mov	r2, r4
 8019306:	4628      	mov	r0, r5
 8019308:	f000 f88d 	bl	8019426 <__swbuf_r>
 801930c:	3001      	adds	r0, #1
 801930e:	d1e7      	bne.n	80192e0 <_puts_r+0x68>
 8019310:	e7ce      	b.n	80192b0 <_puts_r+0x38>
 8019312:	3e01      	subs	r6, #1
 8019314:	e7e4      	b.n	80192e0 <_puts_r+0x68>
 8019316:	6823      	ldr	r3, [r4, #0]
 8019318:	1c5a      	adds	r2, r3, #1
 801931a:	6022      	str	r2, [r4, #0]
 801931c:	220a      	movs	r2, #10
 801931e:	701a      	strb	r2, [r3, #0]
 8019320:	e7ee      	b.n	8019300 <_puts_r+0x88>
	...

08019324 <puts>:
 8019324:	4b02      	ldr	r3, [pc, #8]	@ (8019330 <puts+0xc>)
 8019326:	4601      	mov	r1, r0
 8019328:	6818      	ldr	r0, [r3, #0]
 801932a:	f7ff bfa5 	b.w	8019278 <_puts_r>
 801932e:	bf00      	nop
 8019330:	24000110 	.word	0x24000110

08019334 <sniprintf>:
 8019334:	b40c      	push	{r2, r3}
 8019336:	b530      	push	{r4, r5, lr}
 8019338:	4b18      	ldr	r3, [pc, #96]	@ (801939c <sniprintf+0x68>)
 801933a:	1e0c      	subs	r4, r1, #0
 801933c:	681d      	ldr	r5, [r3, #0]
 801933e:	b09d      	sub	sp, #116	@ 0x74
 8019340:	da08      	bge.n	8019354 <sniprintf+0x20>
 8019342:	238b      	movs	r3, #139	@ 0x8b
 8019344:	602b      	str	r3, [r5, #0]
 8019346:	f04f 30ff 	mov.w	r0, #4294967295
 801934a:	b01d      	add	sp, #116	@ 0x74
 801934c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019350:	b002      	add	sp, #8
 8019352:	4770      	bx	lr
 8019354:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019358:	f8ad 3014 	strh.w	r3, [sp, #20]
 801935c:	f04f 0300 	mov.w	r3, #0
 8019360:	931b      	str	r3, [sp, #108]	@ 0x6c
 8019362:	bf14      	ite	ne
 8019364:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019368:	4623      	moveq	r3, r4
 801936a:	9304      	str	r3, [sp, #16]
 801936c:	9307      	str	r3, [sp, #28]
 801936e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019372:	9002      	str	r0, [sp, #8]
 8019374:	9006      	str	r0, [sp, #24]
 8019376:	f8ad 3016 	strh.w	r3, [sp, #22]
 801937a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801937c:	ab21      	add	r3, sp, #132	@ 0x84
 801937e:	a902      	add	r1, sp, #8
 8019380:	4628      	mov	r0, r5
 8019382:	9301      	str	r3, [sp, #4]
 8019384:	f000 fadc 	bl	8019940 <_svfiprintf_r>
 8019388:	1c43      	adds	r3, r0, #1
 801938a:	bfbc      	itt	lt
 801938c:	238b      	movlt	r3, #139	@ 0x8b
 801938e:	602b      	strlt	r3, [r5, #0]
 8019390:	2c00      	cmp	r4, #0
 8019392:	d0da      	beq.n	801934a <sniprintf+0x16>
 8019394:	9b02      	ldr	r3, [sp, #8]
 8019396:	2200      	movs	r2, #0
 8019398:	701a      	strb	r2, [r3, #0]
 801939a:	e7d6      	b.n	801934a <sniprintf+0x16>
 801939c:	24000110 	.word	0x24000110

080193a0 <__sread>:
 80193a0:	b510      	push	{r4, lr}
 80193a2:	460c      	mov	r4, r1
 80193a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80193a8:	f000 f916 	bl	80195d8 <_read_r>
 80193ac:	2800      	cmp	r0, #0
 80193ae:	bfab      	itete	ge
 80193b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80193b2:	89a3      	ldrhlt	r3, [r4, #12]
 80193b4:	181b      	addge	r3, r3, r0
 80193b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80193ba:	bfac      	ite	ge
 80193bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80193be:	81a3      	strhlt	r3, [r4, #12]
 80193c0:	bd10      	pop	{r4, pc}

080193c2 <__swrite>:
 80193c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193c6:	461f      	mov	r7, r3
 80193c8:	898b      	ldrh	r3, [r1, #12]
 80193ca:	05db      	lsls	r3, r3, #23
 80193cc:	4605      	mov	r5, r0
 80193ce:	460c      	mov	r4, r1
 80193d0:	4616      	mov	r6, r2
 80193d2:	d505      	bpl.n	80193e0 <__swrite+0x1e>
 80193d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80193d8:	2302      	movs	r3, #2
 80193da:	2200      	movs	r2, #0
 80193dc:	f000 f8ea 	bl	80195b4 <_lseek_r>
 80193e0:	89a3      	ldrh	r3, [r4, #12]
 80193e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80193e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80193ea:	81a3      	strh	r3, [r4, #12]
 80193ec:	4632      	mov	r2, r6
 80193ee:	463b      	mov	r3, r7
 80193f0:	4628      	mov	r0, r5
 80193f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80193f6:	f000 b901 	b.w	80195fc <_write_r>

080193fa <__sseek>:
 80193fa:	b510      	push	{r4, lr}
 80193fc:	460c      	mov	r4, r1
 80193fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019402:	f000 f8d7 	bl	80195b4 <_lseek_r>
 8019406:	1c43      	adds	r3, r0, #1
 8019408:	89a3      	ldrh	r3, [r4, #12]
 801940a:	bf15      	itete	ne
 801940c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801940e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019412:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019416:	81a3      	strheq	r3, [r4, #12]
 8019418:	bf18      	it	ne
 801941a:	81a3      	strhne	r3, [r4, #12]
 801941c:	bd10      	pop	{r4, pc}

0801941e <__sclose>:
 801941e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019422:	f000 b8b7 	b.w	8019594 <_close_r>

08019426 <__swbuf_r>:
 8019426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019428:	460e      	mov	r6, r1
 801942a:	4614      	mov	r4, r2
 801942c:	4605      	mov	r5, r0
 801942e:	b118      	cbz	r0, 8019438 <__swbuf_r+0x12>
 8019430:	6a03      	ldr	r3, [r0, #32]
 8019432:	b90b      	cbnz	r3, 8019438 <__swbuf_r+0x12>
 8019434:	f7ff fed8 	bl	80191e8 <__sinit>
 8019438:	69a3      	ldr	r3, [r4, #24]
 801943a:	60a3      	str	r3, [r4, #8]
 801943c:	89a3      	ldrh	r3, [r4, #12]
 801943e:	071a      	lsls	r2, r3, #28
 8019440:	d501      	bpl.n	8019446 <__swbuf_r+0x20>
 8019442:	6923      	ldr	r3, [r4, #16]
 8019444:	b943      	cbnz	r3, 8019458 <__swbuf_r+0x32>
 8019446:	4621      	mov	r1, r4
 8019448:	4628      	mov	r0, r5
 801944a:	f000 f82b 	bl	80194a4 <__swsetup_r>
 801944e:	b118      	cbz	r0, 8019458 <__swbuf_r+0x32>
 8019450:	f04f 37ff 	mov.w	r7, #4294967295
 8019454:	4638      	mov	r0, r7
 8019456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019458:	6823      	ldr	r3, [r4, #0]
 801945a:	6922      	ldr	r2, [r4, #16]
 801945c:	1a98      	subs	r0, r3, r2
 801945e:	6963      	ldr	r3, [r4, #20]
 8019460:	b2f6      	uxtb	r6, r6
 8019462:	4283      	cmp	r3, r0
 8019464:	4637      	mov	r7, r6
 8019466:	dc05      	bgt.n	8019474 <__swbuf_r+0x4e>
 8019468:	4621      	mov	r1, r4
 801946a:	4628      	mov	r0, r5
 801946c:	f000 feb6 	bl	801a1dc <_fflush_r>
 8019470:	2800      	cmp	r0, #0
 8019472:	d1ed      	bne.n	8019450 <__swbuf_r+0x2a>
 8019474:	68a3      	ldr	r3, [r4, #8]
 8019476:	3b01      	subs	r3, #1
 8019478:	60a3      	str	r3, [r4, #8]
 801947a:	6823      	ldr	r3, [r4, #0]
 801947c:	1c5a      	adds	r2, r3, #1
 801947e:	6022      	str	r2, [r4, #0]
 8019480:	701e      	strb	r6, [r3, #0]
 8019482:	6962      	ldr	r2, [r4, #20]
 8019484:	1c43      	adds	r3, r0, #1
 8019486:	429a      	cmp	r2, r3
 8019488:	d004      	beq.n	8019494 <__swbuf_r+0x6e>
 801948a:	89a3      	ldrh	r3, [r4, #12]
 801948c:	07db      	lsls	r3, r3, #31
 801948e:	d5e1      	bpl.n	8019454 <__swbuf_r+0x2e>
 8019490:	2e0a      	cmp	r6, #10
 8019492:	d1df      	bne.n	8019454 <__swbuf_r+0x2e>
 8019494:	4621      	mov	r1, r4
 8019496:	4628      	mov	r0, r5
 8019498:	f000 fea0 	bl	801a1dc <_fflush_r>
 801949c:	2800      	cmp	r0, #0
 801949e:	d0d9      	beq.n	8019454 <__swbuf_r+0x2e>
 80194a0:	e7d6      	b.n	8019450 <__swbuf_r+0x2a>
	...

080194a4 <__swsetup_r>:
 80194a4:	b538      	push	{r3, r4, r5, lr}
 80194a6:	4b29      	ldr	r3, [pc, #164]	@ (801954c <__swsetup_r+0xa8>)
 80194a8:	4605      	mov	r5, r0
 80194aa:	6818      	ldr	r0, [r3, #0]
 80194ac:	460c      	mov	r4, r1
 80194ae:	b118      	cbz	r0, 80194b8 <__swsetup_r+0x14>
 80194b0:	6a03      	ldr	r3, [r0, #32]
 80194b2:	b90b      	cbnz	r3, 80194b8 <__swsetup_r+0x14>
 80194b4:	f7ff fe98 	bl	80191e8 <__sinit>
 80194b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80194bc:	0719      	lsls	r1, r3, #28
 80194be:	d422      	bmi.n	8019506 <__swsetup_r+0x62>
 80194c0:	06da      	lsls	r2, r3, #27
 80194c2:	d407      	bmi.n	80194d4 <__swsetup_r+0x30>
 80194c4:	2209      	movs	r2, #9
 80194c6:	602a      	str	r2, [r5, #0]
 80194c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80194cc:	81a3      	strh	r3, [r4, #12]
 80194ce:	f04f 30ff 	mov.w	r0, #4294967295
 80194d2:	e033      	b.n	801953c <__swsetup_r+0x98>
 80194d4:	0758      	lsls	r0, r3, #29
 80194d6:	d512      	bpl.n	80194fe <__swsetup_r+0x5a>
 80194d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80194da:	b141      	cbz	r1, 80194ee <__swsetup_r+0x4a>
 80194dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80194e0:	4299      	cmp	r1, r3
 80194e2:	d002      	beq.n	80194ea <__swsetup_r+0x46>
 80194e4:	4628      	mov	r0, r5
 80194e6:	f000 f8d7 	bl	8019698 <_free_r>
 80194ea:	2300      	movs	r3, #0
 80194ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80194ee:	89a3      	ldrh	r3, [r4, #12]
 80194f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80194f4:	81a3      	strh	r3, [r4, #12]
 80194f6:	2300      	movs	r3, #0
 80194f8:	6063      	str	r3, [r4, #4]
 80194fa:	6923      	ldr	r3, [r4, #16]
 80194fc:	6023      	str	r3, [r4, #0]
 80194fe:	89a3      	ldrh	r3, [r4, #12]
 8019500:	f043 0308 	orr.w	r3, r3, #8
 8019504:	81a3      	strh	r3, [r4, #12]
 8019506:	6923      	ldr	r3, [r4, #16]
 8019508:	b94b      	cbnz	r3, 801951e <__swsetup_r+0x7a>
 801950a:	89a3      	ldrh	r3, [r4, #12]
 801950c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019514:	d003      	beq.n	801951e <__swsetup_r+0x7a>
 8019516:	4621      	mov	r1, r4
 8019518:	4628      	mov	r0, r5
 801951a:	f000 fead 	bl	801a278 <__smakebuf_r>
 801951e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019522:	f013 0201 	ands.w	r2, r3, #1
 8019526:	d00a      	beq.n	801953e <__swsetup_r+0x9a>
 8019528:	2200      	movs	r2, #0
 801952a:	60a2      	str	r2, [r4, #8]
 801952c:	6962      	ldr	r2, [r4, #20]
 801952e:	4252      	negs	r2, r2
 8019530:	61a2      	str	r2, [r4, #24]
 8019532:	6922      	ldr	r2, [r4, #16]
 8019534:	b942      	cbnz	r2, 8019548 <__swsetup_r+0xa4>
 8019536:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801953a:	d1c5      	bne.n	80194c8 <__swsetup_r+0x24>
 801953c:	bd38      	pop	{r3, r4, r5, pc}
 801953e:	0799      	lsls	r1, r3, #30
 8019540:	bf58      	it	pl
 8019542:	6962      	ldrpl	r2, [r4, #20]
 8019544:	60a2      	str	r2, [r4, #8]
 8019546:	e7f4      	b.n	8019532 <__swsetup_r+0x8e>
 8019548:	2000      	movs	r0, #0
 801954a:	e7f7      	b.n	801953c <__swsetup_r+0x98>
 801954c:	24000110 	.word	0x24000110

08019550 <memmove>:
 8019550:	4288      	cmp	r0, r1
 8019552:	b510      	push	{r4, lr}
 8019554:	eb01 0402 	add.w	r4, r1, r2
 8019558:	d902      	bls.n	8019560 <memmove+0x10>
 801955a:	4284      	cmp	r4, r0
 801955c:	4623      	mov	r3, r4
 801955e:	d807      	bhi.n	8019570 <memmove+0x20>
 8019560:	1e43      	subs	r3, r0, #1
 8019562:	42a1      	cmp	r1, r4
 8019564:	d008      	beq.n	8019578 <memmove+0x28>
 8019566:	f811 2b01 	ldrb.w	r2, [r1], #1
 801956a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801956e:	e7f8      	b.n	8019562 <memmove+0x12>
 8019570:	4402      	add	r2, r0
 8019572:	4601      	mov	r1, r0
 8019574:	428a      	cmp	r2, r1
 8019576:	d100      	bne.n	801957a <memmove+0x2a>
 8019578:	bd10      	pop	{r4, pc}
 801957a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801957e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019582:	e7f7      	b.n	8019574 <memmove+0x24>

08019584 <memset>:
 8019584:	4402      	add	r2, r0
 8019586:	4603      	mov	r3, r0
 8019588:	4293      	cmp	r3, r2
 801958a:	d100      	bne.n	801958e <memset+0xa>
 801958c:	4770      	bx	lr
 801958e:	f803 1b01 	strb.w	r1, [r3], #1
 8019592:	e7f9      	b.n	8019588 <memset+0x4>

08019594 <_close_r>:
 8019594:	b538      	push	{r3, r4, r5, lr}
 8019596:	4d06      	ldr	r5, [pc, #24]	@ (80195b0 <_close_r+0x1c>)
 8019598:	2300      	movs	r3, #0
 801959a:	4604      	mov	r4, r0
 801959c:	4608      	mov	r0, r1
 801959e:	602b      	str	r3, [r5, #0]
 80195a0:	f7e8 f8cb 	bl	800173a <_close>
 80195a4:	1c43      	adds	r3, r0, #1
 80195a6:	d102      	bne.n	80195ae <_close_r+0x1a>
 80195a8:	682b      	ldr	r3, [r5, #0]
 80195aa:	b103      	cbz	r3, 80195ae <_close_r+0x1a>
 80195ac:	6023      	str	r3, [r4, #0]
 80195ae:	bd38      	pop	{r3, r4, r5, pc}
 80195b0:	24004a60 	.word	0x24004a60

080195b4 <_lseek_r>:
 80195b4:	b538      	push	{r3, r4, r5, lr}
 80195b6:	4d07      	ldr	r5, [pc, #28]	@ (80195d4 <_lseek_r+0x20>)
 80195b8:	4604      	mov	r4, r0
 80195ba:	4608      	mov	r0, r1
 80195bc:	4611      	mov	r1, r2
 80195be:	2200      	movs	r2, #0
 80195c0:	602a      	str	r2, [r5, #0]
 80195c2:	461a      	mov	r2, r3
 80195c4:	f7e8 f8e0 	bl	8001788 <_lseek>
 80195c8:	1c43      	adds	r3, r0, #1
 80195ca:	d102      	bne.n	80195d2 <_lseek_r+0x1e>
 80195cc:	682b      	ldr	r3, [r5, #0]
 80195ce:	b103      	cbz	r3, 80195d2 <_lseek_r+0x1e>
 80195d0:	6023      	str	r3, [r4, #0]
 80195d2:	bd38      	pop	{r3, r4, r5, pc}
 80195d4:	24004a60 	.word	0x24004a60

080195d8 <_read_r>:
 80195d8:	b538      	push	{r3, r4, r5, lr}
 80195da:	4d07      	ldr	r5, [pc, #28]	@ (80195f8 <_read_r+0x20>)
 80195dc:	4604      	mov	r4, r0
 80195de:	4608      	mov	r0, r1
 80195e0:	4611      	mov	r1, r2
 80195e2:	2200      	movs	r2, #0
 80195e4:	602a      	str	r2, [r5, #0]
 80195e6:	461a      	mov	r2, r3
 80195e8:	f7e8 f88a 	bl	8001700 <_read>
 80195ec:	1c43      	adds	r3, r0, #1
 80195ee:	d102      	bne.n	80195f6 <_read_r+0x1e>
 80195f0:	682b      	ldr	r3, [r5, #0]
 80195f2:	b103      	cbz	r3, 80195f6 <_read_r+0x1e>
 80195f4:	6023      	str	r3, [r4, #0]
 80195f6:	bd38      	pop	{r3, r4, r5, pc}
 80195f8:	24004a60 	.word	0x24004a60

080195fc <_write_r>:
 80195fc:	b538      	push	{r3, r4, r5, lr}
 80195fe:	4d07      	ldr	r5, [pc, #28]	@ (801961c <_write_r+0x20>)
 8019600:	4604      	mov	r4, r0
 8019602:	4608      	mov	r0, r1
 8019604:	4611      	mov	r1, r2
 8019606:	2200      	movs	r2, #0
 8019608:	602a      	str	r2, [r5, #0]
 801960a:	461a      	mov	r2, r3
 801960c:	f7e8 fda4 	bl	8002158 <_write>
 8019610:	1c43      	adds	r3, r0, #1
 8019612:	d102      	bne.n	801961a <_write_r+0x1e>
 8019614:	682b      	ldr	r3, [r5, #0]
 8019616:	b103      	cbz	r3, 801961a <_write_r+0x1e>
 8019618:	6023      	str	r3, [r4, #0]
 801961a:	bd38      	pop	{r3, r4, r5, pc}
 801961c:	24004a60 	.word	0x24004a60

08019620 <__errno>:
 8019620:	4b01      	ldr	r3, [pc, #4]	@ (8019628 <__errno+0x8>)
 8019622:	6818      	ldr	r0, [r3, #0]
 8019624:	4770      	bx	lr
 8019626:	bf00      	nop
 8019628:	24000110 	.word	0x24000110

0801962c <__libc_init_array>:
 801962c:	b570      	push	{r4, r5, r6, lr}
 801962e:	4d0d      	ldr	r5, [pc, #52]	@ (8019664 <__libc_init_array+0x38>)
 8019630:	4c0d      	ldr	r4, [pc, #52]	@ (8019668 <__libc_init_array+0x3c>)
 8019632:	1b64      	subs	r4, r4, r5
 8019634:	10a4      	asrs	r4, r4, #2
 8019636:	2600      	movs	r6, #0
 8019638:	42a6      	cmp	r6, r4
 801963a:	d109      	bne.n	8019650 <__libc_init_array+0x24>
 801963c:	4d0b      	ldr	r5, [pc, #44]	@ (801966c <__libc_init_array+0x40>)
 801963e:	4c0c      	ldr	r4, [pc, #48]	@ (8019670 <__libc_init_array+0x44>)
 8019640:	f000 febe 	bl	801a3c0 <_init>
 8019644:	1b64      	subs	r4, r4, r5
 8019646:	10a4      	asrs	r4, r4, #2
 8019648:	2600      	movs	r6, #0
 801964a:	42a6      	cmp	r6, r4
 801964c:	d105      	bne.n	801965a <__libc_init_array+0x2e>
 801964e:	bd70      	pop	{r4, r5, r6, pc}
 8019650:	f855 3b04 	ldr.w	r3, [r5], #4
 8019654:	4798      	blx	r3
 8019656:	3601      	adds	r6, #1
 8019658:	e7ee      	b.n	8019638 <__libc_init_array+0xc>
 801965a:	f855 3b04 	ldr.w	r3, [r5], #4
 801965e:	4798      	blx	r3
 8019660:	3601      	adds	r6, #1
 8019662:	e7f2      	b.n	801964a <__libc_init_array+0x1e>
 8019664:	0802e18c 	.word	0x0802e18c
 8019668:	0802e18c 	.word	0x0802e18c
 801966c:	0802e18c 	.word	0x0802e18c
 8019670:	0802e194 	.word	0x0802e194

08019674 <__retarget_lock_init_recursive>:
 8019674:	4770      	bx	lr

08019676 <__retarget_lock_acquire_recursive>:
 8019676:	4770      	bx	lr

08019678 <__retarget_lock_release_recursive>:
 8019678:	4770      	bx	lr

0801967a <memcpy>:
 801967a:	440a      	add	r2, r1
 801967c:	4291      	cmp	r1, r2
 801967e:	f100 33ff 	add.w	r3, r0, #4294967295
 8019682:	d100      	bne.n	8019686 <memcpy+0xc>
 8019684:	4770      	bx	lr
 8019686:	b510      	push	{r4, lr}
 8019688:	f811 4b01 	ldrb.w	r4, [r1], #1
 801968c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019690:	4291      	cmp	r1, r2
 8019692:	d1f9      	bne.n	8019688 <memcpy+0xe>
 8019694:	bd10      	pop	{r4, pc}
	...

08019698 <_free_r>:
 8019698:	b538      	push	{r3, r4, r5, lr}
 801969a:	4605      	mov	r5, r0
 801969c:	2900      	cmp	r1, #0
 801969e:	d041      	beq.n	8019724 <_free_r+0x8c>
 80196a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80196a4:	1f0c      	subs	r4, r1, #4
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	bfb8      	it	lt
 80196aa:	18e4      	addlt	r4, r4, r3
 80196ac:	f000 f8e0 	bl	8019870 <__malloc_lock>
 80196b0:	4a1d      	ldr	r2, [pc, #116]	@ (8019728 <_free_r+0x90>)
 80196b2:	6813      	ldr	r3, [r2, #0]
 80196b4:	b933      	cbnz	r3, 80196c4 <_free_r+0x2c>
 80196b6:	6063      	str	r3, [r4, #4]
 80196b8:	6014      	str	r4, [r2, #0]
 80196ba:	4628      	mov	r0, r5
 80196bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80196c0:	f000 b8dc 	b.w	801987c <__malloc_unlock>
 80196c4:	42a3      	cmp	r3, r4
 80196c6:	d908      	bls.n	80196da <_free_r+0x42>
 80196c8:	6820      	ldr	r0, [r4, #0]
 80196ca:	1821      	adds	r1, r4, r0
 80196cc:	428b      	cmp	r3, r1
 80196ce:	bf01      	itttt	eq
 80196d0:	6819      	ldreq	r1, [r3, #0]
 80196d2:	685b      	ldreq	r3, [r3, #4]
 80196d4:	1809      	addeq	r1, r1, r0
 80196d6:	6021      	streq	r1, [r4, #0]
 80196d8:	e7ed      	b.n	80196b6 <_free_r+0x1e>
 80196da:	461a      	mov	r2, r3
 80196dc:	685b      	ldr	r3, [r3, #4]
 80196de:	b10b      	cbz	r3, 80196e4 <_free_r+0x4c>
 80196e0:	42a3      	cmp	r3, r4
 80196e2:	d9fa      	bls.n	80196da <_free_r+0x42>
 80196e4:	6811      	ldr	r1, [r2, #0]
 80196e6:	1850      	adds	r0, r2, r1
 80196e8:	42a0      	cmp	r0, r4
 80196ea:	d10b      	bne.n	8019704 <_free_r+0x6c>
 80196ec:	6820      	ldr	r0, [r4, #0]
 80196ee:	4401      	add	r1, r0
 80196f0:	1850      	adds	r0, r2, r1
 80196f2:	4283      	cmp	r3, r0
 80196f4:	6011      	str	r1, [r2, #0]
 80196f6:	d1e0      	bne.n	80196ba <_free_r+0x22>
 80196f8:	6818      	ldr	r0, [r3, #0]
 80196fa:	685b      	ldr	r3, [r3, #4]
 80196fc:	6053      	str	r3, [r2, #4]
 80196fe:	4408      	add	r0, r1
 8019700:	6010      	str	r0, [r2, #0]
 8019702:	e7da      	b.n	80196ba <_free_r+0x22>
 8019704:	d902      	bls.n	801970c <_free_r+0x74>
 8019706:	230c      	movs	r3, #12
 8019708:	602b      	str	r3, [r5, #0]
 801970a:	e7d6      	b.n	80196ba <_free_r+0x22>
 801970c:	6820      	ldr	r0, [r4, #0]
 801970e:	1821      	adds	r1, r4, r0
 8019710:	428b      	cmp	r3, r1
 8019712:	bf04      	itt	eq
 8019714:	6819      	ldreq	r1, [r3, #0]
 8019716:	685b      	ldreq	r3, [r3, #4]
 8019718:	6063      	str	r3, [r4, #4]
 801971a:	bf04      	itt	eq
 801971c:	1809      	addeq	r1, r1, r0
 801971e:	6021      	streq	r1, [r4, #0]
 8019720:	6054      	str	r4, [r2, #4]
 8019722:	e7ca      	b.n	80196ba <_free_r+0x22>
 8019724:	bd38      	pop	{r3, r4, r5, pc}
 8019726:	bf00      	nop
 8019728:	24004a6c 	.word	0x24004a6c

0801972c <sbrk_aligned>:
 801972c:	b570      	push	{r4, r5, r6, lr}
 801972e:	4e0f      	ldr	r6, [pc, #60]	@ (801976c <sbrk_aligned+0x40>)
 8019730:	460c      	mov	r4, r1
 8019732:	6831      	ldr	r1, [r6, #0]
 8019734:	4605      	mov	r5, r0
 8019736:	b911      	cbnz	r1, 801973e <sbrk_aligned+0x12>
 8019738:	f000 fdfc 	bl	801a334 <_sbrk_r>
 801973c:	6030      	str	r0, [r6, #0]
 801973e:	4621      	mov	r1, r4
 8019740:	4628      	mov	r0, r5
 8019742:	f000 fdf7 	bl	801a334 <_sbrk_r>
 8019746:	1c43      	adds	r3, r0, #1
 8019748:	d103      	bne.n	8019752 <sbrk_aligned+0x26>
 801974a:	f04f 34ff 	mov.w	r4, #4294967295
 801974e:	4620      	mov	r0, r4
 8019750:	bd70      	pop	{r4, r5, r6, pc}
 8019752:	1cc4      	adds	r4, r0, #3
 8019754:	f024 0403 	bic.w	r4, r4, #3
 8019758:	42a0      	cmp	r0, r4
 801975a:	d0f8      	beq.n	801974e <sbrk_aligned+0x22>
 801975c:	1a21      	subs	r1, r4, r0
 801975e:	4628      	mov	r0, r5
 8019760:	f000 fde8 	bl	801a334 <_sbrk_r>
 8019764:	3001      	adds	r0, #1
 8019766:	d1f2      	bne.n	801974e <sbrk_aligned+0x22>
 8019768:	e7ef      	b.n	801974a <sbrk_aligned+0x1e>
 801976a:	bf00      	nop
 801976c:	24004a68 	.word	0x24004a68

08019770 <_malloc_r>:
 8019770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019774:	1ccd      	adds	r5, r1, #3
 8019776:	f025 0503 	bic.w	r5, r5, #3
 801977a:	3508      	adds	r5, #8
 801977c:	2d0c      	cmp	r5, #12
 801977e:	bf38      	it	cc
 8019780:	250c      	movcc	r5, #12
 8019782:	2d00      	cmp	r5, #0
 8019784:	4606      	mov	r6, r0
 8019786:	db01      	blt.n	801978c <_malloc_r+0x1c>
 8019788:	42a9      	cmp	r1, r5
 801978a:	d904      	bls.n	8019796 <_malloc_r+0x26>
 801978c:	230c      	movs	r3, #12
 801978e:	6033      	str	r3, [r6, #0]
 8019790:	2000      	movs	r0, #0
 8019792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019796:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801986c <_malloc_r+0xfc>
 801979a:	f000 f869 	bl	8019870 <__malloc_lock>
 801979e:	f8d8 3000 	ldr.w	r3, [r8]
 80197a2:	461c      	mov	r4, r3
 80197a4:	bb44      	cbnz	r4, 80197f8 <_malloc_r+0x88>
 80197a6:	4629      	mov	r1, r5
 80197a8:	4630      	mov	r0, r6
 80197aa:	f7ff ffbf 	bl	801972c <sbrk_aligned>
 80197ae:	1c43      	adds	r3, r0, #1
 80197b0:	4604      	mov	r4, r0
 80197b2:	d158      	bne.n	8019866 <_malloc_r+0xf6>
 80197b4:	f8d8 4000 	ldr.w	r4, [r8]
 80197b8:	4627      	mov	r7, r4
 80197ba:	2f00      	cmp	r7, #0
 80197bc:	d143      	bne.n	8019846 <_malloc_r+0xd6>
 80197be:	2c00      	cmp	r4, #0
 80197c0:	d04b      	beq.n	801985a <_malloc_r+0xea>
 80197c2:	6823      	ldr	r3, [r4, #0]
 80197c4:	4639      	mov	r1, r7
 80197c6:	4630      	mov	r0, r6
 80197c8:	eb04 0903 	add.w	r9, r4, r3
 80197cc:	f000 fdb2 	bl	801a334 <_sbrk_r>
 80197d0:	4581      	cmp	r9, r0
 80197d2:	d142      	bne.n	801985a <_malloc_r+0xea>
 80197d4:	6821      	ldr	r1, [r4, #0]
 80197d6:	1a6d      	subs	r5, r5, r1
 80197d8:	4629      	mov	r1, r5
 80197da:	4630      	mov	r0, r6
 80197dc:	f7ff ffa6 	bl	801972c <sbrk_aligned>
 80197e0:	3001      	adds	r0, #1
 80197e2:	d03a      	beq.n	801985a <_malloc_r+0xea>
 80197e4:	6823      	ldr	r3, [r4, #0]
 80197e6:	442b      	add	r3, r5
 80197e8:	6023      	str	r3, [r4, #0]
 80197ea:	f8d8 3000 	ldr.w	r3, [r8]
 80197ee:	685a      	ldr	r2, [r3, #4]
 80197f0:	bb62      	cbnz	r2, 801984c <_malloc_r+0xdc>
 80197f2:	f8c8 7000 	str.w	r7, [r8]
 80197f6:	e00f      	b.n	8019818 <_malloc_r+0xa8>
 80197f8:	6822      	ldr	r2, [r4, #0]
 80197fa:	1b52      	subs	r2, r2, r5
 80197fc:	d420      	bmi.n	8019840 <_malloc_r+0xd0>
 80197fe:	2a0b      	cmp	r2, #11
 8019800:	d917      	bls.n	8019832 <_malloc_r+0xc2>
 8019802:	1961      	adds	r1, r4, r5
 8019804:	42a3      	cmp	r3, r4
 8019806:	6025      	str	r5, [r4, #0]
 8019808:	bf18      	it	ne
 801980a:	6059      	strne	r1, [r3, #4]
 801980c:	6863      	ldr	r3, [r4, #4]
 801980e:	bf08      	it	eq
 8019810:	f8c8 1000 	streq.w	r1, [r8]
 8019814:	5162      	str	r2, [r4, r5]
 8019816:	604b      	str	r3, [r1, #4]
 8019818:	4630      	mov	r0, r6
 801981a:	f000 f82f 	bl	801987c <__malloc_unlock>
 801981e:	f104 000b 	add.w	r0, r4, #11
 8019822:	1d23      	adds	r3, r4, #4
 8019824:	f020 0007 	bic.w	r0, r0, #7
 8019828:	1ac2      	subs	r2, r0, r3
 801982a:	bf1c      	itt	ne
 801982c:	1a1b      	subne	r3, r3, r0
 801982e:	50a3      	strne	r3, [r4, r2]
 8019830:	e7af      	b.n	8019792 <_malloc_r+0x22>
 8019832:	6862      	ldr	r2, [r4, #4]
 8019834:	42a3      	cmp	r3, r4
 8019836:	bf0c      	ite	eq
 8019838:	f8c8 2000 	streq.w	r2, [r8]
 801983c:	605a      	strne	r2, [r3, #4]
 801983e:	e7eb      	b.n	8019818 <_malloc_r+0xa8>
 8019840:	4623      	mov	r3, r4
 8019842:	6864      	ldr	r4, [r4, #4]
 8019844:	e7ae      	b.n	80197a4 <_malloc_r+0x34>
 8019846:	463c      	mov	r4, r7
 8019848:	687f      	ldr	r7, [r7, #4]
 801984a:	e7b6      	b.n	80197ba <_malloc_r+0x4a>
 801984c:	461a      	mov	r2, r3
 801984e:	685b      	ldr	r3, [r3, #4]
 8019850:	42a3      	cmp	r3, r4
 8019852:	d1fb      	bne.n	801984c <_malloc_r+0xdc>
 8019854:	2300      	movs	r3, #0
 8019856:	6053      	str	r3, [r2, #4]
 8019858:	e7de      	b.n	8019818 <_malloc_r+0xa8>
 801985a:	230c      	movs	r3, #12
 801985c:	6033      	str	r3, [r6, #0]
 801985e:	4630      	mov	r0, r6
 8019860:	f000 f80c 	bl	801987c <__malloc_unlock>
 8019864:	e794      	b.n	8019790 <_malloc_r+0x20>
 8019866:	6005      	str	r5, [r0, #0]
 8019868:	e7d6      	b.n	8019818 <_malloc_r+0xa8>
 801986a:	bf00      	nop
 801986c:	24004a6c 	.word	0x24004a6c

08019870 <__malloc_lock>:
 8019870:	4801      	ldr	r0, [pc, #4]	@ (8019878 <__malloc_lock+0x8>)
 8019872:	f7ff bf00 	b.w	8019676 <__retarget_lock_acquire_recursive>
 8019876:	bf00      	nop
 8019878:	24004a64 	.word	0x24004a64

0801987c <__malloc_unlock>:
 801987c:	4801      	ldr	r0, [pc, #4]	@ (8019884 <__malloc_unlock+0x8>)
 801987e:	f7ff befb 	b.w	8019678 <__retarget_lock_release_recursive>
 8019882:	bf00      	nop
 8019884:	24004a64 	.word	0x24004a64

08019888 <__ssputs_r>:
 8019888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801988c:	688e      	ldr	r6, [r1, #8]
 801988e:	461f      	mov	r7, r3
 8019890:	42be      	cmp	r6, r7
 8019892:	680b      	ldr	r3, [r1, #0]
 8019894:	4682      	mov	sl, r0
 8019896:	460c      	mov	r4, r1
 8019898:	4690      	mov	r8, r2
 801989a:	d82d      	bhi.n	80198f8 <__ssputs_r+0x70>
 801989c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80198a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80198a4:	d026      	beq.n	80198f4 <__ssputs_r+0x6c>
 80198a6:	6965      	ldr	r5, [r4, #20]
 80198a8:	6909      	ldr	r1, [r1, #16]
 80198aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80198ae:	eba3 0901 	sub.w	r9, r3, r1
 80198b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80198b6:	1c7b      	adds	r3, r7, #1
 80198b8:	444b      	add	r3, r9
 80198ba:	106d      	asrs	r5, r5, #1
 80198bc:	429d      	cmp	r5, r3
 80198be:	bf38      	it	cc
 80198c0:	461d      	movcc	r5, r3
 80198c2:	0553      	lsls	r3, r2, #21
 80198c4:	d527      	bpl.n	8019916 <__ssputs_r+0x8e>
 80198c6:	4629      	mov	r1, r5
 80198c8:	f7ff ff52 	bl	8019770 <_malloc_r>
 80198cc:	4606      	mov	r6, r0
 80198ce:	b360      	cbz	r0, 801992a <__ssputs_r+0xa2>
 80198d0:	6921      	ldr	r1, [r4, #16]
 80198d2:	464a      	mov	r2, r9
 80198d4:	f7ff fed1 	bl	801967a <memcpy>
 80198d8:	89a3      	ldrh	r3, [r4, #12]
 80198da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80198de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80198e2:	81a3      	strh	r3, [r4, #12]
 80198e4:	6126      	str	r6, [r4, #16]
 80198e6:	6165      	str	r5, [r4, #20]
 80198e8:	444e      	add	r6, r9
 80198ea:	eba5 0509 	sub.w	r5, r5, r9
 80198ee:	6026      	str	r6, [r4, #0]
 80198f0:	60a5      	str	r5, [r4, #8]
 80198f2:	463e      	mov	r6, r7
 80198f4:	42be      	cmp	r6, r7
 80198f6:	d900      	bls.n	80198fa <__ssputs_r+0x72>
 80198f8:	463e      	mov	r6, r7
 80198fa:	6820      	ldr	r0, [r4, #0]
 80198fc:	4632      	mov	r2, r6
 80198fe:	4641      	mov	r1, r8
 8019900:	f7ff fe26 	bl	8019550 <memmove>
 8019904:	68a3      	ldr	r3, [r4, #8]
 8019906:	1b9b      	subs	r3, r3, r6
 8019908:	60a3      	str	r3, [r4, #8]
 801990a:	6823      	ldr	r3, [r4, #0]
 801990c:	4433      	add	r3, r6
 801990e:	6023      	str	r3, [r4, #0]
 8019910:	2000      	movs	r0, #0
 8019912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019916:	462a      	mov	r2, r5
 8019918:	f000 fd1c 	bl	801a354 <_realloc_r>
 801991c:	4606      	mov	r6, r0
 801991e:	2800      	cmp	r0, #0
 8019920:	d1e0      	bne.n	80198e4 <__ssputs_r+0x5c>
 8019922:	6921      	ldr	r1, [r4, #16]
 8019924:	4650      	mov	r0, sl
 8019926:	f7ff feb7 	bl	8019698 <_free_r>
 801992a:	230c      	movs	r3, #12
 801992c:	f8ca 3000 	str.w	r3, [sl]
 8019930:	89a3      	ldrh	r3, [r4, #12]
 8019932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019936:	81a3      	strh	r3, [r4, #12]
 8019938:	f04f 30ff 	mov.w	r0, #4294967295
 801993c:	e7e9      	b.n	8019912 <__ssputs_r+0x8a>
	...

08019940 <_svfiprintf_r>:
 8019940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019944:	4698      	mov	r8, r3
 8019946:	898b      	ldrh	r3, [r1, #12]
 8019948:	061b      	lsls	r3, r3, #24
 801994a:	b09d      	sub	sp, #116	@ 0x74
 801994c:	4607      	mov	r7, r0
 801994e:	460d      	mov	r5, r1
 8019950:	4614      	mov	r4, r2
 8019952:	d510      	bpl.n	8019976 <_svfiprintf_r+0x36>
 8019954:	690b      	ldr	r3, [r1, #16]
 8019956:	b973      	cbnz	r3, 8019976 <_svfiprintf_r+0x36>
 8019958:	2140      	movs	r1, #64	@ 0x40
 801995a:	f7ff ff09 	bl	8019770 <_malloc_r>
 801995e:	6028      	str	r0, [r5, #0]
 8019960:	6128      	str	r0, [r5, #16]
 8019962:	b930      	cbnz	r0, 8019972 <_svfiprintf_r+0x32>
 8019964:	230c      	movs	r3, #12
 8019966:	603b      	str	r3, [r7, #0]
 8019968:	f04f 30ff 	mov.w	r0, #4294967295
 801996c:	b01d      	add	sp, #116	@ 0x74
 801996e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019972:	2340      	movs	r3, #64	@ 0x40
 8019974:	616b      	str	r3, [r5, #20]
 8019976:	2300      	movs	r3, #0
 8019978:	9309      	str	r3, [sp, #36]	@ 0x24
 801997a:	2320      	movs	r3, #32
 801997c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019980:	f8cd 800c 	str.w	r8, [sp, #12]
 8019984:	2330      	movs	r3, #48	@ 0x30
 8019986:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8019b24 <_svfiprintf_r+0x1e4>
 801998a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801998e:	f04f 0901 	mov.w	r9, #1
 8019992:	4623      	mov	r3, r4
 8019994:	469a      	mov	sl, r3
 8019996:	f813 2b01 	ldrb.w	r2, [r3], #1
 801999a:	b10a      	cbz	r2, 80199a0 <_svfiprintf_r+0x60>
 801999c:	2a25      	cmp	r2, #37	@ 0x25
 801999e:	d1f9      	bne.n	8019994 <_svfiprintf_r+0x54>
 80199a0:	ebba 0b04 	subs.w	fp, sl, r4
 80199a4:	d00b      	beq.n	80199be <_svfiprintf_r+0x7e>
 80199a6:	465b      	mov	r3, fp
 80199a8:	4622      	mov	r2, r4
 80199aa:	4629      	mov	r1, r5
 80199ac:	4638      	mov	r0, r7
 80199ae:	f7ff ff6b 	bl	8019888 <__ssputs_r>
 80199b2:	3001      	adds	r0, #1
 80199b4:	f000 80a7 	beq.w	8019b06 <_svfiprintf_r+0x1c6>
 80199b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80199ba:	445a      	add	r2, fp
 80199bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80199be:	f89a 3000 	ldrb.w	r3, [sl]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	f000 809f 	beq.w	8019b06 <_svfiprintf_r+0x1c6>
 80199c8:	2300      	movs	r3, #0
 80199ca:	f04f 32ff 	mov.w	r2, #4294967295
 80199ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80199d2:	f10a 0a01 	add.w	sl, sl, #1
 80199d6:	9304      	str	r3, [sp, #16]
 80199d8:	9307      	str	r3, [sp, #28]
 80199da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80199de:	931a      	str	r3, [sp, #104]	@ 0x68
 80199e0:	4654      	mov	r4, sl
 80199e2:	2205      	movs	r2, #5
 80199e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80199e8:	484e      	ldr	r0, [pc, #312]	@ (8019b24 <_svfiprintf_r+0x1e4>)
 80199ea:	f7e6 fcf9 	bl	80003e0 <memchr>
 80199ee:	9a04      	ldr	r2, [sp, #16]
 80199f0:	b9d8      	cbnz	r0, 8019a2a <_svfiprintf_r+0xea>
 80199f2:	06d0      	lsls	r0, r2, #27
 80199f4:	bf44      	itt	mi
 80199f6:	2320      	movmi	r3, #32
 80199f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80199fc:	0711      	lsls	r1, r2, #28
 80199fe:	bf44      	itt	mi
 8019a00:	232b      	movmi	r3, #43	@ 0x2b
 8019a02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019a06:	f89a 3000 	ldrb.w	r3, [sl]
 8019a0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8019a0c:	d015      	beq.n	8019a3a <_svfiprintf_r+0xfa>
 8019a0e:	9a07      	ldr	r2, [sp, #28]
 8019a10:	4654      	mov	r4, sl
 8019a12:	2000      	movs	r0, #0
 8019a14:	f04f 0c0a 	mov.w	ip, #10
 8019a18:	4621      	mov	r1, r4
 8019a1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019a1e:	3b30      	subs	r3, #48	@ 0x30
 8019a20:	2b09      	cmp	r3, #9
 8019a22:	d94b      	bls.n	8019abc <_svfiprintf_r+0x17c>
 8019a24:	b1b0      	cbz	r0, 8019a54 <_svfiprintf_r+0x114>
 8019a26:	9207      	str	r2, [sp, #28]
 8019a28:	e014      	b.n	8019a54 <_svfiprintf_r+0x114>
 8019a2a:	eba0 0308 	sub.w	r3, r0, r8
 8019a2e:	fa09 f303 	lsl.w	r3, r9, r3
 8019a32:	4313      	orrs	r3, r2
 8019a34:	9304      	str	r3, [sp, #16]
 8019a36:	46a2      	mov	sl, r4
 8019a38:	e7d2      	b.n	80199e0 <_svfiprintf_r+0xa0>
 8019a3a:	9b03      	ldr	r3, [sp, #12]
 8019a3c:	1d19      	adds	r1, r3, #4
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	9103      	str	r1, [sp, #12]
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	bfbb      	ittet	lt
 8019a46:	425b      	neglt	r3, r3
 8019a48:	f042 0202 	orrlt.w	r2, r2, #2
 8019a4c:	9307      	strge	r3, [sp, #28]
 8019a4e:	9307      	strlt	r3, [sp, #28]
 8019a50:	bfb8      	it	lt
 8019a52:	9204      	strlt	r2, [sp, #16]
 8019a54:	7823      	ldrb	r3, [r4, #0]
 8019a56:	2b2e      	cmp	r3, #46	@ 0x2e
 8019a58:	d10a      	bne.n	8019a70 <_svfiprintf_r+0x130>
 8019a5a:	7863      	ldrb	r3, [r4, #1]
 8019a5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8019a5e:	d132      	bne.n	8019ac6 <_svfiprintf_r+0x186>
 8019a60:	9b03      	ldr	r3, [sp, #12]
 8019a62:	1d1a      	adds	r2, r3, #4
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	9203      	str	r2, [sp, #12]
 8019a68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019a6c:	3402      	adds	r4, #2
 8019a6e:	9305      	str	r3, [sp, #20]
 8019a70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019b34 <_svfiprintf_r+0x1f4>
 8019a74:	7821      	ldrb	r1, [r4, #0]
 8019a76:	2203      	movs	r2, #3
 8019a78:	4650      	mov	r0, sl
 8019a7a:	f7e6 fcb1 	bl	80003e0 <memchr>
 8019a7e:	b138      	cbz	r0, 8019a90 <_svfiprintf_r+0x150>
 8019a80:	9b04      	ldr	r3, [sp, #16]
 8019a82:	eba0 000a 	sub.w	r0, r0, sl
 8019a86:	2240      	movs	r2, #64	@ 0x40
 8019a88:	4082      	lsls	r2, r0
 8019a8a:	4313      	orrs	r3, r2
 8019a8c:	3401      	adds	r4, #1
 8019a8e:	9304      	str	r3, [sp, #16]
 8019a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a94:	4824      	ldr	r0, [pc, #144]	@ (8019b28 <_svfiprintf_r+0x1e8>)
 8019a96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019a9a:	2206      	movs	r2, #6
 8019a9c:	f7e6 fca0 	bl	80003e0 <memchr>
 8019aa0:	2800      	cmp	r0, #0
 8019aa2:	d036      	beq.n	8019b12 <_svfiprintf_r+0x1d2>
 8019aa4:	4b21      	ldr	r3, [pc, #132]	@ (8019b2c <_svfiprintf_r+0x1ec>)
 8019aa6:	bb1b      	cbnz	r3, 8019af0 <_svfiprintf_r+0x1b0>
 8019aa8:	9b03      	ldr	r3, [sp, #12]
 8019aaa:	3307      	adds	r3, #7
 8019aac:	f023 0307 	bic.w	r3, r3, #7
 8019ab0:	3308      	adds	r3, #8
 8019ab2:	9303      	str	r3, [sp, #12]
 8019ab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019ab6:	4433      	add	r3, r6
 8019ab8:	9309      	str	r3, [sp, #36]	@ 0x24
 8019aba:	e76a      	b.n	8019992 <_svfiprintf_r+0x52>
 8019abc:	fb0c 3202 	mla	r2, ip, r2, r3
 8019ac0:	460c      	mov	r4, r1
 8019ac2:	2001      	movs	r0, #1
 8019ac4:	e7a8      	b.n	8019a18 <_svfiprintf_r+0xd8>
 8019ac6:	2300      	movs	r3, #0
 8019ac8:	3401      	adds	r4, #1
 8019aca:	9305      	str	r3, [sp, #20]
 8019acc:	4619      	mov	r1, r3
 8019ace:	f04f 0c0a 	mov.w	ip, #10
 8019ad2:	4620      	mov	r0, r4
 8019ad4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019ad8:	3a30      	subs	r2, #48	@ 0x30
 8019ada:	2a09      	cmp	r2, #9
 8019adc:	d903      	bls.n	8019ae6 <_svfiprintf_r+0x1a6>
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d0c6      	beq.n	8019a70 <_svfiprintf_r+0x130>
 8019ae2:	9105      	str	r1, [sp, #20]
 8019ae4:	e7c4      	b.n	8019a70 <_svfiprintf_r+0x130>
 8019ae6:	fb0c 2101 	mla	r1, ip, r1, r2
 8019aea:	4604      	mov	r4, r0
 8019aec:	2301      	movs	r3, #1
 8019aee:	e7f0      	b.n	8019ad2 <_svfiprintf_r+0x192>
 8019af0:	ab03      	add	r3, sp, #12
 8019af2:	9300      	str	r3, [sp, #0]
 8019af4:	462a      	mov	r2, r5
 8019af6:	4b0e      	ldr	r3, [pc, #56]	@ (8019b30 <_svfiprintf_r+0x1f0>)
 8019af8:	a904      	add	r1, sp, #16
 8019afa:	4638      	mov	r0, r7
 8019afc:	f3af 8000 	nop.w
 8019b00:	1c42      	adds	r2, r0, #1
 8019b02:	4606      	mov	r6, r0
 8019b04:	d1d6      	bne.n	8019ab4 <_svfiprintf_r+0x174>
 8019b06:	89ab      	ldrh	r3, [r5, #12]
 8019b08:	065b      	lsls	r3, r3, #25
 8019b0a:	f53f af2d 	bmi.w	8019968 <_svfiprintf_r+0x28>
 8019b0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019b10:	e72c      	b.n	801996c <_svfiprintf_r+0x2c>
 8019b12:	ab03      	add	r3, sp, #12
 8019b14:	9300      	str	r3, [sp, #0]
 8019b16:	462a      	mov	r2, r5
 8019b18:	4b05      	ldr	r3, [pc, #20]	@ (8019b30 <_svfiprintf_r+0x1f0>)
 8019b1a:	a904      	add	r1, sp, #16
 8019b1c:	4638      	mov	r0, r7
 8019b1e:	f000 f9bb 	bl	8019e98 <_printf_i>
 8019b22:	e7ed      	b.n	8019b00 <_svfiprintf_r+0x1c0>
 8019b24:	0802e150 	.word	0x0802e150
 8019b28:	0802e15a 	.word	0x0802e15a
 8019b2c:	00000000 	.word	0x00000000
 8019b30:	08019889 	.word	0x08019889
 8019b34:	0802e156 	.word	0x0802e156

08019b38 <__sfputc_r>:
 8019b38:	6893      	ldr	r3, [r2, #8]
 8019b3a:	3b01      	subs	r3, #1
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	b410      	push	{r4}
 8019b40:	6093      	str	r3, [r2, #8]
 8019b42:	da08      	bge.n	8019b56 <__sfputc_r+0x1e>
 8019b44:	6994      	ldr	r4, [r2, #24]
 8019b46:	42a3      	cmp	r3, r4
 8019b48:	db01      	blt.n	8019b4e <__sfputc_r+0x16>
 8019b4a:	290a      	cmp	r1, #10
 8019b4c:	d103      	bne.n	8019b56 <__sfputc_r+0x1e>
 8019b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b52:	f7ff bc68 	b.w	8019426 <__swbuf_r>
 8019b56:	6813      	ldr	r3, [r2, #0]
 8019b58:	1c58      	adds	r0, r3, #1
 8019b5a:	6010      	str	r0, [r2, #0]
 8019b5c:	7019      	strb	r1, [r3, #0]
 8019b5e:	4608      	mov	r0, r1
 8019b60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019b64:	4770      	bx	lr

08019b66 <__sfputs_r>:
 8019b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b68:	4606      	mov	r6, r0
 8019b6a:	460f      	mov	r7, r1
 8019b6c:	4614      	mov	r4, r2
 8019b6e:	18d5      	adds	r5, r2, r3
 8019b70:	42ac      	cmp	r4, r5
 8019b72:	d101      	bne.n	8019b78 <__sfputs_r+0x12>
 8019b74:	2000      	movs	r0, #0
 8019b76:	e007      	b.n	8019b88 <__sfputs_r+0x22>
 8019b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b7c:	463a      	mov	r2, r7
 8019b7e:	4630      	mov	r0, r6
 8019b80:	f7ff ffda 	bl	8019b38 <__sfputc_r>
 8019b84:	1c43      	adds	r3, r0, #1
 8019b86:	d1f3      	bne.n	8019b70 <__sfputs_r+0xa>
 8019b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019b8c <_vfiprintf_r>:
 8019b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b90:	460d      	mov	r5, r1
 8019b92:	b09d      	sub	sp, #116	@ 0x74
 8019b94:	4614      	mov	r4, r2
 8019b96:	4698      	mov	r8, r3
 8019b98:	4606      	mov	r6, r0
 8019b9a:	b118      	cbz	r0, 8019ba4 <_vfiprintf_r+0x18>
 8019b9c:	6a03      	ldr	r3, [r0, #32]
 8019b9e:	b90b      	cbnz	r3, 8019ba4 <_vfiprintf_r+0x18>
 8019ba0:	f7ff fb22 	bl	80191e8 <__sinit>
 8019ba4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019ba6:	07d9      	lsls	r1, r3, #31
 8019ba8:	d405      	bmi.n	8019bb6 <_vfiprintf_r+0x2a>
 8019baa:	89ab      	ldrh	r3, [r5, #12]
 8019bac:	059a      	lsls	r2, r3, #22
 8019bae:	d402      	bmi.n	8019bb6 <_vfiprintf_r+0x2a>
 8019bb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019bb2:	f7ff fd60 	bl	8019676 <__retarget_lock_acquire_recursive>
 8019bb6:	89ab      	ldrh	r3, [r5, #12]
 8019bb8:	071b      	lsls	r3, r3, #28
 8019bba:	d501      	bpl.n	8019bc0 <_vfiprintf_r+0x34>
 8019bbc:	692b      	ldr	r3, [r5, #16]
 8019bbe:	b99b      	cbnz	r3, 8019be8 <_vfiprintf_r+0x5c>
 8019bc0:	4629      	mov	r1, r5
 8019bc2:	4630      	mov	r0, r6
 8019bc4:	f7ff fc6e 	bl	80194a4 <__swsetup_r>
 8019bc8:	b170      	cbz	r0, 8019be8 <_vfiprintf_r+0x5c>
 8019bca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019bcc:	07dc      	lsls	r4, r3, #31
 8019bce:	d504      	bpl.n	8019bda <_vfiprintf_r+0x4e>
 8019bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8019bd4:	b01d      	add	sp, #116	@ 0x74
 8019bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bda:	89ab      	ldrh	r3, [r5, #12]
 8019bdc:	0598      	lsls	r0, r3, #22
 8019bde:	d4f7      	bmi.n	8019bd0 <_vfiprintf_r+0x44>
 8019be0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019be2:	f7ff fd49 	bl	8019678 <__retarget_lock_release_recursive>
 8019be6:	e7f3      	b.n	8019bd0 <_vfiprintf_r+0x44>
 8019be8:	2300      	movs	r3, #0
 8019bea:	9309      	str	r3, [sp, #36]	@ 0x24
 8019bec:	2320      	movs	r3, #32
 8019bee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019bf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8019bf6:	2330      	movs	r3, #48	@ 0x30
 8019bf8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019da8 <_vfiprintf_r+0x21c>
 8019bfc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019c00:	f04f 0901 	mov.w	r9, #1
 8019c04:	4623      	mov	r3, r4
 8019c06:	469a      	mov	sl, r3
 8019c08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c0c:	b10a      	cbz	r2, 8019c12 <_vfiprintf_r+0x86>
 8019c0e:	2a25      	cmp	r2, #37	@ 0x25
 8019c10:	d1f9      	bne.n	8019c06 <_vfiprintf_r+0x7a>
 8019c12:	ebba 0b04 	subs.w	fp, sl, r4
 8019c16:	d00b      	beq.n	8019c30 <_vfiprintf_r+0xa4>
 8019c18:	465b      	mov	r3, fp
 8019c1a:	4622      	mov	r2, r4
 8019c1c:	4629      	mov	r1, r5
 8019c1e:	4630      	mov	r0, r6
 8019c20:	f7ff ffa1 	bl	8019b66 <__sfputs_r>
 8019c24:	3001      	adds	r0, #1
 8019c26:	f000 80a7 	beq.w	8019d78 <_vfiprintf_r+0x1ec>
 8019c2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019c2c:	445a      	add	r2, fp
 8019c2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8019c30:	f89a 3000 	ldrb.w	r3, [sl]
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	f000 809f 	beq.w	8019d78 <_vfiprintf_r+0x1ec>
 8019c3a:	2300      	movs	r3, #0
 8019c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8019c40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019c44:	f10a 0a01 	add.w	sl, sl, #1
 8019c48:	9304      	str	r3, [sp, #16]
 8019c4a:	9307      	str	r3, [sp, #28]
 8019c4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019c50:	931a      	str	r3, [sp, #104]	@ 0x68
 8019c52:	4654      	mov	r4, sl
 8019c54:	2205      	movs	r2, #5
 8019c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c5a:	4853      	ldr	r0, [pc, #332]	@ (8019da8 <_vfiprintf_r+0x21c>)
 8019c5c:	f7e6 fbc0 	bl	80003e0 <memchr>
 8019c60:	9a04      	ldr	r2, [sp, #16]
 8019c62:	b9d8      	cbnz	r0, 8019c9c <_vfiprintf_r+0x110>
 8019c64:	06d1      	lsls	r1, r2, #27
 8019c66:	bf44      	itt	mi
 8019c68:	2320      	movmi	r3, #32
 8019c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019c6e:	0713      	lsls	r3, r2, #28
 8019c70:	bf44      	itt	mi
 8019c72:	232b      	movmi	r3, #43	@ 0x2b
 8019c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019c78:	f89a 3000 	ldrb.w	r3, [sl]
 8019c7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8019c7e:	d015      	beq.n	8019cac <_vfiprintf_r+0x120>
 8019c80:	9a07      	ldr	r2, [sp, #28]
 8019c82:	4654      	mov	r4, sl
 8019c84:	2000      	movs	r0, #0
 8019c86:	f04f 0c0a 	mov.w	ip, #10
 8019c8a:	4621      	mov	r1, r4
 8019c8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019c90:	3b30      	subs	r3, #48	@ 0x30
 8019c92:	2b09      	cmp	r3, #9
 8019c94:	d94b      	bls.n	8019d2e <_vfiprintf_r+0x1a2>
 8019c96:	b1b0      	cbz	r0, 8019cc6 <_vfiprintf_r+0x13a>
 8019c98:	9207      	str	r2, [sp, #28]
 8019c9a:	e014      	b.n	8019cc6 <_vfiprintf_r+0x13a>
 8019c9c:	eba0 0308 	sub.w	r3, r0, r8
 8019ca0:	fa09 f303 	lsl.w	r3, r9, r3
 8019ca4:	4313      	orrs	r3, r2
 8019ca6:	9304      	str	r3, [sp, #16]
 8019ca8:	46a2      	mov	sl, r4
 8019caa:	e7d2      	b.n	8019c52 <_vfiprintf_r+0xc6>
 8019cac:	9b03      	ldr	r3, [sp, #12]
 8019cae:	1d19      	adds	r1, r3, #4
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	9103      	str	r1, [sp, #12]
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	bfbb      	ittet	lt
 8019cb8:	425b      	neglt	r3, r3
 8019cba:	f042 0202 	orrlt.w	r2, r2, #2
 8019cbe:	9307      	strge	r3, [sp, #28]
 8019cc0:	9307      	strlt	r3, [sp, #28]
 8019cc2:	bfb8      	it	lt
 8019cc4:	9204      	strlt	r2, [sp, #16]
 8019cc6:	7823      	ldrb	r3, [r4, #0]
 8019cc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8019cca:	d10a      	bne.n	8019ce2 <_vfiprintf_r+0x156>
 8019ccc:	7863      	ldrb	r3, [r4, #1]
 8019cce:	2b2a      	cmp	r3, #42	@ 0x2a
 8019cd0:	d132      	bne.n	8019d38 <_vfiprintf_r+0x1ac>
 8019cd2:	9b03      	ldr	r3, [sp, #12]
 8019cd4:	1d1a      	adds	r2, r3, #4
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	9203      	str	r2, [sp, #12]
 8019cda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019cde:	3402      	adds	r4, #2
 8019ce0:	9305      	str	r3, [sp, #20]
 8019ce2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019db8 <_vfiprintf_r+0x22c>
 8019ce6:	7821      	ldrb	r1, [r4, #0]
 8019ce8:	2203      	movs	r2, #3
 8019cea:	4650      	mov	r0, sl
 8019cec:	f7e6 fb78 	bl	80003e0 <memchr>
 8019cf0:	b138      	cbz	r0, 8019d02 <_vfiprintf_r+0x176>
 8019cf2:	9b04      	ldr	r3, [sp, #16]
 8019cf4:	eba0 000a 	sub.w	r0, r0, sl
 8019cf8:	2240      	movs	r2, #64	@ 0x40
 8019cfa:	4082      	lsls	r2, r0
 8019cfc:	4313      	orrs	r3, r2
 8019cfe:	3401      	adds	r4, #1
 8019d00:	9304      	str	r3, [sp, #16]
 8019d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d06:	4829      	ldr	r0, [pc, #164]	@ (8019dac <_vfiprintf_r+0x220>)
 8019d08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019d0c:	2206      	movs	r2, #6
 8019d0e:	f7e6 fb67 	bl	80003e0 <memchr>
 8019d12:	2800      	cmp	r0, #0
 8019d14:	d03f      	beq.n	8019d96 <_vfiprintf_r+0x20a>
 8019d16:	4b26      	ldr	r3, [pc, #152]	@ (8019db0 <_vfiprintf_r+0x224>)
 8019d18:	bb1b      	cbnz	r3, 8019d62 <_vfiprintf_r+0x1d6>
 8019d1a:	9b03      	ldr	r3, [sp, #12]
 8019d1c:	3307      	adds	r3, #7
 8019d1e:	f023 0307 	bic.w	r3, r3, #7
 8019d22:	3308      	adds	r3, #8
 8019d24:	9303      	str	r3, [sp, #12]
 8019d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019d28:	443b      	add	r3, r7
 8019d2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8019d2c:	e76a      	b.n	8019c04 <_vfiprintf_r+0x78>
 8019d2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019d32:	460c      	mov	r4, r1
 8019d34:	2001      	movs	r0, #1
 8019d36:	e7a8      	b.n	8019c8a <_vfiprintf_r+0xfe>
 8019d38:	2300      	movs	r3, #0
 8019d3a:	3401      	adds	r4, #1
 8019d3c:	9305      	str	r3, [sp, #20]
 8019d3e:	4619      	mov	r1, r3
 8019d40:	f04f 0c0a 	mov.w	ip, #10
 8019d44:	4620      	mov	r0, r4
 8019d46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019d4a:	3a30      	subs	r2, #48	@ 0x30
 8019d4c:	2a09      	cmp	r2, #9
 8019d4e:	d903      	bls.n	8019d58 <_vfiprintf_r+0x1cc>
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d0c6      	beq.n	8019ce2 <_vfiprintf_r+0x156>
 8019d54:	9105      	str	r1, [sp, #20]
 8019d56:	e7c4      	b.n	8019ce2 <_vfiprintf_r+0x156>
 8019d58:	fb0c 2101 	mla	r1, ip, r1, r2
 8019d5c:	4604      	mov	r4, r0
 8019d5e:	2301      	movs	r3, #1
 8019d60:	e7f0      	b.n	8019d44 <_vfiprintf_r+0x1b8>
 8019d62:	ab03      	add	r3, sp, #12
 8019d64:	9300      	str	r3, [sp, #0]
 8019d66:	462a      	mov	r2, r5
 8019d68:	4b12      	ldr	r3, [pc, #72]	@ (8019db4 <_vfiprintf_r+0x228>)
 8019d6a:	a904      	add	r1, sp, #16
 8019d6c:	4630      	mov	r0, r6
 8019d6e:	f3af 8000 	nop.w
 8019d72:	4607      	mov	r7, r0
 8019d74:	1c78      	adds	r0, r7, #1
 8019d76:	d1d6      	bne.n	8019d26 <_vfiprintf_r+0x19a>
 8019d78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019d7a:	07d9      	lsls	r1, r3, #31
 8019d7c:	d405      	bmi.n	8019d8a <_vfiprintf_r+0x1fe>
 8019d7e:	89ab      	ldrh	r3, [r5, #12]
 8019d80:	059a      	lsls	r2, r3, #22
 8019d82:	d402      	bmi.n	8019d8a <_vfiprintf_r+0x1fe>
 8019d84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019d86:	f7ff fc77 	bl	8019678 <__retarget_lock_release_recursive>
 8019d8a:	89ab      	ldrh	r3, [r5, #12]
 8019d8c:	065b      	lsls	r3, r3, #25
 8019d8e:	f53f af1f 	bmi.w	8019bd0 <_vfiprintf_r+0x44>
 8019d92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019d94:	e71e      	b.n	8019bd4 <_vfiprintf_r+0x48>
 8019d96:	ab03      	add	r3, sp, #12
 8019d98:	9300      	str	r3, [sp, #0]
 8019d9a:	462a      	mov	r2, r5
 8019d9c:	4b05      	ldr	r3, [pc, #20]	@ (8019db4 <_vfiprintf_r+0x228>)
 8019d9e:	a904      	add	r1, sp, #16
 8019da0:	4630      	mov	r0, r6
 8019da2:	f000 f879 	bl	8019e98 <_printf_i>
 8019da6:	e7e4      	b.n	8019d72 <_vfiprintf_r+0x1e6>
 8019da8:	0802e150 	.word	0x0802e150
 8019dac:	0802e15a 	.word	0x0802e15a
 8019db0:	00000000 	.word	0x00000000
 8019db4:	08019b67 	.word	0x08019b67
 8019db8:	0802e156 	.word	0x0802e156

08019dbc <_printf_common>:
 8019dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019dc0:	4616      	mov	r6, r2
 8019dc2:	4698      	mov	r8, r3
 8019dc4:	688a      	ldr	r2, [r1, #8]
 8019dc6:	690b      	ldr	r3, [r1, #16]
 8019dc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019dcc:	4293      	cmp	r3, r2
 8019dce:	bfb8      	it	lt
 8019dd0:	4613      	movlt	r3, r2
 8019dd2:	6033      	str	r3, [r6, #0]
 8019dd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019dd8:	4607      	mov	r7, r0
 8019dda:	460c      	mov	r4, r1
 8019ddc:	b10a      	cbz	r2, 8019de2 <_printf_common+0x26>
 8019dde:	3301      	adds	r3, #1
 8019de0:	6033      	str	r3, [r6, #0]
 8019de2:	6823      	ldr	r3, [r4, #0]
 8019de4:	0699      	lsls	r1, r3, #26
 8019de6:	bf42      	ittt	mi
 8019de8:	6833      	ldrmi	r3, [r6, #0]
 8019dea:	3302      	addmi	r3, #2
 8019dec:	6033      	strmi	r3, [r6, #0]
 8019dee:	6825      	ldr	r5, [r4, #0]
 8019df0:	f015 0506 	ands.w	r5, r5, #6
 8019df4:	d106      	bne.n	8019e04 <_printf_common+0x48>
 8019df6:	f104 0a19 	add.w	sl, r4, #25
 8019dfa:	68e3      	ldr	r3, [r4, #12]
 8019dfc:	6832      	ldr	r2, [r6, #0]
 8019dfe:	1a9b      	subs	r3, r3, r2
 8019e00:	42ab      	cmp	r3, r5
 8019e02:	dc26      	bgt.n	8019e52 <_printf_common+0x96>
 8019e04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019e08:	6822      	ldr	r2, [r4, #0]
 8019e0a:	3b00      	subs	r3, #0
 8019e0c:	bf18      	it	ne
 8019e0e:	2301      	movne	r3, #1
 8019e10:	0692      	lsls	r2, r2, #26
 8019e12:	d42b      	bmi.n	8019e6c <_printf_common+0xb0>
 8019e14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019e18:	4641      	mov	r1, r8
 8019e1a:	4638      	mov	r0, r7
 8019e1c:	47c8      	blx	r9
 8019e1e:	3001      	adds	r0, #1
 8019e20:	d01e      	beq.n	8019e60 <_printf_common+0xa4>
 8019e22:	6823      	ldr	r3, [r4, #0]
 8019e24:	6922      	ldr	r2, [r4, #16]
 8019e26:	f003 0306 	and.w	r3, r3, #6
 8019e2a:	2b04      	cmp	r3, #4
 8019e2c:	bf02      	ittt	eq
 8019e2e:	68e5      	ldreq	r5, [r4, #12]
 8019e30:	6833      	ldreq	r3, [r6, #0]
 8019e32:	1aed      	subeq	r5, r5, r3
 8019e34:	68a3      	ldr	r3, [r4, #8]
 8019e36:	bf0c      	ite	eq
 8019e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019e3c:	2500      	movne	r5, #0
 8019e3e:	4293      	cmp	r3, r2
 8019e40:	bfc4      	itt	gt
 8019e42:	1a9b      	subgt	r3, r3, r2
 8019e44:	18ed      	addgt	r5, r5, r3
 8019e46:	2600      	movs	r6, #0
 8019e48:	341a      	adds	r4, #26
 8019e4a:	42b5      	cmp	r5, r6
 8019e4c:	d11a      	bne.n	8019e84 <_printf_common+0xc8>
 8019e4e:	2000      	movs	r0, #0
 8019e50:	e008      	b.n	8019e64 <_printf_common+0xa8>
 8019e52:	2301      	movs	r3, #1
 8019e54:	4652      	mov	r2, sl
 8019e56:	4641      	mov	r1, r8
 8019e58:	4638      	mov	r0, r7
 8019e5a:	47c8      	blx	r9
 8019e5c:	3001      	adds	r0, #1
 8019e5e:	d103      	bne.n	8019e68 <_printf_common+0xac>
 8019e60:	f04f 30ff 	mov.w	r0, #4294967295
 8019e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e68:	3501      	adds	r5, #1
 8019e6a:	e7c6      	b.n	8019dfa <_printf_common+0x3e>
 8019e6c:	18e1      	adds	r1, r4, r3
 8019e6e:	1c5a      	adds	r2, r3, #1
 8019e70:	2030      	movs	r0, #48	@ 0x30
 8019e72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019e76:	4422      	add	r2, r4
 8019e78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019e7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019e80:	3302      	adds	r3, #2
 8019e82:	e7c7      	b.n	8019e14 <_printf_common+0x58>
 8019e84:	2301      	movs	r3, #1
 8019e86:	4622      	mov	r2, r4
 8019e88:	4641      	mov	r1, r8
 8019e8a:	4638      	mov	r0, r7
 8019e8c:	47c8      	blx	r9
 8019e8e:	3001      	adds	r0, #1
 8019e90:	d0e6      	beq.n	8019e60 <_printf_common+0xa4>
 8019e92:	3601      	adds	r6, #1
 8019e94:	e7d9      	b.n	8019e4a <_printf_common+0x8e>
	...

08019e98 <_printf_i>:
 8019e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019e9c:	7e0f      	ldrb	r7, [r1, #24]
 8019e9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019ea0:	2f78      	cmp	r7, #120	@ 0x78
 8019ea2:	4691      	mov	r9, r2
 8019ea4:	4680      	mov	r8, r0
 8019ea6:	460c      	mov	r4, r1
 8019ea8:	469a      	mov	sl, r3
 8019eaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019eae:	d807      	bhi.n	8019ec0 <_printf_i+0x28>
 8019eb0:	2f62      	cmp	r7, #98	@ 0x62
 8019eb2:	d80a      	bhi.n	8019eca <_printf_i+0x32>
 8019eb4:	2f00      	cmp	r7, #0
 8019eb6:	f000 80d1 	beq.w	801a05c <_printf_i+0x1c4>
 8019eba:	2f58      	cmp	r7, #88	@ 0x58
 8019ebc:	f000 80b8 	beq.w	801a030 <_printf_i+0x198>
 8019ec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019ec4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019ec8:	e03a      	b.n	8019f40 <_printf_i+0xa8>
 8019eca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019ece:	2b15      	cmp	r3, #21
 8019ed0:	d8f6      	bhi.n	8019ec0 <_printf_i+0x28>
 8019ed2:	a101      	add	r1, pc, #4	@ (adr r1, 8019ed8 <_printf_i+0x40>)
 8019ed4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019ed8:	08019f31 	.word	0x08019f31
 8019edc:	08019f45 	.word	0x08019f45
 8019ee0:	08019ec1 	.word	0x08019ec1
 8019ee4:	08019ec1 	.word	0x08019ec1
 8019ee8:	08019ec1 	.word	0x08019ec1
 8019eec:	08019ec1 	.word	0x08019ec1
 8019ef0:	08019f45 	.word	0x08019f45
 8019ef4:	08019ec1 	.word	0x08019ec1
 8019ef8:	08019ec1 	.word	0x08019ec1
 8019efc:	08019ec1 	.word	0x08019ec1
 8019f00:	08019ec1 	.word	0x08019ec1
 8019f04:	0801a043 	.word	0x0801a043
 8019f08:	08019f6f 	.word	0x08019f6f
 8019f0c:	08019ffd 	.word	0x08019ffd
 8019f10:	08019ec1 	.word	0x08019ec1
 8019f14:	08019ec1 	.word	0x08019ec1
 8019f18:	0801a065 	.word	0x0801a065
 8019f1c:	08019ec1 	.word	0x08019ec1
 8019f20:	08019f6f 	.word	0x08019f6f
 8019f24:	08019ec1 	.word	0x08019ec1
 8019f28:	08019ec1 	.word	0x08019ec1
 8019f2c:	0801a005 	.word	0x0801a005
 8019f30:	6833      	ldr	r3, [r6, #0]
 8019f32:	1d1a      	adds	r2, r3, #4
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	6032      	str	r2, [r6, #0]
 8019f38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019f3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019f40:	2301      	movs	r3, #1
 8019f42:	e09c      	b.n	801a07e <_printf_i+0x1e6>
 8019f44:	6833      	ldr	r3, [r6, #0]
 8019f46:	6820      	ldr	r0, [r4, #0]
 8019f48:	1d19      	adds	r1, r3, #4
 8019f4a:	6031      	str	r1, [r6, #0]
 8019f4c:	0606      	lsls	r6, r0, #24
 8019f4e:	d501      	bpl.n	8019f54 <_printf_i+0xbc>
 8019f50:	681d      	ldr	r5, [r3, #0]
 8019f52:	e003      	b.n	8019f5c <_printf_i+0xc4>
 8019f54:	0645      	lsls	r5, r0, #25
 8019f56:	d5fb      	bpl.n	8019f50 <_printf_i+0xb8>
 8019f58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019f5c:	2d00      	cmp	r5, #0
 8019f5e:	da03      	bge.n	8019f68 <_printf_i+0xd0>
 8019f60:	232d      	movs	r3, #45	@ 0x2d
 8019f62:	426d      	negs	r5, r5
 8019f64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019f68:	4858      	ldr	r0, [pc, #352]	@ (801a0cc <_printf_i+0x234>)
 8019f6a:	230a      	movs	r3, #10
 8019f6c:	e011      	b.n	8019f92 <_printf_i+0xfa>
 8019f6e:	6821      	ldr	r1, [r4, #0]
 8019f70:	6833      	ldr	r3, [r6, #0]
 8019f72:	0608      	lsls	r0, r1, #24
 8019f74:	f853 5b04 	ldr.w	r5, [r3], #4
 8019f78:	d402      	bmi.n	8019f80 <_printf_i+0xe8>
 8019f7a:	0649      	lsls	r1, r1, #25
 8019f7c:	bf48      	it	mi
 8019f7e:	b2ad      	uxthmi	r5, r5
 8019f80:	2f6f      	cmp	r7, #111	@ 0x6f
 8019f82:	4852      	ldr	r0, [pc, #328]	@ (801a0cc <_printf_i+0x234>)
 8019f84:	6033      	str	r3, [r6, #0]
 8019f86:	bf14      	ite	ne
 8019f88:	230a      	movne	r3, #10
 8019f8a:	2308      	moveq	r3, #8
 8019f8c:	2100      	movs	r1, #0
 8019f8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019f92:	6866      	ldr	r6, [r4, #4]
 8019f94:	60a6      	str	r6, [r4, #8]
 8019f96:	2e00      	cmp	r6, #0
 8019f98:	db05      	blt.n	8019fa6 <_printf_i+0x10e>
 8019f9a:	6821      	ldr	r1, [r4, #0]
 8019f9c:	432e      	orrs	r6, r5
 8019f9e:	f021 0104 	bic.w	r1, r1, #4
 8019fa2:	6021      	str	r1, [r4, #0]
 8019fa4:	d04b      	beq.n	801a03e <_printf_i+0x1a6>
 8019fa6:	4616      	mov	r6, r2
 8019fa8:	fbb5 f1f3 	udiv	r1, r5, r3
 8019fac:	fb03 5711 	mls	r7, r3, r1, r5
 8019fb0:	5dc7      	ldrb	r7, [r0, r7]
 8019fb2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019fb6:	462f      	mov	r7, r5
 8019fb8:	42bb      	cmp	r3, r7
 8019fba:	460d      	mov	r5, r1
 8019fbc:	d9f4      	bls.n	8019fa8 <_printf_i+0x110>
 8019fbe:	2b08      	cmp	r3, #8
 8019fc0:	d10b      	bne.n	8019fda <_printf_i+0x142>
 8019fc2:	6823      	ldr	r3, [r4, #0]
 8019fc4:	07df      	lsls	r7, r3, #31
 8019fc6:	d508      	bpl.n	8019fda <_printf_i+0x142>
 8019fc8:	6923      	ldr	r3, [r4, #16]
 8019fca:	6861      	ldr	r1, [r4, #4]
 8019fcc:	4299      	cmp	r1, r3
 8019fce:	bfde      	ittt	le
 8019fd0:	2330      	movle	r3, #48	@ 0x30
 8019fd2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019fd6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019fda:	1b92      	subs	r2, r2, r6
 8019fdc:	6122      	str	r2, [r4, #16]
 8019fde:	f8cd a000 	str.w	sl, [sp]
 8019fe2:	464b      	mov	r3, r9
 8019fe4:	aa03      	add	r2, sp, #12
 8019fe6:	4621      	mov	r1, r4
 8019fe8:	4640      	mov	r0, r8
 8019fea:	f7ff fee7 	bl	8019dbc <_printf_common>
 8019fee:	3001      	adds	r0, #1
 8019ff0:	d14a      	bne.n	801a088 <_printf_i+0x1f0>
 8019ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8019ff6:	b004      	add	sp, #16
 8019ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ffc:	6823      	ldr	r3, [r4, #0]
 8019ffe:	f043 0320 	orr.w	r3, r3, #32
 801a002:	6023      	str	r3, [r4, #0]
 801a004:	4832      	ldr	r0, [pc, #200]	@ (801a0d0 <_printf_i+0x238>)
 801a006:	2778      	movs	r7, #120	@ 0x78
 801a008:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a00c:	6823      	ldr	r3, [r4, #0]
 801a00e:	6831      	ldr	r1, [r6, #0]
 801a010:	061f      	lsls	r7, r3, #24
 801a012:	f851 5b04 	ldr.w	r5, [r1], #4
 801a016:	d402      	bmi.n	801a01e <_printf_i+0x186>
 801a018:	065f      	lsls	r7, r3, #25
 801a01a:	bf48      	it	mi
 801a01c:	b2ad      	uxthmi	r5, r5
 801a01e:	6031      	str	r1, [r6, #0]
 801a020:	07d9      	lsls	r1, r3, #31
 801a022:	bf44      	itt	mi
 801a024:	f043 0320 	orrmi.w	r3, r3, #32
 801a028:	6023      	strmi	r3, [r4, #0]
 801a02a:	b11d      	cbz	r5, 801a034 <_printf_i+0x19c>
 801a02c:	2310      	movs	r3, #16
 801a02e:	e7ad      	b.n	8019f8c <_printf_i+0xf4>
 801a030:	4826      	ldr	r0, [pc, #152]	@ (801a0cc <_printf_i+0x234>)
 801a032:	e7e9      	b.n	801a008 <_printf_i+0x170>
 801a034:	6823      	ldr	r3, [r4, #0]
 801a036:	f023 0320 	bic.w	r3, r3, #32
 801a03a:	6023      	str	r3, [r4, #0]
 801a03c:	e7f6      	b.n	801a02c <_printf_i+0x194>
 801a03e:	4616      	mov	r6, r2
 801a040:	e7bd      	b.n	8019fbe <_printf_i+0x126>
 801a042:	6833      	ldr	r3, [r6, #0]
 801a044:	6825      	ldr	r5, [r4, #0]
 801a046:	6961      	ldr	r1, [r4, #20]
 801a048:	1d18      	adds	r0, r3, #4
 801a04a:	6030      	str	r0, [r6, #0]
 801a04c:	062e      	lsls	r6, r5, #24
 801a04e:	681b      	ldr	r3, [r3, #0]
 801a050:	d501      	bpl.n	801a056 <_printf_i+0x1be>
 801a052:	6019      	str	r1, [r3, #0]
 801a054:	e002      	b.n	801a05c <_printf_i+0x1c4>
 801a056:	0668      	lsls	r0, r5, #25
 801a058:	d5fb      	bpl.n	801a052 <_printf_i+0x1ba>
 801a05a:	8019      	strh	r1, [r3, #0]
 801a05c:	2300      	movs	r3, #0
 801a05e:	6123      	str	r3, [r4, #16]
 801a060:	4616      	mov	r6, r2
 801a062:	e7bc      	b.n	8019fde <_printf_i+0x146>
 801a064:	6833      	ldr	r3, [r6, #0]
 801a066:	1d1a      	adds	r2, r3, #4
 801a068:	6032      	str	r2, [r6, #0]
 801a06a:	681e      	ldr	r6, [r3, #0]
 801a06c:	6862      	ldr	r2, [r4, #4]
 801a06e:	2100      	movs	r1, #0
 801a070:	4630      	mov	r0, r6
 801a072:	f7e6 f9b5 	bl	80003e0 <memchr>
 801a076:	b108      	cbz	r0, 801a07c <_printf_i+0x1e4>
 801a078:	1b80      	subs	r0, r0, r6
 801a07a:	6060      	str	r0, [r4, #4]
 801a07c:	6863      	ldr	r3, [r4, #4]
 801a07e:	6123      	str	r3, [r4, #16]
 801a080:	2300      	movs	r3, #0
 801a082:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a086:	e7aa      	b.n	8019fde <_printf_i+0x146>
 801a088:	6923      	ldr	r3, [r4, #16]
 801a08a:	4632      	mov	r2, r6
 801a08c:	4649      	mov	r1, r9
 801a08e:	4640      	mov	r0, r8
 801a090:	47d0      	blx	sl
 801a092:	3001      	adds	r0, #1
 801a094:	d0ad      	beq.n	8019ff2 <_printf_i+0x15a>
 801a096:	6823      	ldr	r3, [r4, #0]
 801a098:	079b      	lsls	r3, r3, #30
 801a09a:	d413      	bmi.n	801a0c4 <_printf_i+0x22c>
 801a09c:	68e0      	ldr	r0, [r4, #12]
 801a09e:	9b03      	ldr	r3, [sp, #12]
 801a0a0:	4298      	cmp	r0, r3
 801a0a2:	bfb8      	it	lt
 801a0a4:	4618      	movlt	r0, r3
 801a0a6:	e7a6      	b.n	8019ff6 <_printf_i+0x15e>
 801a0a8:	2301      	movs	r3, #1
 801a0aa:	4632      	mov	r2, r6
 801a0ac:	4649      	mov	r1, r9
 801a0ae:	4640      	mov	r0, r8
 801a0b0:	47d0      	blx	sl
 801a0b2:	3001      	adds	r0, #1
 801a0b4:	d09d      	beq.n	8019ff2 <_printf_i+0x15a>
 801a0b6:	3501      	adds	r5, #1
 801a0b8:	68e3      	ldr	r3, [r4, #12]
 801a0ba:	9903      	ldr	r1, [sp, #12]
 801a0bc:	1a5b      	subs	r3, r3, r1
 801a0be:	42ab      	cmp	r3, r5
 801a0c0:	dcf2      	bgt.n	801a0a8 <_printf_i+0x210>
 801a0c2:	e7eb      	b.n	801a09c <_printf_i+0x204>
 801a0c4:	2500      	movs	r5, #0
 801a0c6:	f104 0619 	add.w	r6, r4, #25
 801a0ca:	e7f5      	b.n	801a0b8 <_printf_i+0x220>
 801a0cc:	0802e161 	.word	0x0802e161
 801a0d0:	0802e172 	.word	0x0802e172

0801a0d4 <__sflush_r>:
 801a0d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0dc:	0716      	lsls	r6, r2, #28
 801a0de:	4605      	mov	r5, r0
 801a0e0:	460c      	mov	r4, r1
 801a0e2:	d454      	bmi.n	801a18e <__sflush_r+0xba>
 801a0e4:	684b      	ldr	r3, [r1, #4]
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	dc02      	bgt.n	801a0f0 <__sflush_r+0x1c>
 801a0ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	dd48      	ble.n	801a182 <__sflush_r+0xae>
 801a0f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a0f2:	2e00      	cmp	r6, #0
 801a0f4:	d045      	beq.n	801a182 <__sflush_r+0xae>
 801a0f6:	2300      	movs	r3, #0
 801a0f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a0fc:	682f      	ldr	r7, [r5, #0]
 801a0fe:	6a21      	ldr	r1, [r4, #32]
 801a100:	602b      	str	r3, [r5, #0]
 801a102:	d030      	beq.n	801a166 <__sflush_r+0x92>
 801a104:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a106:	89a3      	ldrh	r3, [r4, #12]
 801a108:	0759      	lsls	r1, r3, #29
 801a10a:	d505      	bpl.n	801a118 <__sflush_r+0x44>
 801a10c:	6863      	ldr	r3, [r4, #4]
 801a10e:	1ad2      	subs	r2, r2, r3
 801a110:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a112:	b10b      	cbz	r3, 801a118 <__sflush_r+0x44>
 801a114:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a116:	1ad2      	subs	r2, r2, r3
 801a118:	2300      	movs	r3, #0
 801a11a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a11c:	6a21      	ldr	r1, [r4, #32]
 801a11e:	4628      	mov	r0, r5
 801a120:	47b0      	blx	r6
 801a122:	1c43      	adds	r3, r0, #1
 801a124:	89a3      	ldrh	r3, [r4, #12]
 801a126:	d106      	bne.n	801a136 <__sflush_r+0x62>
 801a128:	6829      	ldr	r1, [r5, #0]
 801a12a:	291d      	cmp	r1, #29
 801a12c:	d82b      	bhi.n	801a186 <__sflush_r+0xb2>
 801a12e:	4a2a      	ldr	r2, [pc, #168]	@ (801a1d8 <__sflush_r+0x104>)
 801a130:	40ca      	lsrs	r2, r1
 801a132:	07d6      	lsls	r6, r2, #31
 801a134:	d527      	bpl.n	801a186 <__sflush_r+0xb2>
 801a136:	2200      	movs	r2, #0
 801a138:	6062      	str	r2, [r4, #4]
 801a13a:	04d9      	lsls	r1, r3, #19
 801a13c:	6922      	ldr	r2, [r4, #16]
 801a13e:	6022      	str	r2, [r4, #0]
 801a140:	d504      	bpl.n	801a14c <__sflush_r+0x78>
 801a142:	1c42      	adds	r2, r0, #1
 801a144:	d101      	bne.n	801a14a <__sflush_r+0x76>
 801a146:	682b      	ldr	r3, [r5, #0]
 801a148:	b903      	cbnz	r3, 801a14c <__sflush_r+0x78>
 801a14a:	6560      	str	r0, [r4, #84]	@ 0x54
 801a14c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a14e:	602f      	str	r7, [r5, #0]
 801a150:	b1b9      	cbz	r1, 801a182 <__sflush_r+0xae>
 801a152:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a156:	4299      	cmp	r1, r3
 801a158:	d002      	beq.n	801a160 <__sflush_r+0x8c>
 801a15a:	4628      	mov	r0, r5
 801a15c:	f7ff fa9c 	bl	8019698 <_free_r>
 801a160:	2300      	movs	r3, #0
 801a162:	6363      	str	r3, [r4, #52]	@ 0x34
 801a164:	e00d      	b.n	801a182 <__sflush_r+0xae>
 801a166:	2301      	movs	r3, #1
 801a168:	4628      	mov	r0, r5
 801a16a:	47b0      	blx	r6
 801a16c:	4602      	mov	r2, r0
 801a16e:	1c50      	adds	r0, r2, #1
 801a170:	d1c9      	bne.n	801a106 <__sflush_r+0x32>
 801a172:	682b      	ldr	r3, [r5, #0]
 801a174:	2b00      	cmp	r3, #0
 801a176:	d0c6      	beq.n	801a106 <__sflush_r+0x32>
 801a178:	2b1d      	cmp	r3, #29
 801a17a:	d001      	beq.n	801a180 <__sflush_r+0xac>
 801a17c:	2b16      	cmp	r3, #22
 801a17e:	d11e      	bne.n	801a1be <__sflush_r+0xea>
 801a180:	602f      	str	r7, [r5, #0]
 801a182:	2000      	movs	r0, #0
 801a184:	e022      	b.n	801a1cc <__sflush_r+0xf8>
 801a186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a18a:	b21b      	sxth	r3, r3
 801a18c:	e01b      	b.n	801a1c6 <__sflush_r+0xf2>
 801a18e:	690f      	ldr	r7, [r1, #16]
 801a190:	2f00      	cmp	r7, #0
 801a192:	d0f6      	beq.n	801a182 <__sflush_r+0xae>
 801a194:	0793      	lsls	r3, r2, #30
 801a196:	680e      	ldr	r6, [r1, #0]
 801a198:	bf08      	it	eq
 801a19a:	694b      	ldreq	r3, [r1, #20]
 801a19c:	600f      	str	r7, [r1, #0]
 801a19e:	bf18      	it	ne
 801a1a0:	2300      	movne	r3, #0
 801a1a2:	eba6 0807 	sub.w	r8, r6, r7
 801a1a6:	608b      	str	r3, [r1, #8]
 801a1a8:	f1b8 0f00 	cmp.w	r8, #0
 801a1ac:	dde9      	ble.n	801a182 <__sflush_r+0xae>
 801a1ae:	6a21      	ldr	r1, [r4, #32]
 801a1b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a1b2:	4643      	mov	r3, r8
 801a1b4:	463a      	mov	r2, r7
 801a1b6:	4628      	mov	r0, r5
 801a1b8:	47b0      	blx	r6
 801a1ba:	2800      	cmp	r0, #0
 801a1bc:	dc08      	bgt.n	801a1d0 <__sflush_r+0xfc>
 801a1be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a1c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a1c6:	81a3      	strh	r3, [r4, #12]
 801a1c8:	f04f 30ff 	mov.w	r0, #4294967295
 801a1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a1d0:	4407      	add	r7, r0
 801a1d2:	eba8 0800 	sub.w	r8, r8, r0
 801a1d6:	e7e7      	b.n	801a1a8 <__sflush_r+0xd4>
 801a1d8:	20400001 	.word	0x20400001

0801a1dc <_fflush_r>:
 801a1dc:	b538      	push	{r3, r4, r5, lr}
 801a1de:	690b      	ldr	r3, [r1, #16]
 801a1e0:	4605      	mov	r5, r0
 801a1e2:	460c      	mov	r4, r1
 801a1e4:	b913      	cbnz	r3, 801a1ec <_fflush_r+0x10>
 801a1e6:	2500      	movs	r5, #0
 801a1e8:	4628      	mov	r0, r5
 801a1ea:	bd38      	pop	{r3, r4, r5, pc}
 801a1ec:	b118      	cbz	r0, 801a1f6 <_fflush_r+0x1a>
 801a1ee:	6a03      	ldr	r3, [r0, #32]
 801a1f0:	b90b      	cbnz	r3, 801a1f6 <_fflush_r+0x1a>
 801a1f2:	f7fe fff9 	bl	80191e8 <__sinit>
 801a1f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	d0f3      	beq.n	801a1e6 <_fflush_r+0xa>
 801a1fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a200:	07d0      	lsls	r0, r2, #31
 801a202:	d404      	bmi.n	801a20e <_fflush_r+0x32>
 801a204:	0599      	lsls	r1, r3, #22
 801a206:	d402      	bmi.n	801a20e <_fflush_r+0x32>
 801a208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a20a:	f7ff fa34 	bl	8019676 <__retarget_lock_acquire_recursive>
 801a20e:	4628      	mov	r0, r5
 801a210:	4621      	mov	r1, r4
 801a212:	f7ff ff5f 	bl	801a0d4 <__sflush_r>
 801a216:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a218:	07da      	lsls	r2, r3, #31
 801a21a:	4605      	mov	r5, r0
 801a21c:	d4e4      	bmi.n	801a1e8 <_fflush_r+0xc>
 801a21e:	89a3      	ldrh	r3, [r4, #12]
 801a220:	059b      	lsls	r3, r3, #22
 801a222:	d4e1      	bmi.n	801a1e8 <_fflush_r+0xc>
 801a224:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a226:	f7ff fa27 	bl	8019678 <__retarget_lock_release_recursive>
 801a22a:	e7dd      	b.n	801a1e8 <_fflush_r+0xc>

0801a22c <__swhatbuf_r>:
 801a22c:	b570      	push	{r4, r5, r6, lr}
 801a22e:	460c      	mov	r4, r1
 801a230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a234:	2900      	cmp	r1, #0
 801a236:	b096      	sub	sp, #88	@ 0x58
 801a238:	4615      	mov	r5, r2
 801a23a:	461e      	mov	r6, r3
 801a23c:	da0d      	bge.n	801a25a <__swhatbuf_r+0x2e>
 801a23e:	89a3      	ldrh	r3, [r4, #12]
 801a240:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a244:	f04f 0100 	mov.w	r1, #0
 801a248:	bf14      	ite	ne
 801a24a:	2340      	movne	r3, #64	@ 0x40
 801a24c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a250:	2000      	movs	r0, #0
 801a252:	6031      	str	r1, [r6, #0]
 801a254:	602b      	str	r3, [r5, #0]
 801a256:	b016      	add	sp, #88	@ 0x58
 801a258:	bd70      	pop	{r4, r5, r6, pc}
 801a25a:	466a      	mov	r2, sp
 801a25c:	f000 f848 	bl	801a2f0 <_fstat_r>
 801a260:	2800      	cmp	r0, #0
 801a262:	dbec      	blt.n	801a23e <__swhatbuf_r+0x12>
 801a264:	9901      	ldr	r1, [sp, #4]
 801a266:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a26a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a26e:	4259      	negs	r1, r3
 801a270:	4159      	adcs	r1, r3
 801a272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a276:	e7eb      	b.n	801a250 <__swhatbuf_r+0x24>

0801a278 <__smakebuf_r>:
 801a278:	898b      	ldrh	r3, [r1, #12]
 801a27a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a27c:	079d      	lsls	r5, r3, #30
 801a27e:	4606      	mov	r6, r0
 801a280:	460c      	mov	r4, r1
 801a282:	d507      	bpl.n	801a294 <__smakebuf_r+0x1c>
 801a284:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a288:	6023      	str	r3, [r4, #0]
 801a28a:	6123      	str	r3, [r4, #16]
 801a28c:	2301      	movs	r3, #1
 801a28e:	6163      	str	r3, [r4, #20]
 801a290:	b003      	add	sp, #12
 801a292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a294:	ab01      	add	r3, sp, #4
 801a296:	466a      	mov	r2, sp
 801a298:	f7ff ffc8 	bl	801a22c <__swhatbuf_r>
 801a29c:	9f00      	ldr	r7, [sp, #0]
 801a29e:	4605      	mov	r5, r0
 801a2a0:	4639      	mov	r1, r7
 801a2a2:	4630      	mov	r0, r6
 801a2a4:	f7ff fa64 	bl	8019770 <_malloc_r>
 801a2a8:	b948      	cbnz	r0, 801a2be <__smakebuf_r+0x46>
 801a2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a2ae:	059a      	lsls	r2, r3, #22
 801a2b0:	d4ee      	bmi.n	801a290 <__smakebuf_r+0x18>
 801a2b2:	f023 0303 	bic.w	r3, r3, #3
 801a2b6:	f043 0302 	orr.w	r3, r3, #2
 801a2ba:	81a3      	strh	r3, [r4, #12]
 801a2bc:	e7e2      	b.n	801a284 <__smakebuf_r+0xc>
 801a2be:	89a3      	ldrh	r3, [r4, #12]
 801a2c0:	6020      	str	r0, [r4, #0]
 801a2c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a2c6:	81a3      	strh	r3, [r4, #12]
 801a2c8:	9b01      	ldr	r3, [sp, #4]
 801a2ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a2ce:	b15b      	cbz	r3, 801a2e8 <__smakebuf_r+0x70>
 801a2d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a2d4:	4630      	mov	r0, r6
 801a2d6:	f000 f81d 	bl	801a314 <_isatty_r>
 801a2da:	b128      	cbz	r0, 801a2e8 <__smakebuf_r+0x70>
 801a2dc:	89a3      	ldrh	r3, [r4, #12]
 801a2de:	f023 0303 	bic.w	r3, r3, #3
 801a2e2:	f043 0301 	orr.w	r3, r3, #1
 801a2e6:	81a3      	strh	r3, [r4, #12]
 801a2e8:	89a3      	ldrh	r3, [r4, #12]
 801a2ea:	431d      	orrs	r5, r3
 801a2ec:	81a5      	strh	r5, [r4, #12]
 801a2ee:	e7cf      	b.n	801a290 <__smakebuf_r+0x18>

0801a2f0 <_fstat_r>:
 801a2f0:	b538      	push	{r3, r4, r5, lr}
 801a2f2:	4d07      	ldr	r5, [pc, #28]	@ (801a310 <_fstat_r+0x20>)
 801a2f4:	2300      	movs	r3, #0
 801a2f6:	4604      	mov	r4, r0
 801a2f8:	4608      	mov	r0, r1
 801a2fa:	4611      	mov	r1, r2
 801a2fc:	602b      	str	r3, [r5, #0]
 801a2fe:	f7e7 fa28 	bl	8001752 <_fstat>
 801a302:	1c43      	adds	r3, r0, #1
 801a304:	d102      	bne.n	801a30c <_fstat_r+0x1c>
 801a306:	682b      	ldr	r3, [r5, #0]
 801a308:	b103      	cbz	r3, 801a30c <_fstat_r+0x1c>
 801a30a:	6023      	str	r3, [r4, #0]
 801a30c:	bd38      	pop	{r3, r4, r5, pc}
 801a30e:	bf00      	nop
 801a310:	24004a60 	.word	0x24004a60

0801a314 <_isatty_r>:
 801a314:	b538      	push	{r3, r4, r5, lr}
 801a316:	4d06      	ldr	r5, [pc, #24]	@ (801a330 <_isatty_r+0x1c>)
 801a318:	2300      	movs	r3, #0
 801a31a:	4604      	mov	r4, r0
 801a31c:	4608      	mov	r0, r1
 801a31e:	602b      	str	r3, [r5, #0]
 801a320:	f7e7 fa27 	bl	8001772 <_isatty>
 801a324:	1c43      	adds	r3, r0, #1
 801a326:	d102      	bne.n	801a32e <_isatty_r+0x1a>
 801a328:	682b      	ldr	r3, [r5, #0]
 801a32a:	b103      	cbz	r3, 801a32e <_isatty_r+0x1a>
 801a32c:	6023      	str	r3, [r4, #0]
 801a32e:	bd38      	pop	{r3, r4, r5, pc}
 801a330:	24004a60 	.word	0x24004a60

0801a334 <_sbrk_r>:
 801a334:	b538      	push	{r3, r4, r5, lr}
 801a336:	4d06      	ldr	r5, [pc, #24]	@ (801a350 <_sbrk_r+0x1c>)
 801a338:	2300      	movs	r3, #0
 801a33a:	4604      	mov	r4, r0
 801a33c:	4608      	mov	r0, r1
 801a33e:	602b      	str	r3, [r5, #0]
 801a340:	f7e7 fa30 	bl	80017a4 <_sbrk>
 801a344:	1c43      	adds	r3, r0, #1
 801a346:	d102      	bne.n	801a34e <_sbrk_r+0x1a>
 801a348:	682b      	ldr	r3, [r5, #0]
 801a34a:	b103      	cbz	r3, 801a34e <_sbrk_r+0x1a>
 801a34c:	6023      	str	r3, [r4, #0]
 801a34e:	bd38      	pop	{r3, r4, r5, pc}
 801a350:	24004a60 	.word	0x24004a60

0801a354 <_realloc_r>:
 801a354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a358:	4607      	mov	r7, r0
 801a35a:	4614      	mov	r4, r2
 801a35c:	460d      	mov	r5, r1
 801a35e:	b921      	cbnz	r1, 801a36a <_realloc_r+0x16>
 801a360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a364:	4611      	mov	r1, r2
 801a366:	f7ff ba03 	b.w	8019770 <_malloc_r>
 801a36a:	b92a      	cbnz	r2, 801a378 <_realloc_r+0x24>
 801a36c:	f7ff f994 	bl	8019698 <_free_r>
 801a370:	4625      	mov	r5, r4
 801a372:	4628      	mov	r0, r5
 801a374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a378:	f000 f81a 	bl	801a3b0 <_malloc_usable_size_r>
 801a37c:	4284      	cmp	r4, r0
 801a37e:	4606      	mov	r6, r0
 801a380:	d802      	bhi.n	801a388 <_realloc_r+0x34>
 801a382:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a386:	d8f4      	bhi.n	801a372 <_realloc_r+0x1e>
 801a388:	4621      	mov	r1, r4
 801a38a:	4638      	mov	r0, r7
 801a38c:	f7ff f9f0 	bl	8019770 <_malloc_r>
 801a390:	4680      	mov	r8, r0
 801a392:	b908      	cbnz	r0, 801a398 <_realloc_r+0x44>
 801a394:	4645      	mov	r5, r8
 801a396:	e7ec      	b.n	801a372 <_realloc_r+0x1e>
 801a398:	42b4      	cmp	r4, r6
 801a39a:	4622      	mov	r2, r4
 801a39c:	4629      	mov	r1, r5
 801a39e:	bf28      	it	cs
 801a3a0:	4632      	movcs	r2, r6
 801a3a2:	f7ff f96a 	bl	801967a <memcpy>
 801a3a6:	4629      	mov	r1, r5
 801a3a8:	4638      	mov	r0, r7
 801a3aa:	f7ff f975 	bl	8019698 <_free_r>
 801a3ae:	e7f1      	b.n	801a394 <_realloc_r+0x40>

0801a3b0 <_malloc_usable_size_r>:
 801a3b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a3b4:	1f18      	subs	r0, r3, #4
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	bfbc      	itt	lt
 801a3ba:	580b      	ldrlt	r3, [r1, r0]
 801a3bc:	18c0      	addlt	r0, r0, r3
 801a3be:	4770      	bx	lr

0801a3c0 <_init>:
 801a3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3c2:	bf00      	nop
 801a3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a3c6:	bc08      	pop	{r3}
 801a3c8:	469e      	mov	lr, r3
 801a3ca:	4770      	bx	lr

0801a3cc <_fini>:
 801a3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3ce:	bf00      	nop
 801a3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a3d2:	bc08      	pop	{r3}
 801a3d4:	469e      	mov	lr, r3
 801a3d6:	4770      	bx	lr
