
OscilloGen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000145d4  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ec  080148a4  080148a4  000158a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015190  08015190  00016190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08015198  08015198  00016198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080151a0  080151a0  000161a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000154  24000000  080151a4  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004908  24000154  080152f8  00017154  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004a5c  080152f8  00017a5c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00017154  2**0
                  CONTENTS, READONLY
 10 .debug_info   00066e01  00000000  00000000  00017182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00009e82  00000000  00000000  0007df83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000028f0  00000000  00000000  00087e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001f23  00000000  00000000  0008a6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000478a2  00000000  00000000  0008c61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000486bd  00000000  00000000  000d3ebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018083d  00000000  00000000  0011c57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b3  00000000  00000000  0029cdb7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b068  00000000  00000000  0029ce6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  002a7ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000000d8  00000000  00000000  002a7f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000010  00000000  00000000  002a8011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000154 	.word	0x24000154
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801488c 	.word	0x0801488c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000158 	.word	0x24000158
 800030c:	0801488c 	.word	0x0801488c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	@ 0x30
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006fe:	463b      	mov	r3, r7
 8000700:	2224      	movs	r2, #36	@ 0x24
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f013 fc5d 	bl	8013fc4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800070a:	4b32      	ldr	r3, [pc, #200]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 800070c:	4a32      	ldr	r2, [pc, #200]	@ (80007d8 <MX_ADC1_Init+0xec>)
 800070e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000710:	4b30      	ldr	r3, [pc, #192]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 8000712:	2200      	movs	r2, #0
 8000714:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000716:	4b2f      	ldr	r3, [pc, #188]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800071c:	4b2d      	ldr	r3, [pc, #180]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000722:	4b2c      	ldr	r3, [pc, #176]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 8000724:	2204      	movs	r2, #4
 8000726:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000728:	4b2a      	ldr	r3, [pc, #168]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 800072a:	2200      	movs	r2, #0
 800072c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800072e:	4b29      	ldr	r3, [pc, #164]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 8000730:	2201      	movs	r2, #1
 8000732:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000734:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 8000736:	2201      	movs	r2, #1
 8000738:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073a:	4b26      	ldr	r3, [pc, #152]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 800073c:	2200      	movs	r2, #0
 800073e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000742:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 8000744:	2200      	movs	r2, #0
 8000746:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000748:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 800074a:	2200      	movs	r2, #0
 800074c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800074e:	4b21      	ldr	r3, [pc, #132]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 8000750:	2203      	movs	r2, #3
 8000752:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000754:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 8000756:	2200      	movs	r2, #0
 8000758:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800075a:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 800075c:	2200      	movs	r2, #0
 800075e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000760:	4b1c      	ldr	r3, [pc, #112]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000768:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 800076a:	2201      	movs	r2, #1
 800076c:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800076e:	4819      	ldr	r0, [pc, #100]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 8000770:	f002 fcaa 	bl	80030c8 <HAL_ADC_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800077a:	f000 fd29 	bl	80011d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000786:	4619      	mov	r1, r3
 8000788:	4812      	ldr	r0, [pc, #72]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 800078a:	f003 ff17 	bl	80045bc <HAL_ADCEx_MultiModeConfigChannel>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000794:	f000 fd1c 	bl	80011d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000798:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <MX_ADC1_Init+0xf0>)
 800079a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800079c:	2306      	movs	r3, #6
 800079e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007a4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007aa:	2304      	movs	r3, #4
 80007ac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <MX_ADC1_Init+0xe8>)
 80007be:	f003 f8e3 	bl	8003988 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80007c8:	f000 fd02 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	3730      	adds	r7, #48	@ 0x30
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	24000170 	.word	0x24000170
 80007d8:	40022000 	.word	0x40022000
 80007dc:	0c900008 	.word	0x0c900008

080007e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b0b8      	sub	sp, #224	@ 0xe0
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	22b8      	movs	r2, #184	@ 0xb8
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f013 fbdf 	bl	8013fc4 <memset>
  if(adcHandle->Instance==ADC1)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a48      	ldr	r2, [pc, #288]	@ (800092c <HAL_ADC_MspInit+0x14c>)
 800080c:	4293      	cmp	r3, r2
 800080e:	f040 8088 	bne.w	8000922 <HAL_ADC_MspInit+0x142>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000812:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000816:	f04f 0300 	mov.w	r3, #0
 800081a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800081e:	2304      	movs	r3, #4
 8000820:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000822:	230c      	movs	r3, #12
 8000824:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000826:	2302      	movs	r3, #2
 8000828:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000832:	23c0      	movs	r3, #192	@ 0xc0
 8000834:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000836:	2300      	movs	r3, #0
 8000838:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 800083a:	2300      	movs	r3, #0
 800083c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800083e:	2300      	movs	r3, #0
 8000840:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	4618      	mov	r0, r3
 800084a:	f009 fafd 	bl	8009e48 <HAL_RCCEx_PeriphCLKConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000854:	f000 fcbc 	bl	80011d0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000858:	4b35      	ldr	r3, [pc, #212]	@ (8000930 <HAL_ADC_MspInit+0x150>)
 800085a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800085e:	4a34      	ldr	r2, [pc, #208]	@ (8000930 <HAL_ADC_MspInit+0x150>)
 8000860:	f043 0320 	orr.w	r3, r3, #32
 8000864:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000868:	4b31      	ldr	r3, [pc, #196]	@ (8000930 <HAL_ADC_MspInit+0x150>)
 800086a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800086e:	f003 0320 	and.w	r3, r3, #32
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b2e      	ldr	r3, [pc, #184]	@ (8000930 <HAL_ADC_MspInit+0x150>)
 8000878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800087c:	4a2c      	ldr	r2, [pc, #176]	@ (8000930 <HAL_ADC_MspInit+0x150>)
 800087e:	f043 0301 	orr.w	r3, r3, #1
 8000882:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000886:	4b2a      	ldr	r3, [pc, #168]	@ (8000930 <HAL_ADC_MspInit+0x150>)
 8000888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000894:	2340      	movs	r3, #64	@ 0x40
 8000896:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089a:	2303      	movs	r3, #3
 800089c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80008aa:	4619      	mov	r1, r3
 80008ac:	4821      	ldr	r0, [pc, #132]	@ (8000934 <HAL_ADC_MspInit+0x154>)
 80008ae:	f006 fd4f 	bl	8007350 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 80008b2:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 80008b4:	4a21      	ldr	r2, [pc, #132]	@ (800093c <HAL_ADC_MspInit+0x15c>)
 80008b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80008b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 80008ba:	2209      	movs	r2, #9
 80008bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008be:	4b1e      	ldr	r3, [pc, #120]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 80008cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008d2:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 80008d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80008d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008da:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 80008dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80008e2:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 80008e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008ea:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008f0:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008f6:	4810      	ldr	r0, [pc, #64]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 80008f8:	f004 fb08 	bl	8004f0c <HAL_DMA_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_ADC_MspInit+0x126>
    {
      Error_Handler();
 8000902:	f000 fc65 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a0b      	ldr	r2, [pc, #44]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 800090a:	659a      	str	r2, [r3, #88]	@ 0x58
 800090c:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <HAL_ADC_MspInit+0x158>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	2012      	movs	r0, #18
 8000918:	f004 f8e3 	bl	8004ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800091c:	2012      	movs	r0, #18
 800091e:	f004 f8fa 	bl	8004b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000922:	bf00      	nop
 8000924:	37e0      	adds	r7, #224	@ 0xe0
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40022000 	.word	0x40022000
 8000930:	58024400 	.word	0x58024400
 8000934:	58020000 	.word	0x58020000
 8000938:	240001e0 	.word	0x240001e0
 800093c:	40020088 	.word	0x40020088

08000940 <MX_CORDIC_Init>:
DMA_HandleTypeDef hdma_cordic_rd;
DMA_HandleTypeDef hdma_cordic_wr;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000944:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <MX_CORDIC_Init+0x20>)
 8000946:	4a07      	ldr	r2, [pc, #28]	@ (8000964 <MX_CORDIC_Init+0x24>)
 8000948:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_CORDIC_Init+0x20>)
 800094c:	f003 ff18 	bl	8004780 <HAL_CORDIC_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8000956:	f000 fc3b 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	24000258 	.word	0x24000258
 8000964:	48024400 	.word	0x48024400

08000968 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a3c      	ldr	r2, [pc, #240]	@ (8000a68 <HAL_CORDIC_MspInit+0x100>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d172      	bne.n	8000a60 <HAL_CORDIC_MspInit+0xf8>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800097a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a6c <HAL_CORDIC_MspInit+0x104>)
 800097c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000980:	4a3a      	ldr	r2, [pc, #232]	@ (8000a6c <HAL_CORDIC_MspInit+0x104>)
 8000982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000986:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800098a:	4b38      	ldr	r3, [pc, #224]	@ (8000a6c <HAL_CORDIC_MspInit+0x104>)
 800098c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]

    /* CORDIC DMA Init */
    /* CORDIC_RD Init */
    hdma_cordic_rd.Instance = DMA1_Stream7;
 8000998:	4b35      	ldr	r3, [pc, #212]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 800099a:	4a36      	ldr	r2, [pc, #216]	@ (8000a74 <HAL_CORDIC_MspInit+0x10c>)
 800099c:	601a      	str	r2, [r3, #0]
    hdma_cordic_rd.Init.Request = DMA_REQUEST_CORDIC_READ;
 800099e:	4b34      	ldr	r3, [pc, #208]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009a0:	227a      	movs	r2, #122	@ 0x7a
 80009a2:	605a      	str	r2, [r3, #4]
    hdma_cordic_rd.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009a4:	4b32      	ldr	r3, [pc, #200]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
    hdma_cordic_rd.Init.PeriphInc = DMA_PINC_DISABLE;
 80009aa:	4b31      	ldr	r3, [pc, #196]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
    hdma_cordic_rd.Init.MemInc = DMA_MINC_ENABLE;
 80009b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009b6:	611a      	str	r2, [r3, #16]
    hdma_cordic_rd.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	615a      	str	r2, [r3, #20]
    hdma_cordic_rd.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009be:	4b2c      	ldr	r3, [pc, #176]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
    hdma_cordic_rd.Init.Mode = DMA_CIRCULAR;
 80009c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009ca:	61da      	str	r2, [r3, #28]
    hdma_cordic_rd.Init.Priority = DMA_PRIORITY_LOW;
 80009cc:	4b28      	ldr	r3, [pc, #160]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	621a      	str	r2, [r3, #32]
    hdma_cordic_rd.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009d2:	4b27      	ldr	r3, [pc, #156]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_cordic_rd) != HAL_OK)
 80009d8:	4825      	ldr	r0, [pc, #148]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009da:	f004 fa97 	bl	8004f0c <HAL_DMA_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <HAL_CORDIC_MspInit+0x80>
    {
      Error_Handler();
 80009e4:	f000 fbf4 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaIn,hdma_cordic_rd);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a21      	ldr	r2, [pc, #132]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009ec:	619a      	str	r2, [r3, #24]
 80009ee:	4a20      	ldr	r2, [pc, #128]	@ (8000a70 <HAL_CORDIC_MspInit+0x108>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* CORDIC_WR Init */
    hdma_cordic_wr.Instance = DMA2_Stream0;
 80009f4:	4b20      	ldr	r3, [pc, #128]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 80009f6:	4a21      	ldr	r2, [pc, #132]	@ (8000a7c <HAL_CORDIC_MspInit+0x114>)
 80009f8:	601a      	str	r2, [r3, #0]
    hdma_cordic_wr.Init.Request = DMA_REQUEST_CORDIC_WRITE;
 80009fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 80009fc:	227b      	movs	r2, #123	@ 0x7b
 80009fe:	605a      	str	r2, [r3, #4]
    hdma_cordic_wr.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a00:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 8000a02:	2240      	movs	r2, #64	@ 0x40
 8000a04:	609a      	str	r2, [r3, #8]
    hdma_cordic_wr.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
    hdma_cordic_wr.Init.MemInc = DMA_MINC_ENABLE;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 8000a0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a12:	611a      	str	r2, [r3, #16]
    hdma_cordic_wr.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a14:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	615a      	str	r2, [r3, #20]
    hdma_cordic_wr.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
    hdma_cordic_wr.Init.Mode = DMA_CIRCULAR;
 8000a20:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 8000a22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a26:	61da      	str	r2, [r3, #28]
    hdma_cordic_wr.Init.Priority = DMA_PRIORITY_LOW;
 8000a28:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	621a      	str	r2, [r3, #32]
    hdma_cordic_wr.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a2e:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_cordic_wr) != HAL_OK)
 8000a34:	4810      	ldr	r0, [pc, #64]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 8000a36:	f004 fa69 	bl	8004f0c <HAL_DMA_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <HAL_CORDIC_MspInit+0xdc>
    {
      Error_Handler();
 8000a40:	f000 fbc6 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(cordicHandle,hdmaOut,hdma_cordic_wr);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a0c      	ldr	r2, [pc, #48]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 8000a48:	61da      	str	r2, [r3, #28]
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a78 <HAL_CORDIC_MspInit+0x110>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* CORDIC interrupt Init */
    HAL_NVIC_SetPriority(CORDIC_IRQn, 0, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	209a      	movs	r0, #154	@ 0x9a
 8000a56:	f004 f844 	bl	8004ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CORDIC_IRQn);
 8000a5a:	209a      	movs	r0, #154	@ 0x9a
 8000a5c:	f004 f85b 	bl	8004b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	48024400 	.word	0x48024400
 8000a6c:	58024400 	.word	0x58024400
 8000a70:	24000280 	.word	0x24000280
 8000a74:	400200b8 	.word	0x400200b8
 8000a78:	240002f8 	.word	0x240002f8
 8000a7c:	40020410 	.word	0x40020410

08000a80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2224      	movs	r2, #36	@ 0x24
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f013 fa99 	bl	8013fc4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a92:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <MX_DAC1_Init+0x5c>)
 8000a94:	4a12      	ldr	r2, [pc, #72]	@ (8000ae0 <MX_DAC1_Init+0x60>)
 8000a96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a98:	4810      	ldr	r0, [pc, #64]	@ (8000adc <MX_DAC1_Init+0x5c>)
 8000a9a:	f004 f8cf 	bl	8004c3c <HAL_DAC_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000aa4:	f000 fb94 	bl	80011d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000aac:	230a      	movs	r3, #10
 8000aae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4806      	ldr	r0, [pc, #24]	@ (8000adc <MX_DAC1_Init+0x5c>)
 8000ac4:	f004 f8dc 	bl	8004c80 <HAL_DAC_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000ace:	f000 fb7f 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	@ 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	24000370 	.word	0x24000370
 8000ae0:	40007400 	.word	0x40007400

08000ae4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	@ 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a30      	ldr	r2, [pc, #192]	@ (8000bc4 <HAL_DAC_MspInit+0xe0>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d159      	bne.n	8000bba <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000b06:	4b30      	ldr	r3, [pc, #192]	@ (8000bc8 <HAL_DAC_MspInit+0xe4>)
 8000b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b0c:	4a2e      	ldr	r2, [pc, #184]	@ (8000bc8 <HAL_DAC_MspInit+0xe4>)
 8000b0e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000b12:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b16:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc8 <HAL_DAC_MspInit+0xe4>)
 8000b18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	4b28      	ldr	r3, [pc, #160]	@ (8000bc8 <HAL_DAC_MspInit+0xe4>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2a:	4a27      	ldr	r2, [pc, #156]	@ (8000bc8 <HAL_DAC_MspInit+0xe4>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b34:	4b24      	ldr	r3, [pc, #144]	@ (8000bc8 <HAL_DAC_MspInit+0xe4>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b42:	2310      	movs	r3, #16
 8000b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b46:	2303      	movs	r3, #3
 8000b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	481d      	ldr	r0, [pc, #116]	@ (8000bcc <HAL_DAC_MspInit+0xe8>)
 8000b56:	f006 fbfb 	bl	8007350 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream6;
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd4 <HAL_DAC_MspInit+0xf0>)
 8000b5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000b62:	2243      	movs	r2, #67	@ 0x43
 8000b64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000b68:	2240      	movs	r2, #64	@ 0x40
 8000b6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b72:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000b74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b7a:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000b7c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b82:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000b84:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000b8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000b92:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b98:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000b9e:	480c      	ldr	r0, [pc, #48]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000ba0:	f004 f9b4 	bl	8004f0c <HAL_DMA_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000baa:	f000 fb11 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	4a06      	ldr	r2, [pc, #24]	@ (8000bd0 <HAL_DAC_MspInit+0xec>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	@ 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40007400 	.word	0x40007400
 8000bc8:	58024400 	.word	0x58024400
 8000bcc:	58020000 	.word	0x58020000
 8000bd0:	24000384 	.word	0x24000384
 8000bd4:	400200a0 	.word	0x400200a0

08000bd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bde:	4b35      	ldr	r3, [pc, #212]	@ (8000cb4 <MX_DMA_Init+0xdc>)
 8000be0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000be4:	4a33      	ldr	r2, [pc, #204]	@ (8000cb4 <MX_DMA_Init+0xdc>)
 8000be6:	f043 0301 	orr.w	r3, r3, #1
 8000bea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bee:	4b31      	ldr	r3, [pc, #196]	@ (8000cb4 <MX_DMA_Init+0xdc>)
 8000bf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb4 <MX_DMA_Init+0xdc>)
 8000bfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c02:	4a2c      	ldr	r2, [pc, #176]	@ (8000cb4 <MX_DMA_Init+0xdc>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c0c:	4b29      	ldr	r3, [pc, #164]	@ (8000cb4 <MX_DMA_Init+0xdc>)
 8000c0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	200b      	movs	r0, #11
 8000c20:	f003 ff5f 	bl	8004ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c24:	200b      	movs	r0, #11
 8000c26:	f003 ff76 	bl	8004b16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	200c      	movs	r0, #12
 8000c30:	f003 ff57 	bl	8004ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c34:	200c      	movs	r0, #12
 8000c36:	f003 ff6e 	bl	8004b16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	200d      	movs	r0, #13
 8000c40:	f003 ff4f 	bl	8004ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c44:	200d      	movs	r0, #13
 8000c46:	f003 ff66 	bl	8004b16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	200e      	movs	r0, #14
 8000c50:	f003 ff47 	bl	8004ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c54:	200e      	movs	r0, #14
 8000c56:	f003 ff5e 	bl	8004b16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	200f      	movs	r0, #15
 8000c60:	f003 ff3f 	bl	8004ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000c64:	200f      	movs	r0, #15
 8000c66:	f003 ff56 	bl	8004b16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2010      	movs	r0, #16
 8000c70:	f003 ff37 	bl	8004ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c74:	2010      	movs	r0, #16
 8000c76:	f003 ff4e 	bl	8004b16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2011      	movs	r0, #17
 8000c80:	f003 ff2f 	bl	8004ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c84:	2011      	movs	r0, #17
 8000c86:	f003 ff46 	bl	8004b16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	202f      	movs	r0, #47	@ 0x2f
 8000c90:	f003 ff27 	bl	8004ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000c94:	202f      	movs	r0, #47	@ 0x2f
 8000c96:	f003 ff3e 	bl	8004b16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2038      	movs	r0, #56	@ 0x38
 8000ca0:	f003 ff1f 	bl	8004ae2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ca4:	2038      	movs	r0, #56	@ 0x38
 8000ca6:	f003 ff36 	bl	8004b16 <HAL_NVIC_EnableIRQ>

}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	58024400 	.word	0x58024400

08000cb8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	@ 0x38
 8000cbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cce:	4b71      	ldr	r3, [pc, #452]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd4:	4a6f      	ldr	r2, [pc, #444]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000cd6:	f043 0310 	orr.w	r3, r3, #16
 8000cda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cde:	4b6d      	ldr	r3, [pc, #436]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce4:	f003 0310 	and.w	r3, r3, #16
 8000ce8:	623b      	str	r3, [r7, #32]
 8000cea:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cec:	4b69      	ldr	r3, [pc, #420]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf2:	4a68      	ldr	r2, [pc, #416]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cfc:	4b65      	ldr	r3, [pc, #404]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	61fb      	str	r3, [r7, #28]
 8000d08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d0a:	4b62      	ldr	r3, [pc, #392]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d10:	4a60      	ldr	r2, [pc, #384]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d12:	f043 0320 	orr.w	r3, r3, #32
 8000d16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d1a:	4b5e      	ldr	r3, [pc, #376]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d20:	f003 0320 	and.w	r3, r3, #32
 8000d24:	61bb      	str	r3, [r7, #24]
 8000d26:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d28:	4b5a      	ldr	r3, [pc, #360]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2e:	4a59      	ldr	r2, [pc, #356]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d38:	4b56      	ldr	r3, [pc, #344]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b53      	ldr	r3, [pc, #332]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4c:	4a51      	ldr	r2, [pc, #324]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d56:	4b4f      	ldr	r3, [pc, #316]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d64:	4b4b      	ldr	r3, [pc, #300]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6a:	4a4a      	ldr	r2, [pc, #296]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d74:	4b47      	ldr	r3, [pc, #284]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d82:	4b44      	ldr	r3, [pc, #272]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d88:	4a42      	ldr	r2, [pc, #264]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d92:	4b40      	ldr	r3, [pc, #256]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da0:	4b3c      	ldr	r3, [pc, #240]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da6:	4a3b      	ldr	r2, [pc, #236]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000da8:	f043 0308 	orr.w	r3, r3, #8
 8000dac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db0:	4b38      	ldr	r3, [pc, #224]	@ (8000e94 <MX_GPIO_Init+0x1dc>)
 8000db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db6:	f003 0308 	and.w	r3, r3, #8
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE10
                           PE11 PE12 PE13 PE14
                           PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000dbe:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4831      	ldr	r0, [pc, #196]	@ (8000e98 <MX_GPIO_Init+0x1e0>)
 8000dd4:	f006 fabc 	bl	8007350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8000dd8:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8000ddc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dde:	2303      	movs	r3, #3
 8000de0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dea:	4619      	mov	r1, r3
 8000dec:	482b      	ldr	r0, [pc, #172]	@ (8000e9c <MX_GPIO_Init+0x1e4>)
 8000dee:	f006 faaf 	bl	8007350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000df2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000df6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	4826      	ldr	r0, [pc, #152]	@ (8000ea0 <MX_GPIO_Init+0x1e8>)
 8000e08:	f006 faa2 	bl	8007350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e10:	2303      	movs	r3, #3
 8000e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4821      	ldr	r0, [pc, #132]	@ (8000ea4 <MX_GPIO_Init+0x1ec>)
 8000e20:	f006 fa96 	bl	8007350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_10;
 8000e24:	f240 5303 	movw	r3, #1283	@ 0x503
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	481b      	ldr	r0, [pc, #108]	@ (8000ea8 <MX_GPIO_Init+0x1f0>)
 8000e3a:	f006 fa89 	bl	8007350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000e3e:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e44:	2303      	movs	r3, #3
 8000e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e50:	4619      	mov	r1, r3
 8000e52:	4816      	ldr	r0, [pc, #88]	@ (8000eac <MX_GPIO_Init+0x1f4>)
 8000e54:	f006 fa7c 	bl	8007350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG8 PG10 PG11 PG12
                           PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e58:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4810      	ldr	r0, [pc, #64]	@ (8000eb0 <MX_GPIO_Init+0x1f8>)
 8000e6e:	f006 fa6f 	bl	8007350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e84:	4619      	mov	r1, r3
 8000e86:	480b      	ldr	r0, [pc, #44]	@ (8000eb4 <MX_GPIO_Init+0x1fc>)
 8000e88:	f006 fa62 	bl	8007350 <HAL_GPIO_Init>

}
 8000e8c:	bf00      	nop
 8000e8e:	3738      	adds	r7, #56	@ 0x38
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	58024400 	.word	0x58024400
 8000e98:	58021000 	.word	0x58021000
 8000e9c:	58020800 	.word	0x58020800
 8000ea0:	58021400 	.word	0x58021400
 8000ea4:	58021c00 	.word	0x58021c00
 8000ea8:	58020000 	.word	0x58020000
 8000eac:	58020400 	.word	0x58020400
 8000eb0:	58021800 	.word	0x58021800
 8000eb4:	58020c00 	.word	0x58020c00

08000eb8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8000f30 <MX_I2C1_Init+0x78>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0BBFF;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f34 <MX_I2C1_Init+0x7c>)
 8000ec6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ec8:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ece:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ed4:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eda:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ef2:	480e      	ldr	r0, [pc, #56]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000ef4:	f006 fbd4 	bl	80076a0 <HAL_I2C_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000efe:	f000 f967 	bl	80011d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f02:	2100      	movs	r1, #0
 8000f04:	4809      	ldr	r0, [pc, #36]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000f06:	f006 fc67 	bl	80077d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f10:	f000 f95e 	bl	80011d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f14:	2100      	movs	r1, #0
 8000f16:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <MX_I2C1_Init+0x74>)
 8000f18:	f006 fca9 	bl	800786e <HAL_I2CEx_ConfigDigitalFilter>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f22:	f000 f955 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	240003fc 	.word	0x240003fc
 8000f30:	40005400 	.word	0x40005400
 8000f34:	20b0bbff 	.word	0x20b0bbff

08000f38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b0b8      	sub	sp, #224	@ 0xe0
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	22b8      	movs	r2, #184	@ 0xb8
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f013 f833 	bl	8013fc4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a26      	ldr	r2, [pc, #152]	@ (8000ffc <HAL_I2C_MspInit+0xc4>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d145      	bne.n	8000ff4 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f68:	f04f 0208 	mov.w	r2, #8
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f008 ff62 	bl	8009e48 <HAL_RCCEx_PeriphCLKConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000f8a:	f000 f921 	bl	80011d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001000 <HAL_I2C_MspInit+0xc8>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f94:	4a1a      	ldr	r2, [pc, #104]	@ (8001000 <HAL_I2C_MspInit+0xc8>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f9e:	4b18      	ldr	r3, [pc, #96]	@ (8001000 <HAL_I2C_MspInit+0xc8>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa4:	f003 0302 	and.w	r3, r3, #2
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fac:	23c0      	movs	r3, #192	@ 0xc0
 8000fae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb2:	2312      	movs	r3, #18
 8000fb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fca:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480c      	ldr	r0, [pc, #48]	@ (8001004 <HAL_I2C_MspInit+0xcc>)
 8000fd2:	f006 f9bd 	bl	8007350 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <HAL_I2C_MspInit+0xc8>)
 8000fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fdc:	4a08      	ldr	r2, [pc, #32]	@ (8001000 <HAL_I2C_MspInit+0xc8>)
 8000fde:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fe2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fe6:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <HAL_I2C_MspInit+0xc8>)
 8000fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	37e0      	adds	r7, #224	@ 0xe0
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40005400 	.word	0x40005400
 8001000:	58024400 	.word	0x58024400
 8001004:	58020400 	.word	0x58020400

08001008 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 800100c:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <MX_IWDG1_Init+0x34>)
 800100e:	4a0c      	ldr	r2, [pc, #48]	@ (8001040 <MX_IWDG1_Init+0x38>)
 8001010:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <MX_IWDG1_Init+0x34>)
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 200;
 8001018:	4b08      	ldr	r3, [pc, #32]	@ (800103c <MX_IWDG1_Init+0x34>)
 800101a:	22c8      	movs	r2, #200	@ 0xc8
 800101c:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 420;
 800101e:	4b07      	ldr	r3, [pc, #28]	@ (800103c <MX_IWDG1_Init+0x34>)
 8001020:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8001024:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	@ (800103c <MX_IWDG1_Init+0x34>)
 8001028:	f006 fc6d 	bl	8007906 <HAL_IWDG_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_IWDG1_Init+0x2e>
  {
    Error_Handler();
 8001032:	f000 f8cd 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	24000450 	.word	0x24000450
 8001040:	58004800 	.word	0x58004800

08001044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001048:	f000 f896 	bl	8001178 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104c:	f001 fcc4 	bl	80029d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001050:	f000 f81e 	bl	8001090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001054:	f7ff fe30 	bl	8000cb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001058:	f7ff fdbe 	bl	8000bd8 <MX_DMA_Init>
  MX_TIM1_Init();
 800105c:	f000 fbce 	bl	80017fc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001060:	f000 fd72 	bl	8001b48 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001064:	f000 f8ba 	bl	80011dc <MX_SPI1_Init>
  MX_I2C1_Init();
 8001068:	f7ff ff26 	bl	8000eb8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800106c:	f012 f9b2 	bl	80133d4 <MX_USB_DEVICE_Init>
  MX_IWDG1_Init();
 8001070:	f7ff ffca 	bl	8001008 <MX_IWDG1_Init>
  MX_ADC1_Init();
 8001074:	f7ff fb3a 	bl	80006ec <MX_ADC1_Init>
  MX_DAC1_Init();
 8001078:	f7ff fd02 	bl	8000a80 <MX_DAC1_Init>
  MX_TIM2_Init();
 800107c:	f000 fc6a 	bl	8001954 <MX_TIM2_Init>
  MX_CORDIC_Init();
 8001080:	f7ff fc5e 	bl	8000940 <MX_CORDIC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MainCpp();
 8001084:	f001 f99e 	bl	80023c4 <MainCpp>
 8001088:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b09c      	sub	sp, #112	@ 0x70
 8001094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001096:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800109a:	224c      	movs	r2, #76	@ 0x4c
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f012 ff90 	bl	8013fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2220      	movs	r2, #32
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f012 ff8a 	bl	8013fc4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f007 ff19 	bl	8008ee8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80010b6:	2300      	movs	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001174 <SystemClock_Config+0xe4>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	4a2d      	ldr	r2, [pc, #180]	@ (8001174 <SystemClock_Config+0xe4>)
 80010c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010c4:	6193      	str	r3, [r2, #24]
 80010c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001174 <SystemClock_Config+0xe4>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010d2:	bf00      	nop
 80010d4:	4b27      	ldr	r3, [pc, #156]	@ (8001174 <SystemClock_Config+0xe4>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010e0:	d1f8      	bne.n	80010d4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80010e2:	232a      	movs	r3, #42	@ 0x2a
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80010ea:	2340      	movs	r3, #64	@ 0x40
 80010ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010ee:	2301      	movs	r3, #1
 80010f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010f2:	2301      	movs	r3, #1
 80010f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f6:	2302      	movs	r3, #2
 80010f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010fa:	2300      	movs	r3, #0
 80010fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010fe:	2304      	movs	r3, #4
 8001100:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 33;
 8001102:	2321      	movs	r3, #33	@ 0x21
 8001104:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001106:	2301      	movs	r3, #1
 8001108:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800110a:	2303      	movs	r3, #3
 800110c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800110e:	2302      	movs	r3, #2
 8001110:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001112:	230c      	movs	r3, #12
 8001114:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001116:	2300      	movs	r3, #0
 8001118:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800111a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800111e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001120:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001124:	4618      	mov	r0, r3
 8001126:	f007 ff29 	bl	8008f7c <HAL_RCC_OscConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001130:	f000 f84e 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001134:	233f      	movs	r3, #63	@ 0x3f
 8001136:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001138:	2303      	movs	r3, #3
 800113a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001140:	2308      	movs	r3, #8
 8001142:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001144:	2340      	movs	r3, #64	@ 0x40
 8001146:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001148:	2340      	movs	r3, #64	@ 0x40
 800114a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800114c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001150:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001152:	2340      	movs	r3, #64	@ 0x40
 8001154:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2103      	movs	r1, #3
 800115a:	4618      	mov	r0, r3
 800115c:	f008 fae8 	bl	8009730 <HAL_RCC_ClockConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001166:	f000 f833 	bl	80011d0 <Error_Handler>
  }
}
 800116a:	bf00      	nop
 800116c:	3770      	adds	r7, #112	@ 0x70
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	58024800 	.word	0x58024800

08001178 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800117e:	463b      	mov	r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800118a:	f003 fcdf 	bl	8004b4c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800118e:	2301      	movs	r3, #1
 8001190:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001192:	2300      	movs	r3, #0
 8001194:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800119a:	231f      	movs	r3, #31
 800119c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800119e:	2387      	movs	r3, #135	@ 0x87
 80011a0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80011a6:	2300      	movs	r3, #0
 80011a8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80011aa:	2301      	movs	r3, #1
 80011ac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80011ae:	2301      	movs	r3, #1
 80011b0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011ba:	463b      	mov	r3, r7
 80011bc:	4618      	mov	r0, r3
 80011be:	f003 fcfd 	bl	8004bbc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80011c2:	2004      	movs	r0, #4
 80011c4:	f003 fcda 	bl	8004b7c <HAL_MPU_Enable>

}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d4:	b672      	cpsid	i
}
 80011d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <Error_Handler+0x8>

080011dc <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011e0:	4b27      	ldr	r3, [pc, #156]	@ (8001280 <MX_SPI1_Init+0xa4>)
 80011e2:	4a28      	ldr	r2, [pc, #160]	@ (8001284 <MX_SPI1_Init+0xa8>)
 80011e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011e6:	4b26      	ldr	r3, [pc, #152]	@ (8001280 <MX_SPI1_Init+0xa4>)
 80011e8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ee:	4b24      	ldr	r3, [pc, #144]	@ (8001280 <MX_SPI1_Init+0xa4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_32BIT;
 80011f4:	4b22      	ldr	r3, [pc, #136]	@ (8001280 <MX_SPI1_Init+0xa4>)
 80011f6:	221f      	movs	r2, #31
 80011f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011fa:	4b21      	ldr	r3, [pc, #132]	@ (8001280 <MX_SPI1_Init+0xa4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001200:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001206:	4b1e      	ldr	r3, [pc, #120]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001208:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800120c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800120e:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001210:	2200      	movs	r2, #0
 8001212:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001214:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001216:	2200      	movs	r2, #0
 8001218:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800121a:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <MX_SPI1_Init+0xa4>)
 800121c:	2200      	movs	r2, #0
 800121e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001220:	4b17      	ldr	r3, [pc, #92]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001222:	2200      	movs	r2, #0
 8001224:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001226:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001228:	2200      	movs	r2, #0
 800122a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800122c:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <MX_SPI1_Init+0xa4>)
 800122e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001232:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001236:	2200      	movs	r2, #0
 8001238:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <MX_SPI1_Init+0xa4>)
 800123c:	2200      	movs	r2, #0
 800123e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001240:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800124c:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <MX_SPI1_Init+0xa4>)
 800124e:	2200      	movs	r2, #0
 8001250:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001254:	2200      	movs	r2, #0
 8001256:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001258:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <MX_SPI1_Init+0xa4>)
 800125a:	2200      	movs	r2, #0
 800125c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800125e:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001260:	2200      	movs	r2, #0
 8001262:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <MX_SPI1_Init+0xa4>)
 8001266:	2200      	movs	r2, #0
 8001268:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800126a:	4805      	ldr	r0, [pc, #20]	@ (8001280 <MX_SPI1_Init+0xa4>)
 800126c:	f00b f9d2 	bl	800c614 <HAL_SPI_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001276:	f7ff ffab 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	24000460 	.word	0x24000460
 8001284:	40013000 	.word	0x40013000

08001288 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b0ba      	sub	sp, #232	@ 0xe8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a0:	f107 0318 	add.w	r3, r7, #24
 80012a4:	22b8      	movs	r2, #184	@ 0xb8
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f012 fe8b 	bl	8013fc4 <memset>
  if(spiHandle->Instance==SPI1)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a6b      	ldr	r2, [pc, #428]	@ (8001460 <HAL_SPI_MspInit+0x1d8>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	f040 80cf 	bne.w	8001458 <HAL_SPI_MspInit+0x1d0>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80012ba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ca:	f107 0318 	add.w	r3, r7, #24
 80012ce:	4618      	mov	r0, r3
 80012d0:	f008 fdba 	bl	8009e48 <HAL_RCCEx_PeriphCLKConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80012da:	f7ff ff79 	bl	80011d0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012de:	4b61      	ldr	r3, [pc, #388]	@ (8001464 <HAL_SPI_MspInit+0x1dc>)
 80012e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012e4:	4a5f      	ldr	r2, [pc, #380]	@ (8001464 <HAL_SPI_MspInit+0x1dc>)
 80012e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001464 <HAL_SPI_MspInit+0x1dc>)
 80012f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	4b59      	ldr	r3, [pc, #356]	@ (8001464 <HAL_SPI_MspInit+0x1dc>)
 80012fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001302:	4a58      	ldr	r2, [pc, #352]	@ (8001464 <HAL_SPI_MspInit+0x1dc>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800130c:	4b55      	ldr	r3, [pc, #340]	@ (8001464 <HAL_SPI_MspInit+0x1dc>)
 800130e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800131a:	4b52      	ldr	r3, [pc, #328]	@ (8001464 <HAL_SPI_MspInit+0x1dc>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001320:	4a50      	ldr	r2, [pc, #320]	@ (8001464 <HAL_SPI_MspInit+0x1dc>)
 8001322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001326:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800132a:	4b4e      	ldr	r3, [pc, #312]	@ (8001464 <HAL_SPI_MspInit+0x1dc>)
 800132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15(JTDI)     ------> SPI1_NSS
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15;
 8001338:	f248 03a0 	movw	r3, #32928	@ 0x80a0
 800133c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001352:	2305      	movs	r3, #5
 8001354:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800135c:	4619      	mov	r1, r3
 800135e:	4842      	ldr	r0, [pc, #264]	@ (8001468 <HAL_SPI_MspInit+0x1e0>)
 8001360:	f005 fff6 	bl	8007350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001364:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001368:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800137e:	2305      	movs	r3, #5
 8001380:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001384:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001388:	4619      	mov	r1, r3
 800138a:	4838      	ldr	r0, [pc, #224]	@ (800146c <HAL_SPI_MspInit+0x1e4>)
 800138c:	f005 ffe0 	bl	8007350 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream3;
 8001390:	4b37      	ldr	r3, [pc, #220]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 8001392:	4a38      	ldr	r2, [pc, #224]	@ (8001474 <HAL_SPI_MspInit+0x1ec>)
 8001394:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001396:	4b36      	ldr	r3, [pc, #216]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 8001398:	2226      	movs	r2, #38	@ 0x26
 800139a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800139c:	4b34      	ldr	r3, [pc, #208]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 800139e:	2240      	movs	r2, #64	@ 0x40
 80013a0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a2:	4b33      	ldr	r3, [pc, #204]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013a8:	4b31      	ldr	r3, [pc, #196]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 80013aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ae:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80013bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80013c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 80013c4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013c8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ca:	4b29      	ldr	r3, [pc, #164]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013d0:	4827      	ldr	r0, [pc, #156]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 80013d2:	f003 fd9b 	bl	8004f0c <HAL_DMA_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 80013dc:	f7ff fef8 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a23      	ldr	r2, [pc, #140]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 80013e4:	679a      	str	r2, [r3, #120]	@ 0x78
 80013e6:	4a22      	ldr	r2, [pc, #136]	@ (8001470 <HAL_SPI_MspInit+0x1e8>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 80013ec:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 80013ee:	4a23      	ldr	r2, [pc, #140]	@ (800147c <HAL_SPI_MspInit+0x1f4>)
 80013f0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80013f2:	4b21      	ldr	r3, [pc, #132]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 80013f4:	2225      	movs	r2, #37	@ 0x25
 80013f6:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001404:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 8001406:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800140a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800140c:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001412:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001418:	4b17      	ldr	r3, [pc, #92]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800141e:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 8001420:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001424:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001426:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 8001428:	2200      	movs	r2, #0
 800142a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800142c:	4812      	ldr	r0, [pc, #72]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 800142e:	f003 fd6d 	bl	8004f0c <HAL_DMA_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_SPI_MspInit+0x1b4>
    {
      Error_Handler();
 8001438:	f7ff feca 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a0e      	ldr	r2, [pc, #56]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 8001440:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001442:	4a0d      	ldr	r2, [pc, #52]	@ (8001478 <HAL_SPI_MspInit+0x1f0>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2100      	movs	r1, #0
 800144c:	2023      	movs	r0, #35	@ 0x23
 800144e:	f003 fb48 	bl	8004ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001452:	2023      	movs	r0, #35	@ 0x23
 8001454:	f003 fb5f 	bl	8004b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001458:	bf00      	nop
 800145a:	37e8      	adds	r7, #232	@ 0xe8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40013000 	.word	0x40013000
 8001464:	58024400 	.word	0x58024400
 8001468:	58020000 	.word	0x58020000
 800146c:	58021800 	.word	0x58021800
 8001470:	240004e8 	.word	0x240004e8
 8001474:	40020058 	.word	0x40020058
 8001478:	24000560 	.word	0x24000560
 800147c:	40020070 	.word	0x40020070

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <HAL_MspInit+0x30>)
 8001488:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800148c:	4a08      	ldr	r2, [pc, #32]	@ (80014b0 <HAL_MspInit+0x30>)
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <HAL_MspInit+0x30>)
 8001498:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	58024400 	.word	0x58024400

080014b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <NMI_Handler+0x4>

080014bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <MemManage_Handler+0x4>

080014cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <BusFault_Handler+0x4>

080014d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <UsageFault_Handler+0x4>

080014dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800150a:	f001 fad7 	bl	8002abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001518:	4802      	ldr	r0, [pc, #8]	@ (8001524 <DMA1_Stream0_IRQHandler+0x10>)
 800151a:	f004 fdb3 	bl	8006084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	24000674 	.word	0x24000674

08001528 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800152c:	4802      	ldr	r0, [pc, #8]	@ (8001538 <DMA1_Stream1_IRQHandler+0x10>)
 800152e:	f004 fda9 	bl	8006084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	24000780 	.word	0x24000780

0800153c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001540:	4802      	ldr	r0, [pc, #8]	@ (800154c <DMA1_Stream2_IRQHandler+0x10>)
 8001542:	f004 fd9f 	bl	8006084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	240007f8 	.word	0x240007f8

08001550 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001554:	4802      	ldr	r0, [pc, #8]	@ (8001560 <DMA1_Stream3_IRQHandler+0x10>)
 8001556:	f004 fd95 	bl	8006084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	240004e8 	.word	0x240004e8

08001564 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001568:	4802      	ldr	r0, [pc, #8]	@ (8001574 <DMA1_Stream4_IRQHandler+0x10>)
 800156a:	f004 fd8b 	bl	8006084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	24000560 	.word	0x24000560

08001578 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800157c:	4802      	ldr	r0, [pc, #8]	@ (8001588 <DMA1_Stream5_IRQHandler+0x10>)
 800157e:	f004 fd81 	bl	8006084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	240001e0 	.word	0x240001e0

0800158c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001590:	4802      	ldr	r0, [pc, #8]	@ (800159c <DMA1_Stream6_IRQHandler+0x10>)
 8001592:	f004 fd77 	bl	8006084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	24000384 	.word	0x24000384

080015a0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015a4:	4802      	ldr	r0, [pc, #8]	@ (80015b0 <ADC_IRQHandler+0x10>)
 80015a6:	f001 ff97 	bl	80034d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	24000170 	.word	0x24000170

080015b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015b8:	4802      	ldr	r0, [pc, #8]	@ (80015c4 <TIM2_IRQHandler+0x10>)
 80015ba:	f00b fcdc 	bl	800cf76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	24000628 	.word	0x24000628

080015c8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80015cc:	4802      	ldr	r0, [pc, #8]	@ (80015d8 <SPI1_IRQHandler+0x10>)
 80015ce:	f00b f945 	bl	800c85c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	24000460 	.word	0x24000460

080015dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015e0:	4802      	ldr	r0, [pc, #8]	@ (80015ec <USART2_IRQHandler+0x10>)
 80015e2:	f00c fdc3 	bl	800e16c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	240006ec 	.word	0x240006ec

080015f0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_rd);
 80015f4:	4802      	ldr	r0, [pc, #8]	@ (8001600 <DMA1_Stream7_IRQHandler+0x10>)
 80015f6:	f004 fd45 	bl	8006084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	24000280 	.word	0x24000280

08001604 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_cordic_wr);
 8001608:	4802      	ldr	r0, [pc, #8]	@ (8001614 <DMA2_Stream0_IRQHandler+0x10>)
 800160a:	f004 fd3b 	bl	8006084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	240002f8 	.word	0x240002f8

08001618 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800161c:	4802      	ldr	r0, [pc, #8]	@ (8001628 <OTG_HS_IRQHandler+0x10>)
 800161e:	f006 fb04 	bl	8007c2a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	24004210 	.word	0x24004210

0800162c <CORDIC_IRQHandler>:

/**
  * @brief This function handles CORDIC interrupt.
  */
void CORDIC_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CORDIC_IRQn 0 */

  /* USER CODE END CORDIC_IRQn 0 */
  HAL_CORDIC_IRQHandler(&hcordic);
 8001630:	4802      	ldr	r0, [pc, #8]	@ (800163c <CORDIC_IRQHandler+0x10>)
 8001632:	f003 f8e0 	bl	80047f6 <HAL_CORDIC_IRQHandler>
  /* USER CODE BEGIN CORDIC_IRQn 1 */

  /* USER CODE END CORDIC_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	24000258 	.word	0x24000258

08001640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001648:	4a14      	ldr	r2, [pc, #80]	@ (800169c <_sbrk+0x5c>)
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <_sbrk+0x60>)
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001654:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800165c:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <_sbrk+0x64>)
 800165e:	4a12      	ldr	r2, [pc, #72]	@ (80016a8 <_sbrk+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001662:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	429a      	cmp	r2, r3
 800166e:	d207      	bcs.n	8001680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001670:	f012 fcb0 	bl	8013fd4 <__errno>
 8001674:	4603      	mov	r3, r0
 8001676:	220c      	movs	r2, #12
 8001678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
 800167e:	e009      	b.n	8001694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001680:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001686:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	4a05      	ldr	r2, [pc, #20]	@ (80016a4 <_sbrk+0x64>)
 8001690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	24050000 	.word	0x24050000
 80016a0:	00000400 	.word	0x00000400
 80016a4:	240005d8 	.word	0x240005d8
 80016a8:	24004a60 	.word	0x24004a60

080016ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016b0:	4b3e      	ldr	r3, [pc, #248]	@ (80017ac <SystemInit+0x100>)
 80016b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016b6:	4a3d      	ldr	r2, [pc, #244]	@ (80017ac <SystemInit+0x100>)
 80016b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016c0:	4b3b      	ldr	r3, [pc, #236]	@ (80017b0 <SystemInit+0x104>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 030f 	and.w	r3, r3, #15
 80016c8:	2b06      	cmp	r3, #6
 80016ca:	d807      	bhi.n	80016dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016cc:	4b38      	ldr	r3, [pc, #224]	@ (80017b0 <SystemInit+0x104>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f023 030f 	bic.w	r3, r3, #15
 80016d4:	4a36      	ldr	r2, [pc, #216]	@ (80017b0 <SystemInit+0x104>)
 80016d6:	f043 0307 	orr.w	r3, r3, #7
 80016da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016dc:	4b35      	ldr	r3, [pc, #212]	@ (80017b4 <SystemInit+0x108>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a34      	ldr	r2, [pc, #208]	@ (80017b4 <SystemInit+0x108>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016e8:	4b32      	ldr	r3, [pc, #200]	@ (80017b4 <SystemInit+0x108>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016ee:	4b31      	ldr	r3, [pc, #196]	@ (80017b4 <SystemInit+0x108>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4930      	ldr	r1, [pc, #192]	@ (80017b4 <SystemInit+0x108>)
 80016f4:	4b30      	ldr	r3, [pc, #192]	@ (80017b8 <SystemInit+0x10c>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016fa:	4b2d      	ldr	r3, [pc, #180]	@ (80017b0 <SystemInit+0x104>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d007      	beq.n	8001716 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001706:	4b2a      	ldr	r3, [pc, #168]	@ (80017b0 <SystemInit+0x104>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 030f 	bic.w	r3, r3, #15
 800170e:	4a28      	ldr	r2, [pc, #160]	@ (80017b0 <SystemInit+0x104>)
 8001710:	f043 0307 	orr.w	r3, r3, #7
 8001714:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001716:	4b27      	ldr	r3, [pc, #156]	@ (80017b4 <SystemInit+0x108>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800171c:	4b25      	ldr	r3, [pc, #148]	@ (80017b4 <SystemInit+0x108>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001722:	4b24      	ldr	r3, [pc, #144]	@ (80017b4 <SystemInit+0x108>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001728:	4b22      	ldr	r3, [pc, #136]	@ (80017b4 <SystemInit+0x108>)
 800172a:	4a24      	ldr	r2, [pc, #144]	@ (80017bc <SystemInit+0x110>)
 800172c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800172e:	4b21      	ldr	r3, [pc, #132]	@ (80017b4 <SystemInit+0x108>)
 8001730:	4a23      	ldr	r2, [pc, #140]	@ (80017c0 <SystemInit+0x114>)
 8001732:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001734:	4b1f      	ldr	r3, [pc, #124]	@ (80017b4 <SystemInit+0x108>)
 8001736:	4a23      	ldr	r2, [pc, #140]	@ (80017c4 <SystemInit+0x118>)
 8001738:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800173a:	4b1e      	ldr	r3, [pc, #120]	@ (80017b4 <SystemInit+0x108>)
 800173c:	2200      	movs	r2, #0
 800173e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001740:	4b1c      	ldr	r3, [pc, #112]	@ (80017b4 <SystemInit+0x108>)
 8001742:	4a20      	ldr	r2, [pc, #128]	@ (80017c4 <SystemInit+0x118>)
 8001744:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001746:	4b1b      	ldr	r3, [pc, #108]	@ (80017b4 <SystemInit+0x108>)
 8001748:	2200      	movs	r2, #0
 800174a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800174c:	4b19      	ldr	r3, [pc, #100]	@ (80017b4 <SystemInit+0x108>)
 800174e:	4a1d      	ldr	r2, [pc, #116]	@ (80017c4 <SystemInit+0x118>)
 8001750:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001752:	4b18      	ldr	r3, [pc, #96]	@ (80017b4 <SystemInit+0x108>)
 8001754:	2200      	movs	r2, #0
 8001756:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001758:	4b16      	ldr	r3, [pc, #88]	@ (80017b4 <SystemInit+0x108>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a15      	ldr	r2, [pc, #84]	@ (80017b4 <SystemInit+0x108>)
 800175e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001762:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001764:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <SystemInit+0x108>)
 8001766:	2200      	movs	r2, #0
 8001768:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800176a:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <SystemInit+0x108>)
 800176c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001770:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d113      	bne.n	80017a0 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001778:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <SystemInit+0x108>)
 800177a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800177e:	4a0d      	ldr	r2, [pc, #52]	@ (80017b4 <SystemInit+0x108>)
 8001780:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001784:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001788:	4b0f      	ldr	r3, [pc, #60]	@ (80017c8 <SystemInit+0x11c>)
 800178a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800178e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001790:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <SystemInit+0x108>)
 8001792:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001796:	4a07      	ldr	r2, [pc, #28]	@ (80017b4 <SystemInit+0x108>)
 8001798:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800179c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00
 80017b0:	52002000 	.word	0x52002000
 80017b4:	58024400 	.word	0x58024400
 80017b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80017bc:	02020200 	.word	0x02020200
 80017c0:	01ff0000 	.word	0x01ff0000
 80017c4:	01010280 	.word	0x01010280
 80017c8:	52004000 	.word	0x52004000

080017cc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80017d0:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <ExitRun0Mode+0x2c>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4a08      	ldr	r2, [pc, #32]	@ (80017f8 <ExitRun0Mode+0x2c>)
 80017d6:	f043 0302 	orr.w	r3, r3, #2
 80017da:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80017dc:	bf00      	nop
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <ExitRun0Mode+0x2c>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f9      	beq.n	80017de <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80017ea:	bf00      	nop
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	58024800 	.word	0x58024800

080017fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b09c      	sub	sp, #112	@ 0x70
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001802:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001810:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800181c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
 800182c:	615a      	str	r2, [r3, #20]
 800182e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2234      	movs	r2, #52	@ 0x34
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f012 fbc4 	bl	8013fc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800183c:	4b43      	ldr	r3, [pc, #268]	@ (800194c <MX_TIM1_Init+0x150>)
 800183e:	4a44      	ldr	r2, [pc, #272]	@ (8001950 <MX_TIM1_Init+0x154>)
 8001840:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1020-1;
 8001842:	4b42      	ldr	r3, [pc, #264]	@ (800194c <MX_TIM1_Init+0x150>)
 8001844:	f240 32fb 	movw	r2, #1019	@ 0x3fb
 8001848:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184a:	4b40      	ldr	r3, [pc, #256]	@ (800194c <MX_TIM1_Init+0x150>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 8001850:	4b3e      	ldr	r3, [pc, #248]	@ (800194c <MX_TIM1_Init+0x150>)
 8001852:	2209      	movs	r2, #9
 8001854:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001856:	4b3d      	ldr	r3, [pc, #244]	@ (800194c <MX_TIM1_Init+0x150>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800185c:	4b3b      	ldr	r3, [pc, #236]	@ (800194c <MX_TIM1_Init+0x150>)
 800185e:	2200      	movs	r2, #0
 8001860:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001862:	4b3a      	ldr	r3, [pc, #232]	@ (800194c <MX_TIM1_Init+0x150>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001868:	4838      	ldr	r0, [pc, #224]	@ (800194c <MX_TIM1_Init+0x150>)
 800186a:	f00b facc 	bl	800ce06 <HAL_TIM_Base_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001874:	f7ff fcac 	bl	80011d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001878:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800187c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800187e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001882:	4619      	mov	r1, r3
 8001884:	4831      	ldr	r0, [pc, #196]	@ (800194c <MX_TIM1_Init+0x150>)
 8001886:	f00b fd91 	bl	800d3ac <HAL_TIM_ConfigClockSource>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001890:	f7ff fc9e 	bl	80011d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001894:	482d      	ldr	r0, [pc, #180]	@ (800194c <MX_TIM1_Init+0x150>)
 8001896:	f00b fb0d 	bl	800ceb4 <HAL_TIM_PWM_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80018a0:	f7ff fc96 	bl	80011d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a4:	2300      	movs	r3, #0
 80018a6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018a8:	2300      	movs	r3, #0
 80018aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018b4:	4619      	mov	r1, r3
 80018b6:	4825      	ldr	r0, [pc, #148]	@ (800194c <MX_TIM1_Init+0x150>)
 80018b8:	f00c fac2 	bl	800de40 <HAL_TIMEx_MasterConfigSynchronization>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80018c2:	f7ff fc85 	bl	80011d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c6:	2360      	movs	r3, #96	@ 0x60
 80018c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ce:	2300      	movs	r3, #0
 80018d0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018d2:	2300      	movs	r3, #0
 80018d4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018e6:	2200      	movs	r2, #0
 80018e8:	4619      	mov	r1, r3
 80018ea:	4818      	ldr	r0, [pc, #96]	@ (800194c <MX_TIM1_Init+0x150>)
 80018ec:	f00b fc4a 	bl	800d184 <HAL_TIM_PWM_ConfigChannel>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80018f6:	f7ff fc6b 	bl	80011d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800190e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001912:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800191c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001920:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	4619      	mov	r1, r3
 800192e:	4807      	ldr	r0, [pc, #28]	@ (800194c <MX_TIM1_Init+0x150>)
 8001930:	f00c fb22 	bl	800df78 <HAL_TIMEx_ConfigBreakDeadTime>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800193a:	f7ff fc49 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800193e:	4803      	ldr	r0, [pc, #12]	@ (800194c <MX_TIM1_Init+0x150>)
 8001940:	f000 f8c6 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 8001944:	bf00      	nop
 8001946:	3770      	adds	r7, #112	@ 0x70
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	240005dc 	.word	0x240005dc
 8001950:	40010000 	.word	0x40010000

08001954 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800195a:	f107 0310 	add.w	r3, r7, #16
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001972:	4b1e      	ldr	r3, [pc, #120]	@ (80019ec <MX_TIM2_Init+0x98>)
 8001974:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001978:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 270-1;
 800197a:	4b1c      	ldr	r3, [pc, #112]	@ (80019ec <MX_TIM2_Init+0x98>)
 800197c:	f240 120d 	movw	r2, #269	@ 0x10d
 8001980:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001982:	4b1a      	ldr	r3, [pc, #104]	@ (80019ec <MX_TIM2_Init+0x98>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001988:	4b18      	ldr	r3, [pc, #96]	@ (80019ec <MX_TIM2_Init+0x98>)
 800198a:	2263      	movs	r2, #99	@ 0x63
 800198c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198e:	4b17      	ldr	r3, [pc, #92]	@ (80019ec <MX_TIM2_Init+0x98>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001994:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <MX_TIM2_Init+0x98>)
 8001996:	2200      	movs	r2, #0
 8001998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800199a:	4814      	ldr	r0, [pc, #80]	@ (80019ec <MX_TIM2_Init+0x98>)
 800199c:	f00b fa33 	bl	800ce06 <HAL_TIM_Base_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019a6:	f7ff fc13 	bl	80011d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	4619      	mov	r1, r3
 80019b6:	480d      	ldr	r0, [pc, #52]	@ (80019ec <MX_TIM2_Init+0x98>)
 80019b8:	f00b fcf8 	bl	800d3ac <HAL_TIM_ConfigClockSource>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019c2:	f7ff fc05 	bl	80011d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019c6:	2320      	movs	r3, #32
 80019c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4619      	mov	r1, r3
 80019d2:	4806      	ldr	r0, [pc, #24]	@ (80019ec <MX_TIM2_Init+0x98>)
 80019d4:	f00c fa34 	bl	800de40 <HAL_TIMEx_MasterConfigSynchronization>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80019de:	f7ff fbf7 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	3720      	adds	r7, #32
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	24000628 	.word	0x24000628

080019f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a30      	ldr	r2, [pc, #192]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xd0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d13e      	bne.n	8001a80 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a02:	4b30      	ldr	r3, [pc, #192]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8001a04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a08:	4a2e      	ldr	r2, [pc, #184]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a12:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8001a14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream0;
 8001a20:	4b29      	ldr	r3, [pc, #164]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a22:	4a2a      	ldr	r2, [pc, #168]	@ (8001acc <HAL_TIM_Base_MspInit+0xdc>)
 8001a24:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8001a26:	4b28      	ldr	r3, [pc, #160]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a28:	220b      	movs	r2, #11
 8001a2a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a2c:	4b26      	ldr	r3, [pc, #152]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a2e:	2240      	movs	r2, #64	@ 0x40
 8001a30:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a32:	4b25      	ldr	r3, [pc, #148]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a38:	4b23      	ldr	r3, [pc, #140]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a3e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a40:	4b21      	ldr	r3, [pc, #132]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a46:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a48:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a4e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001a50:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001a56:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001a62:	4819      	ldr	r0, [pc, #100]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a64:	f003 fa52 	bl	8004f0c <HAL_DMA_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001a6e:	f7ff fbaf 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a14      	ldr	r2, [pc, #80]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a76:	625a      	str	r2, [r3, #36]	@ 0x24
 8001a78:	4a13      	ldr	r2, [pc, #76]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xd8>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a7e:	e01b      	b.n	8001ab8 <HAL_TIM_Base_MspInit+0xc8>
  else if(tim_baseHandle->Instance==TIM2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a88:	d116      	bne.n	8001ab8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8001a8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a90:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xd4>)
 8001a9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2100      	movs	r1, #0
 8001aac:	201c      	movs	r0, #28
 8001aae:	f003 f818 	bl	8004ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ab2:	201c      	movs	r0, #28
 8001ab4:	f003 f82f 	bl	8004b16 <HAL_NVIC_EnableIRQ>
}
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	58024400 	.word	0x58024400
 8001ac8:	24000674 	.word	0x24000674
 8001acc:	40020010 	.word	0x40020010

08001ad0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a13      	ldr	r2, [pc, #76]	@ (8001b3c <HAL_TIM_MspPostInit+0x6c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d11f      	bne.n	8001b32 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001af2:	4b13      	ldr	r3, [pc, #76]	@ (8001b40 <HAL_TIM_MspPostInit+0x70>)
 8001af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af8:	4a11      	ldr	r2, [pc, #68]	@ (8001b40 <HAL_TIM_MspPostInit+0x70>)
 8001afa:	f043 0310 	orr.w	r3, r3, #16
 8001afe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b02:	4b0f      	ldr	r3, [pc, #60]	@ (8001b40 <HAL_TIM_MspPostInit+0x70>)
 8001b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b08:	f003 0310 	and.w	r3, r3, #16
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b22:	2301      	movs	r3, #1
 8001b24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b26:	f107 030c 	add.w	r3, r7, #12
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4805      	ldr	r0, [pc, #20]	@ (8001b44 <HAL_TIM_MspPostInit+0x74>)
 8001b2e:	f005 fc0f 	bl	8007350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b32:	bf00      	nop
 8001b34:	3720      	adds	r7, #32
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	58024400 	.word	0x58024400
 8001b44:	58021000 	.word	0x58021000

08001b48 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b4c:	4b22      	ldr	r3, [pc, #136]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b4e:	4a23      	ldr	r2, [pc, #140]	@ (8001bdc <MX_USART2_UART_Init+0x94>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b52:	4b21      	ldr	r3, [pc, #132]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b60:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b66:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b6e:	220c      	movs	r2, #12
 8001b70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b78:	4b17      	ldr	r3, [pc, #92]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b7e:	4b16      	ldr	r3, [pc, #88]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b84:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b8a:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b90:	4811      	ldr	r0, [pc, #68]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001b92:	f00c fa9b 	bl	800e0cc <HAL_UART_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b9c:	f7ff fb18 	bl	80011d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	480d      	ldr	r0, [pc, #52]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001ba4:	f00d fff8 	bl	800fb98 <HAL_UARTEx_SetTxFifoThreshold>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001bae:	f7ff fb0f 	bl	80011d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4808      	ldr	r0, [pc, #32]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001bb6:	f00e f82d 	bl	800fc14 <HAL_UARTEx_SetRxFifoThreshold>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001bc0:	f7ff fb06 	bl	80011d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001bc4:	4804      	ldr	r0, [pc, #16]	@ (8001bd8 <MX_USART2_UART_Init+0x90>)
 8001bc6:	f00d ffae 	bl	800fb26 <HAL_UARTEx_DisableFifoMode>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001bd0:	f7ff fafe 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	240006ec 	.word	0x240006ec
 8001bdc:	40004400 	.word	0x40004400

08001be0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b0b8      	sub	sp, #224	@ 0xe0
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bf8:	f107 0310 	add.w	r3, r7, #16
 8001bfc:	22b8      	movs	r2, #184	@ 0xb8
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f012 f9df 	bl	8013fc4 <memset>
  if(uartHandle->Instance==USART2)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a59      	ldr	r2, [pc, #356]	@ (8001d70 <HAL_UART_MspInit+0x190>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	f040 80ab 	bne.w	8001d68 <HAL_UART_MspInit+0x188>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c12:	f04f 0202 	mov.w	r2, #2
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c24:	f107 0310 	add.w	r3, r7, #16
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f008 f90d 	bl	8009e48 <HAL_RCCEx_PeriphCLKConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001c34:	f7ff facc 	bl	80011d0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c38:	4b4e      	ldr	r3, [pc, #312]	@ (8001d74 <HAL_UART_MspInit+0x194>)
 8001c3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c3e:	4a4d      	ldr	r2, [pc, #308]	@ (8001d74 <HAL_UART_MspInit+0x194>)
 8001c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c48:	4b4a      	ldr	r3, [pc, #296]	@ (8001d74 <HAL_UART_MspInit+0x194>)
 8001c4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	4b47      	ldr	r3, [pc, #284]	@ (8001d74 <HAL_UART_MspInit+0x194>)
 8001c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c5c:	4a45      	ldr	r2, [pc, #276]	@ (8001d74 <HAL_UART_MspInit+0x194>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c66:	4b43      	ldr	r3, [pc, #268]	@ (8001d74 <HAL_UART_MspInit+0x194>)
 8001c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c74:	230c      	movs	r3, #12
 8001c76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c8c:	2307      	movs	r3, #7
 8001c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001c96:	4619      	mov	r1, r3
 8001c98:	4837      	ldr	r0, [pc, #220]	@ (8001d78 <HAL_UART_MspInit+0x198>)
 8001c9a:	f005 fb59 	bl	8007350 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream1;
 8001c9e:	4b37      	ldr	r3, [pc, #220]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001ca0:	4a37      	ldr	r2, [pc, #220]	@ (8001d80 <HAL_UART_MspInit+0x1a0>)
 8001ca2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001ca4:	4b35      	ldr	r3, [pc, #212]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001ca6:	222c      	movs	r2, #44	@ 0x2c
 8001ca8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001caa:	4b34      	ldr	r3, [pc, #208]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001cac:	2240      	movs	r2, #64	@ 0x40
 8001cae:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb0:	4b32      	ldr	r3, [pc, #200]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cb6:	4b31      	ldr	r3, [pc, #196]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001cb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cbc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001cca:	4b2c      	ldr	r3, [pc, #176]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001ccc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cd0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cd8:	4b28      	ldr	r3, [pc, #160]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001cde:	4827      	ldr	r0, [pc, #156]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001ce0:	f003 f914 	bl	8004f0c <HAL_DMA_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001cea:	f7ff fa71 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a22      	ldr	r2, [pc, #136]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001cf2:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001cf4:	4a21      	ldr	r2, [pc, #132]	@ (8001d7c <HAL_UART_MspInit+0x19c>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream2;
 8001cfa:	4b22      	ldr	r3, [pc, #136]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001cfc:	4a22      	ldr	r2, [pc, #136]	@ (8001d88 <HAL_UART_MspInit+0x1a8>)
 8001cfe:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001d00:	4b20      	ldr	r3, [pc, #128]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d02:	222b      	movs	r2, #43	@ 0x2b
 8001d04:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d06:	4b1f      	ldr	r3, [pc, #124]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d12:	4b1c      	ldr	r3, [pc, #112]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d18:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d20:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001d26:	4b17      	ldr	r3, [pc, #92]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d2c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d2e:	4b15      	ldr	r3, [pc, #84]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d34:	4b13      	ldr	r3, [pc, #76]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001d3a:	4812      	ldr	r0, [pc, #72]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d3c:	f003 f8e6 	bl	8004f0c <HAL_DMA_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8001d46:	f7ff fa43 	bl	80011d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001d52:	4a0c      	ldr	r2, [pc, #48]	@ (8001d84 <HAL_UART_MspInit+0x1a4>)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	2026      	movs	r0, #38	@ 0x26
 8001d5e:	f002 fec0 	bl	8004ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d62:	2026      	movs	r0, #38	@ 0x26
 8001d64:	f002 fed7 	bl	8004b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d68:	bf00      	nop
 8001d6a:	37e0      	adds	r7, #224	@ 0xe0
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40004400 	.word	0x40004400
 8001d74:	58024400 	.word	0x58024400
 8001d78:	58020000 	.word	0x58020000
 8001d7c:	24000780 	.word	0x24000780
 8001d80:	40020028 	.word	0x40020028
 8001d84:	240007f8 	.word	0x240007f8
 8001d88:	40020040 	.word	0x40020040

08001d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d8c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001dc8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001d90:	f7ff fd1c 	bl	80017cc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d94:	f7ff fc8a 	bl	80016ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d98:	480c      	ldr	r0, [pc, #48]	@ (8001dcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d9a:	490d      	ldr	r1, [pc, #52]	@ (8001dd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da0:	e002      	b.n	8001da8 <LoopCopyDataInit>

08001da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da6:	3304      	adds	r3, #4

08001da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dac:	d3f9      	bcc.n	8001da2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dae:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001db0:	4c0a      	ldr	r4, [pc, #40]	@ (8001ddc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db4:	e001      	b.n	8001dba <LoopFillZerobss>

08001db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db8:	3204      	adds	r2, #4

08001dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dbc:	d3fb      	bcc.n	8001db6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dbe:	f012 f90f 	bl	8013fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dc2:	f7ff f93f 	bl	8001044 <main>
  bx  lr
 8001dc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dc8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001dcc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001dd0:	24000154 	.word	0x24000154
  ldr r2, =_sidata
 8001dd4:	080151a4 	.word	0x080151a4
  ldr r2, =_sbss
 8001dd8:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 8001ddc:	24004a5c 	.word	0x24004a5c

08001de0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de0:	e7fe      	b.n	8001de0 <ADC3_IRQHandler>

08001de2 <_ZN3Bsp11usbTransmitEPht>:
	return convertHALStatus(halStatus);
}

//USB-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Status Bsp::usbTransmit(uint8_t* Buf, uint16_t Len)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	4613      	mov	r3, r2
 8001dee:	80fb      	strh	r3, [r7, #6]
	uint8_t result = CDC_Transmit_HS(Buf, Len);
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	4619      	mov	r1, r3
 8001df4:	68b8      	ldr	r0, [r7, #8]
 8001df6:	f011 fbb5 	bl	8013564 <CDC_Transmit_HS>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	75fb      	strb	r3, [r7, #23]

	if (result != USBD_OK )
 8001dfe:	7dfb      	ldrb	r3, [r7, #23]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <_ZN3Bsp11usbTransmitEPht+0x26>
		return Status::ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <_ZN3Bsp11usbTransmitEPht+0x28>

	return Status::OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <_ZN3Bsp5delayEm>:
	return convertHALStatus(halStatus);
}

//Extra-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Bsp::delay(uint32_t Delay)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
	HAL_Delay(Delay);
 8001e1c:	6838      	ldr	r0, [r7, #0]
 8001e1e:	f000 fe6d 	bl	8002afc <HAL_Delay>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <_ZN11AnalyzerExtC1ER3Bsp>:
 *      Author: shaya
 */

#include "AnalyzerExtern.hpp"

AnalyzerExt::AnalyzerExt(Bsp& bsp): _bsp(bsp){}
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <_ZN11AnalyzerExt11sendCommandEh>:

void AnalyzerExt::sendCommand(uint8_t command)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	70fb      	strb	r3, [r7, #3]
	//_bsp.uartTransmit_DMA(&huart, &command, 1);
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <_ZN11AnalyzerExt11receiveDataEv>:

uint8_t AnalyzerExt::receiveData()
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	deff      	udf	#255	@ 0xff

08001e6a <_ZN11AnalyzerExt10requestFFTEv>:
	uint8_t data;
	//_bsp.uartReceive_DMA(&huart, &data, 1);
}

uint8_t AnalyzerExt::requestFFT()
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
	sendCommand(CMD_FFT);
 8001e72:	2101      	movs	r1, #1
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ffe7 	bl	8001e48 <_ZN11AnalyzerExt11sendCommandEh>
	return receiveData();
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff fff0 	bl	8001e60 <_ZN11AnalyzerExt11receiveDataEv>
 8001e80:	4603      	mov	r3, r0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <_ZN3DacC1ER3Bsp>:
 */

#include "DacExtern.hpp"
#include "arm_math.h"

Dac::Dac(Bsp& bsp): _bsp(bsp){}
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	6039      	str	r1, [r7, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_ZN3Dac13voltageToCodeEfff>:

	return data;
}

uint16_t Dac::voltageToCode(float voltage_decimal, float min_voltage, float max_voltage)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b089      	sub	sp, #36	@ 0x24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001eb4:	edc7 0a01 	vstr	s1, [r7, #4]
 8001eb8:	ed87 1a00 	vstr	s2, [r7]
    if (voltage_decimal > max_voltage) {
 8001ebc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ec0:	edd7 7a00 	vldr	s15, [r7]
 8001ec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ecc:	dd02      	ble.n	8001ed4 <_ZN3Dac13voltageToCodeEfff+0x2c>
        voltage_decimal = max_voltage;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	e00a      	b.n	8001eea <_ZN3Dac13voltageToCodeEfff+0x42>
    } else if (voltage_decimal < min_voltage) {
 8001ed4:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ed8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001edc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee4:	d501      	bpl.n	8001eea <_ZN3Dac13voltageToCodeEfff+0x42>
        voltage_decimal = min_voltage;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	60bb      	str	r3, [r7, #8]
    }

    int32_t range_span = max_voltage - min_voltage;
 8001eea:	ed97 7a00 	vldr	s14, [r7]
 8001eee:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001efa:	ee17 3a90 	vmov	r3, s15
 8001efe:	61fb      	str	r3, [r7, #28]
    float normalized_voltage = (float)(voltage_decimal - min_voltage) / range_span;
 8001f00:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f04:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f08:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	ee07 3a90 	vmov	s15, r3
 8001f12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f1a:	edc7 7a06 	vstr	s15, [r7, #24]
    uint16_t code = (uint16_t)(normalized_voltage * 65535);
 8001f1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f22:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001f44 <_ZN3Dac13voltageToCodeEfff+0x9c>
 8001f26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f2e:	ee17 3a90 	vmov	r3, s15
 8001f32:	82fb      	strh	r3, [r7, #22]

    return code;
 8001f34:	8afb      	ldrh	r3, [r7, #22]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3724      	adds	r7, #36	@ 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	477fff00 	.word	0x477fff00

08001f48 <_ZN12FuncAnalyserC1ER3Bsp>:
 *      Author: shaya
 */

#include <FuncAnalyzer.hpp>

FuncAnalyser::FuncAnalyser(Bsp& bsp) : _bsp(bsp) {}
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_ZN12FuncAnalyser14startAnalysingEv>:

void FuncAnalyser::startAnalysing()
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
	//_bsp.adcStart_DMA(&hadc, reinterpret_cast<uint32_t*>(adc_buffer.data()), ADC_BUF_SIZE);
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f84:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f88:	eef0 7ae7 	vabs.f32	s15, s15
 8001f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <_ZN13FuncGeneratorC1ER3Bsp>:
 *      Author: shaya
 */

#include <FuncGenerator.hpp>

FuncGenerator::FuncGenerator(Bsp& bsp) : _bsp(bsp){
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	6039      	str	r1, [r7, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f8c3 2488 	str.w	r2, [r3, #1160]	@ 0x488
	generateWaveforms();
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f80c 	bl	8001fd8 <_ZN13FuncGenerator17generateWaveformsEv>
	activeWaveform = sineWave.data();
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3384      	adds	r3, #132	@ 0x84
 8001fc4:	60fb      	str	r3, [r7, #12]
      }

      [[__nodiscard__, __gnu__::__const__, __gnu__::__always_inline__]]
      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return static_cast<pointer>(_M_elems); }
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f8c3 2488 	str.w	r2, [r3, #1160]	@ 0x488
}
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <_ZN13FuncGenerator17generateWaveformsEv>:

void FuncGenerator::generateWaveforms() {
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < SAMPLE_COUNT; i++) {
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	e08a      	b.n	80020fc <_ZN13FuncGenerator17generateWaveformsEv+0x124>
        float angle = 2.0f * PI * i / SAMPLE_COUNT;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	ee07 3a90 	vmov	s15, r3
 8001fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff0:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002110 <_ZN13FuncGenerator17generateWaveformsEv+0x138>
 8001ff4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ff8:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002114 <_ZN13FuncGenerator17generateWaveformsEv+0x13c>
 8001ffc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002000:	edc7 7a02 	vstr	s15, [r7, #8]

        // Generate Sine Wave
        sineWave[i] = static_cast<uint16_t>(MAX_AMPLITUDE * (0.5f + 0.5f * arm_sin_f32(angle)));
 8002004:	ed97 0a02 	vldr	s0, [r7, #8]
 8002008:	f011 ff48 	bl	8013e9c <arm_sin_f32>
 800200c:	eef0 7a40 	vmov.f32	s15, s0
 8002010:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002018:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800201c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002020:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8002118 <_ZN13FuncGenerator17generateWaveformsEv+0x140>
 8002024:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800202c:	ee17 3a90 	vmov	r3, s15
 8002030:	b29c      	uxth	r4, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3384      	adds	r3, #132	@ 0x84
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4611      	mov	r1, r2
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f8f0 	bl	8002220 <_ZNSt5arrayItLj128EEixEj>
 8002040:	4603      	mov	r3, r0
 8002042:	4622      	mov	r2, r4
 8002044:	801a      	strh	r2, [r3, #0]

        // Generate Square Wave
        squareWave[i] = (i < SAMPLE_COUNT / 2) ? MAX_AMPLITUDE : 0;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b3f      	cmp	r3, #63	@ 0x3f
 800204a:	dc02      	bgt.n	8002052 <_ZN13FuncGenerator17generateWaveformsEv+0x7a>
 800204c:	f640 74ff 	movw	r4, #4095	@ 0xfff
 8002050:	e000      	b.n	8002054 <_ZN13FuncGenerator17generateWaveformsEv+0x7c>
 8002052:	2400      	movs	r4, #0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f8de 	bl	8002220 <_ZNSt5arrayItLj128EEixEj>
 8002064:	4603      	mov	r3, r0
 8002066:	4622      	mov	r2, r4
 8002068:	801a      	strh	r2, [r3, #0]

        // Generate Triangle Wave
        triangleWave[i] = static_cast<uint16_t>(MAX_AMPLITUDE * fabs((2.0f * i / SAMPLE_COUNT) - 1.0f));
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	ee07 3a90 	vmov	s15, r3
 8002070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002074:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002078:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002114 <_ZN13FuncGenerator17generateWaveformsEv+0x13c>
 800207c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002080:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002084:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002088:	eeb0 0a67 	vmov.f32	s0, s15
 800208c:	f7ff ff75 	bl	8001f7a <_ZSt4fabsf>
 8002090:	eef0 7a40 	vmov.f32	s15, s0
 8002094:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002118 <_ZN13FuncGenerator17generateWaveformsEv+0x140>
 8002098:	ee67 7a87 	vmul.f32	s15, s15, s14
 800209c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020a0:	ee17 3a90 	vmov	r3, s15
 80020a4:	b29c      	uxth	r4, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 f8b5 	bl	8002220 <_ZNSt5arrayItLj128EEixEj>
 80020b6:	4603      	mov	r3, r0
 80020b8:	4622      	mov	r2, r4
 80020ba:	801a      	strh	r2, [r3, #0]

        // Generate Sawtooth Wave
        sawtoothWave[i] = static_cast<uint16_t>(MAX_AMPLITUDE * (i / static_cast<float>(SAMPLE_COUNT)));
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	ee07 3a90 	vmov	s15, r3
 80020c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020c6:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8002114 <_ZN13FuncGenerator17generateWaveformsEv+0x13c>
 80020ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ce:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002118 <_ZN13FuncGenerator17generateWaveformsEv+0x140>
 80020d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020da:	ee17 3a90 	vmov	r3, s15
 80020de:	b29c      	uxth	r4, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f898 	bl	8002220 <_ZNSt5arrayItLj128EEixEj>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4622      	mov	r2, r4
 80020f4:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < SAMPLE_COUNT; i++) {
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	3301      	adds	r3, #1
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8002100:	f77f af71 	ble.w	8001fe6 <_ZN13FuncGenerator17generateWaveformsEv+0xe>
    }
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	bd90      	pop	{r4, r7, pc}
 800210e:	bf00      	nop
 8002110:	40c90fdb 	.word	0x40c90fdb
 8002114:	43000000 	.word	0x43000000
 8002118:	457ff000 	.word	0x457ff000

0800211c <_ZN13FuncGenerator12setFrequencyEm>:

void FuncGenerator::setFrequency(uint32_t frequency) {
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
    //uint32_t timerPeriod = HAL_RCC_GetPCLK1Freq() / (frequency * SAMPLE_COUNT);
    //__HAL_TIM_SET_AUTORELOAD(&_htim, timerPeriod);
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <_ZN13FuncGenerator12setAmplitudeEf>:

void FuncGenerator::setAmplitude(float amplitude) {
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	ed87 0a00 	vstr	s0, [r7]
    updateWaveform(sineWave.data(), amplitude);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3384      	adds	r3, #132	@ 0x84
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	ed97 0a00 	vldr	s0, [r7]
 800214a:	4619      	mov	r1, r3
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f825 	bl	800219c <_ZN13FuncGenerator14updateWaveformEPtf>
    updateWaveform(squareWave.data(), amplitude);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	ed97 0a00 	vldr	s0, [r7]
 8002160:	4619      	mov	r1, r3
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f81a 	bl	800219c <_ZN13FuncGenerator14updateWaveformEPtf>
    updateWaveform(triangleWave.data(), amplitude);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	ed97 0a00 	vldr	s0, [r7]
 8002176:	4619      	mov	r1, r3
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f80f 	bl	800219c <_ZN13FuncGenerator14updateWaveformEPtf>
    updateWaveform(sawtoothWave.data(), amplitude);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 8002184:	617b      	str	r3, [r7, #20]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	ed97 0a00 	vldr	s0, [r7]
 800218c:	4619      	mov	r1, r3
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f804 	bl	800219c <_ZN13FuncGenerator14updateWaveformEPtf>
}
 8002194:	bf00      	nop
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <_ZN13FuncGenerator14updateWaveformEPtf>:

void FuncGenerator::updateWaveform(uint16_t* waveform, float amplitude) {
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	ed87 0a01 	vstr	s0, [r7, #4]
    for (int i = 0; i < SAMPLE_COUNT; i++) {
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	e021      	b.n	80021f4 <_ZN13FuncGenerator14updateWaveformEPtf+0x58>
        waveform[i] = static_cast<uint16_t>(MAX_AMPLITUDE * amplitude * waveform[i] / MAX_AMPLITUDE);
 80021b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80021b4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002208 <_ZN13FuncGenerator14updateWaveformEPtf+0x6c>
 80021b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	4413      	add	r3, r2
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	ee07 3a90 	vmov	s15, r3
 80021ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021d2:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8002208 <_ZN13FuncGenerator14updateWaveformEPtf+0x6c>
 80021d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	4413      	add	r3, r2
 80021e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021e6:	ee17 2a90 	vmov	r2, s15
 80021ea:	b292      	uxth	r2, r2
 80021ec:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < SAMPLE_COUNT; i++) {
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	3301      	adds	r3, #1
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80021f8:	ddda      	ble.n	80021b0 <_ZN13FuncGenerator14updateWaveformEPtf+0x14>
    }
}
 80021fa:	bf00      	nop
 80021fc:	bf00      	nop
 80021fe:	371c      	adds	r7, #28
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	457ff000 	.word	0x457ff000

0800220c <_ZN13FuncGenerator19startWaveformOutputEv>:
            activeWaveform = sawtoothWave.data();
            break;
    }
}

void FuncGenerator::startWaveformOutput() {
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
    //_bsp.dacStart_DMA(&_hdac, DAC_CHANNEL_1, reinterpret_cast<uint32_t*>(activeWaveform), SAMPLE_COUNT, DAC_ALIGN_12B_R);
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <_ZNSt5arrayItLj128EEixEj>:
      operator[](size_type __n) noexcept
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
	return _M_elems[__n];
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	4413      	add	r3, r2
      }
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <_ZN3LcdC1ER3Bsph>:
 */

#include "Lcd.hpp"


Lcd::Lcd(Bsp& bsp, uint8_t address) : _bsp(bsp), _address(address) {}
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	4613      	mov	r3, r2
 800224a:	71fb      	strb	r3, [r7, #7]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	79fa      	ldrb	r2, [r7, #7]
 8002256:	711a      	strb	r2, [r3, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <_ZN3Lcd11sendCommandEh>:

void Lcd::sendCommand(uint8_t cmd) {
 8002266:	b480      	push	{r7}
 8002268:	b085      	sub	sp, #20
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	460b      	mov	r3, r1
 8002270:	70fb      	strb	r3, [r7, #3]
    uint8_t upperNibble = cmd & 0xF0;
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	f023 030f 	bic.w	r3, r3, #15
 8002278:	73fb      	strb	r3, [r7, #15]
    uint8_t lowerNibble = (cmd << 4) & 0xF0;
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	73bb      	strb	r3, [r7, #14]

    uint8_t dataT[4] = {
        upperNibble | LCD_ENABLE_BIT | LCD_RS_COMMAND,
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	f043 0304 	orr.w	r3, r3, #4
 8002286:	b2db      	uxtb	r3, r3
        upperNibble | LCD_RS_COMMAND,
        lowerNibble | LCD_ENABLE_BIT | LCD_RS_COMMAND,
        lowerNibble | LCD_RS_COMMAND
    };
 8002288:	723b      	strb	r3, [r7, #8]
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	727b      	strb	r3, [r7, #9]
        lowerNibble | LCD_ENABLE_BIT | LCD_RS_COMMAND,
 800228e:	7bbb      	ldrb	r3, [r7, #14]
 8002290:	f043 0304 	orr.w	r3, r3, #4
 8002294:	b2db      	uxtb	r3, r3
    };
 8002296:	72bb      	strb	r3, [r7, #10]
 8002298:	7bbb      	ldrb	r3, [r7, #14]
 800229a:	72fb      	strb	r3, [r7, #11]

    //_bsp.i2cTransmit_Master_IT(hi2c, _address, dataT, 4);
}
 800229c:	bf00      	nop
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <_ZN3Lcd8sendDataEh>:

void Lcd::sendData(uint8_t data) {
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	70fb      	strb	r3, [r7, #3]
    uint8_t upperNibble = data & 0xF0;
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	f023 030f 	bic.w	r3, r3, #15
 80022ba:	73fb      	strb	r3, [r7, #15]
    uint8_t lowerNibble = (data << 4) & 0xF0;
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	011b      	lsls	r3, r3, #4
 80022c0:	73bb      	strb	r3, [r7, #14]

    uint8_t dataT[4] = {
        upperNibble | LCD_ENABLE_BIT | LCD_RS_DATA,
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
 80022c4:	f043 0305 	orr.w	r3, r3, #5
 80022c8:	b2db      	uxtb	r3, r3
        upperNibble | LCD_RS_DATA,
        lowerNibble | LCD_ENABLE_BIT | LCD_RS_DATA,
        lowerNibble | LCD_RS_DATA
    };
 80022ca:	723b      	strb	r3, [r7, #8]
        upperNibble | LCD_RS_DATA,
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	b2db      	uxtb	r3, r3
    };
 80022d4:	727b      	strb	r3, [r7, #9]
        lowerNibble | LCD_ENABLE_BIT | LCD_RS_DATA,
 80022d6:	7bbb      	ldrb	r3, [r7, #14]
 80022d8:	f043 0305 	orr.w	r3, r3, #5
 80022dc:	b2db      	uxtb	r3, r3
    };
 80022de:	72bb      	strb	r3, [r7, #10]
        lowerNibble | LCD_RS_DATA
 80022e0:	7bbb      	ldrb	r3, [r7, #14]
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	b2db      	uxtb	r3, r3
    };
 80022e8:	72fb      	strb	r3, [r7, #11]

    //_bsp.i2cTransmit_Master_IT(hi2c, _address, dataT, 4);
}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <_ZN3Lcd4initEv>:

void Lcd::init() {
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
    _bsp.delay(50);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2132      	movs	r1, #50	@ 0x32
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fd84 	bl	8001e12 <_ZN3Bsp5delayEm>
    sendCommand(0x30);
 800230a:	2130      	movs	r1, #48	@ 0x30
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff ffaa 	bl	8002266 <_ZN3Lcd11sendCommandEh>
    _bsp.delay(5);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2105      	movs	r1, #5
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fd7a 	bl	8001e12 <_ZN3Bsp5delayEm>
    sendCommand(0x30);
 800231e:	2130      	movs	r1, #48	@ 0x30
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff ffa0 	bl	8002266 <_ZN3Lcd11sendCommandEh>
    _bsp.delay(1);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2101      	movs	r1, #1
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fd70 	bl	8001e12 <_ZN3Bsp5delayEm>
    sendCommand(0x30);
 8002332:	2130      	movs	r1, #48	@ 0x30
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ff96 	bl	8002266 <_ZN3Lcd11sendCommandEh>
    _bsp.delay(10);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	210a      	movs	r1, #10
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fd66 	bl	8001e12 <_ZN3Bsp5delayEm>
    sendCommand(0x20);
 8002346:	2120      	movs	r1, #32
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff8c 	bl	8002266 <_ZN3Lcd11sendCommandEh>
    _bsp.delay(10);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	210a      	movs	r1, #10
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fd5c 	bl	8001e12 <_ZN3Bsp5delayEm>

    sendCommand(LCD_CMD_FUNCTION_SET);
 800235a:	2128      	movs	r1, #40	@ 0x28
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ff82 	bl	8002266 <_ZN3Lcd11sendCommandEh>
    sendCommand(LCD_CMD_DISPLAY_OFF);
 8002362:	2108      	movs	r1, #8
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff ff7e 	bl	8002266 <_ZN3Lcd11sendCommandEh>
    sendCommand(LCD_CMD_CLEAR_DISPLAY);
 800236a:	2101      	movs	r1, #1
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ff7a 	bl	8002266 <_ZN3Lcd11sendCommandEh>
    _bsp.delay(2);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2102      	movs	r1, #2
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fd4a 	bl	8001e12 <_ZN3Bsp5delayEm>
    sendCommand(LCD_CMD_ENTRY_MODE_SET);
 800237e:	2106      	movs	r1, #6
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff ff70 	bl	8002266 <_ZN3Lcd11sendCommandEh>
    sendCommand(LCD_CMD_DISPLAY_ON);
 8002386:	210c      	movs	r1, #12
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ff6c 	bl	8002266 <_ZN3Lcd11sendCommandEh>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <_ZN3Lcd10sendStringEPKc>:
        default: return;
    }
    sendCommand(address);
}

void Lcd::sendString(const char* str) {
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	6039      	str	r1, [r7, #0]
    while (*str) sendData(*str++);
 80023a0:	e007      	b.n	80023b2 <_ZN3Lcd10sendStringEPKc+0x1c>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	603a      	str	r2, [r7, #0]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	4619      	mov	r1, r3
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ff7b 	bl	80022a8 <_ZN3Lcd8sendDataEh>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1f3      	bne.n	80023a2 <_ZN3Lcd10sendStringEPKc+0xc>
}
 80023ba:	bf00      	nop
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <MainCpp>:
Dac exDac(bsp);
#endif


__attribute__((noreturn)) void MainCpp()
{
 80023c4:	b590      	push	{r4, r7, lr}
 80023c6:	b089      	sub	sp, #36	@ 0x24
 80023c8:	af00      	add	r7, sp, #0
	bool interface{false};
 80023ca:	2300      	movs	r3, #0
 80023cc:	77fb      	strb	r3, [r7, #31]
	do
	{
		Status status = connection.interfaceHandshake(Major_Version, Minor_Version);
 80023ce:	2200      	movs	r2, #0
 80023d0:	2101      	movs	r1, #1
 80023d2:	482d      	ldr	r0, [pc, #180]	@ (8002488 <MainCpp+0xc4>)
 80023d4:	f000 f8c2 	bl	800255c <_ZN9SerialCtn18interfaceHandshakeEhh>
 80023d8:	4603      	mov	r3, r0
 80023da:	77bb      	strb	r3, [r7, #30]
		if (status == Status::OK) {
 80023dc:	7fbb      	ldrb	r3, [r7, #30]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <MainCpp+0x22>
			interface = true;
 80023e2:	2301      	movs	r3, #1
 80023e4:	77fb      	strb	r3, [r7, #31]
		}
		bsp.delay(1000);
 80023e6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80023ea:	4828      	ldr	r0, [pc, #160]	@ (800248c <MainCpp+0xc8>)
 80023ec:	f7ff fd11 	bl	8001e12 <_ZN3Bsp5delayEm>

	} while (!interface);
 80023f0:	7ffb      	ldrb	r3, [r7, #31]
 80023f2:	f083 0301 	eor.w	r3, r3, #1
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1e8      	bne.n	80023ce <MainCpp+0xa>

	ReceivedData data = connection.processReceivedData();
 80023fc:	f107 0310 	add.w	r3, r7, #16
 8002400:	4921      	ldr	r1, [pc, #132]	@ (8002488 <MainCpp+0xc4>)
 8002402:	4618      	mov	r0, r3
 8002404:	f000 f920 	bl	8002648 <_ZN9SerialCtn19processReceivedDataEv>
	lcd.init();
 8002408:	4821      	ldr	r0, [pc, #132]	@ (8002490 <MainCpp+0xcc>)
 800240a:	f7ff ff74 	bl	80022f6 <_ZN3Lcd4initEv>
	lcd.sendString("LCD Online");
 800240e:	4921      	ldr	r1, [pc, #132]	@ (8002494 <MainCpp+0xd0>)
 8002410:	481f      	ldr	r0, [pc, #124]	@ (8002490 <MainCpp+0xcc>)
 8002412:	f7ff ffc0 	bl	8002396 <_ZN3Lcd10sendStringEPKc>


	while(true)
	{
		if(usbReceivedFlag)
 8002416:	4b20      	ldr	r3, [pc, #128]	@ (8002498 <MainCpp+0xd4>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d020      	beq.n	8002462 <MainCpp+0x9e>
		{
			data = connection.processReceivedData();
 8002420:	463b      	mov	r3, r7
 8002422:	4919      	ldr	r1, [pc, #100]	@ (8002488 <MainCpp+0xc4>)
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f90f 	bl	8002648 <_ZN9SerialCtn19processReceivedDataEv>
 800242a:	f107 0310 	add.w	r3, r7, #16
 800242e:	463c      	mov	r4, r7
 8002430:	6820      	ldr	r0, [r4, #0]
 8002432:	6861      	ldr	r1, [r4, #4]
 8002434:	68a2      	ldr	r2, [r4, #8]
 8002436:	c307      	stmia	r3!, {r0, r1, r2}
 8002438:	89a2      	ldrh	r2, [r4, #12]
 800243a:	801a      	strh	r2, [r3, #0]
			generate.setAmplitude(data.amplitude);
 800243c:	f8d7 3015 	ldr.w	r3, [r7, #21]
 8002440:	ee00 3a10 	vmov	s0, r3
 8002444:	4815      	ldr	r0, [pc, #84]	@ (800249c <MainCpp+0xd8>)
 8002446:	f7ff fe74 	bl	8002132 <_ZN13FuncGenerator12setAmplitudeEf>
			generate.setFrequency(data.frequency);
 800244a:	f8d7 3011 	ldr.w	r3, [r7, #17]
 800244e:	ee07 3a90 	vmov	s15, r3
 8002452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002456:	ee17 1a90 	vmov	r1, s15
 800245a:	4810      	ldr	r0, [pc, #64]	@ (800249c <MainCpp+0xd8>)
 800245c:	f7ff fe5e 	bl	800211c <_ZN13FuncGenerator12setFrequencyEm>
 8002460:	e7d9      	b.n	8002416 <MainCpp+0x52>
		}
		else
		{
			generate.startWaveformOutput();
 8002462:	480e      	ldr	r0, [pc, #56]	@ (800249c <MainCpp+0xd8>)
 8002464:	f7ff fed2 	bl	800220c <_ZN13FuncGenerator19startWaveformOutputEv>
			analyze.startAnalysing();
 8002468:	480d      	ldr	r0, [pc, #52]	@ (80024a0 <MainCpp+0xdc>)
 800246a:	f7ff fd7c 	bl	8001f66 <_ZN12FuncAnalyser14startAnalysingEv>

			#ifdef USE_EXTERN_ADC
			exAnalyze.requestFFT();
 800246e:	480d      	ldr	r0, [pc, #52]	@ (80024a4 <MainCpp+0xe0>)
 8002470:	f7ff fcfb 	bl	8001e6a <_ZN11AnalyzerExt10requestFFTEv>
			#endif

			#ifdef USE_EXTERN_DAC
			exDac.voltageToCode(3.3, -6, 6);
 8002474:	eeb1 1a08 	vmov.f32	s2, #24	@ 0x40c00000  6.0
 8002478:	eef9 0a08 	vmov.f32	s1, #152	@ 0xc0c00000 -6.0
 800247c:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80024a8 <MainCpp+0xe4>
 8002480:	480a      	ldr	r0, [pc, #40]	@ (80024ac <MainCpp+0xe8>)
 8002482:	f7ff fd11 	bl	8001ea8 <_ZN3Dac13voltageToCodeEfff>
		if(usbReceivedFlag)
 8002486:	e7c6      	b.n	8002416 <MainCpp+0x52>
 8002488:	24002d0c 	.word	0x24002d0c
 800248c:	24000870 	.word	0x24000870
 8002490:	24002d04 	.word	0x24002d04
 8002494:	080148a4 	.word	0x080148a4
 8002498:	2400300c 	.word	0x2400300c
 800249c:	24002878 	.word	0x24002878
 80024a0:	24000874 	.word	0x24000874
 80024a4:	24002d10 	.word	0x24002d10
 80024a8:	40533333 	.word	0x40533333
 80024ac:	24002d14 	.word	0x24002d14

080024b0 <_Z41__static_initialization_and_destruction_0v>:
			#endif
		}
	}
}
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
FuncAnalyser analyze(bsp);
 80024b4:	490d      	ldr	r1, [pc, #52]	@ (80024ec <_Z41__static_initialization_and_destruction_0v+0x3c>)
 80024b6:	480e      	ldr	r0, [pc, #56]	@ (80024f0 <_Z41__static_initialization_and_destruction_0v+0x40>)
 80024b8:	f7ff fd46 	bl	8001f48 <_ZN12FuncAnalyserC1ER3Bsp>
FuncGenerator generate(bsp);
 80024bc:	490b      	ldr	r1, [pc, #44]	@ (80024ec <_Z41__static_initialization_and_destruction_0v+0x3c>)
 80024be:	480d      	ldr	r0, [pc, #52]	@ (80024f4 <_Z41__static_initialization_and_destruction_0v+0x44>)
 80024c0:	f7ff fd6b 	bl	8001f9a <_ZN13FuncGeneratorC1ER3Bsp>
Lcd lcd(bsp, SLAVE_ADDRESS);
 80024c4:	224e      	movs	r2, #78	@ 0x4e
 80024c6:	4909      	ldr	r1, [pc, #36]	@ (80024ec <_Z41__static_initialization_and_destruction_0v+0x3c>)
 80024c8:	480b      	ldr	r0, [pc, #44]	@ (80024f8 <_Z41__static_initialization_and_destruction_0v+0x48>)
 80024ca:	f7ff feb8 	bl	800223e <_ZN3LcdC1ER3Bsph>
SerialCtn connection(bsp);
 80024ce:	4907      	ldr	r1, [pc, #28]	@ (80024ec <_Z41__static_initialization_and_destruction_0v+0x3c>)
 80024d0:	480a      	ldr	r0, [pc, #40]	@ (80024fc <_Z41__static_initialization_and_destruction_0v+0x4c>)
 80024d2:	f000 f826 	bl	8002522 <_ZN9SerialCtnC1ER3Bsp>
AnalyzerExt exAnalyze(bsp);
 80024d6:	4905      	ldr	r1, [pc, #20]	@ (80024ec <_Z41__static_initialization_and_destruction_0v+0x3c>)
 80024d8:	4809      	ldr	r0, [pc, #36]	@ (8002500 <_Z41__static_initialization_and_destruction_0v+0x50>)
 80024da:	f7ff fca6 	bl	8001e2a <_ZN11AnalyzerExtC1ER3Bsp>
Dac exDac(bsp);
 80024de:	4903      	ldr	r1, [pc, #12]	@ (80024ec <_Z41__static_initialization_and_destruction_0v+0x3c>)
 80024e0:	4808      	ldr	r0, [pc, #32]	@ (8002504 <_Z41__static_initialization_and_destruction_0v+0x54>)
 80024e2:	f7ff fcd2 	bl	8001e8a <_ZN3DacC1ER3Bsp>
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	24000870 	.word	0x24000870
 80024f0:	24000874 	.word	0x24000874
 80024f4:	24002878 	.word	0x24002878
 80024f8:	24002d04 	.word	0x24002d04
 80024fc:	24002d0c 	.word	0x24002d0c
 8002500:	24002d10 	.word	0x24002d10
 8002504:	24002d14 	.word	0x24002d14

08002508 <_GLOBAL__sub_I_bsp>:
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
 800250c:	f7ff ffd0 	bl	80024b0 <_Z41__static_initialization_and_destruction_0v>
 8002510:	bd80      	pop	{r7, pc}

08002512 <_ZSt21is_constant_evaluatedv>:

  /// Returns true only when called during constant evaluation.
  /// @since C++20
  constexpr inline bool
  is_constant_evaluated() noexcept
  {
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
    if consteval { return true; } else { return false; }
#else
    return __builtin_is_constant_evaluated();
 8002516:	2300      	movs	r3, #0
#endif
  }
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <_ZN9SerialCtnC1ER3Bsp>:
#include <algorithm>


uint8_t UsbRxDataBuffer[USB_RX_BUFF_SIZE];

SerialCtn::SerialCtn(Bsp& bsp): _bsp(bsp){}
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	6039      	str	r1, [r7, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <_ZNSt5arrayIhLj15EEixEj>:
      operator[](size_type __n) noexcept
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
	return _M_elems[__n];
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	4413      	add	r3, r2
      }
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <_ZN9SerialCtn18interfaceHandshakeEhh>:

Status SerialCtn::interfaceHandshake(uint8_t major, uint8_t minor)
{
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b08f      	sub	sp, #60	@ 0x3c
 8002560:	af02      	add	r7, sp, #8
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	70fb      	strb	r3, [r7, #3]
 8002568:	4613      	mov	r3, r2
 800256a:	70bb      	strb	r3, [r7, #2]
	char versionStr[18];
	snprintf(versionStr, sizeof(versionStr), "Version: %d.%d", major, minor);
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	78bb      	ldrb	r3, [r7, #2]
 8002570:	f107 001c 	add.w	r0, r7, #28
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	4613      	mov	r3, r2
 8002578:	4a21      	ldr	r2, [pc, #132]	@ (8002600 <_ZN9SerialCtn18interfaceHandshakeEhh+0xa4>)
 800257a:	2112      	movs	r1, #18
 800257c:	f011 fcd2 	bl	8013f24 <sniprintf>
	_bsp.usbTransmit(reinterpret_cast<uint8_t*>(versionStr), strlen(versionStr));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681c      	ldr	r4, [r3, #0]
 8002584:	f107 031c 	add.w	r3, r7, #28
 8002588:	4618      	mov	r0, r3
 800258a:	f7fd fec1 	bl	8000310 <strlen>
 800258e:	4603      	mov	r3, r0
 8002590:	b29a      	uxth	r2, r3
 8002592:	f107 031c 	add.w	r3, r7, #28
 8002596:	4619      	mov	r1, r3
 8002598:	4620      	mov	r0, r4
 800259a:	f7ff fc22 	bl	8001de2 <_ZN3Bsp11usbTransmitEPht>


	UsbArray dataReceived = receiveData();
 800259e:	f107 030c 	add.w	r3, r7, #12
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 f82d 	bl	8002604 <_ZN9SerialCtn11receiveDataEv>

	if(dataReceived[0] != 0xFF && dataReceived[1] != 0xAA && dataReceived[2] != 0xFF)
 80025aa:	f107 030c 	add.w	r3, r7, #12
 80025ae:	2100      	movs	r1, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ffc5 	bl	8002540 <_ZNSt5arrayIhLj15EEixEj>
 80025b6:	4603      	mov	r3, r0
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2bff      	cmp	r3, #255	@ 0xff
 80025bc:	d015      	beq.n	80025ea <_ZN9SerialCtn18interfaceHandshakeEhh+0x8e>
 80025be:	f107 030c 	add.w	r3, r7, #12
 80025c2:	2101      	movs	r1, #1
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ffbb 	bl	8002540 <_ZNSt5arrayIhLj15EEixEj>
 80025ca:	4603      	mov	r3, r0
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2baa      	cmp	r3, #170	@ 0xaa
 80025d0:	d00b      	beq.n	80025ea <_ZN9SerialCtn18interfaceHandshakeEhh+0x8e>
 80025d2:	f107 030c 	add.w	r3, r7, #12
 80025d6:	2102      	movs	r1, #2
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ffb1 	bl	8002540 <_ZNSt5arrayIhLj15EEixEj>
 80025de:	4603      	mov	r3, r0
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2bff      	cmp	r3, #255	@ 0xff
 80025e4:	d001      	beq.n	80025ea <_ZN9SerialCtn18interfaceHandshakeEhh+0x8e>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <_ZN9SerialCtn18interfaceHandshakeEhh+0x90>
 80025ea:	2300      	movs	r3, #0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <_ZN9SerialCtn18interfaceHandshakeEhh+0x98>
		return Status::ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <_ZN9SerialCtn18interfaceHandshakeEhh+0x9a>

	return Status::OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3734      	adds	r7, #52	@ 0x34
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd90      	pop	{r4, r7, pc}
 80025fe:	bf00      	nop
 8002600:	080148b0 	.word	0x080148b0

08002604 <_ZN9SerialCtn11receiveDataEv>:

UsbArray SerialCtn::receiveData()
{
 8002604:	b5b0      	push	{r4, r5, r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
	// C array into C++ array!
	UsbArray dataReceived = {};
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	461a      	mov	r2, r3
 8002612:	2300      	movs	r3, #0
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	6053      	str	r3, [r2, #4]
 8002618:	6093      	str	r3, [r2, #8]
 800261a:	f8c2 300b 	str.w	r3, [r2, #11]
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
    { return __arr; }
 800261e:	4c08      	ldr	r4, [pc, #32]	@ (8002640 <_ZN9SerialCtn11receiveDataEv+0x3c>)
   */
  template<typename _Tp, size_t _Nm>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline _GLIBCXX14_CONSTEXPR _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
    { return __arr + _Nm; }
 8002620:	4d08      	ldr	r5, [pc, #32]	@ (8002644 <_ZN9SerialCtn11receiveDataEv+0x40>)
	std::copy(std::begin(UsbRxDataBuffer), std::end(UsbRxDataBuffer), dataReceived.begin());
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f8e8 	bl	80027f8 <_ZNSt5arrayIhLj15EE5beginEv>
 8002628:	4603      	mov	r3, r0
 800262a:	461a      	mov	r2, r3
 800262c:	4629      	mov	r1, r5
 800262e:	4620      	mov	r0, r4
 8002630:	f000 f8ef 	bl	8002812 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
	return dataReceived;
 8002634:	bf00      	nop
}
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bdb0      	pop	{r4, r5, r7, pc}
 800263e:	bf00      	nop
 8002640:	24002d18 	.word	0x24002d18
 8002644:	24002d27 	.word	0x24002d27

08002648 <_ZN9SerialCtn19processReceivedDataEv>:

ReceivedData SerialCtn::processReceivedData()
{
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b08b      	sub	sp, #44	@ 0x2c
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
	ReceivedData data = {};
 8002652:	f107 0318 	add.w	r3, r7, #24
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	819a      	strh	r2, [r3, #12]
	UsbArray dataReceived = receiveData();
 8002660:	f107 0308 	add.w	r3, r7, #8
 8002664:	6839      	ldr	r1, [r7, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff ffcc 	bl	8002604 <_ZN9SerialCtn11receiveDataEv>

	// Oscilloscope
	if(dataReceived[0] != 0x00 && dataReceived[3] != 0x00 && dataReceived[6] != 0x00 && dataReceived[9] != 0x00 && dataReceived[13] != 0x00)
 800266c:	f107 0308 	add.w	r3, r7, #8
 8002670:	2100      	movs	r1, #0
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff ff64 	bl	8002540 <_ZNSt5arrayIhLj15EEixEj>
 8002678:	4603      	mov	r3, r0
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d029      	beq.n	80026d4 <_ZN9SerialCtn19processReceivedDataEv+0x8c>
 8002680:	f107 0308 	add.w	r3, r7, #8
 8002684:	2103      	movs	r1, #3
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ff5a 	bl	8002540 <_ZNSt5arrayIhLj15EEixEj>
 800268c:	4603      	mov	r3, r0
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d01f      	beq.n	80026d4 <_ZN9SerialCtn19processReceivedDataEv+0x8c>
 8002694:	f107 0308 	add.w	r3, r7, #8
 8002698:	2106      	movs	r1, #6
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff50 	bl	8002540 <_ZNSt5arrayIhLj15EEixEj>
 80026a0:	4603      	mov	r3, r0
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d015      	beq.n	80026d4 <_ZN9SerialCtn19processReceivedDataEv+0x8c>
 80026a8:	f107 0308 	add.w	r3, r7, #8
 80026ac:	2109      	movs	r1, #9
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff ff46 	bl	8002540 <_ZNSt5arrayIhLj15EEixEj>
 80026b4:	4603      	mov	r3, r0
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00b      	beq.n	80026d4 <_ZN9SerialCtn19processReceivedDataEv+0x8c>
 80026bc:	f107 0308 	add.w	r3, r7, #8
 80026c0:	210d      	movs	r1, #13
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff ff3c 	bl	8002540 <_ZNSt5arrayIhLj15EEixEj>
 80026c8:	4603      	mov	r3, r0
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <_ZN9SerialCtn19processReceivedDataEv+0x8c>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <_ZN9SerialCtn19processReceivedDataEv+0x8e>
 80026d4:	2300      	movs	r3, #0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00d      	beq.n	80026f6 <_ZN9SerialCtn19processReceivedDataEv+0xae>
	{
		data.stop = true;
 80026da:	2301      	movs	r3, #1
 80026dc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		return data;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	461c      	mov	r4, r3
 80026e4:	f107 0318 	add.w	r3, r7, #24
 80026e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80026ea:	6020      	str	r0, [r4, #0]
 80026ec:	6061      	str	r1, [r4, #4]
 80026ee:	60a2      	str	r2, [r4, #8]
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	81a3      	strh	r3, [r4, #12]
 80026f4:	e079      	b.n	80027ea <_ZN9SerialCtn19processReceivedDataEv+0x1a2>
	}
	// Func generator
	else if (dataReceived[0] != 0x01 || dataReceived[0] != 0x02 || dataReceived[0] != 0x03 || dataReceived[0] != 0x04 || dataReceived[0] != 0x05)
 80026f6:	f107 0308 	add.w	r3, r7, #8
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ff1f 	bl	8002540 <_ZNSt5arrayIhLj15EEixEj>
 8002702:	4603      	mov	r3, r0
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d127      	bne.n	800275a <_ZN9SerialCtn19processReceivedDataEv+0x112>
 800270a:	f107 0308 	add.w	r3, r7, #8
 800270e:	2100      	movs	r1, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff15 	bl	8002540 <_ZNSt5arrayIhLj15EEixEj>
 8002716:	4603      	mov	r3, r0
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d11d      	bne.n	800275a <_ZN9SerialCtn19processReceivedDataEv+0x112>
 800271e:	f107 0308 	add.w	r3, r7, #8
 8002722:	2100      	movs	r1, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff0b 	bl	8002540 <_ZNSt5arrayIhLj15EEixEj>
 800272a:	4603      	mov	r3, r0
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b03      	cmp	r3, #3
 8002730:	d113      	bne.n	800275a <_ZN9SerialCtn19processReceivedDataEv+0x112>
 8002732:	f107 0308 	add.w	r3, r7, #8
 8002736:	2100      	movs	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff01 	bl	8002540 <_ZNSt5arrayIhLj15EEixEj>
 800273e:	4603      	mov	r3, r0
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b04      	cmp	r3, #4
 8002744:	d109      	bne.n	800275a <_ZN9SerialCtn19processReceivedDataEv+0x112>
 8002746:	f107 0308 	add.w	r3, r7, #8
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fef7 	bl	8002540 <_ZNSt5arrayIhLj15EEixEj>
 8002752:	4603      	mov	r3, r0
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b05      	cmp	r3, #5
 8002758:	d001      	beq.n	800275e <_ZN9SerialCtn19processReceivedDataEv+0x116>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <_ZN9SerialCtn19processReceivedDataEv+0x118>
 800275e:	2300      	movs	r3, #0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00e      	beq.n	8002782 <_ZN9SerialCtn19processReceivedDataEv+0x13a>
	{
		_bsp.usbTransmit((uint8_t*)"Invalid data\n", 15);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	220f      	movs	r2, #15
 800276a:	4922      	ldr	r1, [pc, #136]	@ (80027f4 <_ZN9SerialCtn19processReceivedDataEv+0x1ac>)
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fb38 	bl	8001de2 <_ZN3Bsp11usbTransmitEPht>
		return {};
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	461a      	mov	r2, r3
 8002776:	2300      	movs	r3, #0
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	6053      	str	r3, [r2, #4]
 800277c:	6093      	str	r3, [r2, #8]
 800277e:	8193      	strh	r3, [r2, #12]
 8002780:	e033      	b.n	80027ea <_ZN9SerialCtn19processReceivedDataEv+0x1a2>
	}
	else
	{
		data.type = dataReceived[0];
 8002782:	f107 0308 	add.w	r3, r7, #8
 8002786:	2100      	movs	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fed9 	bl	8002540 <_ZNSt5arrayIhLj15EEixEj>
 800278e:	4603      	mov	r3, r0
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	763b      	strb	r3, [r7, #24]
		std::memcpy(&data.frequency, &dataReceived[1], sizeof(float));
 8002794:	f107 0308 	add.w	r3, r7, #8
 8002798:	2101      	movs	r1, #1
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fed0 	bl	8002540 <_ZNSt5arrayIhLj15EEixEj>
 80027a0:	4603      	mov	r3, r0
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f8c7 3019 	str.w	r3, [r7, #25]
		std::memcpy(&data.amplitude, &dataReceived[5], sizeof(float));
 80027a8:	f107 0308 	add.w	r3, r7, #8
 80027ac:	2105      	movs	r1, #5
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fec6 	bl	8002540 <_ZNSt5arrayIhLj15EEixEj>
 80027b4:	4603      	mov	r3, r0
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f8c7 301d 	str.w	r3, [r7, #29]
		std::memcpy(&data.offset, &dataReceived[9], sizeof(float));
 80027bc:	f107 0308 	add.w	r3, r7, #8
 80027c0:	2109      	movs	r1, #9
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff febc 	bl	8002540 <_ZNSt5arrayIhLj15EEixEj>
 80027c8:	4603      	mov	r3, r0
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
		data.stop = false;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	}

	return data;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	461c      	mov	r4, r3
 80027da:	f107 0318 	add.w	r3, r7, #24
 80027de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80027e0:	6020      	str	r0, [r4, #0]
 80027e2:	6061      	str	r1, [r4, #4]
 80027e4:	60a2      	str	r2, [r4, #8]
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	81a3      	strh	r3, [r4, #12]
}
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	372c      	adds	r7, #44	@ 0x2c
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd90      	pop	{r4, r7, pc}
 80027f2:	bf00      	nop
 80027f4:	080148c0 	.word	0x080148c0

080027f8 <_ZNSt5arrayIhLj15EE5beginEv>:
      begin() noexcept
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	60fb      	str	r3, [r7, #12]
      { return static_cast<pointer>(_M_elems); }
 8002804:	68fb      	ldr	r3, [r7, #12]
      { return iterator(data()); }
 8002806:	4618      	mov	r0, r3
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8002812:	b590      	push	{r4, r7, lr}
 8002814:	b085      	sub	sp, #20
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f80f 	bl	8002842 <_ZSt12__miter_baseIPhET_S1_>
 8002824:	4604      	mov	r4, r0
 8002826:	68b8      	ldr	r0, [r7, #8]
 8002828:	f000 f80b 	bl	8002842 <_ZSt12__miter_baseIPhET_S1_>
 800282c:	4603      	mov	r3, r0
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	4619      	mov	r1, r3
 8002832:	4620      	mov	r0, r4
 8002834:	f000 f810 	bl	8002858 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 8002838:	4603      	mov	r3, r0
    }
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	bd90      	pop	{r4, r7, pc}

08002842 <_ZSt12__miter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
    { return __it; }
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002858:	b5b0      	push	{r4, r5, r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f81a 	bl	800289e <_ZSt12__niter_baseIPhET_S1_>
 800286a:	4604      	mov	r4, r0
 800286c:	68b8      	ldr	r0, [r7, #8]
 800286e:	f000 f816 	bl	800289e <_ZSt12__niter_baseIPhET_S1_>
 8002872:	4605      	mov	r5, r0
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f811 	bl	800289e <_ZSt12__niter_baseIPhET_S1_>
 800287c:	4603      	mov	r3, r0
 800287e:	461a      	mov	r2, r3
 8002880:	4629      	mov	r1, r5
 8002882:	4620      	mov	r0, r4
 8002884:	f000 f816 	bl	80028b4 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 8002888:	4602      	mov	r2, r0
 800288a:	1d3b      	adds	r3, r7, #4
 800288c:	4611      	mov	r1, r2
 800288e:	4618      	mov	r0, r3
 8002890:	f000 f820 	bl	80028d4 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8002894:	4603      	mov	r3, r0
    }
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bdb0      	pop	{r4, r5, r7, pc}

0800289e <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
    { return __it; }
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f811 	bl	80028ec <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 80028ca:	4603      	mov	r3, r0
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
    { return __res; }
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 80028f8:	f7ff fe0b 	bl	8002512 <_ZSt21is_constant_evaluatedv>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d006      	beq.n	8002910 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_+0x24>
	  __copy_m(__first, __last, __result);
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	68b9      	ldr	r1, [r7, #8]
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f80d 	bl	8002926 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPhS3_EET0_T_S5_S4_>
 800290c:	4603      	mov	r3, r0
 800290e:	e006      	b.n	800291e <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f828 	bl	800296a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_>
 800291a:	4603      	mov	r3, r0
 800291c:	bf00      	nop
    }
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPhS3_EET0_T_S5_S4_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8002926:	b480      	push	{r7}
 8002928:	b087      	sub	sp, #28
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	e00c      	b.n	8002956 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPhS3_EET0_T_S5_S4_+0x30>
	      *__result = *__first;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	781a      	ldrb	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	701a      	strb	r2, [r3, #0]
	      ++__first;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	3301      	adds	r3, #1
 8002948:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3301      	adds	r3, #1
 800294e:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	3b01      	subs	r3, #1
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2b00      	cmp	r3, #0
 800295a:	dcef      	bgt.n	800293c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPhS3_EET0_T_S5_S4_+0x16>
	  return __result;
 800295c:	687b      	ldr	r3, [r7, #4]
	}
 800295e:	4618      	mov	r0, r3
 8002960:	371c      	adds	r7, #28
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_>:
	__copy_m(_Tp* __first, _Tp* __last, _Up* __result)
 800296a:	b580      	push	{r7, lr}
 800296c:	b086      	sub	sp, #24
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	617b      	str	r3, [r7, #20]
	  if (__builtin_expect(_Num > 1, true))
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b01      	cmp	r3, #1
 8002982:	bfcc      	ite	gt
 8002984:	2301      	movgt	r3, #1
 8002986:	2300      	movle	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d006      	beq.n	800299c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_+0x32>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	461a      	mov	r2, r3
 8002992:	68f9      	ldr	r1, [r7, #12]
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f011 fafb 	bl	8013f90 <memmove>
 800299a:	e006      	b.n	80029aa <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_+0x40>
	  else if (_Num == 1)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d103      	bne.n	80029aa <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhhEEPT0_PT_S6_S4_+0x40>
	      __assign_one(__result, __first);
 80029a2:	68f9      	ldr	r1, [r7, #12]
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f807 	bl	80029b8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE12__assign_oneIhhEEvPT_PT0_>
	  return __result + _Num;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	4413      	add	r3, r2
	}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE12__assign_oneIhhEEvPT_PT0_>:
	__assign_one(_Tp* __to, _Up* __from)
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
	{ *__to = *__from; }
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	781a      	ldrb	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
	...

080029d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029de:	2003      	movs	r0, #3
 80029e0:	f002 f874 	bl	8004acc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029e4:	f007 f85a 	bl	8009a9c <HAL_RCC_GetSysClockFreq>
 80029e8:	4602      	mov	r2, r0
 80029ea:	4b15      	ldr	r3, [pc, #84]	@ (8002a40 <HAL_Init+0x68>)
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	0a1b      	lsrs	r3, r3, #8
 80029f0:	f003 030f 	and.w	r3, r3, #15
 80029f4:	4913      	ldr	r1, [pc, #76]	@ (8002a44 <HAL_Init+0x6c>)
 80029f6:	5ccb      	ldrb	r3, [r1, r3]
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002a00:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a02:	4b0f      	ldr	r3, [pc, #60]	@ (8002a40 <HAL_Init+0x68>)
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8002a44 <HAL_Init+0x6c>)
 8002a0c:	5cd3      	ldrb	r3, [r2, r3]
 8002a0e:	f003 031f 	and.w	r3, r3, #31
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	fa22 f303 	lsr.w	r3, r2, r3
 8002a18:	4a0b      	ldr	r2, [pc, #44]	@ (8002a48 <HAL_Init+0x70>)
 8002a1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002a4c <HAL_Init+0x74>)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a22:	2000      	movs	r0, #0
 8002a24:	f000 f814 	bl	8002a50 <HAL_InitTick>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e002      	b.n	8002a38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a32:	f7fe fd25 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	58024400 	.word	0x58024400
 8002a44:	08014918 	.word	0x08014918
 8002a48:	24000004 	.word	0x24000004
 8002a4c:	24000000 	.word	0x24000000

08002a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a58:	4b15      	ldr	r3, [pc, #84]	@ (8002ab0 <HAL_InitTick+0x60>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e021      	b.n	8002aa8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a64:	4b13      	ldr	r3, [pc, #76]	@ (8002ab4 <HAL_InitTick+0x64>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b11      	ldr	r3, [pc, #68]	@ (8002ab0 <HAL_InitTick+0x60>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f002 f859 	bl	8004b32 <HAL_SYSTICK_Config>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e00e      	b.n	8002aa8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b0f      	cmp	r3, #15
 8002a8e:	d80a      	bhi.n	8002aa6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a90:	2200      	movs	r2, #0
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	f04f 30ff 	mov.w	r0, #4294967295
 8002a98:	f002 f823 	bl	8004ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a9c:	4a06      	ldr	r2, [pc, #24]	@ (8002ab8 <HAL_InitTick+0x68>)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	e000      	b.n	8002aa8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	2400000c 	.word	0x2400000c
 8002ab4:	24000000 	.word	0x24000000
 8002ab8:	24000008 	.word	0x24000008

08002abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <HAL_IncTick+0x20>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <HAL_IncTick+0x24>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4413      	add	r3, r2
 8002acc:	4a04      	ldr	r2, [pc, #16]	@ (8002ae0 <HAL_IncTick+0x24>)
 8002ace:	6013      	str	r3, [r2, #0]
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	2400000c 	.word	0x2400000c
 8002ae0:	24002d28 	.word	0x24002d28

08002ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae8:	4b03      	ldr	r3, [pc, #12]	@ (8002af8 <HAL_GetTick+0x14>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	24002d28 	.word	0x24002d28

08002afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b04:	f7ff ffee 	bl	8002ae4 <HAL_GetTick>
 8002b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b14:	d005      	beq.n	8002b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b16:	4b0a      	ldr	r3, [pc, #40]	@ (8002b40 <HAL_Delay+0x44>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4413      	add	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b22:	bf00      	nop
 8002b24:	f7ff ffde 	bl	8002ae4 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d8f7      	bhi.n	8002b24 <HAL_Delay+0x28>
  {
  }
}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	2400000c 	.word	0x2400000c

08002b44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	609a      	str	r2, [r3, #8]
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	609a      	str	r2, [r3, #8]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a18      	ldr	r2, [pc, #96]	@ (8002c1c <LL_ADC_SetChannelPreselection+0x70>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d027      	beq.n	8002c0e <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d107      	bne.n	8002bd8 <LL_ADC_SetChannelPreselection+0x2c>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	0e9b      	lsrs	r3, r3, #26
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	e015      	b.n	8002c04 <LL_ADC_SetChannelPreselection+0x58>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8002bee:	2320      	movs	r3, #32
 8002bf0:	e003      	b.n	8002bfa <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	fab3 f383 	clz	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	2201      	movs	r2, #1
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	69d2      	ldr	r2, [r2, #28]
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	58026000 	.word	0x58026000

08002c20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	3360      	adds	r3, #96	@ 0x60
 8002c32:	461a      	mov	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4a10      	ldr	r2, [pc, #64]	@ (8002c80 <LL_ADC_SetOffset+0x60>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d10b      	bne.n	8002c5c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002c5a:	e00b      	b.n	8002c74 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	601a      	str	r2, [r3, #0]
}
 8002c74:	bf00      	nop
 8002c76:	371c      	adds	r7, #28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	58026000 	.word	0x58026000

08002c84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3360      	adds	r3, #96	@ 0x60
 8002c92:	461a      	mov	r2, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	611a      	str	r2, [r3, #16]
}
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
	...

08002ce4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8002d24 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00e      	beq.n	8002d16 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3360      	adds	r3, #96	@ 0x60
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	431a      	orrs	r2, r3
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	601a      	str	r2, [r3, #0]
  }
}
 8002d16:	bf00      	nop
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	58026000 	.word	0x58026000

08002d28 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4a0c      	ldr	r2, [pc, #48]	@ (8002d68 <LL_ADC_SetOffsetSaturation+0x40>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d10e      	bne.n	8002d5a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	3360      	adds	r3, #96	@ 0x60
 8002d40:	461a      	mov	r2, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	431a      	orrs	r2, r3
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	58026000 	.word	0x58026000

08002d6c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8002dac <LL_ADC_SetOffsetSign+0x40>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d10e      	bne.n	8002d9e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3360      	adds	r3, #96	@ 0x60
 8002d84:	461a      	mov	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002d9e:	bf00      	nop
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	58026000 	.word	0x58026000

08002db0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3360      	adds	r3, #96	@ 0x60
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8002e00 <LL_ADC_SetOffsetState+0x50>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d108      	bne.n	8002de4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002de2:	e007      	b.n	8002df4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	601a      	str	r2, [r3, #0]
}
 8002df4:	bf00      	nop
 8002df6:	371c      	adds	r7, #28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	58026000 	.word	0x58026000

08002e04 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b087      	sub	sp, #28
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3330      	adds	r3, #48	@ 0x30
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	4413      	add	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f003 031f 	and.w	r3, r3, #31
 8002e54:	211f      	movs	r1, #31
 8002e56:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	401a      	ands	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	0e9b      	lsrs	r3, r3, #26
 8002e62:	f003 011f 	and.w	r1, r3, #31
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e70:	431a      	orrs	r2, r3
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e76:	bf00      	nop
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e8e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3314      	adds	r3, #20
 8002eb8:	461a      	mov	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	0e5b      	lsrs	r3, r3, #25
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	4413      	add	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	0d1b      	lsrs	r3, r3, #20
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	2107      	movs	r1, #7
 8002ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	401a      	ands	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	0d1b      	lsrs	r3, r3, #20
 8002ee2:	f003 031f 	and.w	r3, r3, #31
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eec:	431a      	orrs	r2, r3
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ef2:	bf00      	nop
 8002ef4:	371c      	adds	r7, #28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4a1a      	ldr	r2, [pc, #104]	@ (8002f78 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d115      	bne.n	8002f40 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f20:	43db      	mvns	r3, r3
 8002f22:	401a      	ands	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f003 0318 	and.w	r3, r3, #24
 8002f2a:	4914      	ldr	r1, [pc, #80]	@ (8002f7c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002f2c:	40d9      	lsrs	r1, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	400b      	ands	r3, r1
 8002f32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f36:	431a      	orrs	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002f3e:	e014      	b.n	8002f6a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	401a      	ands	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f003 0318 	and.w	r3, r3, #24
 8002f56:	4909      	ldr	r1, [pc, #36]	@ (8002f7c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002f58:	40d9      	lsrs	r1, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	400b      	ands	r3, r1
 8002f5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f62:	431a      	orrs	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8002f6a:	bf00      	nop
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	58026000 	.word	0x58026000
 8002f7c:	000fffff 	.word	0x000fffff

08002f80 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 031f 	and.w	r3, r3, #31
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	4b04      	ldr	r3, [pc, #16]	@ (8002fd8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6093      	str	r3, [r2, #8]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	5fffffc0 	.word	0x5fffffc0

08002fdc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ff0:	d101      	bne.n	8002ff6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	4b05      	ldr	r3, [pc, #20]	@ (8003028 <LL_ADC_EnableInternalRegulator+0x24>)
 8003012:	4013      	ands	r3, r2
 8003014:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	6fffffc0 	.word	0x6fffffc0

0800302c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800303c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003040:	d101      	bne.n	8003046 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <LL_ADC_IsEnabled+0x18>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <LL_ADC_IsEnabled+0x1a>
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b04      	cmp	r3, #4
 800308c:	d101      	bne.n	8003092 <LL_ADC_REG_IsConversionOngoing+0x18>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d101      	bne.n	80030b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030c8:	b590      	push	{r4, r7, lr}
 80030ca:	b089      	sub	sp, #36	@ 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e1ee      	b.n	80034c0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d109      	bne.n	8003104 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7fd fb75 	bl	80007e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff ff67 	bl	8002fdc <LL_ADC_IsDeepPowerDownEnabled>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d004      	beq.n	800311e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff ff4d 	bl	8002fb8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff ff82 	bl	800302c <LL_ADC_IsInternalRegulatorEnabled>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d114      	bne.n	8003158 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff ff66 	bl	8003004 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003138:	4b8e      	ldr	r3, [pc, #568]	@ (8003374 <HAL_ADC_Init+0x2ac>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	099b      	lsrs	r3, r3, #6
 800313e:	4a8e      	ldr	r2, [pc, #568]	@ (8003378 <HAL_ADC_Init+0x2b0>)
 8003140:	fba2 2303 	umull	r2, r3, r2, r3
 8003144:	099b      	lsrs	r3, r3, #6
 8003146:	3301      	adds	r3, #1
 8003148:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800314a:	e002      	b.n	8003152 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	3b01      	subs	r3, #1
 8003150:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1f9      	bne.n	800314c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff ff65 	bl	800302c <LL_ADC_IsInternalRegulatorEnabled>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10d      	bne.n	8003184 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800316c:	f043 0210 	orr.w	r2, r3, #16
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003178:	f043 0201 	orr.w	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff76 	bl	800307a <LL_ADC_REG_IsConversionOngoing>
 800318e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	f040 8188 	bne.w	80034ae <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f040 8184 	bne.w	80034ae <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031aa:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80031ae:	f043 0202 	orr.w	r2, r3, #2
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff ff4a 	bl	8003054 <LL_ADC_IsEnabled>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d136      	bne.n	8003234 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a6c      	ldr	r2, [pc, #432]	@ (800337c <HAL_ADC_Init+0x2b4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d004      	beq.n	80031da <HAL_ADC_Init+0x112>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a6a      	ldr	r2, [pc, #424]	@ (8003380 <HAL_ADC_Init+0x2b8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d10e      	bne.n	80031f8 <HAL_ADC_Init+0x130>
 80031da:	4868      	ldr	r0, [pc, #416]	@ (800337c <HAL_ADC_Init+0x2b4>)
 80031dc:	f7ff ff3a 	bl	8003054 <LL_ADC_IsEnabled>
 80031e0:	4604      	mov	r4, r0
 80031e2:	4867      	ldr	r0, [pc, #412]	@ (8003380 <HAL_ADC_Init+0x2b8>)
 80031e4:	f7ff ff36 	bl	8003054 <LL_ADC_IsEnabled>
 80031e8:	4603      	mov	r3, r0
 80031ea:	4323      	orrs	r3, r4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf0c      	ite	eq
 80031f0:	2301      	moveq	r3, #1
 80031f2:	2300      	movne	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	e008      	b.n	800320a <HAL_ADC_Init+0x142>
 80031f8:	4862      	ldr	r0, [pc, #392]	@ (8003384 <HAL_ADC_Init+0x2bc>)
 80031fa:	f7ff ff2b 	bl	8003054 <LL_ADC_IsEnabled>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	bf0c      	ite	eq
 8003204:	2301      	moveq	r3, #1
 8003206:	2300      	movne	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d012      	beq.n	8003234 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a5a      	ldr	r2, [pc, #360]	@ (800337c <HAL_ADC_Init+0x2b4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d004      	beq.n	8003222 <HAL_ADC_Init+0x15a>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a58      	ldr	r2, [pc, #352]	@ (8003380 <HAL_ADC_Init+0x2b8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d101      	bne.n	8003226 <HAL_ADC_Init+0x15e>
 8003222:	4a59      	ldr	r2, [pc, #356]	@ (8003388 <HAL_ADC_Init+0x2c0>)
 8003224:	e000      	b.n	8003228 <HAL_ADC_Init+0x160>
 8003226:	4a59      	ldr	r2, [pc, #356]	@ (800338c <HAL_ADC_Init+0x2c4>)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	4619      	mov	r1, r3
 800322e:	4610      	mov	r0, r2
 8003230:	f7ff fc88 	bl	8002b44 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a52      	ldr	r2, [pc, #328]	@ (8003384 <HAL_ADC_Init+0x2bc>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d129      	bne.n	8003292 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	7e5b      	ldrb	r3, [r3, #25]
 8003242:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003248:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800324e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b08      	cmp	r3, #8
 8003256:	d013      	beq.n	8003280 <HAL_ADC_Init+0x1b8>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b0c      	cmp	r3, #12
 800325e:	d00d      	beq.n	800327c <HAL_ADC_Init+0x1b4>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b1c      	cmp	r3, #28
 8003266:	d007      	beq.n	8003278 <HAL_ADC_Init+0x1b0>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	2b18      	cmp	r3, #24
 800326e:	d101      	bne.n	8003274 <HAL_ADC_Init+0x1ac>
 8003270:	2318      	movs	r3, #24
 8003272:	e006      	b.n	8003282 <HAL_ADC_Init+0x1ba>
 8003274:	2300      	movs	r3, #0
 8003276:	e004      	b.n	8003282 <HAL_ADC_Init+0x1ba>
 8003278:	2310      	movs	r3, #16
 800327a:	e002      	b.n	8003282 <HAL_ADC_Init+0x1ba>
 800327c:	2308      	movs	r3, #8
 800327e:	e000      	b.n	8003282 <HAL_ADC_Init+0x1ba>
 8003280:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003282:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800328a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
 8003290:	e00e      	b.n	80032b0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	7e5b      	ldrb	r3, [r3, #25]
 8003296:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800329c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80032a2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032aa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d106      	bne.n	80032c8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032be:	3b01      	subs	r3, #1
 80032c0:	045b      	lsls	r3, r3, #17
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d009      	beq.n	80032e4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a26      	ldr	r2, [pc, #152]	@ (8003384 <HAL_ADC_Init+0x2bc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d115      	bne.n	800331a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	4b26      	ldr	r3, [pc, #152]	@ (8003390 <HAL_ADC_Init+0x2c8>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	69b9      	ldr	r1, [r7, #24]
 80032fe:	430b      	orrs	r3, r1
 8003300:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	611a      	str	r2, [r3, #16]
 8003318:	e009      	b.n	800332e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	4b1c      	ldr	r3, [pc, #112]	@ (8003394 <HAL_ADC_Init+0x2cc>)
 8003322:	4013      	ands	r3, r2
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	69b9      	ldr	r1, [r7, #24]
 800332a:	430b      	orrs	r3, r1
 800332c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff fea1 	bl	800307a <LL_ADC_REG_IsConversionOngoing>
 8003338:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff feae 	bl	80030a0 <LL_ADC_INJ_IsConversionOngoing>
 8003344:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	f040 808e 	bne.w	800346a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	f040 808a 	bne.w	800346a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a0a      	ldr	r2, [pc, #40]	@ (8003384 <HAL_ADC_Init+0x2bc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d11b      	bne.n	8003398 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	7e1b      	ldrb	r3, [r3, #24]
 8003364:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800336c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	e018      	b.n	80033a6 <HAL_ADC_Init+0x2de>
 8003374:	24000000 	.word	0x24000000
 8003378:	053e2d63 	.word	0x053e2d63
 800337c:	40022000 	.word	0x40022000
 8003380:	40022100 	.word	0x40022100
 8003384:	58026000 	.word	0x58026000
 8003388:	40022300 	.word	0x40022300
 800338c:	58026300 	.word	0x58026300
 8003390:	fff04007 	.word	0xfff04007
 8003394:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	7e1b      	ldrb	r3, [r3, #24]
 800339c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	4b46      	ldr	r3, [pc, #280]	@ (80034c8 <HAL_ADC_Init+0x400>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6812      	ldr	r2, [r2, #0]
 80033b4:	69b9      	ldr	r1, [r7, #24]
 80033b6:	430b      	orrs	r3, r1
 80033b8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d137      	bne.n	8003434 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a3f      	ldr	r2, [pc, #252]	@ (80034cc <HAL_ADC_Init+0x404>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d116      	bne.n	8003402 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	4b3d      	ldr	r3, [pc, #244]	@ (80034d0 <HAL_ADC_Init+0x408>)
 80033dc:	4013      	ands	r3, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80033e6:	4311      	orrs	r1, r2
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80033ec:	4311      	orrs	r1, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80033f2:	430a      	orrs	r2, r1
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	611a      	str	r2, [r3, #16]
 8003400:	e020      	b.n	8003444 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	4b32      	ldr	r3, [pc, #200]	@ (80034d4 <HAL_ADC_Init+0x40c>)
 800340a:	4013      	ands	r3, r2
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003410:	3a01      	subs	r2, #1
 8003412:	0411      	lsls	r1, r2, #16
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003418:	4311      	orrs	r1, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800341e:	4311      	orrs	r1, r2
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003424:	430a      	orrs	r2, r1
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0201 	orr.w	r2, r2, #1
 8003430:	611a      	str	r2, [r3, #16]
 8003432:	e007      	b.n	8003444 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0201 	bic.w	r2, r2, #1
 8003442:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1b      	ldr	r2, [pc, #108]	@ (80034cc <HAL_ADC_Init+0x404>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d002      	beq.n	800346a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 ff63 	bl	8004330 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d10c      	bne.n	800348c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003478:	f023 010f 	bic.w	r1, r3, #15
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	1e5a      	subs	r2, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	631a      	str	r2, [r3, #48]	@ 0x30
 800348a:	e007      	b.n	800349c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 020f 	bic.w	r2, r2, #15
 800349a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034a0:	f023 0303 	bic.w	r3, r3, #3
 80034a4:	f043 0201 	orr.w	r2, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	661a      	str	r2, [r3, #96]	@ 0x60
 80034ac:	e007      	b.n	80034be <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b2:	f043 0210 	orr.w	r2, r3, #16
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034be:	7ffb      	ldrb	r3, [r7, #31]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3724      	adds	r7, #36	@ 0x24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd90      	pop	{r4, r7, pc}
 80034c8:	ffffbffc 	.word	0xffffbffc
 80034cc:	58026000 	.word	0x58026000
 80034d0:	fc00f81f 	.word	0xfc00f81f
 80034d4:	fc00f81e 	.word	0xfc00f81e

080034d8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	@ 0x28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80034e0:	2300      	movs	r3, #0
 80034e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a87      	ldr	r2, [pc, #540]	@ (8003718 <HAL_ADC_IRQHandler+0x240>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d004      	beq.n	8003508 <HAL_ADC_IRQHandler+0x30>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a86      	ldr	r2, [pc, #536]	@ (800371c <HAL_ADC_IRQHandler+0x244>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d101      	bne.n	800350c <HAL_ADC_IRQHandler+0x34>
 8003508:	4b85      	ldr	r3, [pc, #532]	@ (8003720 <HAL_ADC_IRQHandler+0x248>)
 800350a:	e000      	b.n	800350e <HAL_ADC_IRQHandler+0x36>
 800350c:	4b85      	ldr	r3, [pc, #532]	@ (8003724 <HAL_ADC_IRQHandler+0x24c>)
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff fd36 	bl	8002f80 <LL_ADC_GetMultimode>
 8003514:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d017      	beq.n	8003550 <HAL_ADC_IRQHandler+0x78>
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d012      	beq.n	8003550 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	2b00      	cmp	r3, #0
 8003534:	d105      	bne.n	8003542 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800353a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f001 f830 	bl	80045a8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2202      	movs	r2, #2
 800354e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	d004      	beq.n	8003564 <HAL_ADC_IRQHandler+0x8c>
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10a      	bne.n	800357a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 8083 	beq.w	8003676 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d07d      	beq.n	8003676 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800357e:	f003 0310 	and.w	r3, r3, #16
 8003582:	2b00      	cmp	r3, #0
 8003584:	d105      	bne.n	8003592 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800358a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fc34 	bl	8002e04 <LL_ADC_REG_IsTriggerSourceSWStart>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d062      	beq.n	8003668 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a5d      	ldr	r2, [pc, #372]	@ (800371c <HAL_ADC_IRQHandler+0x244>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d002      	beq.n	80035b2 <HAL_ADC_IRQHandler+0xda>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	e000      	b.n	80035b4 <HAL_ADC_IRQHandler+0xdc>
 80035b2:	4b59      	ldr	r3, [pc, #356]	@ (8003718 <HAL_ADC_IRQHandler+0x240>)
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d008      	beq.n	80035ce <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b05      	cmp	r3, #5
 80035c6:	d002      	beq.n	80035ce <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	2b09      	cmp	r3, #9
 80035cc:	d104      	bne.n	80035d8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	623b      	str	r3, [r7, #32]
 80035d6:	e00c      	b.n	80035f2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a4f      	ldr	r2, [pc, #316]	@ (800371c <HAL_ADC_IRQHandler+0x244>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d002      	beq.n	80035e8 <HAL_ADC_IRQHandler+0x110>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	e000      	b.n	80035ea <HAL_ADC_IRQHandler+0x112>
 80035e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003718 <HAL_ADC_IRQHandler+0x240>)
 80035ea:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d135      	bne.n	8003668 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b08      	cmp	r3, #8
 8003608:	d12e      	bne.n	8003668 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff fd33 	bl	800307a <LL_ADC_REG_IsConversionOngoing>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d11a      	bne.n	8003650 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 020c 	bic.w	r2, r2, #12
 8003628:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800362e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d112      	bne.n	8003668 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003646:	f043 0201 	orr.w	r2, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	661a      	str	r2, [r3, #96]	@ 0x60
 800364e:	e00b      	b.n	8003668 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003654:	f043 0210 	orr.w	r2, r3, #16
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003660:	f043 0201 	orr.w	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f96f 	bl	800394c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	220c      	movs	r2, #12
 8003674:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b00      	cmp	r3, #0
 800367e:	d004      	beq.n	800368a <HAL_ADC_IRQHandler+0x1b2>
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10b      	bne.n	80036a2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80a0 	beq.w	80037d6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 809a 	beq.w	80037d6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a6:	f003 0310 	and.w	r3, r3, #16
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d105      	bne.n	80036ba <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff fbdf 	bl	8002e82 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80036c4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff fb9a 	bl	8002e04 <LL_ADC_REG_IsTriggerSourceSWStart>
 80036d0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a11      	ldr	r2, [pc, #68]	@ (800371c <HAL_ADC_IRQHandler+0x244>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d002      	beq.n	80036e2 <HAL_ADC_IRQHandler+0x20a>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	e000      	b.n	80036e4 <HAL_ADC_IRQHandler+0x20c>
 80036e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003718 <HAL_ADC_IRQHandler+0x240>)
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d008      	beq.n	80036fe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2b06      	cmp	r3, #6
 80036f6:	d002      	beq.n	80036fe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2b07      	cmp	r3, #7
 80036fc:	d104      	bne.n	8003708 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	623b      	str	r3, [r7, #32]
 8003706:	e014      	b.n	8003732 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a03      	ldr	r2, [pc, #12]	@ (800371c <HAL_ADC_IRQHandler+0x244>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00a      	beq.n	8003728 <HAL_ADC_IRQHandler+0x250>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	e008      	b.n	800372a <HAL_ADC_IRQHandler+0x252>
 8003718:	40022000 	.word	0x40022000
 800371c:	40022100 	.word	0x40022100
 8003720:	40022300 	.word	0x40022300
 8003724:	58026300 	.word	0x58026300
 8003728:	4b84      	ldr	r3, [pc, #528]	@ (800393c <HAL_ADC_IRQHandler+0x464>)
 800372a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d047      	beq.n	80037c8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d007      	beq.n	8003752 <HAL_ADC_IRQHandler+0x27a>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d03f      	beq.n	80037c8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800374e:	2b00      	cmp	r3, #0
 8003750:	d13a      	bne.n	80037c8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800375c:	2b40      	cmp	r3, #64	@ 0x40
 800375e:	d133      	bne.n	80037c8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d12e      	bne.n	80037c8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff fc96 	bl	80030a0 <LL_ADC_INJ_IsConversionOngoing>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d11a      	bne.n	80037b0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003788:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800379a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d112      	bne.n	80037c8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a6:	f043 0201 	orr.w	r2, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	661a      	str	r2, [r3, #96]	@ 0x60
 80037ae:	e00b      	b.n	80037c8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b4:	f043 0210 	orr.w	r2, r3, #16
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037c0:	f043 0201 	orr.w	r2, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 fec5 	bl	8004558 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2260      	movs	r2, #96	@ 0x60
 80037d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d011      	beq.n	8003804 <HAL_ADC_IRQHandler+0x32c>
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00c      	beq.n	8003804 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f8b2 	bl	8003960 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2280      	movs	r2, #128	@ 0x80
 8003802:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d012      	beq.n	8003834 <HAL_ADC_IRQHandler+0x35c>
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00d      	beq.n	8003834 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800381c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 feab 	bl	8004580 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800383a:	2b00      	cmp	r3, #0
 800383c:	d012      	beq.n	8003864 <HAL_ADC_IRQHandler+0x38c>
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00d      	beq.n	8003864 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fe9d 	bl	8004594 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003862:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	d043      	beq.n	80038f6 <HAL_ADC_IRQHandler+0x41e>
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b00      	cmp	r3, #0
 8003876:	d03e      	beq.n	80038f6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800387c:	2b00      	cmp	r3, #0
 800387e:	d102      	bne.n	8003886 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003880:	2301      	movs	r3, #1
 8003882:	627b      	str	r3, [r7, #36]	@ 0x24
 8003884:	e021      	b.n	80038ca <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d015      	beq.n	80038b8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a2a      	ldr	r2, [pc, #168]	@ (800393c <HAL_ADC_IRQHandler+0x464>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d004      	beq.n	80038a0 <HAL_ADC_IRQHandler+0x3c8>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a29      	ldr	r2, [pc, #164]	@ (8003940 <HAL_ADC_IRQHandler+0x468>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d101      	bne.n	80038a4 <HAL_ADC_IRQHandler+0x3cc>
 80038a0:	4b28      	ldr	r3, [pc, #160]	@ (8003944 <HAL_ADC_IRQHandler+0x46c>)
 80038a2:	e000      	b.n	80038a6 <HAL_ADC_IRQHandler+0x3ce>
 80038a4:	4b28      	ldr	r3, [pc, #160]	@ (8003948 <HAL_ADC_IRQHandler+0x470>)
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff fb78 	bl	8002f9c <LL_ADC_GetMultiDMATransfer>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80038b2:	2301      	movs	r3, #1
 80038b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b6:	e008      	b.n	80038ca <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80038c6:	2301      	movs	r3, #1
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d10e      	bne.n	80038ee <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038e0:	f043 0202 	orr.w	r2, r3, #2
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f843 	bl	8003974 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2210      	movs	r2, #16
 80038f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d018      	beq.n	8003932 <HAL_ADC_IRQHandler+0x45a>
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003906:	2b00      	cmp	r3, #0
 8003908:	d013      	beq.n	8003932 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800390e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800391a:	f043 0208 	orr.w	r2, r3, #8
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800392a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fe1d 	bl	800456c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003932:	bf00      	nop
 8003934:	3728      	adds	r7, #40	@ 0x28
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40022000 	.word	0x40022000
 8003940:	40022100 	.word	0x40022100
 8003944:	40022300 	.word	0x40022300
 8003948:	58026300 	.word	0x58026300

0800394c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003988:	b590      	push	{r4, r7, lr}
 800398a:	b0a5      	sub	sp, #148	@ 0x94
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039a2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4aa4      	ldr	r2, [pc, #656]	@ (8003c3c <HAL_ADC_ConfigChannel+0x2b4>)
 80039aa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d102      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x34>
 80039b6:	2302      	movs	r3, #2
 80039b8:	f000 bca2 	b.w	8004300 <HAL_ADC_ConfigChannel+0x978>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff fb56 	bl	800307a <LL_ADC_REG_IsConversionOngoing>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f040 8486 	bne.w	80042e2 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	db31      	blt.n	8003a42 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a97      	ldr	r2, [pc, #604]	@ (8003c40 <HAL_ADC_ConfigChannel+0x2b8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d02c      	beq.n	8003a42 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d108      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x7e>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	0e9b      	lsrs	r3, r3, #26
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	2201      	movs	r2, #1
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	e016      	b.n	8003a34 <HAL_ADC_ConfigChannel+0xac>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a0e:	fa93 f3a3 	rbit	r3, r3
 8003a12:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003a14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a16:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003a18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8003a1e:	2320      	movs	r3, #32
 8003a20:	e003      	b.n	8003a2a <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8003a22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a24:	fab3 f383 	clz	r3, r3
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	2201      	movs	r2, #1
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	69d1      	ldr	r1, [r2, #28]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	430b      	orrs	r3, r1
 8003a40:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	6859      	ldr	r1, [r3, #4]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	f7ff f9eb 	bl	8002e2a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff fb0e 	bl	800307a <LL_ADC_REG_IsConversionOngoing>
 8003a5e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff fb1a 	bl	80030a0 <LL_ADC_INJ_IsConversionOngoing>
 8003a6c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f040 824a 	bne.w	8003f0e <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f040 8245 	bne.w	8003f0e <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	6819      	ldr	r1, [r3, #0]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	461a      	mov	r2, r3
 8003a92:	f7ff fa09 	bl	8002ea8 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a69      	ldr	r2, [pc, #420]	@ (8003c40 <HAL_ADC_ConfigChannel+0x2b8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d10d      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	08db      	lsrs	r3, r3, #3
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003aba:	e032      	b.n	8003b22 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003abc:	4b61      	ldr	r3, [pc, #388]	@ (8003c44 <HAL_ADC_ConfigChannel+0x2bc>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003ac4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ac8:	d10b      	bne.n	8003ae2 <HAL_ADC_ConfigChannel+0x15a>
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	089b      	lsrs	r3, r3, #2
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	e01d      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x196>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10b      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x180>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	089b      	lsrs	r3, r3, #2
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	e00a      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x196>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	695a      	ldr	r2, [r3, #20]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	089b      	lsrs	r3, r3, #2
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d048      	beq.n	8003bbc <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6919      	ldr	r1, [r3, #16]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b3a:	f7ff f871 	bl	8002c20 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a3f      	ldr	r2, [pc, #252]	@ (8003c40 <HAL_ADC_ConfigChannel+0x2b8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d119      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6919      	ldr	r1, [r3, #16]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	461a      	mov	r2, r3
 8003b56:	f7ff f909 	bl	8002d6c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	6919      	ldr	r1, [r3, #16]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d102      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x1ea>
 8003b6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b70:	e000      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x1ec>
 8003b72:	2300      	movs	r3, #0
 8003b74:	461a      	mov	r2, r3
 8003b76:	f7ff f8d7 	bl	8002d28 <LL_ADC_SetOffsetSaturation>
 8003b7a:	e1c8      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	6919      	ldr	r1, [r3, #16]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d102      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x20c>
 8003b8e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003b92:	e000      	b.n	8003b96 <HAL_ADC_ConfigChannel+0x20e>
 8003b94:	2300      	movs	r3, #0
 8003b96:	461a      	mov	r2, r3
 8003b98:	f7ff f8a4 	bl	8002ce4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6818      	ldr	r0, [r3, #0]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	6919      	ldr	r1, [r3, #16]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	7e1b      	ldrb	r3, [r3, #24]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d102      	bne.n	8003bb2 <HAL_ADC_ConfigChannel+0x22a>
 8003bac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003bb0:	e000      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x22c>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f7ff f87b 	bl	8002cb0 <LL_ADC_SetDataRightShift>
 8003bba:	e1a8      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003c40 <HAL_ADC_ConfigChannel+0x2b8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	f040 815b 	bne.w	8003e7e <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2100      	movs	r1, #0
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff f858 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x26c>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2100      	movs	r1, #0
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff f84d 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 8003bea:	4603      	mov	r3, r0
 8003bec:	0e9b      	lsrs	r3, r3, #26
 8003bee:	f003 021f 	and.w	r2, r3, #31
 8003bf2:	e017      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x29c>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff f842 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 8003c00:	4603      	mov	r3, r0
 8003c02:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003c0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003c10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003c16:	2320      	movs	r3, #32
 8003c18:	e003      	b.n	8003c22 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8003c1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c1c:	fab3 f383 	clz	r3, r3
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10b      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x2c0>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	0e9b      	lsrs	r3, r3, #26
 8003c36:	f003 031f 	and.w	r3, r3, #31
 8003c3a:	e017      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x2e4>
 8003c3c:	47ff0000 	.word	0x47ff0000
 8003c40:	58026000 	.word	0x58026000
 8003c44:	5c001000 	.word	0x5c001000
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c50:	fa93 f3a3 	rbit	r3, r3
 8003c54:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003c56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c58:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003c5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8003c60:	2320      	movs	r3, #32
 8003c62:	e003      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8003c64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c66:	fab3 f383 	clz	r3, r3
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d106      	bne.n	8003c7e <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2200      	movs	r2, #0
 8003c76:	2100      	movs	r1, #0
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff f899 	bl	8002db0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2101      	movs	r1, #1
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fe fffd 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10a      	bne.n	8003caa <HAL_ADC_ConfigChannel+0x322>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2101      	movs	r1, #1
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe fff2 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	0e9b      	lsrs	r3, r3, #26
 8003ca4:	f003 021f 	and.w	r2, r3, #31
 8003ca8:	e017      	b.n	8003cda <HAL_ADC_ConfigChannel+0x352>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2101      	movs	r1, #1
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe ffe7 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cbc:	fa93 f3a3 	rbit	r3, r3
 8003cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003cc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cc4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8003ccc:	2320      	movs	r3, #32
 8003cce:	e003      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8003cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cd2:	fab3 f383 	clz	r3, r3
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	461a      	mov	r2, r3
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d105      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x36a>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	0e9b      	lsrs	r3, r3, #26
 8003cec:	f003 031f 	and.w	r3, r3, #31
 8003cf0:	e011      	b.n	8003d16 <HAL_ADC_ConfigChannel+0x38e>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cfa:	fa93 f3a3 	rbit	r3, r3
 8003cfe:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d02:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003d04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003d0a:	2320      	movs	r3, #32
 8003d0c:	e003      	b.n	8003d16 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003d0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d10:	fab3 f383 	clz	r3, r3
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d106      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	2101      	movs	r1, #1
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff f844 	bl	8002db0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2102      	movs	r1, #2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fe ffa8 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10a      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x3cc>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2102      	movs	r1, #2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7fe ff9d 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	0e9b      	lsrs	r3, r3, #26
 8003d4e:	f003 021f 	and.w	r2, r3, #31
 8003d52:	e017      	b.n	8003d84 <HAL_ADC_ConfigChannel+0x3fc>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2102      	movs	r1, #2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe ff92 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 8003d60:	4603      	mov	r3, r0
 8003d62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d66:	fa93 f3a3 	rbit	r3, r3
 8003d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003d76:	2320      	movs	r3, #32
 8003d78:	e003      	b.n	8003d82 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d7c:	fab3 f383 	clz	r3, r3
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d105      	bne.n	8003d9c <HAL_ADC_ConfigChannel+0x414>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	0e9b      	lsrs	r3, r3, #26
 8003d96:	f003 031f 	and.w	r3, r3, #31
 8003d9a:	e011      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x438>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da4:	fa93 f3a3 	rbit	r3, r3
 8003da8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dac:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003db4:	2320      	movs	r3, #32
 8003db6:	e003      	b.n	8003dc0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dba:	fab3 f383 	clz	r3, r3
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d106      	bne.n	8003dd2 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2102      	movs	r1, #2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fe ffef 	bl	8002db0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2103      	movs	r1, #3
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fe ff53 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 8003dde:	4603      	mov	r3, r0
 8003de0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10a      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x476>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2103      	movs	r1, #3
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe ff48 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 8003df4:	4603      	mov	r3, r0
 8003df6:	0e9b      	lsrs	r3, r3, #26
 8003df8:	f003 021f 	and.w	r2, r3, #31
 8003dfc:	e017      	b.n	8003e2e <HAL_ADC_ConfigChannel+0x4a6>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2103      	movs	r1, #3
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fe ff3d 	bl	8002c84 <LL_ADC_GetOffsetChannel>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	fa93 f3a3 	rbit	r3, r3
 8003e14:	61fb      	str	r3, [r7, #28]
  return result;
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003e20:	2320      	movs	r3, #32
 8003e22:	e003      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e26:	fab3 f383 	clz	r3, r3
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d105      	bne.n	8003e46 <HAL_ADC_ConfigChannel+0x4be>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	0e9b      	lsrs	r3, r3, #26
 8003e40:	f003 031f 	and.w	r3, r3, #31
 8003e44:	e011      	b.n	8003e6a <HAL_ADC_ConfigChannel+0x4e2>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	fa93 f3a3 	rbit	r3, r3
 8003e52:	613b      	str	r3, [r7, #16]
  return result;
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8003e5e:	2320      	movs	r3, #32
 8003e60:	e003      	b.n	8003e6a <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	fab3 f383 	clz	r3, r3
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d14f      	bne.n	8003f0e <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2200      	movs	r2, #0
 8003e74:	2103      	movs	r1, #3
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe ff9a 	bl	8002db0 <LL_ADC_SetOffsetState>
 8003e7c:	e047      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e84:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	069b      	lsls	r3, r3, #26
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d107      	bne.n	8003ea2 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ea0:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ea8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	069b      	lsls	r3, r3, #26
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d107      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ec4:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ecc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	069b      	lsls	r3, r3, #26
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d107      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ee8:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ef0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	069b      	lsls	r3, r3, #26
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d107      	bne.n	8003f0e <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f0c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff f89e 	bl	8003054 <LL_ADC_IsEnabled>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f040 81ea 	bne.w	80042f4 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	6819      	ldr	r1, [r3, #0]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f7fe ffe7 	bl	8002f00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	4a7a      	ldr	r2, [pc, #488]	@ (8004120 <HAL_ADC_ConfigChannel+0x798>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	f040 80e0 	bne.w	80040fe <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4977      	ldr	r1, [pc, #476]	@ (8004124 <HAL_ADC_ConfigChannel+0x79c>)
 8003f48:	428b      	cmp	r3, r1
 8003f4a:	d147      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0x654>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4975      	ldr	r1, [pc, #468]	@ (8004128 <HAL_ADC_ConfigChannel+0x7a0>)
 8003f52:	428b      	cmp	r3, r1
 8003f54:	d040      	beq.n	8003fd8 <HAL_ADC_ConfigChannel+0x650>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4974      	ldr	r1, [pc, #464]	@ (800412c <HAL_ADC_ConfigChannel+0x7a4>)
 8003f5c:	428b      	cmp	r3, r1
 8003f5e:	d039      	beq.n	8003fd4 <HAL_ADC_ConfigChannel+0x64c>
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4972      	ldr	r1, [pc, #456]	@ (8004130 <HAL_ADC_ConfigChannel+0x7a8>)
 8003f66:	428b      	cmp	r3, r1
 8003f68:	d032      	beq.n	8003fd0 <HAL_ADC_ConfigChannel+0x648>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4971      	ldr	r1, [pc, #452]	@ (8004134 <HAL_ADC_ConfigChannel+0x7ac>)
 8003f70:	428b      	cmp	r3, r1
 8003f72:	d02b      	beq.n	8003fcc <HAL_ADC_ConfigChannel+0x644>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	496f      	ldr	r1, [pc, #444]	@ (8004138 <HAL_ADC_ConfigChannel+0x7b0>)
 8003f7a:	428b      	cmp	r3, r1
 8003f7c:	d024      	beq.n	8003fc8 <HAL_ADC_ConfigChannel+0x640>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	496e      	ldr	r1, [pc, #440]	@ (800413c <HAL_ADC_ConfigChannel+0x7b4>)
 8003f84:	428b      	cmp	r3, r1
 8003f86:	d01d      	beq.n	8003fc4 <HAL_ADC_ConfigChannel+0x63c>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	496c      	ldr	r1, [pc, #432]	@ (8004140 <HAL_ADC_ConfigChannel+0x7b8>)
 8003f8e:	428b      	cmp	r3, r1
 8003f90:	d016      	beq.n	8003fc0 <HAL_ADC_ConfigChannel+0x638>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	496b      	ldr	r1, [pc, #428]	@ (8004144 <HAL_ADC_ConfigChannel+0x7bc>)
 8003f98:	428b      	cmp	r3, r1
 8003f9a:	d00f      	beq.n	8003fbc <HAL_ADC_ConfigChannel+0x634>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4969      	ldr	r1, [pc, #420]	@ (8004148 <HAL_ADC_ConfigChannel+0x7c0>)
 8003fa2:	428b      	cmp	r3, r1
 8003fa4:	d008      	beq.n	8003fb8 <HAL_ADC_ConfigChannel+0x630>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4968      	ldr	r1, [pc, #416]	@ (800414c <HAL_ADC_ConfigChannel+0x7c4>)
 8003fac:	428b      	cmp	r3, r1
 8003fae:	d101      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x62c>
 8003fb0:	4b67      	ldr	r3, [pc, #412]	@ (8004150 <HAL_ADC_ConfigChannel+0x7c8>)
 8003fb2:	e0a0      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	e09e      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 8003fb8:	4b66      	ldr	r3, [pc, #408]	@ (8004154 <HAL_ADC_ConfigChannel+0x7cc>)
 8003fba:	e09c      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 8003fbc:	4b66      	ldr	r3, [pc, #408]	@ (8004158 <HAL_ADC_ConfigChannel+0x7d0>)
 8003fbe:	e09a      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 8003fc0:	4b60      	ldr	r3, [pc, #384]	@ (8004144 <HAL_ADC_ConfigChannel+0x7bc>)
 8003fc2:	e098      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 8003fc4:	4b5e      	ldr	r3, [pc, #376]	@ (8004140 <HAL_ADC_ConfigChannel+0x7b8>)
 8003fc6:	e096      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 8003fc8:	4b64      	ldr	r3, [pc, #400]	@ (800415c <HAL_ADC_ConfigChannel+0x7d4>)
 8003fca:	e094      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 8003fcc:	4b64      	ldr	r3, [pc, #400]	@ (8004160 <HAL_ADC_ConfigChannel+0x7d8>)
 8003fce:	e092      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 8003fd0:	4b64      	ldr	r3, [pc, #400]	@ (8004164 <HAL_ADC_ConfigChannel+0x7dc>)
 8003fd2:	e090      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 8003fd4:	4b64      	ldr	r3, [pc, #400]	@ (8004168 <HAL_ADC_ConfigChannel+0x7e0>)
 8003fd6:	e08e      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e08c      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4962      	ldr	r1, [pc, #392]	@ (800416c <HAL_ADC_ConfigChannel+0x7e4>)
 8003fe2:	428b      	cmp	r3, r1
 8003fe4:	d140      	bne.n	8004068 <HAL_ADC_ConfigChannel+0x6e0>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	494f      	ldr	r1, [pc, #316]	@ (8004128 <HAL_ADC_ConfigChannel+0x7a0>)
 8003fec:	428b      	cmp	r3, r1
 8003fee:	d039      	beq.n	8004064 <HAL_ADC_ConfigChannel+0x6dc>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	494d      	ldr	r1, [pc, #308]	@ (800412c <HAL_ADC_ConfigChannel+0x7a4>)
 8003ff6:	428b      	cmp	r3, r1
 8003ff8:	d032      	beq.n	8004060 <HAL_ADC_ConfigChannel+0x6d8>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	494c      	ldr	r1, [pc, #304]	@ (8004130 <HAL_ADC_ConfigChannel+0x7a8>)
 8004000:	428b      	cmp	r3, r1
 8004002:	d02b      	beq.n	800405c <HAL_ADC_ConfigChannel+0x6d4>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	494a      	ldr	r1, [pc, #296]	@ (8004134 <HAL_ADC_ConfigChannel+0x7ac>)
 800400a:	428b      	cmp	r3, r1
 800400c:	d024      	beq.n	8004058 <HAL_ADC_ConfigChannel+0x6d0>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4949      	ldr	r1, [pc, #292]	@ (8004138 <HAL_ADC_ConfigChannel+0x7b0>)
 8004014:	428b      	cmp	r3, r1
 8004016:	d01d      	beq.n	8004054 <HAL_ADC_ConfigChannel+0x6cc>
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4947      	ldr	r1, [pc, #284]	@ (800413c <HAL_ADC_ConfigChannel+0x7b4>)
 800401e:	428b      	cmp	r3, r1
 8004020:	d016      	beq.n	8004050 <HAL_ADC_ConfigChannel+0x6c8>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4946      	ldr	r1, [pc, #280]	@ (8004140 <HAL_ADC_ConfigChannel+0x7b8>)
 8004028:	428b      	cmp	r3, r1
 800402a:	d00f      	beq.n	800404c <HAL_ADC_ConfigChannel+0x6c4>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4944      	ldr	r1, [pc, #272]	@ (8004144 <HAL_ADC_ConfigChannel+0x7bc>)
 8004032:	428b      	cmp	r3, r1
 8004034:	d008      	beq.n	8004048 <HAL_ADC_ConfigChannel+0x6c0>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4944      	ldr	r1, [pc, #272]	@ (800414c <HAL_ADC_ConfigChannel+0x7c4>)
 800403c:	428b      	cmp	r3, r1
 800403e:	d101      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x6bc>
 8004040:	4b43      	ldr	r3, [pc, #268]	@ (8004150 <HAL_ADC_ConfigChannel+0x7c8>)
 8004042:	e058      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 8004044:	2300      	movs	r3, #0
 8004046:	e056      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 8004048:	4b43      	ldr	r3, [pc, #268]	@ (8004158 <HAL_ADC_ConfigChannel+0x7d0>)
 800404a:	e054      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 800404c:	4b3d      	ldr	r3, [pc, #244]	@ (8004144 <HAL_ADC_ConfigChannel+0x7bc>)
 800404e:	e052      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 8004050:	4b3b      	ldr	r3, [pc, #236]	@ (8004140 <HAL_ADC_ConfigChannel+0x7b8>)
 8004052:	e050      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 8004054:	4b41      	ldr	r3, [pc, #260]	@ (800415c <HAL_ADC_ConfigChannel+0x7d4>)
 8004056:	e04e      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 8004058:	4b41      	ldr	r3, [pc, #260]	@ (8004160 <HAL_ADC_ConfigChannel+0x7d8>)
 800405a:	e04c      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 800405c:	4b41      	ldr	r3, [pc, #260]	@ (8004164 <HAL_ADC_ConfigChannel+0x7dc>)
 800405e:	e04a      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 8004060:	4b41      	ldr	r3, [pc, #260]	@ (8004168 <HAL_ADC_ConfigChannel+0x7e0>)
 8004062:	e048      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 8004064:	2301      	movs	r3, #1
 8004066:	e046      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4940      	ldr	r1, [pc, #256]	@ (8004170 <HAL_ADC_ConfigChannel+0x7e8>)
 800406e:	428b      	cmp	r3, r1
 8004070:	d140      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x76c>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	492c      	ldr	r1, [pc, #176]	@ (8004128 <HAL_ADC_ConfigChannel+0x7a0>)
 8004078:	428b      	cmp	r3, r1
 800407a:	d039      	beq.n	80040f0 <HAL_ADC_ConfigChannel+0x768>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	492a      	ldr	r1, [pc, #168]	@ (800412c <HAL_ADC_ConfigChannel+0x7a4>)
 8004082:	428b      	cmp	r3, r1
 8004084:	d032      	beq.n	80040ec <HAL_ADC_ConfigChannel+0x764>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4929      	ldr	r1, [pc, #164]	@ (8004130 <HAL_ADC_ConfigChannel+0x7a8>)
 800408c:	428b      	cmp	r3, r1
 800408e:	d02b      	beq.n	80040e8 <HAL_ADC_ConfigChannel+0x760>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4927      	ldr	r1, [pc, #156]	@ (8004134 <HAL_ADC_ConfigChannel+0x7ac>)
 8004096:	428b      	cmp	r3, r1
 8004098:	d024      	beq.n	80040e4 <HAL_ADC_ConfigChannel+0x75c>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4926      	ldr	r1, [pc, #152]	@ (8004138 <HAL_ADC_ConfigChannel+0x7b0>)
 80040a0:	428b      	cmp	r3, r1
 80040a2:	d01d      	beq.n	80040e0 <HAL_ADC_ConfigChannel+0x758>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4924      	ldr	r1, [pc, #144]	@ (800413c <HAL_ADC_ConfigChannel+0x7b4>)
 80040aa:	428b      	cmp	r3, r1
 80040ac:	d016      	beq.n	80040dc <HAL_ADC_ConfigChannel+0x754>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4923      	ldr	r1, [pc, #140]	@ (8004140 <HAL_ADC_ConfigChannel+0x7b8>)
 80040b4:	428b      	cmp	r3, r1
 80040b6:	d00f      	beq.n	80040d8 <HAL_ADC_ConfigChannel+0x750>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4926      	ldr	r1, [pc, #152]	@ (8004158 <HAL_ADC_ConfigChannel+0x7d0>)
 80040be:	428b      	cmp	r3, r1
 80040c0:	d008      	beq.n	80040d4 <HAL_ADC_ConfigChannel+0x74c>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	492b      	ldr	r1, [pc, #172]	@ (8004174 <HAL_ADC_ConfigChannel+0x7ec>)
 80040c8:	428b      	cmp	r3, r1
 80040ca:	d101      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x748>
 80040cc:	4b2a      	ldr	r3, [pc, #168]	@ (8004178 <HAL_ADC_ConfigChannel+0x7f0>)
 80040ce:	e012      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 80040d0:	2300      	movs	r3, #0
 80040d2:	e010      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 80040d4:	4b27      	ldr	r3, [pc, #156]	@ (8004174 <HAL_ADC_ConfigChannel+0x7ec>)
 80040d6:	e00e      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 80040d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004144 <HAL_ADC_ConfigChannel+0x7bc>)
 80040da:	e00c      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 80040dc:	4b18      	ldr	r3, [pc, #96]	@ (8004140 <HAL_ADC_ConfigChannel+0x7b8>)
 80040de:	e00a      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 80040e0:	4b1e      	ldr	r3, [pc, #120]	@ (800415c <HAL_ADC_ConfigChannel+0x7d4>)
 80040e2:	e008      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 80040e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004160 <HAL_ADC_ConfigChannel+0x7d8>)
 80040e6:	e006      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 80040e8:	4b1e      	ldr	r3, [pc, #120]	@ (8004164 <HAL_ADC_ConfigChannel+0x7dc>)
 80040ea:	e004      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 80040ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004168 <HAL_ADC_ConfigChannel+0x7e0>)
 80040ee:	e002      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 80040f0:	2301      	movs	r3, #1
 80040f2:	e000      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x76e>
 80040f4:	2300      	movs	r3, #0
 80040f6:	4619      	mov	r1, r3
 80040f8:	4610      	mov	r0, r2
 80040fa:	f7fe fd57 	bl	8002bac <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	f280 80f6 	bge.w	80042f4 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a05      	ldr	r2, [pc, #20]	@ (8004124 <HAL_ADC_ConfigChannel+0x79c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d004      	beq.n	800411c <HAL_ADC_ConfigChannel+0x794>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a15      	ldr	r2, [pc, #84]	@ (800416c <HAL_ADC_ConfigChannel+0x7e4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d131      	bne.n	8004180 <HAL_ADC_ConfigChannel+0x7f8>
 800411c:	4b17      	ldr	r3, [pc, #92]	@ (800417c <HAL_ADC_ConfigChannel+0x7f4>)
 800411e:	e030      	b.n	8004182 <HAL_ADC_ConfigChannel+0x7fa>
 8004120:	47ff0000 	.word	0x47ff0000
 8004124:	40022000 	.word	0x40022000
 8004128:	04300002 	.word	0x04300002
 800412c:	08600004 	.word	0x08600004
 8004130:	0c900008 	.word	0x0c900008
 8004134:	10c00010 	.word	0x10c00010
 8004138:	14f00020 	.word	0x14f00020
 800413c:	2a000400 	.word	0x2a000400
 8004140:	2e300800 	.word	0x2e300800
 8004144:	32601000 	.word	0x32601000
 8004148:	43210000 	.word	0x43210000
 800414c:	4b840000 	.word	0x4b840000
 8004150:	4fb80000 	.word	0x4fb80000
 8004154:	47520000 	.word	0x47520000
 8004158:	36902000 	.word	0x36902000
 800415c:	25b00200 	.word	0x25b00200
 8004160:	21800100 	.word	0x21800100
 8004164:	1d500080 	.word	0x1d500080
 8004168:	19200040 	.word	0x19200040
 800416c:	40022100 	.word	0x40022100
 8004170:	58026000 	.word	0x58026000
 8004174:	3ac04000 	.word	0x3ac04000
 8004178:	3ef08000 	.word	0x3ef08000
 800417c:	40022300 	.word	0x40022300
 8004180:	4b61      	ldr	r3, [pc, #388]	@ (8004308 <HAL_ADC_ConfigChannel+0x980>)
 8004182:	4618      	mov	r0, r3
 8004184:	f7fe fd04 	bl	8002b90 <LL_ADC_GetCommonPathInternalCh>
 8004188:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a5f      	ldr	r2, [pc, #380]	@ (800430c <HAL_ADC_ConfigChannel+0x984>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d004      	beq.n	800419e <HAL_ADC_ConfigChannel+0x816>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a5d      	ldr	r2, [pc, #372]	@ (8004310 <HAL_ADC_ConfigChannel+0x988>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d10e      	bne.n	80041bc <HAL_ADC_ConfigChannel+0x834>
 800419e:	485b      	ldr	r0, [pc, #364]	@ (800430c <HAL_ADC_ConfigChannel+0x984>)
 80041a0:	f7fe ff58 	bl	8003054 <LL_ADC_IsEnabled>
 80041a4:	4604      	mov	r4, r0
 80041a6:	485a      	ldr	r0, [pc, #360]	@ (8004310 <HAL_ADC_ConfigChannel+0x988>)
 80041a8:	f7fe ff54 	bl	8003054 <LL_ADC_IsEnabled>
 80041ac:	4603      	mov	r3, r0
 80041ae:	4323      	orrs	r3, r4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	bf0c      	ite	eq
 80041b4:	2301      	moveq	r3, #1
 80041b6:	2300      	movne	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	e008      	b.n	80041ce <HAL_ADC_ConfigChannel+0x846>
 80041bc:	4855      	ldr	r0, [pc, #340]	@ (8004314 <HAL_ADC_ConfigChannel+0x98c>)
 80041be:	f7fe ff49 	bl	8003054 <LL_ADC_IsEnabled>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	bf0c      	ite	eq
 80041c8:	2301      	moveq	r3, #1
 80041ca:	2300      	movne	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d07d      	beq.n	80042ce <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a50      	ldr	r2, [pc, #320]	@ (8004318 <HAL_ADC_ConfigChannel+0x990>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d130      	bne.n	800423e <HAL_ADC_ConfigChannel+0x8b6>
 80041dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d12b      	bne.n	800423e <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a4a      	ldr	r2, [pc, #296]	@ (8004314 <HAL_ADC_ConfigChannel+0x98c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	f040 8081 	bne.w	80042f4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a45      	ldr	r2, [pc, #276]	@ (800430c <HAL_ADC_ConfigChannel+0x984>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d004      	beq.n	8004206 <HAL_ADC_ConfigChannel+0x87e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a43      	ldr	r2, [pc, #268]	@ (8004310 <HAL_ADC_ConfigChannel+0x988>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d101      	bne.n	800420a <HAL_ADC_ConfigChannel+0x882>
 8004206:	4a45      	ldr	r2, [pc, #276]	@ (800431c <HAL_ADC_ConfigChannel+0x994>)
 8004208:	e000      	b.n	800420c <HAL_ADC_ConfigChannel+0x884>
 800420a:	4a3f      	ldr	r2, [pc, #252]	@ (8004308 <HAL_ADC_ConfigChannel+0x980>)
 800420c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800420e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004212:	4619      	mov	r1, r3
 8004214:	4610      	mov	r0, r2
 8004216:	f7fe fca8 	bl	8002b6a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800421a:	4b41      	ldr	r3, [pc, #260]	@ (8004320 <HAL_ADC_ConfigChannel+0x998>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	099b      	lsrs	r3, r3, #6
 8004220:	4a40      	ldr	r2, [pc, #256]	@ (8004324 <HAL_ADC_ConfigChannel+0x99c>)
 8004222:	fba2 2303 	umull	r2, r3, r2, r3
 8004226:	099b      	lsrs	r3, r3, #6
 8004228:	3301      	adds	r3, #1
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800422e:	e002      	b.n	8004236 <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3b01      	subs	r3, #1
 8004234:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1f9      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800423c:	e05a      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a39      	ldr	r2, [pc, #228]	@ (8004328 <HAL_ADC_ConfigChannel+0x9a0>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d11e      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x8fe>
 8004248:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800424a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d119      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a2f      	ldr	r2, [pc, #188]	@ (8004314 <HAL_ADC_ConfigChannel+0x98c>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d14b      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a2a      	ldr	r2, [pc, #168]	@ (800430c <HAL_ADC_ConfigChannel+0x984>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d004      	beq.n	8004270 <HAL_ADC_ConfigChannel+0x8e8>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a29      	ldr	r2, [pc, #164]	@ (8004310 <HAL_ADC_ConfigChannel+0x988>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d101      	bne.n	8004274 <HAL_ADC_ConfigChannel+0x8ec>
 8004270:	4a2a      	ldr	r2, [pc, #168]	@ (800431c <HAL_ADC_ConfigChannel+0x994>)
 8004272:	e000      	b.n	8004276 <HAL_ADC_ConfigChannel+0x8ee>
 8004274:	4a24      	ldr	r2, [pc, #144]	@ (8004308 <HAL_ADC_ConfigChannel+0x980>)
 8004276:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004278:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800427c:	4619      	mov	r1, r3
 800427e:	4610      	mov	r0, r2
 8004280:	f7fe fc73 	bl	8002b6a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004284:	e036      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a28      	ldr	r2, [pc, #160]	@ (800432c <HAL_ADC_ConfigChannel+0x9a4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d131      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x96c>
 8004290:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d12c      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1d      	ldr	r2, [pc, #116]	@ (8004314 <HAL_ADC_ConfigChannel+0x98c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d127      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a18      	ldr	r2, [pc, #96]	@ (800430c <HAL_ADC_ConfigChannel+0x984>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d004      	beq.n	80042b8 <HAL_ADC_ConfigChannel+0x930>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a17      	ldr	r2, [pc, #92]	@ (8004310 <HAL_ADC_ConfigChannel+0x988>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d101      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x934>
 80042b8:	4a18      	ldr	r2, [pc, #96]	@ (800431c <HAL_ADC_ConfigChannel+0x994>)
 80042ba:	e000      	b.n	80042be <HAL_ADC_ConfigChannel+0x936>
 80042bc:	4a12      	ldr	r2, [pc, #72]	@ (8004308 <HAL_ADC_ConfigChannel+0x980>)
 80042be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80042c4:	4619      	mov	r1, r3
 80042c6:	4610      	mov	r0, r2
 80042c8:	f7fe fc4f 	bl	8002b6a <LL_ADC_SetCommonPathInternalCh>
 80042cc:	e012      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042d2:	f043 0220 	orr.w	r2, r3, #32
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80042e0:	e008      	b.n	80042f4 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042e6:	f043 0220 	orr.w	r2, r3, #32
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80042fc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8004300:	4618      	mov	r0, r3
 8004302:	3794      	adds	r7, #148	@ 0x94
 8004304:	46bd      	mov	sp, r7
 8004306:	bd90      	pop	{r4, r7, pc}
 8004308:	58026300 	.word	0x58026300
 800430c:	40022000 	.word	0x40022000
 8004310:	40022100 	.word	0x40022100
 8004314:	58026000 	.word	0x58026000
 8004318:	c7520000 	.word	0xc7520000
 800431c:	40022300 	.word	0x40022300
 8004320:	24000000 	.word	0x24000000
 8004324:	053e2d63 	.word	0x053e2d63
 8004328:	c3210000 	.word	0xc3210000
 800432c:	cb840000 	.word	0xcb840000

08004330 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a6c      	ldr	r2, [pc, #432]	@ (80044f0 <ADC_ConfigureBoostMode+0x1c0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d004      	beq.n	800434c <ADC_ConfigureBoostMode+0x1c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a6b      	ldr	r2, [pc, #428]	@ (80044f4 <ADC_ConfigureBoostMode+0x1c4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d109      	bne.n	8004360 <ADC_ConfigureBoostMode+0x30>
 800434c:	4b6a      	ldr	r3, [pc, #424]	@ (80044f8 <ADC_ConfigureBoostMode+0x1c8>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004354:	2b00      	cmp	r3, #0
 8004356:	bf14      	ite	ne
 8004358:	2301      	movne	r3, #1
 800435a:	2300      	moveq	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	e008      	b.n	8004372 <ADC_ConfigureBoostMode+0x42>
 8004360:	4b66      	ldr	r3, [pc, #408]	@ (80044fc <ADC_ConfigureBoostMode+0x1cc>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004368:	2b00      	cmp	r3, #0
 800436a:	bf14      	ite	ne
 800436c:	2301      	movne	r3, #1
 800436e:	2300      	moveq	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d01c      	beq.n	80043b0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004376:	f005 fd0b 	bl	8009d90 <HAL_RCC_GetHCLKFreq>
 800437a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004384:	d010      	beq.n	80043a8 <ADC_ConfigureBoostMode+0x78>
 8004386:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800438a:	d873      	bhi.n	8004474 <ADC_ConfigureBoostMode+0x144>
 800438c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004390:	d002      	beq.n	8004398 <ADC_ConfigureBoostMode+0x68>
 8004392:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004396:	d16d      	bne.n	8004474 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	0c1b      	lsrs	r3, r3, #16
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a4:	60fb      	str	r3, [r7, #12]
        break;
 80043a6:	e068      	b.n	800447a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	089b      	lsrs	r3, r3, #2
 80043ac:	60fb      	str	r3, [r7, #12]
        break;
 80043ae:	e064      	b.n	800447a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80043b0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80043b4:	f04f 0100 	mov.w	r1, #0
 80043b8:	f006 fee6 	bl	800b188 <HAL_RCCEx_GetPeriphCLKFreq>
 80043bc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80043c6:	d051      	beq.n	800446c <ADC_ConfigureBoostMode+0x13c>
 80043c8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80043cc:	d854      	bhi.n	8004478 <ADC_ConfigureBoostMode+0x148>
 80043ce:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80043d2:	d047      	beq.n	8004464 <ADC_ConfigureBoostMode+0x134>
 80043d4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80043d8:	d84e      	bhi.n	8004478 <ADC_ConfigureBoostMode+0x148>
 80043da:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80043de:	d03d      	beq.n	800445c <ADC_ConfigureBoostMode+0x12c>
 80043e0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80043e4:	d848      	bhi.n	8004478 <ADC_ConfigureBoostMode+0x148>
 80043e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043ea:	d033      	beq.n	8004454 <ADC_ConfigureBoostMode+0x124>
 80043ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043f0:	d842      	bhi.n	8004478 <ADC_ConfigureBoostMode+0x148>
 80043f2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80043f6:	d029      	beq.n	800444c <ADC_ConfigureBoostMode+0x11c>
 80043f8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80043fc:	d83c      	bhi.n	8004478 <ADC_ConfigureBoostMode+0x148>
 80043fe:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004402:	d01a      	beq.n	800443a <ADC_ConfigureBoostMode+0x10a>
 8004404:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004408:	d836      	bhi.n	8004478 <ADC_ConfigureBoostMode+0x148>
 800440a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800440e:	d014      	beq.n	800443a <ADC_ConfigureBoostMode+0x10a>
 8004410:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004414:	d830      	bhi.n	8004478 <ADC_ConfigureBoostMode+0x148>
 8004416:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800441a:	d00e      	beq.n	800443a <ADC_ConfigureBoostMode+0x10a>
 800441c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004420:	d82a      	bhi.n	8004478 <ADC_ConfigureBoostMode+0x148>
 8004422:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004426:	d008      	beq.n	800443a <ADC_ConfigureBoostMode+0x10a>
 8004428:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800442c:	d824      	bhi.n	8004478 <ADC_ConfigureBoostMode+0x148>
 800442e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004432:	d002      	beq.n	800443a <ADC_ConfigureBoostMode+0x10a>
 8004434:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004438:	d11e      	bne.n	8004478 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	0c9b      	lsrs	r3, r3, #18
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	fbb2 f3f3 	udiv	r3, r2, r3
 8004448:	60fb      	str	r3, [r7, #12]
        break;
 800444a:	e016      	b.n	800447a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	091b      	lsrs	r3, r3, #4
 8004450:	60fb      	str	r3, [r7, #12]
        break;
 8004452:	e012      	b.n	800447a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	60fb      	str	r3, [r7, #12]
        break;
 800445a:	e00e      	b.n	800447a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	099b      	lsrs	r3, r3, #6
 8004460:	60fb      	str	r3, [r7, #12]
        break;
 8004462:	e00a      	b.n	800447a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	09db      	lsrs	r3, r3, #7
 8004468:	60fb      	str	r3, [r7, #12]
        break;
 800446a:	e006      	b.n	800447a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	0a1b      	lsrs	r3, r3, #8
 8004470:	60fb      	str	r3, [r7, #12]
        break;
 8004472:	e002      	b.n	800447a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004474:	bf00      	nop
 8004476:	e000      	b.n	800447a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004478:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	085b      	lsrs	r3, r3, #1
 800447e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4a1f      	ldr	r2, [pc, #124]	@ (8004500 <ADC_ConfigureBoostMode+0x1d0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d808      	bhi.n	800449a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004496:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004498:	e025      	b.n	80044e6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4a19      	ldr	r2, [pc, #100]	@ (8004504 <ADC_ConfigureBoostMode+0x1d4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d80a      	bhi.n	80044b8 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044b4:	609a      	str	r2, [r3, #8]
}
 80044b6:	e016      	b.n	80044e6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4a13      	ldr	r2, [pc, #76]	@ (8004508 <ADC_ConfigureBoostMode+0x1d8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d80a      	bhi.n	80044d6 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044d2:	609a      	str	r2, [r3, #8]
}
 80044d4:	e007      	b.n	80044e6 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80044e4:	609a      	str	r2, [r3, #8]
}
 80044e6:	bf00      	nop
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40022000 	.word	0x40022000
 80044f4:	40022100 	.word	0x40022100
 80044f8:	40022300 	.word	0x40022300
 80044fc:	58026300 	.word	0x58026300
 8004500:	005f5e10 	.word	0x005f5e10
 8004504:	00bebc20 	.word	0x00bebc20
 8004508:	017d7840 	.word	0x017d7840

0800450c <LL_ADC_IsEnabled>:
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <LL_ADC_IsEnabled+0x18>
 8004520:	2301      	movs	r3, #1
 8004522:	e000      	b.n	8004526 <LL_ADC_IsEnabled+0x1a>
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <LL_ADC_REG_IsConversionOngoing>:
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 0304 	and.w	r3, r3, #4
 8004542:	2b04      	cmp	r3, #4
 8004544:	d101      	bne.n	800454a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004546:	2301      	movs	r3, #1
 8004548:	e000      	b.n	800454c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80045bc:	b590      	push	{r4, r7, lr}
 80045be:	b0a3      	sub	sp, #140	@ 0x8c
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d101      	bne.n	80045da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80045d6:	2302      	movs	r3, #2
 80045d8:	e0c1      	b.n	800475e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80045e2:	2300      	movs	r3, #0
 80045e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80045e6:	2300      	movs	r3, #0
 80045e8:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a5e      	ldr	r2, [pc, #376]	@ (8004768 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d102      	bne.n	80045fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80045f4:	4b5d      	ldr	r3, [pc, #372]	@ (800476c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	e001      	b.n	80045fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10b      	bne.n	800461c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004608:	f043 0220 	orr.w	r2, r3, #32
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0a0      	b.n	800475e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff ff87 	bl	8004532 <LL_ADC_REG_IsConversionOngoing>
 8004624:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff ff80 	bl	8004532 <LL_ADC_REG_IsConversionOngoing>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	f040 8081 	bne.w	800473c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800463a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800463e:	2b00      	cmp	r3, #0
 8004640:	d17c      	bne.n	800473c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a48      	ldr	r2, [pc, #288]	@ (8004768 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a46      	ldr	r2, [pc, #280]	@ (800476c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d101      	bne.n	800465a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004656:	4b46      	ldr	r3, [pc, #280]	@ (8004770 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004658:	e000      	b.n	800465c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800465a:	4b46      	ldr	r3, [pc, #280]	@ (8004774 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800465c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d039      	beq.n	80046da <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004666:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	431a      	orrs	r2, r3
 8004674:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004676:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a3a      	ldr	r2, [pc, #232]	@ (8004768 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d004      	beq.n	800468c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a39      	ldr	r2, [pc, #228]	@ (800476c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d10e      	bne.n	80046aa <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800468c:	4836      	ldr	r0, [pc, #216]	@ (8004768 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800468e:	f7ff ff3d 	bl	800450c <LL_ADC_IsEnabled>
 8004692:	4604      	mov	r4, r0
 8004694:	4835      	ldr	r0, [pc, #212]	@ (800476c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004696:	f7ff ff39 	bl	800450c <LL_ADC_IsEnabled>
 800469a:	4603      	mov	r3, r0
 800469c:	4323      	orrs	r3, r4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	bf0c      	ite	eq
 80046a2:	2301      	moveq	r3, #1
 80046a4:	2300      	movne	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	e008      	b.n	80046bc <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80046aa:	4833      	ldr	r0, [pc, #204]	@ (8004778 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80046ac:	f7ff ff2e 	bl	800450c <LL_ADC_IsEnabled>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	bf0c      	ite	eq
 80046b6:	2301      	moveq	r3, #1
 80046b8:	2300      	movne	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d047      	beq.n	8004750 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80046c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	4b2d      	ldr	r3, [pc, #180]	@ (800477c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	6811      	ldr	r1, [r2, #0]
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	6892      	ldr	r2, [r2, #8]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	431a      	orrs	r2, r3
 80046d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046d6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046d8:	e03a      	b.n	8004750 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80046da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046e4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004768 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d004      	beq.n	80046fa <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a1d      	ldr	r2, [pc, #116]	@ (800476c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d10e      	bne.n	8004718 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80046fa:	481b      	ldr	r0, [pc, #108]	@ (8004768 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80046fc:	f7ff ff06 	bl	800450c <LL_ADC_IsEnabled>
 8004700:	4604      	mov	r4, r0
 8004702:	481a      	ldr	r0, [pc, #104]	@ (800476c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004704:	f7ff ff02 	bl	800450c <LL_ADC_IsEnabled>
 8004708:	4603      	mov	r3, r0
 800470a:	4323      	orrs	r3, r4
 800470c:	2b00      	cmp	r3, #0
 800470e:	bf0c      	ite	eq
 8004710:	2301      	moveq	r3, #1
 8004712:	2300      	movne	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	e008      	b.n	800472a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004718:	4817      	ldr	r0, [pc, #92]	@ (8004778 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800471a:	f7ff fef7 	bl	800450c <LL_ADC_IsEnabled>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	bf0c      	ite	eq
 8004724:	2301      	moveq	r3, #1
 8004726:	2300      	movne	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d010      	beq.n	8004750 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800472e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	4b12      	ldr	r3, [pc, #72]	@ (800477c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004734:	4013      	ands	r3, r2
 8004736:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004738:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800473a:	e009      	b.n	8004750 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004740:	f043 0220 	orr.w	r2, r3, #32
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800474e:	e000      	b.n	8004752 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004750:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800475a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800475e:	4618      	mov	r0, r3
 8004760:	378c      	adds	r7, #140	@ 0x8c
 8004762:	46bd      	mov	sp, r7
 8004764:	bd90      	pop	{r4, r7, pc}
 8004766:	bf00      	nop
 8004768:	40022000 	.word	0x40022000
 800476c:	40022100 	.word	0x40022100
 8004770:	40022300 	.word	0x40022300
 8004774:	58026300 	.word	0x58026300
 8004778:	58026000 	.word	0x58026000
 800477c:	fffff0e0 	.word	0xfffff0e0

08004780 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e023      	b.n	80047da <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fc f8de 	bl	8000968 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_CORDIC_CalculateCpltCallback>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
__weak void HAL_CORDIC_CalculateCpltCallback(CORDIC_HandleTypeDef *hcordic)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  UNUSED(hcordic);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CORDIC_CalculateCpltCallback can be implemented in the user file
   */
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <HAL_CORDIC_IRQHandler>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
void HAL_CORDIC_IRQHandler(CORDIC_HandleTypeDef *hcordic)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b082      	sub	sp, #8
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  /* Check if calculation complete interrupt is enabled and if result ready
     flag is raised */
  if (__HAL_CORDIC_GET_IT_SOURCE(hcordic, CORDIC_IT_IEN) != 0U)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d039      	beq.n	8004880 <HAL_CORDIC_IRQHandler+0x8a>
  {
    if (__HAL_CORDIC_GET_FLAG(hcordic, CORDIC_FLAG_RRDY) != 0U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004816:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800481a:	d101      	bne.n	8004820 <HAL_CORDIC_IRQHandler+0x2a>
 800481c:	2301      	movs	r3, #1
 800481e:	e000      	b.n	8004822 <HAL_CORDIC_IRQHandler+0x2c>
 8004820:	2300      	movs	r3, #0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d02c      	beq.n	8004880 <HAL_CORDIC_IRQHandler+0x8a>
    {
      /* Decrement number of calculations to get */
      hcordic->NbCalcToGet--;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	1e5a      	subs	r2, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	611a      	str	r2, [r3, #16]

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &(hcordic->pOutBuff));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3308      	adds	r3, #8
 8004834:	4619      	mov	r1, r3
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f84f 	bl	80048da <CORDIC_ReadOutDataIncrementPtr>

      /* Check if calculations are still to be ordered */
      if (hcordic->NbCalcToOrder > 0U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <HAL_CORDIC_IRQHandler+0x64>
      {
        /* Decrement number of calculations to order */
        hcordic->NbCalcToOrder--;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	1e5a      	subs	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	60da      	str	r2, [r3, #12]

        /* Continue the processing by providing another write of input data
           in the Write Data register, and increment input buffer pointer */
        CORDIC_WriteInDataIncrementPtr(hcordic, &(hcordic->pInBuff));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3304      	adds	r3, #4
 8004852:	4619      	mov	r1, r3
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f817 	bl	8004888 <CORDIC_WriteInDataIncrementPtr>
      }

      /* Check if all calculations results are got */
      if (hcordic->NbCalcToGet == 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10e      	bne.n	8004880 <HAL_CORDIC_IRQHandler+0x8a>
      {
        /* Disable Result Ready Interrupt */
        __HAL_CORDIC_DISABLE_IT(hcordic, CORDIC_IT_IEN);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004870:	601a      	str	r2, [r3, #0]

        /* Change the CORDIC state */
        hcordic->State = HAL_CORDIC_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
#if USE_HAL_CORDIC_REGISTER_CALLBACKS == 1
        /*Call registered callback*/
        hcordic->CalculateCpltCallback(hcordic);
#else
        /*Call legacy weak callback*/
        HAL_CORDIC_CalculateCpltCallback(hcordic);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff ffb1 	bl	80047e2 <HAL_CORDIC_CalculateCpltCallback>
#endif /* USE_HAL_CORDIC_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004880:	bf00      	nop
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, const int32_t **ppInBuff)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	1d1a      	adds	r2, r3, #4
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048b6:	d10a      	bne.n	80048ce <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	1d1a      	adds	r2, r3, #4
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	601a      	str	r2, [r3, #0]
  }
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	1d1a      	adds	r2, r3, #4
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004904:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004908:	d10a      	bne.n	8004920 <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	1d1a      	adds	r2, r3, #4
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	601a      	str	r2, [r3, #0]
  }
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800493c:	4b0b      	ldr	r3, [pc, #44]	@ (800496c <__NVIC_SetPriorityGrouping+0x40>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004948:	4013      	ands	r3, r2
 800494a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004954:	4b06      	ldr	r3, [pc, #24]	@ (8004970 <__NVIC_SetPriorityGrouping+0x44>)
 8004956:	4313      	orrs	r3, r2
 8004958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800495a:	4a04      	ldr	r2, [pc, #16]	@ (800496c <__NVIC_SetPriorityGrouping+0x40>)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	60d3      	str	r3, [r2, #12]
}
 8004960:	bf00      	nop
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	e000ed00 	.word	0xe000ed00
 8004970:	05fa0000 	.word	0x05fa0000

08004974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004978:	4b04      	ldr	r3, [pc, #16]	@ (800498c <__NVIC_GetPriorityGrouping+0x18>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	0a1b      	lsrs	r3, r3, #8
 800497e:	f003 0307 	and.w	r3, r3, #7
}
 8004982:	4618      	mov	r0, r3
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	e000ed00 	.word	0xe000ed00

08004990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800499a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	db0b      	blt.n	80049ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049a2:	88fb      	ldrh	r3, [r7, #6]
 80049a4:	f003 021f 	and.w	r2, r3, #31
 80049a8:	4907      	ldr	r1, [pc, #28]	@ (80049c8 <__NVIC_EnableIRQ+0x38>)
 80049aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	2001      	movs	r0, #1
 80049b2:	fa00 f202 	lsl.w	r2, r0, r2
 80049b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	e000e100 	.word	0xe000e100

080049cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	6039      	str	r1, [r7, #0]
 80049d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	db0a      	blt.n	80049f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	490c      	ldr	r1, [pc, #48]	@ (8004a18 <__NVIC_SetPriority+0x4c>)
 80049e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049ea:	0112      	lsls	r2, r2, #4
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	440b      	add	r3, r1
 80049f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049f4:	e00a      	b.n	8004a0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	4908      	ldr	r1, [pc, #32]	@ (8004a1c <__NVIC_SetPriority+0x50>)
 80049fc:	88fb      	ldrh	r3, [r7, #6]
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	3b04      	subs	r3, #4
 8004a04:	0112      	lsls	r2, r2, #4
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	440b      	add	r3, r1
 8004a0a:	761a      	strb	r2, [r3, #24]
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	e000e100 	.word	0xe000e100
 8004a1c:	e000ed00 	.word	0xe000ed00

08004a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b089      	sub	sp, #36	@ 0x24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f1c3 0307 	rsb	r3, r3, #7
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	bf28      	it	cs
 8004a3e:	2304      	movcs	r3, #4
 8004a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	3304      	adds	r3, #4
 8004a46:	2b06      	cmp	r3, #6
 8004a48:	d902      	bls.n	8004a50 <NVIC_EncodePriority+0x30>
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	3b03      	subs	r3, #3
 8004a4e:	e000      	b.n	8004a52 <NVIC_EncodePriority+0x32>
 8004a50:	2300      	movs	r3, #0
 8004a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a54:	f04f 32ff 	mov.w	r2, #4294967295
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	43da      	mvns	r2, r3
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	401a      	ands	r2, r3
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a68:	f04f 31ff 	mov.w	r1, #4294967295
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a72:	43d9      	mvns	r1, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a78:	4313      	orrs	r3, r2
         );
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3724      	adds	r7, #36	@ 0x24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
	...

08004a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a98:	d301      	bcc.n	8004a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e00f      	b.n	8004abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac8 <SysTick_Config+0x40>)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004aa6:	210f      	movs	r1, #15
 8004aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aac:	f7ff ff8e 	bl	80049cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ab0:	4b05      	ldr	r3, [pc, #20]	@ (8004ac8 <SysTick_Config+0x40>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ab6:	4b04      	ldr	r3, [pc, #16]	@ (8004ac8 <SysTick_Config+0x40>)
 8004ab8:	2207      	movs	r2, #7
 8004aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	e000e010 	.word	0xe000e010

08004acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f7ff ff29 	bl	800492c <__NVIC_SetPriorityGrouping>
}
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b086      	sub	sp, #24
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	4603      	mov	r3, r0
 8004aea:	60b9      	str	r1, [r7, #8]
 8004aec:	607a      	str	r2, [r7, #4]
 8004aee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004af0:	f7ff ff40 	bl	8004974 <__NVIC_GetPriorityGrouping>
 8004af4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	6978      	ldr	r0, [r7, #20]
 8004afc:	f7ff ff90 	bl	8004a20 <NVIC_EncodePriority>
 8004b00:	4602      	mov	r2, r0
 8004b02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b06:	4611      	mov	r1, r2
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff ff5f 	bl	80049cc <__NVIC_SetPriority>
}
 8004b0e:	bf00      	nop
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b082      	sub	sp, #8
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff ff33 	bl	8004990 <__NVIC_EnableIRQ>
}
 8004b2a:	bf00      	nop
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b082      	sub	sp, #8
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff ffa4 	bl	8004a88 <SysTick_Config>
 8004b40:	4603      	mov	r3, r0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
	...

08004b4c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004b50:	f3bf 8f5f 	dmb	sy
}
 8004b54:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004b56:	4b07      	ldr	r3, [pc, #28]	@ (8004b74 <HAL_MPU_Disable+0x28>)
 8004b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5a:	4a06      	ldr	r2, [pc, #24]	@ (8004b74 <HAL_MPU_Disable+0x28>)
 8004b5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b60:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004b62:	4b05      	ldr	r3, [pc, #20]	@ (8004b78 <HAL_MPU_Disable+0x2c>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	605a      	str	r2, [r3, #4]
}
 8004b68:	bf00      	nop
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	e000ed00 	.word	0xe000ed00
 8004b78:	e000ed90 	.word	0xe000ed90

08004b7c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004b84:	4a0b      	ldr	r2, [pc, #44]	@ (8004bb4 <HAL_MPU_Enable+0x38>)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f043 0301 	orr.w	r3, r3, #1
 8004b8c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb8 <HAL_MPU_Enable+0x3c>)
 8004b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b92:	4a09      	ldr	r2, [pc, #36]	@ (8004bb8 <HAL_MPU_Enable+0x3c>)
 8004b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b98:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004b9a:	f3bf 8f4f 	dsb	sy
}
 8004b9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004ba0:	f3bf 8f6f 	isb	sy
}
 8004ba4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	e000ed90 	.word	0xe000ed90
 8004bb8:	e000ed00 	.word	0xe000ed00

08004bbc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	785a      	ldrb	r2, [r3, #1]
 8004bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8004c38 <HAL_MPU_ConfigRegion+0x7c>)
 8004bca:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8004c38 <HAL_MPU_ConfigRegion+0x7c>)
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	4a19      	ldr	r2, [pc, #100]	@ (8004c38 <HAL_MPU_ConfigRegion+0x7c>)
 8004bd2:	f023 0301 	bic.w	r3, r3, #1
 8004bd6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004bd8:	4a17      	ldr	r2, [pc, #92]	@ (8004c38 <HAL_MPU_ConfigRegion+0x7c>)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	7b1b      	ldrb	r3, [r3, #12]
 8004be4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	7adb      	ldrb	r3, [r3, #11]
 8004bea:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004bec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	7a9b      	ldrb	r3, [r3, #10]
 8004bf2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004bf4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	7b5b      	ldrb	r3, [r3, #13]
 8004bfa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004bfc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	7b9b      	ldrb	r3, [r3, #14]
 8004c02:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004c04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	7bdb      	ldrb	r3, [r3, #15]
 8004c0a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004c0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	7a5b      	ldrb	r3, [r3, #9]
 8004c12:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004c14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	7a1b      	ldrb	r3, [r3, #8]
 8004c1a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004c1c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	7812      	ldrb	r2, [r2, #0]
 8004c22:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004c24:	4a04      	ldr	r2, [pc, #16]	@ (8004c38 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004c26:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004c28:	6113      	str	r3, [r2, #16]
}
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	e000ed90 	.word	0xe000ed90

08004c3c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e014      	b.n	8004c78 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	791b      	ldrb	r3, [r3, #4]
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d105      	bne.n	8004c64 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fb ff40 	bl	8000ae4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08a      	sub	sp, #40	@ 0x28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <HAL_DAC_ConfigChannel+0x1e>
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e12d      	b.n	8004efe <HAL_DAC_ConfigChannel+0x27e>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b04      	cmp	r3, #4
    }
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	795b      	ldrb	r3, [r3, #5]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_DAC_ConfigChannel+0x34>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e124      	b.n	8004efe <HAL_DAC_ConfigChannel+0x27e>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d17a      	bne.n	8004dbe <HAL_DAC_ConfigChannel+0x13e>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004cc8:	f7fd ff0c 	bl	8002ae4 <HAL_GetTick>
 8004ccc:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d13d      	bne.n	8004d50 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004cd4:	e018      	b.n	8004d08 <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004cd6:	f7fd ff05 	bl	8002ae4 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d911      	bls.n	8004d08 <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cea:	4b87      	ldr	r3, [pc, #540]	@ (8004f08 <HAL_DAC_ConfigChannel+0x288>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f043 0208 	orr.w	r2, r3, #8
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2203      	movs	r2, #3
 8004d02:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e0fa      	b.n	8004efe <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d0e:	4b7e      	ldr	r3, [pc, #504]	@ (8004f08 <HAL_DAC_ConfigChannel+0x288>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1df      	bne.n	8004cd6 <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	6992      	ldr	r2, [r2, #24]
 8004d1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d20:	e020      	b.n	8004d64 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004d22:	f7fd fedf 	bl	8002ae4 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d90f      	bls.n	8004d50 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	da0a      	bge.n	8004d50 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f043 0208 	orr.w	r2, r3, #8
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2203      	movs	r2, #3
 8004d4a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e0d6      	b.n	8004efe <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	dbe3      	blt.n	8004d22 <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	6992      	ldr	r2, [r2, #24]
 8004d62:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f003 0310 	and.w	r3, r3, #16
 8004d70:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004d74:	fa01 f303 	lsl.w	r3, r1, r3
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	ea02 0103 	and.w	r1, r2, r3
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	69da      	ldr	r2, [r3, #28]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f003 0310 	and.w	r3, r3, #16
 8004d88:	409a      	lsls	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f003 0310 	and.w	r3, r3, #16
 8004d9e:	21ff      	movs	r1, #255	@ 0xff
 8004da0:	fa01 f303 	lsl.w	r3, r1, r3
 8004da4:	43db      	mvns	r3, r3
 8004da6:	ea02 0103 	and.w	r1, r2, r3
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	6a1a      	ldr	r2, [r3, #32]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f003 0310 	and.w	r3, r3, #16
 8004db4:	409a      	lsls	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d11d      	bne.n	8004e02 <HAL_DAC_ConfigChannel+0x182>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dcc:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f003 0310 	and.w	r3, r3, #16
 8004dd4:	221f      	movs	r2, #31
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	43db      	mvns	r3, r3
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	4013      	ands	r3, r2
 8004de0:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f003 0310 	and.w	r3, r3, #16
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e08:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f003 0310 	and.w	r3, r3, #16
 8004e10:	2207      	movs	r2, #7
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43db      	mvns	r3, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d102      	bne.n	8004e2c <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = 0x00000000UL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e2a:	e00f      	b.n	8004e4c <HAL_DAC_ConfigChannel+0x1cc>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d102      	bne.n	8004e3a <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004e34:	2301      	movs	r3, #1
 8004e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e38:	e008      	b.n	8004e4c <HAL_DAC_ConfigChannel+0x1cc>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d102      	bne.n	8004e48 <HAL_DAC_ConfigChannel+0x1c8>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004e42:	2301      	movs	r3, #1
 8004e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e46:	e001      	b.n	8004e4c <HAL_DAC_ConfigChannel+0x1cc>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f003 0310 	and.w	r3, r3, #16
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6819      	ldr	r1, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f003 0310 	and.w	r3, r3, #16
 8004e82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	43da      	mvns	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	400a      	ands	r2, r1
 8004e92:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f003 0310 	and.w	r3, r3, #16
 8004ea2:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	43db      	mvns	r3, r3
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	4013      	ands	r3, r2
 8004eb0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6819      	ldr	r1, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f003 0310 	and.w	r3, r3, #16
 8004ede:	22c0      	movs	r2, #192	@ 0xc0
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	43da      	mvns	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	400a      	ands	r2, r1
 8004eec:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004efa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3728      	adds	r7, #40	@ 0x28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20008000 	.word	0x20008000

08004f0c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004f14:	f7fd fde6 	bl	8002ae4 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e312      	b.n	800554a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a66      	ldr	r2, [pc, #408]	@ (80050c4 <HAL_DMA_Init+0x1b8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d04a      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a65      	ldr	r2, [pc, #404]	@ (80050c8 <HAL_DMA_Init+0x1bc>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d045      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a63      	ldr	r2, [pc, #396]	@ (80050cc <HAL_DMA_Init+0x1c0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d040      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a62      	ldr	r2, [pc, #392]	@ (80050d0 <HAL_DMA_Init+0x1c4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d03b      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a60      	ldr	r2, [pc, #384]	@ (80050d4 <HAL_DMA_Init+0x1c8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d036      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a5f      	ldr	r2, [pc, #380]	@ (80050d8 <HAL_DMA_Init+0x1cc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d031      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a5d      	ldr	r2, [pc, #372]	@ (80050dc <HAL_DMA_Init+0x1d0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d02c      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a5c      	ldr	r2, [pc, #368]	@ (80050e0 <HAL_DMA_Init+0x1d4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d027      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a5a      	ldr	r2, [pc, #360]	@ (80050e4 <HAL_DMA_Init+0x1d8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d022      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a59      	ldr	r2, [pc, #356]	@ (80050e8 <HAL_DMA_Init+0x1dc>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d01d      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a57      	ldr	r2, [pc, #348]	@ (80050ec <HAL_DMA_Init+0x1e0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d018      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a56      	ldr	r2, [pc, #344]	@ (80050f0 <HAL_DMA_Init+0x1e4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d013      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a54      	ldr	r2, [pc, #336]	@ (80050f4 <HAL_DMA_Init+0x1e8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00e      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a53      	ldr	r2, [pc, #332]	@ (80050f8 <HAL_DMA_Init+0x1ec>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d009      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a51      	ldr	r2, [pc, #324]	@ (80050fc <HAL_DMA_Init+0x1f0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d004      	beq.n	8004fc4 <HAL_DMA_Init+0xb8>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a50      	ldr	r2, [pc, #320]	@ (8005100 <HAL_DMA_Init+0x1f4>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d101      	bne.n	8004fc8 <HAL_DMA_Init+0xbc>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e000      	b.n	8004fca <HAL_DMA_Init+0xbe>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 813c 	beq.w	8005248 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a37      	ldr	r2, [pc, #220]	@ (80050c4 <HAL_DMA_Init+0x1b8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d04a      	beq.n	8005080 <HAL_DMA_Init+0x174>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a36      	ldr	r2, [pc, #216]	@ (80050c8 <HAL_DMA_Init+0x1bc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d045      	beq.n	8005080 <HAL_DMA_Init+0x174>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a34      	ldr	r2, [pc, #208]	@ (80050cc <HAL_DMA_Init+0x1c0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d040      	beq.n	8005080 <HAL_DMA_Init+0x174>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a33      	ldr	r2, [pc, #204]	@ (80050d0 <HAL_DMA_Init+0x1c4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d03b      	beq.n	8005080 <HAL_DMA_Init+0x174>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a31      	ldr	r2, [pc, #196]	@ (80050d4 <HAL_DMA_Init+0x1c8>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d036      	beq.n	8005080 <HAL_DMA_Init+0x174>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a30      	ldr	r2, [pc, #192]	@ (80050d8 <HAL_DMA_Init+0x1cc>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d031      	beq.n	8005080 <HAL_DMA_Init+0x174>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a2e      	ldr	r2, [pc, #184]	@ (80050dc <HAL_DMA_Init+0x1d0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d02c      	beq.n	8005080 <HAL_DMA_Init+0x174>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a2d      	ldr	r2, [pc, #180]	@ (80050e0 <HAL_DMA_Init+0x1d4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d027      	beq.n	8005080 <HAL_DMA_Init+0x174>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a2b      	ldr	r2, [pc, #172]	@ (80050e4 <HAL_DMA_Init+0x1d8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d022      	beq.n	8005080 <HAL_DMA_Init+0x174>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a2a      	ldr	r2, [pc, #168]	@ (80050e8 <HAL_DMA_Init+0x1dc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d01d      	beq.n	8005080 <HAL_DMA_Init+0x174>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a28      	ldr	r2, [pc, #160]	@ (80050ec <HAL_DMA_Init+0x1e0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d018      	beq.n	8005080 <HAL_DMA_Init+0x174>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a27      	ldr	r2, [pc, #156]	@ (80050f0 <HAL_DMA_Init+0x1e4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d013      	beq.n	8005080 <HAL_DMA_Init+0x174>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a25      	ldr	r2, [pc, #148]	@ (80050f4 <HAL_DMA_Init+0x1e8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00e      	beq.n	8005080 <HAL_DMA_Init+0x174>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a24      	ldr	r2, [pc, #144]	@ (80050f8 <HAL_DMA_Init+0x1ec>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d009      	beq.n	8005080 <HAL_DMA_Init+0x174>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a22      	ldr	r2, [pc, #136]	@ (80050fc <HAL_DMA_Init+0x1f0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d004      	beq.n	8005080 <HAL_DMA_Init+0x174>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a21      	ldr	r2, [pc, #132]	@ (8005100 <HAL_DMA_Init+0x1f4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d108      	bne.n	8005092 <HAL_DMA_Init+0x186>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0201 	bic.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	e007      	b.n	80050a2 <HAL_DMA_Init+0x196>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 0201 	bic.w	r2, r2, #1
 80050a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80050a2:	e02f      	b.n	8005104 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050a4:	f7fd fd1e 	bl	8002ae4 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b05      	cmp	r3, #5
 80050b0:	d928      	bls.n	8005104 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2220      	movs	r2, #32
 80050b6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2203      	movs	r2, #3
 80050bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e242      	b.n	800554a <HAL_DMA_Init+0x63e>
 80050c4:	40020010 	.word	0x40020010
 80050c8:	40020028 	.word	0x40020028
 80050cc:	40020040 	.word	0x40020040
 80050d0:	40020058 	.word	0x40020058
 80050d4:	40020070 	.word	0x40020070
 80050d8:	40020088 	.word	0x40020088
 80050dc:	400200a0 	.word	0x400200a0
 80050e0:	400200b8 	.word	0x400200b8
 80050e4:	40020410 	.word	0x40020410
 80050e8:	40020428 	.word	0x40020428
 80050ec:	40020440 	.word	0x40020440
 80050f0:	40020458 	.word	0x40020458
 80050f4:	40020470 	.word	0x40020470
 80050f8:	40020488 	.word	0x40020488
 80050fc:	400204a0 	.word	0x400204a0
 8005100:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1c8      	bne.n	80050a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4b83      	ldr	r3, [pc, #524]	@ (800532c <HAL_DMA_Init+0x420>)
 800511e:	4013      	ands	r3, r2
 8005120:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800512a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005136:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005142:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005154:	2b04      	cmp	r3, #4
 8005156:	d107      	bne.n	8005168 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005160:	4313      	orrs	r3, r2
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	4313      	orrs	r3, r2
 8005166:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b28      	cmp	r3, #40	@ 0x28
 800516e:	d903      	bls.n	8005178 <HAL_DMA_Init+0x26c>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	2b2e      	cmp	r3, #46	@ 0x2e
 8005176:	d91f      	bls.n	80051b8 <HAL_DMA_Init+0x2ac>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	2b3e      	cmp	r3, #62	@ 0x3e
 800517e:	d903      	bls.n	8005188 <HAL_DMA_Init+0x27c>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b42      	cmp	r3, #66	@ 0x42
 8005186:	d917      	bls.n	80051b8 <HAL_DMA_Init+0x2ac>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	2b46      	cmp	r3, #70	@ 0x46
 800518e:	d903      	bls.n	8005198 <HAL_DMA_Init+0x28c>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2b48      	cmp	r3, #72	@ 0x48
 8005196:	d90f      	bls.n	80051b8 <HAL_DMA_Init+0x2ac>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	2b4e      	cmp	r3, #78	@ 0x4e
 800519e:	d903      	bls.n	80051a8 <HAL_DMA_Init+0x29c>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2b52      	cmp	r3, #82	@ 0x52
 80051a6:	d907      	bls.n	80051b8 <HAL_DMA_Init+0x2ac>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	2b73      	cmp	r3, #115	@ 0x73
 80051ae:	d905      	bls.n	80051bc <HAL_DMA_Init+0x2b0>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b77      	cmp	r3, #119	@ 0x77
 80051b6:	d801      	bhi.n	80051bc <HAL_DMA_Init+0x2b0>
 80051b8:	2301      	movs	r3, #1
 80051ba:	e000      	b.n	80051be <HAL_DMA_Init+0x2b2>
 80051bc:	2300      	movs	r3, #0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051c8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f023 0307 	bic.w	r3, r3, #7
 80051e0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d117      	bne.n	8005224 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00e      	beq.n	8005224 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f001 ff18 	bl	800703c <DMA_CheckFifoParam>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d008      	beq.n	8005224 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2240      	movs	r2, #64	@ 0x40
 8005216:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e192      	b.n	800554a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f001 fe53 	bl	8006ed8 <DMA_CalcBaseAndBitshift>
 8005232:	4603      	mov	r3, r0
 8005234:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800523a:	f003 031f 	and.w	r3, r3, #31
 800523e:	223f      	movs	r2, #63	@ 0x3f
 8005240:	409a      	lsls	r2, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	609a      	str	r2, [r3, #8]
 8005246:	e0c8      	b.n	80053da <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a38      	ldr	r2, [pc, #224]	@ (8005330 <HAL_DMA_Init+0x424>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d022      	beq.n	8005298 <HAL_DMA_Init+0x38c>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a37      	ldr	r2, [pc, #220]	@ (8005334 <HAL_DMA_Init+0x428>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d01d      	beq.n	8005298 <HAL_DMA_Init+0x38c>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a35      	ldr	r2, [pc, #212]	@ (8005338 <HAL_DMA_Init+0x42c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d018      	beq.n	8005298 <HAL_DMA_Init+0x38c>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a34      	ldr	r2, [pc, #208]	@ (800533c <HAL_DMA_Init+0x430>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d013      	beq.n	8005298 <HAL_DMA_Init+0x38c>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a32      	ldr	r2, [pc, #200]	@ (8005340 <HAL_DMA_Init+0x434>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00e      	beq.n	8005298 <HAL_DMA_Init+0x38c>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a31      	ldr	r2, [pc, #196]	@ (8005344 <HAL_DMA_Init+0x438>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d009      	beq.n	8005298 <HAL_DMA_Init+0x38c>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a2f      	ldr	r2, [pc, #188]	@ (8005348 <HAL_DMA_Init+0x43c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d004      	beq.n	8005298 <HAL_DMA_Init+0x38c>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a2e      	ldr	r2, [pc, #184]	@ (800534c <HAL_DMA_Init+0x440>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d101      	bne.n	800529c <HAL_DMA_Init+0x390>
 8005298:	2301      	movs	r3, #1
 800529a:	e000      	b.n	800529e <HAL_DMA_Init+0x392>
 800529c:	2300      	movs	r3, #0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 8092 	beq.w	80053c8 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a21      	ldr	r2, [pc, #132]	@ (8005330 <HAL_DMA_Init+0x424>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d021      	beq.n	80052f2 <HAL_DMA_Init+0x3e6>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a20      	ldr	r2, [pc, #128]	@ (8005334 <HAL_DMA_Init+0x428>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d01c      	beq.n	80052f2 <HAL_DMA_Init+0x3e6>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a1e      	ldr	r2, [pc, #120]	@ (8005338 <HAL_DMA_Init+0x42c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d017      	beq.n	80052f2 <HAL_DMA_Init+0x3e6>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1d      	ldr	r2, [pc, #116]	@ (800533c <HAL_DMA_Init+0x430>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d012      	beq.n	80052f2 <HAL_DMA_Init+0x3e6>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005340 <HAL_DMA_Init+0x434>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00d      	beq.n	80052f2 <HAL_DMA_Init+0x3e6>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a1a      	ldr	r2, [pc, #104]	@ (8005344 <HAL_DMA_Init+0x438>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d008      	beq.n	80052f2 <HAL_DMA_Init+0x3e6>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a18      	ldr	r2, [pc, #96]	@ (8005348 <HAL_DMA_Init+0x43c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d003      	beq.n	80052f2 <HAL_DMA_Init+0x3e6>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a17      	ldr	r2, [pc, #92]	@ (800534c <HAL_DMA_Init+0x440>)
 80052f0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4b10      	ldr	r3, [pc, #64]	@ (8005350 <HAL_DMA_Init+0x444>)
 800530e:	4013      	ands	r3, r2
 8005310:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	2b40      	cmp	r3, #64	@ 0x40
 8005318:	d01c      	beq.n	8005354 <HAL_DMA_Init+0x448>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	2b80      	cmp	r3, #128	@ 0x80
 8005320:	d102      	bne.n	8005328 <HAL_DMA_Init+0x41c>
 8005322:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005326:	e016      	b.n	8005356 <HAL_DMA_Init+0x44a>
 8005328:	2300      	movs	r3, #0
 800532a:	e014      	b.n	8005356 <HAL_DMA_Init+0x44a>
 800532c:	fe10803f 	.word	0xfe10803f
 8005330:	58025408 	.word	0x58025408
 8005334:	5802541c 	.word	0x5802541c
 8005338:	58025430 	.word	0x58025430
 800533c:	58025444 	.word	0x58025444
 8005340:	58025458 	.word	0x58025458
 8005344:	5802546c 	.word	0x5802546c
 8005348:	58025480 	.word	0x58025480
 800534c:	58025494 	.word	0x58025494
 8005350:	fffe000f 	.word	0xfffe000f
 8005354:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	68d2      	ldr	r2, [r2, #12]
 800535a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800535c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005364:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800536c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005374:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800537c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005384:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	461a      	mov	r2, r3
 800539a:	4b6e      	ldr	r3, [pc, #440]	@ (8005554 <HAL_DMA_Init+0x648>)
 800539c:	4413      	add	r3, r2
 800539e:	4a6e      	ldr	r2, [pc, #440]	@ (8005558 <HAL_DMA_Init+0x64c>)
 80053a0:	fba2 2303 	umull	r2, r3, r2, r3
 80053a4:	091b      	lsrs	r3, r3, #4
 80053a6:	009a      	lsls	r2, r3, #2
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f001 fd93 	bl	8006ed8 <DMA_CalcBaseAndBitshift>
 80053b2:	4603      	mov	r3, r0
 80053b4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ba:	f003 031f 	and.w	r3, r3, #31
 80053be:	2201      	movs	r2, #1
 80053c0:	409a      	lsls	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	605a      	str	r2, [r3, #4]
 80053c6:	e008      	b.n	80053da <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2240      	movs	r2, #64	@ 0x40
 80053cc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2203      	movs	r2, #3
 80053d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e0b7      	b.n	800554a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a5f      	ldr	r2, [pc, #380]	@ (800555c <HAL_DMA_Init+0x650>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d072      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a5d      	ldr	r2, [pc, #372]	@ (8005560 <HAL_DMA_Init+0x654>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d06d      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a5c      	ldr	r2, [pc, #368]	@ (8005564 <HAL_DMA_Init+0x658>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d068      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a5a      	ldr	r2, [pc, #360]	@ (8005568 <HAL_DMA_Init+0x65c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d063      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a59      	ldr	r2, [pc, #356]	@ (800556c <HAL_DMA_Init+0x660>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d05e      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a57      	ldr	r2, [pc, #348]	@ (8005570 <HAL_DMA_Init+0x664>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d059      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a56      	ldr	r2, [pc, #344]	@ (8005574 <HAL_DMA_Init+0x668>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d054      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a54      	ldr	r2, [pc, #336]	@ (8005578 <HAL_DMA_Init+0x66c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d04f      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a53      	ldr	r2, [pc, #332]	@ (800557c <HAL_DMA_Init+0x670>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d04a      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a51      	ldr	r2, [pc, #324]	@ (8005580 <HAL_DMA_Init+0x674>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d045      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a50      	ldr	r2, [pc, #320]	@ (8005584 <HAL_DMA_Init+0x678>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d040      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a4e      	ldr	r2, [pc, #312]	@ (8005588 <HAL_DMA_Init+0x67c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d03b      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a4d      	ldr	r2, [pc, #308]	@ (800558c <HAL_DMA_Init+0x680>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d036      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a4b      	ldr	r2, [pc, #300]	@ (8005590 <HAL_DMA_Init+0x684>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d031      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a4a      	ldr	r2, [pc, #296]	@ (8005594 <HAL_DMA_Init+0x688>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d02c      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a48      	ldr	r2, [pc, #288]	@ (8005598 <HAL_DMA_Init+0x68c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d027      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a47      	ldr	r2, [pc, #284]	@ (800559c <HAL_DMA_Init+0x690>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d022      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a45      	ldr	r2, [pc, #276]	@ (80055a0 <HAL_DMA_Init+0x694>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d01d      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a44      	ldr	r2, [pc, #272]	@ (80055a4 <HAL_DMA_Init+0x698>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d018      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a42      	ldr	r2, [pc, #264]	@ (80055a8 <HAL_DMA_Init+0x69c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d013      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a41      	ldr	r2, [pc, #260]	@ (80055ac <HAL_DMA_Init+0x6a0>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00e      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a3f      	ldr	r2, [pc, #252]	@ (80055b0 <HAL_DMA_Init+0x6a4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d009      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a3e      	ldr	r2, [pc, #248]	@ (80055b4 <HAL_DMA_Init+0x6a8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d004      	beq.n	80054ca <HAL_DMA_Init+0x5be>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a3c      	ldr	r2, [pc, #240]	@ (80055b8 <HAL_DMA_Init+0x6ac>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d101      	bne.n	80054ce <HAL_DMA_Init+0x5c2>
 80054ca:	2301      	movs	r3, #1
 80054cc:	e000      	b.n	80054d0 <HAL_DMA_Init+0x5c4>
 80054ce:	2300      	movs	r3, #0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d032      	beq.n	800553a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f001 fe2d 	bl	8007134 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	2b80      	cmp	r3, #128	@ 0x80
 80054e0:	d102      	bne.n	80054e8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80054fc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d010      	beq.n	8005528 <HAL_DMA_Init+0x61c>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b08      	cmp	r3, #8
 800550c:	d80c      	bhi.n	8005528 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f001 feaa 	bl	8007268 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005524:	605a      	str	r2, [r3, #4]
 8005526:	e008      	b.n	800553a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	a7fdabf8 	.word	0xa7fdabf8
 8005558:	cccccccd 	.word	0xcccccccd
 800555c:	40020010 	.word	0x40020010
 8005560:	40020028 	.word	0x40020028
 8005564:	40020040 	.word	0x40020040
 8005568:	40020058 	.word	0x40020058
 800556c:	40020070 	.word	0x40020070
 8005570:	40020088 	.word	0x40020088
 8005574:	400200a0 	.word	0x400200a0
 8005578:	400200b8 	.word	0x400200b8
 800557c:	40020410 	.word	0x40020410
 8005580:	40020428 	.word	0x40020428
 8005584:	40020440 	.word	0x40020440
 8005588:	40020458 	.word	0x40020458
 800558c:	40020470 	.word	0x40020470
 8005590:	40020488 	.word	0x40020488
 8005594:	400204a0 	.word	0x400204a0
 8005598:	400204b8 	.word	0x400204b8
 800559c:	58025408 	.word	0x58025408
 80055a0:	5802541c 	.word	0x5802541c
 80055a4:	58025430 	.word	0x58025430
 80055a8:	58025444 	.word	0x58025444
 80055ac:	58025458 	.word	0x58025458
 80055b0:	5802546c 	.word	0x5802546c
 80055b4:	58025480 	.word	0x58025480
 80055b8:	58025494 	.word	0x58025494

080055bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80055c4:	f7fd fa8e 	bl	8002ae4 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e2dc      	b.n	8005b8e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d008      	beq.n	80055f2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2280      	movs	r2, #128	@ 0x80
 80055e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e2cd      	b.n	8005b8e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a76      	ldr	r2, [pc, #472]	@ (80057d0 <HAL_DMA_Abort+0x214>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d04a      	beq.n	8005692 <HAL_DMA_Abort+0xd6>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a74      	ldr	r2, [pc, #464]	@ (80057d4 <HAL_DMA_Abort+0x218>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d045      	beq.n	8005692 <HAL_DMA_Abort+0xd6>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a73      	ldr	r2, [pc, #460]	@ (80057d8 <HAL_DMA_Abort+0x21c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d040      	beq.n	8005692 <HAL_DMA_Abort+0xd6>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a71      	ldr	r2, [pc, #452]	@ (80057dc <HAL_DMA_Abort+0x220>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d03b      	beq.n	8005692 <HAL_DMA_Abort+0xd6>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a70      	ldr	r2, [pc, #448]	@ (80057e0 <HAL_DMA_Abort+0x224>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d036      	beq.n	8005692 <HAL_DMA_Abort+0xd6>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a6e      	ldr	r2, [pc, #440]	@ (80057e4 <HAL_DMA_Abort+0x228>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d031      	beq.n	8005692 <HAL_DMA_Abort+0xd6>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a6d      	ldr	r2, [pc, #436]	@ (80057e8 <HAL_DMA_Abort+0x22c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d02c      	beq.n	8005692 <HAL_DMA_Abort+0xd6>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a6b      	ldr	r2, [pc, #428]	@ (80057ec <HAL_DMA_Abort+0x230>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d027      	beq.n	8005692 <HAL_DMA_Abort+0xd6>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a6a      	ldr	r2, [pc, #424]	@ (80057f0 <HAL_DMA_Abort+0x234>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d022      	beq.n	8005692 <HAL_DMA_Abort+0xd6>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a68      	ldr	r2, [pc, #416]	@ (80057f4 <HAL_DMA_Abort+0x238>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d01d      	beq.n	8005692 <HAL_DMA_Abort+0xd6>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a67      	ldr	r2, [pc, #412]	@ (80057f8 <HAL_DMA_Abort+0x23c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d018      	beq.n	8005692 <HAL_DMA_Abort+0xd6>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a65      	ldr	r2, [pc, #404]	@ (80057fc <HAL_DMA_Abort+0x240>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d013      	beq.n	8005692 <HAL_DMA_Abort+0xd6>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a64      	ldr	r2, [pc, #400]	@ (8005800 <HAL_DMA_Abort+0x244>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d00e      	beq.n	8005692 <HAL_DMA_Abort+0xd6>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a62      	ldr	r2, [pc, #392]	@ (8005804 <HAL_DMA_Abort+0x248>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d009      	beq.n	8005692 <HAL_DMA_Abort+0xd6>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a61      	ldr	r2, [pc, #388]	@ (8005808 <HAL_DMA_Abort+0x24c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d004      	beq.n	8005692 <HAL_DMA_Abort+0xd6>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a5f      	ldr	r2, [pc, #380]	@ (800580c <HAL_DMA_Abort+0x250>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d101      	bne.n	8005696 <HAL_DMA_Abort+0xda>
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <HAL_DMA_Abort+0xdc>
 8005696:	2300      	movs	r3, #0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d013      	beq.n	80056c4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 021e 	bic.w	r2, r2, #30
 80056aa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056ba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	617b      	str	r3, [r7, #20]
 80056c2:	e00a      	b.n	80056da <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 020e 	bic.w	r2, r2, #14
 80056d2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a3c      	ldr	r2, [pc, #240]	@ (80057d0 <HAL_DMA_Abort+0x214>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d072      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a3a      	ldr	r2, [pc, #232]	@ (80057d4 <HAL_DMA_Abort+0x218>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d06d      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a39      	ldr	r2, [pc, #228]	@ (80057d8 <HAL_DMA_Abort+0x21c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d068      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a37      	ldr	r2, [pc, #220]	@ (80057dc <HAL_DMA_Abort+0x220>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d063      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a36      	ldr	r2, [pc, #216]	@ (80057e0 <HAL_DMA_Abort+0x224>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d05e      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a34      	ldr	r2, [pc, #208]	@ (80057e4 <HAL_DMA_Abort+0x228>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d059      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a33      	ldr	r2, [pc, #204]	@ (80057e8 <HAL_DMA_Abort+0x22c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d054      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a31      	ldr	r2, [pc, #196]	@ (80057ec <HAL_DMA_Abort+0x230>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d04f      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a30      	ldr	r2, [pc, #192]	@ (80057f0 <HAL_DMA_Abort+0x234>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d04a      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a2e      	ldr	r2, [pc, #184]	@ (80057f4 <HAL_DMA_Abort+0x238>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d045      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a2d      	ldr	r2, [pc, #180]	@ (80057f8 <HAL_DMA_Abort+0x23c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d040      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a2b      	ldr	r2, [pc, #172]	@ (80057fc <HAL_DMA_Abort+0x240>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d03b      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a2a      	ldr	r2, [pc, #168]	@ (8005800 <HAL_DMA_Abort+0x244>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d036      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a28      	ldr	r2, [pc, #160]	@ (8005804 <HAL_DMA_Abort+0x248>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d031      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a27      	ldr	r2, [pc, #156]	@ (8005808 <HAL_DMA_Abort+0x24c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d02c      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a25      	ldr	r2, [pc, #148]	@ (800580c <HAL_DMA_Abort+0x250>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d027      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a24      	ldr	r2, [pc, #144]	@ (8005810 <HAL_DMA_Abort+0x254>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d022      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a22      	ldr	r2, [pc, #136]	@ (8005814 <HAL_DMA_Abort+0x258>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d01d      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a21      	ldr	r2, [pc, #132]	@ (8005818 <HAL_DMA_Abort+0x25c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d018      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1f      	ldr	r2, [pc, #124]	@ (800581c <HAL_DMA_Abort+0x260>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d013      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005820 <HAL_DMA_Abort+0x264>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00e      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005824 <HAL_DMA_Abort+0x268>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d009      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005828 <HAL_DMA_Abort+0x26c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d004      	beq.n	80057ca <HAL_DMA_Abort+0x20e>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a19      	ldr	r2, [pc, #100]	@ (800582c <HAL_DMA_Abort+0x270>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d132      	bne.n	8005830 <HAL_DMA_Abort+0x274>
 80057ca:	2301      	movs	r3, #1
 80057cc:	e031      	b.n	8005832 <HAL_DMA_Abort+0x276>
 80057ce:	bf00      	nop
 80057d0:	40020010 	.word	0x40020010
 80057d4:	40020028 	.word	0x40020028
 80057d8:	40020040 	.word	0x40020040
 80057dc:	40020058 	.word	0x40020058
 80057e0:	40020070 	.word	0x40020070
 80057e4:	40020088 	.word	0x40020088
 80057e8:	400200a0 	.word	0x400200a0
 80057ec:	400200b8 	.word	0x400200b8
 80057f0:	40020410 	.word	0x40020410
 80057f4:	40020428 	.word	0x40020428
 80057f8:	40020440 	.word	0x40020440
 80057fc:	40020458 	.word	0x40020458
 8005800:	40020470 	.word	0x40020470
 8005804:	40020488 	.word	0x40020488
 8005808:	400204a0 	.word	0x400204a0
 800580c:	400204b8 	.word	0x400204b8
 8005810:	58025408 	.word	0x58025408
 8005814:	5802541c 	.word	0x5802541c
 8005818:	58025430 	.word	0x58025430
 800581c:	58025444 	.word	0x58025444
 8005820:	58025458 	.word	0x58025458
 8005824:	5802546c 	.word	0x5802546c
 8005828:	58025480 	.word	0x58025480
 800582c:	58025494 	.word	0x58025494
 8005830:	2300      	movs	r3, #0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d007      	beq.n	8005846 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005840:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005844:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a6d      	ldr	r2, [pc, #436]	@ (8005a00 <HAL_DMA_Abort+0x444>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d04a      	beq.n	80058e6 <HAL_DMA_Abort+0x32a>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a6b      	ldr	r2, [pc, #428]	@ (8005a04 <HAL_DMA_Abort+0x448>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d045      	beq.n	80058e6 <HAL_DMA_Abort+0x32a>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a6a      	ldr	r2, [pc, #424]	@ (8005a08 <HAL_DMA_Abort+0x44c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d040      	beq.n	80058e6 <HAL_DMA_Abort+0x32a>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a68      	ldr	r2, [pc, #416]	@ (8005a0c <HAL_DMA_Abort+0x450>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d03b      	beq.n	80058e6 <HAL_DMA_Abort+0x32a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a67      	ldr	r2, [pc, #412]	@ (8005a10 <HAL_DMA_Abort+0x454>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d036      	beq.n	80058e6 <HAL_DMA_Abort+0x32a>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a65      	ldr	r2, [pc, #404]	@ (8005a14 <HAL_DMA_Abort+0x458>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d031      	beq.n	80058e6 <HAL_DMA_Abort+0x32a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a64      	ldr	r2, [pc, #400]	@ (8005a18 <HAL_DMA_Abort+0x45c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d02c      	beq.n	80058e6 <HAL_DMA_Abort+0x32a>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a62      	ldr	r2, [pc, #392]	@ (8005a1c <HAL_DMA_Abort+0x460>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d027      	beq.n	80058e6 <HAL_DMA_Abort+0x32a>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a61      	ldr	r2, [pc, #388]	@ (8005a20 <HAL_DMA_Abort+0x464>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d022      	beq.n	80058e6 <HAL_DMA_Abort+0x32a>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a5f      	ldr	r2, [pc, #380]	@ (8005a24 <HAL_DMA_Abort+0x468>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d01d      	beq.n	80058e6 <HAL_DMA_Abort+0x32a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a5e      	ldr	r2, [pc, #376]	@ (8005a28 <HAL_DMA_Abort+0x46c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d018      	beq.n	80058e6 <HAL_DMA_Abort+0x32a>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a5c      	ldr	r2, [pc, #368]	@ (8005a2c <HAL_DMA_Abort+0x470>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d013      	beq.n	80058e6 <HAL_DMA_Abort+0x32a>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a5b      	ldr	r2, [pc, #364]	@ (8005a30 <HAL_DMA_Abort+0x474>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00e      	beq.n	80058e6 <HAL_DMA_Abort+0x32a>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a59      	ldr	r2, [pc, #356]	@ (8005a34 <HAL_DMA_Abort+0x478>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d009      	beq.n	80058e6 <HAL_DMA_Abort+0x32a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a58      	ldr	r2, [pc, #352]	@ (8005a38 <HAL_DMA_Abort+0x47c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d004      	beq.n	80058e6 <HAL_DMA_Abort+0x32a>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a56      	ldr	r2, [pc, #344]	@ (8005a3c <HAL_DMA_Abort+0x480>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d108      	bne.n	80058f8 <HAL_DMA_Abort+0x33c>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0201 	bic.w	r2, r2, #1
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	e007      	b.n	8005908 <HAL_DMA_Abort+0x34c>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0201 	bic.w	r2, r2, #1
 8005906:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005908:	e013      	b.n	8005932 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800590a:	f7fd f8eb 	bl	8002ae4 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b05      	cmp	r3, #5
 8005916:	d90c      	bls.n	8005932 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2220      	movs	r2, #32
 800591c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2203      	movs	r2, #3
 8005922:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e12d      	b.n	8005b8e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1e5      	bne.n	800590a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a2f      	ldr	r2, [pc, #188]	@ (8005a00 <HAL_DMA_Abort+0x444>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d04a      	beq.n	80059de <HAL_DMA_Abort+0x422>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a2d      	ldr	r2, [pc, #180]	@ (8005a04 <HAL_DMA_Abort+0x448>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d045      	beq.n	80059de <HAL_DMA_Abort+0x422>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a2c      	ldr	r2, [pc, #176]	@ (8005a08 <HAL_DMA_Abort+0x44c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d040      	beq.n	80059de <HAL_DMA_Abort+0x422>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a2a      	ldr	r2, [pc, #168]	@ (8005a0c <HAL_DMA_Abort+0x450>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d03b      	beq.n	80059de <HAL_DMA_Abort+0x422>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a29      	ldr	r2, [pc, #164]	@ (8005a10 <HAL_DMA_Abort+0x454>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d036      	beq.n	80059de <HAL_DMA_Abort+0x422>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a27      	ldr	r2, [pc, #156]	@ (8005a14 <HAL_DMA_Abort+0x458>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d031      	beq.n	80059de <HAL_DMA_Abort+0x422>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a26      	ldr	r2, [pc, #152]	@ (8005a18 <HAL_DMA_Abort+0x45c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d02c      	beq.n	80059de <HAL_DMA_Abort+0x422>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a24      	ldr	r2, [pc, #144]	@ (8005a1c <HAL_DMA_Abort+0x460>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d027      	beq.n	80059de <HAL_DMA_Abort+0x422>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a23      	ldr	r2, [pc, #140]	@ (8005a20 <HAL_DMA_Abort+0x464>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d022      	beq.n	80059de <HAL_DMA_Abort+0x422>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a21      	ldr	r2, [pc, #132]	@ (8005a24 <HAL_DMA_Abort+0x468>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d01d      	beq.n	80059de <HAL_DMA_Abort+0x422>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a20      	ldr	r2, [pc, #128]	@ (8005a28 <HAL_DMA_Abort+0x46c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d018      	beq.n	80059de <HAL_DMA_Abort+0x422>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a1e      	ldr	r2, [pc, #120]	@ (8005a2c <HAL_DMA_Abort+0x470>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d013      	beq.n	80059de <HAL_DMA_Abort+0x422>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a1d      	ldr	r2, [pc, #116]	@ (8005a30 <HAL_DMA_Abort+0x474>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00e      	beq.n	80059de <HAL_DMA_Abort+0x422>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a34 <HAL_DMA_Abort+0x478>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d009      	beq.n	80059de <HAL_DMA_Abort+0x422>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005a38 <HAL_DMA_Abort+0x47c>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d004      	beq.n	80059de <HAL_DMA_Abort+0x422>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a18      	ldr	r2, [pc, #96]	@ (8005a3c <HAL_DMA_Abort+0x480>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d101      	bne.n	80059e2 <HAL_DMA_Abort+0x426>
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <HAL_DMA_Abort+0x428>
 80059e2:	2300      	movs	r3, #0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d02b      	beq.n	8005a40 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059f2:	f003 031f 	and.w	r3, r3, #31
 80059f6:	223f      	movs	r2, #63	@ 0x3f
 80059f8:	409a      	lsls	r2, r3
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	609a      	str	r2, [r3, #8]
 80059fe:	e02a      	b.n	8005a56 <HAL_DMA_Abort+0x49a>
 8005a00:	40020010 	.word	0x40020010
 8005a04:	40020028 	.word	0x40020028
 8005a08:	40020040 	.word	0x40020040
 8005a0c:	40020058 	.word	0x40020058
 8005a10:	40020070 	.word	0x40020070
 8005a14:	40020088 	.word	0x40020088
 8005a18:	400200a0 	.word	0x400200a0
 8005a1c:	400200b8 	.word	0x400200b8
 8005a20:	40020410 	.word	0x40020410
 8005a24:	40020428 	.word	0x40020428
 8005a28:	40020440 	.word	0x40020440
 8005a2c:	40020458 	.word	0x40020458
 8005a30:	40020470 	.word	0x40020470
 8005a34:	40020488 	.word	0x40020488
 8005a38:	400204a0 	.word	0x400204a0
 8005a3c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a44:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a4a:	f003 031f 	and.w	r3, r3, #31
 8005a4e:	2201      	movs	r2, #1
 8005a50:	409a      	lsls	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a4f      	ldr	r2, [pc, #316]	@ (8005b98 <HAL_DMA_Abort+0x5dc>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d072      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a4d      	ldr	r2, [pc, #308]	@ (8005b9c <HAL_DMA_Abort+0x5e0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d06d      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a4c      	ldr	r2, [pc, #304]	@ (8005ba0 <HAL_DMA_Abort+0x5e4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d068      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a4a      	ldr	r2, [pc, #296]	@ (8005ba4 <HAL_DMA_Abort+0x5e8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d063      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a49      	ldr	r2, [pc, #292]	@ (8005ba8 <HAL_DMA_Abort+0x5ec>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d05e      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a47      	ldr	r2, [pc, #284]	@ (8005bac <HAL_DMA_Abort+0x5f0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d059      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a46      	ldr	r2, [pc, #280]	@ (8005bb0 <HAL_DMA_Abort+0x5f4>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d054      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a44      	ldr	r2, [pc, #272]	@ (8005bb4 <HAL_DMA_Abort+0x5f8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d04f      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a43      	ldr	r2, [pc, #268]	@ (8005bb8 <HAL_DMA_Abort+0x5fc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d04a      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a41      	ldr	r2, [pc, #260]	@ (8005bbc <HAL_DMA_Abort+0x600>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d045      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a40      	ldr	r2, [pc, #256]	@ (8005bc0 <HAL_DMA_Abort+0x604>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d040      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a3e      	ldr	r2, [pc, #248]	@ (8005bc4 <HAL_DMA_Abort+0x608>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d03b      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a3d      	ldr	r2, [pc, #244]	@ (8005bc8 <HAL_DMA_Abort+0x60c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d036      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a3b      	ldr	r2, [pc, #236]	@ (8005bcc <HAL_DMA_Abort+0x610>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d031      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a3a      	ldr	r2, [pc, #232]	@ (8005bd0 <HAL_DMA_Abort+0x614>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d02c      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a38      	ldr	r2, [pc, #224]	@ (8005bd4 <HAL_DMA_Abort+0x618>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d027      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a37      	ldr	r2, [pc, #220]	@ (8005bd8 <HAL_DMA_Abort+0x61c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d022      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a35      	ldr	r2, [pc, #212]	@ (8005bdc <HAL_DMA_Abort+0x620>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d01d      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a34      	ldr	r2, [pc, #208]	@ (8005be0 <HAL_DMA_Abort+0x624>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d018      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a32      	ldr	r2, [pc, #200]	@ (8005be4 <HAL_DMA_Abort+0x628>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d013      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a31      	ldr	r2, [pc, #196]	@ (8005be8 <HAL_DMA_Abort+0x62c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d00e      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a2f      	ldr	r2, [pc, #188]	@ (8005bec <HAL_DMA_Abort+0x630>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d009      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a2e      	ldr	r2, [pc, #184]	@ (8005bf0 <HAL_DMA_Abort+0x634>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d004      	beq.n	8005b46 <HAL_DMA_Abort+0x58a>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a2c      	ldr	r2, [pc, #176]	@ (8005bf4 <HAL_DMA_Abort+0x638>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d101      	bne.n	8005b4a <HAL_DMA_Abort+0x58e>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <HAL_DMA_Abort+0x590>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d015      	beq.n	8005b7c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005b58:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00c      	beq.n	8005b7c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b70:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b7a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3718      	adds	r7, #24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	40020010 	.word	0x40020010
 8005b9c:	40020028 	.word	0x40020028
 8005ba0:	40020040 	.word	0x40020040
 8005ba4:	40020058 	.word	0x40020058
 8005ba8:	40020070 	.word	0x40020070
 8005bac:	40020088 	.word	0x40020088
 8005bb0:	400200a0 	.word	0x400200a0
 8005bb4:	400200b8 	.word	0x400200b8
 8005bb8:	40020410 	.word	0x40020410
 8005bbc:	40020428 	.word	0x40020428
 8005bc0:	40020440 	.word	0x40020440
 8005bc4:	40020458 	.word	0x40020458
 8005bc8:	40020470 	.word	0x40020470
 8005bcc:	40020488 	.word	0x40020488
 8005bd0:	400204a0 	.word	0x400204a0
 8005bd4:	400204b8 	.word	0x400204b8
 8005bd8:	58025408 	.word	0x58025408
 8005bdc:	5802541c 	.word	0x5802541c
 8005be0:	58025430 	.word	0x58025430
 8005be4:	58025444 	.word	0x58025444
 8005be8:	58025458 	.word	0x58025458
 8005bec:	5802546c 	.word	0x5802546c
 8005bf0:	58025480 	.word	0x58025480
 8005bf4:	58025494 	.word	0x58025494

08005bf8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e237      	b.n	800607a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d004      	beq.n	8005c20 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2280      	movs	r2, #128	@ 0x80
 8005c1a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e22c      	b.n	800607a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a5c      	ldr	r2, [pc, #368]	@ (8005d98 <HAL_DMA_Abort_IT+0x1a0>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d04a      	beq.n	8005cc0 <HAL_DMA_Abort_IT+0xc8>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a5b      	ldr	r2, [pc, #364]	@ (8005d9c <HAL_DMA_Abort_IT+0x1a4>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d045      	beq.n	8005cc0 <HAL_DMA_Abort_IT+0xc8>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a59      	ldr	r2, [pc, #356]	@ (8005da0 <HAL_DMA_Abort_IT+0x1a8>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d040      	beq.n	8005cc0 <HAL_DMA_Abort_IT+0xc8>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a58      	ldr	r2, [pc, #352]	@ (8005da4 <HAL_DMA_Abort_IT+0x1ac>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d03b      	beq.n	8005cc0 <HAL_DMA_Abort_IT+0xc8>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a56      	ldr	r2, [pc, #344]	@ (8005da8 <HAL_DMA_Abort_IT+0x1b0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d036      	beq.n	8005cc0 <HAL_DMA_Abort_IT+0xc8>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a55      	ldr	r2, [pc, #340]	@ (8005dac <HAL_DMA_Abort_IT+0x1b4>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d031      	beq.n	8005cc0 <HAL_DMA_Abort_IT+0xc8>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a53      	ldr	r2, [pc, #332]	@ (8005db0 <HAL_DMA_Abort_IT+0x1b8>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d02c      	beq.n	8005cc0 <HAL_DMA_Abort_IT+0xc8>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a52      	ldr	r2, [pc, #328]	@ (8005db4 <HAL_DMA_Abort_IT+0x1bc>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d027      	beq.n	8005cc0 <HAL_DMA_Abort_IT+0xc8>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a50      	ldr	r2, [pc, #320]	@ (8005db8 <HAL_DMA_Abort_IT+0x1c0>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d022      	beq.n	8005cc0 <HAL_DMA_Abort_IT+0xc8>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a4f      	ldr	r2, [pc, #316]	@ (8005dbc <HAL_DMA_Abort_IT+0x1c4>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d01d      	beq.n	8005cc0 <HAL_DMA_Abort_IT+0xc8>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a4d      	ldr	r2, [pc, #308]	@ (8005dc0 <HAL_DMA_Abort_IT+0x1c8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d018      	beq.n	8005cc0 <HAL_DMA_Abort_IT+0xc8>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a4c      	ldr	r2, [pc, #304]	@ (8005dc4 <HAL_DMA_Abort_IT+0x1cc>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d013      	beq.n	8005cc0 <HAL_DMA_Abort_IT+0xc8>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a4a      	ldr	r2, [pc, #296]	@ (8005dc8 <HAL_DMA_Abort_IT+0x1d0>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d00e      	beq.n	8005cc0 <HAL_DMA_Abort_IT+0xc8>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a49      	ldr	r2, [pc, #292]	@ (8005dcc <HAL_DMA_Abort_IT+0x1d4>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d009      	beq.n	8005cc0 <HAL_DMA_Abort_IT+0xc8>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a47      	ldr	r2, [pc, #284]	@ (8005dd0 <HAL_DMA_Abort_IT+0x1d8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d004      	beq.n	8005cc0 <HAL_DMA_Abort_IT+0xc8>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a46      	ldr	r2, [pc, #280]	@ (8005dd4 <HAL_DMA_Abort_IT+0x1dc>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d101      	bne.n	8005cc4 <HAL_DMA_Abort_IT+0xcc>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e000      	b.n	8005cc6 <HAL_DMA_Abort_IT+0xce>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 8086 	beq.w	8005dd8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2204      	movs	r2, #4
 8005cd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a2f      	ldr	r2, [pc, #188]	@ (8005d98 <HAL_DMA_Abort_IT+0x1a0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d04a      	beq.n	8005d74 <HAL_DMA_Abort_IT+0x17c>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a2e      	ldr	r2, [pc, #184]	@ (8005d9c <HAL_DMA_Abort_IT+0x1a4>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d045      	beq.n	8005d74 <HAL_DMA_Abort_IT+0x17c>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a2c      	ldr	r2, [pc, #176]	@ (8005da0 <HAL_DMA_Abort_IT+0x1a8>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d040      	beq.n	8005d74 <HAL_DMA_Abort_IT+0x17c>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a2b      	ldr	r2, [pc, #172]	@ (8005da4 <HAL_DMA_Abort_IT+0x1ac>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d03b      	beq.n	8005d74 <HAL_DMA_Abort_IT+0x17c>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a29      	ldr	r2, [pc, #164]	@ (8005da8 <HAL_DMA_Abort_IT+0x1b0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d036      	beq.n	8005d74 <HAL_DMA_Abort_IT+0x17c>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a28      	ldr	r2, [pc, #160]	@ (8005dac <HAL_DMA_Abort_IT+0x1b4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d031      	beq.n	8005d74 <HAL_DMA_Abort_IT+0x17c>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a26      	ldr	r2, [pc, #152]	@ (8005db0 <HAL_DMA_Abort_IT+0x1b8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d02c      	beq.n	8005d74 <HAL_DMA_Abort_IT+0x17c>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a25      	ldr	r2, [pc, #148]	@ (8005db4 <HAL_DMA_Abort_IT+0x1bc>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d027      	beq.n	8005d74 <HAL_DMA_Abort_IT+0x17c>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a23      	ldr	r2, [pc, #140]	@ (8005db8 <HAL_DMA_Abort_IT+0x1c0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d022      	beq.n	8005d74 <HAL_DMA_Abort_IT+0x17c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a22      	ldr	r2, [pc, #136]	@ (8005dbc <HAL_DMA_Abort_IT+0x1c4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d01d      	beq.n	8005d74 <HAL_DMA_Abort_IT+0x17c>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a20      	ldr	r2, [pc, #128]	@ (8005dc0 <HAL_DMA_Abort_IT+0x1c8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d018      	beq.n	8005d74 <HAL_DMA_Abort_IT+0x17c>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a1f      	ldr	r2, [pc, #124]	@ (8005dc4 <HAL_DMA_Abort_IT+0x1cc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d013      	beq.n	8005d74 <HAL_DMA_Abort_IT+0x17c>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1d      	ldr	r2, [pc, #116]	@ (8005dc8 <HAL_DMA_Abort_IT+0x1d0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00e      	beq.n	8005d74 <HAL_DMA_Abort_IT+0x17c>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8005dcc <HAL_DMA_Abort_IT+0x1d4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d009      	beq.n	8005d74 <HAL_DMA_Abort_IT+0x17c>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a1a      	ldr	r2, [pc, #104]	@ (8005dd0 <HAL_DMA_Abort_IT+0x1d8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d004      	beq.n	8005d74 <HAL_DMA_Abort_IT+0x17c>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a19      	ldr	r2, [pc, #100]	@ (8005dd4 <HAL_DMA_Abort_IT+0x1dc>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d108      	bne.n	8005d86 <HAL_DMA_Abort_IT+0x18e>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0201 	bic.w	r2, r2, #1
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	e178      	b.n	8006078 <HAL_DMA_Abort_IT+0x480>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0201 	bic.w	r2, r2, #1
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	e16f      	b.n	8006078 <HAL_DMA_Abort_IT+0x480>
 8005d98:	40020010 	.word	0x40020010
 8005d9c:	40020028 	.word	0x40020028
 8005da0:	40020040 	.word	0x40020040
 8005da4:	40020058 	.word	0x40020058
 8005da8:	40020070 	.word	0x40020070
 8005dac:	40020088 	.word	0x40020088
 8005db0:	400200a0 	.word	0x400200a0
 8005db4:	400200b8 	.word	0x400200b8
 8005db8:	40020410 	.word	0x40020410
 8005dbc:	40020428 	.word	0x40020428
 8005dc0:	40020440 	.word	0x40020440
 8005dc4:	40020458 	.word	0x40020458
 8005dc8:	40020470 	.word	0x40020470
 8005dcc:	40020488 	.word	0x40020488
 8005dd0:	400204a0 	.word	0x400204a0
 8005dd4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 020e 	bic.w	r2, r2, #14
 8005de6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a6c      	ldr	r2, [pc, #432]	@ (8005fa0 <HAL_DMA_Abort_IT+0x3a8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d04a      	beq.n	8005e88 <HAL_DMA_Abort_IT+0x290>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a6b      	ldr	r2, [pc, #428]	@ (8005fa4 <HAL_DMA_Abort_IT+0x3ac>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d045      	beq.n	8005e88 <HAL_DMA_Abort_IT+0x290>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a69      	ldr	r2, [pc, #420]	@ (8005fa8 <HAL_DMA_Abort_IT+0x3b0>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d040      	beq.n	8005e88 <HAL_DMA_Abort_IT+0x290>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a68      	ldr	r2, [pc, #416]	@ (8005fac <HAL_DMA_Abort_IT+0x3b4>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d03b      	beq.n	8005e88 <HAL_DMA_Abort_IT+0x290>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a66      	ldr	r2, [pc, #408]	@ (8005fb0 <HAL_DMA_Abort_IT+0x3b8>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d036      	beq.n	8005e88 <HAL_DMA_Abort_IT+0x290>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a65      	ldr	r2, [pc, #404]	@ (8005fb4 <HAL_DMA_Abort_IT+0x3bc>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d031      	beq.n	8005e88 <HAL_DMA_Abort_IT+0x290>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a63      	ldr	r2, [pc, #396]	@ (8005fb8 <HAL_DMA_Abort_IT+0x3c0>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d02c      	beq.n	8005e88 <HAL_DMA_Abort_IT+0x290>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a62      	ldr	r2, [pc, #392]	@ (8005fbc <HAL_DMA_Abort_IT+0x3c4>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d027      	beq.n	8005e88 <HAL_DMA_Abort_IT+0x290>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a60      	ldr	r2, [pc, #384]	@ (8005fc0 <HAL_DMA_Abort_IT+0x3c8>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d022      	beq.n	8005e88 <HAL_DMA_Abort_IT+0x290>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a5f      	ldr	r2, [pc, #380]	@ (8005fc4 <HAL_DMA_Abort_IT+0x3cc>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d01d      	beq.n	8005e88 <HAL_DMA_Abort_IT+0x290>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a5d      	ldr	r2, [pc, #372]	@ (8005fc8 <HAL_DMA_Abort_IT+0x3d0>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d018      	beq.n	8005e88 <HAL_DMA_Abort_IT+0x290>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a5c      	ldr	r2, [pc, #368]	@ (8005fcc <HAL_DMA_Abort_IT+0x3d4>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d013      	beq.n	8005e88 <HAL_DMA_Abort_IT+0x290>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a5a      	ldr	r2, [pc, #360]	@ (8005fd0 <HAL_DMA_Abort_IT+0x3d8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d00e      	beq.n	8005e88 <HAL_DMA_Abort_IT+0x290>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a59      	ldr	r2, [pc, #356]	@ (8005fd4 <HAL_DMA_Abort_IT+0x3dc>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d009      	beq.n	8005e88 <HAL_DMA_Abort_IT+0x290>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a57      	ldr	r2, [pc, #348]	@ (8005fd8 <HAL_DMA_Abort_IT+0x3e0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d004      	beq.n	8005e88 <HAL_DMA_Abort_IT+0x290>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a56      	ldr	r2, [pc, #344]	@ (8005fdc <HAL_DMA_Abort_IT+0x3e4>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d108      	bne.n	8005e9a <HAL_DMA_Abort_IT+0x2a2>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0201 	bic.w	r2, r2, #1
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	e007      	b.n	8005eaa <HAL_DMA_Abort_IT+0x2b2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0201 	bic.w	r2, r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a3c      	ldr	r2, [pc, #240]	@ (8005fa0 <HAL_DMA_Abort_IT+0x3a8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d072      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a3a      	ldr	r2, [pc, #232]	@ (8005fa4 <HAL_DMA_Abort_IT+0x3ac>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d06d      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a39      	ldr	r2, [pc, #228]	@ (8005fa8 <HAL_DMA_Abort_IT+0x3b0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d068      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a37      	ldr	r2, [pc, #220]	@ (8005fac <HAL_DMA_Abort_IT+0x3b4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d063      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a36      	ldr	r2, [pc, #216]	@ (8005fb0 <HAL_DMA_Abort_IT+0x3b8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d05e      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a34      	ldr	r2, [pc, #208]	@ (8005fb4 <HAL_DMA_Abort_IT+0x3bc>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d059      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a33      	ldr	r2, [pc, #204]	@ (8005fb8 <HAL_DMA_Abort_IT+0x3c0>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d054      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a31      	ldr	r2, [pc, #196]	@ (8005fbc <HAL_DMA_Abort_IT+0x3c4>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d04f      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a30      	ldr	r2, [pc, #192]	@ (8005fc0 <HAL_DMA_Abort_IT+0x3c8>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d04a      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a2e      	ldr	r2, [pc, #184]	@ (8005fc4 <HAL_DMA_Abort_IT+0x3cc>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d045      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a2d      	ldr	r2, [pc, #180]	@ (8005fc8 <HAL_DMA_Abort_IT+0x3d0>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d040      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8005fcc <HAL_DMA_Abort_IT+0x3d4>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d03b      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a2a      	ldr	r2, [pc, #168]	@ (8005fd0 <HAL_DMA_Abort_IT+0x3d8>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d036      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a28      	ldr	r2, [pc, #160]	@ (8005fd4 <HAL_DMA_Abort_IT+0x3dc>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d031      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a27      	ldr	r2, [pc, #156]	@ (8005fd8 <HAL_DMA_Abort_IT+0x3e0>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d02c      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a25      	ldr	r2, [pc, #148]	@ (8005fdc <HAL_DMA_Abort_IT+0x3e4>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d027      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a24      	ldr	r2, [pc, #144]	@ (8005fe0 <HAL_DMA_Abort_IT+0x3e8>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d022      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a22      	ldr	r2, [pc, #136]	@ (8005fe4 <HAL_DMA_Abort_IT+0x3ec>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d01d      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a21      	ldr	r2, [pc, #132]	@ (8005fe8 <HAL_DMA_Abort_IT+0x3f0>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d018      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8005fec <HAL_DMA_Abort_IT+0x3f4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d013      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a1e      	ldr	r2, [pc, #120]	@ (8005ff0 <HAL_DMA_Abort_IT+0x3f8>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d00e      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a1c      	ldr	r2, [pc, #112]	@ (8005ff4 <HAL_DMA_Abort_IT+0x3fc>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d009      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ff8 <HAL_DMA_Abort_IT+0x400>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d004      	beq.n	8005f9a <HAL_DMA_Abort_IT+0x3a2>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a19      	ldr	r2, [pc, #100]	@ (8005ffc <HAL_DMA_Abort_IT+0x404>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d132      	bne.n	8006000 <HAL_DMA_Abort_IT+0x408>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e031      	b.n	8006002 <HAL_DMA_Abort_IT+0x40a>
 8005f9e:	bf00      	nop
 8005fa0:	40020010 	.word	0x40020010
 8005fa4:	40020028 	.word	0x40020028
 8005fa8:	40020040 	.word	0x40020040
 8005fac:	40020058 	.word	0x40020058
 8005fb0:	40020070 	.word	0x40020070
 8005fb4:	40020088 	.word	0x40020088
 8005fb8:	400200a0 	.word	0x400200a0
 8005fbc:	400200b8 	.word	0x400200b8
 8005fc0:	40020410 	.word	0x40020410
 8005fc4:	40020428 	.word	0x40020428
 8005fc8:	40020440 	.word	0x40020440
 8005fcc:	40020458 	.word	0x40020458
 8005fd0:	40020470 	.word	0x40020470
 8005fd4:	40020488 	.word	0x40020488
 8005fd8:	400204a0 	.word	0x400204a0
 8005fdc:	400204b8 	.word	0x400204b8
 8005fe0:	58025408 	.word	0x58025408
 8005fe4:	5802541c 	.word	0x5802541c
 8005fe8:	58025430 	.word	0x58025430
 8005fec:	58025444 	.word	0x58025444
 8005ff0:	58025458 	.word	0x58025458
 8005ff4:	5802546c 	.word	0x5802546c
 8005ff8:	58025480 	.word	0x58025480
 8005ffc:	58025494 	.word	0x58025494
 8006000:	2300      	movs	r3, #0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d028      	beq.n	8006058 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006010:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006014:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800601a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006020:	f003 031f 	and.w	r3, r3, #31
 8006024:	2201      	movs	r2, #1
 8006026:	409a      	lsls	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006034:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00c      	beq.n	8006058 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006048:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800604c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006056:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop

08006084 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08a      	sub	sp, #40	@ 0x28
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006090:	4b67      	ldr	r3, [pc, #412]	@ (8006230 <HAL_DMA_IRQHandler+0x1ac>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a67      	ldr	r2, [pc, #412]	@ (8006234 <HAL_DMA_IRQHandler+0x1b0>)
 8006096:	fba2 2303 	umull	r2, r3, r2, r3
 800609a:	0a9b      	lsrs	r3, r3, #10
 800609c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a5f      	ldr	r2, [pc, #380]	@ (8006238 <HAL_DMA_IRQHandler+0x1b4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d04a      	beq.n	8006156 <HAL_DMA_IRQHandler+0xd2>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a5d      	ldr	r2, [pc, #372]	@ (800623c <HAL_DMA_IRQHandler+0x1b8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d045      	beq.n	8006156 <HAL_DMA_IRQHandler+0xd2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a5c      	ldr	r2, [pc, #368]	@ (8006240 <HAL_DMA_IRQHandler+0x1bc>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d040      	beq.n	8006156 <HAL_DMA_IRQHandler+0xd2>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a5a      	ldr	r2, [pc, #360]	@ (8006244 <HAL_DMA_IRQHandler+0x1c0>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d03b      	beq.n	8006156 <HAL_DMA_IRQHandler+0xd2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a59      	ldr	r2, [pc, #356]	@ (8006248 <HAL_DMA_IRQHandler+0x1c4>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d036      	beq.n	8006156 <HAL_DMA_IRQHandler+0xd2>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a57      	ldr	r2, [pc, #348]	@ (800624c <HAL_DMA_IRQHandler+0x1c8>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d031      	beq.n	8006156 <HAL_DMA_IRQHandler+0xd2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a56      	ldr	r2, [pc, #344]	@ (8006250 <HAL_DMA_IRQHandler+0x1cc>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d02c      	beq.n	8006156 <HAL_DMA_IRQHandler+0xd2>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a54      	ldr	r2, [pc, #336]	@ (8006254 <HAL_DMA_IRQHandler+0x1d0>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d027      	beq.n	8006156 <HAL_DMA_IRQHandler+0xd2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a53      	ldr	r2, [pc, #332]	@ (8006258 <HAL_DMA_IRQHandler+0x1d4>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d022      	beq.n	8006156 <HAL_DMA_IRQHandler+0xd2>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a51      	ldr	r2, [pc, #324]	@ (800625c <HAL_DMA_IRQHandler+0x1d8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d01d      	beq.n	8006156 <HAL_DMA_IRQHandler+0xd2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a50      	ldr	r2, [pc, #320]	@ (8006260 <HAL_DMA_IRQHandler+0x1dc>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d018      	beq.n	8006156 <HAL_DMA_IRQHandler+0xd2>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a4e      	ldr	r2, [pc, #312]	@ (8006264 <HAL_DMA_IRQHandler+0x1e0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d013      	beq.n	8006156 <HAL_DMA_IRQHandler+0xd2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a4d      	ldr	r2, [pc, #308]	@ (8006268 <HAL_DMA_IRQHandler+0x1e4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d00e      	beq.n	8006156 <HAL_DMA_IRQHandler+0xd2>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a4b      	ldr	r2, [pc, #300]	@ (800626c <HAL_DMA_IRQHandler+0x1e8>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d009      	beq.n	8006156 <HAL_DMA_IRQHandler+0xd2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a4a      	ldr	r2, [pc, #296]	@ (8006270 <HAL_DMA_IRQHandler+0x1ec>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d004      	beq.n	8006156 <HAL_DMA_IRQHandler+0xd2>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a48      	ldr	r2, [pc, #288]	@ (8006274 <HAL_DMA_IRQHandler+0x1f0>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d101      	bne.n	800615a <HAL_DMA_IRQHandler+0xd6>
 8006156:	2301      	movs	r3, #1
 8006158:	e000      	b.n	800615c <HAL_DMA_IRQHandler+0xd8>
 800615a:	2300      	movs	r3, #0
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 842b 	beq.w	80069b8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006166:	f003 031f 	and.w	r3, r3, #31
 800616a:	2208      	movs	r2, #8
 800616c:	409a      	lsls	r2, r3
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	4013      	ands	r3, r2
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 80a2 	beq.w	80062bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a2e      	ldr	r2, [pc, #184]	@ (8006238 <HAL_DMA_IRQHandler+0x1b4>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d04a      	beq.n	8006218 <HAL_DMA_IRQHandler+0x194>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a2d      	ldr	r2, [pc, #180]	@ (800623c <HAL_DMA_IRQHandler+0x1b8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d045      	beq.n	8006218 <HAL_DMA_IRQHandler+0x194>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a2b      	ldr	r2, [pc, #172]	@ (8006240 <HAL_DMA_IRQHandler+0x1bc>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d040      	beq.n	8006218 <HAL_DMA_IRQHandler+0x194>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a2a      	ldr	r2, [pc, #168]	@ (8006244 <HAL_DMA_IRQHandler+0x1c0>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d03b      	beq.n	8006218 <HAL_DMA_IRQHandler+0x194>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a28      	ldr	r2, [pc, #160]	@ (8006248 <HAL_DMA_IRQHandler+0x1c4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d036      	beq.n	8006218 <HAL_DMA_IRQHandler+0x194>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a27      	ldr	r2, [pc, #156]	@ (800624c <HAL_DMA_IRQHandler+0x1c8>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d031      	beq.n	8006218 <HAL_DMA_IRQHandler+0x194>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a25      	ldr	r2, [pc, #148]	@ (8006250 <HAL_DMA_IRQHandler+0x1cc>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d02c      	beq.n	8006218 <HAL_DMA_IRQHandler+0x194>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a24      	ldr	r2, [pc, #144]	@ (8006254 <HAL_DMA_IRQHandler+0x1d0>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d027      	beq.n	8006218 <HAL_DMA_IRQHandler+0x194>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a22      	ldr	r2, [pc, #136]	@ (8006258 <HAL_DMA_IRQHandler+0x1d4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d022      	beq.n	8006218 <HAL_DMA_IRQHandler+0x194>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a21      	ldr	r2, [pc, #132]	@ (800625c <HAL_DMA_IRQHandler+0x1d8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d01d      	beq.n	8006218 <HAL_DMA_IRQHandler+0x194>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a1f      	ldr	r2, [pc, #124]	@ (8006260 <HAL_DMA_IRQHandler+0x1dc>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d018      	beq.n	8006218 <HAL_DMA_IRQHandler+0x194>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a1e      	ldr	r2, [pc, #120]	@ (8006264 <HAL_DMA_IRQHandler+0x1e0>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d013      	beq.n	8006218 <HAL_DMA_IRQHandler+0x194>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006268 <HAL_DMA_IRQHandler+0x1e4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d00e      	beq.n	8006218 <HAL_DMA_IRQHandler+0x194>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a1b      	ldr	r2, [pc, #108]	@ (800626c <HAL_DMA_IRQHandler+0x1e8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d009      	beq.n	8006218 <HAL_DMA_IRQHandler+0x194>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a19      	ldr	r2, [pc, #100]	@ (8006270 <HAL_DMA_IRQHandler+0x1ec>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d004      	beq.n	8006218 <HAL_DMA_IRQHandler+0x194>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a18      	ldr	r2, [pc, #96]	@ (8006274 <HAL_DMA_IRQHandler+0x1f0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d12f      	bne.n	8006278 <HAL_DMA_IRQHandler+0x1f4>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0304 	and.w	r3, r3, #4
 8006222:	2b00      	cmp	r3, #0
 8006224:	bf14      	ite	ne
 8006226:	2301      	movne	r3, #1
 8006228:	2300      	moveq	r3, #0
 800622a:	b2db      	uxtb	r3, r3
 800622c:	e02e      	b.n	800628c <HAL_DMA_IRQHandler+0x208>
 800622e:	bf00      	nop
 8006230:	24000000 	.word	0x24000000
 8006234:	1b4e81b5 	.word	0x1b4e81b5
 8006238:	40020010 	.word	0x40020010
 800623c:	40020028 	.word	0x40020028
 8006240:	40020040 	.word	0x40020040
 8006244:	40020058 	.word	0x40020058
 8006248:	40020070 	.word	0x40020070
 800624c:	40020088 	.word	0x40020088
 8006250:	400200a0 	.word	0x400200a0
 8006254:	400200b8 	.word	0x400200b8
 8006258:	40020410 	.word	0x40020410
 800625c:	40020428 	.word	0x40020428
 8006260:	40020440 	.word	0x40020440
 8006264:	40020458 	.word	0x40020458
 8006268:	40020470 	.word	0x40020470
 800626c:	40020488 	.word	0x40020488
 8006270:	400204a0 	.word	0x400204a0
 8006274:	400204b8 	.word	0x400204b8
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0308 	and.w	r3, r3, #8
 8006282:	2b00      	cmp	r3, #0
 8006284:	bf14      	ite	ne
 8006286:	2301      	movne	r3, #1
 8006288:	2300      	moveq	r3, #0
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d015      	beq.n	80062bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0204 	bic.w	r2, r2, #4
 800629e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062a4:	f003 031f 	and.w	r3, r3, #31
 80062a8:	2208      	movs	r2, #8
 80062aa:	409a      	lsls	r2, r3
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b4:	f043 0201 	orr.w	r2, r3, #1
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062c0:	f003 031f 	and.w	r3, r3, #31
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	fa22 f303 	lsr.w	r3, r2, r3
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d06e      	beq.n	80063b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a69      	ldr	r2, [pc, #420]	@ (800647c <HAL_DMA_IRQHandler+0x3f8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d04a      	beq.n	8006372 <HAL_DMA_IRQHandler+0x2ee>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a67      	ldr	r2, [pc, #412]	@ (8006480 <HAL_DMA_IRQHandler+0x3fc>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d045      	beq.n	8006372 <HAL_DMA_IRQHandler+0x2ee>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a66      	ldr	r2, [pc, #408]	@ (8006484 <HAL_DMA_IRQHandler+0x400>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d040      	beq.n	8006372 <HAL_DMA_IRQHandler+0x2ee>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a64      	ldr	r2, [pc, #400]	@ (8006488 <HAL_DMA_IRQHandler+0x404>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d03b      	beq.n	8006372 <HAL_DMA_IRQHandler+0x2ee>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a63      	ldr	r2, [pc, #396]	@ (800648c <HAL_DMA_IRQHandler+0x408>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d036      	beq.n	8006372 <HAL_DMA_IRQHandler+0x2ee>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a61      	ldr	r2, [pc, #388]	@ (8006490 <HAL_DMA_IRQHandler+0x40c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d031      	beq.n	8006372 <HAL_DMA_IRQHandler+0x2ee>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a60      	ldr	r2, [pc, #384]	@ (8006494 <HAL_DMA_IRQHandler+0x410>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d02c      	beq.n	8006372 <HAL_DMA_IRQHandler+0x2ee>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a5e      	ldr	r2, [pc, #376]	@ (8006498 <HAL_DMA_IRQHandler+0x414>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d027      	beq.n	8006372 <HAL_DMA_IRQHandler+0x2ee>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a5d      	ldr	r2, [pc, #372]	@ (800649c <HAL_DMA_IRQHandler+0x418>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d022      	beq.n	8006372 <HAL_DMA_IRQHandler+0x2ee>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a5b      	ldr	r2, [pc, #364]	@ (80064a0 <HAL_DMA_IRQHandler+0x41c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d01d      	beq.n	8006372 <HAL_DMA_IRQHandler+0x2ee>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a5a      	ldr	r2, [pc, #360]	@ (80064a4 <HAL_DMA_IRQHandler+0x420>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d018      	beq.n	8006372 <HAL_DMA_IRQHandler+0x2ee>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a58      	ldr	r2, [pc, #352]	@ (80064a8 <HAL_DMA_IRQHandler+0x424>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d013      	beq.n	8006372 <HAL_DMA_IRQHandler+0x2ee>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a57      	ldr	r2, [pc, #348]	@ (80064ac <HAL_DMA_IRQHandler+0x428>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00e      	beq.n	8006372 <HAL_DMA_IRQHandler+0x2ee>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a55      	ldr	r2, [pc, #340]	@ (80064b0 <HAL_DMA_IRQHandler+0x42c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d009      	beq.n	8006372 <HAL_DMA_IRQHandler+0x2ee>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a54      	ldr	r2, [pc, #336]	@ (80064b4 <HAL_DMA_IRQHandler+0x430>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d004      	beq.n	8006372 <HAL_DMA_IRQHandler+0x2ee>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a52      	ldr	r2, [pc, #328]	@ (80064b8 <HAL_DMA_IRQHandler+0x434>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d10a      	bne.n	8006388 <HAL_DMA_IRQHandler+0x304>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800637c:	2b00      	cmp	r3, #0
 800637e:	bf14      	ite	ne
 8006380:	2301      	movne	r3, #1
 8006382:	2300      	moveq	r3, #0
 8006384:	b2db      	uxtb	r3, r3
 8006386:	e003      	b.n	8006390 <HAL_DMA_IRQHandler+0x30c>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2300      	movs	r3, #0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00d      	beq.n	80063b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006398:	f003 031f 	and.w	r3, r3, #31
 800639c:	2201      	movs	r2, #1
 800639e:	409a      	lsls	r2, r3
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063a8:	f043 0202 	orr.w	r2, r3, #2
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063b4:	f003 031f 	and.w	r3, r3, #31
 80063b8:	2204      	movs	r2, #4
 80063ba:	409a      	lsls	r2, r3
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	4013      	ands	r3, r2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 808f 	beq.w	80064e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a2c      	ldr	r2, [pc, #176]	@ (800647c <HAL_DMA_IRQHandler+0x3f8>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d04a      	beq.n	8006466 <HAL_DMA_IRQHandler+0x3e2>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006480 <HAL_DMA_IRQHandler+0x3fc>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d045      	beq.n	8006466 <HAL_DMA_IRQHandler+0x3e2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a29      	ldr	r2, [pc, #164]	@ (8006484 <HAL_DMA_IRQHandler+0x400>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d040      	beq.n	8006466 <HAL_DMA_IRQHandler+0x3e2>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a27      	ldr	r2, [pc, #156]	@ (8006488 <HAL_DMA_IRQHandler+0x404>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d03b      	beq.n	8006466 <HAL_DMA_IRQHandler+0x3e2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a26      	ldr	r2, [pc, #152]	@ (800648c <HAL_DMA_IRQHandler+0x408>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d036      	beq.n	8006466 <HAL_DMA_IRQHandler+0x3e2>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a24      	ldr	r2, [pc, #144]	@ (8006490 <HAL_DMA_IRQHandler+0x40c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d031      	beq.n	8006466 <HAL_DMA_IRQHandler+0x3e2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a23      	ldr	r2, [pc, #140]	@ (8006494 <HAL_DMA_IRQHandler+0x410>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d02c      	beq.n	8006466 <HAL_DMA_IRQHandler+0x3e2>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a21      	ldr	r2, [pc, #132]	@ (8006498 <HAL_DMA_IRQHandler+0x414>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d027      	beq.n	8006466 <HAL_DMA_IRQHandler+0x3e2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a20      	ldr	r2, [pc, #128]	@ (800649c <HAL_DMA_IRQHandler+0x418>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d022      	beq.n	8006466 <HAL_DMA_IRQHandler+0x3e2>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a1e      	ldr	r2, [pc, #120]	@ (80064a0 <HAL_DMA_IRQHandler+0x41c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d01d      	beq.n	8006466 <HAL_DMA_IRQHandler+0x3e2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a1d      	ldr	r2, [pc, #116]	@ (80064a4 <HAL_DMA_IRQHandler+0x420>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d018      	beq.n	8006466 <HAL_DMA_IRQHandler+0x3e2>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a1b      	ldr	r2, [pc, #108]	@ (80064a8 <HAL_DMA_IRQHandler+0x424>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d013      	beq.n	8006466 <HAL_DMA_IRQHandler+0x3e2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1a      	ldr	r2, [pc, #104]	@ (80064ac <HAL_DMA_IRQHandler+0x428>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d00e      	beq.n	8006466 <HAL_DMA_IRQHandler+0x3e2>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a18      	ldr	r2, [pc, #96]	@ (80064b0 <HAL_DMA_IRQHandler+0x42c>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d009      	beq.n	8006466 <HAL_DMA_IRQHandler+0x3e2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a17      	ldr	r2, [pc, #92]	@ (80064b4 <HAL_DMA_IRQHandler+0x430>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d004      	beq.n	8006466 <HAL_DMA_IRQHandler+0x3e2>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a15      	ldr	r2, [pc, #84]	@ (80064b8 <HAL_DMA_IRQHandler+0x434>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d12a      	bne.n	80064bc <HAL_DMA_IRQHandler+0x438>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b00      	cmp	r3, #0
 8006472:	bf14      	ite	ne
 8006474:	2301      	movne	r3, #1
 8006476:	2300      	moveq	r3, #0
 8006478:	b2db      	uxtb	r3, r3
 800647a:	e023      	b.n	80064c4 <HAL_DMA_IRQHandler+0x440>
 800647c:	40020010 	.word	0x40020010
 8006480:	40020028 	.word	0x40020028
 8006484:	40020040 	.word	0x40020040
 8006488:	40020058 	.word	0x40020058
 800648c:	40020070 	.word	0x40020070
 8006490:	40020088 	.word	0x40020088
 8006494:	400200a0 	.word	0x400200a0
 8006498:	400200b8 	.word	0x400200b8
 800649c:	40020410 	.word	0x40020410
 80064a0:	40020428 	.word	0x40020428
 80064a4:	40020440 	.word	0x40020440
 80064a8:	40020458 	.word	0x40020458
 80064ac:	40020470 	.word	0x40020470
 80064b0:	40020488 	.word	0x40020488
 80064b4:	400204a0 	.word	0x400204a0
 80064b8:	400204b8 	.word	0x400204b8
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2300      	movs	r3, #0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00d      	beq.n	80064e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064cc:	f003 031f 	and.w	r3, r3, #31
 80064d0:	2204      	movs	r2, #4
 80064d2:	409a      	lsls	r2, r3
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064dc:	f043 0204 	orr.w	r2, r3, #4
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064e8:	f003 031f 	and.w	r3, r3, #31
 80064ec:	2210      	movs	r2, #16
 80064ee:	409a      	lsls	r2, r3
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	4013      	ands	r3, r2
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 80a6 	beq.w	8006646 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a85      	ldr	r2, [pc, #532]	@ (8006714 <HAL_DMA_IRQHandler+0x690>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d04a      	beq.n	800659a <HAL_DMA_IRQHandler+0x516>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a83      	ldr	r2, [pc, #524]	@ (8006718 <HAL_DMA_IRQHandler+0x694>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d045      	beq.n	800659a <HAL_DMA_IRQHandler+0x516>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a82      	ldr	r2, [pc, #520]	@ (800671c <HAL_DMA_IRQHandler+0x698>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d040      	beq.n	800659a <HAL_DMA_IRQHandler+0x516>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a80      	ldr	r2, [pc, #512]	@ (8006720 <HAL_DMA_IRQHandler+0x69c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d03b      	beq.n	800659a <HAL_DMA_IRQHandler+0x516>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a7f      	ldr	r2, [pc, #508]	@ (8006724 <HAL_DMA_IRQHandler+0x6a0>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d036      	beq.n	800659a <HAL_DMA_IRQHandler+0x516>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a7d      	ldr	r2, [pc, #500]	@ (8006728 <HAL_DMA_IRQHandler+0x6a4>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d031      	beq.n	800659a <HAL_DMA_IRQHandler+0x516>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a7c      	ldr	r2, [pc, #496]	@ (800672c <HAL_DMA_IRQHandler+0x6a8>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d02c      	beq.n	800659a <HAL_DMA_IRQHandler+0x516>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a7a      	ldr	r2, [pc, #488]	@ (8006730 <HAL_DMA_IRQHandler+0x6ac>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d027      	beq.n	800659a <HAL_DMA_IRQHandler+0x516>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a79      	ldr	r2, [pc, #484]	@ (8006734 <HAL_DMA_IRQHandler+0x6b0>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d022      	beq.n	800659a <HAL_DMA_IRQHandler+0x516>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a77      	ldr	r2, [pc, #476]	@ (8006738 <HAL_DMA_IRQHandler+0x6b4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d01d      	beq.n	800659a <HAL_DMA_IRQHandler+0x516>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a76      	ldr	r2, [pc, #472]	@ (800673c <HAL_DMA_IRQHandler+0x6b8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d018      	beq.n	800659a <HAL_DMA_IRQHandler+0x516>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a74      	ldr	r2, [pc, #464]	@ (8006740 <HAL_DMA_IRQHandler+0x6bc>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d013      	beq.n	800659a <HAL_DMA_IRQHandler+0x516>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a73      	ldr	r2, [pc, #460]	@ (8006744 <HAL_DMA_IRQHandler+0x6c0>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d00e      	beq.n	800659a <HAL_DMA_IRQHandler+0x516>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a71      	ldr	r2, [pc, #452]	@ (8006748 <HAL_DMA_IRQHandler+0x6c4>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d009      	beq.n	800659a <HAL_DMA_IRQHandler+0x516>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a70      	ldr	r2, [pc, #448]	@ (800674c <HAL_DMA_IRQHandler+0x6c8>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d004      	beq.n	800659a <HAL_DMA_IRQHandler+0x516>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a6e      	ldr	r2, [pc, #440]	@ (8006750 <HAL_DMA_IRQHandler+0x6cc>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d10a      	bne.n	80065b0 <HAL_DMA_IRQHandler+0x52c>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0308 	and.w	r3, r3, #8
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	bf14      	ite	ne
 80065a8:	2301      	movne	r3, #1
 80065aa:	2300      	moveq	r3, #0
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	e009      	b.n	80065c4 <HAL_DMA_IRQHandler+0x540>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0304 	and.w	r3, r3, #4
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	bf14      	ite	ne
 80065be:	2301      	movne	r3, #1
 80065c0:	2300      	moveq	r3, #0
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d03e      	beq.n	8006646 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065cc:	f003 031f 	and.w	r3, r3, #31
 80065d0:	2210      	movs	r2, #16
 80065d2:	409a      	lsls	r2, r3
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d018      	beq.n	8006618 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d108      	bne.n	8006606 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d024      	beq.n	8006646 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	4798      	blx	r3
 8006604:	e01f      	b.n	8006646 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800660a:	2b00      	cmp	r3, #0
 800660c:	d01b      	beq.n	8006646 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	4798      	blx	r3
 8006616:	e016      	b.n	8006646 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006622:	2b00      	cmp	r3, #0
 8006624:	d107      	bne.n	8006636 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 0208 	bic.w	r2, r2, #8
 8006634:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800664a:	f003 031f 	and.w	r3, r3, #31
 800664e:	2220      	movs	r2, #32
 8006650:	409a      	lsls	r2, r3
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	4013      	ands	r3, r2
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 8110 	beq.w	800687c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a2c      	ldr	r2, [pc, #176]	@ (8006714 <HAL_DMA_IRQHandler+0x690>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d04a      	beq.n	80066fc <HAL_DMA_IRQHandler+0x678>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a2b      	ldr	r2, [pc, #172]	@ (8006718 <HAL_DMA_IRQHandler+0x694>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d045      	beq.n	80066fc <HAL_DMA_IRQHandler+0x678>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a29      	ldr	r2, [pc, #164]	@ (800671c <HAL_DMA_IRQHandler+0x698>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d040      	beq.n	80066fc <HAL_DMA_IRQHandler+0x678>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a28      	ldr	r2, [pc, #160]	@ (8006720 <HAL_DMA_IRQHandler+0x69c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d03b      	beq.n	80066fc <HAL_DMA_IRQHandler+0x678>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a26      	ldr	r2, [pc, #152]	@ (8006724 <HAL_DMA_IRQHandler+0x6a0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d036      	beq.n	80066fc <HAL_DMA_IRQHandler+0x678>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a25      	ldr	r2, [pc, #148]	@ (8006728 <HAL_DMA_IRQHandler+0x6a4>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d031      	beq.n	80066fc <HAL_DMA_IRQHandler+0x678>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a23      	ldr	r2, [pc, #140]	@ (800672c <HAL_DMA_IRQHandler+0x6a8>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d02c      	beq.n	80066fc <HAL_DMA_IRQHandler+0x678>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a22      	ldr	r2, [pc, #136]	@ (8006730 <HAL_DMA_IRQHandler+0x6ac>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d027      	beq.n	80066fc <HAL_DMA_IRQHandler+0x678>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a20      	ldr	r2, [pc, #128]	@ (8006734 <HAL_DMA_IRQHandler+0x6b0>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d022      	beq.n	80066fc <HAL_DMA_IRQHandler+0x678>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a1f      	ldr	r2, [pc, #124]	@ (8006738 <HAL_DMA_IRQHandler+0x6b4>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d01d      	beq.n	80066fc <HAL_DMA_IRQHandler+0x678>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a1d      	ldr	r2, [pc, #116]	@ (800673c <HAL_DMA_IRQHandler+0x6b8>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d018      	beq.n	80066fc <HAL_DMA_IRQHandler+0x678>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a1c      	ldr	r2, [pc, #112]	@ (8006740 <HAL_DMA_IRQHandler+0x6bc>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d013      	beq.n	80066fc <HAL_DMA_IRQHandler+0x678>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a1a      	ldr	r2, [pc, #104]	@ (8006744 <HAL_DMA_IRQHandler+0x6c0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d00e      	beq.n	80066fc <HAL_DMA_IRQHandler+0x678>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a19      	ldr	r2, [pc, #100]	@ (8006748 <HAL_DMA_IRQHandler+0x6c4>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d009      	beq.n	80066fc <HAL_DMA_IRQHandler+0x678>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a17      	ldr	r2, [pc, #92]	@ (800674c <HAL_DMA_IRQHandler+0x6c8>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d004      	beq.n	80066fc <HAL_DMA_IRQHandler+0x678>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a16      	ldr	r2, [pc, #88]	@ (8006750 <HAL_DMA_IRQHandler+0x6cc>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d12b      	bne.n	8006754 <HAL_DMA_IRQHandler+0x6d0>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0310 	and.w	r3, r3, #16
 8006706:	2b00      	cmp	r3, #0
 8006708:	bf14      	ite	ne
 800670a:	2301      	movne	r3, #1
 800670c:	2300      	moveq	r3, #0
 800670e:	b2db      	uxtb	r3, r3
 8006710:	e02a      	b.n	8006768 <HAL_DMA_IRQHandler+0x6e4>
 8006712:	bf00      	nop
 8006714:	40020010 	.word	0x40020010
 8006718:	40020028 	.word	0x40020028
 800671c:	40020040 	.word	0x40020040
 8006720:	40020058 	.word	0x40020058
 8006724:	40020070 	.word	0x40020070
 8006728:	40020088 	.word	0x40020088
 800672c:	400200a0 	.word	0x400200a0
 8006730:	400200b8 	.word	0x400200b8
 8006734:	40020410 	.word	0x40020410
 8006738:	40020428 	.word	0x40020428
 800673c:	40020440 	.word	0x40020440
 8006740:	40020458 	.word	0x40020458
 8006744:	40020470 	.word	0x40020470
 8006748:	40020488 	.word	0x40020488
 800674c:	400204a0 	.word	0x400204a0
 8006750:	400204b8 	.word	0x400204b8
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	bf14      	ite	ne
 8006762:	2301      	movne	r3, #1
 8006764:	2300      	moveq	r3, #0
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 8087 	beq.w	800687c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006772:	f003 031f 	and.w	r3, r3, #31
 8006776:	2220      	movs	r2, #32
 8006778:	409a      	lsls	r2, r3
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b04      	cmp	r3, #4
 8006788:	d139      	bne.n	80067fe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0216 	bic.w	r2, r2, #22
 8006798:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	695a      	ldr	r2, [r3, #20]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80067a8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d103      	bne.n	80067ba <HAL_DMA_IRQHandler+0x736>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d007      	beq.n	80067ca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0208 	bic.w	r2, r2, #8
 80067c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ce:	f003 031f 	and.w	r3, r3, #31
 80067d2:	223f      	movs	r2, #63	@ 0x3f
 80067d4:	409a      	lsls	r2, r3
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f000 834a 	beq.w	8006e88 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	4798      	blx	r3
          }
          return;
 80067fc:	e344      	b.n	8006e88 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d018      	beq.n	800683e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d108      	bne.n	800682c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800681e:	2b00      	cmp	r3, #0
 8006820:	d02c      	beq.n	800687c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	4798      	blx	r3
 800682a:	e027      	b.n	800687c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006830:	2b00      	cmp	r3, #0
 8006832:	d023      	beq.n	800687c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	4798      	blx	r3
 800683c:	e01e      	b.n	800687c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10f      	bne.n	800686c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 0210 	bic.w	r2, r2, #16
 800685a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006880:	2b00      	cmp	r3, #0
 8006882:	f000 8306 	beq.w	8006e92 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 8088 	beq.w	80069a4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2204      	movs	r2, #4
 8006898:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a7a      	ldr	r2, [pc, #488]	@ (8006a8c <HAL_DMA_IRQHandler+0xa08>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d04a      	beq.n	800693c <HAL_DMA_IRQHandler+0x8b8>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a79      	ldr	r2, [pc, #484]	@ (8006a90 <HAL_DMA_IRQHandler+0xa0c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d045      	beq.n	800693c <HAL_DMA_IRQHandler+0x8b8>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a77      	ldr	r2, [pc, #476]	@ (8006a94 <HAL_DMA_IRQHandler+0xa10>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d040      	beq.n	800693c <HAL_DMA_IRQHandler+0x8b8>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a76      	ldr	r2, [pc, #472]	@ (8006a98 <HAL_DMA_IRQHandler+0xa14>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d03b      	beq.n	800693c <HAL_DMA_IRQHandler+0x8b8>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a74      	ldr	r2, [pc, #464]	@ (8006a9c <HAL_DMA_IRQHandler+0xa18>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d036      	beq.n	800693c <HAL_DMA_IRQHandler+0x8b8>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a73      	ldr	r2, [pc, #460]	@ (8006aa0 <HAL_DMA_IRQHandler+0xa1c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d031      	beq.n	800693c <HAL_DMA_IRQHandler+0x8b8>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a71      	ldr	r2, [pc, #452]	@ (8006aa4 <HAL_DMA_IRQHandler+0xa20>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d02c      	beq.n	800693c <HAL_DMA_IRQHandler+0x8b8>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a70      	ldr	r2, [pc, #448]	@ (8006aa8 <HAL_DMA_IRQHandler+0xa24>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d027      	beq.n	800693c <HAL_DMA_IRQHandler+0x8b8>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a6e      	ldr	r2, [pc, #440]	@ (8006aac <HAL_DMA_IRQHandler+0xa28>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d022      	beq.n	800693c <HAL_DMA_IRQHandler+0x8b8>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a6d      	ldr	r2, [pc, #436]	@ (8006ab0 <HAL_DMA_IRQHandler+0xa2c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d01d      	beq.n	800693c <HAL_DMA_IRQHandler+0x8b8>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a6b      	ldr	r2, [pc, #428]	@ (8006ab4 <HAL_DMA_IRQHandler+0xa30>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d018      	beq.n	800693c <HAL_DMA_IRQHandler+0x8b8>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a6a      	ldr	r2, [pc, #424]	@ (8006ab8 <HAL_DMA_IRQHandler+0xa34>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d013      	beq.n	800693c <HAL_DMA_IRQHandler+0x8b8>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a68      	ldr	r2, [pc, #416]	@ (8006abc <HAL_DMA_IRQHandler+0xa38>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00e      	beq.n	800693c <HAL_DMA_IRQHandler+0x8b8>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a67      	ldr	r2, [pc, #412]	@ (8006ac0 <HAL_DMA_IRQHandler+0xa3c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d009      	beq.n	800693c <HAL_DMA_IRQHandler+0x8b8>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a65      	ldr	r2, [pc, #404]	@ (8006ac4 <HAL_DMA_IRQHandler+0xa40>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d004      	beq.n	800693c <HAL_DMA_IRQHandler+0x8b8>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a64      	ldr	r2, [pc, #400]	@ (8006ac8 <HAL_DMA_IRQHandler+0xa44>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d108      	bne.n	800694e <HAL_DMA_IRQHandler+0x8ca>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0201 	bic.w	r2, r2, #1
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	e007      	b.n	800695e <HAL_DMA_IRQHandler+0x8da>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0201 	bic.w	r2, r2, #1
 800695c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	3301      	adds	r3, #1
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006966:	429a      	cmp	r2, r3
 8006968:	d307      	bcc.n	800697a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1f2      	bne.n	800695e <HAL_DMA_IRQHandler+0x8da>
 8006978:	e000      	b.n	800697c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800697a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d004      	beq.n	8006994 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2203      	movs	r2, #3
 800698e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006992:	e003      	b.n	800699c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 8272 	beq.w	8006e92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	4798      	blx	r3
 80069b6:	e26c      	b.n	8006e92 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a43      	ldr	r2, [pc, #268]	@ (8006acc <HAL_DMA_IRQHandler+0xa48>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d022      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x984>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a42      	ldr	r2, [pc, #264]	@ (8006ad0 <HAL_DMA_IRQHandler+0xa4c>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d01d      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x984>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a40      	ldr	r2, [pc, #256]	@ (8006ad4 <HAL_DMA_IRQHandler+0xa50>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d018      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x984>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a3f      	ldr	r2, [pc, #252]	@ (8006ad8 <HAL_DMA_IRQHandler+0xa54>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d013      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x984>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a3d      	ldr	r2, [pc, #244]	@ (8006adc <HAL_DMA_IRQHandler+0xa58>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d00e      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x984>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a3c      	ldr	r2, [pc, #240]	@ (8006ae0 <HAL_DMA_IRQHandler+0xa5c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d009      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x984>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a3a      	ldr	r2, [pc, #232]	@ (8006ae4 <HAL_DMA_IRQHandler+0xa60>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d004      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x984>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a39      	ldr	r2, [pc, #228]	@ (8006ae8 <HAL_DMA_IRQHandler+0xa64>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d101      	bne.n	8006a0c <HAL_DMA_IRQHandler+0x988>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e000      	b.n	8006a0e <HAL_DMA_IRQHandler+0x98a>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f000 823f 	beq.w	8006e92 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a20:	f003 031f 	and.w	r3, r3, #31
 8006a24:	2204      	movs	r2, #4
 8006a26:	409a      	lsls	r2, r3
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 80cd 	beq.w	8006bcc <HAL_DMA_IRQHandler+0xb48>
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	f003 0304 	and.w	r3, r3, #4
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 80c7 	beq.w	8006bcc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a42:	f003 031f 	and.w	r3, r3, #31
 8006a46:	2204      	movs	r2, #4
 8006a48:	409a      	lsls	r2, r3
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d049      	beq.n	8006aec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d109      	bne.n	8006a76 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 8210 	beq.w	8006e8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a74:	e20a      	b.n	8006e8c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 8206 	beq.w	8006e8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a88:	e200      	b.n	8006e8c <HAL_DMA_IRQHandler+0xe08>
 8006a8a:	bf00      	nop
 8006a8c:	40020010 	.word	0x40020010
 8006a90:	40020028 	.word	0x40020028
 8006a94:	40020040 	.word	0x40020040
 8006a98:	40020058 	.word	0x40020058
 8006a9c:	40020070 	.word	0x40020070
 8006aa0:	40020088 	.word	0x40020088
 8006aa4:	400200a0 	.word	0x400200a0
 8006aa8:	400200b8 	.word	0x400200b8
 8006aac:	40020410 	.word	0x40020410
 8006ab0:	40020428 	.word	0x40020428
 8006ab4:	40020440 	.word	0x40020440
 8006ab8:	40020458 	.word	0x40020458
 8006abc:	40020470 	.word	0x40020470
 8006ac0:	40020488 	.word	0x40020488
 8006ac4:	400204a0 	.word	0x400204a0
 8006ac8:	400204b8 	.word	0x400204b8
 8006acc:	58025408 	.word	0x58025408
 8006ad0:	5802541c 	.word	0x5802541c
 8006ad4:	58025430 	.word	0x58025430
 8006ad8:	58025444 	.word	0x58025444
 8006adc:	58025458 	.word	0x58025458
 8006ae0:	5802546c 	.word	0x5802546c
 8006ae4:	58025480 	.word	0x58025480
 8006ae8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	f003 0320 	and.w	r3, r3, #32
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d160      	bne.n	8006bb8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a7f      	ldr	r2, [pc, #508]	@ (8006cf8 <HAL_DMA_IRQHandler+0xc74>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d04a      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xb12>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a7d      	ldr	r2, [pc, #500]	@ (8006cfc <HAL_DMA_IRQHandler+0xc78>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d045      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xb12>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a7c      	ldr	r2, [pc, #496]	@ (8006d00 <HAL_DMA_IRQHandler+0xc7c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d040      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xb12>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a7a      	ldr	r2, [pc, #488]	@ (8006d04 <HAL_DMA_IRQHandler+0xc80>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d03b      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xb12>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a79      	ldr	r2, [pc, #484]	@ (8006d08 <HAL_DMA_IRQHandler+0xc84>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d036      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xb12>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a77      	ldr	r2, [pc, #476]	@ (8006d0c <HAL_DMA_IRQHandler+0xc88>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d031      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xb12>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a76      	ldr	r2, [pc, #472]	@ (8006d10 <HAL_DMA_IRQHandler+0xc8c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d02c      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xb12>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a74      	ldr	r2, [pc, #464]	@ (8006d14 <HAL_DMA_IRQHandler+0xc90>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d027      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xb12>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a73      	ldr	r2, [pc, #460]	@ (8006d18 <HAL_DMA_IRQHandler+0xc94>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d022      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xb12>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a71      	ldr	r2, [pc, #452]	@ (8006d1c <HAL_DMA_IRQHandler+0xc98>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d01d      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xb12>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a70      	ldr	r2, [pc, #448]	@ (8006d20 <HAL_DMA_IRQHandler+0xc9c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d018      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xb12>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a6e      	ldr	r2, [pc, #440]	@ (8006d24 <HAL_DMA_IRQHandler+0xca0>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d013      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xb12>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a6d      	ldr	r2, [pc, #436]	@ (8006d28 <HAL_DMA_IRQHandler+0xca4>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d00e      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xb12>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a6b      	ldr	r2, [pc, #428]	@ (8006d2c <HAL_DMA_IRQHandler+0xca8>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d009      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xb12>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a6a      	ldr	r2, [pc, #424]	@ (8006d30 <HAL_DMA_IRQHandler+0xcac>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d004      	beq.n	8006b96 <HAL_DMA_IRQHandler+0xb12>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a68      	ldr	r2, [pc, #416]	@ (8006d34 <HAL_DMA_IRQHandler+0xcb0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d108      	bne.n	8006ba8 <HAL_DMA_IRQHandler+0xb24>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 0208 	bic.w	r2, r2, #8
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	e007      	b.n	8006bb8 <HAL_DMA_IRQHandler+0xb34>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0204 	bic.w	r2, r2, #4
 8006bb6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 8165 	beq.w	8006e8c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bca:	e15f      	b.n	8006e8c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bd0:	f003 031f 	and.w	r3, r3, #31
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	409a      	lsls	r2, r3
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 80c5 	beq.w	8006d6c <HAL_DMA_IRQHandler+0xce8>
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 80bf 	beq.w	8006d6c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bf2:	f003 031f 	and.w	r3, r3, #31
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	409a      	lsls	r2, r3
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d018      	beq.n	8006c3a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d109      	bne.n	8006c26 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 813a 	beq.w	8006e90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c24:	e134      	b.n	8006e90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f000 8130 	beq.w	8006e90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c38:	e12a      	b.n	8006e90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f003 0320 	and.w	r3, r3, #32
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f040 8089 	bne.w	8006d58 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8006cf8 <HAL_DMA_IRQHandler+0xc74>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d04a      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0xc62>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a29      	ldr	r2, [pc, #164]	@ (8006cfc <HAL_DMA_IRQHandler+0xc78>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d045      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0xc62>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a28      	ldr	r2, [pc, #160]	@ (8006d00 <HAL_DMA_IRQHandler+0xc7c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d040      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0xc62>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a26      	ldr	r2, [pc, #152]	@ (8006d04 <HAL_DMA_IRQHandler+0xc80>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d03b      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0xc62>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a25      	ldr	r2, [pc, #148]	@ (8006d08 <HAL_DMA_IRQHandler+0xc84>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d036      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0xc62>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a23      	ldr	r2, [pc, #140]	@ (8006d0c <HAL_DMA_IRQHandler+0xc88>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d031      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0xc62>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a22      	ldr	r2, [pc, #136]	@ (8006d10 <HAL_DMA_IRQHandler+0xc8c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d02c      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0xc62>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a20      	ldr	r2, [pc, #128]	@ (8006d14 <HAL_DMA_IRQHandler+0xc90>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d027      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0xc62>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8006d18 <HAL_DMA_IRQHandler+0xc94>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d022      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0xc62>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8006d1c <HAL_DMA_IRQHandler+0xc98>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d01d      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0xc62>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a1c      	ldr	r2, [pc, #112]	@ (8006d20 <HAL_DMA_IRQHandler+0xc9c>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d018      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0xc62>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8006d24 <HAL_DMA_IRQHandler+0xca0>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d013      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0xc62>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a19      	ldr	r2, [pc, #100]	@ (8006d28 <HAL_DMA_IRQHandler+0xca4>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d00e      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0xc62>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a17      	ldr	r2, [pc, #92]	@ (8006d2c <HAL_DMA_IRQHandler+0xca8>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d009      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0xc62>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a16      	ldr	r2, [pc, #88]	@ (8006d30 <HAL_DMA_IRQHandler+0xcac>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d004      	beq.n	8006ce6 <HAL_DMA_IRQHandler+0xc62>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a14      	ldr	r2, [pc, #80]	@ (8006d34 <HAL_DMA_IRQHandler+0xcb0>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d128      	bne.n	8006d38 <HAL_DMA_IRQHandler+0xcb4>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 0214 	bic.w	r2, r2, #20
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	e027      	b.n	8006d48 <HAL_DMA_IRQHandler+0xcc4>
 8006cf8:	40020010 	.word	0x40020010
 8006cfc:	40020028 	.word	0x40020028
 8006d00:	40020040 	.word	0x40020040
 8006d04:	40020058 	.word	0x40020058
 8006d08:	40020070 	.word	0x40020070
 8006d0c:	40020088 	.word	0x40020088
 8006d10:	400200a0 	.word	0x400200a0
 8006d14:	400200b8 	.word	0x400200b8
 8006d18:	40020410 	.word	0x40020410
 8006d1c:	40020428 	.word	0x40020428
 8006d20:	40020440 	.word	0x40020440
 8006d24:	40020458 	.word	0x40020458
 8006d28:	40020470 	.word	0x40020470
 8006d2c:	40020488 	.word	0x40020488
 8006d30:	400204a0 	.word	0x400204a0
 8006d34:	400204b8 	.word	0x400204b8
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 020a 	bic.w	r2, r2, #10
 8006d46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 8097 	beq.w	8006e90 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d6a:	e091      	b.n	8006e90 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d70:	f003 031f 	and.w	r3, r3, #31
 8006d74:	2208      	movs	r2, #8
 8006d76:	409a      	lsls	r2, r3
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 8088 	beq.w	8006e92 <HAL_DMA_IRQHandler+0xe0e>
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f003 0308 	and.w	r3, r3, #8
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 8082 	beq.w	8006e92 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a41      	ldr	r2, [pc, #260]	@ (8006e98 <HAL_DMA_IRQHandler+0xe14>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d04a      	beq.n	8006e2e <HAL_DMA_IRQHandler+0xdaa>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a3f      	ldr	r2, [pc, #252]	@ (8006e9c <HAL_DMA_IRQHandler+0xe18>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d045      	beq.n	8006e2e <HAL_DMA_IRQHandler+0xdaa>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a3e      	ldr	r2, [pc, #248]	@ (8006ea0 <HAL_DMA_IRQHandler+0xe1c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d040      	beq.n	8006e2e <HAL_DMA_IRQHandler+0xdaa>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a3c      	ldr	r2, [pc, #240]	@ (8006ea4 <HAL_DMA_IRQHandler+0xe20>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d03b      	beq.n	8006e2e <HAL_DMA_IRQHandler+0xdaa>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a3b      	ldr	r2, [pc, #236]	@ (8006ea8 <HAL_DMA_IRQHandler+0xe24>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d036      	beq.n	8006e2e <HAL_DMA_IRQHandler+0xdaa>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a39      	ldr	r2, [pc, #228]	@ (8006eac <HAL_DMA_IRQHandler+0xe28>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d031      	beq.n	8006e2e <HAL_DMA_IRQHandler+0xdaa>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a38      	ldr	r2, [pc, #224]	@ (8006eb0 <HAL_DMA_IRQHandler+0xe2c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d02c      	beq.n	8006e2e <HAL_DMA_IRQHandler+0xdaa>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a36      	ldr	r2, [pc, #216]	@ (8006eb4 <HAL_DMA_IRQHandler+0xe30>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d027      	beq.n	8006e2e <HAL_DMA_IRQHandler+0xdaa>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a35      	ldr	r2, [pc, #212]	@ (8006eb8 <HAL_DMA_IRQHandler+0xe34>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d022      	beq.n	8006e2e <HAL_DMA_IRQHandler+0xdaa>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a33      	ldr	r2, [pc, #204]	@ (8006ebc <HAL_DMA_IRQHandler+0xe38>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d01d      	beq.n	8006e2e <HAL_DMA_IRQHandler+0xdaa>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a32      	ldr	r2, [pc, #200]	@ (8006ec0 <HAL_DMA_IRQHandler+0xe3c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d018      	beq.n	8006e2e <HAL_DMA_IRQHandler+0xdaa>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a30      	ldr	r2, [pc, #192]	@ (8006ec4 <HAL_DMA_IRQHandler+0xe40>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d013      	beq.n	8006e2e <HAL_DMA_IRQHandler+0xdaa>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a2f      	ldr	r2, [pc, #188]	@ (8006ec8 <HAL_DMA_IRQHandler+0xe44>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d00e      	beq.n	8006e2e <HAL_DMA_IRQHandler+0xdaa>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a2d      	ldr	r2, [pc, #180]	@ (8006ecc <HAL_DMA_IRQHandler+0xe48>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d009      	beq.n	8006e2e <HAL_DMA_IRQHandler+0xdaa>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a2c      	ldr	r2, [pc, #176]	@ (8006ed0 <HAL_DMA_IRQHandler+0xe4c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d004      	beq.n	8006e2e <HAL_DMA_IRQHandler+0xdaa>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a2a      	ldr	r2, [pc, #168]	@ (8006ed4 <HAL_DMA_IRQHandler+0xe50>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d108      	bne.n	8006e40 <HAL_DMA_IRQHandler+0xdbc>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 021c 	bic.w	r2, r2, #28
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	e007      	b.n	8006e50 <HAL_DMA_IRQHandler+0xdcc>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f022 020e 	bic.w	r2, r2, #14
 8006e4e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e54:	f003 031f 	and.w	r3, r3, #31
 8006e58:	2201      	movs	r2, #1
 8006e5a:	409a      	lsls	r2, r3
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d009      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	4798      	blx	r3
 8006e86:	e004      	b.n	8006e92 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006e88:	bf00      	nop
 8006e8a:	e002      	b.n	8006e92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e8c:	bf00      	nop
 8006e8e:	e000      	b.n	8006e92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e90:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e92:	3728      	adds	r7, #40	@ 0x28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	40020010 	.word	0x40020010
 8006e9c:	40020028 	.word	0x40020028
 8006ea0:	40020040 	.word	0x40020040
 8006ea4:	40020058 	.word	0x40020058
 8006ea8:	40020070 	.word	0x40020070
 8006eac:	40020088 	.word	0x40020088
 8006eb0:	400200a0 	.word	0x400200a0
 8006eb4:	400200b8 	.word	0x400200b8
 8006eb8:	40020410 	.word	0x40020410
 8006ebc:	40020428 	.word	0x40020428
 8006ec0:	40020440 	.word	0x40020440
 8006ec4:	40020458 	.word	0x40020458
 8006ec8:	40020470 	.word	0x40020470
 8006ecc:	40020488 	.word	0x40020488
 8006ed0:	400204a0 	.word	0x400204a0
 8006ed4:	400204b8 	.word	0x400204b8

08006ed8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a42      	ldr	r2, [pc, #264]	@ (8006ff0 <DMA_CalcBaseAndBitshift+0x118>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d04a      	beq.n	8006f80 <DMA_CalcBaseAndBitshift+0xa8>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a41      	ldr	r2, [pc, #260]	@ (8006ff4 <DMA_CalcBaseAndBitshift+0x11c>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d045      	beq.n	8006f80 <DMA_CalcBaseAndBitshift+0xa8>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a3f      	ldr	r2, [pc, #252]	@ (8006ff8 <DMA_CalcBaseAndBitshift+0x120>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d040      	beq.n	8006f80 <DMA_CalcBaseAndBitshift+0xa8>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a3e      	ldr	r2, [pc, #248]	@ (8006ffc <DMA_CalcBaseAndBitshift+0x124>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d03b      	beq.n	8006f80 <DMA_CalcBaseAndBitshift+0xa8>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a3c      	ldr	r2, [pc, #240]	@ (8007000 <DMA_CalcBaseAndBitshift+0x128>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d036      	beq.n	8006f80 <DMA_CalcBaseAndBitshift+0xa8>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a3b      	ldr	r2, [pc, #236]	@ (8007004 <DMA_CalcBaseAndBitshift+0x12c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d031      	beq.n	8006f80 <DMA_CalcBaseAndBitshift+0xa8>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a39      	ldr	r2, [pc, #228]	@ (8007008 <DMA_CalcBaseAndBitshift+0x130>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d02c      	beq.n	8006f80 <DMA_CalcBaseAndBitshift+0xa8>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a38      	ldr	r2, [pc, #224]	@ (800700c <DMA_CalcBaseAndBitshift+0x134>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d027      	beq.n	8006f80 <DMA_CalcBaseAndBitshift+0xa8>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a36      	ldr	r2, [pc, #216]	@ (8007010 <DMA_CalcBaseAndBitshift+0x138>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d022      	beq.n	8006f80 <DMA_CalcBaseAndBitshift+0xa8>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a35      	ldr	r2, [pc, #212]	@ (8007014 <DMA_CalcBaseAndBitshift+0x13c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d01d      	beq.n	8006f80 <DMA_CalcBaseAndBitshift+0xa8>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a33      	ldr	r2, [pc, #204]	@ (8007018 <DMA_CalcBaseAndBitshift+0x140>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d018      	beq.n	8006f80 <DMA_CalcBaseAndBitshift+0xa8>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a32      	ldr	r2, [pc, #200]	@ (800701c <DMA_CalcBaseAndBitshift+0x144>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d013      	beq.n	8006f80 <DMA_CalcBaseAndBitshift+0xa8>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a30      	ldr	r2, [pc, #192]	@ (8007020 <DMA_CalcBaseAndBitshift+0x148>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d00e      	beq.n	8006f80 <DMA_CalcBaseAndBitshift+0xa8>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a2f      	ldr	r2, [pc, #188]	@ (8007024 <DMA_CalcBaseAndBitshift+0x14c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d009      	beq.n	8006f80 <DMA_CalcBaseAndBitshift+0xa8>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a2d      	ldr	r2, [pc, #180]	@ (8007028 <DMA_CalcBaseAndBitshift+0x150>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d004      	beq.n	8006f80 <DMA_CalcBaseAndBitshift+0xa8>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a2c      	ldr	r2, [pc, #176]	@ (800702c <DMA_CalcBaseAndBitshift+0x154>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d101      	bne.n	8006f84 <DMA_CalcBaseAndBitshift+0xac>
 8006f80:	2301      	movs	r3, #1
 8006f82:	e000      	b.n	8006f86 <DMA_CalcBaseAndBitshift+0xae>
 8006f84:	2300      	movs	r3, #0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d024      	beq.n	8006fd4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	3b10      	subs	r3, #16
 8006f92:	4a27      	ldr	r2, [pc, #156]	@ (8007030 <DMA_CalcBaseAndBitshift+0x158>)
 8006f94:	fba2 2303 	umull	r2, r3, r2, r3
 8006f98:	091b      	lsrs	r3, r3, #4
 8006f9a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f003 0307 	and.w	r3, r3, #7
 8006fa2:	4a24      	ldr	r2, [pc, #144]	@ (8007034 <DMA_CalcBaseAndBitshift+0x15c>)
 8006fa4:	5cd3      	ldrb	r3, [r2, r3]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d908      	bls.n	8006fc4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8007038 <DMA_CalcBaseAndBitshift+0x160>)
 8006fba:	4013      	ands	r3, r2
 8006fbc:	1d1a      	adds	r2, r3, #4
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	659a      	str	r2, [r3, #88]	@ 0x58
 8006fc2:	e00d      	b.n	8006fe0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	461a      	mov	r2, r3
 8006fca:	4b1b      	ldr	r3, [pc, #108]	@ (8007038 <DMA_CalcBaseAndBitshift+0x160>)
 8006fcc:	4013      	ands	r3, r2
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fd2:	e005      	b.n	8006fe0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	40020010 	.word	0x40020010
 8006ff4:	40020028 	.word	0x40020028
 8006ff8:	40020040 	.word	0x40020040
 8006ffc:	40020058 	.word	0x40020058
 8007000:	40020070 	.word	0x40020070
 8007004:	40020088 	.word	0x40020088
 8007008:	400200a0 	.word	0x400200a0
 800700c:	400200b8 	.word	0x400200b8
 8007010:	40020410 	.word	0x40020410
 8007014:	40020428 	.word	0x40020428
 8007018:	40020440 	.word	0x40020440
 800701c:	40020458 	.word	0x40020458
 8007020:	40020470 	.word	0x40020470
 8007024:	40020488 	.word	0x40020488
 8007028:	400204a0 	.word	0x400204a0
 800702c:	400204b8 	.word	0x400204b8
 8007030:	aaaaaaab 	.word	0xaaaaaaab
 8007034:	08014928 	.word	0x08014928
 8007038:	fffffc00 	.word	0xfffffc00

0800703c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d120      	bne.n	8007092 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007054:	2b03      	cmp	r3, #3
 8007056:	d858      	bhi.n	800710a <DMA_CheckFifoParam+0xce>
 8007058:	a201      	add	r2, pc, #4	@ (adr r2, 8007060 <DMA_CheckFifoParam+0x24>)
 800705a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705e:	bf00      	nop
 8007060:	08007071 	.word	0x08007071
 8007064:	08007083 	.word	0x08007083
 8007068:	08007071 	.word	0x08007071
 800706c:	0800710b 	.word	0x0800710b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007074:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d048      	beq.n	800710e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007080:	e045      	b.n	800710e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007086:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800708a:	d142      	bne.n	8007112 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007090:	e03f      	b.n	8007112 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800709a:	d123      	bne.n	80070e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a0:	2b03      	cmp	r3, #3
 80070a2:	d838      	bhi.n	8007116 <DMA_CheckFifoParam+0xda>
 80070a4:	a201      	add	r2, pc, #4	@ (adr r2, 80070ac <DMA_CheckFifoParam+0x70>)
 80070a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070aa:	bf00      	nop
 80070ac:	080070bd 	.word	0x080070bd
 80070b0:	080070c3 	.word	0x080070c3
 80070b4:	080070bd 	.word	0x080070bd
 80070b8:	080070d5 	.word	0x080070d5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	73fb      	strb	r3, [r7, #15]
        break;
 80070c0:	e030      	b.n	8007124 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d025      	beq.n	800711a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070d2:	e022      	b.n	800711a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80070dc:	d11f      	bne.n	800711e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070e2:	e01c      	b.n	800711e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d902      	bls.n	80070f2 <DMA_CheckFifoParam+0xb6>
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d003      	beq.n	80070f8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80070f0:	e018      	b.n	8007124 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	73fb      	strb	r3, [r7, #15]
        break;
 80070f6:	e015      	b.n	8007124 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00e      	beq.n	8007122 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	73fb      	strb	r3, [r7, #15]
    break;
 8007108:	e00b      	b.n	8007122 <DMA_CheckFifoParam+0xe6>
        break;
 800710a:	bf00      	nop
 800710c:	e00a      	b.n	8007124 <DMA_CheckFifoParam+0xe8>
        break;
 800710e:	bf00      	nop
 8007110:	e008      	b.n	8007124 <DMA_CheckFifoParam+0xe8>
        break;
 8007112:	bf00      	nop
 8007114:	e006      	b.n	8007124 <DMA_CheckFifoParam+0xe8>
        break;
 8007116:	bf00      	nop
 8007118:	e004      	b.n	8007124 <DMA_CheckFifoParam+0xe8>
        break;
 800711a:	bf00      	nop
 800711c:	e002      	b.n	8007124 <DMA_CheckFifoParam+0xe8>
        break;
 800711e:	bf00      	nop
 8007120:	e000      	b.n	8007124 <DMA_CheckFifoParam+0xe8>
    break;
 8007122:	bf00      	nop
    }
  }

  return status;
 8007124:	7bfb      	ldrb	r3, [r7, #15]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop

08007134 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a38      	ldr	r2, [pc, #224]	@ (8007228 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d022      	beq.n	8007192 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a36      	ldr	r2, [pc, #216]	@ (800722c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d01d      	beq.n	8007192 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a35      	ldr	r2, [pc, #212]	@ (8007230 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d018      	beq.n	8007192 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a33      	ldr	r2, [pc, #204]	@ (8007234 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d013      	beq.n	8007192 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a32      	ldr	r2, [pc, #200]	@ (8007238 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d00e      	beq.n	8007192 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a30      	ldr	r2, [pc, #192]	@ (800723c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d009      	beq.n	8007192 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a2f      	ldr	r2, [pc, #188]	@ (8007240 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d004      	beq.n	8007192 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a2d      	ldr	r2, [pc, #180]	@ (8007244 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d101      	bne.n	8007196 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007192:	2301      	movs	r3, #1
 8007194:	e000      	b.n	8007198 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007196:	2300      	movs	r3, #0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d01a      	beq.n	80071d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	3b08      	subs	r3, #8
 80071a4:	4a28      	ldr	r2, [pc, #160]	@ (8007248 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80071a6:	fba2 2303 	umull	r2, r3, r2, r3
 80071aa:	091b      	lsrs	r3, r3, #4
 80071ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	4b26      	ldr	r3, [pc, #152]	@ (800724c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80071b2:	4413      	add	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	461a      	mov	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a24      	ldr	r2, [pc, #144]	@ (8007250 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80071c0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f003 031f 	and.w	r3, r3, #31
 80071c8:	2201      	movs	r2, #1
 80071ca:	409a      	lsls	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80071d0:	e024      	b.n	800721c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	3b10      	subs	r3, #16
 80071da:	4a1e      	ldr	r2, [pc, #120]	@ (8007254 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80071dc:	fba2 2303 	umull	r2, r3, r2, r3
 80071e0:	091b      	lsrs	r3, r3, #4
 80071e2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	4a1c      	ldr	r2, [pc, #112]	@ (8007258 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d806      	bhi.n	80071fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	4a1b      	ldr	r2, [pc, #108]	@ (800725c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d902      	bls.n	80071fa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	3308      	adds	r3, #8
 80071f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	4b18      	ldr	r3, [pc, #96]	@ (8007260 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	461a      	mov	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a16      	ldr	r2, [pc, #88]	@ (8007264 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800720c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f003 031f 	and.w	r3, r3, #31
 8007214:	2201      	movs	r2, #1
 8007216:	409a      	lsls	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800721c:	bf00      	nop
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	58025408 	.word	0x58025408
 800722c:	5802541c 	.word	0x5802541c
 8007230:	58025430 	.word	0x58025430
 8007234:	58025444 	.word	0x58025444
 8007238:	58025458 	.word	0x58025458
 800723c:	5802546c 	.word	0x5802546c
 8007240:	58025480 	.word	0x58025480
 8007244:	58025494 	.word	0x58025494
 8007248:	cccccccd 	.word	0xcccccccd
 800724c:	16009600 	.word	0x16009600
 8007250:	58025880 	.word	0x58025880
 8007254:	aaaaaaab 	.word	0xaaaaaaab
 8007258:	400204b8 	.word	0x400204b8
 800725c:	4002040f 	.word	0x4002040f
 8007260:	10008200 	.word	0x10008200
 8007264:	40020880 	.word	0x40020880

08007268 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	b2db      	uxtb	r3, r3
 8007276:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d04a      	beq.n	8007314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b08      	cmp	r3, #8
 8007282:	d847      	bhi.n	8007314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a25      	ldr	r2, [pc, #148]	@ (8007320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d022      	beq.n	80072d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a24      	ldr	r2, [pc, #144]	@ (8007324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d01d      	beq.n	80072d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a22      	ldr	r2, [pc, #136]	@ (8007328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d018      	beq.n	80072d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a21      	ldr	r2, [pc, #132]	@ (800732c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d013      	beq.n	80072d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a1f      	ldr	r2, [pc, #124]	@ (8007330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d00e      	beq.n	80072d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a1e      	ldr	r2, [pc, #120]	@ (8007334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d009      	beq.n	80072d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d004      	beq.n	80072d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a1b      	ldr	r2, [pc, #108]	@ (800733c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d101      	bne.n	80072d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80072d4:	2301      	movs	r3, #1
 80072d6:	e000      	b.n	80072da <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80072d8:	2300      	movs	r3, #0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00a      	beq.n	80072f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	4b17      	ldr	r3, [pc, #92]	@ (8007340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80072e2:	4413      	add	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	461a      	mov	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a15      	ldr	r2, [pc, #84]	@ (8007344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80072f0:	671a      	str	r2, [r3, #112]	@ 0x70
 80072f2:	e009      	b.n	8007308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	4b14      	ldr	r3, [pc, #80]	@ (8007348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80072f8:	4413      	add	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	461a      	mov	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a11      	ldr	r2, [pc, #68]	@ (800734c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007306:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	3b01      	subs	r3, #1
 800730c:	2201      	movs	r2, #1
 800730e:	409a      	lsls	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007314:	bf00      	nop
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	58025408 	.word	0x58025408
 8007324:	5802541c 	.word	0x5802541c
 8007328:	58025430 	.word	0x58025430
 800732c:	58025444 	.word	0x58025444
 8007330:	58025458 	.word	0x58025458
 8007334:	5802546c 	.word	0x5802546c
 8007338:	58025480 	.word	0x58025480
 800733c:	58025494 	.word	0x58025494
 8007340:	1600963f 	.word	0x1600963f
 8007344:	58025940 	.word	0x58025940
 8007348:	1000823f 	.word	0x1000823f
 800734c:	40020940 	.word	0x40020940

08007350 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007350:	b480      	push	{r7}
 8007352:	b089      	sub	sp, #36	@ 0x24
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800735a:	2300      	movs	r3, #0
 800735c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800735e:	4b86      	ldr	r3, [pc, #536]	@ (8007578 <HAL_GPIO_Init+0x228>)
 8007360:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007362:	e18c      	b.n	800767e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	2101      	movs	r1, #1
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	fa01 f303 	lsl.w	r3, r1, r3
 8007370:	4013      	ands	r3, r2
 8007372:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	2b00      	cmp	r3, #0
 8007378:	f000 817e 	beq.w	8007678 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f003 0303 	and.w	r3, r3, #3
 8007384:	2b01      	cmp	r3, #1
 8007386:	d005      	beq.n	8007394 <HAL_GPIO_Init+0x44>
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f003 0303 	and.w	r3, r3, #3
 8007390:	2b02      	cmp	r3, #2
 8007392:	d130      	bne.n	80073f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	2203      	movs	r2, #3
 80073a0:	fa02 f303 	lsl.w	r3, r2, r3
 80073a4:	43db      	mvns	r3, r3
 80073a6:	69ba      	ldr	r2, [r7, #24]
 80073a8:	4013      	ands	r3, r2
 80073aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	68da      	ldr	r2, [r3, #12]
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	005b      	lsls	r3, r3, #1
 80073b4:	fa02 f303 	lsl.w	r3, r2, r3
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	69ba      	ldr	r2, [r7, #24]
 80073c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80073ca:	2201      	movs	r2, #1
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	fa02 f303 	lsl.w	r3, r2, r3
 80073d2:	43db      	mvns	r3, r3
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	4013      	ands	r3, r2
 80073d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	091b      	lsrs	r3, r3, #4
 80073e0:	f003 0201 	and.w	r2, r3, #1
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ea:	69ba      	ldr	r2, [r7, #24]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	69ba      	ldr	r2, [r7, #24]
 80073f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f003 0303 	and.w	r3, r3, #3
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d017      	beq.n	8007432 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	005b      	lsls	r3, r3, #1
 800740c:	2203      	movs	r2, #3
 800740e:	fa02 f303 	lsl.w	r3, r2, r3
 8007412:	43db      	mvns	r3, r3
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	4013      	ands	r3, r2
 8007418:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	689a      	ldr	r2, [r3, #8]
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	005b      	lsls	r3, r3, #1
 8007422:	fa02 f303 	lsl.w	r3, r2, r3
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	4313      	orrs	r3, r2
 800742a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f003 0303 	and.w	r3, r3, #3
 800743a:	2b02      	cmp	r3, #2
 800743c:	d123      	bne.n	8007486 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	08da      	lsrs	r2, r3, #3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	3208      	adds	r2, #8
 8007446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800744a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	f003 0307 	and.w	r3, r3, #7
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	220f      	movs	r2, #15
 8007456:	fa02 f303 	lsl.w	r3, r2, r3
 800745a:	43db      	mvns	r3, r3
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	4013      	ands	r3, r2
 8007460:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	691a      	ldr	r2, [r3, #16]
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	f003 0307 	and.w	r3, r3, #7
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	fa02 f303 	lsl.w	r3, r2, r3
 8007472:	69ba      	ldr	r2, [r7, #24]
 8007474:	4313      	orrs	r3, r2
 8007476:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	08da      	lsrs	r2, r3, #3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	3208      	adds	r2, #8
 8007480:	69b9      	ldr	r1, [r7, #24]
 8007482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	2203      	movs	r2, #3
 8007492:	fa02 f303 	lsl.w	r3, r2, r3
 8007496:	43db      	mvns	r3, r3
 8007498:	69ba      	ldr	r2, [r7, #24]
 800749a:	4013      	ands	r3, r2
 800749c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f003 0203 	and.w	r2, r3, #3
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	005b      	lsls	r3, r3, #1
 80074aa:	fa02 f303 	lsl.w	r3, r2, r3
 80074ae:	69ba      	ldr	r2, [r7, #24]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f000 80d8 	beq.w	8007678 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074c8:	4b2c      	ldr	r3, [pc, #176]	@ (800757c <HAL_GPIO_Init+0x22c>)
 80074ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074ce:	4a2b      	ldr	r2, [pc, #172]	@ (800757c <HAL_GPIO_Init+0x22c>)
 80074d0:	f043 0302 	orr.w	r3, r3, #2
 80074d4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80074d8:	4b28      	ldr	r3, [pc, #160]	@ (800757c <HAL_GPIO_Init+0x22c>)
 80074da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074de:	f003 0302 	and.w	r3, r3, #2
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80074e6:	4a26      	ldr	r2, [pc, #152]	@ (8007580 <HAL_GPIO_Init+0x230>)
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	089b      	lsrs	r3, r3, #2
 80074ec:	3302      	adds	r3, #2
 80074ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	f003 0303 	and.w	r3, r3, #3
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	220f      	movs	r2, #15
 80074fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007502:	43db      	mvns	r3, r3
 8007504:	69ba      	ldr	r2, [r7, #24]
 8007506:	4013      	ands	r3, r2
 8007508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a1d      	ldr	r2, [pc, #116]	@ (8007584 <HAL_GPIO_Init+0x234>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d04a      	beq.n	80075a8 <HAL_GPIO_Init+0x258>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a1c      	ldr	r2, [pc, #112]	@ (8007588 <HAL_GPIO_Init+0x238>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d02b      	beq.n	8007572 <HAL_GPIO_Init+0x222>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a1b      	ldr	r2, [pc, #108]	@ (800758c <HAL_GPIO_Init+0x23c>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d025      	beq.n	800756e <HAL_GPIO_Init+0x21e>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a1a      	ldr	r2, [pc, #104]	@ (8007590 <HAL_GPIO_Init+0x240>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d01f      	beq.n	800756a <HAL_GPIO_Init+0x21a>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a19      	ldr	r2, [pc, #100]	@ (8007594 <HAL_GPIO_Init+0x244>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d019      	beq.n	8007566 <HAL_GPIO_Init+0x216>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a18      	ldr	r2, [pc, #96]	@ (8007598 <HAL_GPIO_Init+0x248>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d013      	beq.n	8007562 <HAL_GPIO_Init+0x212>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a17      	ldr	r2, [pc, #92]	@ (800759c <HAL_GPIO_Init+0x24c>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d00d      	beq.n	800755e <HAL_GPIO_Init+0x20e>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a16      	ldr	r2, [pc, #88]	@ (80075a0 <HAL_GPIO_Init+0x250>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d007      	beq.n	800755a <HAL_GPIO_Init+0x20a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a15      	ldr	r2, [pc, #84]	@ (80075a4 <HAL_GPIO_Init+0x254>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d101      	bne.n	8007556 <HAL_GPIO_Init+0x206>
 8007552:	2309      	movs	r3, #9
 8007554:	e029      	b.n	80075aa <HAL_GPIO_Init+0x25a>
 8007556:	230a      	movs	r3, #10
 8007558:	e027      	b.n	80075aa <HAL_GPIO_Init+0x25a>
 800755a:	2307      	movs	r3, #7
 800755c:	e025      	b.n	80075aa <HAL_GPIO_Init+0x25a>
 800755e:	2306      	movs	r3, #6
 8007560:	e023      	b.n	80075aa <HAL_GPIO_Init+0x25a>
 8007562:	2305      	movs	r3, #5
 8007564:	e021      	b.n	80075aa <HAL_GPIO_Init+0x25a>
 8007566:	2304      	movs	r3, #4
 8007568:	e01f      	b.n	80075aa <HAL_GPIO_Init+0x25a>
 800756a:	2303      	movs	r3, #3
 800756c:	e01d      	b.n	80075aa <HAL_GPIO_Init+0x25a>
 800756e:	2302      	movs	r3, #2
 8007570:	e01b      	b.n	80075aa <HAL_GPIO_Init+0x25a>
 8007572:	2301      	movs	r3, #1
 8007574:	e019      	b.n	80075aa <HAL_GPIO_Init+0x25a>
 8007576:	bf00      	nop
 8007578:	58000080 	.word	0x58000080
 800757c:	58024400 	.word	0x58024400
 8007580:	58000400 	.word	0x58000400
 8007584:	58020000 	.word	0x58020000
 8007588:	58020400 	.word	0x58020400
 800758c:	58020800 	.word	0x58020800
 8007590:	58020c00 	.word	0x58020c00
 8007594:	58021000 	.word	0x58021000
 8007598:	58021400 	.word	0x58021400
 800759c:	58021800 	.word	0x58021800
 80075a0:	58021c00 	.word	0x58021c00
 80075a4:	58022400 	.word	0x58022400
 80075a8:	2300      	movs	r3, #0
 80075aa:	69fa      	ldr	r2, [r7, #28]
 80075ac:	f002 0203 	and.w	r2, r2, #3
 80075b0:	0092      	lsls	r2, r2, #2
 80075b2:	4093      	lsls	r3, r2
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80075ba:	4938      	ldr	r1, [pc, #224]	@ (800769c <HAL_GPIO_Init+0x34c>)
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	089b      	lsrs	r3, r3, #2
 80075c0:	3302      	adds	r3, #2
 80075c2:	69ba      	ldr	r2, [r7, #24]
 80075c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80075c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	43db      	mvns	r3, r3
 80075d4:	69ba      	ldr	r2, [r7, #24]
 80075d6:	4013      	ands	r3, r2
 80075d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80075ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80075f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	43db      	mvns	r3, r3
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	4013      	ands	r3, r2
 8007606:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d003      	beq.n	800761c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	4313      	orrs	r3, r2
 800761a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800761c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	43db      	mvns	r3, r3
 800762e:	69ba      	ldr	r2, [r7, #24]
 8007630:	4013      	ands	r3, r2
 8007632:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d003      	beq.n	8007648 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	4313      	orrs	r3, r2
 8007646:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	43db      	mvns	r3, r3
 8007658:	69ba      	ldr	r2, [r7, #24]
 800765a:	4013      	ands	r3, r2
 800765c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	4313      	orrs	r3, r2
 8007670:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	69ba      	ldr	r2, [r7, #24]
 8007676:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	3301      	adds	r3, #1
 800767c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	fa22 f303 	lsr.w	r3, r2, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	f47f ae6b 	bne.w	8007364 <HAL_GPIO_Init+0x14>
  }
}
 800768e:	bf00      	nop
 8007690:	bf00      	nop
 8007692:	3724      	adds	r7, #36	@ 0x24
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	58000400 	.word	0x58000400

080076a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e08b      	b.n	80077ca <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d106      	bne.n	80076cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7f9 fc36 	bl	8000f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2224      	movs	r2, #36	@ 0x24
 80076d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f022 0201 	bic.w	r2, r2, #1
 80076e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685a      	ldr	r2, [r3, #4]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80076f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	689a      	ldr	r2, [r3, #8]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007700:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d107      	bne.n	800771a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	689a      	ldr	r2, [r3, #8]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007716:	609a      	str	r2, [r3, #8]
 8007718:	e006      	b.n	8007728 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	689a      	ldr	r2, [r3, #8]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007726:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	2b02      	cmp	r3, #2
 800772e:	d108      	bne.n	8007742 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685a      	ldr	r2, [r3, #4]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800773e:	605a      	str	r2, [r3, #4]
 8007740:	e007      	b.n	8007752 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	685a      	ldr	r2, [r3, #4]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007750:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6859      	ldr	r1, [r3, #4]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	4b1d      	ldr	r3, [pc, #116]	@ (80077d4 <HAL_I2C_Init+0x134>)
 800775e:	430b      	orrs	r3, r1
 8007760:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68da      	ldr	r2, [r3, #12]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007770:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691a      	ldr	r2, [r3, #16]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	430a      	orrs	r2, r1
 800778a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	69d9      	ldr	r1, [r3, #28]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a1a      	ldr	r2, [r3, #32]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	430a      	orrs	r2, r1
 800779a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f042 0201 	orr.w	r2, r2, #1
 80077aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2220      	movs	r2, #32
 80077b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	02008000 	.word	0x02008000

080077d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b20      	cmp	r3, #32
 80077ec:	d138      	bne.n	8007860 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d101      	bne.n	80077fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80077f8:	2302      	movs	r3, #2
 80077fa:	e032      	b.n	8007862 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2224      	movs	r2, #36	@ 0x24
 8007808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 0201 	bic.w	r2, r2, #1
 800781a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800782a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6819      	ldr	r1, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	430a      	orrs	r2, r1
 800783a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f042 0201 	orr.w	r2, r2, #1
 800784a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2220      	movs	r2, #32
 8007850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	e000      	b.n	8007862 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007860:	2302      	movs	r3, #2
  }
}
 8007862:	4618      	mov	r0, r3
 8007864:	370c      	adds	r7, #12
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800786e:	b480      	push	{r7}
 8007870:	b085      	sub	sp, #20
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b20      	cmp	r3, #32
 8007882:	d139      	bne.n	80078f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800788e:	2302      	movs	r3, #2
 8007890:	e033      	b.n	80078fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2224      	movs	r2, #36	@ 0x24
 800789e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 0201 	bic.w	r2, r2, #1
 80078b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80078c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	021b      	lsls	r3, r3, #8
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f042 0201 	orr.w	r2, r2, #1
 80078e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2220      	movs	r2, #32
 80078e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	e000      	b.n	80078fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80078f8:	2302      	movs	r3, #2
  }
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr

08007906 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b084      	sub	sp, #16
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e043      	b.n	80079a0 <HAL_IWDG_Init+0x9a>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8007920:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f245 5255 	movw	r2, #21845	@ 0x5555
 800792a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	6852      	ldr	r2, [r2, #4]
 8007934:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	6892      	ldr	r2, [r2, #8]
 800793e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007940:	f7fb f8d0 	bl	8002ae4 <HAL_GetTick>
 8007944:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007946:	e011      	b.n	800796c <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007948:	f7fb f8cc 	bl	8002ae4 <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	f641 0201 	movw	r2, #6145	@ 0x1801
 8007956:	4293      	cmp	r3, r2
 8007958:	d908      	bls.n	800796c <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	f003 0307 	and.w	r3, r3, #7
 8007964:	2b00      	cmp	r3, #0
 8007966:	d001      	beq.n	800796c <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e019      	b.n	80079a0 <HAL_IWDG_Init+0x9a>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	f003 0307 	and.w	r3, r3, #7
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e6      	bne.n	8007948 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	691a      	ldr	r2, [r3, #16]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	429a      	cmp	r2, r3
 8007986:	d005      	beq.n	8007994 <HAL_IWDG_Init+0x8e>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	68d2      	ldr	r2, [r2, #12]
 8007990:	611a      	str	r2, [r3, #16]
 8007992:	e004      	b.n	800799e <HAL_IWDG_Init+0x98>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800799c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af02      	add	r7, sp, #8
 80079ae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e0fe      	b.n	8007bb8 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d106      	bne.n	80079d4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f00b ff30 	bl	8013834 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2203      	movs	r2, #3
 80079d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f008 fac8 	bl	800ff76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6818      	ldr	r0, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	7c1a      	ldrb	r2, [r3, #16]
 80079ee:	f88d 2000 	strb.w	r2, [sp]
 80079f2:	3304      	adds	r3, #4
 80079f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079f6:	f008 f999 	bl	800fd2c <USB_CoreInit>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d005      	beq.n	8007a0c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2202      	movs	r2, #2
 8007a04:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e0d5      	b.n	8007bb8 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2100      	movs	r1, #0
 8007a12:	4618      	mov	r0, r3
 8007a14:	f008 fac0 	bl	800ff98 <USB_SetCurrentMode>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d005      	beq.n	8007a2a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2202      	movs	r2, #2
 8007a22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e0c6      	b.n	8007bb8 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	73fb      	strb	r3, [r7, #15]
 8007a2e:	e04a      	b.n	8007ac6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007a30:	7bfa      	ldrb	r2, [r7, #15]
 8007a32:	6879      	ldr	r1, [r7, #4]
 8007a34:	4613      	mov	r3, r2
 8007a36:	00db      	lsls	r3, r3, #3
 8007a38:	4413      	add	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	440b      	add	r3, r1
 8007a3e:	3315      	adds	r3, #21
 8007a40:	2201      	movs	r2, #1
 8007a42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007a44:	7bfa      	ldrb	r2, [r7, #15]
 8007a46:	6879      	ldr	r1, [r7, #4]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	00db      	lsls	r3, r3, #3
 8007a4c:	4413      	add	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	440b      	add	r3, r1
 8007a52:	3314      	adds	r3, #20
 8007a54:	7bfa      	ldrb	r2, [r7, #15]
 8007a56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007a58:	7bfa      	ldrb	r2, [r7, #15]
 8007a5a:	7bfb      	ldrb	r3, [r7, #15]
 8007a5c:	b298      	uxth	r0, r3
 8007a5e:	6879      	ldr	r1, [r7, #4]
 8007a60:	4613      	mov	r3, r2
 8007a62:	00db      	lsls	r3, r3, #3
 8007a64:	4413      	add	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	440b      	add	r3, r1
 8007a6a:	332e      	adds	r3, #46	@ 0x2e
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007a70:	7bfa      	ldrb	r2, [r7, #15]
 8007a72:	6879      	ldr	r1, [r7, #4]
 8007a74:	4613      	mov	r3, r2
 8007a76:	00db      	lsls	r3, r3, #3
 8007a78:	4413      	add	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	440b      	add	r3, r1
 8007a7e:	3318      	adds	r3, #24
 8007a80:	2200      	movs	r2, #0
 8007a82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007a84:	7bfa      	ldrb	r2, [r7, #15]
 8007a86:	6879      	ldr	r1, [r7, #4]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	00db      	lsls	r3, r3, #3
 8007a8c:	4413      	add	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	440b      	add	r3, r1
 8007a92:	331c      	adds	r3, #28
 8007a94:	2200      	movs	r2, #0
 8007a96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007a98:	7bfa      	ldrb	r2, [r7, #15]
 8007a9a:	6879      	ldr	r1, [r7, #4]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	00db      	lsls	r3, r3, #3
 8007aa0:	4413      	add	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	440b      	add	r3, r1
 8007aa6:	3320      	adds	r3, #32
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007aac:	7bfa      	ldrb	r2, [r7, #15]
 8007aae:	6879      	ldr	r1, [r7, #4]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	4413      	add	r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	440b      	add	r3, r1
 8007aba:	3324      	adds	r3, #36	@ 0x24
 8007abc:	2200      	movs	r2, #0
 8007abe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	73fb      	strb	r3, [r7, #15]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	791b      	ldrb	r3, [r3, #4]
 8007aca:	7bfa      	ldrb	r2, [r7, #15]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d3af      	bcc.n	8007a30 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	73fb      	strb	r3, [r7, #15]
 8007ad4:	e044      	b.n	8007b60 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007ad6:	7bfa      	ldrb	r2, [r7, #15]
 8007ad8:	6879      	ldr	r1, [r7, #4]
 8007ada:	4613      	mov	r3, r2
 8007adc:	00db      	lsls	r3, r3, #3
 8007ade:	4413      	add	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	440b      	add	r3, r1
 8007ae4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007ae8:	2200      	movs	r2, #0
 8007aea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007aec:	7bfa      	ldrb	r2, [r7, #15]
 8007aee:	6879      	ldr	r1, [r7, #4]
 8007af0:	4613      	mov	r3, r2
 8007af2:	00db      	lsls	r3, r3, #3
 8007af4:	4413      	add	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	440b      	add	r3, r1
 8007afa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007afe:	7bfa      	ldrb	r2, [r7, #15]
 8007b00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007b02:	7bfa      	ldrb	r2, [r7, #15]
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	4613      	mov	r3, r2
 8007b08:	00db      	lsls	r3, r3, #3
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	440b      	add	r3, r1
 8007b10:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007b14:	2200      	movs	r2, #0
 8007b16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007b18:	7bfa      	ldrb	r2, [r7, #15]
 8007b1a:	6879      	ldr	r1, [r7, #4]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	00db      	lsls	r3, r3, #3
 8007b20:	4413      	add	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	440b      	add	r3, r1
 8007b26:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007b2e:	7bfa      	ldrb	r2, [r7, #15]
 8007b30:	6879      	ldr	r1, [r7, #4]
 8007b32:	4613      	mov	r3, r2
 8007b34:	00db      	lsls	r3, r3, #3
 8007b36:	4413      	add	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	440b      	add	r3, r1
 8007b3c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007b40:	2200      	movs	r2, #0
 8007b42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007b44:	7bfa      	ldrb	r2, [r7, #15]
 8007b46:	6879      	ldr	r1, [r7, #4]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	00db      	lsls	r3, r3, #3
 8007b4c:	4413      	add	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	440b      	add	r3, r1
 8007b52:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007b56:	2200      	movs	r2, #0
 8007b58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b5a:	7bfb      	ldrb	r3, [r7, #15]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	73fb      	strb	r3, [r7, #15]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	791b      	ldrb	r3, [r3, #4]
 8007b64:	7bfa      	ldrb	r2, [r7, #15]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d3b5      	bcc.n	8007ad6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6818      	ldr	r0, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	7c1a      	ldrb	r2, [r3, #16]
 8007b72:	f88d 2000 	strb.w	r2, [sp]
 8007b76:	3304      	adds	r3, #4
 8007b78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b7a:	f008 fa59 	bl	8010030 <USB_DevInit>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d005      	beq.n	8007b90 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2202      	movs	r2, #2
 8007b88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e013      	b.n	8007bb8 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	7b1b      	ldrb	r3, [r3, #12]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d102      	bne.n	8007bac <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f001 f96e 	bl	8008e88 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f009 fa9c 	bl	80110ee <USB_DevDisconnect>

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d101      	bne.n	8007bdc <HAL_PCD_Start+0x1c>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	e022      	b.n	8007c22 <HAL_PCD_Start+0x62>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d009      	beq.n	8007c04 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d105      	bne.n	8007c04 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bfc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f008 f9a3 	bl	800ff54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f009 fa4a 	bl	80110ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007c2a:	b590      	push	{r4, r7, lr}
 8007c2c:	b08d      	sub	sp, #52	@ 0x34
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c38:	6a3b      	ldr	r3, [r7, #32]
 8007c3a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f009 fb08 	bl	8011256 <USB_GetMode>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f040 84b9 	bne.w	80085c0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f009 fa6c 	bl	8011130 <USB_ReadInterrupts>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 84af 	beq.w	80085be <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	0a1b      	lsrs	r3, r3, #8
 8007c6a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f009 fa59 	bl	8011130 <USB_ReadInterrupts>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d107      	bne.n	8007c98 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	695a      	ldr	r2, [r3, #20]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f002 0202 	and.w	r2, r2, #2
 8007c96:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f009 fa47 	bl	8011130 <USB_ReadInterrupts>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	f003 0310 	and.w	r3, r3, #16
 8007ca8:	2b10      	cmp	r3, #16
 8007caa:	d161      	bne.n	8007d70 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	699a      	ldr	r2, [r3, #24]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 0210 	bic.w	r2, r2, #16
 8007cba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	6a1b      	ldr	r3, [r3, #32]
 8007cc0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	f003 020f 	and.w	r2, r3, #15
 8007cc8:	4613      	mov	r3, r2
 8007cca:	00db      	lsls	r3, r3, #3
 8007ccc:	4413      	add	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	3304      	adds	r3, #4
 8007cda:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007ce2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ce6:	d124      	bne.n	8007d32 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007cee:	4013      	ands	r3, r2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d035      	beq.n	8007d60 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	091b      	lsrs	r3, r3, #4
 8007cfc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007cfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	461a      	mov	r2, r3
 8007d06:	6a38      	ldr	r0, [r7, #32]
 8007d08:	f009 f87e 	bl	8010e08 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	68da      	ldr	r2, [r3, #12]
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	091b      	lsrs	r3, r3, #4
 8007d14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d18:	441a      	add	r2, r3
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	695a      	ldr	r2, [r3, #20]
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	091b      	lsrs	r3, r3, #4
 8007d26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d2a:	441a      	add	r2, r3
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	615a      	str	r2, [r3, #20]
 8007d30:	e016      	b.n	8007d60 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007d38:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007d3c:	d110      	bne.n	8007d60 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007d44:	2208      	movs	r2, #8
 8007d46:	4619      	mov	r1, r3
 8007d48:	6a38      	ldr	r0, [r7, #32]
 8007d4a:	f009 f85d 	bl	8010e08 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	695a      	ldr	r2, [r3, #20]
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	091b      	lsrs	r3, r3, #4
 8007d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d5a:	441a      	add	r2, r3
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	699a      	ldr	r2, [r3, #24]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f042 0210 	orr.w	r2, r2, #16
 8007d6e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4618      	mov	r0, r3
 8007d76:	f009 f9db 	bl	8011130 <USB_ReadInterrupts>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007d80:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007d84:	f040 80a7 	bne.w	8007ed6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f009 f9e0 	bl	8011156 <USB_ReadDevAllOutEpInterrupt>
 8007d96:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007d98:	e099      	b.n	8007ece <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9c:	f003 0301 	and.w	r3, r3, #1
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 808e 	beq.w	8007ec2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dac:	b2d2      	uxtb	r2, r2
 8007dae:	4611      	mov	r1, r2
 8007db0:	4618      	mov	r0, r3
 8007db2:	f009 fa04 	bl	80111be <USB_ReadDevOutEPInterrupt>
 8007db6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00c      	beq.n	8007ddc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc4:	015a      	lsls	r2, r3, #5
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	4413      	add	r3, r2
 8007dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dce:	461a      	mov	r2, r3
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007dd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fed0 	bl	8008b7c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	f003 0308 	and.w	r3, r3, #8
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00c      	beq.n	8007e00 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de8:	015a      	lsls	r2, r3, #5
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	4413      	add	r3, r2
 8007dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007df2:	461a      	mov	r2, r3
 8007df4:	2308      	movs	r3, #8
 8007df6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007df8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 ffa6 	bl	8008d4c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	f003 0310 	and.w	r3, r3, #16
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d008      	beq.n	8007e1c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0c:	015a      	lsls	r2, r3, #5
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	4413      	add	r3, r2
 8007e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e16:	461a      	mov	r2, r3
 8007e18:	2310      	movs	r3, #16
 8007e1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d030      	beq.n	8007e88 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007e26:	6a3b      	ldr	r3, [r7, #32]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e2e:	2b80      	cmp	r3, #128	@ 0x80
 8007e30:	d109      	bne.n	8007e46 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	69fa      	ldr	r2, [r7, #28]
 8007e3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007e44:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e48:	4613      	mov	r3, r2
 8007e4a:	00db      	lsls	r3, r3, #3
 8007e4c:	4413      	add	r3, r2
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	4413      	add	r3, r2
 8007e58:	3304      	adds	r3, #4
 8007e5a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	78db      	ldrb	r3, [r3, #3]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d108      	bne.n	8007e76 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	2200      	movs	r2, #0
 8007e68:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f00b fdff 	bl	8013a74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e78:	015a      	lsls	r2, r3, #5
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e82:	461a      	mov	r2, r3
 8007e84:	2302      	movs	r3, #2
 8007e86:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	f003 0320 	and.w	r3, r3, #32
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d008      	beq.n	8007ea4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e94:	015a      	lsls	r2, r3, #5
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	2320      	movs	r3, #32
 8007ea2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d009      	beq.n	8007ec2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb0:	015a      	lsls	r2, r3, #5
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eba:	461a      	mov	r2, r3
 8007ebc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007ec0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eca:	085b      	lsrs	r3, r3, #1
 8007ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f47f af62 	bne.w	8007d9a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f009 f928 	bl	8011130 <USB_ReadInterrupts>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ee6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007eea:	f040 80db 	bne.w	80080a4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f009 f949 	bl	801118a <USB_ReadDevAllInEpInterrupt>
 8007ef8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007efe:	e0cd      	b.n	800809c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 80c2 	beq.w	8008090 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f12:	b2d2      	uxtb	r2, r2
 8007f14:	4611      	mov	r1, r2
 8007f16:	4618      	mov	r0, r3
 8007f18:	f009 f96f 	bl	80111fa <USB_ReadDevInEPInterrupt>
 8007f1c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f003 0301 	and.w	r3, r3, #1
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d057      	beq.n	8007fd8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2a:	f003 030f 	and.w	r3, r3, #15
 8007f2e:	2201      	movs	r2, #1
 8007f30:	fa02 f303 	lsl.w	r3, r2, r3
 8007f34:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	43db      	mvns	r3, r3
 8007f42:	69f9      	ldr	r1, [r7, #28]
 8007f44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f48:	4013      	ands	r3, r2
 8007f4a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f58:	461a      	mov	r2, r3
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	799b      	ldrb	r3, [r3, #6]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d132      	bne.n	8007fcc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007f66:	6879      	ldr	r1, [r7, #4]
 8007f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	00db      	lsls	r3, r3, #3
 8007f6e:	4413      	add	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	440b      	add	r3, r1
 8007f74:	3320      	adds	r3, #32
 8007f76:	6819      	ldr	r1, [r3, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	00db      	lsls	r3, r3, #3
 8007f80:	4413      	add	r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4403      	add	r3, r0
 8007f86:	331c      	adds	r3, #28
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4419      	add	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f90:	4613      	mov	r3, r2
 8007f92:	00db      	lsls	r3, r3, #3
 8007f94:	4413      	add	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4403      	add	r3, r0
 8007f9a:	3320      	adds	r3, #32
 8007f9c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d113      	bne.n	8007fcc <HAL_PCD_IRQHandler+0x3a2>
 8007fa4:	6879      	ldr	r1, [r7, #4]
 8007fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fa8:	4613      	mov	r3, r2
 8007faa:	00db      	lsls	r3, r3, #3
 8007fac:	4413      	add	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	440b      	add	r3, r1
 8007fb2:	3324      	adds	r3, #36	@ 0x24
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d108      	bne.n	8007fcc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6818      	ldr	r0, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	f009 f978 	bl	80112bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f00b fcc9 	bl	801396a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	f003 0308 	and.w	r3, r3, #8
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d008      	beq.n	8007ff4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe4:	015a      	lsls	r2, r3, #5
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	4413      	add	r3, r2
 8007fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fee:	461a      	mov	r2, r3
 8007ff0:	2308      	movs	r3, #8
 8007ff2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	f003 0310 	and.w	r3, r3, #16
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d008      	beq.n	8008010 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	4413      	add	r3, r2
 8008006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800800a:	461a      	mov	r2, r3
 800800c:	2310      	movs	r3, #16
 800800e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008016:	2b00      	cmp	r3, #0
 8008018:	d008      	beq.n	800802c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800801a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	4413      	add	r3, r2
 8008022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008026:	461a      	mov	r2, r3
 8008028:	2340      	movs	r3, #64	@ 0x40
 800802a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	f003 0302 	and.w	r3, r3, #2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d023      	beq.n	800807e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008036:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008038:	6a38      	ldr	r0, [r7, #32]
 800803a:	f008 f957 	bl	80102ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800803e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008040:	4613      	mov	r3, r2
 8008042:	00db      	lsls	r3, r3, #3
 8008044:	4413      	add	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	3310      	adds	r3, #16
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	4413      	add	r3, r2
 800804e:	3304      	adds	r3, #4
 8008050:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	78db      	ldrb	r3, [r3, #3]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d108      	bne.n	800806c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	2200      	movs	r2, #0
 800805e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008062:	b2db      	uxtb	r3, r3
 8008064:	4619      	mov	r1, r3
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f00b fd16 	bl	8013a98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800806c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806e:	015a      	lsls	r2, r3, #5
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	4413      	add	r3, r2
 8008074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008078:	461a      	mov	r2, r3
 800807a:	2302      	movs	r3, #2
 800807c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008084:	2b00      	cmp	r3, #0
 8008086:	d003      	beq.n	8008090 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008088:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fcea 	bl	8008a64 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008092:	3301      	adds	r3, #1
 8008094:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008098:	085b      	lsrs	r3, r3, #1
 800809a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800809c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f47f af2e 	bne.w	8007f00 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f009 f841 	bl	8011130 <USB_ReadInterrupts>
 80080ae:	4603      	mov	r3, r0
 80080b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080b8:	d122      	bne.n	8008100 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	69fa      	ldr	r2, [r7, #28]
 80080c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080c8:	f023 0301 	bic.w	r3, r3, #1
 80080cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d108      	bne.n	80080ea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80080e0:	2100      	movs	r1, #0
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fef4 	bl	8008ed0 <HAL_PCDEx_LPM_Callback>
 80080e8:	e002      	b.n	80080f0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f00b fcb4 	bl	8013a58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	695a      	ldr	r2, [r3, #20]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80080fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4618      	mov	r0, r3
 8008106:	f009 f813 	bl	8011130 <USB_ReadInterrupts>
 800810a:	4603      	mov	r3, r0
 800810c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008110:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008114:	d112      	bne.n	800813c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	2b01      	cmp	r3, #1
 8008124:	d102      	bne.n	800812c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f00b fc70 	bl	8013a0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	695a      	ldr	r2, [r3, #20]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800813a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4618      	mov	r0, r3
 8008142:	f008 fff5 	bl	8011130 <USB_ReadInterrupts>
 8008146:	4603      	mov	r3, r0
 8008148:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800814c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008150:	d121      	bne.n	8008196 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	695a      	ldr	r2, [r3, #20]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8008160:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8008168:	2b00      	cmp	r3, #0
 800816a:	d111      	bne.n	8008190 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800817a:	089b      	lsrs	r3, r3, #2
 800817c:	f003 020f 	and.w	r2, r3, #15
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008186:	2101      	movs	r1, #1
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fea1 	bl	8008ed0 <HAL_PCDEx_LPM_Callback>
 800818e:	e002      	b.n	8008196 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f00b fc3b 	bl	8013a0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4618      	mov	r0, r3
 800819c:	f008 ffc8 	bl	8011130 <USB_ReadInterrupts>
 80081a0:	4603      	mov	r3, r0
 80081a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80081a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081aa:	f040 80b7 	bne.w	800831c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	69fa      	ldr	r2, [r7, #28]
 80081b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081bc:	f023 0301 	bic.w	r3, r3, #1
 80081c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2110      	movs	r1, #16
 80081c8:	4618      	mov	r0, r3
 80081ca:	f008 f88f 	bl	80102ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081ce:	2300      	movs	r3, #0
 80081d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081d2:	e046      	b.n	8008262 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80081d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d6:	015a      	lsls	r2, r3, #5
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	4413      	add	r3, r2
 80081dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081e0:	461a      	mov	r2, r3
 80081e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80081e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80081e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081f8:	0151      	lsls	r1, r2, #5
 80081fa:	69fa      	ldr	r2, [r7, #28]
 80081fc:	440a      	add	r2, r1
 80081fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008202:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008206:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800820a:	015a      	lsls	r2, r3, #5
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	4413      	add	r3, r2
 8008210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008214:	461a      	mov	r2, r3
 8008216:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800821a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800821c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	4413      	add	r3, r2
 8008224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800822c:	0151      	lsls	r1, r2, #5
 800822e:	69fa      	ldr	r2, [r7, #28]
 8008230:	440a      	add	r2, r1
 8008232:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008236:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800823a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800823c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	4413      	add	r3, r2
 8008244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800824c:	0151      	lsls	r1, r2, #5
 800824e:	69fa      	ldr	r2, [r7, #28]
 8008250:	440a      	add	r2, r1
 8008252:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008256:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800825a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800825c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800825e:	3301      	adds	r3, #1
 8008260:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	791b      	ldrb	r3, [r3, #4]
 8008266:	461a      	mov	r2, r3
 8008268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800826a:	4293      	cmp	r3, r2
 800826c:	d3b2      	bcc.n	80081d4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	69fa      	ldr	r2, [r7, #28]
 8008278:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800827c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8008280:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	7bdb      	ldrb	r3, [r3, #15]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d016      	beq.n	80082b8 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008290:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008294:	69fa      	ldr	r2, [r7, #28]
 8008296:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800829a:	f043 030b 	orr.w	r3, r3, #11
 800829e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082aa:	69fa      	ldr	r2, [r7, #28]
 80082ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082b0:	f043 030b 	orr.w	r3, r3, #11
 80082b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80082b6:	e015      	b.n	80082e4 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082be:	695a      	ldr	r2, [r3, #20]
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082c6:	4619      	mov	r1, r3
 80082c8:	f242 032b 	movw	r3, #8235	@ 0x202b
 80082cc:	4313      	orrs	r3, r2
 80082ce:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	69fa      	ldr	r2, [r7, #28]
 80082da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082de:	f043 030b 	orr.w	r3, r3, #11
 80082e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	69fa      	ldr	r2, [r7, #28]
 80082ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80082f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6818      	ldr	r0, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008306:	461a      	mov	r2, r3
 8008308:	f008 ffd8 	bl	80112bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	695a      	ldr	r2, [r3, #20]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800831a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4618      	mov	r0, r3
 8008322:	f008 ff05 	bl	8011130 <USB_ReadInterrupts>
 8008326:	4603      	mov	r3, r0
 8008328:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800832c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008330:	d123      	bne.n	800837a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4618      	mov	r0, r3
 8008338:	f008 ff9c 	bl	8011274 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4618      	mov	r0, r3
 8008342:	f008 f84c 	bl	80103de <USB_GetDevSpeed>
 8008346:	4603      	mov	r3, r0
 8008348:	461a      	mov	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681c      	ldr	r4, [r3, #0]
 8008352:	f001 fd1d 	bl	8009d90 <HAL_RCC_GetHCLKFreq>
 8008356:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800835c:	461a      	mov	r2, r3
 800835e:	4620      	mov	r0, r4
 8008360:	f007 fd56 	bl	800fe10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f00b fb28 	bl	80139ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	695a      	ldr	r2, [r3, #20]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8008378:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4618      	mov	r0, r3
 8008380:	f008 fed6 	bl	8011130 <USB_ReadInterrupts>
 8008384:	4603      	mov	r3, r0
 8008386:	f003 0308 	and.w	r3, r3, #8
 800838a:	2b08      	cmp	r3, #8
 800838c:	d10a      	bne.n	80083a4 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f00b fb05 	bl	801399e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	695a      	ldr	r2, [r3, #20]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f002 0208 	and.w	r2, r2, #8
 80083a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f008 fec1 	bl	8011130 <USB_ReadInterrupts>
 80083ae:	4603      	mov	r3, r0
 80083b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083b4:	2b80      	cmp	r3, #128	@ 0x80
 80083b6:	d123      	bne.n	8008400 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80083b8:	6a3b      	ldr	r3, [r7, #32]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80083c0:	6a3b      	ldr	r3, [r7, #32]
 80083c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80083c4:	2301      	movs	r3, #1
 80083c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80083c8:	e014      	b.n	80083f4 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80083ca:	6879      	ldr	r1, [r7, #4]
 80083cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083ce:	4613      	mov	r3, r2
 80083d0:	00db      	lsls	r3, r3, #3
 80083d2:	4413      	add	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	440b      	add	r3, r1
 80083d8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d105      	bne.n	80083ee <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80083e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	4619      	mov	r1, r3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fb0a 	bl	8008a02 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80083ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f0:	3301      	adds	r3, #1
 80083f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	791b      	ldrb	r3, [r3, #4]
 80083f8:	461a      	mov	r2, r3
 80083fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d3e4      	bcc.n	80083ca <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4618      	mov	r0, r3
 8008406:	f008 fe93 	bl	8011130 <USB_ReadInterrupts>
 800840a:	4603      	mov	r3, r0
 800840c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008410:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008414:	d13c      	bne.n	8008490 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008416:	2301      	movs	r3, #1
 8008418:	627b      	str	r3, [r7, #36]	@ 0x24
 800841a:	e02b      	b.n	8008474 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800841c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800841e:	015a      	lsls	r2, r3, #5
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	4413      	add	r3, r2
 8008424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800842c:	6879      	ldr	r1, [r7, #4]
 800842e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008430:	4613      	mov	r3, r2
 8008432:	00db      	lsls	r3, r3, #3
 8008434:	4413      	add	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	440b      	add	r3, r1
 800843a:	3318      	adds	r3, #24
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d115      	bne.n	800846e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008442:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008444:	2b00      	cmp	r3, #0
 8008446:	da12      	bge.n	800846e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008448:	6879      	ldr	r1, [r7, #4]
 800844a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800844c:	4613      	mov	r3, r2
 800844e:	00db      	lsls	r3, r3, #3
 8008450:	4413      	add	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	440b      	add	r3, r1
 8008456:	3317      	adds	r3, #23
 8008458:	2201      	movs	r2, #1
 800845a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800845c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845e:	b2db      	uxtb	r3, r3
 8008460:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008464:	b2db      	uxtb	r3, r3
 8008466:	4619      	mov	r1, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 faca 	bl	8008a02 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800846e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008470:	3301      	adds	r3, #1
 8008472:	627b      	str	r3, [r7, #36]	@ 0x24
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	791b      	ldrb	r3, [r3, #4]
 8008478:	461a      	mov	r2, r3
 800847a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847c:	4293      	cmp	r3, r2
 800847e:	d3cd      	bcc.n	800841c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	695a      	ldr	r2, [r3, #20]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800848e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4618      	mov	r0, r3
 8008496:	f008 fe4b 	bl	8011130 <USB_ReadInterrupts>
 800849a:	4603      	mov	r3, r0
 800849c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80084a4:	d156      	bne.n	8008554 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80084a6:	2301      	movs	r3, #1
 80084a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80084aa:	e045      	b.n	8008538 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80084ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ae:	015a      	lsls	r2, r3, #5
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	4413      	add	r3, r2
 80084b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80084bc:	6879      	ldr	r1, [r7, #4]
 80084be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084c0:	4613      	mov	r3, r2
 80084c2:	00db      	lsls	r3, r3, #3
 80084c4:	4413      	add	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	440b      	add	r3, r1
 80084ca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d12e      	bne.n	8008532 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80084d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	da2b      	bge.n	8008532 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	0c1a      	lsrs	r2, r3, #16
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80084e4:	4053      	eors	r3, r2
 80084e6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d121      	bne.n	8008532 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80084ee:	6879      	ldr	r1, [r7, #4]
 80084f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084f2:	4613      	mov	r3, r2
 80084f4:	00db      	lsls	r3, r3, #3
 80084f6:	4413      	add	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	440b      	add	r3, r1
 80084fc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008500:	2201      	movs	r2, #1
 8008502:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008504:	6a3b      	ldr	r3, [r7, #32]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800850c:	6a3b      	ldr	r3, [r7, #32]
 800850e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008510:	6a3b      	ldr	r3, [r7, #32]
 8008512:	695b      	ldr	r3, [r3, #20]
 8008514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10a      	bne.n	8008532 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	69fa      	ldr	r2, [r7, #28]
 8008526:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800852a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800852e:	6053      	str	r3, [r2, #4]
            break;
 8008530:	e008      	b.n	8008544 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008534:	3301      	adds	r3, #1
 8008536:	627b      	str	r3, [r7, #36]	@ 0x24
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	791b      	ldrb	r3, [r3, #4]
 800853c:	461a      	mov	r2, r3
 800853e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008540:	4293      	cmp	r3, r2
 8008542:	d3b3      	bcc.n	80084ac <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	695a      	ldr	r2, [r3, #20]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8008552:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4618      	mov	r0, r3
 800855a:	f008 fde9 	bl	8011130 <USB_ReadInterrupts>
 800855e:	4603      	mov	r3, r0
 8008560:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008568:	d10a      	bne.n	8008580 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f00b faa6 	bl	8013abc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	695a      	ldr	r2, [r3, #20]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800857e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	f008 fdd3 	bl	8011130 <USB_ReadInterrupts>
 800858a:	4603      	mov	r3, r0
 800858c:	f003 0304 	and.w	r3, r3, #4
 8008590:	2b04      	cmp	r3, #4
 8008592:	d115      	bne.n	80085c0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	f003 0304 	and.w	r3, r3, #4
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d002      	beq.n	80085ac <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f00b fa96 	bl	8013ad8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6859      	ldr	r1, [r3, #4]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	69ba      	ldr	r2, [r7, #24]
 80085b8:	430a      	orrs	r2, r1
 80085ba:	605a      	str	r2, [r3, #4]
 80085bc:	e000      	b.n	80085c0 <HAL_PCD_IRQHandler+0x996>
      return;
 80085be:	bf00      	nop
    }
  }
}
 80085c0:	3734      	adds	r7, #52	@ 0x34
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd90      	pop	{r4, r7, pc}

080085c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b082      	sub	sp, #8
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	460b      	mov	r3, r1
 80085d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d101      	bne.n	80085e0 <HAL_PCD_SetAddress+0x1a>
 80085dc:	2302      	movs	r3, #2
 80085de:	e012      	b.n	8008606 <HAL_PCD_SetAddress+0x40>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	78fa      	ldrb	r2, [r7, #3]
 80085ec:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	78fa      	ldrb	r2, [r7, #3]
 80085f4:	4611      	mov	r1, r2
 80085f6:	4618      	mov	r0, r3
 80085f8:	f008 fd32 	bl	8011060 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b084      	sub	sp, #16
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	4608      	mov	r0, r1
 8008618:	4611      	mov	r1, r2
 800861a:	461a      	mov	r2, r3
 800861c:	4603      	mov	r3, r0
 800861e:	70fb      	strb	r3, [r7, #3]
 8008620:	460b      	mov	r3, r1
 8008622:	803b      	strh	r3, [r7, #0]
 8008624:	4613      	mov	r3, r2
 8008626:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800862c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008630:	2b00      	cmp	r3, #0
 8008632:	da0f      	bge.n	8008654 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008634:	78fb      	ldrb	r3, [r7, #3]
 8008636:	f003 020f 	and.w	r2, r3, #15
 800863a:	4613      	mov	r3, r2
 800863c:	00db      	lsls	r3, r3, #3
 800863e:	4413      	add	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	3310      	adds	r3, #16
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	4413      	add	r3, r2
 8008648:	3304      	adds	r3, #4
 800864a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2201      	movs	r2, #1
 8008650:	705a      	strb	r2, [r3, #1]
 8008652:	e00f      	b.n	8008674 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008654:	78fb      	ldrb	r3, [r7, #3]
 8008656:	f003 020f 	and.w	r2, r3, #15
 800865a:	4613      	mov	r3, r2
 800865c:	00db      	lsls	r3, r3, #3
 800865e:	4413      	add	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	4413      	add	r3, r2
 800866a:	3304      	adds	r3, #4
 800866c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	f003 030f 	and.w	r3, r3, #15
 800867a:	b2da      	uxtb	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8008680:	883b      	ldrh	r3, [r7, #0]
 8008682:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	78ba      	ldrb	r2, [r7, #2]
 800868e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	785b      	ldrb	r3, [r3, #1]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d004      	beq.n	80086a2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	461a      	mov	r2, r3
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80086a2:	78bb      	ldrb	r3, [r7, #2]
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d102      	bne.n	80086ae <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2200      	movs	r2, #0
 80086ac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d101      	bne.n	80086bc <HAL_PCD_EP_Open+0xae>
 80086b8:	2302      	movs	r3, #2
 80086ba:	e00e      	b.n	80086da <HAL_PCD_EP_Open+0xcc>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68f9      	ldr	r1, [r7, #12]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f007 feac 	bl	8010428 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80086d8:	7afb      	ldrb	r3, [r7, #11]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	460b      	mov	r3, r1
 80086ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80086ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	da0f      	bge.n	8008716 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80086f6:	78fb      	ldrb	r3, [r7, #3]
 80086f8:	f003 020f 	and.w	r2, r3, #15
 80086fc:	4613      	mov	r3, r2
 80086fe:	00db      	lsls	r3, r3, #3
 8008700:	4413      	add	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	3310      	adds	r3, #16
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	4413      	add	r3, r2
 800870a:	3304      	adds	r3, #4
 800870c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2201      	movs	r2, #1
 8008712:	705a      	strb	r2, [r3, #1]
 8008714:	e00f      	b.n	8008736 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008716:	78fb      	ldrb	r3, [r7, #3]
 8008718:	f003 020f 	and.w	r2, r3, #15
 800871c:	4613      	mov	r3, r2
 800871e:	00db      	lsls	r3, r3, #3
 8008720:	4413      	add	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	4413      	add	r3, r2
 800872c:	3304      	adds	r3, #4
 800872e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008736:	78fb      	ldrb	r3, [r7, #3]
 8008738:	f003 030f 	and.w	r3, r3, #15
 800873c:	b2da      	uxtb	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008748:	2b01      	cmp	r3, #1
 800874a:	d101      	bne.n	8008750 <HAL_PCD_EP_Close+0x6e>
 800874c:	2302      	movs	r3, #2
 800874e:	e00e      	b.n	800876e <HAL_PCD_EP_Close+0x8c>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68f9      	ldr	r1, [r7, #12]
 800875e:	4618      	mov	r0, r3
 8008760:	f007 feea 	bl	8010538 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b086      	sub	sp, #24
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	607a      	str	r2, [r7, #4]
 8008780:	603b      	str	r3, [r7, #0]
 8008782:	460b      	mov	r3, r1
 8008784:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008786:	7afb      	ldrb	r3, [r7, #11]
 8008788:	f003 020f 	and.w	r2, r3, #15
 800878c:	4613      	mov	r3, r2
 800878e:	00db      	lsls	r3, r3, #3
 8008790:	4413      	add	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	4413      	add	r3, r2
 800879c:	3304      	adds	r3, #4
 800879e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	683a      	ldr	r2, [r7, #0]
 80087aa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	2200      	movs	r2, #0
 80087b0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	2200      	movs	r2, #0
 80087b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80087b8:	7afb      	ldrb	r3, [r7, #11]
 80087ba:	f003 030f 	and.w	r3, r3, #15
 80087be:	b2da      	uxtb	r2, r3
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	799b      	ldrb	r3, [r3, #6]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d102      	bne.n	80087d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6818      	ldr	r0, [r3, #0]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	799b      	ldrb	r3, [r3, #6]
 80087da:	461a      	mov	r2, r3
 80087dc:	6979      	ldr	r1, [r7, #20]
 80087de:	f007 ff87 	bl	80106f0 <USB_EPStartXfer>

  return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3718      	adds	r7, #24
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	460b      	mov	r3, r1
 80087f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80087f8:	78fb      	ldrb	r3, [r7, #3]
 80087fa:	f003 020f 	and.w	r2, r3, #15
 80087fe:	6879      	ldr	r1, [r7, #4]
 8008800:	4613      	mov	r3, r2
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	4413      	add	r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	440b      	add	r3, r1
 800880a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800880e:	681b      	ldr	r3, [r3, #0]
}
 8008810:	4618      	mov	r0, r3
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b086      	sub	sp, #24
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	607a      	str	r2, [r7, #4]
 8008826:	603b      	str	r3, [r7, #0]
 8008828:	460b      	mov	r3, r1
 800882a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800882c:	7afb      	ldrb	r3, [r7, #11]
 800882e:	f003 020f 	and.w	r2, r3, #15
 8008832:	4613      	mov	r3, r2
 8008834:	00db      	lsls	r3, r3, #3
 8008836:	4413      	add	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	3310      	adds	r3, #16
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	4413      	add	r3, r2
 8008840:	3304      	adds	r3, #4
 8008842:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	683a      	ldr	r2, [r7, #0]
 800884e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	2200      	movs	r2, #0
 8008854:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	2201      	movs	r2, #1
 800885a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800885c:	7afb      	ldrb	r3, [r7, #11]
 800885e:	f003 030f 	and.w	r3, r3, #15
 8008862:	b2da      	uxtb	r2, r3
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	799b      	ldrb	r3, [r3, #6]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d102      	bne.n	8008876 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	6818      	ldr	r0, [r3, #0]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	799b      	ldrb	r3, [r3, #6]
 800887e:	461a      	mov	r2, r3
 8008880:	6979      	ldr	r1, [r7, #20]
 8008882:	f007 ff35 	bl	80106f0 <USB_EPStartXfer>

  return HAL_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3718      	adds	r7, #24
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800889c:	78fb      	ldrb	r3, [r7, #3]
 800889e:	f003 030f 	and.w	r3, r3, #15
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	7912      	ldrb	r2, [r2, #4]
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d901      	bls.n	80088ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e04f      	b.n	800894e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80088ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	da0f      	bge.n	80088d6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80088b6:	78fb      	ldrb	r3, [r7, #3]
 80088b8:	f003 020f 	and.w	r2, r3, #15
 80088bc:	4613      	mov	r3, r2
 80088be:	00db      	lsls	r3, r3, #3
 80088c0:	4413      	add	r3, r2
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	3310      	adds	r3, #16
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	4413      	add	r3, r2
 80088ca:	3304      	adds	r3, #4
 80088cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2201      	movs	r2, #1
 80088d2:	705a      	strb	r2, [r3, #1]
 80088d4:	e00d      	b.n	80088f2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80088d6:	78fa      	ldrb	r2, [r7, #3]
 80088d8:	4613      	mov	r3, r2
 80088da:	00db      	lsls	r3, r3, #3
 80088dc:	4413      	add	r3, r2
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	4413      	add	r3, r2
 80088e8:	3304      	adds	r3, #4
 80088ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2201      	movs	r2, #1
 80088f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80088f8:	78fb      	ldrb	r3, [r7, #3]
 80088fa:	f003 030f 	and.w	r3, r3, #15
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800890a:	2b01      	cmp	r3, #1
 800890c:	d101      	bne.n	8008912 <HAL_PCD_EP_SetStall+0x82>
 800890e:	2302      	movs	r3, #2
 8008910:	e01d      	b.n	800894e <HAL_PCD_EP_SetStall+0xbe>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68f9      	ldr	r1, [r7, #12]
 8008920:	4618      	mov	r0, r3
 8008922:	f008 fac9 	bl	8010eb8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008926:	78fb      	ldrb	r3, [r7, #3]
 8008928:	f003 030f 	and.w	r3, r3, #15
 800892c:	2b00      	cmp	r3, #0
 800892e:	d109      	bne.n	8008944 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6818      	ldr	r0, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	7999      	ldrb	r1, [r3, #6]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800893e:	461a      	mov	r2, r3
 8008940:	f008 fcbc 	bl	80112bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
 800895e:	460b      	mov	r3, r1
 8008960:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008962:	78fb      	ldrb	r3, [r7, #3]
 8008964:	f003 030f 	and.w	r3, r3, #15
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	7912      	ldrb	r2, [r2, #4]
 800896c:	4293      	cmp	r3, r2
 800896e:	d901      	bls.n	8008974 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	e042      	b.n	80089fa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008978:	2b00      	cmp	r3, #0
 800897a:	da0f      	bge.n	800899c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800897c:	78fb      	ldrb	r3, [r7, #3]
 800897e:	f003 020f 	and.w	r2, r3, #15
 8008982:	4613      	mov	r3, r2
 8008984:	00db      	lsls	r3, r3, #3
 8008986:	4413      	add	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	3310      	adds	r3, #16
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	4413      	add	r3, r2
 8008990:	3304      	adds	r3, #4
 8008992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2201      	movs	r2, #1
 8008998:	705a      	strb	r2, [r3, #1]
 800899a:	e00f      	b.n	80089bc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800899c:	78fb      	ldrb	r3, [r7, #3]
 800899e:	f003 020f 	and.w	r2, r3, #15
 80089a2:	4613      	mov	r3, r2
 80089a4:	00db      	lsls	r3, r3, #3
 80089a6:	4413      	add	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	4413      	add	r3, r2
 80089b2:	3304      	adds	r3, #4
 80089b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80089c2:	78fb      	ldrb	r3, [r7, #3]
 80089c4:	f003 030f 	and.w	r3, r3, #15
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d101      	bne.n	80089dc <HAL_PCD_EP_ClrStall+0x86>
 80089d8:	2302      	movs	r3, #2
 80089da:	e00e      	b.n	80089fa <HAL_PCD_EP_ClrStall+0xa4>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68f9      	ldr	r1, [r7, #12]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f008 fad2 	bl	8010f94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b084      	sub	sp, #16
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008a0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	da0c      	bge.n	8008a30 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a16:	78fb      	ldrb	r3, [r7, #3]
 8008a18:	f003 020f 	and.w	r2, r3, #15
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	00db      	lsls	r3, r3, #3
 8008a20:	4413      	add	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	3310      	adds	r3, #16
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	4413      	add	r3, r2
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	60fb      	str	r3, [r7, #12]
 8008a2e:	e00c      	b.n	8008a4a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008a30:	78fb      	ldrb	r3, [r7, #3]
 8008a32:	f003 020f 	and.w	r2, r3, #15
 8008a36:	4613      	mov	r3, r2
 8008a38:	00db      	lsls	r3, r3, #3
 8008a3a:	4413      	add	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	4413      	add	r3, r2
 8008a46:	3304      	adds	r3, #4
 8008a48:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68f9      	ldr	r1, [r7, #12]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f008 f8f1 	bl	8010c38 <USB_EPStopXfer>
 8008a56:	4603      	mov	r3, r0
 8008a58:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008a5a:	7afb      	ldrb	r3, [r7, #11]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08a      	sub	sp, #40	@ 0x28
 8008a68:	af02      	add	r7, sp, #8
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008a78:	683a      	ldr	r2, [r7, #0]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	00db      	lsls	r3, r3, #3
 8008a7e:	4413      	add	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	3310      	adds	r3, #16
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	4413      	add	r3, r2
 8008a88:	3304      	adds	r3, #4
 8008a8a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	695a      	ldr	r2, [r3, #20]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d901      	bls.n	8008a9c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e06b      	b.n	8008b74 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	691a      	ldr	r2, [r3, #16]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	695b      	ldr	r3, [r3, #20]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	69fa      	ldr	r2, [r7, #28]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d902      	bls.n	8008ab8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	3303      	adds	r3, #3
 8008abc:	089b      	lsrs	r3, r3, #2
 8008abe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008ac0:	e02a      	b.n	8008b18 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	691a      	ldr	r2, [r3, #16]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	69fa      	ldr	r2, [r7, #28]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d902      	bls.n	8008ade <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	3303      	adds	r3, #3
 8008ae2:	089b      	lsrs	r3, r3, #2
 8008ae4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	68d9      	ldr	r1, [r3, #12]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	4603      	mov	r3, r0
 8008afa:	6978      	ldr	r0, [r7, #20]
 8008afc:	f008 f946 	bl	8010d8c <USB_WritePacket>

    ep->xfer_buff  += len;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	68da      	ldr	r2, [r3, #12]
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	441a      	add	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	695a      	ldr	r2, [r3, #20]
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	441a      	add	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008b28:	69ba      	ldr	r2, [r7, #24]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d809      	bhi.n	8008b42 <PCD_WriteEmptyTxFifo+0xde>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	695a      	ldr	r2, [r3, #20]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d203      	bcs.n	8008b42 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1bf      	bne.n	8008ac2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	691a      	ldr	r2, [r3, #16]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d811      	bhi.n	8008b72 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	f003 030f 	and.w	r3, r3, #15
 8008b54:	2201      	movs	r2, #1
 8008b56:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	43db      	mvns	r3, r3
 8008b68:	6939      	ldr	r1, [r7, #16]
 8008b6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b6e:	4013      	ands	r3, r2
 8008b70:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3720      	adds	r7, #32
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b088      	sub	sp, #32
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	333c      	adds	r3, #60	@ 0x3c
 8008b94:	3304      	adds	r3, #4
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	015a      	lsls	r2, r3, #5
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	799b      	ldrb	r3, [r3, #6]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d17b      	bne.n	8008caa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	f003 0308 	and.w	r3, r3, #8
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d015      	beq.n	8008be8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	4a61      	ldr	r2, [pc, #388]	@ (8008d44 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	f240 80b9 	bls.w	8008d38 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 80b3 	beq.w	8008d38 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	015a      	lsls	r2, r3, #5
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	4413      	add	r3, r2
 8008bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bde:	461a      	mov	r2, r3
 8008be0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008be4:	6093      	str	r3, [r2, #8]
 8008be6:	e0a7      	b.n	8008d38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	f003 0320 	and.w	r3, r3, #32
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d009      	beq.n	8008c06 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	015a      	lsls	r2, r3, #5
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bfe:	461a      	mov	r2, r3
 8008c00:	2320      	movs	r3, #32
 8008c02:	6093      	str	r3, [r2, #8]
 8008c04:	e098      	b.n	8008d38 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f040 8093 	bne.w	8008d38 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	4a4b      	ldr	r2, [pc, #300]	@ (8008d44 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d90f      	bls.n	8008c3a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00a      	beq.n	8008c3a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	015a      	lsls	r2, r3, #5
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c30:	461a      	mov	r2, r3
 8008c32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c36:	6093      	str	r3, [r2, #8]
 8008c38:	e07e      	b.n	8008d38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	00db      	lsls	r3, r3, #3
 8008c40:	4413      	add	r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	3304      	adds	r3, #4
 8008c4e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6a1a      	ldr	r2, [r3, #32]
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	0159      	lsls	r1, r3, #5
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	440b      	add	r3, r1
 8008c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c66:	1ad2      	subs	r2, r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d114      	bne.n	8008c9c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d109      	bne.n	8008c8e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6818      	ldr	r0, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008c84:	461a      	mov	r2, r3
 8008c86:	2101      	movs	r1, #1
 8008c88:	f008 fb18 	bl	80112bc <USB_EP0_OutStart>
 8008c8c:	e006      	b.n	8008c9c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	68da      	ldr	r2, [r3, #12]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	441a      	add	r2, r3
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f00a fe46 	bl	8013934 <HAL_PCD_DataOutStageCallback>
 8008ca8:	e046      	b.n	8008d38 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	4a26      	ldr	r2, [pc, #152]	@ (8008d48 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d124      	bne.n	8008cfc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00a      	beq.n	8008cd2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	015a      	lsls	r2, r3, #5
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cc8:	461a      	mov	r2, r3
 8008cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cce:	6093      	str	r3, [r2, #8]
 8008cd0:	e032      	b.n	8008d38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	f003 0320 	and.w	r3, r3, #32
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d008      	beq.n	8008cee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	015a      	lsls	r2, r3, #5
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ce8:	461a      	mov	r2, r3
 8008cea:	2320      	movs	r3, #32
 8008cec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f00a fe1d 	bl	8013934 <HAL_PCD_DataOutStageCallback>
 8008cfa:	e01d      	b.n	8008d38 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d114      	bne.n	8008d2c <PCD_EP_OutXfrComplete_int+0x1b0>
 8008d02:	6879      	ldr	r1, [r7, #4]
 8008d04:	683a      	ldr	r2, [r7, #0]
 8008d06:	4613      	mov	r3, r2
 8008d08:	00db      	lsls	r3, r3, #3
 8008d0a:	4413      	add	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	440b      	add	r3, r1
 8008d10:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d108      	bne.n	8008d2c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6818      	ldr	r0, [r3, #0]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008d24:	461a      	mov	r2, r3
 8008d26:	2100      	movs	r1, #0
 8008d28:	f008 fac8 	bl	80112bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	4619      	mov	r1, r3
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f00a fdfe 	bl	8013934 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3720      	adds	r7, #32
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	4f54300a 	.word	0x4f54300a
 8008d48:	4f54310a 	.word	0x4f54310a

08008d4c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	333c      	adds	r3, #60	@ 0x3c
 8008d64:	3304      	adds	r3, #4
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	015a      	lsls	r2, r3, #5
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	4413      	add	r3, r2
 8008d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	4a15      	ldr	r2, [pc, #84]	@ (8008dd4 <PCD_EP_OutSetupPacket_int+0x88>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d90e      	bls.n	8008da0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d009      	beq.n	8008da0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	015a      	lsls	r2, r3, #5
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d98:	461a      	mov	r2, r3
 8008d9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d9e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f00a fdb5 	bl	8013910 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	4a0a      	ldr	r2, [pc, #40]	@ (8008dd4 <PCD_EP_OutSetupPacket_int+0x88>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d90c      	bls.n	8008dc8 <PCD_EP_OutSetupPacket_int+0x7c>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	799b      	ldrb	r3, [r3, #6]
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d108      	bne.n	8008dc8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6818      	ldr	r0, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	2101      	movs	r1, #1
 8008dc4:	f008 fa7a 	bl	80112bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3718      	adds	r7, #24
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	4f54300a 	.word	0x4f54300a

08008dd8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	460b      	mov	r3, r1
 8008de2:	70fb      	strb	r3, [r7, #3]
 8008de4:	4613      	mov	r3, r2
 8008de6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008df0:	78fb      	ldrb	r3, [r7, #3]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d107      	bne.n	8008e06 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008df6:	883b      	ldrh	r3, [r7, #0]
 8008df8:	0419      	lsls	r1, r3, #16
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	430a      	orrs	r2, r1
 8008e02:	629a      	str	r2, [r3, #40]	@ 0x28
 8008e04:	e028      	b.n	8008e58 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e0c:	0c1b      	lsrs	r3, r3, #16
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	4413      	add	r3, r2
 8008e12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008e14:	2300      	movs	r3, #0
 8008e16:	73fb      	strb	r3, [r7, #15]
 8008e18:	e00d      	b.n	8008e36 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
 8008e20:	3340      	adds	r3, #64	@ 0x40
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	4413      	add	r3, r2
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	0c1b      	lsrs	r3, r3, #16
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008e30:	7bfb      	ldrb	r3, [r7, #15]
 8008e32:	3301      	adds	r3, #1
 8008e34:	73fb      	strb	r3, [r7, #15]
 8008e36:	7bfa      	ldrb	r2, [r7, #15]
 8008e38:	78fb      	ldrb	r3, [r7, #3]
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d3ec      	bcc.n	8008e1a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008e40:	883b      	ldrh	r3, [r7, #0]
 8008e42:	0418      	lsls	r0, r3, #16
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6819      	ldr	r1, [r3, #0]
 8008e48:	78fb      	ldrb	r3, [r7, #3]
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	4302      	orrs	r2, r0
 8008e50:	3340      	adds	r3, #64	@ 0x40
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	440b      	add	r3, r1
 8008e56:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3714      	adds	r7, #20
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr

08008e66 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008e66:	b480      	push	{r7}
 8008e68:	b083      	sub	sp, #12
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	460b      	mov	r3, r1
 8008e70:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	887a      	ldrh	r2, [r7, #2]
 8008e78:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	699b      	ldr	r3, [r3, #24]
 8008eaa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008eb6:	4b05      	ldr	r3, [pc, #20]	@ (8008ecc <HAL_PCDEx_ActivateLPM+0x44>)
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr
 8008ecc:	10000003 	.word	0x10000003

08008ed0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008ef0:	4b19      	ldr	r3, [pc, #100]	@ (8008f58 <HAL_PWREx_ConfigSupply+0x70>)
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	f003 0304 	and.w	r3, r3, #4
 8008ef8:	2b04      	cmp	r3, #4
 8008efa:	d00a      	beq.n	8008f12 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008efc:	4b16      	ldr	r3, [pc, #88]	@ (8008f58 <HAL_PWREx_ConfigSupply+0x70>)
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	f003 0307 	and.w	r3, r3, #7
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d001      	beq.n	8008f0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e01f      	b.n	8008f4e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	e01d      	b.n	8008f4e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008f12:	4b11      	ldr	r3, [pc, #68]	@ (8008f58 <HAL_PWREx_ConfigSupply+0x70>)
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	f023 0207 	bic.w	r2, r3, #7
 8008f1a:	490f      	ldr	r1, [pc, #60]	@ (8008f58 <HAL_PWREx_ConfigSupply+0x70>)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008f22:	f7f9 fddf 	bl	8002ae4 <HAL_GetTick>
 8008f26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008f28:	e009      	b.n	8008f3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008f2a:	f7f9 fddb 	bl	8002ae4 <HAL_GetTick>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f38:	d901      	bls.n	8008f3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e007      	b.n	8008f4e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008f3e:	4b06      	ldr	r3, [pc, #24]	@ (8008f58 <HAL_PWREx_ConfigSupply+0x70>)
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008f46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f4a:	d1ee      	bne.n	8008f2a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	58024800 	.word	0x58024800

08008f5c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008f60:	4b05      	ldr	r3, [pc, #20]	@ (8008f78 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	4a04      	ldr	r2, [pc, #16]	@ (8008f78 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008f66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f6a:	60d3      	str	r3, [r2, #12]
}
 8008f6c:	bf00      	nop
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	58024800 	.word	0x58024800

08008f7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b08c      	sub	sp, #48	@ 0x30
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d101      	bne.n	8008f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e3c8      	b.n	8009720 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f000 8087 	beq.w	80090aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f9c:	4b88      	ldr	r3, [pc, #544]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008fa6:	4b86      	ldr	r3, [pc, #536]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8008fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008faa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fae:	2b10      	cmp	r3, #16
 8008fb0:	d007      	beq.n	8008fc2 <HAL_RCC_OscConfig+0x46>
 8008fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb4:	2b18      	cmp	r3, #24
 8008fb6:	d110      	bne.n	8008fda <HAL_RCC_OscConfig+0x5e>
 8008fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fba:	f003 0303 	and.w	r3, r3, #3
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d10b      	bne.n	8008fda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fc2:	4b7f      	ldr	r3, [pc, #508]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d06c      	beq.n	80090a8 <HAL_RCC_OscConfig+0x12c>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d168      	bne.n	80090a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e3a2      	b.n	8009720 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fe2:	d106      	bne.n	8008ff2 <HAL_RCC_OscConfig+0x76>
 8008fe4:	4b76      	ldr	r3, [pc, #472]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a75      	ldr	r2, [pc, #468]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8008fea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	e02e      	b.n	8009050 <HAL_RCC_OscConfig+0xd4>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d10c      	bne.n	8009014 <HAL_RCC_OscConfig+0x98>
 8008ffa:	4b71      	ldr	r3, [pc, #452]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a70      	ldr	r2, [pc, #448]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009000:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009004:	6013      	str	r3, [r2, #0]
 8009006:	4b6e      	ldr	r3, [pc, #440]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a6d      	ldr	r2, [pc, #436]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 800900c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009010:	6013      	str	r3, [r2, #0]
 8009012:	e01d      	b.n	8009050 <HAL_RCC_OscConfig+0xd4>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800901c:	d10c      	bne.n	8009038 <HAL_RCC_OscConfig+0xbc>
 800901e:	4b68      	ldr	r3, [pc, #416]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a67      	ldr	r2, [pc, #412]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009024:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009028:	6013      	str	r3, [r2, #0]
 800902a:	4b65      	ldr	r3, [pc, #404]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a64      	ldr	r2, [pc, #400]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009034:	6013      	str	r3, [r2, #0]
 8009036:	e00b      	b.n	8009050 <HAL_RCC_OscConfig+0xd4>
 8009038:	4b61      	ldr	r3, [pc, #388]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a60      	ldr	r2, [pc, #384]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 800903e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009042:	6013      	str	r3, [r2, #0]
 8009044:	4b5e      	ldr	r3, [pc, #376]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a5d      	ldr	r2, [pc, #372]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 800904a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800904e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d013      	beq.n	8009080 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009058:	f7f9 fd44 	bl	8002ae4 <HAL_GetTick>
 800905c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800905e:	e008      	b.n	8009072 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009060:	f7f9 fd40 	bl	8002ae4 <HAL_GetTick>
 8009064:	4602      	mov	r2, r0
 8009066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	2b64      	cmp	r3, #100	@ 0x64
 800906c:	d901      	bls.n	8009072 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	e356      	b.n	8009720 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009072:	4b53      	ldr	r3, [pc, #332]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800907a:	2b00      	cmp	r3, #0
 800907c:	d0f0      	beq.n	8009060 <HAL_RCC_OscConfig+0xe4>
 800907e:	e014      	b.n	80090aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009080:	f7f9 fd30 	bl	8002ae4 <HAL_GetTick>
 8009084:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009086:	e008      	b.n	800909a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009088:	f7f9 fd2c 	bl	8002ae4 <HAL_GetTick>
 800908c:	4602      	mov	r2, r0
 800908e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	2b64      	cmp	r3, #100	@ 0x64
 8009094:	d901      	bls.n	800909a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009096:	2303      	movs	r3, #3
 8009098:	e342      	b.n	8009720 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800909a:	4b49      	ldr	r3, [pc, #292]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d1f0      	bne.n	8009088 <HAL_RCC_OscConfig+0x10c>
 80090a6:	e000      	b.n	80090aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 0302 	and.w	r3, r3, #2
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	f000 808c 	beq.w	80091d0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090b8:	4b41      	ldr	r3, [pc, #260]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80090c2:	4b3f      	ldr	r3, [pc, #252]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 80090c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80090c8:	6a3b      	ldr	r3, [r7, #32]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d007      	beq.n	80090de <HAL_RCC_OscConfig+0x162>
 80090ce:	6a3b      	ldr	r3, [r7, #32]
 80090d0:	2b18      	cmp	r3, #24
 80090d2:	d137      	bne.n	8009144 <HAL_RCC_OscConfig+0x1c8>
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	f003 0303 	and.w	r3, r3, #3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d132      	bne.n	8009144 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090de:	4b38      	ldr	r3, [pc, #224]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0304 	and.w	r3, r3, #4
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d005      	beq.n	80090f6 <HAL_RCC_OscConfig+0x17a>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d101      	bne.n	80090f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e314      	b.n	8009720 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80090f6:	4b32      	ldr	r3, [pc, #200]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f023 0219 	bic.w	r2, r3, #25
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	492f      	ldr	r1, [pc, #188]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009104:	4313      	orrs	r3, r2
 8009106:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009108:	f7f9 fcec 	bl	8002ae4 <HAL_GetTick>
 800910c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800910e:	e008      	b.n	8009122 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009110:	f7f9 fce8 	bl	8002ae4 <HAL_GetTick>
 8009114:	4602      	mov	r2, r0
 8009116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	2b02      	cmp	r3, #2
 800911c:	d901      	bls.n	8009122 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800911e:	2303      	movs	r3, #3
 8009120:	e2fe      	b.n	8009720 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009122:	4b27      	ldr	r3, [pc, #156]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 0304 	and.w	r3, r3, #4
 800912a:	2b00      	cmp	r3, #0
 800912c:	d0f0      	beq.n	8009110 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800912e:	4b24      	ldr	r3, [pc, #144]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	061b      	lsls	r3, r3, #24
 800913c:	4920      	ldr	r1, [pc, #128]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 800913e:	4313      	orrs	r3, r2
 8009140:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009142:	e045      	b.n	80091d0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d026      	beq.n	800919a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800914c:	4b1c      	ldr	r3, [pc, #112]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f023 0219 	bic.w	r2, r3, #25
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	4919      	ldr	r1, [pc, #100]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 800915a:	4313      	orrs	r3, r2
 800915c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800915e:	f7f9 fcc1 	bl	8002ae4 <HAL_GetTick>
 8009162:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009164:	e008      	b.n	8009178 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009166:	f7f9 fcbd 	bl	8002ae4 <HAL_GetTick>
 800916a:	4602      	mov	r2, r0
 800916c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	2b02      	cmp	r3, #2
 8009172:	d901      	bls.n	8009178 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e2d3      	b.n	8009720 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009178:	4b11      	ldr	r3, [pc, #68]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 0304 	and.w	r3, r3, #4
 8009180:	2b00      	cmp	r3, #0
 8009182:	d0f0      	beq.n	8009166 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009184:	4b0e      	ldr	r3, [pc, #56]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	061b      	lsls	r3, r3, #24
 8009192:	490b      	ldr	r1, [pc, #44]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 8009194:	4313      	orrs	r3, r2
 8009196:	604b      	str	r3, [r1, #4]
 8009198:	e01a      	b.n	80091d0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800919a:	4b09      	ldr	r3, [pc, #36]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a08      	ldr	r2, [pc, #32]	@ (80091c0 <HAL_RCC_OscConfig+0x244>)
 80091a0:	f023 0301 	bic.w	r3, r3, #1
 80091a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091a6:	f7f9 fc9d 	bl	8002ae4 <HAL_GetTick>
 80091aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80091ac:	e00a      	b.n	80091c4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091ae:	f7f9 fc99 	bl	8002ae4 <HAL_GetTick>
 80091b2:	4602      	mov	r2, r0
 80091b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d903      	bls.n	80091c4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80091bc:	2303      	movs	r3, #3
 80091be:	e2af      	b.n	8009720 <HAL_RCC_OscConfig+0x7a4>
 80091c0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80091c4:	4b96      	ldr	r3, [pc, #600]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f003 0304 	and.w	r3, r3, #4
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1ee      	bne.n	80091ae <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 0310 	and.w	r3, r3, #16
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d06a      	beq.n	80092b2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80091dc:	4b90      	ldr	r3, [pc, #576]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80091e4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80091e6:	4b8e      	ldr	r3, [pc, #568]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 80091e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ea:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	2b08      	cmp	r3, #8
 80091f0:	d007      	beq.n	8009202 <HAL_RCC_OscConfig+0x286>
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	2b18      	cmp	r3, #24
 80091f6:	d11b      	bne.n	8009230 <HAL_RCC_OscConfig+0x2b4>
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	f003 0303 	and.w	r3, r3, #3
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d116      	bne.n	8009230 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009202:	4b87      	ldr	r3, [pc, #540]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800920a:	2b00      	cmp	r3, #0
 800920c:	d005      	beq.n	800921a <HAL_RCC_OscConfig+0x29e>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	69db      	ldr	r3, [r3, #28]
 8009212:	2b80      	cmp	r3, #128	@ 0x80
 8009214:	d001      	beq.n	800921a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e282      	b.n	8009720 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800921a:	4b81      	ldr	r3, [pc, #516]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a1b      	ldr	r3, [r3, #32]
 8009226:	061b      	lsls	r3, r3, #24
 8009228:	497d      	ldr	r1, [pc, #500]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 800922a:	4313      	orrs	r3, r2
 800922c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800922e:	e040      	b.n	80092b2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	69db      	ldr	r3, [r3, #28]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d023      	beq.n	8009280 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009238:	4b79      	ldr	r3, [pc, #484]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a78      	ldr	r2, [pc, #480]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 800923e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009244:	f7f9 fc4e 	bl	8002ae4 <HAL_GetTick>
 8009248:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800924a:	e008      	b.n	800925e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800924c:	f7f9 fc4a 	bl	8002ae4 <HAL_GetTick>
 8009250:	4602      	mov	r2, r0
 8009252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	2b02      	cmp	r3, #2
 8009258:	d901      	bls.n	800925e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800925a:	2303      	movs	r3, #3
 800925c:	e260      	b.n	8009720 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800925e:	4b70      	ldr	r3, [pc, #448]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0f0      	beq.n	800924c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800926a:	4b6d      	ldr	r3, [pc, #436]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	061b      	lsls	r3, r3, #24
 8009278:	4969      	ldr	r1, [pc, #420]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 800927a:	4313      	orrs	r3, r2
 800927c:	60cb      	str	r3, [r1, #12]
 800927e:	e018      	b.n	80092b2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009280:	4b67      	ldr	r3, [pc, #412]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a66      	ldr	r2, [pc, #408]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009286:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800928a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800928c:	f7f9 fc2a 	bl	8002ae4 <HAL_GetTick>
 8009290:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009292:	e008      	b.n	80092a6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009294:	f7f9 fc26 	bl	8002ae4 <HAL_GetTick>
 8009298:	4602      	mov	r2, r0
 800929a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d901      	bls.n	80092a6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80092a2:	2303      	movs	r3, #3
 80092a4:	e23c      	b.n	8009720 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80092a6:	4b5e      	ldr	r3, [pc, #376]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1f0      	bne.n	8009294 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f003 0308 	and.w	r3, r3, #8
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d036      	beq.n	800932c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	695b      	ldr	r3, [r3, #20]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d019      	beq.n	80092fa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092c6:	4b56      	ldr	r3, [pc, #344]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 80092c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092ca:	4a55      	ldr	r2, [pc, #340]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 80092cc:	f043 0301 	orr.w	r3, r3, #1
 80092d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092d2:	f7f9 fc07 	bl	8002ae4 <HAL_GetTick>
 80092d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80092d8:	e008      	b.n	80092ec <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092da:	f7f9 fc03 	bl	8002ae4 <HAL_GetTick>
 80092de:	4602      	mov	r2, r0
 80092e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d901      	bls.n	80092ec <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e219      	b.n	8009720 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80092ec:	4b4c      	ldr	r3, [pc, #304]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 80092ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092f0:	f003 0302 	and.w	r3, r3, #2
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d0f0      	beq.n	80092da <HAL_RCC_OscConfig+0x35e>
 80092f8:	e018      	b.n	800932c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80092fa:	4b49      	ldr	r3, [pc, #292]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 80092fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092fe:	4a48      	ldr	r2, [pc, #288]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009300:	f023 0301 	bic.w	r3, r3, #1
 8009304:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009306:	f7f9 fbed 	bl	8002ae4 <HAL_GetTick>
 800930a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800930c:	e008      	b.n	8009320 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800930e:	f7f9 fbe9 	bl	8002ae4 <HAL_GetTick>
 8009312:	4602      	mov	r2, r0
 8009314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009316:	1ad3      	subs	r3, r2, r3
 8009318:	2b02      	cmp	r3, #2
 800931a:	d901      	bls.n	8009320 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800931c:	2303      	movs	r3, #3
 800931e:	e1ff      	b.n	8009720 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009320:	4b3f      	ldr	r3, [pc, #252]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009324:	f003 0302 	and.w	r3, r3, #2
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1f0      	bne.n	800930e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 0320 	and.w	r3, r3, #32
 8009334:	2b00      	cmp	r3, #0
 8009336:	d036      	beq.n	80093a6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d019      	beq.n	8009374 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009340:	4b37      	ldr	r3, [pc, #220]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a36      	ldr	r2, [pc, #216]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009346:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800934a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800934c:	f7f9 fbca 	bl	8002ae4 <HAL_GetTick>
 8009350:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009352:	e008      	b.n	8009366 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009354:	f7f9 fbc6 	bl	8002ae4 <HAL_GetTick>
 8009358:	4602      	mov	r2, r0
 800935a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935c:	1ad3      	subs	r3, r2, r3
 800935e:	2b02      	cmp	r3, #2
 8009360:	d901      	bls.n	8009366 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009362:	2303      	movs	r3, #3
 8009364:	e1dc      	b.n	8009720 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009366:	4b2e      	ldr	r3, [pc, #184]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800936e:	2b00      	cmp	r3, #0
 8009370:	d0f0      	beq.n	8009354 <HAL_RCC_OscConfig+0x3d8>
 8009372:	e018      	b.n	80093a6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009374:	4b2a      	ldr	r3, [pc, #168]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a29      	ldr	r2, [pc, #164]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 800937a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800937e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009380:	f7f9 fbb0 	bl	8002ae4 <HAL_GetTick>
 8009384:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009386:	e008      	b.n	800939a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009388:	f7f9 fbac 	bl	8002ae4 <HAL_GetTick>
 800938c:	4602      	mov	r2, r0
 800938e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	2b02      	cmp	r3, #2
 8009394:	d901      	bls.n	800939a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009396:	2303      	movs	r3, #3
 8009398:	e1c2      	b.n	8009720 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800939a:	4b21      	ldr	r3, [pc, #132]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1f0      	bne.n	8009388 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 0304 	and.w	r3, r3, #4
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f000 8086 	beq.w	80094c0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80093b4:	4b1b      	ldr	r3, [pc, #108]	@ (8009424 <HAL_RCC_OscConfig+0x4a8>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a1a      	ldr	r2, [pc, #104]	@ (8009424 <HAL_RCC_OscConfig+0x4a8>)
 80093ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80093c0:	f7f9 fb90 	bl	8002ae4 <HAL_GetTick>
 80093c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093c6:	e008      	b.n	80093da <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093c8:	f7f9 fb8c 	bl	8002ae4 <HAL_GetTick>
 80093cc:	4602      	mov	r2, r0
 80093ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	2b64      	cmp	r3, #100	@ 0x64
 80093d4:	d901      	bls.n	80093da <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80093d6:	2303      	movs	r3, #3
 80093d8:	e1a2      	b.n	8009720 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80093da:	4b12      	ldr	r3, [pc, #72]	@ (8009424 <HAL_RCC_OscConfig+0x4a8>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d0f0      	beq.n	80093c8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d106      	bne.n	80093fc <HAL_RCC_OscConfig+0x480>
 80093ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 80093f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093f2:	4a0b      	ldr	r2, [pc, #44]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 80093f4:	f043 0301 	orr.w	r3, r3, #1
 80093f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80093fa:	e032      	b.n	8009462 <HAL_RCC_OscConfig+0x4e6>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d111      	bne.n	8009428 <HAL_RCC_OscConfig+0x4ac>
 8009404:	4b06      	ldr	r3, [pc, #24]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009408:	4a05      	ldr	r2, [pc, #20]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 800940a:	f023 0301 	bic.w	r3, r3, #1
 800940e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009410:	4b03      	ldr	r3, [pc, #12]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009414:	4a02      	ldr	r2, [pc, #8]	@ (8009420 <HAL_RCC_OscConfig+0x4a4>)
 8009416:	f023 0304 	bic.w	r3, r3, #4
 800941a:	6713      	str	r3, [r2, #112]	@ 0x70
 800941c:	e021      	b.n	8009462 <HAL_RCC_OscConfig+0x4e6>
 800941e:	bf00      	nop
 8009420:	58024400 	.word	0x58024400
 8009424:	58024800 	.word	0x58024800
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	2b05      	cmp	r3, #5
 800942e:	d10c      	bne.n	800944a <HAL_RCC_OscConfig+0x4ce>
 8009430:	4b83      	ldr	r3, [pc, #524]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009434:	4a82      	ldr	r2, [pc, #520]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009436:	f043 0304 	orr.w	r3, r3, #4
 800943a:	6713      	str	r3, [r2, #112]	@ 0x70
 800943c:	4b80      	ldr	r3, [pc, #512]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 800943e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009440:	4a7f      	ldr	r2, [pc, #508]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009442:	f043 0301 	orr.w	r3, r3, #1
 8009446:	6713      	str	r3, [r2, #112]	@ 0x70
 8009448:	e00b      	b.n	8009462 <HAL_RCC_OscConfig+0x4e6>
 800944a:	4b7d      	ldr	r3, [pc, #500]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 800944c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800944e:	4a7c      	ldr	r2, [pc, #496]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009450:	f023 0301 	bic.w	r3, r3, #1
 8009454:	6713      	str	r3, [r2, #112]	@ 0x70
 8009456:	4b7a      	ldr	r3, [pc, #488]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800945a:	4a79      	ldr	r2, [pc, #484]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 800945c:	f023 0304 	bic.w	r3, r3, #4
 8009460:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d015      	beq.n	8009496 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800946a:	f7f9 fb3b 	bl	8002ae4 <HAL_GetTick>
 800946e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009470:	e00a      	b.n	8009488 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009472:	f7f9 fb37 	bl	8002ae4 <HAL_GetTick>
 8009476:	4602      	mov	r2, r0
 8009478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009480:	4293      	cmp	r3, r2
 8009482:	d901      	bls.n	8009488 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009484:	2303      	movs	r3, #3
 8009486:	e14b      	b.n	8009720 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009488:	4b6d      	ldr	r3, [pc, #436]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 800948a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800948c:	f003 0302 	and.w	r3, r3, #2
 8009490:	2b00      	cmp	r3, #0
 8009492:	d0ee      	beq.n	8009472 <HAL_RCC_OscConfig+0x4f6>
 8009494:	e014      	b.n	80094c0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009496:	f7f9 fb25 	bl	8002ae4 <HAL_GetTick>
 800949a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800949c:	e00a      	b.n	80094b4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800949e:	f7f9 fb21 	bl	8002ae4 <HAL_GetTick>
 80094a2:	4602      	mov	r2, r0
 80094a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d901      	bls.n	80094b4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80094b0:	2303      	movs	r3, #3
 80094b2:	e135      	b.n	8009720 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80094b4:	4b62      	ldr	r3, [pc, #392]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80094b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094b8:	f003 0302 	and.w	r3, r3, #2
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1ee      	bne.n	800949e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f000 812a 	beq.w	800971e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80094ca:	4b5d      	ldr	r3, [pc, #372]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80094d2:	2b18      	cmp	r3, #24
 80094d4:	f000 80ba 	beq.w	800964c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094dc:	2b02      	cmp	r3, #2
 80094de:	f040 8095 	bne.w	800960c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094e2:	4b57      	ldr	r3, [pc, #348]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a56      	ldr	r2, [pc, #344]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80094e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80094ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094ee:	f7f9 faf9 	bl	8002ae4 <HAL_GetTick>
 80094f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80094f4:	e008      	b.n	8009508 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094f6:	f7f9 faf5 	bl	8002ae4 <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	2b02      	cmp	r3, #2
 8009502:	d901      	bls.n	8009508 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009504:	2303      	movs	r3, #3
 8009506:	e10b      	b.n	8009720 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009508:	4b4d      	ldr	r3, [pc, #308]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009510:	2b00      	cmp	r3, #0
 8009512:	d1f0      	bne.n	80094f6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009514:	4b4a      	ldr	r3, [pc, #296]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009516:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009518:	4b4a      	ldr	r3, [pc, #296]	@ (8009644 <HAL_RCC_OscConfig+0x6c8>)
 800951a:	4013      	ands	r3, r2
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009524:	0112      	lsls	r2, r2, #4
 8009526:	430a      	orrs	r2, r1
 8009528:	4945      	ldr	r1, [pc, #276]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 800952a:	4313      	orrs	r3, r2
 800952c:	628b      	str	r3, [r1, #40]	@ 0x28
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009532:	3b01      	subs	r3, #1
 8009534:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800953c:	3b01      	subs	r3, #1
 800953e:	025b      	lsls	r3, r3, #9
 8009540:	b29b      	uxth	r3, r3
 8009542:	431a      	orrs	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009548:	3b01      	subs	r3, #1
 800954a:	041b      	lsls	r3, r3, #16
 800954c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009550:	431a      	orrs	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009556:	3b01      	subs	r3, #1
 8009558:	061b      	lsls	r3, r3, #24
 800955a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800955e:	4938      	ldr	r1, [pc, #224]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009560:	4313      	orrs	r3, r2
 8009562:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009564:	4b36      	ldr	r3, [pc, #216]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009568:	4a35      	ldr	r2, [pc, #212]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 800956a:	f023 0301 	bic.w	r3, r3, #1
 800956e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009570:	4b33      	ldr	r3, [pc, #204]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009572:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009574:	4b34      	ldr	r3, [pc, #208]	@ (8009648 <HAL_RCC_OscConfig+0x6cc>)
 8009576:	4013      	ands	r3, r2
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800957c:	00d2      	lsls	r2, r2, #3
 800957e:	4930      	ldr	r1, [pc, #192]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009580:	4313      	orrs	r3, r2
 8009582:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009584:	4b2e      	ldr	r3, [pc, #184]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009588:	f023 020c 	bic.w	r2, r3, #12
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009590:	492b      	ldr	r1, [pc, #172]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009592:	4313      	orrs	r3, r2
 8009594:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009596:	4b2a      	ldr	r3, [pc, #168]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800959a:	f023 0202 	bic.w	r2, r3, #2
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095a2:	4927      	ldr	r1, [pc, #156]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80095a4:	4313      	orrs	r3, r2
 80095a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80095a8:	4b25      	ldr	r3, [pc, #148]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80095aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ac:	4a24      	ldr	r2, [pc, #144]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80095ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095b4:	4b22      	ldr	r3, [pc, #136]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80095b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095b8:	4a21      	ldr	r2, [pc, #132]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80095ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80095c0:	4b1f      	ldr	r3, [pc, #124]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80095c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c4:	4a1e      	ldr	r2, [pc, #120]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80095c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80095ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80095cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80095ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d0:	4a1b      	ldr	r2, [pc, #108]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80095d2:	f043 0301 	orr.w	r3, r3, #1
 80095d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80095d8:	4b19      	ldr	r3, [pc, #100]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a18      	ldr	r2, [pc, #96]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 80095de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80095e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095e4:	f7f9 fa7e 	bl	8002ae4 <HAL_GetTick>
 80095e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80095ea:	e008      	b.n	80095fe <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095ec:	f7f9 fa7a 	bl	8002ae4 <HAL_GetTick>
 80095f0:	4602      	mov	r2, r0
 80095f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f4:	1ad3      	subs	r3, r2, r3
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d901      	bls.n	80095fe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80095fa:	2303      	movs	r3, #3
 80095fc:	e090      	b.n	8009720 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80095fe:	4b10      	ldr	r3, [pc, #64]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009606:	2b00      	cmp	r3, #0
 8009608:	d0f0      	beq.n	80095ec <HAL_RCC_OscConfig+0x670>
 800960a:	e088      	b.n	800971e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800960c:	4b0c      	ldr	r3, [pc, #48]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a0b      	ldr	r2, [pc, #44]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009612:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009618:	f7f9 fa64 	bl	8002ae4 <HAL_GetTick>
 800961c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800961e:	e008      	b.n	8009632 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009620:	f7f9 fa60 	bl	8002ae4 <HAL_GetTick>
 8009624:	4602      	mov	r2, r0
 8009626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009628:	1ad3      	subs	r3, r2, r3
 800962a:	2b02      	cmp	r3, #2
 800962c:	d901      	bls.n	8009632 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800962e:	2303      	movs	r3, #3
 8009630:	e076      	b.n	8009720 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009632:	4b03      	ldr	r3, [pc, #12]	@ (8009640 <HAL_RCC_OscConfig+0x6c4>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1f0      	bne.n	8009620 <HAL_RCC_OscConfig+0x6a4>
 800963e:	e06e      	b.n	800971e <HAL_RCC_OscConfig+0x7a2>
 8009640:	58024400 	.word	0x58024400
 8009644:	fffffc0c 	.word	0xfffffc0c
 8009648:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800964c:	4b36      	ldr	r3, [pc, #216]	@ (8009728 <HAL_RCC_OscConfig+0x7ac>)
 800964e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009650:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009652:	4b35      	ldr	r3, [pc, #212]	@ (8009728 <HAL_RCC_OscConfig+0x7ac>)
 8009654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009656:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800965c:	2b01      	cmp	r3, #1
 800965e:	d031      	beq.n	80096c4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	f003 0203 	and.w	r2, r3, #3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800966a:	429a      	cmp	r2, r3
 800966c:	d12a      	bne.n	80096c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	091b      	lsrs	r3, r3, #4
 8009672:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800967a:	429a      	cmp	r2, r3
 800967c:	d122      	bne.n	80096c4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009688:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800968a:	429a      	cmp	r2, r3
 800968c:	d11a      	bne.n	80096c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	0a5b      	lsrs	r3, r3, #9
 8009692:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800969a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800969c:	429a      	cmp	r2, r3
 800969e:	d111      	bne.n	80096c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	0c1b      	lsrs	r3, r3, #16
 80096a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d108      	bne.n	80096c4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	0e1b      	lsrs	r3, r3, #24
 80096b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d001      	beq.n	80096c8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e02b      	b.n	8009720 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80096c8:	4b17      	ldr	r3, [pc, #92]	@ (8009728 <HAL_RCC_OscConfig+0x7ac>)
 80096ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096cc:	08db      	lsrs	r3, r3, #3
 80096ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096d8:	693a      	ldr	r2, [r7, #16]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d01f      	beq.n	800971e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80096de:	4b12      	ldr	r3, [pc, #72]	@ (8009728 <HAL_RCC_OscConfig+0x7ac>)
 80096e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096e2:	4a11      	ldr	r2, [pc, #68]	@ (8009728 <HAL_RCC_OscConfig+0x7ac>)
 80096e4:	f023 0301 	bic.w	r3, r3, #1
 80096e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80096ea:	f7f9 f9fb 	bl	8002ae4 <HAL_GetTick>
 80096ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80096f0:	bf00      	nop
 80096f2:	f7f9 f9f7 	bl	8002ae4 <HAL_GetTick>
 80096f6:	4602      	mov	r2, r0
 80096f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d0f9      	beq.n	80096f2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80096fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009728 <HAL_RCC_OscConfig+0x7ac>)
 8009700:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009702:	4b0a      	ldr	r3, [pc, #40]	@ (800972c <HAL_RCC_OscConfig+0x7b0>)
 8009704:	4013      	ands	r3, r2
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800970a:	00d2      	lsls	r2, r2, #3
 800970c:	4906      	ldr	r1, [pc, #24]	@ (8009728 <HAL_RCC_OscConfig+0x7ac>)
 800970e:	4313      	orrs	r3, r2
 8009710:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009712:	4b05      	ldr	r3, [pc, #20]	@ (8009728 <HAL_RCC_OscConfig+0x7ac>)
 8009714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009716:	4a04      	ldr	r2, [pc, #16]	@ (8009728 <HAL_RCC_OscConfig+0x7ac>)
 8009718:	f043 0301 	orr.w	r3, r3, #1
 800971c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	3730      	adds	r7, #48	@ 0x30
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	58024400 	.word	0x58024400
 800972c:	ffff0007 	.word	0xffff0007

08009730 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d101      	bne.n	8009744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	e19c      	b.n	8009a7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009744:	4b8a      	ldr	r3, [pc, #552]	@ (8009970 <HAL_RCC_ClockConfig+0x240>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 030f 	and.w	r3, r3, #15
 800974c:	683a      	ldr	r2, [r7, #0]
 800974e:	429a      	cmp	r2, r3
 8009750:	d910      	bls.n	8009774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009752:	4b87      	ldr	r3, [pc, #540]	@ (8009970 <HAL_RCC_ClockConfig+0x240>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f023 020f 	bic.w	r2, r3, #15
 800975a:	4985      	ldr	r1, [pc, #532]	@ (8009970 <HAL_RCC_ClockConfig+0x240>)
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	4313      	orrs	r3, r2
 8009760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009762:	4b83      	ldr	r3, [pc, #524]	@ (8009970 <HAL_RCC_ClockConfig+0x240>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 030f 	and.w	r3, r3, #15
 800976a:	683a      	ldr	r2, [r7, #0]
 800976c:	429a      	cmp	r2, r3
 800976e:	d001      	beq.n	8009774 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e184      	b.n	8009a7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 0304 	and.w	r3, r3, #4
 800977c:	2b00      	cmp	r3, #0
 800977e:	d010      	beq.n	80097a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	691a      	ldr	r2, [r3, #16]
 8009784:	4b7b      	ldr	r3, [pc, #492]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800978c:	429a      	cmp	r2, r3
 800978e:	d908      	bls.n	80097a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009790:	4b78      	ldr	r3, [pc, #480]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 8009792:	699b      	ldr	r3, [r3, #24]
 8009794:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	691b      	ldr	r3, [r3, #16]
 800979c:	4975      	ldr	r1, [pc, #468]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 800979e:	4313      	orrs	r3, r2
 80097a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 0308 	and.w	r3, r3, #8
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d010      	beq.n	80097d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	695a      	ldr	r2, [r3, #20]
 80097b2:	4b70      	ldr	r3, [pc, #448]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 80097b4:	69db      	ldr	r3, [r3, #28]
 80097b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d908      	bls.n	80097d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80097be:	4b6d      	ldr	r3, [pc, #436]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 80097c0:	69db      	ldr	r3, [r3, #28]
 80097c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	695b      	ldr	r3, [r3, #20]
 80097ca:	496a      	ldr	r1, [pc, #424]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 80097cc:	4313      	orrs	r3, r2
 80097ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f003 0310 	and.w	r3, r3, #16
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d010      	beq.n	80097fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	699a      	ldr	r2, [r3, #24]
 80097e0:	4b64      	ldr	r3, [pc, #400]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 80097e2:	69db      	ldr	r3, [r3, #28]
 80097e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d908      	bls.n	80097fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80097ec:	4b61      	ldr	r3, [pc, #388]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 80097ee:	69db      	ldr	r3, [r3, #28]
 80097f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	699b      	ldr	r3, [r3, #24]
 80097f8:	495e      	ldr	r1, [pc, #376]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 80097fa:	4313      	orrs	r3, r2
 80097fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f003 0320 	and.w	r3, r3, #32
 8009806:	2b00      	cmp	r3, #0
 8009808:	d010      	beq.n	800982c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	69da      	ldr	r2, [r3, #28]
 800980e:	4b59      	ldr	r3, [pc, #356]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 8009810:	6a1b      	ldr	r3, [r3, #32]
 8009812:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009816:	429a      	cmp	r2, r3
 8009818:	d908      	bls.n	800982c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800981a:	4b56      	ldr	r3, [pc, #344]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 800981c:	6a1b      	ldr	r3, [r3, #32]
 800981e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	69db      	ldr	r3, [r3, #28]
 8009826:	4953      	ldr	r1, [pc, #332]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 8009828:	4313      	orrs	r3, r2
 800982a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f003 0302 	and.w	r3, r3, #2
 8009834:	2b00      	cmp	r3, #0
 8009836:	d010      	beq.n	800985a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	68da      	ldr	r2, [r3, #12]
 800983c:	4b4d      	ldr	r3, [pc, #308]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	f003 030f 	and.w	r3, r3, #15
 8009844:	429a      	cmp	r2, r3
 8009846:	d908      	bls.n	800985a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009848:	4b4a      	ldr	r3, [pc, #296]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 800984a:	699b      	ldr	r3, [r3, #24]
 800984c:	f023 020f 	bic.w	r2, r3, #15
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	4947      	ldr	r1, [pc, #284]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 8009856:	4313      	orrs	r3, r2
 8009858:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 0301 	and.w	r3, r3, #1
 8009862:	2b00      	cmp	r3, #0
 8009864:	d055      	beq.n	8009912 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009866:	4b43      	ldr	r3, [pc, #268]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 8009868:	699b      	ldr	r3, [r3, #24]
 800986a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	4940      	ldr	r1, [pc, #256]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 8009874:	4313      	orrs	r3, r2
 8009876:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	2b02      	cmp	r3, #2
 800987e:	d107      	bne.n	8009890 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009880:	4b3c      	ldr	r3, [pc, #240]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009888:	2b00      	cmp	r3, #0
 800988a:	d121      	bne.n	80098d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	e0f6      	b.n	8009a7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	2b03      	cmp	r3, #3
 8009896:	d107      	bne.n	80098a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009898:	4b36      	ldr	r3, [pc, #216]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d115      	bne.n	80098d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	e0ea      	b.n	8009a7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d107      	bne.n	80098c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80098b0:	4b30      	ldr	r3, [pc, #192]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d109      	bne.n	80098d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	e0de      	b.n	8009a7e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098c0:	4b2c      	ldr	r3, [pc, #176]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 0304 	and.w	r3, r3, #4
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d101      	bne.n	80098d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e0d6      	b.n	8009a7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80098d0:	4b28      	ldr	r3, [pc, #160]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	f023 0207 	bic.w	r2, r3, #7
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	4925      	ldr	r1, [pc, #148]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 80098de:	4313      	orrs	r3, r2
 80098e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098e2:	f7f9 f8ff 	bl	8002ae4 <HAL_GetTick>
 80098e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098e8:	e00a      	b.n	8009900 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80098ea:	f7f9 f8fb 	bl	8002ae4 <HAL_GetTick>
 80098ee:	4602      	mov	r2, r0
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d901      	bls.n	8009900 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80098fc:	2303      	movs	r3, #3
 80098fe:	e0be      	b.n	8009a7e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009900:	4b1c      	ldr	r3, [pc, #112]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	00db      	lsls	r3, r3, #3
 800990e:	429a      	cmp	r2, r3
 8009910:	d1eb      	bne.n	80098ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f003 0302 	and.w	r3, r3, #2
 800991a:	2b00      	cmp	r3, #0
 800991c:	d010      	beq.n	8009940 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	68da      	ldr	r2, [r3, #12]
 8009922:	4b14      	ldr	r3, [pc, #80]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	f003 030f 	and.w	r3, r3, #15
 800992a:	429a      	cmp	r2, r3
 800992c:	d208      	bcs.n	8009940 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800992e:	4b11      	ldr	r3, [pc, #68]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	f023 020f 	bic.w	r2, r3, #15
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	490e      	ldr	r1, [pc, #56]	@ (8009974 <HAL_RCC_ClockConfig+0x244>)
 800993c:	4313      	orrs	r3, r2
 800993e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009940:	4b0b      	ldr	r3, [pc, #44]	@ (8009970 <HAL_RCC_ClockConfig+0x240>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 030f 	and.w	r3, r3, #15
 8009948:	683a      	ldr	r2, [r7, #0]
 800994a:	429a      	cmp	r2, r3
 800994c:	d214      	bcs.n	8009978 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800994e:	4b08      	ldr	r3, [pc, #32]	@ (8009970 <HAL_RCC_ClockConfig+0x240>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f023 020f 	bic.w	r2, r3, #15
 8009956:	4906      	ldr	r1, [pc, #24]	@ (8009970 <HAL_RCC_ClockConfig+0x240>)
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	4313      	orrs	r3, r2
 800995c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800995e:	4b04      	ldr	r3, [pc, #16]	@ (8009970 <HAL_RCC_ClockConfig+0x240>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f003 030f 	and.w	r3, r3, #15
 8009966:	683a      	ldr	r2, [r7, #0]
 8009968:	429a      	cmp	r2, r3
 800996a:	d005      	beq.n	8009978 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e086      	b.n	8009a7e <HAL_RCC_ClockConfig+0x34e>
 8009970:	52002000 	.word	0x52002000
 8009974:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f003 0304 	and.w	r3, r3, #4
 8009980:	2b00      	cmp	r3, #0
 8009982:	d010      	beq.n	80099a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	691a      	ldr	r2, [r3, #16]
 8009988:	4b3f      	ldr	r3, [pc, #252]	@ (8009a88 <HAL_RCC_ClockConfig+0x358>)
 800998a:	699b      	ldr	r3, [r3, #24]
 800998c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009990:	429a      	cmp	r2, r3
 8009992:	d208      	bcs.n	80099a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009994:	4b3c      	ldr	r3, [pc, #240]	@ (8009a88 <HAL_RCC_ClockConfig+0x358>)
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	4939      	ldr	r1, [pc, #228]	@ (8009a88 <HAL_RCC_ClockConfig+0x358>)
 80099a2:	4313      	orrs	r3, r2
 80099a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f003 0308 	and.w	r3, r3, #8
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d010      	beq.n	80099d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	695a      	ldr	r2, [r3, #20]
 80099b6:	4b34      	ldr	r3, [pc, #208]	@ (8009a88 <HAL_RCC_ClockConfig+0x358>)
 80099b8:	69db      	ldr	r3, [r3, #28]
 80099ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80099be:	429a      	cmp	r2, r3
 80099c0:	d208      	bcs.n	80099d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80099c2:	4b31      	ldr	r3, [pc, #196]	@ (8009a88 <HAL_RCC_ClockConfig+0x358>)
 80099c4:	69db      	ldr	r3, [r3, #28]
 80099c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	695b      	ldr	r3, [r3, #20]
 80099ce:	492e      	ldr	r1, [pc, #184]	@ (8009a88 <HAL_RCC_ClockConfig+0x358>)
 80099d0:	4313      	orrs	r3, r2
 80099d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 0310 	and.w	r3, r3, #16
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d010      	beq.n	8009a02 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	699a      	ldr	r2, [r3, #24]
 80099e4:	4b28      	ldr	r3, [pc, #160]	@ (8009a88 <HAL_RCC_ClockConfig+0x358>)
 80099e6:	69db      	ldr	r3, [r3, #28]
 80099e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d208      	bcs.n	8009a02 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80099f0:	4b25      	ldr	r3, [pc, #148]	@ (8009a88 <HAL_RCC_ClockConfig+0x358>)
 80099f2:	69db      	ldr	r3, [r3, #28]
 80099f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	699b      	ldr	r3, [r3, #24]
 80099fc:	4922      	ldr	r1, [pc, #136]	@ (8009a88 <HAL_RCC_ClockConfig+0x358>)
 80099fe:	4313      	orrs	r3, r2
 8009a00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 0320 	and.w	r3, r3, #32
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d010      	beq.n	8009a30 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	69da      	ldr	r2, [r3, #28]
 8009a12:	4b1d      	ldr	r3, [pc, #116]	@ (8009a88 <HAL_RCC_ClockConfig+0x358>)
 8009a14:	6a1b      	ldr	r3, [r3, #32]
 8009a16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d208      	bcs.n	8009a30 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8009a88 <HAL_RCC_ClockConfig+0x358>)
 8009a20:	6a1b      	ldr	r3, [r3, #32]
 8009a22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	69db      	ldr	r3, [r3, #28]
 8009a2a:	4917      	ldr	r1, [pc, #92]	@ (8009a88 <HAL_RCC_ClockConfig+0x358>)
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009a30:	f000 f834 	bl	8009a9c <HAL_RCC_GetSysClockFreq>
 8009a34:	4602      	mov	r2, r0
 8009a36:	4b14      	ldr	r3, [pc, #80]	@ (8009a88 <HAL_RCC_ClockConfig+0x358>)
 8009a38:	699b      	ldr	r3, [r3, #24]
 8009a3a:	0a1b      	lsrs	r3, r3, #8
 8009a3c:	f003 030f 	and.w	r3, r3, #15
 8009a40:	4912      	ldr	r1, [pc, #72]	@ (8009a8c <HAL_RCC_ClockConfig+0x35c>)
 8009a42:	5ccb      	ldrb	r3, [r1, r3]
 8009a44:	f003 031f 	and.w	r3, r3, #31
 8009a48:	fa22 f303 	lsr.w	r3, r2, r3
 8009a4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8009a88 <HAL_RCC_ClockConfig+0x358>)
 8009a50:	699b      	ldr	r3, [r3, #24]
 8009a52:	f003 030f 	and.w	r3, r3, #15
 8009a56:	4a0d      	ldr	r2, [pc, #52]	@ (8009a8c <HAL_RCC_ClockConfig+0x35c>)
 8009a58:	5cd3      	ldrb	r3, [r2, r3]
 8009a5a:	f003 031f 	and.w	r3, r3, #31
 8009a5e:	693a      	ldr	r2, [r7, #16]
 8009a60:	fa22 f303 	lsr.w	r3, r2, r3
 8009a64:	4a0a      	ldr	r2, [pc, #40]	@ (8009a90 <HAL_RCC_ClockConfig+0x360>)
 8009a66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009a68:	4a0a      	ldr	r2, [pc, #40]	@ (8009a94 <HAL_RCC_ClockConfig+0x364>)
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8009a98 <HAL_RCC_ClockConfig+0x368>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7f8 ffec 	bl	8002a50 <HAL_InitTick>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3718      	adds	r7, #24
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	58024400 	.word	0x58024400
 8009a8c:	08014918 	.word	0x08014918
 8009a90:	24000004 	.word	0x24000004
 8009a94:	24000000 	.word	0x24000000
 8009a98:	24000008 	.word	0x24000008

08009a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b089      	sub	sp, #36	@ 0x24
 8009aa0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009aa2:	4bb3      	ldr	r3, [pc, #716]	@ (8009d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009aaa:	2b18      	cmp	r3, #24
 8009aac:	f200 8155 	bhi.w	8009d5a <HAL_RCC_GetSysClockFreq+0x2be>
 8009ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8009ab8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab6:	bf00      	nop
 8009ab8:	08009b1d 	.word	0x08009b1d
 8009abc:	08009d5b 	.word	0x08009d5b
 8009ac0:	08009d5b 	.word	0x08009d5b
 8009ac4:	08009d5b 	.word	0x08009d5b
 8009ac8:	08009d5b 	.word	0x08009d5b
 8009acc:	08009d5b 	.word	0x08009d5b
 8009ad0:	08009d5b 	.word	0x08009d5b
 8009ad4:	08009d5b 	.word	0x08009d5b
 8009ad8:	08009b43 	.word	0x08009b43
 8009adc:	08009d5b 	.word	0x08009d5b
 8009ae0:	08009d5b 	.word	0x08009d5b
 8009ae4:	08009d5b 	.word	0x08009d5b
 8009ae8:	08009d5b 	.word	0x08009d5b
 8009aec:	08009d5b 	.word	0x08009d5b
 8009af0:	08009d5b 	.word	0x08009d5b
 8009af4:	08009d5b 	.word	0x08009d5b
 8009af8:	08009b49 	.word	0x08009b49
 8009afc:	08009d5b 	.word	0x08009d5b
 8009b00:	08009d5b 	.word	0x08009d5b
 8009b04:	08009d5b 	.word	0x08009d5b
 8009b08:	08009d5b 	.word	0x08009d5b
 8009b0c:	08009d5b 	.word	0x08009d5b
 8009b10:	08009d5b 	.word	0x08009d5b
 8009b14:	08009d5b 	.word	0x08009d5b
 8009b18:	08009b4f 	.word	0x08009b4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b1c:	4b94      	ldr	r3, [pc, #592]	@ (8009d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f003 0320 	and.w	r3, r3, #32
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d009      	beq.n	8009b3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b28:	4b91      	ldr	r3, [pc, #580]	@ (8009d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	08db      	lsrs	r3, r3, #3
 8009b2e:	f003 0303 	and.w	r3, r3, #3
 8009b32:	4a90      	ldr	r2, [pc, #576]	@ (8009d74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b34:	fa22 f303 	lsr.w	r3, r2, r3
 8009b38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009b3a:	e111      	b.n	8009d60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009b3c:	4b8d      	ldr	r3, [pc, #564]	@ (8009d74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b3e:	61bb      	str	r3, [r7, #24]
      break;
 8009b40:	e10e      	b.n	8009d60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009b42:	4b8d      	ldr	r3, [pc, #564]	@ (8009d78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009b44:	61bb      	str	r3, [r7, #24]
      break;
 8009b46:	e10b      	b.n	8009d60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009b48:	4b8c      	ldr	r3, [pc, #560]	@ (8009d7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009b4a:	61bb      	str	r3, [r7, #24]
      break;
 8009b4c:	e108      	b.n	8009d60 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b4e:	4b88      	ldr	r3, [pc, #544]	@ (8009d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b52:	f003 0303 	and.w	r3, r3, #3
 8009b56:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009b58:	4b85      	ldr	r3, [pc, #532]	@ (8009d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b5c:	091b      	lsrs	r3, r3, #4
 8009b5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b62:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009b64:	4b82      	ldr	r3, [pc, #520]	@ (8009d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b68:	f003 0301 	and.w	r3, r3, #1
 8009b6c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009b6e:	4b80      	ldr	r3, [pc, #512]	@ (8009d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b72:	08db      	lsrs	r3, r3, #3
 8009b74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	fb02 f303 	mul.w	r3, r2, r3
 8009b7e:	ee07 3a90 	vmov	s15, r3
 8009b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b86:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f000 80e1 	beq.w	8009d54 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	f000 8083 	beq.w	8009ca0 <HAL_RCC_GetSysClockFreq+0x204>
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	f200 80a1 	bhi.w	8009ce4 <HAL_RCC_GetSysClockFreq+0x248>
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d003      	beq.n	8009bb0 <HAL_RCC_GetSysClockFreq+0x114>
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d056      	beq.n	8009c5c <HAL_RCC_GetSysClockFreq+0x1c0>
 8009bae:	e099      	b.n	8009ce4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bb0:	4b6f      	ldr	r3, [pc, #444]	@ (8009d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 0320 	and.w	r3, r3, #32
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d02d      	beq.n	8009c18 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009bbc:	4b6c      	ldr	r3, [pc, #432]	@ (8009d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	08db      	lsrs	r3, r3, #3
 8009bc2:	f003 0303 	and.w	r3, r3, #3
 8009bc6:	4a6b      	ldr	r2, [pc, #428]	@ (8009d74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8009bcc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	ee07 3a90 	vmov	s15, r3
 8009bd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	ee07 3a90 	vmov	s15, r3
 8009bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009be6:	4b62      	ldr	r3, [pc, #392]	@ (8009d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bee:	ee07 3a90 	vmov	s15, r3
 8009bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bfa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009d80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c12:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009c16:	e087      	b.n	8009d28 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	ee07 3a90 	vmov	s15, r3
 8009c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c22:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009d84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c2a:	4b51      	ldr	r3, [pc, #324]	@ (8009d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c32:	ee07 3a90 	vmov	s15, r3
 8009c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c3e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009d80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c5a:	e065      	b.n	8009d28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	ee07 3a90 	vmov	s15, r3
 8009c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c66:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009d88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c6e:	4b40      	ldr	r3, [pc, #256]	@ (8009d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c76:	ee07 3a90 	vmov	s15, r3
 8009c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c82:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009d80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c9e:	e043      	b.n	8009d28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	ee07 3a90 	vmov	s15, r3
 8009ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009caa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009d8c <HAL_RCC_GetSysClockFreq+0x2f0>
 8009cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cb2:	4b2f      	ldr	r3, [pc, #188]	@ (8009d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cba:	ee07 3a90 	vmov	s15, r3
 8009cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009cc6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009d80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009ce2:	e021      	b.n	8009d28 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	ee07 3a90 	vmov	s15, r3
 8009cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009d88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8009d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cfe:	ee07 3a90 	vmov	s15, r3
 8009d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d06:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d0a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009d80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009d26:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009d28:	4b11      	ldr	r3, [pc, #68]	@ (8009d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d2c:	0a5b      	lsrs	r3, r3, #9
 8009d2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d32:	3301      	adds	r3, #1
 8009d34:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	ee07 3a90 	vmov	s15, r3
 8009d3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009d40:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d4c:	ee17 3a90 	vmov	r3, s15
 8009d50:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009d52:	e005      	b.n	8009d60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009d54:	2300      	movs	r3, #0
 8009d56:	61bb      	str	r3, [r7, #24]
      break;
 8009d58:	e002      	b.n	8009d60 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009d5a:	4b07      	ldr	r3, [pc, #28]	@ (8009d78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009d5c:	61bb      	str	r3, [r7, #24]
      break;
 8009d5e:	bf00      	nop
  }

  return sysclockfreq;
 8009d60:	69bb      	ldr	r3, [r7, #24]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3724      	adds	r7, #36	@ 0x24
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	58024400 	.word	0x58024400
 8009d74:	03d09000 	.word	0x03d09000
 8009d78:	003d0900 	.word	0x003d0900
 8009d7c:	017d7840 	.word	0x017d7840
 8009d80:	46000000 	.word	0x46000000
 8009d84:	4c742400 	.word	0x4c742400
 8009d88:	4a742400 	.word	0x4a742400
 8009d8c:	4bbebc20 	.word	0x4bbebc20

08009d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009d96:	f7ff fe81 	bl	8009a9c <HAL_RCC_GetSysClockFreq>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	4b10      	ldr	r3, [pc, #64]	@ (8009de0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009d9e:	699b      	ldr	r3, [r3, #24]
 8009da0:	0a1b      	lsrs	r3, r3, #8
 8009da2:	f003 030f 	and.w	r3, r3, #15
 8009da6:	490f      	ldr	r1, [pc, #60]	@ (8009de4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009da8:	5ccb      	ldrb	r3, [r1, r3]
 8009daa:	f003 031f 	and.w	r3, r3, #31
 8009dae:	fa22 f303 	lsr.w	r3, r2, r3
 8009db2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009db4:	4b0a      	ldr	r3, [pc, #40]	@ (8009de0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009db6:	699b      	ldr	r3, [r3, #24]
 8009db8:	f003 030f 	and.w	r3, r3, #15
 8009dbc:	4a09      	ldr	r2, [pc, #36]	@ (8009de4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009dbe:	5cd3      	ldrb	r3, [r2, r3]
 8009dc0:	f003 031f 	and.w	r3, r3, #31
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dca:	4a07      	ldr	r2, [pc, #28]	@ (8009de8 <HAL_RCC_GetHCLKFreq+0x58>)
 8009dcc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009dce:	4a07      	ldr	r2, [pc, #28]	@ (8009dec <HAL_RCC_GetHCLKFreq+0x5c>)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009dd4:	4b04      	ldr	r3, [pc, #16]	@ (8009de8 <HAL_RCC_GetHCLKFreq+0x58>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	58024400 	.word	0x58024400
 8009de4:	08014918 	.word	0x08014918
 8009de8:	24000004 	.word	0x24000004
 8009dec:	24000000 	.word	0x24000000

08009df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009df4:	f7ff ffcc 	bl	8009d90 <HAL_RCC_GetHCLKFreq>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	4b06      	ldr	r3, [pc, #24]	@ (8009e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009dfc:	69db      	ldr	r3, [r3, #28]
 8009dfe:	091b      	lsrs	r3, r3, #4
 8009e00:	f003 0307 	and.w	r3, r3, #7
 8009e04:	4904      	ldr	r1, [pc, #16]	@ (8009e18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009e06:	5ccb      	ldrb	r3, [r1, r3]
 8009e08:	f003 031f 	and.w	r3, r3, #31
 8009e0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	58024400 	.word	0x58024400
 8009e18:	08014918 	.word	0x08014918

08009e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009e20:	f7ff ffb6 	bl	8009d90 <HAL_RCC_GetHCLKFreq>
 8009e24:	4602      	mov	r2, r0
 8009e26:	4b06      	ldr	r3, [pc, #24]	@ (8009e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009e28:	69db      	ldr	r3, [r3, #28]
 8009e2a:	0a1b      	lsrs	r3, r3, #8
 8009e2c:	f003 0307 	and.w	r3, r3, #7
 8009e30:	4904      	ldr	r1, [pc, #16]	@ (8009e44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009e32:	5ccb      	ldrb	r3, [r1, r3]
 8009e34:	f003 031f 	and.w	r3, r3, #31
 8009e38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	58024400 	.word	0x58024400
 8009e44:	08014918 	.word	0x08014918

08009e48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e4c:	b0c6      	sub	sp, #280	@ 0x118
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009e54:	2300      	movs	r3, #0
 8009e56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e68:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009e6c:	2500      	movs	r5, #0
 8009e6e:	ea54 0305 	orrs.w	r3, r4, r5
 8009e72:	d049      	beq.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e7e:	d02f      	beq.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009e80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e84:	d828      	bhi.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009e86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e8a:	d01a      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009e8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e90:	d822      	bhi.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d003      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009e96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e9a:	d007      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009e9c:	e01c      	b.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e9e:	4bab      	ldr	r3, [pc, #684]	@ (800a14c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea2:	4aaa      	ldr	r2, [pc, #680]	@ (800a14c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009eaa:	e01a      	b.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eb0:	3308      	adds	r3, #8
 8009eb2:	2102      	movs	r1, #2
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f002 fa49 	bl	800c34c <RCCEx_PLL2_Config>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009ec0:	e00f      	b.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ec6:	3328      	adds	r3, #40	@ 0x28
 8009ec8:	2102      	movs	r1, #2
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f002 faf0 	bl	800c4b0 <RCCEx_PLL3_Config>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009ed6:	e004      	b.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009ede:	e000      	b.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009ee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ee2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10a      	bne.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009eea:	4b98      	ldr	r3, [pc, #608]	@ (800a14c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009eee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ef6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ef8:	4a94      	ldr	r2, [pc, #592]	@ (800a14c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009efa:	430b      	orrs	r3, r1
 8009efc:	6513      	str	r3, [r2, #80]	@ 0x50
 8009efe:	e003      	b.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f10:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009f14:	f04f 0900 	mov.w	r9, #0
 8009f18:	ea58 0309 	orrs.w	r3, r8, r9
 8009f1c:	d047      	beq.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	d82a      	bhi.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009f28:	a201      	add	r2, pc, #4	@ (adr r2, 8009f30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f2e:	bf00      	nop
 8009f30:	08009f45 	.word	0x08009f45
 8009f34:	08009f53 	.word	0x08009f53
 8009f38:	08009f69 	.word	0x08009f69
 8009f3c:	08009f87 	.word	0x08009f87
 8009f40:	08009f87 	.word	0x08009f87
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f44:	4b81      	ldr	r3, [pc, #516]	@ (800a14c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f48:	4a80      	ldr	r2, [pc, #512]	@ (800a14c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f50:	e01a      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f56:	3308      	adds	r3, #8
 8009f58:	2100      	movs	r1, #0
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f002 f9f6 	bl	800c34c <RCCEx_PLL2_Config>
 8009f60:	4603      	mov	r3, r0
 8009f62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f66:	e00f      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f6c:	3328      	adds	r3, #40	@ 0x28
 8009f6e:	2100      	movs	r1, #0
 8009f70:	4618      	mov	r0, r3
 8009f72:	f002 fa9d 	bl	800c4b0 <RCCEx_PLL3_Config>
 8009f76:	4603      	mov	r3, r0
 8009f78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f7c:	e004      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f84:	e000      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10a      	bne.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009f90:	4b6e      	ldr	r3, [pc, #440]	@ (800a14c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f94:	f023 0107 	bic.w	r1, r3, #7
 8009f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f9e:	4a6b      	ldr	r2, [pc, #428]	@ (800a14c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009fa0:	430b      	orrs	r3, r1
 8009fa2:	6513      	str	r3, [r2, #80]	@ 0x50
 8009fa4:	e003      	b.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009faa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8009fba:	f04f 0b00 	mov.w	fp, #0
 8009fbe:	ea5a 030b 	orrs.w	r3, sl, fp
 8009fc2:	d05b      	beq.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009fcc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009fd0:	d03b      	beq.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8009fd2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009fd6:	d834      	bhi.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009fd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009fdc:	d037      	beq.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009fde:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009fe2:	d82e      	bhi.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009fe4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009fe8:	d033      	beq.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009fea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009fee:	d828      	bhi.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009ff0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ff4:	d01a      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009ff6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ffa:	d822      	bhi.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d003      	beq.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a000:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a004:	d007      	beq.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a006:	e01c      	b.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a008:	4b50      	ldr	r3, [pc, #320]	@ (800a14c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a00a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a00c:	4a4f      	ldr	r2, [pc, #316]	@ (800a14c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a00e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a012:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a014:	e01e      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a01a:	3308      	adds	r3, #8
 800a01c:	2100      	movs	r1, #0
 800a01e:	4618      	mov	r0, r3
 800a020:	f002 f994 	bl	800c34c <RCCEx_PLL2_Config>
 800a024:	4603      	mov	r3, r0
 800a026:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a02a:	e013      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a02c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a030:	3328      	adds	r3, #40	@ 0x28
 800a032:	2100      	movs	r1, #0
 800a034:	4618      	mov	r0, r3
 800a036:	f002 fa3b 	bl	800c4b0 <RCCEx_PLL3_Config>
 800a03a:	4603      	mov	r3, r0
 800a03c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a040:	e008      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a048:	e004      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a04a:	bf00      	nop
 800a04c:	e002      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a04e:	bf00      	nop
 800a050:	e000      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a052:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a054:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d10b      	bne.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a05c:	4b3b      	ldr	r3, [pc, #236]	@ (800a14c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a05e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a060:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a068:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a06c:	4a37      	ldr	r2, [pc, #220]	@ (800a14c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a06e:	430b      	orrs	r3, r1
 800a070:	6593      	str	r3, [r2, #88]	@ 0x58
 800a072:	e003      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a074:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a078:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a084:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a088:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a08c:	2300      	movs	r3, #0
 800a08e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a092:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a096:	460b      	mov	r3, r1
 800a098:	4313      	orrs	r3, r2
 800a09a:	d05d      	beq.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a09c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a0a4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a0a8:	d03b      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a0aa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a0ae:	d834      	bhi.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a0b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a0b4:	d037      	beq.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a0b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a0ba:	d82e      	bhi.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a0bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a0c0:	d033      	beq.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a0c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a0c6:	d828      	bhi.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a0c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a0cc:	d01a      	beq.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a0ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a0d2:	d822      	bhi.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d003      	beq.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a0d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a0dc:	d007      	beq.n	800a0ee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a0de:	e01c      	b.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0e0:	4b1a      	ldr	r3, [pc, #104]	@ (800a14c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a0e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e4:	4a19      	ldr	r2, [pc, #100]	@ (800a14c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a0e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a0ec:	e01e      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0f2:	3308      	adds	r3, #8
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f002 f928 	bl	800c34c <RCCEx_PLL2_Config>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a102:	e013      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a108:	3328      	adds	r3, #40	@ 0x28
 800a10a:	2100      	movs	r1, #0
 800a10c:	4618      	mov	r0, r3
 800a10e:	f002 f9cf 	bl	800c4b0 <RCCEx_PLL3_Config>
 800a112:	4603      	mov	r3, r0
 800a114:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a118:	e008      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a120:	e004      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a122:	bf00      	nop
 800a124:	e002      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a126:	bf00      	nop
 800a128:	e000      	b.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a12a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a12c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10d      	bne.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a134:	4b05      	ldr	r3, [pc, #20]	@ (800a14c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a138:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a13c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a140:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a144:	4a01      	ldr	r2, [pc, #4]	@ (800a14c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a146:	430b      	orrs	r3, r1
 800a148:	6593      	str	r3, [r2, #88]	@ 0x58
 800a14a:	e005      	b.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a14c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a150:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a154:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a160:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a164:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a168:	2300      	movs	r3, #0
 800a16a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a16e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a172:	460b      	mov	r3, r1
 800a174:	4313      	orrs	r3, r2
 800a176:	d03a      	beq.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a17c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a17e:	2b30      	cmp	r3, #48	@ 0x30
 800a180:	d01f      	beq.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a182:	2b30      	cmp	r3, #48	@ 0x30
 800a184:	d819      	bhi.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a186:	2b20      	cmp	r3, #32
 800a188:	d00c      	beq.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a18a:	2b20      	cmp	r3, #32
 800a18c:	d815      	bhi.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d019      	beq.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a192:	2b10      	cmp	r3, #16
 800a194:	d111      	bne.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a196:	4baa      	ldr	r3, [pc, #680]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a19a:	4aa9      	ldr	r2, [pc, #676]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a19c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a1a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a1a2:	e011      	b.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1a8:	3308      	adds	r3, #8
 800a1aa:	2102      	movs	r1, #2
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f002 f8cd 	bl	800c34c <RCCEx_PLL2_Config>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a1b8:	e006      	b.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a1c0:	e002      	b.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a1c2:	bf00      	nop
 800a1c4:	e000      	b.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a1c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d10a      	bne.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a1d0:	4b9b      	ldr	r3, [pc, #620]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a1d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1d4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a1d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1de:	4a98      	ldr	r2, [pc, #608]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a1e0:	430b      	orrs	r3, r1
 800a1e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a1e4:	e003      	b.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a1ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a1fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a1fe:	2300      	movs	r3, #0
 800a200:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a204:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a208:	460b      	mov	r3, r1
 800a20a:	4313      	orrs	r3, r2
 800a20c:	d051      	beq.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a20e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a214:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a218:	d035      	beq.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a21a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a21e:	d82e      	bhi.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a220:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a224:	d031      	beq.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a226:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a22a:	d828      	bhi.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a22c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a230:	d01a      	beq.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a232:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a236:	d822      	bhi.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d003      	beq.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a23c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a240:	d007      	beq.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a242:	e01c      	b.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a244:	4b7e      	ldr	r3, [pc, #504]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a248:	4a7d      	ldr	r2, [pc, #500]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a24a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a24e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a250:	e01c      	b.n	800a28c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a256:	3308      	adds	r3, #8
 800a258:	2100      	movs	r1, #0
 800a25a:	4618      	mov	r0, r3
 800a25c:	f002 f876 	bl	800c34c <RCCEx_PLL2_Config>
 800a260:	4603      	mov	r3, r0
 800a262:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a266:	e011      	b.n	800a28c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a26c:	3328      	adds	r3, #40	@ 0x28
 800a26e:	2100      	movs	r1, #0
 800a270:	4618      	mov	r0, r3
 800a272:	f002 f91d 	bl	800c4b0 <RCCEx_PLL3_Config>
 800a276:	4603      	mov	r3, r0
 800a278:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a27c:	e006      	b.n	800a28c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a284:	e002      	b.n	800a28c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a286:	bf00      	nop
 800a288:	e000      	b.n	800a28c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a28a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a28c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a290:	2b00      	cmp	r3, #0
 800a292:	d10a      	bne.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a294:	4b6a      	ldr	r3, [pc, #424]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a298:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a29c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2a2:	4a67      	ldr	r2, [pc, #412]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a2a4:	430b      	orrs	r3, r1
 800a2a6:	6513      	str	r3, [r2, #80]	@ 0x50
 800a2a8:	e003      	b.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a2b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a2be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a2c8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	d053      	beq.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a2d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a2dc:	d033      	beq.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a2de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a2e2:	d82c      	bhi.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a2e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a2e8:	d02f      	beq.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a2ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a2ee:	d826      	bhi.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a2f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a2f4:	d02b      	beq.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a2f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a2fa:	d820      	bhi.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a2fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a300:	d012      	beq.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a302:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a306:	d81a      	bhi.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d022      	beq.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a30c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a310:	d115      	bne.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a316:	3308      	adds	r3, #8
 800a318:	2101      	movs	r1, #1
 800a31a:	4618      	mov	r0, r3
 800a31c:	f002 f816 	bl	800c34c <RCCEx_PLL2_Config>
 800a320:	4603      	mov	r3, r0
 800a322:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a326:	e015      	b.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a32c:	3328      	adds	r3, #40	@ 0x28
 800a32e:	2101      	movs	r1, #1
 800a330:	4618      	mov	r0, r3
 800a332:	f002 f8bd 	bl	800c4b0 <RCCEx_PLL3_Config>
 800a336:	4603      	mov	r3, r0
 800a338:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a33c:	e00a      	b.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a344:	e006      	b.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a346:	bf00      	nop
 800a348:	e004      	b.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a34a:	bf00      	nop
 800a34c:	e002      	b.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a34e:	bf00      	nop
 800a350:	e000      	b.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a352:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a354:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d10a      	bne.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a35c:	4b38      	ldr	r3, [pc, #224]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a35e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a360:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a36a:	4a35      	ldr	r2, [pc, #212]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a36c:	430b      	orrs	r3, r1
 800a36e:	6513      	str	r3, [r2, #80]	@ 0x50
 800a370:	e003      	b.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a372:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a376:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a37a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a382:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a386:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a38a:	2300      	movs	r3, #0
 800a38c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a390:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a394:	460b      	mov	r3, r1
 800a396:	4313      	orrs	r3, r2
 800a398:	d058      	beq.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a39a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a39e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a3a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a3a6:	d033      	beq.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a3a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a3ac:	d82c      	bhi.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a3ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3b2:	d02f      	beq.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a3b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3b8:	d826      	bhi.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a3ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a3be:	d02b      	beq.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a3c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a3c4:	d820      	bhi.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a3c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3ca:	d012      	beq.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a3cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3d0:	d81a      	bhi.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d022      	beq.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a3d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3da:	d115      	bne.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3e0:	3308      	adds	r3, #8
 800a3e2:	2101      	movs	r1, #1
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f001 ffb1 	bl	800c34c <RCCEx_PLL2_Config>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a3f0:	e015      	b.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3f6:	3328      	adds	r3, #40	@ 0x28
 800a3f8:	2101      	movs	r1, #1
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f002 f858 	bl	800c4b0 <RCCEx_PLL3_Config>
 800a400:	4603      	mov	r3, r0
 800a402:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a406:	e00a      	b.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a40e:	e006      	b.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a410:	bf00      	nop
 800a412:	e004      	b.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a414:	bf00      	nop
 800a416:	e002      	b.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a418:	bf00      	nop
 800a41a:	e000      	b.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a41c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a41e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a422:	2b00      	cmp	r3, #0
 800a424:	d10e      	bne.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a426:	4b06      	ldr	r3, [pc, #24]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a42a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a42e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a432:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a436:	4a02      	ldr	r2, [pc, #8]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a438:	430b      	orrs	r3, r1
 800a43a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a43c:	e006      	b.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a43e:	bf00      	nop
 800a440:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a444:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a448:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a454:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a458:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a45c:	2300      	movs	r3, #0
 800a45e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a462:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a466:	460b      	mov	r3, r1
 800a468:	4313      	orrs	r3, r2
 800a46a:	d037      	beq.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a46c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a470:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a472:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a476:	d00e      	beq.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a478:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a47c:	d816      	bhi.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d018      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a482:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a486:	d111      	bne.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a488:	4bc4      	ldr	r3, [pc, #784]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a48a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a48c:	4ac3      	ldr	r2, [pc, #780]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a48e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a492:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a494:	e00f      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a49a:	3308      	adds	r3, #8
 800a49c:	2101      	movs	r1, #1
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f001 ff54 	bl	800c34c <RCCEx_PLL2_Config>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a4aa:	e004      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a4b2:	e000      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a4b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10a      	bne.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a4be:	4bb7      	ldr	r3, [pc, #732]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4c2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a4c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4cc:	4ab3      	ldr	r2, [pc, #716]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4ce:	430b      	orrs	r3, r1
 800a4d0:	6513      	str	r3, [r2, #80]	@ 0x50
 800a4d2:	e003      	b.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a4dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a4e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a4f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	d039      	beq.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a4fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a502:	2b03      	cmp	r3, #3
 800a504:	d81c      	bhi.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a506:	a201      	add	r2, pc, #4	@ (adr r2, 800a50c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50c:	0800a549 	.word	0x0800a549
 800a510:	0800a51d 	.word	0x0800a51d
 800a514:	0800a52b 	.word	0x0800a52b
 800a518:	0800a549 	.word	0x0800a549
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a51c:	4b9f      	ldr	r3, [pc, #636]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a520:	4a9e      	ldr	r2, [pc, #632]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a526:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a528:	e00f      	b.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a52e:	3308      	adds	r3, #8
 800a530:	2102      	movs	r1, #2
 800a532:	4618      	mov	r0, r3
 800a534:	f001 ff0a 	bl	800c34c <RCCEx_PLL2_Config>
 800a538:	4603      	mov	r3, r0
 800a53a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a53e:	e004      	b.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a546:	e000      	b.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a54a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d10a      	bne.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a552:	4b92      	ldr	r3, [pc, #584]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a556:	f023 0103 	bic.w	r1, r3, #3
 800a55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a55e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a560:	4a8e      	ldr	r2, [pc, #568]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a562:	430b      	orrs	r3, r1
 800a564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a566:	e003      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a568:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a56c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a578:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a57c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a580:	2300      	movs	r3, #0
 800a582:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a586:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a58a:	460b      	mov	r3, r1
 800a58c:	4313      	orrs	r3, r2
 800a58e:	f000 8099 	beq.w	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a592:	4b83      	ldr	r3, [pc, #524]	@ (800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a82      	ldr	r2, [pc, #520]	@ (800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a59c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a59e:	f7f8 faa1 	bl	8002ae4 <HAL_GetTick>
 800a5a2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5a6:	e00b      	b.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5a8:	f7f8 fa9c 	bl	8002ae4 <HAL_GetTick>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a5b2:	1ad3      	subs	r3, r2, r3
 800a5b4:	2b64      	cmp	r3, #100	@ 0x64
 800a5b6:	d903      	bls.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a5b8:	2303      	movs	r3, #3
 800a5ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a5be:	e005      	b.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5c0:	4b77      	ldr	r3, [pc, #476]	@ (800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d0ed      	beq.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a5cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d173      	bne.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a5d4:	4b71      	ldr	r3, [pc, #452]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a5d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a5e0:	4053      	eors	r3, r2
 800a5e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d015      	beq.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a5ea:	4b6c      	ldr	r3, [pc, #432]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5f2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a5f6:	4b69      	ldr	r3, [pc, #420]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5fa:	4a68      	ldr	r2, [pc, #416]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a600:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a602:	4b66      	ldr	r3, [pc, #408]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a606:	4a65      	ldr	r2, [pc, #404]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a608:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a60c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a60e:	4a63      	ldr	r2, [pc, #396]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a610:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a614:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a61a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a61e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a622:	d118      	bne.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a624:	f7f8 fa5e 	bl	8002ae4 <HAL_GetTick>
 800a628:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a62c:	e00d      	b.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a62e:	f7f8 fa59 	bl	8002ae4 <HAL_GetTick>
 800a632:	4602      	mov	r2, r0
 800a634:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a638:	1ad2      	subs	r2, r2, r3
 800a63a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a63e:	429a      	cmp	r2, r3
 800a640:	d903      	bls.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a642:	2303      	movs	r3, #3
 800a644:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800a648:	e005      	b.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a64a:	4b54      	ldr	r3, [pc, #336]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a64c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a64e:	f003 0302 	and.w	r3, r3, #2
 800a652:	2b00      	cmp	r3, #0
 800a654:	d0eb      	beq.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a656:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d129      	bne.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a662:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a66a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a66e:	d10e      	bne.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a670:	4b4a      	ldr	r3, [pc, #296]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a672:	691b      	ldr	r3, [r3, #16]
 800a674:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a67c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a680:	091a      	lsrs	r2, r3, #4
 800a682:	4b48      	ldr	r3, [pc, #288]	@ (800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a684:	4013      	ands	r3, r2
 800a686:	4a45      	ldr	r2, [pc, #276]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a688:	430b      	orrs	r3, r1
 800a68a:	6113      	str	r3, [r2, #16]
 800a68c:	e005      	b.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a68e:	4b43      	ldr	r3, [pc, #268]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a690:	691b      	ldr	r3, [r3, #16]
 800a692:	4a42      	ldr	r2, [pc, #264]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a694:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a698:	6113      	str	r3, [r2, #16]
 800a69a:	4b40      	ldr	r3, [pc, #256]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a69c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a6a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6aa:	4a3c      	ldr	r2, [pc, #240]	@ (800a79c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a6ac:	430b      	orrs	r3, r1
 800a6ae:	6713      	str	r3, [r2, #112]	@ 0x70
 800a6b0:	e008      	b.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a6b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800a6ba:	e003      	b.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a6c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6cc:	f002 0301 	and.w	r3, r2, #1
 800a6d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a6da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a6de:	460b      	mov	r3, r1
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	f000 808f 	beq.w	800a804 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a6e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a6ec:	2b28      	cmp	r3, #40	@ 0x28
 800a6ee:	d871      	bhi.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a6f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f6:	bf00      	nop
 800a6f8:	0800a7dd 	.word	0x0800a7dd
 800a6fc:	0800a7d5 	.word	0x0800a7d5
 800a700:	0800a7d5 	.word	0x0800a7d5
 800a704:	0800a7d5 	.word	0x0800a7d5
 800a708:	0800a7d5 	.word	0x0800a7d5
 800a70c:	0800a7d5 	.word	0x0800a7d5
 800a710:	0800a7d5 	.word	0x0800a7d5
 800a714:	0800a7d5 	.word	0x0800a7d5
 800a718:	0800a7a9 	.word	0x0800a7a9
 800a71c:	0800a7d5 	.word	0x0800a7d5
 800a720:	0800a7d5 	.word	0x0800a7d5
 800a724:	0800a7d5 	.word	0x0800a7d5
 800a728:	0800a7d5 	.word	0x0800a7d5
 800a72c:	0800a7d5 	.word	0x0800a7d5
 800a730:	0800a7d5 	.word	0x0800a7d5
 800a734:	0800a7d5 	.word	0x0800a7d5
 800a738:	0800a7bf 	.word	0x0800a7bf
 800a73c:	0800a7d5 	.word	0x0800a7d5
 800a740:	0800a7d5 	.word	0x0800a7d5
 800a744:	0800a7d5 	.word	0x0800a7d5
 800a748:	0800a7d5 	.word	0x0800a7d5
 800a74c:	0800a7d5 	.word	0x0800a7d5
 800a750:	0800a7d5 	.word	0x0800a7d5
 800a754:	0800a7d5 	.word	0x0800a7d5
 800a758:	0800a7dd 	.word	0x0800a7dd
 800a75c:	0800a7d5 	.word	0x0800a7d5
 800a760:	0800a7d5 	.word	0x0800a7d5
 800a764:	0800a7d5 	.word	0x0800a7d5
 800a768:	0800a7d5 	.word	0x0800a7d5
 800a76c:	0800a7d5 	.word	0x0800a7d5
 800a770:	0800a7d5 	.word	0x0800a7d5
 800a774:	0800a7d5 	.word	0x0800a7d5
 800a778:	0800a7dd 	.word	0x0800a7dd
 800a77c:	0800a7d5 	.word	0x0800a7d5
 800a780:	0800a7d5 	.word	0x0800a7d5
 800a784:	0800a7d5 	.word	0x0800a7d5
 800a788:	0800a7d5 	.word	0x0800a7d5
 800a78c:	0800a7d5 	.word	0x0800a7d5
 800a790:	0800a7d5 	.word	0x0800a7d5
 800a794:	0800a7d5 	.word	0x0800a7d5
 800a798:	0800a7dd 	.word	0x0800a7dd
 800a79c:	58024400 	.word	0x58024400
 800a7a0:	58024800 	.word	0x58024800
 800a7a4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7ac:	3308      	adds	r3, #8
 800a7ae:	2101      	movs	r1, #1
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f001 fdcb 	bl	800c34c <RCCEx_PLL2_Config>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a7bc:	e00f      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7c2:	3328      	adds	r3, #40	@ 0x28
 800a7c4:	2101      	movs	r1, #1
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f001 fe72 	bl	800c4b0 <RCCEx_PLL3_Config>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a7d2:	e004      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a7da:	e000      	b.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a7dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d10a      	bne.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a7e6:	4bbf      	ldr	r3, [pc, #764]	@ (800aae4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a7e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7ea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a7ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a7f4:	4abb      	ldr	r2, [pc, #748]	@ (800aae4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a7f6:	430b      	orrs	r3, r1
 800a7f8:	6553      	str	r3, [r2, #84]	@ 0x54
 800a7fa:	e003      	b.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a800:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80c:	f002 0302 	and.w	r3, r2, #2
 800a810:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a814:	2300      	movs	r3, #0
 800a816:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a81a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a81e:	460b      	mov	r3, r1
 800a820:	4313      	orrs	r3, r2
 800a822:	d041      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a82a:	2b05      	cmp	r3, #5
 800a82c:	d824      	bhi.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a82e:	a201      	add	r2, pc, #4	@ (adr r2, 800a834 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a834:	0800a881 	.word	0x0800a881
 800a838:	0800a84d 	.word	0x0800a84d
 800a83c:	0800a863 	.word	0x0800a863
 800a840:	0800a881 	.word	0x0800a881
 800a844:	0800a881 	.word	0x0800a881
 800a848:	0800a881 	.word	0x0800a881
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a84c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a850:	3308      	adds	r3, #8
 800a852:	2101      	movs	r1, #1
 800a854:	4618      	mov	r0, r3
 800a856:	f001 fd79 	bl	800c34c <RCCEx_PLL2_Config>
 800a85a:	4603      	mov	r3, r0
 800a85c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a860:	e00f      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a866:	3328      	adds	r3, #40	@ 0x28
 800a868:	2101      	movs	r1, #1
 800a86a:	4618      	mov	r0, r3
 800a86c:	f001 fe20 	bl	800c4b0 <RCCEx_PLL3_Config>
 800a870:	4603      	mov	r3, r0
 800a872:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a876:	e004      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a87e:	e000      	b.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a880:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a882:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a886:	2b00      	cmp	r3, #0
 800a888:	d10a      	bne.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a88a:	4b96      	ldr	r3, [pc, #600]	@ (800aae4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a88c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a88e:	f023 0107 	bic.w	r1, r3, #7
 800a892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a898:	4a92      	ldr	r2, [pc, #584]	@ (800aae4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a89a:	430b      	orrs	r3, r1
 800a89c:	6553      	str	r3, [r2, #84]	@ 0x54
 800a89e:	e003      	b.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a8a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b0:	f002 0304 	and.w	r3, r2, #4
 800a8b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a8be:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	d044      	beq.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a8c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8d0:	2b05      	cmp	r3, #5
 800a8d2:	d825      	bhi.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a8d4:	a201      	add	r2, pc, #4	@ (adr r2, 800a8dc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8da:	bf00      	nop
 800a8dc:	0800a929 	.word	0x0800a929
 800a8e0:	0800a8f5 	.word	0x0800a8f5
 800a8e4:	0800a90b 	.word	0x0800a90b
 800a8e8:	0800a929 	.word	0x0800a929
 800a8ec:	0800a929 	.word	0x0800a929
 800a8f0:	0800a929 	.word	0x0800a929
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8f8:	3308      	adds	r3, #8
 800a8fa:	2101      	movs	r1, #1
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f001 fd25 	bl	800c34c <RCCEx_PLL2_Config>
 800a902:	4603      	mov	r3, r0
 800a904:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a908:	e00f      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a90a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a90e:	3328      	adds	r3, #40	@ 0x28
 800a910:	2101      	movs	r1, #1
 800a912:	4618      	mov	r0, r3
 800a914:	f001 fdcc 	bl	800c4b0 <RCCEx_PLL3_Config>
 800a918:	4603      	mov	r3, r0
 800a91a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a91e:	e004      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a926:	e000      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a92a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d10b      	bne.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a932:	4b6c      	ldr	r3, [pc, #432]	@ (800aae4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a936:	f023 0107 	bic.w	r1, r3, #7
 800a93a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a93e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a942:	4a68      	ldr	r2, [pc, #416]	@ (800aae4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a944:	430b      	orrs	r3, r1
 800a946:	6593      	str	r3, [r2, #88]	@ 0x58
 800a948:	e003      	b.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a94a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a94e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	f002 0320 	and.w	r3, r2, #32
 800a95e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a962:	2300      	movs	r3, #0
 800a964:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a968:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a96c:	460b      	mov	r3, r1
 800a96e:	4313      	orrs	r3, r2
 800a970:	d055      	beq.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a976:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a97a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a97e:	d033      	beq.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a980:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a984:	d82c      	bhi.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a98a:	d02f      	beq.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a98c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a990:	d826      	bhi.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a992:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a996:	d02b      	beq.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a998:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a99c:	d820      	bhi.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a99e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9a2:	d012      	beq.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a9a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9a8:	d81a      	bhi.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d022      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a9ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9b2:	d115      	bne.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9b8:	3308      	adds	r3, #8
 800a9ba:	2100      	movs	r1, #0
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f001 fcc5 	bl	800c34c <RCCEx_PLL2_Config>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a9c8:	e015      	b.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a9ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9ce:	3328      	adds	r3, #40	@ 0x28
 800a9d0:	2102      	movs	r1, #2
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f001 fd6c 	bl	800c4b0 <RCCEx_PLL3_Config>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a9de:	e00a      	b.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a9e6:	e006      	b.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a9e8:	bf00      	nop
 800a9ea:	e004      	b.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a9ec:	bf00      	nop
 800a9ee:	e002      	b.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a9f0:	bf00      	nop
 800a9f2:	e000      	b.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a9f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d10b      	bne.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a9fe:	4b39      	ldr	r3, [pc, #228]	@ (800aae4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aa00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa02:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800aa06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa0e:	4a35      	ldr	r2, [pc, #212]	@ (800aae4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aa10:	430b      	orrs	r3, r1
 800aa12:	6553      	str	r3, [r2, #84]	@ 0x54
 800aa14:	e003      	b.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800aa1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa26:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800aa2a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aa2e:	2300      	movs	r3, #0
 800aa30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aa34:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800aa38:	460b      	mov	r3, r1
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	d058      	beq.n	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800aa3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aa46:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aa4a:	d033      	beq.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800aa4c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aa50:	d82c      	bhi.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aa52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa56:	d02f      	beq.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800aa58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa5c:	d826      	bhi.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aa5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa62:	d02b      	beq.n	800aabc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800aa64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aa68:	d820      	bhi.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aa6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa6e:	d012      	beq.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800aa70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aa74:	d81a      	bhi.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d022      	beq.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800aa7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa7e:	d115      	bne.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa84:	3308      	adds	r3, #8
 800aa86:	2100      	movs	r1, #0
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f001 fc5f 	bl	800c34c <RCCEx_PLL2_Config>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aa94:	e015      	b.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa9a:	3328      	adds	r3, #40	@ 0x28
 800aa9c:	2102      	movs	r1, #2
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f001 fd06 	bl	800c4b0 <RCCEx_PLL3_Config>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aaaa:	e00a      	b.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aab2:	e006      	b.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800aab4:	bf00      	nop
 800aab6:	e004      	b.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800aab8:	bf00      	nop
 800aaba:	e002      	b.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800aabc:	bf00      	nop
 800aabe:	e000      	b.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800aac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aac2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d10e      	bne.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aaca:	4b06      	ldr	r3, [pc, #24]	@ (800aae4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aacc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aace:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800aad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aad6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aada:	4a02      	ldr	r2, [pc, #8]	@ (800aae4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aadc:	430b      	orrs	r3, r1
 800aade:	6593      	str	r3, [r2, #88]	@ 0x58
 800aae0:	e006      	b.n	800aaf0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800aae2:	bf00      	nop
 800aae4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aae8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aaec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800aaf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800aafc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ab00:	2300      	movs	r3, #0
 800ab02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ab06:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	d055      	beq.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ab10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab18:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ab1c:	d033      	beq.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800ab1e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ab22:	d82c      	bhi.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ab24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab28:	d02f      	beq.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800ab2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab2e:	d826      	bhi.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ab30:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ab34:	d02b      	beq.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800ab36:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ab3a:	d820      	bhi.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ab3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab40:	d012      	beq.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800ab42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab46:	d81a      	bhi.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d022      	beq.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800ab4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab50:	d115      	bne.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab56:	3308      	adds	r3, #8
 800ab58:	2100      	movs	r1, #0
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f001 fbf6 	bl	800c34c <RCCEx_PLL2_Config>
 800ab60:	4603      	mov	r3, r0
 800ab62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ab66:	e015      	b.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab6c:	3328      	adds	r3, #40	@ 0x28
 800ab6e:	2102      	movs	r1, #2
 800ab70:	4618      	mov	r0, r3
 800ab72:	f001 fc9d 	bl	800c4b0 <RCCEx_PLL3_Config>
 800ab76:	4603      	mov	r3, r0
 800ab78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ab7c:	e00a      	b.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ab84:	e006      	b.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ab86:	bf00      	nop
 800ab88:	e004      	b.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ab8a:	bf00      	nop
 800ab8c:	e002      	b.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ab8e:	bf00      	nop
 800ab90:	e000      	b.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ab92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10b      	bne.n	800abb4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ab9c:	4ba0      	ldr	r3, [pc, #640]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ab9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aba0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800aba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aba8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800abac:	4a9c      	ldr	r2, [pc, #624]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800abae:	430b      	orrs	r3, r1
 800abb0:	6593      	str	r3, [r2, #88]	@ 0x58
 800abb2:	e003      	b.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800abb8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800abbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc4:	f002 0308 	and.w	r3, r2, #8
 800abc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800abcc:	2300      	movs	r3, #0
 800abce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800abd2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800abd6:	460b      	mov	r3, r1
 800abd8:	4313      	orrs	r3, r2
 800abda:	d01e      	beq.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800abdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800abe4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abe8:	d10c      	bne.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800abea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abee:	3328      	adds	r3, #40	@ 0x28
 800abf0:	2102      	movs	r1, #2
 800abf2:	4618      	mov	r0, r3
 800abf4:	f001 fc5c 	bl	800c4b0 <RCCEx_PLL3_Config>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d002      	beq.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800abfe:	2301      	movs	r3, #1
 800ac00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ac04:	4b86      	ldr	r3, [pc, #536]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac08:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ac0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac14:	4a82      	ldr	r2, [pc, #520]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac16:	430b      	orrs	r3, r1
 800ac18:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ac1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac22:	f002 0310 	and.w	r3, r2, #16
 800ac26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ac30:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ac34:	460b      	mov	r3, r1
 800ac36:	4313      	orrs	r3, r2
 800ac38:	d01e      	beq.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ac3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac46:	d10c      	bne.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac4c:	3328      	adds	r3, #40	@ 0x28
 800ac4e:	2102      	movs	r1, #2
 800ac50:	4618      	mov	r0, r3
 800ac52:	f001 fc2d 	bl	800c4b0 <RCCEx_PLL3_Config>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d002      	beq.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ac62:	4b6f      	ldr	r3, [pc, #444]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ac6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac72:	4a6b      	ldr	r2, [pc, #428]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac74:	430b      	orrs	r3, r1
 800ac76:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ac78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac80:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ac84:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ac86:	2300      	movs	r3, #0
 800ac88:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ac8a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800ac8e:	460b      	mov	r3, r1
 800ac90:	4313      	orrs	r3, r2
 800ac92:	d03e      	beq.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ac94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ac9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aca0:	d022      	beq.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800aca2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aca6:	d81b      	bhi.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d003      	beq.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800acac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acb0:	d00b      	beq.n	800acca <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800acb2:	e015      	b.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800acb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acb8:	3308      	adds	r3, #8
 800acba:	2100      	movs	r1, #0
 800acbc:	4618      	mov	r0, r3
 800acbe:	f001 fb45 	bl	800c34c <RCCEx_PLL2_Config>
 800acc2:	4603      	mov	r3, r0
 800acc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800acc8:	e00f      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800acca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acce:	3328      	adds	r3, #40	@ 0x28
 800acd0:	2102      	movs	r1, #2
 800acd2:	4618      	mov	r0, r3
 800acd4:	f001 fbec 	bl	800c4b0 <RCCEx_PLL3_Config>
 800acd8:	4603      	mov	r3, r0
 800acda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800acde:	e004      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ace0:	2301      	movs	r3, #1
 800ace2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ace6:	e000      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800ace8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d10b      	bne.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800acf2:	4b4b      	ldr	r3, [pc, #300]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800acf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acf6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800acfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ad02:	4a47      	ldr	r2, [pc, #284]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad04:	430b      	orrs	r3, r1
 800ad06:	6593      	str	r3, [r2, #88]	@ 0x58
 800ad08:	e003      	b.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ad12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ad1e:	673b      	str	r3, [r7, #112]	@ 0x70
 800ad20:	2300      	movs	r3, #0
 800ad22:	677b      	str	r3, [r7, #116]	@ 0x74
 800ad24:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ad28:	460b      	mov	r3, r1
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	d03b      	beq.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ad2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ad3a:	d01f      	beq.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800ad3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ad40:	d818      	bhi.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800ad42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad46:	d003      	beq.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800ad48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad4c:	d007      	beq.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800ad4e:	e011      	b.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad50:	4b33      	ldr	r3, [pc, #204]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad54:	4a32      	ldr	r2, [pc, #200]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ad5c:	e00f      	b.n	800ad7e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad62:	3328      	adds	r3, #40	@ 0x28
 800ad64:	2101      	movs	r1, #1
 800ad66:	4618      	mov	r0, r3
 800ad68:	f001 fba2 	bl	800c4b0 <RCCEx_PLL3_Config>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800ad72:	e004      	b.n	800ad7e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ad7a:	e000      	b.n	800ad7e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800ad7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d10b      	bne.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ad86:	4b26      	ldr	r3, [pc, #152]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ad8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad96:	4a22      	ldr	r2, [pc, #136]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad98:	430b      	orrs	r3, r1
 800ad9a:	6553      	str	r3, [r2, #84]	@ 0x54
 800ad9c:	e003      	b.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ada2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ada6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800adb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800adb4:	2300      	movs	r3, #0
 800adb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800adb8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800adbc:	460b      	mov	r3, r1
 800adbe:	4313      	orrs	r3, r2
 800adc0:	d034      	beq.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800adc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d003      	beq.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800adcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800add0:	d007      	beq.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800add2:	e011      	b.n	800adf8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800add4:	4b12      	ldr	r3, [pc, #72]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800add6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800add8:	4a11      	ldr	r2, [pc, #68]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800adda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800adde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ade0:	e00e      	b.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ade2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ade6:	3308      	adds	r3, #8
 800ade8:	2102      	movs	r1, #2
 800adea:	4618      	mov	r0, r3
 800adec:	f001 faae 	bl	800c34c <RCCEx_PLL2_Config>
 800adf0:	4603      	mov	r3, r0
 800adf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800adf6:	e003      	b.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800adfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d10d      	bne.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ae08:	4b05      	ldr	r3, [pc, #20]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae0c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ae10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae16:	4a02      	ldr	r2, [pc, #8]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae18:	430b      	orrs	r3, r1
 800ae1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ae1c:	e006      	b.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ae1e:	bf00      	nop
 800ae20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ae2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae34:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ae38:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ae3e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ae42:	460b      	mov	r3, r1
 800ae44:	4313      	orrs	r3, r2
 800ae46:	d00c      	beq.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ae48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae4c:	3328      	adds	r3, #40	@ 0x28
 800ae4e:	2102      	movs	r1, #2
 800ae50:	4618      	mov	r0, r3
 800ae52:	f001 fb2d 	bl	800c4b0 <RCCEx_PLL3_Config>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d002      	beq.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ae62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ae6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae70:	2300      	movs	r3, #0
 800ae72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ae74:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ae78:	460b      	mov	r3, r1
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	d036      	beq.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ae7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae88:	d018      	beq.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800ae8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae8e:	d811      	bhi.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ae90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae94:	d014      	beq.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800ae96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae9a:	d80b      	bhi.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d011      	beq.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800aea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aea4:	d106      	bne.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aea6:	4bb7      	ldr	r3, [pc, #732]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeaa:	4ab6      	ldr	r2, [pc, #728]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aeac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aeb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800aeb2:	e008      	b.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aeba:	e004      	b.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800aebc:	bf00      	nop
 800aebe:	e002      	b.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800aec0:	bf00      	nop
 800aec2:	e000      	b.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800aec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aec6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d10a      	bne.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aece:	4bad      	ldr	r3, [pc, #692]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aed2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800aed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aedc:	4aa9      	ldr	r2, [pc, #676]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800aede:	430b      	orrs	r3, r1
 800aee0:	6553      	str	r3, [r2, #84]	@ 0x54
 800aee2:	e003      	b.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aee4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aee8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800aeec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800aef8:	653b      	str	r3, [r7, #80]	@ 0x50
 800aefa:	2300      	movs	r3, #0
 800aefc:	657b      	str	r3, [r7, #84]	@ 0x54
 800aefe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800af02:	460b      	mov	r3, r1
 800af04:	4313      	orrs	r3, r2
 800af06:	d009      	beq.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800af08:	4b9e      	ldr	r3, [pc, #632]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af0c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800af10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af16:	4a9b      	ldr	r2, [pc, #620]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af18:	430b      	orrs	r3, r1
 800af1a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800af1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af24:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800af28:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af2a:	2300      	movs	r3, #0
 800af2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af2e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800af32:	460b      	mov	r3, r1
 800af34:	4313      	orrs	r3, r2
 800af36:	d009      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800af38:	4b92      	ldr	r3, [pc, #584]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af3c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800af40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af46:	4a8f      	ldr	r2, [pc, #572]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af48:	430b      	orrs	r3, r1
 800af4a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800af4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af54:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800af58:	643b      	str	r3, [r7, #64]	@ 0x40
 800af5a:	2300      	movs	r3, #0
 800af5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800af5e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800af62:	460b      	mov	r3, r1
 800af64:	4313      	orrs	r3, r2
 800af66:	d00e      	beq.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800af68:	4b86      	ldr	r3, [pc, #536]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af6a:	691b      	ldr	r3, [r3, #16]
 800af6c:	4a85      	ldr	r2, [pc, #532]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800af72:	6113      	str	r3, [r2, #16]
 800af74:	4b83      	ldr	r3, [pc, #524]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af76:	6919      	ldr	r1, [r3, #16]
 800af78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800af80:	4a80      	ldr	r2, [pc, #512]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af82:	430b      	orrs	r3, r1
 800af84:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800af86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800af92:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af94:	2300      	movs	r3, #0
 800af96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af98:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800af9c:	460b      	mov	r3, r1
 800af9e:	4313      	orrs	r3, r2
 800afa0:	d009      	beq.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800afa2:	4b78      	ldr	r3, [pc, #480]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800afa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afa6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800afaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afb0:	4a74      	ldr	r2, [pc, #464]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800afb2:	430b      	orrs	r3, r1
 800afb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800afb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800afc2:	633b      	str	r3, [r7, #48]	@ 0x30
 800afc4:	2300      	movs	r3, #0
 800afc6:	637b      	str	r3, [r7, #52]	@ 0x34
 800afc8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800afcc:	460b      	mov	r3, r1
 800afce:	4313      	orrs	r3, r2
 800afd0:	d00a      	beq.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800afd2:	4b6c      	ldr	r3, [pc, #432]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800afd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afd6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800afda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afe2:	4a68      	ldr	r2, [pc, #416]	@ (800b184 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800afe4:	430b      	orrs	r3, r1
 800afe6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800afe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff0:	2100      	movs	r1, #0
 800aff2:	62b9      	str	r1, [r7, #40]	@ 0x28
 800aff4:	f003 0301 	and.w	r3, r3, #1
 800aff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800affa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800affe:	460b      	mov	r3, r1
 800b000:	4313      	orrs	r3, r2
 800b002:	d011      	beq.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b008:	3308      	adds	r3, #8
 800b00a:	2100      	movs	r1, #0
 800b00c:	4618      	mov	r0, r3
 800b00e:	f001 f99d 	bl	800c34c <RCCEx_PLL2_Config>
 800b012:	4603      	mov	r3, r0
 800b014:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b018:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d003      	beq.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b020:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b024:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b030:	2100      	movs	r1, #0
 800b032:	6239      	str	r1, [r7, #32]
 800b034:	f003 0302 	and.w	r3, r3, #2
 800b038:	627b      	str	r3, [r7, #36]	@ 0x24
 800b03a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b03e:	460b      	mov	r3, r1
 800b040:	4313      	orrs	r3, r2
 800b042:	d011      	beq.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b048:	3308      	adds	r3, #8
 800b04a:	2101      	movs	r1, #1
 800b04c:	4618      	mov	r0, r3
 800b04e:	f001 f97d 	bl	800c34c <RCCEx_PLL2_Config>
 800b052:	4603      	mov	r3, r0
 800b054:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b058:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d003      	beq.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b060:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b064:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b070:	2100      	movs	r1, #0
 800b072:	61b9      	str	r1, [r7, #24]
 800b074:	f003 0304 	and.w	r3, r3, #4
 800b078:	61fb      	str	r3, [r7, #28]
 800b07a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b07e:	460b      	mov	r3, r1
 800b080:	4313      	orrs	r3, r2
 800b082:	d011      	beq.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b088:	3308      	adds	r3, #8
 800b08a:	2102      	movs	r1, #2
 800b08c:	4618      	mov	r0, r3
 800b08e:	f001 f95d 	bl	800c34c <RCCEx_PLL2_Config>
 800b092:	4603      	mov	r3, r0
 800b094:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b098:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d003      	beq.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b0a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b0a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	6139      	str	r1, [r7, #16]
 800b0b4:	f003 0308 	and.w	r3, r3, #8
 800b0b8:	617b      	str	r3, [r7, #20]
 800b0ba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b0be:	460b      	mov	r3, r1
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	d011      	beq.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0c8:	3328      	adds	r3, #40	@ 0x28
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f001 f9ef 	bl	800c4b0 <RCCEx_PLL3_Config>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800b0d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d003      	beq.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b0e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	60b9      	str	r1, [r7, #8]
 800b0f4:	f003 0310 	and.w	r3, r3, #16
 800b0f8:	60fb      	str	r3, [r7, #12]
 800b0fa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b0fe:	460b      	mov	r3, r1
 800b100:	4313      	orrs	r3, r2
 800b102:	d011      	beq.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b108:	3328      	adds	r3, #40	@ 0x28
 800b10a:	2101      	movs	r1, #1
 800b10c:	4618      	mov	r0, r3
 800b10e:	f001 f9cf 	bl	800c4b0 <RCCEx_PLL3_Config>
 800b112:	4603      	mov	r3, r0
 800b114:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b118:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d003      	beq.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b120:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b124:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b130:	2100      	movs	r1, #0
 800b132:	6039      	str	r1, [r7, #0]
 800b134:	f003 0320 	and.w	r3, r3, #32
 800b138:	607b      	str	r3, [r7, #4]
 800b13a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b13e:	460b      	mov	r3, r1
 800b140:	4313      	orrs	r3, r2
 800b142:	d011      	beq.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b148:	3328      	adds	r3, #40	@ 0x28
 800b14a:	2102      	movs	r1, #2
 800b14c:	4618      	mov	r0, r3
 800b14e:	f001 f9af 	bl	800c4b0 <RCCEx_PLL3_Config>
 800b152:	4603      	mov	r3, r0
 800b154:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b158:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d003      	beq.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b160:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b164:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800b168:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d101      	bne.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b170:	2300      	movs	r3, #0
 800b172:	e000      	b.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b174:	2301      	movs	r3, #1
}
 800b176:	4618      	mov	r0, r3
 800b178:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800b17c:	46bd      	mov	sp, r7
 800b17e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b182:	bf00      	nop
 800b184:	58024400 	.word	0x58024400

0800b188 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b090      	sub	sp, #64	@ 0x40
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b192:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b196:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b19a:	430b      	orrs	r3, r1
 800b19c:	f040 8094 	bne.w	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b1a0:	4b9b      	ldr	r3, [pc, #620]	@ (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1a4:	f003 0307 	and.w	r3, r3, #7
 800b1a8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b1aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ac:	2b04      	cmp	r3, #4
 800b1ae:	f200 8087 	bhi.w	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b1b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b8:	0800b1cd 	.word	0x0800b1cd
 800b1bc:	0800b1f5 	.word	0x0800b1f5
 800b1c0:	0800b21d 	.word	0x0800b21d
 800b1c4:	0800b2b9 	.word	0x0800b2b9
 800b1c8:	0800b245 	.word	0x0800b245
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1cc:	4b90      	ldr	r3, [pc, #576]	@ (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b1d8:	d108      	bne.n	800b1ec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f000 ff62 	bl	800c0a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1e8:	f000 bc93 	b.w	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1f0:	f000 bc8f 	b.w	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1f4:	4b86      	ldr	r3, [pc, #536]	@ (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b200:	d108      	bne.n	800b214 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b202:	f107 0318 	add.w	r3, r7, #24
 800b206:	4618      	mov	r0, r3
 800b208:	f000 fca6 	bl	800bb58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b210:	f000 bc7f 	b.w	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b214:	2300      	movs	r3, #0
 800b216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b218:	f000 bc7b 	b.w	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b21c:	4b7c      	ldr	r3, [pc, #496]	@ (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b228:	d108      	bne.n	800b23c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b22a:	f107 030c 	add.w	r3, r7, #12
 800b22e:	4618      	mov	r0, r3
 800b230:	f000 fde6 	bl	800be00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b238:	f000 bc6b 	b.w	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b240:	f000 bc67 	b.w	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b244:	4b72      	ldr	r3, [pc, #456]	@ (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b248:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b24c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b24e:	4b70      	ldr	r3, [pc, #448]	@ (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f003 0304 	and.w	r3, r3, #4
 800b256:	2b04      	cmp	r3, #4
 800b258:	d10c      	bne.n	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b25a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d109      	bne.n	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b260:	4b6b      	ldr	r3, [pc, #428]	@ (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	08db      	lsrs	r3, r3, #3
 800b266:	f003 0303 	and.w	r3, r3, #3
 800b26a:	4a6a      	ldr	r2, [pc, #424]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b26c:	fa22 f303 	lsr.w	r3, r2, r3
 800b270:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b272:	e01f      	b.n	800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b274:	4b66      	ldr	r3, [pc, #408]	@ (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b27c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b280:	d106      	bne.n	800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b284:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b288:	d102      	bne.n	800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b28a:	4b63      	ldr	r3, [pc, #396]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b28c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b28e:	e011      	b.n	800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b290:	4b5f      	ldr	r3, [pc, #380]	@ (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b298:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b29c:	d106      	bne.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b29e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2a4:	d102      	bne.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b2a6:	4b5d      	ldr	r3, [pc, #372]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2aa:	e003      	b.n	800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b2b0:	f000 bc2f 	b.w	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b2b4:	f000 bc2d 	b.w	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b2b8:	4b59      	ldr	r3, [pc, #356]	@ (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2bc:	f000 bc29 	b.w	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2c4:	f000 bc25 	b.w	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b2c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2cc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b2d0:	430b      	orrs	r3, r1
 800b2d2:	f040 80a7 	bne.w	800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b2d6:	4b4e      	ldr	r3, [pc, #312]	@ (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2da:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b2de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b2e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b2e6:	d054      	beq.n	800b392 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b2ee:	f200 808b 	bhi.w	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b2f8:	f000 8083 	beq.w	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b2fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b302:	f200 8081 	bhi.w	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b308:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b30c:	d02f      	beq.n	800b36e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b310:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b314:	d878      	bhi.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d004      	beq.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b322:	d012      	beq.n	800b34a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b324:	e070      	b.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b326:	4b3a      	ldr	r3, [pc, #232]	@ (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b32e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b332:	d107      	bne.n	800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b338:	4618      	mov	r0, r3
 800b33a:	f000 feb5 	bl	800c0a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b33e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b342:	e3e6      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b344:	2300      	movs	r3, #0
 800b346:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b348:	e3e3      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b34a:	4b31      	ldr	r3, [pc, #196]	@ (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b352:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b356:	d107      	bne.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b358:	f107 0318 	add.w	r3, r7, #24
 800b35c:	4618      	mov	r0, r3
 800b35e:	f000 fbfb 	bl	800bb58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b362:	69bb      	ldr	r3, [r7, #24]
 800b364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b366:	e3d4      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b368:	2300      	movs	r3, #0
 800b36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b36c:	e3d1      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b36e:	4b28      	ldr	r3, [pc, #160]	@ (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b376:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b37a:	d107      	bne.n	800b38c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b37c:	f107 030c 	add.w	r3, r7, #12
 800b380:	4618      	mov	r0, r3
 800b382:	f000 fd3d 	bl	800be00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b38a:	e3c2      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b38c:	2300      	movs	r3, #0
 800b38e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b390:	e3bf      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b392:	4b1f      	ldr	r3, [pc, #124]	@ (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b396:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b39a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b39c:	4b1c      	ldr	r3, [pc, #112]	@ (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f003 0304 	and.w	r3, r3, #4
 800b3a4:	2b04      	cmp	r3, #4
 800b3a6:	d10c      	bne.n	800b3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b3a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d109      	bne.n	800b3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3ae:	4b18      	ldr	r3, [pc, #96]	@ (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	08db      	lsrs	r3, r3, #3
 800b3b4:	f003 0303 	and.w	r3, r3, #3
 800b3b8:	4a16      	ldr	r2, [pc, #88]	@ (800b414 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b3ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b3be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3c0:	e01e      	b.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3c2:	4b13      	ldr	r3, [pc, #76]	@ (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3ce:	d106      	bne.n	800b3de <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b3d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3d6:	d102      	bne.n	800b3de <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b3d8:	4b0f      	ldr	r3, [pc, #60]	@ (800b418 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b3da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3dc:	e010      	b.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3de:	4b0c      	ldr	r3, [pc, #48]	@ (800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3ea:	d106      	bne.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b3ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3f2:	d102      	bne.n	800b3fa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b3f4:	4b09      	ldr	r3, [pc, #36]	@ (800b41c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3f8:	e002      	b.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b3fe:	e388      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b400:	e387      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b402:	4b07      	ldr	r3, [pc, #28]	@ (800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b406:	e384      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b408:	2300      	movs	r3, #0
 800b40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b40c:	e381      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b40e:	bf00      	nop
 800b410:	58024400 	.word	0x58024400
 800b414:	03d09000 	.word	0x03d09000
 800b418:	003d0900 	.word	0x003d0900
 800b41c:	017d7840 	.word	0x017d7840
 800b420:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b424:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b428:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b42c:	430b      	orrs	r3, r1
 800b42e:	f040 809c 	bne.w	800b56a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b432:	4b9e      	ldr	r3, [pc, #632]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b436:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b43a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b442:	d054      	beq.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b446:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b44a:	f200 808b 	bhi.w	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b450:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b454:	f000 8083 	beq.w	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b45a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b45e:	f200 8081 	bhi.w	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b464:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b468:	d02f      	beq.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b46c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b470:	d878      	bhi.n	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b474:	2b00      	cmp	r3, #0
 800b476:	d004      	beq.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b47a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b47e:	d012      	beq.n	800b4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b480:	e070      	b.n	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b482:	4b8a      	ldr	r3, [pc, #552]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b48a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b48e:	d107      	bne.n	800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b490:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b494:	4618      	mov	r0, r3
 800b496:	f000 fe07 	bl	800c0a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b49c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b49e:	e338      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4a4:	e335      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4a6:	4b81      	ldr	r3, [pc, #516]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b4b2:	d107      	bne.n	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4b4:	f107 0318 	add.w	r3, r7, #24
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f000 fb4d 	bl	800bb58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b4be:	69bb      	ldr	r3, [r7, #24]
 800b4c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4c2:	e326      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4c8:	e323      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4ca:	4b78      	ldr	r3, [pc, #480]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b4d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b4d6:	d107      	bne.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4d8:	f107 030c 	add.w	r3, r7, #12
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f000 fc8f 	bl	800be00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4e6:	e314      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4ec:	e311      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b4ee:	4b6f      	ldr	r3, [pc, #444]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b4f6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b4f8:	4b6c      	ldr	r3, [pc, #432]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f003 0304 	and.w	r3, r3, #4
 800b500:	2b04      	cmp	r3, #4
 800b502:	d10c      	bne.n	800b51e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b506:	2b00      	cmp	r3, #0
 800b508:	d109      	bne.n	800b51e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b50a:	4b68      	ldr	r3, [pc, #416]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	08db      	lsrs	r3, r3, #3
 800b510:	f003 0303 	and.w	r3, r3, #3
 800b514:	4a66      	ldr	r2, [pc, #408]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b516:	fa22 f303 	lsr.w	r3, r2, r3
 800b51a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b51c:	e01e      	b.n	800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b51e:	4b63      	ldr	r3, [pc, #396]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b52a:	d106      	bne.n	800b53a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b52c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b52e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b532:	d102      	bne.n	800b53a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b534:	4b5f      	ldr	r3, [pc, #380]	@ (800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b538:	e010      	b.n	800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b53a:	4b5c      	ldr	r3, [pc, #368]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b542:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b546:	d106      	bne.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b54a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b54e:	d102      	bne.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b550:	4b59      	ldr	r3, [pc, #356]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b552:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b554:	e002      	b.n	800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b556:	2300      	movs	r3, #0
 800b558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b55a:	e2da      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b55c:	e2d9      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b55e:	4b57      	ldr	r3, [pc, #348]	@ (800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b562:	e2d6      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b564:	2300      	movs	r3, #0
 800b566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b568:	e2d3      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b56a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b56e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b572:	430b      	orrs	r3, r1
 800b574:	f040 80a7 	bne.w	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b578:	4b4c      	ldr	r3, [pc, #304]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b57a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b57c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b580:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b584:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b588:	d055      	beq.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b58a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b58c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b590:	f200 8096 	bhi.w	800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b596:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b59a:	f000 8084 	beq.w	800b6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b5a4:	f200 808c 	bhi.w	800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b5ae:	d030      	beq.n	800b612 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b5b6:	f200 8083 	bhi.w	800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d004      	beq.n	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5c6:	d012      	beq.n	800b5ee <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b5c8:	e07a      	b.n	800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b5ca:	4b38      	ldr	r3, [pc, #224]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b5d2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b5d6:	d107      	bne.n	800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f000 fd63 	bl	800c0a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5e6:	e294      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5ec:	e291      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5ee:	4b2f      	ldr	r3, [pc, #188]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b5f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b5fa:	d107      	bne.n	800b60c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5fc:	f107 0318 	add.w	r3, r7, #24
 800b600:	4618      	mov	r0, r3
 800b602:	f000 faa9 	bl	800bb58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b606:	69bb      	ldr	r3, [r7, #24]
 800b608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b60a:	e282      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b60c:	2300      	movs	r3, #0
 800b60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b610:	e27f      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b612:	4b26      	ldr	r3, [pc, #152]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b61a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b61e:	d107      	bne.n	800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b620:	f107 030c 	add.w	r3, r7, #12
 800b624:	4618      	mov	r0, r3
 800b626:	f000 fbeb 	bl	800be00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b62e:	e270      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b630:	2300      	movs	r3, #0
 800b632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b634:	e26d      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b636:	4b1d      	ldr	r3, [pc, #116]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b63a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b63e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b640:	4b1a      	ldr	r3, [pc, #104]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f003 0304 	and.w	r3, r3, #4
 800b648:	2b04      	cmp	r3, #4
 800b64a:	d10c      	bne.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b64c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d109      	bne.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b652:	4b16      	ldr	r3, [pc, #88]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	08db      	lsrs	r3, r3, #3
 800b658:	f003 0303 	and.w	r3, r3, #3
 800b65c:	4a14      	ldr	r2, [pc, #80]	@ (800b6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b65e:	fa22 f303 	lsr.w	r3, r2, r3
 800b662:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b664:	e01e      	b.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b666:	4b11      	ldr	r3, [pc, #68]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b66e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b672:	d106      	bne.n	800b682 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b676:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b67a:	d102      	bne.n	800b682 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b67c:	4b0d      	ldr	r3, [pc, #52]	@ (800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b67e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b680:	e010      	b.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b682:	4b0a      	ldr	r3, [pc, #40]	@ (800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b68a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b68e:	d106      	bne.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b696:	d102      	bne.n	800b69e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b698:	4b07      	ldr	r3, [pc, #28]	@ (800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b69c:	e002      	b.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b6a2:	e236      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b6a4:	e235      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b6a6:	4b05      	ldr	r3, [pc, #20]	@ (800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b6a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6aa:	e232      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b6ac:	58024400 	.word	0x58024400
 800b6b0:	03d09000 	.word	0x03d09000
 800b6b4:	003d0900 	.word	0x003d0900
 800b6b8:	017d7840 	.word	0x017d7840
 800b6bc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6c4:	e225      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b6c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6ca:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b6ce:	430b      	orrs	r3, r1
 800b6d0:	f040 8085 	bne.w	800b7de <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b6d4:	4b9c      	ldr	r3, [pc, #624]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b6d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6d8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b6dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b6de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b6e4:	d06b      	beq.n	800b7be <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b6ec:	d874      	bhi.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b6f4:	d056      	beq.n	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b6fc:	d86c      	bhi.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b700:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b704:	d03b      	beq.n	800b77e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b708:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b70c:	d864      	bhi.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b70e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b710:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b714:	d021      	beq.n	800b75a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b718:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b71c:	d85c      	bhi.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b720:	2b00      	cmp	r3, #0
 800b722:	d004      	beq.n	800b72e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b726:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b72a:	d004      	beq.n	800b736 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b72c:	e054      	b.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b72e:	f7fe fb5f 	bl	8009df0 <HAL_RCC_GetPCLK1Freq>
 800b732:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b734:	e1ed      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b736:	4b84      	ldr	r3, [pc, #528]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b73e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b742:	d107      	bne.n	800b754 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b744:	f107 0318 	add.w	r3, r7, #24
 800b748:	4618      	mov	r0, r3
 800b74a:	f000 fa05 	bl	800bb58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b752:	e1de      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b754:	2300      	movs	r3, #0
 800b756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b758:	e1db      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b75a:	4b7b      	ldr	r3, [pc, #492]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b762:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b766:	d107      	bne.n	800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b768:	f107 030c 	add.w	r3, r7, #12
 800b76c:	4618      	mov	r0, r3
 800b76e:	f000 fb47 	bl	800be00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b776:	e1cc      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b778:	2300      	movs	r3, #0
 800b77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b77c:	e1c9      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b77e:	4b72      	ldr	r3, [pc, #456]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f003 0304 	and.w	r3, r3, #4
 800b786:	2b04      	cmp	r3, #4
 800b788:	d109      	bne.n	800b79e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b78a:	4b6f      	ldr	r3, [pc, #444]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	08db      	lsrs	r3, r3, #3
 800b790:	f003 0303 	and.w	r3, r3, #3
 800b794:	4a6d      	ldr	r2, [pc, #436]	@ (800b94c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b796:	fa22 f303 	lsr.w	r3, r2, r3
 800b79a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b79c:	e1b9      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7a2:	e1b6      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b7a4:	4b68      	ldr	r3, [pc, #416]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7b0:	d102      	bne.n	800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b7b2:	4b67      	ldr	r3, [pc, #412]	@ (800b950 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b7b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7b6:	e1ac      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7bc:	e1a9      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b7be:	4b62      	ldr	r3, [pc, #392]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b7c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7ca:	d102      	bne.n	800b7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b7cc:	4b61      	ldr	r3, [pc, #388]	@ (800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b7ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7d0:	e19f      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7d6:	e19c      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7dc:	e199      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b7de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7e2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b7e6:	430b      	orrs	r3, r1
 800b7e8:	d173      	bne.n	800b8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b7ea:	4b57      	ldr	r3, [pc, #348]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b7f2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b7fa:	d02f      	beq.n	800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b802:	d863      	bhi.n	800b8cc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b806:	2b00      	cmp	r3, #0
 800b808:	d004      	beq.n	800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b80c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b810:	d012      	beq.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b812:	e05b      	b.n	800b8cc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b814:	4b4c      	ldr	r3, [pc, #304]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b81c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b820:	d107      	bne.n	800b832 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b822:	f107 0318 	add.w	r3, r7, #24
 800b826:	4618      	mov	r0, r3
 800b828:	f000 f996 	bl	800bb58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b82c:	69bb      	ldr	r3, [r7, #24]
 800b82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b830:	e16f      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b832:	2300      	movs	r3, #0
 800b834:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b836:	e16c      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b838:	4b43      	ldr	r3, [pc, #268]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b840:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b844:	d107      	bne.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b846:	f107 030c 	add.w	r3, r7, #12
 800b84a:	4618      	mov	r0, r3
 800b84c:	f000 fad8 	bl	800be00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b854:	e15d      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b856:	2300      	movs	r3, #0
 800b858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b85a:	e15a      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b85c:	4b3a      	ldr	r3, [pc, #232]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b85e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b860:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b864:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b866:	4b38      	ldr	r3, [pc, #224]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f003 0304 	and.w	r3, r3, #4
 800b86e:	2b04      	cmp	r3, #4
 800b870:	d10c      	bne.n	800b88c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b874:	2b00      	cmp	r3, #0
 800b876:	d109      	bne.n	800b88c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b878:	4b33      	ldr	r3, [pc, #204]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	08db      	lsrs	r3, r3, #3
 800b87e:	f003 0303 	and.w	r3, r3, #3
 800b882:	4a32      	ldr	r2, [pc, #200]	@ (800b94c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b884:	fa22 f303 	lsr.w	r3, r2, r3
 800b888:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b88a:	e01e      	b.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b88c:	4b2e      	ldr	r3, [pc, #184]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b894:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b898:	d106      	bne.n	800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b89a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b89c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8a0:	d102      	bne.n	800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b8a2:	4b2b      	ldr	r3, [pc, #172]	@ (800b950 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b8a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8a6:	e010      	b.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8a8:	4b27      	ldr	r3, [pc, #156]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8b4:	d106      	bne.n	800b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b8b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8bc:	d102      	bne.n	800b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b8be:	4b25      	ldr	r3, [pc, #148]	@ (800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8c2:	e002      	b.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b8c8:	e123      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b8ca:	e122      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8d0:	e11f      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b8d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8d6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b8da:	430b      	orrs	r3, r1
 800b8dc:	d13c      	bne.n	800b958 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b8de:	4b1a      	ldr	r3, [pc, #104]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b8e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b8e6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d004      	beq.n	800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8f4:	d012      	beq.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b8f6:	e023      	b.n	800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b8f8:	4b13      	ldr	r3, [pc, #76]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b900:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b904:	d107      	bne.n	800b916 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b90a:	4618      	mov	r0, r3
 800b90c:	f000 fbcc 	bl	800c0a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b914:	e0fd      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b916:	2300      	movs	r3, #0
 800b918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b91a:	e0fa      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b91c:	4b0a      	ldr	r3, [pc, #40]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b924:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b928:	d107      	bne.n	800b93a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b92a:	f107 0318 	add.w	r3, r7, #24
 800b92e:	4618      	mov	r0, r3
 800b930:	f000 f912 	bl	800bb58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b934:	6a3b      	ldr	r3, [r7, #32]
 800b936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b938:	e0eb      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b93a:	2300      	movs	r3, #0
 800b93c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b93e:	e0e8      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b940:	2300      	movs	r3, #0
 800b942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b944:	e0e5      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b946:	bf00      	nop
 800b948:	58024400 	.word	0x58024400
 800b94c:	03d09000 	.word	0x03d09000
 800b950:	003d0900 	.word	0x003d0900
 800b954:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b95c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b960:	430b      	orrs	r3, r1
 800b962:	f040 8085 	bne.w	800ba70 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b966:	4b6d      	ldr	r3, [pc, #436]	@ (800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b96a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b96e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b972:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b976:	d06b      	beq.n	800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b97a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b97e:	d874      	bhi.n	800ba6a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b986:	d056      	beq.n	800ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b98a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b98e:	d86c      	bhi.n	800ba6a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b992:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b996:	d03b      	beq.n	800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b99a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b99e:	d864      	bhi.n	800ba6a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b9a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9a6:	d021      	beq.n	800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9ae:	d85c      	bhi.n	800ba6a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d004      	beq.n	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b9b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9bc:	d004      	beq.n	800b9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b9be:	e054      	b.n	800ba6a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b9c0:	f000 f8b4 	bl	800bb2c <HAL_RCCEx_GetD3PCLK1Freq>
 800b9c4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b9c6:	e0a4      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b9c8:	4b54      	ldr	r3, [pc, #336]	@ (800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b9d4:	d107      	bne.n	800b9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9d6:	f107 0318 	add.w	r3, r7, #24
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f000 f8bc 	bl	800bb58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9e4:	e095      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9ea:	e092      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b9ec:	4b4b      	ldr	r3, [pc, #300]	@ (800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b9f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9f8:	d107      	bne.n	800ba0a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9fa:	f107 030c 	add.w	r3, r7, #12
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f000 f9fe 	bl	800be00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba08:	e083      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba0e:	e080      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ba10:	4b42      	ldr	r3, [pc, #264]	@ (800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f003 0304 	and.w	r3, r3, #4
 800ba18:	2b04      	cmp	r3, #4
 800ba1a:	d109      	bne.n	800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba1c:	4b3f      	ldr	r3, [pc, #252]	@ (800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	08db      	lsrs	r3, r3, #3
 800ba22:	f003 0303 	and.w	r3, r3, #3
 800ba26:	4a3e      	ldr	r2, [pc, #248]	@ (800bb20 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800ba28:	fa22 f303 	lsr.w	r3, r2, r3
 800ba2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba2e:	e070      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba30:	2300      	movs	r3, #0
 800ba32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba34:	e06d      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ba36:	4b39      	ldr	r3, [pc, #228]	@ (800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba42:	d102      	bne.n	800ba4a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800ba44:	4b37      	ldr	r3, [pc, #220]	@ (800bb24 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ba46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba48:	e063      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba4e:	e060      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ba50:	4b32      	ldr	r3, [pc, #200]	@ (800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba5c:	d102      	bne.n	800ba64 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800ba5e:	4b32      	ldr	r3, [pc, #200]	@ (800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ba60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba62:	e056      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba64:	2300      	movs	r3, #0
 800ba66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba68:	e053      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba6e:	e050      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ba70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba74:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ba78:	430b      	orrs	r3, r1
 800ba7a:	d148      	bne.n	800bb0e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ba7c:	4b27      	ldr	r3, [pc, #156]	@ (800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba80:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ba84:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ba86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba8c:	d02a      	beq.n	800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800ba8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba94:	d838      	bhi.n	800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800ba96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d004      	beq.n	800baa6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800ba9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800baa2:	d00d      	beq.n	800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800baa4:	e030      	b.n	800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800baa6:	4b1d      	ldr	r3, [pc, #116]	@ (800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800baae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bab2:	d102      	bne.n	800baba <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800bab4:	4b1c      	ldr	r3, [pc, #112]	@ (800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bab8:	e02b      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800baba:	2300      	movs	r3, #0
 800babc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800babe:	e028      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bac0:	4b16      	ldr	r3, [pc, #88]	@ (800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bac8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bacc:	d107      	bne.n	800bade <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bace:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bad2:	4618      	mov	r0, r3
 800bad4:	f000 fae8 	bl	800c0a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800badc:	e019      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bade:	2300      	movs	r3, #0
 800bae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bae2:	e016      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bae4:	4b0d      	ldr	r3, [pc, #52]	@ (800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800baec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800baf0:	d107      	bne.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800baf2:	f107 0318 	add.w	r3, r7, #24
 800baf6:	4618      	mov	r0, r3
 800baf8:	f000 f82e 	bl	800bb58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bafc:	69fb      	ldr	r3, [r7, #28]
 800bafe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb00:	e007      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb02:	2300      	movs	r3, #0
 800bb04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb06:	e004      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb0c:	e001      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800bb12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3740      	adds	r7, #64	@ 0x40
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	58024400 	.word	0x58024400
 800bb20:	03d09000 	.word	0x03d09000
 800bb24:	003d0900 	.word	0x003d0900
 800bb28:	017d7840 	.word	0x017d7840

0800bb2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bb30:	f7fe f92e 	bl	8009d90 <HAL_RCC_GetHCLKFreq>
 800bb34:	4602      	mov	r2, r0
 800bb36:	4b06      	ldr	r3, [pc, #24]	@ (800bb50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bb38:	6a1b      	ldr	r3, [r3, #32]
 800bb3a:	091b      	lsrs	r3, r3, #4
 800bb3c:	f003 0307 	and.w	r3, r3, #7
 800bb40:	4904      	ldr	r1, [pc, #16]	@ (800bb54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bb42:	5ccb      	ldrb	r3, [r1, r3]
 800bb44:	f003 031f 	and.w	r3, r3, #31
 800bb48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	58024400 	.word	0x58024400
 800bb54:	08014918 	.word	0x08014918

0800bb58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b089      	sub	sp, #36	@ 0x24
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb60:	4ba1      	ldr	r3, [pc, #644]	@ (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb64:	f003 0303 	and.w	r3, r3, #3
 800bb68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bb6a:	4b9f      	ldr	r3, [pc, #636]	@ (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb6e:	0b1b      	lsrs	r3, r3, #12
 800bb70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bb74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bb76:	4b9c      	ldr	r3, [pc, #624]	@ (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb7a:	091b      	lsrs	r3, r3, #4
 800bb7c:	f003 0301 	and.w	r3, r3, #1
 800bb80:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bb82:	4b99      	ldr	r3, [pc, #612]	@ (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb86:	08db      	lsrs	r3, r3, #3
 800bb88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb8c:	693a      	ldr	r2, [r7, #16]
 800bb8e:	fb02 f303 	mul.w	r3, r2, r3
 800bb92:	ee07 3a90 	vmov	s15, r3
 800bb96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f000 8111 	beq.w	800bdc8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	2b02      	cmp	r3, #2
 800bbaa:	f000 8083 	beq.w	800bcb4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bbae:	69bb      	ldr	r3, [r7, #24]
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	f200 80a1 	bhi.w	800bcf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d003      	beq.n	800bbc4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	2b01      	cmp	r3, #1
 800bbc0:	d056      	beq.n	800bc70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bbc2:	e099      	b.n	800bcf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbc4:	4b88      	ldr	r3, [pc, #544]	@ (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f003 0320 	and.w	r3, r3, #32
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d02d      	beq.n	800bc2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbd0:	4b85      	ldr	r3, [pc, #532]	@ (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	08db      	lsrs	r3, r3, #3
 800bbd6:	f003 0303 	and.w	r3, r3, #3
 800bbda:	4a84      	ldr	r2, [pc, #528]	@ (800bdec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bbdc:	fa22 f303 	lsr.w	r3, r2, r3
 800bbe0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	ee07 3a90 	vmov	s15, r3
 800bbe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	ee07 3a90 	vmov	s15, r3
 800bbf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbfa:	4b7b      	ldr	r3, [pc, #492]	@ (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc02:	ee07 3a90 	vmov	s15, r3
 800bc06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc0e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bc2a:	e087      	b.n	800bd3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	ee07 3a90 	vmov	s15, r3
 800bc32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc36:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bdf4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bc3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc3e:	4b6a      	ldr	r3, [pc, #424]	@ (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc46:	ee07 3a90 	vmov	s15, r3
 800bc4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc52:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc6e:	e065      	b.n	800bd3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	ee07 3a90 	vmov	s15, r3
 800bc76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc7a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bdf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bc7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc82:	4b59      	ldr	r3, [pc, #356]	@ (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc8a:	ee07 3a90 	vmov	s15, r3
 800bc8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc92:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc96:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcb2:	e043      	b.n	800bd3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	ee07 3a90 	vmov	s15, r3
 800bcba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcbe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bdfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bcc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcc6:	4b48      	ldr	r3, [pc, #288]	@ (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcce:	ee07 3a90 	vmov	s15, r3
 800bcd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcda:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcf6:	e021      	b.n	800bd3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	ee07 3a90 	vmov	s15, r3
 800bcfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd02:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bdf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd0a:	4b37      	ldr	r3, [pc, #220]	@ (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd12:	ee07 3a90 	vmov	s15, r3
 800bd16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd1e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bdf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bd3c:	4b2a      	ldr	r3, [pc, #168]	@ (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd40:	0a5b      	lsrs	r3, r3, #9
 800bd42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd46:	ee07 3a90 	vmov	s15, r3
 800bd4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd56:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd62:	ee17 2a90 	vmov	r2, s15
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bd6a:	4b1f      	ldr	r3, [pc, #124]	@ (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd6e:	0c1b      	lsrs	r3, r3, #16
 800bd70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd74:	ee07 3a90 	vmov	s15, r3
 800bd78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bd80:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd84:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd90:	ee17 2a90 	vmov	r2, s15
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bd98:	4b13      	ldr	r3, [pc, #76]	@ (800bde8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd9c:	0e1b      	lsrs	r3, r3, #24
 800bd9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bda2:	ee07 3a90 	vmov	s15, r3
 800bda6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bdae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdbe:	ee17 2a90 	vmov	r2, s15
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bdc6:	e008      	b.n	800bdda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	609a      	str	r2, [r3, #8]
}
 800bdda:	bf00      	nop
 800bddc:	3724      	adds	r7, #36	@ 0x24
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr
 800bde6:	bf00      	nop
 800bde8:	58024400 	.word	0x58024400
 800bdec:	03d09000 	.word	0x03d09000
 800bdf0:	46000000 	.word	0x46000000
 800bdf4:	4c742400 	.word	0x4c742400
 800bdf8:	4a742400 	.word	0x4a742400
 800bdfc:	4bbebc20 	.word	0x4bbebc20

0800be00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800be00:	b480      	push	{r7}
 800be02:	b089      	sub	sp, #36	@ 0x24
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800be08:	4ba1      	ldr	r3, [pc, #644]	@ (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be0c:	f003 0303 	and.w	r3, r3, #3
 800be10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800be12:	4b9f      	ldr	r3, [pc, #636]	@ (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be16:	0d1b      	lsrs	r3, r3, #20
 800be18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800be1e:	4b9c      	ldr	r3, [pc, #624]	@ (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be22:	0a1b      	lsrs	r3, r3, #8
 800be24:	f003 0301 	and.w	r3, r3, #1
 800be28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800be2a:	4b99      	ldr	r3, [pc, #612]	@ (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be2e:	08db      	lsrs	r3, r3, #3
 800be30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be34:	693a      	ldr	r2, [r7, #16]
 800be36:	fb02 f303 	mul.w	r3, r2, r3
 800be3a:	ee07 3a90 	vmov	s15, r3
 800be3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	f000 8111 	beq.w	800c070 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	2b02      	cmp	r3, #2
 800be52:	f000 8083 	beq.w	800bf5c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	2b02      	cmp	r3, #2
 800be5a:	f200 80a1 	bhi.w	800bfa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d003      	beq.n	800be6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	2b01      	cmp	r3, #1
 800be68:	d056      	beq.n	800bf18 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800be6a:	e099      	b.n	800bfa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be6c:	4b88      	ldr	r3, [pc, #544]	@ (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f003 0320 	and.w	r3, r3, #32
 800be74:	2b00      	cmp	r3, #0
 800be76:	d02d      	beq.n	800bed4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be78:	4b85      	ldr	r3, [pc, #532]	@ (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	08db      	lsrs	r3, r3, #3
 800be7e:	f003 0303 	and.w	r3, r3, #3
 800be82:	4a84      	ldr	r2, [pc, #528]	@ (800c094 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800be84:	fa22 f303 	lsr.w	r3, r2, r3
 800be88:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	ee07 3a90 	vmov	s15, r3
 800be90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	ee07 3a90 	vmov	s15, r3
 800be9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bea2:	4b7b      	ldr	r3, [pc, #492]	@ (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beaa:	ee07 3a90 	vmov	s15, r3
 800beae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800beb6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800beba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bece:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bed2:	e087      	b.n	800bfe4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	ee07 3a90 	vmov	s15, r3
 800beda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bede:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c09c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bee6:	4b6a      	ldr	r3, [pc, #424]	@ (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beee:	ee07 3a90 	vmov	s15, r3
 800bef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bef6:	ed97 6a03 	vldr	s12, [r7, #12]
 800befa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800befe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf16:	e065      	b.n	800bfe4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	ee07 3a90 	vmov	s15, r3
 800bf1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bf26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf2a:	4b59      	ldr	r3, [pc, #356]	@ (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf32:	ee07 3a90 	vmov	s15, r3
 800bf36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf5a:	e043      	b.n	800bfe4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	ee07 3a90 	vmov	s15, r3
 800bf62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bf6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf6e:	4b48      	ldr	r3, [pc, #288]	@ (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf76:	ee07 3a90 	vmov	s15, r3
 800bf7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf9e:	e021      	b.n	800bfe4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	ee07 3a90 	vmov	s15, r3
 800bfa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfaa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bfae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfb2:	4b37      	ldr	r3, [pc, #220]	@ (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfba:	ee07 3a90 	vmov	s15, r3
 800bfbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfc6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c098 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfe2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bfe4:	4b2a      	ldr	r3, [pc, #168]	@ (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfe8:	0a5b      	lsrs	r3, r3, #9
 800bfea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfee:	ee07 3a90 	vmov	s15, r3
 800bff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bff6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bffa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bffe:	edd7 6a07 	vldr	s13, [r7, #28]
 800c002:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c006:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c00a:	ee17 2a90 	vmov	r2, s15
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c012:	4b1f      	ldr	r3, [pc, #124]	@ (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c016:	0c1b      	lsrs	r3, r3, #16
 800c018:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c01c:	ee07 3a90 	vmov	s15, r3
 800c020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c024:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c028:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c02c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c038:	ee17 2a90 	vmov	r2, s15
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c040:	4b13      	ldr	r3, [pc, #76]	@ (800c090 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c044:	0e1b      	lsrs	r3, r3, #24
 800c046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c04a:	ee07 3a90 	vmov	s15, r3
 800c04e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c052:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c056:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c05a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c05e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c066:	ee17 2a90 	vmov	r2, s15
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c06e:	e008      	b.n	800c082 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2200      	movs	r2, #0
 800c074:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2200      	movs	r2, #0
 800c07a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2200      	movs	r2, #0
 800c080:	609a      	str	r2, [r3, #8]
}
 800c082:	bf00      	nop
 800c084:	3724      	adds	r7, #36	@ 0x24
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr
 800c08e:	bf00      	nop
 800c090:	58024400 	.word	0x58024400
 800c094:	03d09000 	.word	0x03d09000
 800c098:	46000000 	.word	0x46000000
 800c09c:	4c742400 	.word	0x4c742400
 800c0a0:	4a742400 	.word	0x4a742400
 800c0a4:	4bbebc20 	.word	0x4bbebc20

0800c0a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b089      	sub	sp, #36	@ 0x24
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c0b0:	4ba0      	ldr	r3, [pc, #640]	@ (800c334 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0b4:	f003 0303 	and.w	r3, r3, #3
 800c0b8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c0ba:	4b9e      	ldr	r3, [pc, #632]	@ (800c334 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0be:	091b      	lsrs	r3, r3, #4
 800c0c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c0c4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c0c6:	4b9b      	ldr	r3, [pc, #620]	@ (800c334 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0ca:	f003 0301 	and.w	r3, r3, #1
 800c0ce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c0d0:	4b98      	ldr	r3, [pc, #608]	@ (800c334 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0d4:	08db      	lsrs	r3, r3, #3
 800c0d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c0da:	693a      	ldr	r2, [r7, #16]
 800c0dc:	fb02 f303 	mul.w	r3, r2, r3
 800c0e0:	ee07 3a90 	vmov	s15, r3
 800c0e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0e8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	f000 8111 	beq.w	800c316 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	2b02      	cmp	r3, #2
 800c0f8:	f000 8083 	beq.w	800c202 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c0fc:	69bb      	ldr	r3, [r7, #24]
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	f200 80a1 	bhi.w	800c246 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c104:	69bb      	ldr	r3, [r7, #24]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d003      	beq.n	800c112 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d056      	beq.n	800c1be <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c110:	e099      	b.n	800c246 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c112:	4b88      	ldr	r3, [pc, #544]	@ (800c334 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f003 0320 	and.w	r3, r3, #32
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d02d      	beq.n	800c17a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c11e:	4b85      	ldr	r3, [pc, #532]	@ (800c334 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	08db      	lsrs	r3, r3, #3
 800c124:	f003 0303 	and.w	r3, r3, #3
 800c128:	4a83      	ldr	r2, [pc, #524]	@ (800c338 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c12a:	fa22 f303 	lsr.w	r3, r2, r3
 800c12e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	ee07 3a90 	vmov	s15, r3
 800c136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	ee07 3a90 	vmov	s15, r3
 800c140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c144:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c148:	4b7a      	ldr	r3, [pc, #488]	@ (800c334 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c14a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c14c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c150:	ee07 3a90 	vmov	s15, r3
 800c154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c158:	ed97 6a03 	vldr	s12, [r7, #12]
 800c15c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c33c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c160:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c164:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c168:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c16c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c170:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c174:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c178:	e087      	b.n	800c28a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	ee07 3a90 	vmov	s15, r3
 800c180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c184:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c340 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c188:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c18c:	4b69      	ldr	r3, [pc, #420]	@ (800c334 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c18e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c194:	ee07 3a90 	vmov	s15, r3
 800c198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c19c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1a0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c33c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c1a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1bc:	e065      	b.n	800c28a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	ee07 3a90 	vmov	s15, r3
 800c1c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1c8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c344 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c1cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1d0:	4b58      	ldr	r3, [pc, #352]	@ (800c334 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1d8:	ee07 3a90 	vmov	s15, r3
 800c1dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1e4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c33c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c1e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c200:	e043      	b.n	800c28a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	ee07 3a90 	vmov	s15, r3
 800c208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c20c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c348 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c210:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c214:	4b47      	ldr	r3, [pc, #284]	@ (800c334 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c21c:	ee07 3a90 	vmov	s15, r3
 800c220:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c224:	ed97 6a03 	vldr	s12, [r7, #12]
 800c228:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c33c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c22c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c230:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c234:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c238:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c23c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c240:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c244:	e021      	b.n	800c28a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	ee07 3a90 	vmov	s15, r3
 800c24c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c250:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c340 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c254:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c258:	4b36      	ldr	r3, [pc, #216]	@ (800c334 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c25a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c25c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c260:	ee07 3a90 	vmov	s15, r3
 800c264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c268:	ed97 6a03 	vldr	s12, [r7, #12]
 800c26c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c33c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c270:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c274:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c278:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c27c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c280:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c284:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c288:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c28a:	4b2a      	ldr	r3, [pc, #168]	@ (800c334 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c28c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c28e:	0a5b      	lsrs	r3, r3, #9
 800c290:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c294:	ee07 3a90 	vmov	s15, r3
 800c298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c29c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c2a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2b0:	ee17 2a90 	vmov	r2, s15
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c2b8:	4b1e      	ldr	r3, [pc, #120]	@ (800c334 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2bc:	0c1b      	lsrs	r3, r3, #16
 800c2be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2c2:	ee07 3a90 	vmov	s15, r3
 800c2c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c2ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2de:	ee17 2a90 	vmov	r2, s15
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c2e6:	4b13      	ldr	r3, [pc, #76]	@ (800c334 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2ea:	0e1b      	lsrs	r3, r3, #24
 800c2ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2f0:	ee07 3a90 	vmov	s15, r3
 800c2f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c2fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c300:	edd7 6a07 	vldr	s13, [r7, #28]
 800c304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c30c:	ee17 2a90 	vmov	r2, s15
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c314:	e008      	b.n	800c328 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2200      	movs	r2, #0
 800c31a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2200      	movs	r2, #0
 800c320:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2200      	movs	r2, #0
 800c326:	609a      	str	r2, [r3, #8]
}
 800c328:	bf00      	nop
 800c32a:	3724      	adds	r7, #36	@ 0x24
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr
 800c334:	58024400 	.word	0x58024400
 800c338:	03d09000 	.word	0x03d09000
 800c33c:	46000000 	.word	0x46000000
 800c340:	4c742400 	.word	0x4c742400
 800c344:	4a742400 	.word	0x4a742400
 800c348:	4bbebc20 	.word	0x4bbebc20

0800c34c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c356:	2300      	movs	r3, #0
 800c358:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c35a:	4b53      	ldr	r3, [pc, #332]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c35c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c35e:	f003 0303 	and.w	r3, r3, #3
 800c362:	2b03      	cmp	r3, #3
 800c364:	d101      	bne.n	800c36a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	e099      	b.n	800c49e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c36a:	4b4f      	ldr	r3, [pc, #316]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a4e      	ldr	r2, [pc, #312]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c370:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c376:	f7f6 fbb5 	bl	8002ae4 <HAL_GetTick>
 800c37a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c37c:	e008      	b.n	800c390 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c37e:	f7f6 fbb1 	bl	8002ae4 <HAL_GetTick>
 800c382:	4602      	mov	r2, r0
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	1ad3      	subs	r3, r2, r3
 800c388:	2b02      	cmp	r3, #2
 800c38a:	d901      	bls.n	800c390 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c38c:	2303      	movs	r3, #3
 800c38e:	e086      	b.n	800c49e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c390:	4b45      	ldr	r3, [pc, #276]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d1f0      	bne.n	800c37e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c39c:	4b42      	ldr	r3, [pc, #264]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c39e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3a0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	031b      	lsls	r3, r3, #12
 800c3aa:	493f      	ldr	r1, [pc, #252]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	628b      	str	r3, [r1, #40]	@ 0x28
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	3b01      	subs	r3, #1
 800c3b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	3b01      	subs	r3, #1
 800c3c0:	025b      	lsls	r3, r3, #9
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	431a      	orrs	r2, r3
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	68db      	ldr	r3, [r3, #12]
 800c3ca:	3b01      	subs	r3, #1
 800c3cc:	041b      	lsls	r3, r3, #16
 800c3ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c3d2:	431a      	orrs	r2, r3
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	691b      	ldr	r3, [r3, #16]
 800c3d8:	3b01      	subs	r3, #1
 800c3da:	061b      	lsls	r3, r3, #24
 800c3dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c3e0:	4931      	ldr	r1, [pc, #196]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c3e6:	4b30      	ldr	r3, [pc, #192]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c3e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	695b      	ldr	r3, [r3, #20]
 800c3f2:	492d      	ldr	r1, [pc, #180]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c3f8:	4b2b      	ldr	r3, [pc, #172]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c3fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3fc:	f023 0220 	bic.w	r2, r3, #32
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	699b      	ldr	r3, [r3, #24]
 800c404:	4928      	ldr	r1, [pc, #160]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c406:	4313      	orrs	r3, r2
 800c408:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c40a:	4b27      	ldr	r3, [pc, #156]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c40c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c40e:	4a26      	ldr	r2, [pc, #152]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c410:	f023 0310 	bic.w	r3, r3, #16
 800c414:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c416:	4b24      	ldr	r3, [pc, #144]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c418:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c41a:	4b24      	ldr	r3, [pc, #144]	@ (800c4ac <RCCEx_PLL2_Config+0x160>)
 800c41c:	4013      	ands	r3, r2
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	69d2      	ldr	r2, [r2, #28]
 800c422:	00d2      	lsls	r2, r2, #3
 800c424:	4920      	ldr	r1, [pc, #128]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c426:	4313      	orrs	r3, r2
 800c428:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c42a:	4b1f      	ldr	r3, [pc, #124]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c42c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c42e:	4a1e      	ldr	r2, [pc, #120]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c430:	f043 0310 	orr.w	r3, r3, #16
 800c434:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d106      	bne.n	800c44a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c43c:	4b1a      	ldr	r3, [pc, #104]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c440:	4a19      	ldr	r2, [pc, #100]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c442:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c446:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c448:	e00f      	b.n	800c46a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d106      	bne.n	800c45e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c450:	4b15      	ldr	r3, [pc, #84]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c454:	4a14      	ldr	r2, [pc, #80]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c456:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c45a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c45c:	e005      	b.n	800c46a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c45e:	4b12      	ldr	r3, [pc, #72]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c462:	4a11      	ldr	r2, [pc, #68]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c464:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c468:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c46a:	4b0f      	ldr	r3, [pc, #60]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4a0e      	ldr	r2, [pc, #56]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c470:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c474:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c476:	f7f6 fb35 	bl	8002ae4 <HAL_GetTick>
 800c47a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c47c:	e008      	b.n	800c490 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c47e:	f7f6 fb31 	bl	8002ae4 <HAL_GetTick>
 800c482:	4602      	mov	r2, r0
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	1ad3      	subs	r3, r2, r3
 800c488:	2b02      	cmp	r3, #2
 800c48a:	d901      	bls.n	800c490 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c48c:	2303      	movs	r3, #3
 800c48e:	e006      	b.n	800c49e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c490:	4b05      	ldr	r3, [pc, #20]	@ (800c4a8 <RCCEx_PLL2_Config+0x15c>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d0f0      	beq.n	800c47e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	58024400 	.word	0x58024400
 800c4ac:	ffff0007 	.word	0xffff0007

0800c4b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c4be:	4b53      	ldr	r3, [pc, #332]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c4c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4c2:	f003 0303 	and.w	r3, r3, #3
 800c4c6:	2b03      	cmp	r3, #3
 800c4c8:	d101      	bne.n	800c4ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e099      	b.n	800c602 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c4ce:	4b4f      	ldr	r3, [pc, #316]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a4e      	ldr	r2, [pc, #312]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c4d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c4d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4da:	f7f6 fb03 	bl	8002ae4 <HAL_GetTick>
 800c4de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c4e0:	e008      	b.n	800c4f4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c4e2:	f7f6 faff 	bl	8002ae4 <HAL_GetTick>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	1ad3      	subs	r3, r2, r3
 800c4ec:	2b02      	cmp	r3, #2
 800c4ee:	d901      	bls.n	800c4f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c4f0:	2303      	movs	r3, #3
 800c4f2:	e086      	b.n	800c602 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c4f4:	4b45      	ldr	r3, [pc, #276]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d1f0      	bne.n	800c4e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c500:	4b42      	ldr	r3, [pc, #264]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c504:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	051b      	lsls	r3, r3, #20
 800c50e:	493f      	ldr	r1, [pc, #252]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c510:	4313      	orrs	r3, r2
 800c512:	628b      	str	r3, [r1, #40]	@ 0x28
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	3b01      	subs	r3, #1
 800c51a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	689b      	ldr	r3, [r3, #8]
 800c522:	3b01      	subs	r3, #1
 800c524:	025b      	lsls	r3, r3, #9
 800c526:	b29b      	uxth	r3, r3
 800c528:	431a      	orrs	r2, r3
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	68db      	ldr	r3, [r3, #12]
 800c52e:	3b01      	subs	r3, #1
 800c530:	041b      	lsls	r3, r3, #16
 800c532:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c536:	431a      	orrs	r2, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	691b      	ldr	r3, [r3, #16]
 800c53c:	3b01      	subs	r3, #1
 800c53e:	061b      	lsls	r3, r3, #24
 800c540:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c544:	4931      	ldr	r1, [pc, #196]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c546:	4313      	orrs	r3, r2
 800c548:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c54a:	4b30      	ldr	r3, [pc, #192]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c54c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c54e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	695b      	ldr	r3, [r3, #20]
 800c556:	492d      	ldr	r1, [pc, #180]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c558:	4313      	orrs	r3, r2
 800c55a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c55c:	4b2b      	ldr	r3, [pc, #172]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c560:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	699b      	ldr	r3, [r3, #24]
 800c568:	4928      	ldr	r1, [pc, #160]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c56a:	4313      	orrs	r3, r2
 800c56c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c56e:	4b27      	ldr	r3, [pc, #156]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c572:	4a26      	ldr	r2, [pc, #152]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c578:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c57a:	4b24      	ldr	r3, [pc, #144]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c57c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c57e:	4b24      	ldr	r3, [pc, #144]	@ (800c610 <RCCEx_PLL3_Config+0x160>)
 800c580:	4013      	ands	r3, r2
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	69d2      	ldr	r2, [r2, #28]
 800c586:	00d2      	lsls	r2, r2, #3
 800c588:	4920      	ldr	r1, [pc, #128]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c58a:	4313      	orrs	r3, r2
 800c58c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c58e:	4b1f      	ldr	r3, [pc, #124]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c592:	4a1e      	ldr	r2, [pc, #120]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c598:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d106      	bne.n	800c5ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c5a0:	4b1a      	ldr	r3, [pc, #104]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c5a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5a4:	4a19      	ldr	r2, [pc, #100]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c5a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c5aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c5ac:	e00f      	b.n	800c5ce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d106      	bne.n	800c5c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c5b4:	4b15      	ldr	r3, [pc, #84]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c5b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5b8:	4a14      	ldr	r2, [pc, #80]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c5ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c5be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c5c0:	e005      	b.n	800c5ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c5c2:	4b12      	ldr	r3, [pc, #72]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c5c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5c6:	4a11      	ldr	r2, [pc, #68]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c5c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c5cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c5ce:	4b0f      	ldr	r3, [pc, #60]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4a0e      	ldr	r2, [pc, #56]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c5d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c5d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5da:	f7f6 fa83 	bl	8002ae4 <HAL_GetTick>
 800c5de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c5e0:	e008      	b.n	800c5f4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c5e2:	f7f6 fa7f 	bl	8002ae4 <HAL_GetTick>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	1ad3      	subs	r3, r2, r3
 800c5ec:	2b02      	cmp	r3, #2
 800c5ee:	d901      	bls.n	800c5f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c5f0:	2303      	movs	r3, #3
 800c5f2:	e006      	b.n	800c602 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c5f4:	4b05      	ldr	r3, [pc, #20]	@ (800c60c <RCCEx_PLL3_Config+0x15c>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d0f0      	beq.n	800c5e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c600:	7bfb      	ldrb	r3, [r7, #15]
}
 800c602:	4618      	mov	r0, r3
 800c604:	3710      	adds	r7, #16
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}
 800c60a:	bf00      	nop
 800c60c:	58024400 	.word	0x58024400
 800c610:	ffff0007 	.word	0xffff0007

0800c614 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d101      	bne.n	800c626 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c622:	2301      	movs	r3, #1
 800c624:	e10f      	b.n	800c846 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2200      	movs	r2, #0
 800c62a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a87      	ldr	r2, [pc, #540]	@ (800c850 <HAL_SPI_Init+0x23c>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d00f      	beq.n	800c656 <HAL_SPI_Init+0x42>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4a86      	ldr	r2, [pc, #536]	@ (800c854 <HAL_SPI_Init+0x240>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d00a      	beq.n	800c656 <HAL_SPI_Init+0x42>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a84      	ldr	r2, [pc, #528]	@ (800c858 <HAL_SPI_Init+0x244>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d005      	beq.n	800c656 <HAL_SPI_Init+0x42>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	2b0f      	cmp	r3, #15
 800c650:	d901      	bls.n	800c656 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c652:	2301      	movs	r3, #1
 800c654:	e0f7      	b.n	800c846 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 fbba 	bl	800cdd0 <SPI_GetPacketSize>
 800c65c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4a7b      	ldr	r2, [pc, #492]	@ (800c850 <HAL_SPI_Init+0x23c>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d00c      	beq.n	800c682 <HAL_SPI_Init+0x6e>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	4a79      	ldr	r2, [pc, #484]	@ (800c854 <HAL_SPI_Init+0x240>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d007      	beq.n	800c682 <HAL_SPI_Init+0x6e>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	4a78      	ldr	r2, [pc, #480]	@ (800c858 <HAL_SPI_Init+0x244>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d002      	beq.n	800c682 <HAL_SPI_Init+0x6e>
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2b08      	cmp	r3, #8
 800c680:	d811      	bhi.n	800c6a6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c686:	4a72      	ldr	r2, [pc, #456]	@ (800c850 <HAL_SPI_Init+0x23c>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d009      	beq.n	800c6a0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4a70      	ldr	r2, [pc, #448]	@ (800c854 <HAL_SPI_Init+0x240>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d004      	beq.n	800c6a0 <HAL_SPI_Init+0x8c>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4a6f      	ldr	r2, [pc, #444]	@ (800c858 <HAL_SPI_Init+0x244>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d104      	bne.n	800c6aa <HAL_SPI_Init+0x96>
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2b10      	cmp	r3, #16
 800c6a4:	d901      	bls.n	800c6aa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	e0cd      	b.n	800c846 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d106      	bne.n	800c6c4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f7f4 fde2 	bl	8001288 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2202      	movs	r2, #2
 800c6c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	681a      	ldr	r2, [r3, #0]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f022 0201 	bic.w	r2, r2, #1
 800c6da:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	689b      	ldr	r3, [r3, #8]
 800c6e2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c6e6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	699b      	ldr	r3, [r3, #24]
 800c6ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c6f0:	d119      	bne.n	800c726 <HAL_SPI_Init+0x112>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c6fa:	d103      	bne.n	800c704 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c700:	2b00      	cmp	r3, #0
 800c702:	d008      	beq.n	800c716 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d10c      	bne.n	800c726 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c710:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c714:	d107      	bne.n	800c726 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c724:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d00f      	beq.n	800c752 <HAL_SPI_Init+0x13e>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	2b06      	cmp	r3, #6
 800c738:	d90b      	bls.n	800c752 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	430a      	orrs	r2, r1
 800c74e:	601a      	str	r2, [r3, #0]
 800c750:	e007      	b.n	800c762 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	681a      	ldr	r2, [r3, #0]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c760:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	69da      	ldr	r2, [r3, #28]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c76a:	431a      	orrs	r2, r3
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	431a      	orrs	r2, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c774:	ea42 0103 	orr.w	r1, r2, r3
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	68da      	ldr	r2, [r3, #12]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	430a      	orrs	r2, r1
 800c782:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c78c:	431a      	orrs	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c792:	431a      	orrs	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	699b      	ldr	r3, [r3, #24]
 800c798:	431a      	orrs	r2, r3
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	691b      	ldr	r3, [r3, #16]
 800c79e:	431a      	orrs	r2, r3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	695b      	ldr	r3, [r3, #20]
 800c7a4:	431a      	orrs	r2, r3
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6a1b      	ldr	r3, [r3, #32]
 800c7aa:	431a      	orrs	r2, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	431a      	orrs	r2, r3
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c7b6:	431a      	orrs	r2, r3
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	689b      	ldr	r3, [r3, #8]
 800c7bc:	431a      	orrs	r2, r3
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7c2:	ea42 0103 	orr.w	r1, r2, r3
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	430a      	orrs	r2, r1
 800c7d0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d113      	bne.n	800c802 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c7ec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	689b      	ldr	r3, [r3, #8]
 800c7f4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c800:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f022 0201 	bic.w	r2, r2, #1
 800c810:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d00a      	beq.n	800c834 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	430a      	orrs	r2, r1
 800c832:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2200      	movs	r2, #0
 800c838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2201      	movs	r2, #1
 800c840:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800c844:	2300      	movs	r3, #0
}
 800c846:	4618      	mov	r0, r3
 800c848:	3710      	adds	r7, #16
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	40013000 	.word	0x40013000
 800c854:	40003800 	.word	0x40003800
 800c858:	40003c00 	.word	0x40003c00

0800c85c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b08a      	sub	sp, #40	@ 0x28
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	691b      	ldr	r3, [r3, #16]
 800c86a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	695b      	ldr	r3, [r3, #20]
 800c872:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800c874:	6a3a      	ldr	r2, [r7, #32]
 800c876:	69fb      	ldr	r3, [r7, #28]
 800c878:	4013      	ands	r3, r2
 800c87a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800c884:	2300      	movs	r3, #0
 800c886:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c88e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	3330      	adds	r3, #48	@ 0x30
 800c896:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800c898:	69fb      	ldr	r3, [r7, #28]
 800c89a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d010      	beq.n	800c8c4 <HAL_SPI_IRQHandler+0x68>
 800c8a2:	6a3b      	ldr	r3, [r7, #32]
 800c8a4:	f003 0308 	and.w	r3, r3, #8
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d00b      	beq.n	800c8c4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	699a      	ldr	r2, [r3, #24]
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c8ba:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 f9c3 	bl	800cc48 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800c8c2:	e192      	b.n	800cbea <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c8c4:	69bb      	ldr	r3, [r7, #24]
 800c8c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d113      	bne.n	800c8f6 <HAL_SPI_IRQHandler+0x9a>
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	f003 0320 	and.w	r3, r3, #32
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d10e      	bne.n	800c8f6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800c8d8:	69bb      	ldr	r3, [r7, #24]
 800c8da:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d009      	beq.n	800c8f6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	4798      	blx	r3
    hspi->RxISR(hspi);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	4798      	blx	r3
    handled = 1UL;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c8f6:	69bb      	ldr	r3, [r7, #24]
 800c8f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d10f      	bne.n	800c920 <HAL_SPI_IRQHandler+0xc4>
 800c900:	69bb      	ldr	r3, [r7, #24]
 800c902:	f003 0301 	and.w	r3, r3, #1
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00a      	beq.n	800c920 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c90a:	69bb      	ldr	r3, [r7, #24]
 800c90c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c910:	2b00      	cmp	r3, #0
 800c912:	d105      	bne.n	800c920 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	4798      	blx	r3
    handled = 1UL;
 800c91c:	2301      	movs	r3, #1
 800c91e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	f003 0320 	and.w	r3, r3, #32
 800c926:	2b00      	cmp	r3, #0
 800c928:	d10f      	bne.n	800c94a <HAL_SPI_IRQHandler+0xee>
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	f003 0302 	and.w	r3, r3, #2
 800c930:	2b00      	cmp	r3, #0
 800c932:	d00a      	beq.n	800c94a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c934:	69bb      	ldr	r3, [r7, #24]
 800c936:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d105      	bne.n	800c94a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	4798      	blx	r3
    handled = 1UL;
 800c946:	2301      	movs	r3, #1
 800c948:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800c94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f040 8147 	bne.w	800cbe0 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800c952:	69bb      	ldr	r3, [r7, #24]
 800c954:	f003 0308 	and.w	r3, r3, #8
 800c958:	2b00      	cmp	r3, #0
 800c95a:	f000 808b 	beq.w	800ca74 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	699a      	ldr	r2, [r3, #24]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f042 0208 	orr.w	r2, r2, #8
 800c96c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	699a      	ldr	r2, [r3, #24]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f042 0210 	orr.w	r2, r2, #16
 800c97c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	699a      	ldr	r2, [r3, #24]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c98c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	691a      	ldr	r2, [r3, #16]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f022 0208 	bic.w	r2, r2, #8
 800c99c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d13d      	bne.n	800ca28 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800c9ac:	e036      	b.n	800ca1c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	68db      	ldr	r3, [r3, #12]
 800c9b2:	2b0f      	cmp	r3, #15
 800c9b4:	d90b      	bls.n	800c9ce <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9be:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c9c0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9c6:	1d1a      	adds	r2, r3, #4
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	665a      	str	r2, [r3, #100]	@ 0x64
 800c9cc:	e01d      	b.n	800ca0a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	2b07      	cmp	r3, #7
 800c9d4:	d90b      	bls.n	800c9ee <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9da:	68fa      	ldr	r2, [r7, #12]
 800c9dc:	8812      	ldrh	r2, [r2, #0]
 800c9de:	b292      	uxth	r2, r2
 800c9e0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9e6:	1c9a      	adds	r2, r3, #2
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	665a      	str	r2, [r3, #100]	@ 0x64
 800c9ec:	e00d      	b.n	800ca0a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9fa:	7812      	ldrb	r2, [r2, #0]
 800c9fc:	b2d2      	uxtb	r2, r2
 800c9fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca04:	1c5a      	adds	r2, r3, #1
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ca10:	b29b      	uxth	r3, r3
 800ca12:	3b01      	subs	r3, #1
 800ca14:	b29a      	uxth	r2, r3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ca22:	b29b      	uxth	r3, r3
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d1c2      	bne.n	800c9ae <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 f931 	bl	800cc90 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2201      	movs	r2, #1
 800ca32:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d003      	beq.n	800ca48 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	f000 f8f7 	bl	800cc34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ca46:	e0d0      	b.n	800cbea <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800ca48:	7cfb      	ldrb	r3, [r7, #19]
 800ca4a:	2b05      	cmp	r3, #5
 800ca4c:	d103      	bne.n	800ca56 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 f8e6 	bl	800cc20 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800ca54:	e0c6      	b.n	800cbe4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800ca56:	7cfb      	ldrb	r3, [r7, #19]
 800ca58:	2b04      	cmp	r3, #4
 800ca5a:	d103      	bne.n	800ca64 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f000 f8d5 	bl	800cc0c <HAL_SPI_RxCpltCallback>
    return;
 800ca62:	e0bf      	b.n	800cbe4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800ca64:	7cfb      	ldrb	r3, [r7, #19]
 800ca66:	2b03      	cmp	r3, #3
 800ca68:	f040 80bc 	bne.w	800cbe4 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f000 f8c3 	bl	800cbf8 <HAL_SPI_TxCpltCallback>
    return;
 800ca72:	e0b7      	b.n	800cbe4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800ca74:	69bb      	ldr	r3, [r7, #24]
 800ca76:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	f000 80b5 	beq.w	800cbea <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800ca80:	69bb      	ldr	r3, [r7, #24]
 800ca82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d00f      	beq.n	800caaa <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca90:	f043 0204 	orr.w	r2, r3, #4
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	699a      	ldr	r2, [r3, #24]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800caa8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d00f      	beq.n	800cad4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800caba:	f043 0201 	orr.w	r2, r3, #1
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	699a      	ldr	r2, [r3, #24]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cad2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d00f      	beq.n	800cafe <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cae4:	f043 0208 	orr.w	r2, r3, #8
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	699a      	ldr	r2, [r3, #24]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cafc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	f003 0320 	and.w	r3, r3, #32
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d00f      	beq.n	800cb28 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb0e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	699a      	ldr	r2, [r3, #24]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f042 0220 	orr.w	r2, r2, #32
 800cb26:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d05a      	beq.n	800cbe8 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f022 0201 	bic.w	r2, r2, #1
 800cb40:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	6919      	ldr	r1, [r3, #16]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	4b28      	ldr	r3, [pc, #160]	@ (800cbf0 <HAL_SPI_IRQHandler+0x394>)
 800cb4e:	400b      	ands	r3, r1
 800cb50:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800cb58:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800cb5c:	d138      	bne.n	800cbd0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	689a      	ldr	r2, [r3, #8]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800cb6c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d013      	beq.n	800cb9e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cb7a:	4a1e      	ldr	r2, [pc, #120]	@ (800cbf4 <HAL_SPI_IRQHandler+0x398>)
 800cb7c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7f9 f838 	bl	8005bf8 <HAL_DMA_Abort_IT>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d007      	beq.n	800cb9e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb94:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d020      	beq.n	800cbe8 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cbaa:	4a12      	ldr	r2, [pc, #72]	@ (800cbf4 <HAL_SPI_IRQHandler+0x398>)
 800cbac:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7f9 f820 	bl	8005bf8 <HAL_DMA_Abort_IT>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d014      	beq.n	800cbe8 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cbc4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800cbce:	e00b      	b.n	800cbe8 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f000 f82b 	bl	800cc34 <HAL_SPI_ErrorCallback>
    return;
 800cbde:	e003      	b.n	800cbe8 <HAL_SPI_IRQHandler+0x38c>
    return;
 800cbe0:	bf00      	nop
 800cbe2:	e002      	b.n	800cbea <HAL_SPI_IRQHandler+0x38e>
    return;
 800cbe4:	bf00      	nop
 800cbe6:	e000      	b.n	800cbea <HAL_SPI_IRQHandler+0x38e>
    return;
 800cbe8:	bf00      	nop
  }
}
 800cbea:	3728      	adds	r7, #40	@ 0x28
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	fffffc94 	.word	0xfffffc94
 800cbf4:	0800cc5d 	.word	0x0800cc5d

0800cbf8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b083      	sub	sp, #12
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800cc00:	bf00      	nop
 800cc02:	370c      	adds	r7, #12
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr

0800cc0c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800cc14:	bf00      	nop
 800cc16:	370c      	adds	r7, #12
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr

0800cc20 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cc20:	b480      	push	{r7}
 800cc22:	b083      	sub	sp, #12
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800cc28:	bf00      	nop
 800cc2a:	370c      	adds	r7, #12
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr

0800cc34 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cc34:	b480      	push	{r7}
 800cc36:	b083      	sub	sp, #12
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cc3c:	bf00      	nop
 800cc3e:	370c      	adds	r7, #12
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr

0800cc48 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b083      	sub	sp, #12
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800cc50:	bf00      	nop
 800cc52:	370c      	adds	r7, #12
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr

0800cc5c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc68:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2200      	movs	r2, #0
 800cc76:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cc82:	68f8      	ldr	r0, [r7, #12]
 800cc84:	f7ff ffd6 	bl	800cc34 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cc88:	bf00      	nop
 800cc8a:	3710      	adds	r7, #16
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b085      	sub	sp, #20
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	695b      	ldr	r3, [r3, #20]
 800cc9e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	699a      	ldr	r2, [r3, #24]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f042 0208 	orr.w	r2, r2, #8
 800ccae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	699a      	ldr	r2, [r3, #24]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f042 0210 	orr.w	r2, r2, #16
 800ccbe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	681a      	ldr	r2, [r3, #0]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f022 0201 	bic.w	r2, r2, #1
 800ccce:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	6919      	ldr	r1, [r3, #16]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681a      	ldr	r2, [r3, #0]
 800ccda:	4b3c      	ldr	r3, [pc, #240]	@ (800cdcc <SPI_CloseTransfer+0x13c>)
 800ccdc:	400b      	ands	r3, r1
 800ccde:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	689a      	ldr	r2, [r3, #8]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ccee:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	2b04      	cmp	r3, #4
 800ccfa:	d014      	beq.n	800cd26 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f003 0320 	and.w	r3, r3, #32
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d00f      	beq.n	800cd26 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd0c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	699a      	ldr	r2, [r3, #24]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f042 0220 	orr.w	r2, r2, #32
 800cd24:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	2b03      	cmp	r3, #3
 800cd30:	d014      	beq.n	800cd5c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d00f      	beq.n	800cd5c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd42:	f043 0204 	orr.w	r2, r3, #4
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	699a      	ldr	r2, [r3, #24]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cd5a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d00f      	beq.n	800cd86 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd6c:	f043 0201 	orr.w	r2, r3, #1
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	699a      	ldr	r2, [r3, #24]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cd84:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d00f      	beq.n	800cdb0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd96:	f043 0208 	orr.w	r2, r3, #8
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	699a      	ldr	r2, [r3, #24]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cdae:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800cdc0:	bf00      	nop
 800cdc2:	3714      	adds	r7, #20
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr
 800cdcc:	fffffc90 	.word	0xfffffc90

0800cdd0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b085      	sub	sp, #20
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cddc:	095b      	lsrs	r3, r3, #5
 800cdde:	3301      	adds	r3, #1
 800cde0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	68db      	ldr	r3, [r3, #12]
 800cde6:	3301      	adds	r3, #1
 800cde8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	3307      	adds	r3, #7
 800cdee:	08db      	lsrs	r3, r3, #3
 800cdf0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	68fa      	ldr	r2, [r7, #12]
 800cdf6:	fb02 f303 	mul.w	r3, r2, r3
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3714      	adds	r7, #20
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr

0800ce06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ce06:	b580      	push	{r7, lr}
 800ce08:	b082      	sub	sp, #8
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d101      	bne.n	800ce18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ce14:	2301      	movs	r3, #1
 800ce16:	e049      	b.n	800ceac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ce1e:	b2db      	uxtb	r3, r3
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d106      	bne.n	800ce32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2200      	movs	r2, #0
 800ce28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f7f4 fddf 	bl	80019f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2202      	movs	r2, #2
 800ce36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681a      	ldr	r2, [r3, #0]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	3304      	adds	r3, #4
 800ce42:	4619      	mov	r1, r3
 800ce44:	4610      	mov	r0, r2
 800ce46:	f000 fbdb 	bl	800d600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2201      	movs	r2, #1
 800ce56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2201      	movs	r2, #1
 800ce66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2201      	movs	r2, #1
 800ce76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2201      	movs	r2, #1
 800ce86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2201      	movs	r2, #1
 800ce8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2201      	movs	r2, #1
 800ce96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2201      	movs	r2, #1
 800cea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ceaa:	2300      	movs	r3, #0
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3708      	adds	r7, #8
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}

0800ceb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d101      	bne.n	800cec6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cec2:	2301      	movs	r3, #1
 800cec4:	e049      	b.n	800cf5a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cecc:	b2db      	uxtb	r3, r3
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d106      	bne.n	800cee0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f000 f841 	bl	800cf62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2202      	movs	r2, #2
 800cee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681a      	ldr	r2, [r3, #0]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	3304      	adds	r3, #4
 800cef0:	4619      	mov	r1, r3
 800cef2:	4610      	mov	r0, r2
 800cef4:	f000 fb84 	bl	800d600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2201      	movs	r2, #1
 800cefc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2201      	movs	r2, #1
 800cf04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2201      	movs	r2, #1
 800cf14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2201      	movs	r2, #1
 800cf24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2201      	movs	r2, #1
 800cf34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2201      	movs	r2, #1
 800cf44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2201      	movs	r2, #1
 800cf54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3708      	adds	r7, #8
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}

0800cf62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cf62:	b480      	push	{r7}
 800cf64:	b083      	sub	sp, #12
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cf6a:	bf00      	nop
 800cf6c:	370c      	adds	r7, #12
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr

0800cf76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cf76:	b580      	push	{r7, lr}
 800cf78:	b084      	sub	sp, #16
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	691b      	ldr	r3, [r3, #16]
 800cf8c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	f003 0302 	and.w	r3, r3, #2
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d020      	beq.n	800cfda <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f003 0302 	and.w	r3, r3, #2
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d01b      	beq.n	800cfda <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	f06f 0202 	mvn.w	r2, #2
 800cfaa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	699b      	ldr	r3, [r3, #24]
 800cfb8:	f003 0303 	and.w	r3, r3, #3
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d003      	beq.n	800cfc8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f000 faff 	bl	800d5c4 <HAL_TIM_IC_CaptureCallback>
 800cfc6:	e005      	b.n	800cfd4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 faf1 	bl	800d5b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 fb02 	bl	800d5d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	f003 0304 	and.w	r3, r3, #4
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d020      	beq.n	800d026 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f003 0304 	and.w	r3, r3, #4
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d01b      	beq.n	800d026 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f06f 0204 	mvn.w	r2, #4
 800cff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2202      	movs	r2, #2
 800cffc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	699b      	ldr	r3, [r3, #24]
 800d004:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d003      	beq.n	800d014 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f000 fad9 	bl	800d5c4 <HAL_TIM_IC_CaptureCallback>
 800d012:	e005      	b.n	800d020 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 facb 	bl	800d5b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 fadc 	bl	800d5d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	f003 0308 	and.w	r3, r3, #8
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d020      	beq.n	800d072 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f003 0308 	and.w	r3, r3, #8
 800d036:	2b00      	cmp	r3, #0
 800d038:	d01b      	beq.n	800d072 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f06f 0208 	mvn.w	r2, #8
 800d042:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2204      	movs	r2, #4
 800d048:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	69db      	ldr	r3, [r3, #28]
 800d050:	f003 0303 	and.w	r3, r3, #3
 800d054:	2b00      	cmp	r3, #0
 800d056:	d003      	beq.n	800d060 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f000 fab3 	bl	800d5c4 <HAL_TIM_IC_CaptureCallback>
 800d05e:	e005      	b.n	800d06c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f000 faa5 	bl	800d5b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f000 fab6 	bl	800d5d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2200      	movs	r2, #0
 800d070:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	f003 0310 	and.w	r3, r3, #16
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d020      	beq.n	800d0be <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	f003 0310 	and.w	r3, r3, #16
 800d082:	2b00      	cmp	r3, #0
 800d084:	d01b      	beq.n	800d0be <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f06f 0210 	mvn.w	r2, #16
 800d08e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2208      	movs	r2, #8
 800d094:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	69db      	ldr	r3, [r3, #28]
 800d09c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d003      	beq.n	800d0ac <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f000 fa8d 	bl	800d5c4 <HAL_TIM_IC_CaptureCallback>
 800d0aa:	e005      	b.n	800d0b8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f000 fa7f 	bl	800d5b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 fa90 	bl	800d5d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	f003 0301 	and.w	r3, r3, #1
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d00c      	beq.n	800d0e2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f003 0301 	and.w	r3, r3, #1
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d007      	beq.n	800d0e2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f06f 0201 	mvn.w	r2, #1
 800d0da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 fa5d 	bl	800d59c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d104      	bne.n	800d0f6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d00c      	beq.n	800d110 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d007      	beq.n	800d110 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 ffca 	bl	800e0a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00c      	beq.n	800d134 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d120:	2b00      	cmp	r3, #0
 800d122:	d007      	beq.n	800d134 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d12c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 ffc2 	bl	800e0b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d00c      	beq.n	800d158 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d144:	2b00      	cmp	r3, #0
 800d146:	d007      	beq.n	800d158 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f000 fa4a 	bl	800d5ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	f003 0320 	and.w	r3, r3, #32
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d00c      	beq.n	800d17c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	f003 0320 	and.w	r3, r3, #32
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d007      	beq.n	800d17c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f06f 0220 	mvn.w	r2, #32
 800d174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f000 ff8a 	bl	800e090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d17c:	bf00      	nop
 800d17e:	3710      	adds	r7, #16
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b086      	sub	sp, #24
 800d188:	af00      	add	r7, sp, #0
 800d18a:	60f8      	str	r0, [r7, #12]
 800d18c:	60b9      	str	r1, [r7, #8]
 800d18e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d190:	2300      	movs	r3, #0
 800d192:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d19a:	2b01      	cmp	r3, #1
 800d19c:	d101      	bne.n	800d1a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d19e:	2302      	movs	r3, #2
 800d1a0:	e0ff      	b.n	800d3a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2b14      	cmp	r3, #20
 800d1ae:	f200 80f0 	bhi.w	800d392 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d1b2:	a201      	add	r2, pc, #4	@ (adr r2, 800d1b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1b8:	0800d20d 	.word	0x0800d20d
 800d1bc:	0800d393 	.word	0x0800d393
 800d1c0:	0800d393 	.word	0x0800d393
 800d1c4:	0800d393 	.word	0x0800d393
 800d1c8:	0800d24d 	.word	0x0800d24d
 800d1cc:	0800d393 	.word	0x0800d393
 800d1d0:	0800d393 	.word	0x0800d393
 800d1d4:	0800d393 	.word	0x0800d393
 800d1d8:	0800d28f 	.word	0x0800d28f
 800d1dc:	0800d393 	.word	0x0800d393
 800d1e0:	0800d393 	.word	0x0800d393
 800d1e4:	0800d393 	.word	0x0800d393
 800d1e8:	0800d2cf 	.word	0x0800d2cf
 800d1ec:	0800d393 	.word	0x0800d393
 800d1f0:	0800d393 	.word	0x0800d393
 800d1f4:	0800d393 	.word	0x0800d393
 800d1f8:	0800d311 	.word	0x0800d311
 800d1fc:	0800d393 	.word	0x0800d393
 800d200:	0800d393 	.word	0x0800d393
 800d204:	0800d393 	.word	0x0800d393
 800d208:	0800d351 	.word	0x0800d351
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	68b9      	ldr	r1, [r7, #8]
 800d212:	4618      	mov	r0, r3
 800d214:	f000 faa0 	bl	800d758 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	699a      	ldr	r2, [r3, #24]
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f042 0208 	orr.w	r2, r2, #8
 800d226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	699a      	ldr	r2, [r3, #24]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f022 0204 	bic.w	r2, r2, #4
 800d236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	6999      	ldr	r1, [r3, #24]
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	691a      	ldr	r2, [r3, #16]
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	430a      	orrs	r2, r1
 800d248:	619a      	str	r2, [r3, #24]
      break;
 800d24a:	e0a5      	b.n	800d398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	68b9      	ldr	r1, [r7, #8]
 800d252:	4618      	mov	r0, r3
 800d254:	f000 fb10 	bl	800d878 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	699a      	ldr	r2, [r3, #24]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	699a      	ldr	r2, [r3, #24]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	6999      	ldr	r1, [r3, #24]
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	691b      	ldr	r3, [r3, #16]
 800d282:	021a      	lsls	r2, r3, #8
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	430a      	orrs	r2, r1
 800d28a:	619a      	str	r2, [r3, #24]
      break;
 800d28c:	e084      	b.n	800d398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	68b9      	ldr	r1, [r7, #8]
 800d294:	4618      	mov	r0, r3
 800d296:	f000 fb79 	bl	800d98c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	69da      	ldr	r2, [r3, #28]
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f042 0208 	orr.w	r2, r2, #8
 800d2a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	69da      	ldr	r2, [r3, #28]
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f022 0204 	bic.w	r2, r2, #4
 800d2b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	69d9      	ldr	r1, [r3, #28]
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	691a      	ldr	r2, [r3, #16]
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	430a      	orrs	r2, r1
 800d2ca:	61da      	str	r2, [r3, #28]
      break;
 800d2cc:	e064      	b.n	800d398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	68b9      	ldr	r1, [r7, #8]
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f000 fbe1 	bl	800da9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	69da      	ldr	r2, [r3, #28]
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d2e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	69da      	ldr	r2, [r3, #28]
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d2f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	69d9      	ldr	r1, [r3, #28]
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	691b      	ldr	r3, [r3, #16]
 800d304:	021a      	lsls	r2, r3, #8
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	430a      	orrs	r2, r1
 800d30c:	61da      	str	r2, [r3, #28]
      break;
 800d30e:	e043      	b.n	800d398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	68b9      	ldr	r1, [r7, #8]
 800d316:	4618      	mov	r0, r3
 800d318:	f000 fc2a 	bl	800db70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f042 0208 	orr.w	r2, r2, #8
 800d32a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f022 0204 	bic.w	r2, r2, #4
 800d33a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	691a      	ldr	r2, [r3, #16]
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	430a      	orrs	r2, r1
 800d34c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d34e:	e023      	b.n	800d398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	68b9      	ldr	r1, [r7, #8]
 800d356:	4618      	mov	r0, r3
 800d358:	f000 fc6e 	bl	800dc38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d36a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d37a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	691b      	ldr	r3, [r3, #16]
 800d386:	021a      	lsls	r2, r3, #8
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	430a      	orrs	r2, r1
 800d38e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d390:	e002      	b.n	800d398 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d392:	2301      	movs	r3, #1
 800d394:	75fb      	strb	r3, [r7, #23]
      break;
 800d396:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2200      	movs	r2, #0
 800d39c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d3a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3718      	adds	r7, #24
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
 800d3aa:	bf00      	nop

0800d3ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d3c0:	2b01      	cmp	r3, #1
 800d3c2:	d101      	bne.n	800d3c8 <HAL_TIM_ConfigClockSource+0x1c>
 800d3c4:	2302      	movs	r3, #2
 800d3c6:	e0dc      	b.n	800d582 <HAL_TIM_ConfigClockSource+0x1d6>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2202      	movs	r2, #2
 800d3d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	689b      	ldr	r3, [r3, #8]
 800d3de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d3e0:	68ba      	ldr	r2, [r7, #8]
 800d3e2:	4b6a      	ldr	r3, [pc, #424]	@ (800d58c <HAL_TIM_ConfigClockSource+0x1e0>)
 800d3e4:	4013      	ands	r3, r2
 800d3e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d3ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	68ba      	ldr	r2, [r7, #8]
 800d3f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4a64      	ldr	r2, [pc, #400]	@ (800d590 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	f000 80a9 	beq.w	800d556 <HAL_TIM_ConfigClockSource+0x1aa>
 800d404:	4a62      	ldr	r2, [pc, #392]	@ (800d590 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d406:	4293      	cmp	r3, r2
 800d408:	f200 80ae 	bhi.w	800d568 <HAL_TIM_ConfigClockSource+0x1bc>
 800d40c:	4a61      	ldr	r2, [pc, #388]	@ (800d594 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	f000 80a1 	beq.w	800d556 <HAL_TIM_ConfigClockSource+0x1aa>
 800d414:	4a5f      	ldr	r2, [pc, #380]	@ (800d594 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d416:	4293      	cmp	r3, r2
 800d418:	f200 80a6 	bhi.w	800d568 <HAL_TIM_ConfigClockSource+0x1bc>
 800d41c:	4a5e      	ldr	r2, [pc, #376]	@ (800d598 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	f000 8099 	beq.w	800d556 <HAL_TIM_ConfigClockSource+0x1aa>
 800d424:	4a5c      	ldr	r2, [pc, #368]	@ (800d598 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d426:	4293      	cmp	r3, r2
 800d428:	f200 809e 	bhi.w	800d568 <HAL_TIM_ConfigClockSource+0x1bc>
 800d42c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d430:	f000 8091 	beq.w	800d556 <HAL_TIM_ConfigClockSource+0x1aa>
 800d434:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d438:	f200 8096 	bhi.w	800d568 <HAL_TIM_ConfigClockSource+0x1bc>
 800d43c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d440:	f000 8089 	beq.w	800d556 <HAL_TIM_ConfigClockSource+0x1aa>
 800d444:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d448:	f200 808e 	bhi.w	800d568 <HAL_TIM_ConfigClockSource+0x1bc>
 800d44c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d450:	d03e      	beq.n	800d4d0 <HAL_TIM_ConfigClockSource+0x124>
 800d452:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d456:	f200 8087 	bhi.w	800d568 <HAL_TIM_ConfigClockSource+0x1bc>
 800d45a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d45e:	f000 8086 	beq.w	800d56e <HAL_TIM_ConfigClockSource+0x1c2>
 800d462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d466:	d87f      	bhi.n	800d568 <HAL_TIM_ConfigClockSource+0x1bc>
 800d468:	2b70      	cmp	r3, #112	@ 0x70
 800d46a:	d01a      	beq.n	800d4a2 <HAL_TIM_ConfigClockSource+0xf6>
 800d46c:	2b70      	cmp	r3, #112	@ 0x70
 800d46e:	d87b      	bhi.n	800d568 <HAL_TIM_ConfigClockSource+0x1bc>
 800d470:	2b60      	cmp	r3, #96	@ 0x60
 800d472:	d050      	beq.n	800d516 <HAL_TIM_ConfigClockSource+0x16a>
 800d474:	2b60      	cmp	r3, #96	@ 0x60
 800d476:	d877      	bhi.n	800d568 <HAL_TIM_ConfigClockSource+0x1bc>
 800d478:	2b50      	cmp	r3, #80	@ 0x50
 800d47a:	d03c      	beq.n	800d4f6 <HAL_TIM_ConfigClockSource+0x14a>
 800d47c:	2b50      	cmp	r3, #80	@ 0x50
 800d47e:	d873      	bhi.n	800d568 <HAL_TIM_ConfigClockSource+0x1bc>
 800d480:	2b40      	cmp	r3, #64	@ 0x40
 800d482:	d058      	beq.n	800d536 <HAL_TIM_ConfigClockSource+0x18a>
 800d484:	2b40      	cmp	r3, #64	@ 0x40
 800d486:	d86f      	bhi.n	800d568 <HAL_TIM_ConfigClockSource+0x1bc>
 800d488:	2b30      	cmp	r3, #48	@ 0x30
 800d48a:	d064      	beq.n	800d556 <HAL_TIM_ConfigClockSource+0x1aa>
 800d48c:	2b30      	cmp	r3, #48	@ 0x30
 800d48e:	d86b      	bhi.n	800d568 <HAL_TIM_ConfigClockSource+0x1bc>
 800d490:	2b20      	cmp	r3, #32
 800d492:	d060      	beq.n	800d556 <HAL_TIM_ConfigClockSource+0x1aa>
 800d494:	2b20      	cmp	r3, #32
 800d496:	d867      	bhi.n	800d568 <HAL_TIM_ConfigClockSource+0x1bc>
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d05c      	beq.n	800d556 <HAL_TIM_ConfigClockSource+0x1aa>
 800d49c:	2b10      	cmp	r3, #16
 800d49e:	d05a      	beq.n	800d556 <HAL_TIM_ConfigClockSource+0x1aa>
 800d4a0:	e062      	b.n	800d568 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d4b2:	f000 fca5 	bl	800de00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	689b      	ldr	r3, [r3, #8]
 800d4bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d4c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	68ba      	ldr	r2, [r7, #8]
 800d4cc:	609a      	str	r2, [r3, #8]
      break;
 800d4ce:	e04f      	b.n	800d570 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d4e0:	f000 fc8e 	bl	800de00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	689a      	ldr	r2, [r3, #8]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d4f2:	609a      	str	r2, [r3, #8]
      break;
 800d4f4:	e03c      	b.n	800d570 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d502:	461a      	mov	r2, r3
 800d504:	f000 fbfe 	bl	800dd04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2150      	movs	r1, #80	@ 0x50
 800d50e:	4618      	mov	r0, r3
 800d510:	f000 fc58 	bl	800ddc4 <TIM_ITRx_SetConfig>
      break;
 800d514:	e02c      	b.n	800d570 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d522:	461a      	mov	r2, r3
 800d524:	f000 fc1d 	bl	800dd62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	2160      	movs	r1, #96	@ 0x60
 800d52e:	4618      	mov	r0, r3
 800d530:	f000 fc48 	bl	800ddc4 <TIM_ITRx_SetConfig>
      break;
 800d534:	e01c      	b.n	800d570 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d542:	461a      	mov	r2, r3
 800d544:	f000 fbde 	bl	800dd04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	2140      	movs	r1, #64	@ 0x40
 800d54e:	4618      	mov	r0, r3
 800d550:	f000 fc38 	bl	800ddc4 <TIM_ITRx_SetConfig>
      break;
 800d554:	e00c      	b.n	800d570 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681a      	ldr	r2, [r3, #0]
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	4619      	mov	r1, r3
 800d560:	4610      	mov	r0, r2
 800d562:	f000 fc2f 	bl	800ddc4 <TIM_ITRx_SetConfig>
      break;
 800d566:	e003      	b.n	800d570 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d568:	2301      	movs	r3, #1
 800d56a:	73fb      	strb	r3, [r7, #15]
      break;
 800d56c:	e000      	b.n	800d570 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d56e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2201      	movs	r2, #1
 800d574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2200      	movs	r2, #0
 800d57c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d580:	7bfb      	ldrb	r3, [r7, #15]
}
 800d582:	4618      	mov	r0, r3
 800d584:	3710      	adds	r7, #16
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
 800d58a:	bf00      	nop
 800d58c:	ffceff88 	.word	0xffceff88
 800d590:	00100040 	.word	0x00100040
 800d594:	00100030 	.word	0x00100030
 800d598:	00100020 	.word	0x00100020

0800d59c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d5a4:	bf00      	nop
 800d5a6:	370c      	adds	r7, #12
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr

0800d5b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b083      	sub	sp, #12
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d5b8:	bf00      	nop
 800d5ba:	370c      	adds	r7, #12
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b083      	sub	sp, #12
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d5cc:	bf00      	nop
 800d5ce:	370c      	adds	r7, #12
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d6:	4770      	bx	lr

0800d5d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b083      	sub	sp, #12
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d5e0:	bf00      	nop
 800d5e2:	370c      	adds	r7, #12
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr

0800d5ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b083      	sub	sp, #12
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d5f4:	bf00      	nop
 800d5f6:	370c      	adds	r7, #12
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr

0800d600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d600:	b480      	push	{r7}
 800d602:	b085      	sub	sp, #20
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	4a47      	ldr	r2, [pc, #284]	@ (800d730 <TIM_Base_SetConfig+0x130>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d013      	beq.n	800d640 <TIM_Base_SetConfig+0x40>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d61e:	d00f      	beq.n	800d640 <TIM_Base_SetConfig+0x40>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	4a44      	ldr	r2, [pc, #272]	@ (800d734 <TIM_Base_SetConfig+0x134>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d00b      	beq.n	800d640 <TIM_Base_SetConfig+0x40>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	4a43      	ldr	r2, [pc, #268]	@ (800d738 <TIM_Base_SetConfig+0x138>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d007      	beq.n	800d640 <TIM_Base_SetConfig+0x40>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	4a42      	ldr	r2, [pc, #264]	@ (800d73c <TIM_Base_SetConfig+0x13c>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d003      	beq.n	800d640 <TIM_Base_SetConfig+0x40>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	4a41      	ldr	r2, [pc, #260]	@ (800d740 <TIM_Base_SetConfig+0x140>)
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d108      	bne.n	800d652 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	685b      	ldr	r3, [r3, #4]
 800d64c:	68fa      	ldr	r2, [r7, #12]
 800d64e:	4313      	orrs	r3, r2
 800d650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	4a36      	ldr	r2, [pc, #216]	@ (800d730 <TIM_Base_SetConfig+0x130>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d027      	beq.n	800d6aa <TIM_Base_SetConfig+0xaa>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d660:	d023      	beq.n	800d6aa <TIM_Base_SetConfig+0xaa>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	4a33      	ldr	r2, [pc, #204]	@ (800d734 <TIM_Base_SetConfig+0x134>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d01f      	beq.n	800d6aa <TIM_Base_SetConfig+0xaa>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	4a32      	ldr	r2, [pc, #200]	@ (800d738 <TIM_Base_SetConfig+0x138>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d01b      	beq.n	800d6aa <TIM_Base_SetConfig+0xaa>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	4a31      	ldr	r2, [pc, #196]	@ (800d73c <TIM_Base_SetConfig+0x13c>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d017      	beq.n	800d6aa <TIM_Base_SetConfig+0xaa>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	4a30      	ldr	r2, [pc, #192]	@ (800d740 <TIM_Base_SetConfig+0x140>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d013      	beq.n	800d6aa <TIM_Base_SetConfig+0xaa>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	4a2f      	ldr	r2, [pc, #188]	@ (800d744 <TIM_Base_SetConfig+0x144>)
 800d686:	4293      	cmp	r3, r2
 800d688:	d00f      	beq.n	800d6aa <TIM_Base_SetConfig+0xaa>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	4a2e      	ldr	r2, [pc, #184]	@ (800d748 <TIM_Base_SetConfig+0x148>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d00b      	beq.n	800d6aa <TIM_Base_SetConfig+0xaa>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	4a2d      	ldr	r2, [pc, #180]	@ (800d74c <TIM_Base_SetConfig+0x14c>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d007      	beq.n	800d6aa <TIM_Base_SetConfig+0xaa>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	4a2c      	ldr	r2, [pc, #176]	@ (800d750 <TIM_Base_SetConfig+0x150>)
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	d003      	beq.n	800d6aa <TIM_Base_SetConfig+0xaa>
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	4a2b      	ldr	r2, [pc, #172]	@ (800d754 <TIM_Base_SetConfig+0x154>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d108      	bne.n	800d6bc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d6b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	68fa      	ldr	r2, [r7, #12]
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	695b      	ldr	r3, [r3, #20]
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	689a      	ldr	r2, [r3, #8]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	4a14      	ldr	r2, [pc, #80]	@ (800d730 <TIM_Base_SetConfig+0x130>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d00f      	beq.n	800d702 <TIM_Base_SetConfig+0x102>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	4a16      	ldr	r2, [pc, #88]	@ (800d740 <TIM_Base_SetConfig+0x140>)
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	d00b      	beq.n	800d702 <TIM_Base_SetConfig+0x102>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	4a15      	ldr	r2, [pc, #84]	@ (800d744 <TIM_Base_SetConfig+0x144>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d007      	beq.n	800d702 <TIM_Base_SetConfig+0x102>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	4a14      	ldr	r2, [pc, #80]	@ (800d748 <TIM_Base_SetConfig+0x148>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d003      	beq.n	800d702 <TIM_Base_SetConfig+0x102>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	4a13      	ldr	r2, [pc, #76]	@ (800d74c <TIM_Base_SetConfig+0x14c>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d103      	bne.n	800d70a <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	691a      	ldr	r2, [r3, #16]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f043 0204 	orr.w	r2, r3, #4
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2201      	movs	r2, #1
 800d71a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	68fa      	ldr	r2, [r7, #12]
 800d720:	601a      	str	r2, [r3, #0]
}
 800d722:	bf00      	nop
 800d724:	3714      	adds	r7, #20
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop
 800d730:	40010000 	.word	0x40010000
 800d734:	40000400 	.word	0x40000400
 800d738:	40000800 	.word	0x40000800
 800d73c:	40000c00 	.word	0x40000c00
 800d740:	40010400 	.word	0x40010400
 800d744:	40014000 	.word	0x40014000
 800d748:	40014400 	.word	0x40014400
 800d74c:	40014800 	.word	0x40014800
 800d750:	4000e000 	.word	0x4000e000
 800d754:	4000e400 	.word	0x4000e400

0800d758 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d758:	b480      	push	{r7}
 800d75a:	b087      	sub	sp, #28
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6a1b      	ldr	r3, [r3, #32]
 800d766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6a1b      	ldr	r3, [r3, #32]
 800d76c:	f023 0201 	bic.w	r2, r3, #1
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	685b      	ldr	r3, [r3, #4]
 800d778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	699b      	ldr	r3, [r3, #24]
 800d77e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d780:	68fa      	ldr	r2, [r7, #12]
 800d782:	4b37      	ldr	r3, [pc, #220]	@ (800d860 <TIM_OC1_SetConfig+0x108>)
 800d784:	4013      	ands	r3, r2
 800d786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f023 0303 	bic.w	r3, r3, #3
 800d78e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	68fa      	ldr	r2, [r7, #12]
 800d796:	4313      	orrs	r3, r2
 800d798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	f023 0302 	bic.w	r3, r3, #2
 800d7a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	689b      	ldr	r3, [r3, #8]
 800d7a6:	697a      	ldr	r2, [r7, #20]
 800d7a8:	4313      	orrs	r3, r2
 800d7aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	4a2d      	ldr	r2, [pc, #180]	@ (800d864 <TIM_OC1_SetConfig+0x10c>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d00f      	beq.n	800d7d4 <TIM_OC1_SetConfig+0x7c>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	4a2c      	ldr	r2, [pc, #176]	@ (800d868 <TIM_OC1_SetConfig+0x110>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d00b      	beq.n	800d7d4 <TIM_OC1_SetConfig+0x7c>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	4a2b      	ldr	r2, [pc, #172]	@ (800d86c <TIM_OC1_SetConfig+0x114>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d007      	beq.n	800d7d4 <TIM_OC1_SetConfig+0x7c>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	4a2a      	ldr	r2, [pc, #168]	@ (800d870 <TIM_OC1_SetConfig+0x118>)
 800d7c8:	4293      	cmp	r3, r2
 800d7ca:	d003      	beq.n	800d7d4 <TIM_OC1_SetConfig+0x7c>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	4a29      	ldr	r2, [pc, #164]	@ (800d874 <TIM_OC1_SetConfig+0x11c>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	d10c      	bne.n	800d7ee <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	f023 0308 	bic.w	r3, r3, #8
 800d7da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	68db      	ldr	r3, [r3, #12]
 800d7e0:	697a      	ldr	r2, [r7, #20]
 800d7e2:	4313      	orrs	r3, r2
 800d7e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	f023 0304 	bic.w	r3, r3, #4
 800d7ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	4a1c      	ldr	r2, [pc, #112]	@ (800d864 <TIM_OC1_SetConfig+0x10c>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d00f      	beq.n	800d816 <TIM_OC1_SetConfig+0xbe>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	4a1b      	ldr	r2, [pc, #108]	@ (800d868 <TIM_OC1_SetConfig+0x110>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d00b      	beq.n	800d816 <TIM_OC1_SetConfig+0xbe>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	4a1a      	ldr	r2, [pc, #104]	@ (800d86c <TIM_OC1_SetConfig+0x114>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d007      	beq.n	800d816 <TIM_OC1_SetConfig+0xbe>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	4a19      	ldr	r2, [pc, #100]	@ (800d870 <TIM_OC1_SetConfig+0x118>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d003      	beq.n	800d816 <TIM_OC1_SetConfig+0xbe>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	4a18      	ldr	r2, [pc, #96]	@ (800d874 <TIM_OC1_SetConfig+0x11c>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d111      	bne.n	800d83a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d81c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	695b      	ldr	r3, [r3, #20]
 800d82a:	693a      	ldr	r2, [r7, #16]
 800d82c:	4313      	orrs	r3, r2
 800d82e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	699b      	ldr	r3, [r3, #24]
 800d834:	693a      	ldr	r2, [r7, #16]
 800d836:	4313      	orrs	r3, r2
 800d838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	693a      	ldr	r2, [r7, #16]
 800d83e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	68fa      	ldr	r2, [r7, #12]
 800d844:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	685a      	ldr	r2, [r3, #4]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	697a      	ldr	r2, [r7, #20]
 800d852:	621a      	str	r2, [r3, #32]
}
 800d854:	bf00      	nop
 800d856:	371c      	adds	r7, #28
 800d858:	46bd      	mov	sp, r7
 800d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85e:	4770      	bx	lr
 800d860:	fffeff8f 	.word	0xfffeff8f
 800d864:	40010000 	.word	0x40010000
 800d868:	40010400 	.word	0x40010400
 800d86c:	40014000 	.word	0x40014000
 800d870:	40014400 	.word	0x40014400
 800d874:	40014800 	.word	0x40014800

0800d878 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d878:	b480      	push	{r7}
 800d87a:	b087      	sub	sp, #28
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6a1b      	ldr	r3, [r3, #32]
 800d886:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6a1b      	ldr	r3, [r3, #32]
 800d88c:	f023 0210 	bic.w	r2, r3, #16
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	699b      	ldr	r3, [r3, #24]
 800d89e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d8a0:	68fa      	ldr	r2, [r7, #12]
 800d8a2:	4b34      	ldr	r3, [pc, #208]	@ (800d974 <TIM_OC2_SetConfig+0xfc>)
 800d8a4:	4013      	ands	r3, r2
 800d8a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d8ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	021b      	lsls	r3, r3, #8
 800d8b6:	68fa      	ldr	r2, [r7, #12]
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	f023 0320 	bic.w	r3, r3, #32
 800d8c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	689b      	ldr	r3, [r3, #8]
 800d8c8:	011b      	lsls	r3, r3, #4
 800d8ca:	697a      	ldr	r2, [r7, #20]
 800d8cc:	4313      	orrs	r3, r2
 800d8ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	4a29      	ldr	r2, [pc, #164]	@ (800d978 <TIM_OC2_SetConfig+0x100>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d003      	beq.n	800d8e0 <TIM_OC2_SetConfig+0x68>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	4a28      	ldr	r2, [pc, #160]	@ (800d97c <TIM_OC2_SetConfig+0x104>)
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	d10d      	bne.n	800d8fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d8e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	011b      	lsls	r3, r3, #4
 800d8ee:	697a      	ldr	r2, [r7, #20]
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d8fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	4a1e      	ldr	r2, [pc, #120]	@ (800d978 <TIM_OC2_SetConfig+0x100>)
 800d900:	4293      	cmp	r3, r2
 800d902:	d00f      	beq.n	800d924 <TIM_OC2_SetConfig+0xac>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	4a1d      	ldr	r2, [pc, #116]	@ (800d97c <TIM_OC2_SetConfig+0x104>)
 800d908:	4293      	cmp	r3, r2
 800d90a:	d00b      	beq.n	800d924 <TIM_OC2_SetConfig+0xac>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	4a1c      	ldr	r2, [pc, #112]	@ (800d980 <TIM_OC2_SetConfig+0x108>)
 800d910:	4293      	cmp	r3, r2
 800d912:	d007      	beq.n	800d924 <TIM_OC2_SetConfig+0xac>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	4a1b      	ldr	r2, [pc, #108]	@ (800d984 <TIM_OC2_SetConfig+0x10c>)
 800d918:	4293      	cmp	r3, r2
 800d91a:	d003      	beq.n	800d924 <TIM_OC2_SetConfig+0xac>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	4a1a      	ldr	r2, [pc, #104]	@ (800d988 <TIM_OC2_SetConfig+0x110>)
 800d920:	4293      	cmp	r3, r2
 800d922:	d113      	bne.n	800d94c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d92a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d932:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	695b      	ldr	r3, [r3, #20]
 800d938:	009b      	lsls	r3, r3, #2
 800d93a:	693a      	ldr	r2, [r7, #16]
 800d93c:	4313      	orrs	r3, r2
 800d93e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	699b      	ldr	r3, [r3, #24]
 800d944:	009b      	lsls	r3, r3, #2
 800d946:	693a      	ldr	r2, [r7, #16]
 800d948:	4313      	orrs	r3, r2
 800d94a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	693a      	ldr	r2, [r7, #16]
 800d950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	68fa      	ldr	r2, [r7, #12]
 800d956:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	685a      	ldr	r2, [r3, #4]
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	697a      	ldr	r2, [r7, #20]
 800d964:	621a      	str	r2, [r3, #32]
}
 800d966:	bf00      	nop
 800d968:	371c      	adds	r7, #28
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr
 800d972:	bf00      	nop
 800d974:	feff8fff 	.word	0xfeff8fff
 800d978:	40010000 	.word	0x40010000
 800d97c:	40010400 	.word	0x40010400
 800d980:	40014000 	.word	0x40014000
 800d984:	40014400 	.word	0x40014400
 800d988:	40014800 	.word	0x40014800

0800d98c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b087      	sub	sp, #28
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6a1b      	ldr	r3, [r3, #32]
 800d99a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6a1b      	ldr	r3, [r3, #32]
 800d9a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	685b      	ldr	r3, [r3, #4]
 800d9ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	69db      	ldr	r3, [r3, #28]
 800d9b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d9b4:	68fa      	ldr	r2, [r7, #12]
 800d9b6:	4b33      	ldr	r3, [pc, #204]	@ (800da84 <TIM_OC3_SetConfig+0xf8>)
 800d9b8:	4013      	ands	r3, r2
 800d9ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f023 0303 	bic.w	r3, r3, #3
 800d9c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	68fa      	ldr	r2, [r7, #12]
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d9d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	689b      	ldr	r3, [r3, #8]
 800d9da:	021b      	lsls	r3, r3, #8
 800d9dc:	697a      	ldr	r2, [r7, #20]
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	4a28      	ldr	r2, [pc, #160]	@ (800da88 <TIM_OC3_SetConfig+0xfc>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d003      	beq.n	800d9f2 <TIM_OC3_SetConfig+0x66>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	4a27      	ldr	r2, [pc, #156]	@ (800da8c <TIM_OC3_SetConfig+0x100>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d10d      	bne.n	800da0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d9f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	68db      	ldr	r3, [r3, #12]
 800d9fe:	021b      	lsls	r3, r3, #8
 800da00:	697a      	ldr	r2, [r7, #20]
 800da02:	4313      	orrs	r3, r2
 800da04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800da0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	4a1d      	ldr	r2, [pc, #116]	@ (800da88 <TIM_OC3_SetConfig+0xfc>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d00f      	beq.n	800da36 <TIM_OC3_SetConfig+0xaa>
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	4a1c      	ldr	r2, [pc, #112]	@ (800da8c <TIM_OC3_SetConfig+0x100>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d00b      	beq.n	800da36 <TIM_OC3_SetConfig+0xaa>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	4a1b      	ldr	r2, [pc, #108]	@ (800da90 <TIM_OC3_SetConfig+0x104>)
 800da22:	4293      	cmp	r3, r2
 800da24:	d007      	beq.n	800da36 <TIM_OC3_SetConfig+0xaa>
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	4a1a      	ldr	r2, [pc, #104]	@ (800da94 <TIM_OC3_SetConfig+0x108>)
 800da2a:	4293      	cmp	r3, r2
 800da2c:	d003      	beq.n	800da36 <TIM_OC3_SetConfig+0xaa>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	4a19      	ldr	r2, [pc, #100]	@ (800da98 <TIM_OC3_SetConfig+0x10c>)
 800da32:	4293      	cmp	r3, r2
 800da34:	d113      	bne.n	800da5e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800da3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800da44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	695b      	ldr	r3, [r3, #20]
 800da4a:	011b      	lsls	r3, r3, #4
 800da4c:	693a      	ldr	r2, [r7, #16]
 800da4e:	4313      	orrs	r3, r2
 800da50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	699b      	ldr	r3, [r3, #24]
 800da56:	011b      	lsls	r3, r3, #4
 800da58:	693a      	ldr	r2, [r7, #16]
 800da5a:	4313      	orrs	r3, r2
 800da5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	693a      	ldr	r2, [r7, #16]
 800da62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	685a      	ldr	r2, [r3, #4]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	697a      	ldr	r2, [r7, #20]
 800da76:	621a      	str	r2, [r3, #32]
}
 800da78:	bf00      	nop
 800da7a:	371c      	adds	r7, #28
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr
 800da84:	fffeff8f 	.word	0xfffeff8f
 800da88:	40010000 	.word	0x40010000
 800da8c:	40010400 	.word	0x40010400
 800da90:	40014000 	.word	0x40014000
 800da94:	40014400 	.word	0x40014400
 800da98:	40014800 	.word	0x40014800

0800da9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b087      	sub	sp, #28
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6a1b      	ldr	r3, [r3, #32]
 800daaa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6a1b      	ldr	r3, [r3, #32]
 800dab0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	685b      	ldr	r3, [r3, #4]
 800dabc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	69db      	ldr	r3, [r3, #28]
 800dac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dac4:	68fa      	ldr	r2, [r7, #12]
 800dac6:	4b24      	ldr	r3, [pc, #144]	@ (800db58 <TIM_OC4_SetConfig+0xbc>)
 800dac8:	4013      	ands	r3, r2
 800daca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	021b      	lsls	r3, r3, #8
 800dada:	68fa      	ldr	r2, [r7, #12]
 800dadc:	4313      	orrs	r3, r2
 800dade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800dae6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	689b      	ldr	r3, [r3, #8]
 800daec:	031b      	lsls	r3, r3, #12
 800daee:	693a      	ldr	r2, [r7, #16]
 800daf0:	4313      	orrs	r3, r2
 800daf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	4a19      	ldr	r2, [pc, #100]	@ (800db5c <TIM_OC4_SetConfig+0xc0>)
 800daf8:	4293      	cmp	r3, r2
 800dafa:	d00f      	beq.n	800db1c <TIM_OC4_SetConfig+0x80>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	4a18      	ldr	r2, [pc, #96]	@ (800db60 <TIM_OC4_SetConfig+0xc4>)
 800db00:	4293      	cmp	r3, r2
 800db02:	d00b      	beq.n	800db1c <TIM_OC4_SetConfig+0x80>
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	4a17      	ldr	r2, [pc, #92]	@ (800db64 <TIM_OC4_SetConfig+0xc8>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d007      	beq.n	800db1c <TIM_OC4_SetConfig+0x80>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	4a16      	ldr	r2, [pc, #88]	@ (800db68 <TIM_OC4_SetConfig+0xcc>)
 800db10:	4293      	cmp	r3, r2
 800db12:	d003      	beq.n	800db1c <TIM_OC4_SetConfig+0x80>
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	4a15      	ldr	r2, [pc, #84]	@ (800db6c <TIM_OC4_SetConfig+0xd0>)
 800db18:	4293      	cmp	r3, r2
 800db1a:	d109      	bne.n	800db30 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800db22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	695b      	ldr	r3, [r3, #20]
 800db28:	019b      	lsls	r3, r3, #6
 800db2a:	697a      	ldr	r2, [r7, #20]
 800db2c:	4313      	orrs	r3, r2
 800db2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	697a      	ldr	r2, [r7, #20]
 800db34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	68fa      	ldr	r2, [r7, #12]
 800db3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	685a      	ldr	r2, [r3, #4]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	693a      	ldr	r2, [r7, #16]
 800db48:	621a      	str	r2, [r3, #32]
}
 800db4a:	bf00      	nop
 800db4c:	371c      	adds	r7, #28
 800db4e:	46bd      	mov	sp, r7
 800db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db54:	4770      	bx	lr
 800db56:	bf00      	nop
 800db58:	feff8fff 	.word	0xfeff8fff
 800db5c:	40010000 	.word	0x40010000
 800db60:	40010400 	.word	0x40010400
 800db64:	40014000 	.word	0x40014000
 800db68:	40014400 	.word	0x40014400
 800db6c:	40014800 	.word	0x40014800

0800db70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800db70:	b480      	push	{r7}
 800db72:	b087      	sub	sp, #28
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6a1b      	ldr	r3, [r3, #32]
 800db7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6a1b      	ldr	r3, [r3, #32]
 800db84:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800db98:	68fa      	ldr	r2, [r7, #12]
 800db9a:	4b21      	ldr	r3, [pc, #132]	@ (800dc20 <TIM_OC5_SetConfig+0xb0>)
 800db9c:	4013      	ands	r3, r2
 800db9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	68fa      	ldr	r2, [r7, #12]
 800dba6:	4313      	orrs	r3, r2
 800dba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800dbb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	689b      	ldr	r3, [r3, #8]
 800dbb6:	041b      	lsls	r3, r3, #16
 800dbb8:	693a      	ldr	r2, [r7, #16]
 800dbba:	4313      	orrs	r3, r2
 800dbbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	4a18      	ldr	r2, [pc, #96]	@ (800dc24 <TIM_OC5_SetConfig+0xb4>)
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d00f      	beq.n	800dbe6 <TIM_OC5_SetConfig+0x76>
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	4a17      	ldr	r2, [pc, #92]	@ (800dc28 <TIM_OC5_SetConfig+0xb8>)
 800dbca:	4293      	cmp	r3, r2
 800dbcc:	d00b      	beq.n	800dbe6 <TIM_OC5_SetConfig+0x76>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	4a16      	ldr	r2, [pc, #88]	@ (800dc2c <TIM_OC5_SetConfig+0xbc>)
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	d007      	beq.n	800dbe6 <TIM_OC5_SetConfig+0x76>
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	4a15      	ldr	r2, [pc, #84]	@ (800dc30 <TIM_OC5_SetConfig+0xc0>)
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	d003      	beq.n	800dbe6 <TIM_OC5_SetConfig+0x76>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	4a14      	ldr	r2, [pc, #80]	@ (800dc34 <TIM_OC5_SetConfig+0xc4>)
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	d109      	bne.n	800dbfa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dbec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	695b      	ldr	r3, [r3, #20]
 800dbf2:	021b      	lsls	r3, r3, #8
 800dbf4:	697a      	ldr	r2, [r7, #20]
 800dbf6:	4313      	orrs	r3, r2
 800dbf8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	697a      	ldr	r2, [r7, #20]
 800dbfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	68fa      	ldr	r2, [r7, #12]
 800dc04:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	685a      	ldr	r2, [r3, #4]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	693a      	ldr	r2, [r7, #16]
 800dc12:	621a      	str	r2, [r3, #32]
}
 800dc14:	bf00      	nop
 800dc16:	371c      	adds	r7, #28
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr
 800dc20:	fffeff8f 	.word	0xfffeff8f
 800dc24:	40010000 	.word	0x40010000
 800dc28:	40010400 	.word	0x40010400
 800dc2c:	40014000 	.word	0x40014000
 800dc30:	40014400 	.word	0x40014400
 800dc34:	40014800 	.word	0x40014800

0800dc38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	b087      	sub	sp, #28
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6a1b      	ldr	r3, [r3, #32]
 800dc46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6a1b      	ldr	r3, [r3, #32]
 800dc4c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	685b      	ldr	r3, [r3, #4]
 800dc58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dc60:	68fa      	ldr	r2, [r7, #12]
 800dc62:	4b22      	ldr	r3, [pc, #136]	@ (800dcec <TIM_OC6_SetConfig+0xb4>)
 800dc64:	4013      	ands	r3, r2
 800dc66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	021b      	lsls	r3, r3, #8
 800dc6e:	68fa      	ldr	r2, [r7, #12]
 800dc70:	4313      	orrs	r3, r2
 800dc72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800dc7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	689b      	ldr	r3, [r3, #8]
 800dc80:	051b      	lsls	r3, r3, #20
 800dc82:	693a      	ldr	r2, [r7, #16]
 800dc84:	4313      	orrs	r3, r2
 800dc86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	4a19      	ldr	r2, [pc, #100]	@ (800dcf0 <TIM_OC6_SetConfig+0xb8>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d00f      	beq.n	800dcb0 <TIM_OC6_SetConfig+0x78>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	4a18      	ldr	r2, [pc, #96]	@ (800dcf4 <TIM_OC6_SetConfig+0xbc>)
 800dc94:	4293      	cmp	r3, r2
 800dc96:	d00b      	beq.n	800dcb0 <TIM_OC6_SetConfig+0x78>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	4a17      	ldr	r2, [pc, #92]	@ (800dcf8 <TIM_OC6_SetConfig+0xc0>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d007      	beq.n	800dcb0 <TIM_OC6_SetConfig+0x78>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	4a16      	ldr	r2, [pc, #88]	@ (800dcfc <TIM_OC6_SetConfig+0xc4>)
 800dca4:	4293      	cmp	r3, r2
 800dca6:	d003      	beq.n	800dcb0 <TIM_OC6_SetConfig+0x78>
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	4a15      	ldr	r2, [pc, #84]	@ (800dd00 <TIM_OC6_SetConfig+0xc8>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d109      	bne.n	800dcc4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dcb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	695b      	ldr	r3, [r3, #20]
 800dcbc:	029b      	lsls	r3, r3, #10
 800dcbe:	697a      	ldr	r2, [r7, #20]
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	697a      	ldr	r2, [r7, #20]
 800dcc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	68fa      	ldr	r2, [r7, #12]
 800dcce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	685a      	ldr	r2, [r3, #4]
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	693a      	ldr	r2, [r7, #16]
 800dcdc:	621a      	str	r2, [r3, #32]
}
 800dcde:	bf00      	nop
 800dce0:	371c      	adds	r7, #28
 800dce2:	46bd      	mov	sp, r7
 800dce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce8:	4770      	bx	lr
 800dcea:	bf00      	nop
 800dcec:	feff8fff 	.word	0xfeff8fff
 800dcf0:	40010000 	.word	0x40010000
 800dcf4:	40010400 	.word	0x40010400
 800dcf8:	40014000 	.word	0x40014000
 800dcfc:	40014400 	.word	0x40014400
 800dd00:	40014800 	.word	0x40014800

0800dd04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b087      	sub	sp, #28
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	60f8      	str	r0, [r7, #12]
 800dd0c:	60b9      	str	r1, [r7, #8]
 800dd0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6a1b      	ldr	r3, [r3, #32]
 800dd14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	6a1b      	ldr	r3, [r3, #32]
 800dd1a:	f023 0201 	bic.w	r2, r3, #1
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	699b      	ldr	r3, [r3, #24]
 800dd26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dd2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	011b      	lsls	r3, r3, #4
 800dd34:	693a      	ldr	r2, [r7, #16]
 800dd36:	4313      	orrs	r3, r2
 800dd38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	f023 030a 	bic.w	r3, r3, #10
 800dd40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dd42:	697a      	ldr	r2, [r7, #20]
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	4313      	orrs	r3, r2
 800dd48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	693a      	ldr	r2, [r7, #16]
 800dd4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	697a      	ldr	r2, [r7, #20]
 800dd54:	621a      	str	r2, [r3, #32]
}
 800dd56:	bf00      	nop
 800dd58:	371c      	adds	r7, #28
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd60:	4770      	bx	lr

0800dd62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dd62:	b480      	push	{r7}
 800dd64:	b087      	sub	sp, #28
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	60f8      	str	r0, [r7, #12]
 800dd6a:	60b9      	str	r1, [r7, #8]
 800dd6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	6a1b      	ldr	r3, [r3, #32]
 800dd72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	6a1b      	ldr	r3, [r3, #32]
 800dd78:	f023 0210 	bic.w	r2, r3, #16
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	699b      	ldr	r3, [r3, #24]
 800dd84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dd86:	693b      	ldr	r3, [r7, #16]
 800dd88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800dd8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	031b      	lsls	r3, r3, #12
 800dd92:	693a      	ldr	r2, [r7, #16]
 800dd94:	4313      	orrs	r3, r2
 800dd96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800dd9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	011b      	lsls	r3, r3, #4
 800dda4:	697a      	ldr	r2, [r7, #20]
 800dda6:	4313      	orrs	r3, r2
 800dda8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	693a      	ldr	r2, [r7, #16]
 800ddae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	697a      	ldr	r2, [r7, #20]
 800ddb4:	621a      	str	r2, [r3, #32]
}
 800ddb6:	bf00      	nop
 800ddb8:	371c      	adds	r7, #28
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc0:	4770      	bx	lr
	...

0800ddc4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	b085      	sub	sp, #20
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	689b      	ldr	r3, [r3, #8]
 800ddd2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ddd4:	68fa      	ldr	r2, [r7, #12]
 800ddd6:	4b09      	ldr	r3, [pc, #36]	@ (800ddfc <TIM_ITRx_SetConfig+0x38>)
 800ddd8:	4013      	ands	r3, r2
 800ddda:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dddc:	683a      	ldr	r2, [r7, #0]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	4313      	orrs	r3, r2
 800dde2:	f043 0307 	orr.w	r3, r3, #7
 800dde6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	68fa      	ldr	r2, [r7, #12]
 800ddec:	609a      	str	r2, [r3, #8]
}
 800ddee:	bf00      	nop
 800ddf0:	3714      	adds	r7, #20
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf8:	4770      	bx	lr
 800ddfa:	bf00      	nop
 800ddfc:	ffcfff8f 	.word	0xffcfff8f

0800de00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800de00:	b480      	push	{r7}
 800de02:	b087      	sub	sp, #28
 800de04:	af00      	add	r7, sp, #0
 800de06:	60f8      	str	r0, [r7, #12]
 800de08:	60b9      	str	r1, [r7, #8]
 800de0a:	607a      	str	r2, [r7, #4]
 800de0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	689b      	ldr	r3, [r3, #8]
 800de12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800de1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	021a      	lsls	r2, r3, #8
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	431a      	orrs	r2, r3
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	4313      	orrs	r3, r2
 800de28:	697a      	ldr	r2, [r7, #20]
 800de2a:	4313      	orrs	r3, r2
 800de2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	697a      	ldr	r2, [r7, #20]
 800de32:	609a      	str	r2, [r3, #8]
}
 800de34:	bf00      	nop
 800de36:	371c      	adds	r7, #28
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr

0800de40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800de40:	b480      	push	{r7}
 800de42:	b085      	sub	sp, #20
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800de50:	2b01      	cmp	r3, #1
 800de52:	d101      	bne.n	800de58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800de54:	2302      	movs	r3, #2
 800de56:	e077      	b.n	800df48 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2201      	movs	r2, #1
 800de5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2202      	movs	r2, #2
 800de64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	685b      	ldr	r3, [r3, #4]
 800de6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	689b      	ldr	r3, [r3, #8]
 800de76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	4a35      	ldr	r2, [pc, #212]	@ (800df54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800de7e:	4293      	cmp	r3, r2
 800de80:	d004      	beq.n	800de8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	4a34      	ldr	r2, [pc, #208]	@ (800df58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800de88:	4293      	cmp	r3, r2
 800de8a:	d108      	bne.n	800de9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800de92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	68fa      	ldr	r2, [r7, #12]
 800de9a:	4313      	orrs	r3, r2
 800de9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dea4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	68fa      	ldr	r2, [r7, #12]
 800deac:	4313      	orrs	r3, r2
 800deae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	68fa      	ldr	r2, [r7, #12]
 800deb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	4a25      	ldr	r2, [pc, #148]	@ (800df54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800debe:	4293      	cmp	r3, r2
 800dec0:	d02c      	beq.n	800df1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800deca:	d027      	beq.n	800df1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4a22      	ldr	r2, [pc, #136]	@ (800df5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d022      	beq.n	800df1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	4a21      	ldr	r2, [pc, #132]	@ (800df60 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800dedc:	4293      	cmp	r3, r2
 800dede:	d01d      	beq.n	800df1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4a1f      	ldr	r2, [pc, #124]	@ (800df64 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d018      	beq.n	800df1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	4a1a      	ldr	r2, [pc, #104]	@ (800df58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d013      	beq.n	800df1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4a1b      	ldr	r2, [pc, #108]	@ (800df68 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800defa:	4293      	cmp	r3, r2
 800defc:	d00e      	beq.n	800df1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	4a1a      	ldr	r2, [pc, #104]	@ (800df6c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800df04:	4293      	cmp	r3, r2
 800df06:	d009      	beq.n	800df1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4a18      	ldr	r2, [pc, #96]	@ (800df70 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d004      	beq.n	800df1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	4a17      	ldr	r2, [pc, #92]	@ (800df74 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800df18:	4293      	cmp	r3, r2
 800df1a:	d10c      	bne.n	800df36 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800df22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	689b      	ldr	r3, [r3, #8]
 800df28:	68ba      	ldr	r2, [r7, #8]
 800df2a:	4313      	orrs	r3, r2
 800df2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	68ba      	ldr	r2, [r7, #8]
 800df34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2201      	movs	r2, #1
 800df3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2200      	movs	r2, #0
 800df42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800df46:	2300      	movs	r3, #0
}
 800df48:	4618      	mov	r0, r3
 800df4a:	3714      	adds	r7, #20
 800df4c:	46bd      	mov	sp, r7
 800df4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df52:	4770      	bx	lr
 800df54:	40010000 	.word	0x40010000
 800df58:	40010400 	.word	0x40010400
 800df5c:	40000400 	.word	0x40000400
 800df60:	40000800 	.word	0x40000800
 800df64:	40000c00 	.word	0x40000c00
 800df68:	40001800 	.word	0x40001800
 800df6c:	40014000 	.word	0x40014000
 800df70:	4000e000 	.word	0x4000e000
 800df74:	4000e400 	.word	0x4000e400

0800df78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800df78:	b480      	push	{r7}
 800df7a:	b085      	sub	sp, #20
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800df82:	2300      	movs	r3, #0
 800df84:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	d101      	bne.n	800df94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800df90:	2302      	movs	r3, #2
 800df92:	e073      	b.n	800e07c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2201      	movs	r2, #1
 800df98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	68db      	ldr	r3, [r3, #12]
 800dfa6:	4313      	orrs	r3, r2
 800dfa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	689b      	ldr	r3, [r3, #8]
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	4313      	orrs	r3, r2
 800dfc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800dfcc:	683b      	ldr	r3, [r7, #0]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4313      	orrs	r3, r2
 800dfd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	691b      	ldr	r3, [r3, #16]
 800dfde:	4313      	orrs	r3, r2
 800dfe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	695b      	ldr	r3, [r3, #20]
 800dfec:	4313      	orrs	r3, r2
 800dfee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dffa:	4313      	orrs	r3, r2
 800dffc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	699b      	ldr	r3, [r3, #24]
 800e008:	041b      	lsls	r3, r3, #16
 800e00a:	4313      	orrs	r3, r2
 800e00c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	69db      	ldr	r3, [r3, #28]
 800e018:	4313      	orrs	r3, r2
 800e01a:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4a19      	ldr	r2, [pc, #100]	@ (800e088 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d004      	beq.n	800e030 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	4a18      	ldr	r2, [pc, #96]	@ (800e08c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800e02c:	4293      	cmp	r3, r2
 800e02e:	d11c      	bne.n	800e06a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e03a:	051b      	lsls	r3, r3, #20
 800e03c:	4313      	orrs	r3, r2
 800e03e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	6a1b      	ldr	r3, [r3, #32]
 800e04a:	4313      	orrs	r3, r2
 800e04c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e058:	4313      	orrs	r3, r2
 800e05a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e066:	4313      	orrs	r3, r2
 800e068:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	68fa      	ldr	r2, [r7, #12]
 800e070:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2200      	movs	r2, #0
 800e076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e07a:	2300      	movs	r3, #0
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3714      	adds	r7, #20
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr
 800e088:	40010000 	.word	0x40010000
 800e08c:	40010400 	.word	0x40010400

0800e090 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e090:	b480      	push	{r7}
 800e092:	b083      	sub	sp, #12
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e098:	bf00      	nop
 800e09a:	370c      	adds	r7, #12
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr

0800e0a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b083      	sub	sp, #12
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e0ac:	bf00      	nop
 800e0ae:	370c      	adds	r7, #12
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b6:	4770      	bx	lr

0800e0b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b083      	sub	sp, #12
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e0c0:	bf00      	nop
 800e0c2:	370c      	adds	r7, #12
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ca:	4770      	bx	lr

0800e0cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b082      	sub	sp, #8
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d101      	bne.n	800e0de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e0da:	2301      	movs	r3, #1
 800e0dc:	e042      	b.n	800e164 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d106      	bne.n	800e0f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f7f3 fd75 	bl	8001be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2224      	movs	r2, #36	@ 0x24
 800e0fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	681a      	ldr	r2, [r3, #0]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f022 0201 	bic.w	r2, r2, #1
 800e10c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e112:	2b00      	cmp	r3, #0
 800e114:	d002      	beq.n	800e11c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f001 fa8a 	bl	800f630 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f000 fc1b 	bl	800e958 <UART_SetConfig>
 800e122:	4603      	mov	r3, r0
 800e124:	2b01      	cmp	r3, #1
 800e126:	d101      	bne.n	800e12c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e128:	2301      	movs	r3, #1
 800e12a:	e01b      	b.n	800e164 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	685a      	ldr	r2, [r3, #4]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e13a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	689a      	ldr	r2, [r3, #8]
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e14a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f042 0201 	orr.w	r2, r2, #1
 800e15a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f001 fb09 	bl	800f774 <UART_CheckIdleState>
 800e162:	4603      	mov	r3, r0
}
 800e164:	4618      	mov	r0, r3
 800e166:	3708      	adds	r7, #8
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}

0800e16c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b0ba      	sub	sp, #232	@ 0xe8
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	69db      	ldr	r3, [r3, #28]
 800e17a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	689b      	ldr	r3, [r3, #8]
 800e18e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e192:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e196:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e19a:	4013      	ands	r3, r2
 800e19c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e1a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d11b      	bne.n	800e1e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e1a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e1ac:	f003 0320 	and.w	r3, r3, #32
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d015      	beq.n	800e1e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e1b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e1b8:	f003 0320 	and.w	r3, r3, #32
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d105      	bne.n	800e1cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e1c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e1c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d009      	beq.n	800e1e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	f000 8393 	beq.w	800e8fc <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	4798      	blx	r3
      }
      return;
 800e1de:	e38d      	b.n	800e8fc <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e1e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	f000 8123 	beq.w	800e430 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e1ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e1ee:	4b8d      	ldr	r3, [pc, #564]	@ (800e424 <HAL_UART_IRQHandler+0x2b8>)
 800e1f0:	4013      	ands	r3, r2
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d106      	bne.n	800e204 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e1f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e1fa:	4b8b      	ldr	r3, [pc, #556]	@ (800e428 <HAL_UART_IRQHandler+0x2bc>)
 800e1fc:	4013      	ands	r3, r2
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	f000 8116 	beq.w	800e430 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e208:	f003 0301 	and.w	r3, r3, #1
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d011      	beq.n	800e234 <HAL_UART_IRQHandler+0xc8>
 800e210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d00b      	beq.n	800e234 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	2201      	movs	r2, #1
 800e222:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e22a:	f043 0201 	orr.w	r2, r3, #1
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e238:	f003 0302 	and.w	r3, r3, #2
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d011      	beq.n	800e264 <HAL_UART_IRQHandler+0xf8>
 800e240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e244:	f003 0301 	and.w	r3, r3, #1
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d00b      	beq.n	800e264 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	2202      	movs	r2, #2
 800e252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e25a:	f043 0204 	orr.w	r2, r3, #4
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e268:	f003 0304 	and.w	r3, r3, #4
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d011      	beq.n	800e294 <HAL_UART_IRQHandler+0x128>
 800e270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e274:	f003 0301 	and.w	r3, r3, #1
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d00b      	beq.n	800e294 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	2204      	movs	r2, #4
 800e282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e28a:	f043 0202 	orr.w	r2, r3, #2
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e298:	f003 0308 	and.w	r3, r3, #8
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d017      	beq.n	800e2d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e2a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e2a4:	f003 0320 	and.w	r3, r3, #32
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d105      	bne.n	800e2b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e2ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e2b0:	4b5c      	ldr	r3, [pc, #368]	@ (800e424 <HAL_UART_IRQHandler+0x2b8>)
 800e2b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d00b      	beq.n	800e2d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	2208      	movs	r2, #8
 800e2be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e2c6:	f043 0208 	orr.w	r2, r3, #8
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e2d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e2d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d012      	beq.n	800e302 <HAL_UART_IRQHandler+0x196>
 800e2dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e2e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d00c      	beq.n	800e302 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e2f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e2f8:	f043 0220 	orr.w	r2, r3, #32
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e308:	2b00      	cmp	r3, #0
 800e30a:	f000 82f9 	beq.w	800e900 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e30e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e312:	f003 0320 	and.w	r3, r3, #32
 800e316:	2b00      	cmp	r3, #0
 800e318:	d013      	beq.n	800e342 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e31a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e31e:	f003 0320 	and.w	r3, r3, #32
 800e322:	2b00      	cmp	r3, #0
 800e324:	d105      	bne.n	800e332 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e32a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d007      	beq.n	800e342 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e336:	2b00      	cmp	r3, #0
 800e338:	d003      	beq.n	800e342 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e348:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	689b      	ldr	r3, [r3, #8]
 800e352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e356:	2b40      	cmp	r3, #64	@ 0x40
 800e358:	d005      	beq.n	800e366 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e35a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e35e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e362:	2b00      	cmp	r3, #0
 800e364:	d054      	beq.n	800e410 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f001 fb1c 	bl	800f9a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	689b      	ldr	r3, [r3, #8]
 800e372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e376:	2b40      	cmp	r3, #64	@ 0x40
 800e378:	d146      	bne.n	800e408 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	3308      	adds	r3, #8
 800e380:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e384:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e388:	e853 3f00 	ldrex	r3, [r3]
 800e38c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e390:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e394:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e398:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	3308      	adds	r3, #8
 800e3a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e3a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e3aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e3b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e3b6:	e841 2300 	strex	r3, r2, [r1]
 800e3ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e3be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d1d9      	bne.n	800e37a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d017      	beq.n	800e400 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3d6:	4a15      	ldr	r2, [pc, #84]	@ (800e42c <HAL_UART_IRQHandler+0x2c0>)
 800e3d8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f7f7 fc09 	bl	8005bf8 <HAL_DMA_Abort_IT>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d019      	beq.n	800e420 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e3f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3f4:	687a      	ldr	r2, [r7, #4]
 800e3f6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800e3fa:	4610      	mov	r0, r2
 800e3fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3fe:	e00f      	b.n	800e420 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f000 fa93 	bl	800e92c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e406:	e00b      	b.n	800e420 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f000 fa8f 	bl	800e92c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e40e:	e007      	b.n	800e420 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f000 fa8b 	bl	800e92c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2200      	movs	r2, #0
 800e41a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800e41e:	e26f      	b.n	800e900 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e420:	bf00      	nop
    return;
 800e422:	e26d      	b.n	800e900 <HAL_UART_IRQHandler+0x794>
 800e424:	10000001 	.word	0x10000001
 800e428:	04000120 	.word	0x04000120
 800e42c:	0800fa71 	.word	0x0800fa71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e434:	2b01      	cmp	r3, #1
 800e436:	f040 8203 	bne.w	800e840 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e43a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e43e:	f003 0310 	and.w	r3, r3, #16
 800e442:	2b00      	cmp	r3, #0
 800e444:	f000 81fc 	beq.w	800e840 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e44c:	f003 0310 	and.w	r3, r3, #16
 800e450:	2b00      	cmp	r3, #0
 800e452:	f000 81f5 	beq.w	800e840 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	2210      	movs	r2, #16
 800e45c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	689b      	ldr	r3, [r3, #8]
 800e464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e468:	2b40      	cmp	r3, #64	@ 0x40
 800e46a:	f040 816d 	bne.w	800e748 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	4aa4      	ldr	r2, [pc, #656]	@ (800e708 <HAL_UART_IRQHandler+0x59c>)
 800e478:	4293      	cmp	r3, r2
 800e47a:	d068      	beq.n	800e54e <HAL_UART_IRQHandler+0x3e2>
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	4aa1      	ldr	r2, [pc, #644]	@ (800e70c <HAL_UART_IRQHandler+0x5a0>)
 800e486:	4293      	cmp	r3, r2
 800e488:	d061      	beq.n	800e54e <HAL_UART_IRQHandler+0x3e2>
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	4a9f      	ldr	r2, [pc, #636]	@ (800e710 <HAL_UART_IRQHandler+0x5a4>)
 800e494:	4293      	cmp	r3, r2
 800e496:	d05a      	beq.n	800e54e <HAL_UART_IRQHandler+0x3e2>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	4a9c      	ldr	r2, [pc, #624]	@ (800e714 <HAL_UART_IRQHandler+0x5a8>)
 800e4a2:	4293      	cmp	r3, r2
 800e4a4:	d053      	beq.n	800e54e <HAL_UART_IRQHandler+0x3e2>
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	4a9a      	ldr	r2, [pc, #616]	@ (800e718 <HAL_UART_IRQHandler+0x5ac>)
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d04c      	beq.n	800e54e <HAL_UART_IRQHandler+0x3e2>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	4a97      	ldr	r2, [pc, #604]	@ (800e71c <HAL_UART_IRQHandler+0x5b0>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d045      	beq.n	800e54e <HAL_UART_IRQHandler+0x3e2>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	4a95      	ldr	r2, [pc, #596]	@ (800e720 <HAL_UART_IRQHandler+0x5b4>)
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d03e      	beq.n	800e54e <HAL_UART_IRQHandler+0x3e2>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	4a92      	ldr	r2, [pc, #584]	@ (800e724 <HAL_UART_IRQHandler+0x5b8>)
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d037      	beq.n	800e54e <HAL_UART_IRQHandler+0x3e2>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	4a90      	ldr	r2, [pc, #576]	@ (800e728 <HAL_UART_IRQHandler+0x5bc>)
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	d030      	beq.n	800e54e <HAL_UART_IRQHandler+0x3e2>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	4a8d      	ldr	r2, [pc, #564]	@ (800e72c <HAL_UART_IRQHandler+0x5c0>)
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d029      	beq.n	800e54e <HAL_UART_IRQHandler+0x3e2>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	4a8b      	ldr	r2, [pc, #556]	@ (800e730 <HAL_UART_IRQHandler+0x5c4>)
 800e504:	4293      	cmp	r3, r2
 800e506:	d022      	beq.n	800e54e <HAL_UART_IRQHandler+0x3e2>
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4a88      	ldr	r2, [pc, #544]	@ (800e734 <HAL_UART_IRQHandler+0x5c8>)
 800e512:	4293      	cmp	r3, r2
 800e514:	d01b      	beq.n	800e54e <HAL_UART_IRQHandler+0x3e2>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	4a86      	ldr	r2, [pc, #536]	@ (800e738 <HAL_UART_IRQHandler+0x5cc>)
 800e520:	4293      	cmp	r3, r2
 800e522:	d014      	beq.n	800e54e <HAL_UART_IRQHandler+0x3e2>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4a83      	ldr	r2, [pc, #524]	@ (800e73c <HAL_UART_IRQHandler+0x5d0>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d00d      	beq.n	800e54e <HAL_UART_IRQHandler+0x3e2>
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	4a81      	ldr	r2, [pc, #516]	@ (800e740 <HAL_UART_IRQHandler+0x5d4>)
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d006      	beq.n	800e54e <HAL_UART_IRQHandler+0x3e2>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	4a7e      	ldr	r2, [pc, #504]	@ (800e744 <HAL_UART_IRQHandler+0x5d8>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d106      	bne.n	800e55c <HAL_UART_IRQHandler+0x3f0>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	685b      	ldr	r3, [r3, #4]
 800e558:	b29b      	uxth	r3, r3
 800e55a:	e005      	b.n	800e568 <HAL_UART_IRQHandler+0x3fc>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	685b      	ldr	r3, [r3, #4]
 800e566:	b29b      	uxth	r3, r3
 800e568:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e56c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e570:	2b00      	cmp	r3, #0
 800e572:	f000 80ad 	beq.w	800e6d0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e57c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e580:	429a      	cmp	r2, r3
 800e582:	f080 80a5 	bcs.w	800e6d0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e58c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e596:	69db      	ldr	r3, [r3, #28]
 800e598:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e59c:	f000 8087 	beq.w	800e6ae <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e5ac:	e853 3f00 	ldrex	r3, [r3]
 800e5b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e5b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e5b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e5bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e5ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e5ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e5d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e5da:	e841 2300 	strex	r3, r2, [r1]
 800e5de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e5e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d1da      	bne.n	800e5a0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	3308      	adds	r3, #8
 800e5f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e5f4:	e853 3f00 	ldrex	r3, [r3]
 800e5f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e5fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e5fc:	f023 0301 	bic.w	r3, r3, #1
 800e600:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	3308      	adds	r3, #8
 800e60a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e60e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e612:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e614:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e616:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e61a:	e841 2300 	strex	r3, r2, [r1]
 800e61e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e620:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e622:	2b00      	cmp	r3, #0
 800e624:	d1e1      	bne.n	800e5ea <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	3308      	adds	r3, #8
 800e62c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e62e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e630:	e853 3f00 	ldrex	r3, [r3]
 800e634:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e636:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e63c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	3308      	adds	r3, #8
 800e646:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e64a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e64c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e64e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e650:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e652:	e841 2300 	strex	r3, r2, [r1]
 800e656:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e658:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d1e3      	bne.n	800e626 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2220      	movs	r2, #32
 800e662:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2200      	movs	r2, #0
 800e66a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e672:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e674:	e853 3f00 	ldrex	r3, [r3]
 800e678:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e67a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e67c:	f023 0310 	bic.w	r3, r3, #16
 800e680:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	461a      	mov	r2, r3
 800e68a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e68e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e690:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e692:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e694:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e696:	e841 2300 	strex	r3, r2, [r1]
 800e69a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e69c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d1e4      	bne.n	800e66c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f7f6 ff87 	bl	80055bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2202      	movs	r2, #2
 800e6b2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e6c0:	b29b      	uxth	r3, r3
 800e6c2:	1ad3      	subs	r3, r2, r3
 800e6c4:	b29b      	uxth	r3, r3
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f000 f939 	bl	800e940 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800e6ce:	e119      	b.n	800e904 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e6d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	f040 8112 	bne.w	800e904 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e6e6:	69db      	ldr	r3, [r3, #28]
 800e6e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e6ec:	f040 810a 	bne.w	800e904 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2202      	movs	r2, #2
 800e6f4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f000 f91e 	bl	800e940 <HAL_UARTEx_RxEventCallback>
      return;
 800e704:	e0fe      	b.n	800e904 <HAL_UART_IRQHandler+0x798>
 800e706:	bf00      	nop
 800e708:	40020010 	.word	0x40020010
 800e70c:	40020028 	.word	0x40020028
 800e710:	40020040 	.word	0x40020040
 800e714:	40020058 	.word	0x40020058
 800e718:	40020070 	.word	0x40020070
 800e71c:	40020088 	.word	0x40020088
 800e720:	400200a0 	.word	0x400200a0
 800e724:	400200b8 	.word	0x400200b8
 800e728:	40020410 	.word	0x40020410
 800e72c:	40020428 	.word	0x40020428
 800e730:	40020440 	.word	0x40020440
 800e734:	40020458 	.word	0x40020458
 800e738:	40020470 	.word	0x40020470
 800e73c:	40020488 	.word	0x40020488
 800e740:	400204a0 	.word	0x400204a0
 800e744:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e754:	b29b      	uxth	r3, r3
 800e756:	1ad3      	subs	r3, r2, r3
 800e758:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e762:	b29b      	uxth	r3, r3
 800e764:	2b00      	cmp	r3, #0
 800e766:	f000 80cf 	beq.w	800e908 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800e76a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e76e:	2b00      	cmp	r3, #0
 800e770:	f000 80ca 	beq.w	800e908 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e77a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e77c:	e853 3f00 	ldrex	r3, [r3]
 800e780:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e784:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e788:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	461a      	mov	r2, r3
 800e792:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e796:	647b      	str	r3, [r7, #68]	@ 0x44
 800e798:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e79a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e79c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e79e:	e841 2300 	strex	r3, r2, [r1]
 800e7a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e7a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d1e4      	bne.n	800e774 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	3308      	adds	r3, #8
 800e7b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7b4:	e853 3f00 	ldrex	r3, [r3]
 800e7b8:	623b      	str	r3, [r7, #32]
   return(result);
 800e7ba:	6a3a      	ldr	r2, [r7, #32]
 800e7bc:	4b55      	ldr	r3, [pc, #340]	@ (800e914 <HAL_UART_IRQHandler+0x7a8>)
 800e7be:	4013      	ands	r3, r2
 800e7c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	3308      	adds	r3, #8
 800e7ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e7ce:	633a      	str	r2, [r7, #48]	@ 0x30
 800e7d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e7d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e7d6:	e841 2300 	strex	r3, r2, [r1]
 800e7da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d1e3      	bne.n	800e7aa <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2220      	movs	r2, #32
 800e7e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	e853 3f00 	ldrex	r3, [r3]
 800e802:	60fb      	str	r3, [r7, #12]
   return(result);
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f023 0310 	bic.w	r3, r3, #16
 800e80a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	461a      	mov	r2, r3
 800e814:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e818:	61fb      	str	r3, [r7, #28]
 800e81a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e81c:	69b9      	ldr	r1, [r7, #24]
 800e81e:	69fa      	ldr	r2, [r7, #28]
 800e820:	e841 2300 	strex	r3, r2, [r1]
 800e824:	617b      	str	r3, [r7, #20]
   return(result);
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d1e4      	bne.n	800e7f6 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2202      	movs	r2, #2
 800e830:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e832:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e836:	4619      	mov	r1, r3
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f000 f881 	bl	800e940 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e83e:	e063      	b.n	800e908 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e844:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d00e      	beq.n	800e86a <HAL_UART_IRQHandler+0x6fe>
 800e84c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e850:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e854:	2b00      	cmp	r3, #0
 800e856:	d008      	beq.n	800e86a <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800e860:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f001 f941 	bl	800faea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e868:	e051      	b.n	800e90e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e86a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e86e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e872:	2b00      	cmp	r3, #0
 800e874:	d014      	beq.n	800e8a0 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e87a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d105      	bne.n	800e88e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e886:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d008      	beq.n	800e8a0 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e892:	2b00      	cmp	r3, #0
 800e894:	d03a      	beq.n	800e90c <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	4798      	blx	r3
    }
    return;
 800e89e:	e035      	b.n	800e90c <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e8a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e8a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d009      	beq.n	800e8c0 <HAL_UART_IRQHandler+0x754>
 800e8ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e8b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d003      	beq.n	800e8c0 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f001 f8eb 	bl	800fa94 <UART_EndTransmit_IT>
    return;
 800e8be:	e026      	b.n	800e90e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e8c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e8c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d009      	beq.n	800e8e0 <HAL_UART_IRQHandler+0x774>
 800e8cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e8d0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d003      	beq.n	800e8e0 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f001 f91a 	bl	800fb12 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e8de:	e016      	b.n	800e90e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e8e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e8e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d010      	beq.n	800e90e <HAL_UART_IRQHandler+0x7a2>
 800e8ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	da0c      	bge.n	800e90e <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f001 f902 	bl	800fafe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e8fa:	e008      	b.n	800e90e <HAL_UART_IRQHandler+0x7a2>
      return;
 800e8fc:	bf00      	nop
 800e8fe:	e006      	b.n	800e90e <HAL_UART_IRQHandler+0x7a2>
    return;
 800e900:	bf00      	nop
 800e902:	e004      	b.n	800e90e <HAL_UART_IRQHandler+0x7a2>
      return;
 800e904:	bf00      	nop
 800e906:	e002      	b.n	800e90e <HAL_UART_IRQHandler+0x7a2>
      return;
 800e908:	bf00      	nop
 800e90a:	e000      	b.n	800e90e <HAL_UART_IRQHandler+0x7a2>
    return;
 800e90c:	bf00      	nop
  }
}
 800e90e:	37e8      	adds	r7, #232	@ 0xe8
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}
 800e914:	effffffe 	.word	0xeffffffe

0800e918 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e918:	b480      	push	{r7}
 800e91a:	b083      	sub	sp, #12
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e920:	bf00      	nop
 800e922:	370c      	adds	r7, #12
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr

0800e92c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e92c:	b480      	push	{r7}
 800e92e:	b083      	sub	sp, #12
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e934:	bf00      	nop
 800e936:	370c      	adds	r7, #12
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr

0800e940 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e940:	b480      	push	{r7}
 800e942:	b083      	sub	sp, #12
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	460b      	mov	r3, r1
 800e94a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e94c:	bf00      	nop
 800e94e:	370c      	adds	r7, #12
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr

0800e958 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e95c:	b092      	sub	sp, #72	@ 0x48
 800e95e:	af00      	add	r7, sp, #0
 800e960:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e962:	2300      	movs	r3, #0
 800e964:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	689a      	ldr	r2, [r3, #8]
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	691b      	ldr	r3, [r3, #16]
 800e970:	431a      	orrs	r2, r3
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	695b      	ldr	r3, [r3, #20]
 800e976:	431a      	orrs	r2, r3
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	69db      	ldr	r3, [r3, #28]
 800e97c:	4313      	orrs	r3, r2
 800e97e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	681a      	ldr	r2, [r3, #0]
 800e986:	4bbe      	ldr	r3, [pc, #760]	@ (800ec80 <UART_SetConfig+0x328>)
 800e988:	4013      	ands	r3, r2
 800e98a:	697a      	ldr	r2, [r7, #20]
 800e98c:	6812      	ldr	r2, [r2, #0]
 800e98e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e990:	430b      	orrs	r3, r1
 800e992:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e99e:	697b      	ldr	r3, [r7, #20]
 800e9a0:	68da      	ldr	r2, [r3, #12]
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	430a      	orrs	r2, r1
 800e9a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	699b      	ldr	r3, [r3, #24]
 800e9ae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	4ab3      	ldr	r2, [pc, #716]	@ (800ec84 <UART_SetConfig+0x32c>)
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	d004      	beq.n	800e9c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	6a1b      	ldr	r3, [r3, #32]
 800e9be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e9c0:	4313      	orrs	r3, r2
 800e9c2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	689a      	ldr	r2, [r3, #8]
 800e9ca:	4baf      	ldr	r3, [pc, #700]	@ (800ec88 <UART_SetConfig+0x330>)
 800e9cc:	4013      	ands	r3, r2
 800e9ce:	697a      	ldr	r2, [r7, #20]
 800e9d0:	6812      	ldr	r2, [r2, #0]
 800e9d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e9d4:	430b      	orrs	r3, r1
 800e9d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9de:	f023 010f 	bic.w	r1, r3, #15
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	430a      	orrs	r2, r1
 800e9ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	4aa6      	ldr	r2, [pc, #664]	@ (800ec8c <UART_SetConfig+0x334>)
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	d177      	bne.n	800eae8 <UART_SetConfig+0x190>
 800e9f8:	4ba5      	ldr	r3, [pc, #660]	@ (800ec90 <UART_SetConfig+0x338>)
 800e9fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ea00:	2b28      	cmp	r3, #40	@ 0x28
 800ea02:	d86d      	bhi.n	800eae0 <UART_SetConfig+0x188>
 800ea04:	a201      	add	r2, pc, #4	@ (adr r2, 800ea0c <UART_SetConfig+0xb4>)
 800ea06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea0a:	bf00      	nop
 800ea0c:	0800eab1 	.word	0x0800eab1
 800ea10:	0800eae1 	.word	0x0800eae1
 800ea14:	0800eae1 	.word	0x0800eae1
 800ea18:	0800eae1 	.word	0x0800eae1
 800ea1c:	0800eae1 	.word	0x0800eae1
 800ea20:	0800eae1 	.word	0x0800eae1
 800ea24:	0800eae1 	.word	0x0800eae1
 800ea28:	0800eae1 	.word	0x0800eae1
 800ea2c:	0800eab9 	.word	0x0800eab9
 800ea30:	0800eae1 	.word	0x0800eae1
 800ea34:	0800eae1 	.word	0x0800eae1
 800ea38:	0800eae1 	.word	0x0800eae1
 800ea3c:	0800eae1 	.word	0x0800eae1
 800ea40:	0800eae1 	.word	0x0800eae1
 800ea44:	0800eae1 	.word	0x0800eae1
 800ea48:	0800eae1 	.word	0x0800eae1
 800ea4c:	0800eac1 	.word	0x0800eac1
 800ea50:	0800eae1 	.word	0x0800eae1
 800ea54:	0800eae1 	.word	0x0800eae1
 800ea58:	0800eae1 	.word	0x0800eae1
 800ea5c:	0800eae1 	.word	0x0800eae1
 800ea60:	0800eae1 	.word	0x0800eae1
 800ea64:	0800eae1 	.word	0x0800eae1
 800ea68:	0800eae1 	.word	0x0800eae1
 800ea6c:	0800eac9 	.word	0x0800eac9
 800ea70:	0800eae1 	.word	0x0800eae1
 800ea74:	0800eae1 	.word	0x0800eae1
 800ea78:	0800eae1 	.word	0x0800eae1
 800ea7c:	0800eae1 	.word	0x0800eae1
 800ea80:	0800eae1 	.word	0x0800eae1
 800ea84:	0800eae1 	.word	0x0800eae1
 800ea88:	0800eae1 	.word	0x0800eae1
 800ea8c:	0800ead1 	.word	0x0800ead1
 800ea90:	0800eae1 	.word	0x0800eae1
 800ea94:	0800eae1 	.word	0x0800eae1
 800ea98:	0800eae1 	.word	0x0800eae1
 800ea9c:	0800eae1 	.word	0x0800eae1
 800eaa0:	0800eae1 	.word	0x0800eae1
 800eaa4:	0800eae1 	.word	0x0800eae1
 800eaa8:	0800eae1 	.word	0x0800eae1
 800eaac:	0800ead9 	.word	0x0800ead9
 800eab0:	2301      	movs	r3, #1
 800eab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eab6:	e326      	b.n	800f106 <UART_SetConfig+0x7ae>
 800eab8:	2304      	movs	r3, #4
 800eaba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eabe:	e322      	b.n	800f106 <UART_SetConfig+0x7ae>
 800eac0:	2308      	movs	r3, #8
 800eac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eac6:	e31e      	b.n	800f106 <UART_SetConfig+0x7ae>
 800eac8:	2310      	movs	r3, #16
 800eaca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eace:	e31a      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ead0:	2320      	movs	r3, #32
 800ead2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ead6:	e316      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ead8:	2340      	movs	r3, #64	@ 0x40
 800eada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eade:	e312      	b.n	800f106 <UART_SetConfig+0x7ae>
 800eae0:	2380      	movs	r3, #128	@ 0x80
 800eae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eae6:	e30e      	b.n	800f106 <UART_SetConfig+0x7ae>
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	4a69      	ldr	r2, [pc, #420]	@ (800ec94 <UART_SetConfig+0x33c>)
 800eaee:	4293      	cmp	r3, r2
 800eaf0:	d130      	bne.n	800eb54 <UART_SetConfig+0x1fc>
 800eaf2:	4b67      	ldr	r3, [pc, #412]	@ (800ec90 <UART_SetConfig+0x338>)
 800eaf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eaf6:	f003 0307 	and.w	r3, r3, #7
 800eafa:	2b05      	cmp	r3, #5
 800eafc:	d826      	bhi.n	800eb4c <UART_SetConfig+0x1f4>
 800eafe:	a201      	add	r2, pc, #4	@ (adr r2, 800eb04 <UART_SetConfig+0x1ac>)
 800eb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb04:	0800eb1d 	.word	0x0800eb1d
 800eb08:	0800eb25 	.word	0x0800eb25
 800eb0c:	0800eb2d 	.word	0x0800eb2d
 800eb10:	0800eb35 	.word	0x0800eb35
 800eb14:	0800eb3d 	.word	0x0800eb3d
 800eb18:	0800eb45 	.word	0x0800eb45
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb22:	e2f0      	b.n	800f106 <UART_SetConfig+0x7ae>
 800eb24:	2304      	movs	r3, #4
 800eb26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb2a:	e2ec      	b.n	800f106 <UART_SetConfig+0x7ae>
 800eb2c:	2308      	movs	r3, #8
 800eb2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb32:	e2e8      	b.n	800f106 <UART_SetConfig+0x7ae>
 800eb34:	2310      	movs	r3, #16
 800eb36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb3a:	e2e4      	b.n	800f106 <UART_SetConfig+0x7ae>
 800eb3c:	2320      	movs	r3, #32
 800eb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb42:	e2e0      	b.n	800f106 <UART_SetConfig+0x7ae>
 800eb44:	2340      	movs	r3, #64	@ 0x40
 800eb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb4a:	e2dc      	b.n	800f106 <UART_SetConfig+0x7ae>
 800eb4c:	2380      	movs	r3, #128	@ 0x80
 800eb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb52:	e2d8      	b.n	800f106 <UART_SetConfig+0x7ae>
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	4a4f      	ldr	r2, [pc, #316]	@ (800ec98 <UART_SetConfig+0x340>)
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d130      	bne.n	800ebc0 <UART_SetConfig+0x268>
 800eb5e:	4b4c      	ldr	r3, [pc, #304]	@ (800ec90 <UART_SetConfig+0x338>)
 800eb60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb62:	f003 0307 	and.w	r3, r3, #7
 800eb66:	2b05      	cmp	r3, #5
 800eb68:	d826      	bhi.n	800ebb8 <UART_SetConfig+0x260>
 800eb6a:	a201      	add	r2, pc, #4	@ (adr r2, 800eb70 <UART_SetConfig+0x218>)
 800eb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb70:	0800eb89 	.word	0x0800eb89
 800eb74:	0800eb91 	.word	0x0800eb91
 800eb78:	0800eb99 	.word	0x0800eb99
 800eb7c:	0800eba1 	.word	0x0800eba1
 800eb80:	0800eba9 	.word	0x0800eba9
 800eb84:	0800ebb1 	.word	0x0800ebb1
 800eb88:	2300      	movs	r3, #0
 800eb8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb8e:	e2ba      	b.n	800f106 <UART_SetConfig+0x7ae>
 800eb90:	2304      	movs	r3, #4
 800eb92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb96:	e2b6      	b.n	800f106 <UART_SetConfig+0x7ae>
 800eb98:	2308      	movs	r3, #8
 800eb9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eb9e:	e2b2      	b.n	800f106 <UART_SetConfig+0x7ae>
 800eba0:	2310      	movs	r3, #16
 800eba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eba6:	e2ae      	b.n	800f106 <UART_SetConfig+0x7ae>
 800eba8:	2320      	movs	r3, #32
 800ebaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebae:	e2aa      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ebb0:	2340      	movs	r3, #64	@ 0x40
 800ebb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebb6:	e2a6      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ebb8:	2380      	movs	r3, #128	@ 0x80
 800ebba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebbe:	e2a2      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	4a35      	ldr	r2, [pc, #212]	@ (800ec9c <UART_SetConfig+0x344>)
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d130      	bne.n	800ec2c <UART_SetConfig+0x2d4>
 800ebca:	4b31      	ldr	r3, [pc, #196]	@ (800ec90 <UART_SetConfig+0x338>)
 800ebcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ebce:	f003 0307 	and.w	r3, r3, #7
 800ebd2:	2b05      	cmp	r3, #5
 800ebd4:	d826      	bhi.n	800ec24 <UART_SetConfig+0x2cc>
 800ebd6:	a201      	add	r2, pc, #4	@ (adr r2, 800ebdc <UART_SetConfig+0x284>)
 800ebd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebdc:	0800ebf5 	.word	0x0800ebf5
 800ebe0:	0800ebfd 	.word	0x0800ebfd
 800ebe4:	0800ec05 	.word	0x0800ec05
 800ebe8:	0800ec0d 	.word	0x0800ec0d
 800ebec:	0800ec15 	.word	0x0800ec15
 800ebf0:	0800ec1d 	.word	0x0800ec1d
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ebfa:	e284      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ebfc:	2304      	movs	r3, #4
 800ebfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec02:	e280      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ec04:	2308      	movs	r3, #8
 800ec06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec0a:	e27c      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ec0c:	2310      	movs	r3, #16
 800ec0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec12:	e278      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ec14:	2320      	movs	r3, #32
 800ec16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec1a:	e274      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ec1c:	2340      	movs	r3, #64	@ 0x40
 800ec1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec22:	e270      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ec24:	2380      	movs	r3, #128	@ 0x80
 800ec26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec2a:	e26c      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4a1b      	ldr	r2, [pc, #108]	@ (800eca0 <UART_SetConfig+0x348>)
 800ec32:	4293      	cmp	r3, r2
 800ec34:	d142      	bne.n	800ecbc <UART_SetConfig+0x364>
 800ec36:	4b16      	ldr	r3, [pc, #88]	@ (800ec90 <UART_SetConfig+0x338>)
 800ec38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec3a:	f003 0307 	and.w	r3, r3, #7
 800ec3e:	2b05      	cmp	r3, #5
 800ec40:	d838      	bhi.n	800ecb4 <UART_SetConfig+0x35c>
 800ec42:	a201      	add	r2, pc, #4	@ (adr r2, 800ec48 <UART_SetConfig+0x2f0>)
 800ec44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec48:	0800ec61 	.word	0x0800ec61
 800ec4c:	0800ec69 	.word	0x0800ec69
 800ec50:	0800ec71 	.word	0x0800ec71
 800ec54:	0800ec79 	.word	0x0800ec79
 800ec58:	0800eca5 	.word	0x0800eca5
 800ec5c:	0800ecad 	.word	0x0800ecad
 800ec60:	2300      	movs	r3, #0
 800ec62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec66:	e24e      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ec68:	2304      	movs	r3, #4
 800ec6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec6e:	e24a      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ec70:	2308      	movs	r3, #8
 800ec72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec76:	e246      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ec78:	2310      	movs	r3, #16
 800ec7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ec7e:	e242      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ec80:	cfff69f3 	.word	0xcfff69f3
 800ec84:	58000c00 	.word	0x58000c00
 800ec88:	11fff4ff 	.word	0x11fff4ff
 800ec8c:	40011000 	.word	0x40011000
 800ec90:	58024400 	.word	0x58024400
 800ec94:	40004400 	.word	0x40004400
 800ec98:	40004800 	.word	0x40004800
 800ec9c:	40004c00 	.word	0x40004c00
 800eca0:	40005000 	.word	0x40005000
 800eca4:	2320      	movs	r3, #32
 800eca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecaa:	e22c      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ecac:	2340      	movs	r3, #64	@ 0x40
 800ecae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecb2:	e228      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ecb4:	2380      	movs	r3, #128	@ 0x80
 800ecb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ecba:	e224      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4ab1      	ldr	r2, [pc, #708]	@ (800ef88 <UART_SetConfig+0x630>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d176      	bne.n	800edb4 <UART_SetConfig+0x45c>
 800ecc6:	4bb1      	ldr	r3, [pc, #708]	@ (800ef8c <UART_SetConfig+0x634>)
 800ecc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ecca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ecce:	2b28      	cmp	r3, #40	@ 0x28
 800ecd0:	d86c      	bhi.n	800edac <UART_SetConfig+0x454>
 800ecd2:	a201      	add	r2, pc, #4	@ (adr r2, 800ecd8 <UART_SetConfig+0x380>)
 800ecd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecd8:	0800ed7d 	.word	0x0800ed7d
 800ecdc:	0800edad 	.word	0x0800edad
 800ece0:	0800edad 	.word	0x0800edad
 800ece4:	0800edad 	.word	0x0800edad
 800ece8:	0800edad 	.word	0x0800edad
 800ecec:	0800edad 	.word	0x0800edad
 800ecf0:	0800edad 	.word	0x0800edad
 800ecf4:	0800edad 	.word	0x0800edad
 800ecf8:	0800ed85 	.word	0x0800ed85
 800ecfc:	0800edad 	.word	0x0800edad
 800ed00:	0800edad 	.word	0x0800edad
 800ed04:	0800edad 	.word	0x0800edad
 800ed08:	0800edad 	.word	0x0800edad
 800ed0c:	0800edad 	.word	0x0800edad
 800ed10:	0800edad 	.word	0x0800edad
 800ed14:	0800edad 	.word	0x0800edad
 800ed18:	0800ed8d 	.word	0x0800ed8d
 800ed1c:	0800edad 	.word	0x0800edad
 800ed20:	0800edad 	.word	0x0800edad
 800ed24:	0800edad 	.word	0x0800edad
 800ed28:	0800edad 	.word	0x0800edad
 800ed2c:	0800edad 	.word	0x0800edad
 800ed30:	0800edad 	.word	0x0800edad
 800ed34:	0800edad 	.word	0x0800edad
 800ed38:	0800ed95 	.word	0x0800ed95
 800ed3c:	0800edad 	.word	0x0800edad
 800ed40:	0800edad 	.word	0x0800edad
 800ed44:	0800edad 	.word	0x0800edad
 800ed48:	0800edad 	.word	0x0800edad
 800ed4c:	0800edad 	.word	0x0800edad
 800ed50:	0800edad 	.word	0x0800edad
 800ed54:	0800edad 	.word	0x0800edad
 800ed58:	0800ed9d 	.word	0x0800ed9d
 800ed5c:	0800edad 	.word	0x0800edad
 800ed60:	0800edad 	.word	0x0800edad
 800ed64:	0800edad 	.word	0x0800edad
 800ed68:	0800edad 	.word	0x0800edad
 800ed6c:	0800edad 	.word	0x0800edad
 800ed70:	0800edad 	.word	0x0800edad
 800ed74:	0800edad 	.word	0x0800edad
 800ed78:	0800eda5 	.word	0x0800eda5
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed82:	e1c0      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ed84:	2304      	movs	r3, #4
 800ed86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed8a:	e1bc      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ed8c:	2308      	movs	r3, #8
 800ed8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed92:	e1b8      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ed94:	2310      	movs	r3, #16
 800ed96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ed9a:	e1b4      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ed9c:	2320      	movs	r3, #32
 800ed9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800eda2:	e1b0      	b.n	800f106 <UART_SetConfig+0x7ae>
 800eda4:	2340      	movs	r3, #64	@ 0x40
 800eda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edaa:	e1ac      	b.n	800f106 <UART_SetConfig+0x7ae>
 800edac:	2380      	movs	r3, #128	@ 0x80
 800edae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edb2:	e1a8      	b.n	800f106 <UART_SetConfig+0x7ae>
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	4a75      	ldr	r2, [pc, #468]	@ (800ef90 <UART_SetConfig+0x638>)
 800edba:	4293      	cmp	r3, r2
 800edbc:	d130      	bne.n	800ee20 <UART_SetConfig+0x4c8>
 800edbe:	4b73      	ldr	r3, [pc, #460]	@ (800ef8c <UART_SetConfig+0x634>)
 800edc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edc2:	f003 0307 	and.w	r3, r3, #7
 800edc6:	2b05      	cmp	r3, #5
 800edc8:	d826      	bhi.n	800ee18 <UART_SetConfig+0x4c0>
 800edca:	a201      	add	r2, pc, #4	@ (adr r2, 800edd0 <UART_SetConfig+0x478>)
 800edcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edd0:	0800ede9 	.word	0x0800ede9
 800edd4:	0800edf1 	.word	0x0800edf1
 800edd8:	0800edf9 	.word	0x0800edf9
 800eddc:	0800ee01 	.word	0x0800ee01
 800ede0:	0800ee09 	.word	0x0800ee09
 800ede4:	0800ee11 	.word	0x0800ee11
 800ede8:	2300      	movs	r3, #0
 800edea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edee:	e18a      	b.n	800f106 <UART_SetConfig+0x7ae>
 800edf0:	2304      	movs	r3, #4
 800edf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edf6:	e186      	b.n	800f106 <UART_SetConfig+0x7ae>
 800edf8:	2308      	movs	r3, #8
 800edfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800edfe:	e182      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ee00:	2310      	movs	r3, #16
 800ee02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee06:	e17e      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ee08:	2320      	movs	r3, #32
 800ee0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee0e:	e17a      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ee10:	2340      	movs	r3, #64	@ 0x40
 800ee12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee16:	e176      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ee18:	2380      	movs	r3, #128	@ 0x80
 800ee1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee1e:	e172      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	4a5b      	ldr	r2, [pc, #364]	@ (800ef94 <UART_SetConfig+0x63c>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d130      	bne.n	800ee8c <UART_SetConfig+0x534>
 800ee2a:	4b58      	ldr	r3, [pc, #352]	@ (800ef8c <UART_SetConfig+0x634>)
 800ee2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee2e:	f003 0307 	and.w	r3, r3, #7
 800ee32:	2b05      	cmp	r3, #5
 800ee34:	d826      	bhi.n	800ee84 <UART_SetConfig+0x52c>
 800ee36:	a201      	add	r2, pc, #4	@ (adr r2, 800ee3c <UART_SetConfig+0x4e4>)
 800ee38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee3c:	0800ee55 	.word	0x0800ee55
 800ee40:	0800ee5d 	.word	0x0800ee5d
 800ee44:	0800ee65 	.word	0x0800ee65
 800ee48:	0800ee6d 	.word	0x0800ee6d
 800ee4c:	0800ee75 	.word	0x0800ee75
 800ee50:	0800ee7d 	.word	0x0800ee7d
 800ee54:	2300      	movs	r3, #0
 800ee56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee5a:	e154      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ee5c:	2304      	movs	r3, #4
 800ee5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee62:	e150      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ee64:	2308      	movs	r3, #8
 800ee66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee6a:	e14c      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ee6c:	2310      	movs	r3, #16
 800ee6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee72:	e148      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ee74:	2320      	movs	r3, #32
 800ee76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee7a:	e144      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ee7c:	2340      	movs	r3, #64	@ 0x40
 800ee7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee82:	e140      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ee84:	2380      	movs	r3, #128	@ 0x80
 800ee86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ee8a:	e13c      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	4a41      	ldr	r2, [pc, #260]	@ (800ef98 <UART_SetConfig+0x640>)
 800ee92:	4293      	cmp	r3, r2
 800ee94:	f040 8082 	bne.w	800ef9c <UART_SetConfig+0x644>
 800ee98:	4b3c      	ldr	r3, [pc, #240]	@ (800ef8c <UART_SetConfig+0x634>)
 800ee9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eea0:	2b28      	cmp	r3, #40	@ 0x28
 800eea2:	d86d      	bhi.n	800ef80 <UART_SetConfig+0x628>
 800eea4:	a201      	add	r2, pc, #4	@ (adr r2, 800eeac <UART_SetConfig+0x554>)
 800eea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeaa:	bf00      	nop
 800eeac:	0800ef51 	.word	0x0800ef51
 800eeb0:	0800ef81 	.word	0x0800ef81
 800eeb4:	0800ef81 	.word	0x0800ef81
 800eeb8:	0800ef81 	.word	0x0800ef81
 800eebc:	0800ef81 	.word	0x0800ef81
 800eec0:	0800ef81 	.word	0x0800ef81
 800eec4:	0800ef81 	.word	0x0800ef81
 800eec8:	0800ef81 	.word	0x0800ef81
 800eecc:	0800ef59 	.word	0x0800ef59
 800eed0:	0800ef81 	.word	0x0800ef81
 800eed4:	0800ef81 	.word	0x0800ef81
 800eed8:	0800ef81 	.word	0x0800ef81
 800eedc:	0800ef81 	.word	0x0800ef81
 800eee0:	0800ef81 	.word	0x0800ef81
 800eee4:	0800ef81 	.word	0x0800ef81
 800eee8:	0800ef81 	.word	0x0800ef81
 800eeec:	0800ef61 	.word	0x0800ef61
 800eef0:	0800ef81 	.word	0x0800ef81
 800eef4:	0800ef81 	.word	0x0800ef81
 800eef8:	0800ef81 	.word	0x0800ef81
 800eefc:	0800ef81 	.word	0x0800ef81
 800ef00:	0800ef81 	.word	0x0800ef81
 800ef04:	0800ef81 	.word	0x0800ef81
 800ef08:	0800ef81 	.word	0x0800ef81
 800ef0c:	0800ef69 	.word	0x0800ef69
 800ef10:	0800ef81 	.word	0x0800ef81
 800ef14:	0800ef81 	.word	0x0800ef81
 800ef18:	0800ef81 	.word	0x0800ef81
 800ef1c:	0800ef81 	.word	0x0800ef81
 800ef20:	0800ef81 	.word	0x0800ef81
 800ef24:	0800ef81 	.word	0x0800ef81
 800ef28:	0800ef81 	.word	0x0800ef81
 800ef2c:	0800ef71 	.word	0x0800ef71
 800ef30:	0800ef81 	.word	0x0800ef81
 800ef34:	0800ef81 	.word	0x0800ef81
 800ef38:	0800ef81 	.word	0x0800ef81
 800ef3c:	0800ef81 	.word	0x0800ef81
 800ef40:	0800ef81 	.word	0x0800ef81
 800ef44:	0800ef81 	.word	0x0800ef81
 800ef48:	0800ef81 	.word	0x0800ef81
 800ef4c:	0800ef79 	.word	0x0800ef79
 800ef50:	2301      	movs	r3, #1
 800ef52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef56:	e0d6      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ef58:	2304      	movs	r3, #4
 800ef5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef5e:	e0d2      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ef60:	2308      	movs	r3, #8
 800ef62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef66:	e0ce      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ef68:	2310      	movs	r3, #16
 800ef6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef6e:	e0ca      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ef70:	2320      	movs	r3, #32
 800ef72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef76:	e0c6      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ef78:	2340      	movs	r3, #64	@ 0x40
 800ef7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef7e:	e0c2      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ef80:	2380      	movs	r3, #128	@ 0x80
 800ef82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ef86:	e0be      	b.n	800f106 <UART_SetConfig+0x7ae>
 800ef88:	40011400 	.word	0x40011400
 800ef8c:	58024400 	.word	0x58024400
 800ef90:	40007800 	.word	0x40007800
 800ef94:	40007c00 	.word	0x40007c00
 800ef98:	40011800 	.word	0x40011800
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	4aad      	ldr	r2, [pc, #692]	@ (800f258 <UART_SetConfig+0x900>)
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d176      	bne.n	800f094 <UART_SetConfig+0x73c>
 800efa6:	4bad      	ldr	r3, [pc, #692]	@ (800f25c <UART_SetConfig+0x904>)
 800efa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efaa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800efae:	2b28      	cmp	r3, #40	@ 0x28
 800efb0:	d86c      	bhi.n	800f08c <UART_SetConfig+0x734>
 800efb2:	a201      	add	r2, pc, #4	@ (adr r2, 800efb8 <UART_SetConfig+0x660>)
 800efb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb8:	0800f05d 	.word	0x0800f05d
 800efbc:	0800f08d 	.word	0x0800f08d
 800efc0:	0800f08d 	.word	0x0800f08d
 800efc4:	0800f08d 	.word	0x0800f08d
 800efc8:	0800f08d 	.word	0x0800f08d
 800efcc:	0800f08d 	.word	0x0800f08d
 800efd0:	0800f08d 	.word	0x0800f08d
 800efd4:	0800f08d 	.word	0x0800f08d
 800efd8:	0800f065 	.word	0x0800f065
 800efdc:	0800f08d 	.word	0x0800f08d
 800efe0:	0800f08d 	.word	0x0800f08d
 800efe4:	0800f08d 	.word	0x0800f08d
 800efe8:	0800f08d 	.word	0x0800f08d
 800efec:	0800f08d 	.word	0x0800f08d
 800eff0:	0800f08d 	.word	0x0800f08d
 800eff4:	0800f08d 	.word	0x0800f08d
 800eff8:	0800f06d 	.word	0x0800f06d
 800effc:	0800f08d 	.word	0x0800f08d
 800f000:	0800f08d 	.word	0x0800f08d
 800f004:	0800f08d 	.word	0x0800f08d
 800f008:	0800f08d 	.word	0x0800f08d
 800f00c:	0800f08d 	.word	0x0800f08d
 800f010:	0800f08d 	.word	0x0800f08d
 800f014:	0800f08d 	.word	0x0800f08d
 800f018:	0800f075 	.word	0x0800f075
 800f01c:	0800f08d 	.word	0x0800f08d
 800f020:	0800f08d 	.word	0x0800f08d
 800f024:	0800f08d 	.word	0x0800f08d
 800f028:	0800f08d 	.word	0x0800f08d
 800f02c:	0800f08d 	.word	0x0800f08d
 800f030:	0800f08d 	.word	0x0800f08d
 800f034:	0800f08d 	.word	0x0800f08d
 800f038:	0800f07d 	.word	0x0800f07d
 800f03c:	0800f08d 	.word	0x0800f08d
 800f040:	0800f08d 	.word	0x0800f08d
 800f044:	0800f08d 	.word	0x0800f08d
 800f048:	0800f08d 	.word	0x0800f08d
 800f04c:	0800f08d 	.word	0x0800f08d
 800f050:	0800f08d 	.word	0x0800f08d
 800f054:	0800f08d 	.word	0x0800f08d
 800f058:	0800f085 	.word	0x0800f085
 800f05c:	2301      	movs	r3, #1
 800f05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f062:	e050      	b.n	800f106 <UART_SetConfig+0x7ae>
 800f064:	2304      	movs	r3, #4
 800f066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f06a:	e04c      	b.n	800f106 <UART_SetConfig+0x7ae>
 800f06c:	2308      	movs	r3, #8
 800f06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f072:	e048      	b.n	800f106 <UART_SetConfig+0x7ae>
 800f074:	2310      	movs	r3, #16
 800f076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f07a:	e044      	b.n	800f106 <UART_SetConfig+0x7ae>
 800f07c:	2320      	movs	r3, #32
 800f07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f082:	e040      	b.n	800f106 <UART_SetConfig+0x7ae>
 800f084:	2340      	movs	r3, #64	@ 0x40
 800f086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f08a:	e03c      	b.n	800f106 <UART_SetConfig+0x7ae>
 800f08c:	2380      	movs	r3, #128	@ 0x80
 800f08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f092:	e038      	b.n	800f106 <UART_SetConfig+0x7ae>
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	4a71      	ldr	r2, [pc, #452]	@ (800f260 <UART_SetConfig+0x908>)
 800f09a:	4293      	cmp	r3, r2
 800f09c:	d130      	bne.n	800f100 <UART_SetConfig+0x7a8>
 800f09e:	4b6f      	ldr	r3, [pc, #444]	@ (800f25c <UART_SetConfig+0x904>)
 800f0a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f0a2:	f003 0307 	and.w	r3, r3, #7
 800f0a6:	2b05      	cmp	r3, #5
 800f0a8:	d826      	bhi.n	800f0f8 <UART_SetConfig+0x7a0>
 800f0aa:	a201      	add	r2, pc, #4	@ (adr r2, 800f0b0 <UART_SetConfig+0x758>)
 800f0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0b0:	0800f0c9 	.word	0x0800f0c9
 800f0b4:	0800f0d1 	.word	0x0800f0d1
 800f0b8:	0800f0d9 	.word	0x0800f0d9
 800f0bc:	0800f0e1 	.word	0x0800f0e1
 800f0c0:	0800f0e9 	.word	0x0800f0e9
 800f0c4:	0800f0f1 	.word	0x0800f0f1
 800f0c8:	2302      	movs	r3, #2
 800f0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0ce:	e01a      	b.n	800f106 <UART_SetConfig+0x7ae>
 800f0d0:	2304      	movs	r3, #4
 800f0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0d6:	e016      	b.n	800f106 <UART_SetConfig+0x7ae>
 800f0d8:	2308      	movs	r3, #8
 800f0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0de:	e012      	b.n	800f106 <UART_SetConfig+0x7ae>
 800f0e0:	2310      	movs	r3, #16
 800f0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0e6:	e00e      	b.n	800f106 <UART_SetConfig+0x7ae>
 800f0e8:	2320      	movs	r3, #32
 800f0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0ee:	e00a      	b.n	800f106 <UART_SetConfig+0x7ae>
 800f0f0:	2340      	movs	r3, #64	@ 0x40
 800f0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0f6:	e006      	b.n	800f106 <UART_SetConfig+0x7ae>
 800f0f8:	2380      	movs	r3, #128	@ 0x80
 800f0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f0fe:	e002      	b.n	800f106 <UART_SetConfig+0x7ae>
 800f100:	2380      	movs	r3, #128	@ 0x80
 800f102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	4a55      	ldr	r2, [pc, #340]	@ (800f260 <UART_SetConfig+0x908>)
 800f10c:	4293      	cmp	r3, r2
 800f10e:	f040 80f8 	bne.w	800f302 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f112:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f116:	2b20      	cmp	r3, #32
 800f118:	dc46      	bgt.n	800f1a8 <UART_SetConfig+0x850>
 800f11a:	2b02      	cmp	r3, #2
 800f11c:	db75      	blt.n	800f20a <UART_SetConfig+0x8b2>
 800f11e:	3b02      	subs	r3, #2
 800f120:	2b1e      	cmp	r3, #30
 800f122:	d872      	bhi.n	800f20a <UART_SetConfig+0x8b2>
 800f124:	a201      	add	r2, pc, #4	@ (adr r2, 800f12c <UART_SetConfig+0x7d4>)
 800f126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f12a:	bf00      	nop
 800f12c:	0800f1af 	.word	0x0800f1af
 800f130:	0800f20b 	.word	0x0800f20b
 800f134:	0800f1b7 	.word	0x0800f1b7
 800f138:	0800f20b 	.word	0x0800f20b
 800f13c:	0800f20b 	.word	0x0800f20b
 800f140:	0800f20b 	.word	0x0800f20b
 800f144:	0800f1c7 	.word	0x0800f1c7
 800f148:	0800f20b 	.word	0x0800f20b
 800f14c:	0800f20b 	.word	0x0800f20b
 800f150:	0800f20b 	.word	0x0800f20b
 800f154:	0800f20b 	.word	0x0800f20b
 800f158:	0800f20b 	.word	0x0800f20b
 800f15c:	0800f20b 	.word	0x0800f20b
 800f160:	0800f20b 	.word	0x0800f20b
 800f164:	0800f1d7 	.word	0x0800f1d7
 800f168:	0800f20b 	.word	0x0800f20b
 800f16c:	0800f20b 	.word	0x0800f20b
 800f170:	0800f20b 	.word	0x0800f20b
 800f174:	0800f20b 	.word	0x0800f20b
 800f178:	0800f20b 	.word	0x0800f20b
 800f17c:	0800f20b 	.word	0x0800f20b
 800f180:	0800f20b 	.word	0x0800f20b
 800f184:	0800f20b 	.word	0x0800f20b
 800f188:	0800f20b 	.word	0x0800f20b
 800f18c:	0800f20b 	.word	0x0800f20b
 800f190:	0800f20b 	.word	0x0800f20b
 800f194:	0800f20b 	.word	0x0800f20b
 800f198:	0800f20b 	.word	0x0800f20b
 800f19c:	0800f20b 	.word	0x0800f20b
 800f1a0:	0800f20b 	.word	0x0800f20b
 800f1a4:	0800f1fd 	.word	0x0800f1fd
 800f1a8:	2b40      	cmp	r3, #64	@ 0x40
 800f1aa:	d02a      	beq.n	800f202 <UART_SetConfig+0x8aa>
 800f1ac:	e02d      	b.n	800f20a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f1ae:	f7fc fcbd 	bl	800bb2c <HAL_RCCEx_GetD3PCLK1Freq>
 800f1b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f1b4:	e02f      	b.n	800f216 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f1b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7fc fccc 	bl	800bb58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1c4:	e027      	b.n	800f216 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f1c6:	f107 0318 	add.w	r3, r7, #24
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7fc fe18 	bl	800be00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f1d0:	69fb      	ldr	r3, [r7, #28]
 800f1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1d4:	e01f      	b.n	800f216 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f1d6:	4b21      	ldr	r3, [pc, #132]	@ (800f25c <UART_SetConfig+0x904>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	f003 0320 	and.w	r3, r3, #32
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d009      	beq.n	800f1f6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f1e2:	4b1e      	ldr	r3, [pc, #120]	@ (800f25c <UART_SetConfig+0x904>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	08db      	lsrs	r3, r3, #3
 800f1e8:	f003 0303 	and.w	r3, r3, #3
 800f1ec:	4a1d      	ldr	r2, [pc, #116]	@ (800f264 <UART_SetConfig+0x90c>)
 800f1ee:	fa22 f303 	lsr.w	r3, r2, r3
 800f1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f1f4:	e00f      	b.n	800f216 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f1f6:	4b1b      	ldr	r3, [pc, #108]	@ (800f264 <UART_SetConfig+0x90c>)
 800f1f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f1fa:	e00c      	b.n	800f216 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f1fc:	4b1a      	ldr	r3, [pc, #104]	@ (800f268 <UART_SetConfig+0x910>)
 800f1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f200:	e009      	b.n	800f216 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f208:	e005      	b.n	800f216 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f20a:	2300      	movs	r3, #0
 800f20c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f20e:	2301      	movs	r3, #1
 800f210:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f214:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f218:	2b00      	cmp	r3, #0
 800f21a:	f000 81ee 	beq.w	800f5fa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f222:	4a12      	ldr	r2, [pc, #72]	@ (800f26c <UART_SetConfig+0x914>)
 800f224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f228:	461a      	mov	r2, r3
 800f22a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f22c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f230:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	685a      	ldr	r2, [r3, #4]
 800f236:	4613      	mov	r3, r2
 800f238:	005b      	lsls	r3, r3, #1
 800f23a:	4413      	add	r3, r2
 800f23c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f23e:	429a      	cmp	r2, r3
 800f240:	d305      	bcc.n	800f24e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f248:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f24a:	429a      	cmp	r2, r3
 800f24c:	d910      	bls.n	800f270 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800f24e:	2301      	movs	r3, #1
 800f250:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f254:	e1d1      	b.n	800f5fa <UART_SetConfig+0xca2>
 800f256:	bf00      	nop
 800f258:	40011c00 	.word	0x40011c00
 800f25c:	58024400 	.word	0x58024400
 800f260:	58000c00 	.word	0x58000c00
 800f264:	03d09000 	.word	0x03d09000
 800f268:	003d0900 	.word	0x003d0900
 800f26c:	08014930 	.word	0x08014930
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f272:	2200      	movs	r2, #0
 800f274:	60bb      	str	r3, [r7, #8]
 800f276:	60fa      	str	r2, [r7, #12]
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f27c:	4ac0      	ldr	r2, [pc, #768]	@ (800f580 <UART_SetConfig+0xc28>)
 800f27e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f282:	b29b      	uxth	r3, r3
 800f284:	2200      	movs	r2, #0
 800f286:	603b      	str	r3, [r7, #0]
 800f288:	607a      	str	r2, [r7, #4]
 800f28a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f28e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f292:	f7f1 f895 	bl	80003c0 <__aeabi_uldivmod>
 800f296:	4602      	mov	r2, r0
 800f298:	460b      	mov	r3, r1
 800f29a:	4610      	mov	r0, r2
 800f29c:	4619      	mov	r1, r3
 800f29e:	f04f 0200 	mov.w	r2, #0
 800f2a2:	f04f 0300 	mov.w	r3, #0
 800f2a6:	020b      	lsls	r3, r1, #8
 800f2a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f2ac:	0202      	lsls	r2, r0, #8
 800f2ae:	6979      	ldr	r1, [r7, #20]
 800f2b0:	6849      	ldr	r1, [r1, #4]
 800f2b2:	0849      	lsrs	r1, r1, #1
 800f2b4:	2000      	movs	r0, #0
 800f2b6:	460c      	mov	r4, r1
 800f2b8:	4605      	mov	r5, r0
 800f2ba:	eb12 0804 	adds.w	r8, r2, r4
 800f2be:	eb43 0905 	adc.w	r9, r3, r5
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	685b      	ldr	r3, [r3, #4]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	469a      	mov	sl, r3
 800f2ca:	4693      	mov	fp, r2
 800f2cc:	4652      	mov	r2, sl
 800f2ce:	465b      	mov	r3, fp
 800f2d0:	4640      	mov	r0, r8
 800f2d2:	4649      	mov	r1, r9
 800f2d4:	f7f1 f874 	bl	80003c0 <__aeabi_uldivmod>
 800f2d8:	4602      	mov	r2, r0
 800f2da:	460b      	mov	r3, r1
 800f2dc:	4613      	mov	r3, r2
 800f2de:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f2e6:	d308      	bcc.n	800f2fa <UART_SetConfig+0x9a2>
 800f2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f2ee:	d204      	bcs.n	800f2fa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f2f6:	60da      	str	r2, [r3, #12]
 800f2f8:	e17f      	b.n	800f5fa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f300:	e17b      	b.n	800f5fa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	69db      	ldr	r3, [r3, #28]
 800f306:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f30a:	f040 80bd 	bne.w	800f488 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800f30e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f312:	2b20      	cmp	r3, #32
 800f314:	dc48      	bgt.n	800f3a8 <UART_SetConfig+0xa50>
 800f316:	2b00      	cmp	r3, #0
 800f318:	db7b      	blt.n	800f412 <UART_SetConfig+0xaba>
 800f31a:	2b20      	cmp	r3, #32
 800f31c:	d879      	bhi.n	800f412 <UART_SetConfig+0xaba>
 800f31e:	a201      	add	r2, pc, #4	@ (adr r2, 800f324 <UART_SetConfig+0x9cc>)
 800f320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f324:	0800f3af 	.word	0x0800f3af
 800f328:	0800f3b7 	.word	0x0800f3b7
 800f32c:	0800f413 	.word	0x0800f413
 800f330:	0800f413 	.word	0x0800f413
 800f334:	0800f3bf 	.word	0x0800f3bf
 800f338:	0800f413 	.word	0x0800f413
 800f33c:	0800f413 	.word	0x0800f413
 800f340:	0800f413 	.word	0x0800f413
 800f344:	0800f3cf 	.word	0x0800f3cf
 800f348:	0800f413 	.word	0x0800f413
 800f34c:	0800f413 	.word	0x0800f413
 800f350:	0800f413 	.word	0x0800f413
 800f354:	0800f413 	.word	0x0800f413
 800f358:	0800f413 	.word	0x0800f413
 800f35c:	0800f413 	.word	0x0800f413
 800f360:	0800f413 	.word	0x0800f413
 800f364:	0800f3df 	.word	0x0800f3df
 800f368:	0800f413 	.word	0x0800f413
 800f36c:	0800f413 	.word	0x0800f413
 800f370:	0800f413 	.word	0x0800f413
 800f374:	0800f413 	.word	0x0800f413
 800f378:	0800f413 	.word	0x0800f413
 800f37c:	0800f413 	.word	0x0800f413
 800f380:	0800f413 	.word	0x0800f413
 800f384:	0800f413 	.word	0x0800f413
 800f388:	0800f413 	.word	0x0800f413
 800f38c:	0800f413 	.word	0x0800f413
 800f390:	0800f413 	.word	0x0800f413
 800f394:	0800f413 	.word	0x0800f413
 800f398:	0800f413 	.word	0x0800f413
 800f39c:	0800f413 	.word	0x0800f413
 800f3a0:	0800f413 	.word	0x0800f413
 800f3a4:	0800f405 	.word	0x0800f405
 800f3a8:	2b40      	cmp	r3, #64	@ 0x40
 800f3aa:	d02e      	beq.n	800f40a <UART_SetConfig+0xab2>
 800f3ac:	e031      	b.n	800f412 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f3ae:	f7fa fd1f 	bl	8009df0 <HAL_RCC_GetPCLK1Freq>
 800f3b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f3b4:	e033      	b.n	800f41e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f3b6:	f7fa fd31 	bl	8009e1c <HAL_RCC_GetPCLK2Freq>
 800f3ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f3bc:	e02f      	b.n	800f41e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7fc fbc8 	bl	800bb58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3cc:	e027      	b.n	800f41e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3ce:	f107 0318 	add.w	r3, r7, #24
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f7fc fd14 	bl	800be00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f3d8:	69fb      	ldr	r3, [r7, #28]
 800f3da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f3dc:	e01f      	b.n	800f41e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f3de:	4b69      	ldr	r3, [pc, #420]	@ (800f584 <UART_SetConfig+0xc2c>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	f003 0320 	and.w	r3, r3, #32
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d009      	beq.n	800f3fe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f3ea:	4b66      	ldr	r3, [pc, #408]	@ (800f584 <UART_SetConfig+0xc2c>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	08db      	lsrs	r3, r3, #3
 800f3f0:	f003 0303 	and.w	r3, r3, #3
 800f3f4:	4a64      	ldr	r2, [pc, #400]	@ (800f588 <UART_SetConfig+0xc30>)
 800f3f6:	fa22 f303 	lsr.w	r3, r2, r3
 800f3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f3fc:	e00f      	b.n	800f41e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800f3fe:	4b62      	ldr	r3, [pc, #392]	@ (800f588 <UART_SetConfig+0xc30>)
 800f400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f402:	e00c      	b.n	800f41e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f404:	4b61      	ldr	r3, [pc, #388]	@ (800f58c <UART_SetConfig+0xc34>)
 800f406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f408:	e009      	b.n	800f41e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f40a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f410:	e005      	b.n	800f41e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800f412:	2300      	movs	r3, #0
 800f414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f416:	2301      	movs	r3, #1
 800f418:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f41c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f41e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f420:	2b00      	cmp	r3, #0
 800f422:	f000 80ea 	beq.w	800f5fa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f426:	697b      	ldr	r3, [r7, #20]
 800f428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f42a:	4a55      	ldr	r2, [pc, #340]	@ (800f580 <UART_SetConfig+0xc28>)
 800f42c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f430:	461a      	mov	r2, r3
 800f432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f434:	fbb3 f3f2 	udiv	r3, r3, r2
 800f438:	005a      	lsls	r2, r3, #1
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	085b      	lsrs	r3, r3, #1
 800f440:	441a      	add	r2, r3
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	685b      	ldr	r3, [r3, #4]
 800f446:	fbb2 f3f3 	udiv	r3, r2, r3
 800f44a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f44e:	2b0f      	cmp	r3, #15
 800f450:	d916      	bls.n	800f480 <UART_SetConfig+0xb28>
 800f452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f458:	d212      	bcs.n	800f480 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f45c:	b29b      	uxth	r3, r3
 800f45e:	f023 030f 	bic.w	r3, r3, #15
 800f462:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f466:	085b      	lsrs	r3, r3, #1
 800f468:	b29b      	uxth	r3, r3
 800f46a:	f003 0307 	and.w	r3, r3, #7
 800f46e:	b29a      	uxth	r2, r3
 800f470:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f472:	4313      	orrs	r3, r2
 800f474:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f47c:	60da      	str	r2, [r3, #12]
 800f47e:	e0bc      	b.n	800f5fa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f480:	2301      	movs	r3, #1
 800f482:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800f486:	e0b8      	b.n	800f5fa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f488:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f48c:	2b20      	cmp	r3, #32
 800f48e:	dc4b      	bgt.n	800f528 <UART_SetConfig+0xbd0>
 800f490:	2b00      	cmp	r3, #0
 800f492:	f2c0 8087 	blt.w	800f5a4 <UART_SetConfig+0xc4c>
 800f496:	2b20      	cmp	r3, #32
 800f498:	f200 8084 	bhi.w	800f5a4 <UART_SetConfig+0xc4c>
 800f49c:	a201      	add	r2, pc, #4	@ (adr r2, 800f4a4 <UART_SetConfig+0xb4c>)
 800f49e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4a2:	bf00      	nop
 800f4a4:	0800f52f 	.word	0x0800f52f
 800f4a8:	0800f537 	.word	0x0800f537
 800f4ac:	0800f5a5 	.word	0x0800f5a5
 800f4b0:	0800f5a5 	.word	0x0800f5a5
 800f4b4:	0800f53f 	.word	0x0800f53f
 800f4b8:	0800f5a5 	.word	0x0800f5a5
 800f4bc:	0800f5a5 	.word	0x0800f5a5
 800f4c0:	0800f5a5 	.word	0x0800f5a5
 800f4c4:	0800f54f 	.word	0x0800f54f
 800f4c8:	0800f5a5 	.word	0x0800f5a5
 800f4cc:	0800f5a5 	.word	0x0800f5a5
 800f4d0:	0800f5a5 	.word	0x0800f5a5
 800f4d4:	0800f5a5 	.word	0x0800f5a5
 800f4d8:	0800f5a5 	.word	0x0800f5a5
 800f4dc:	0800f5a5 	.word	0x0800f5a5
 800f4e0:	0800f5a5 	.word	0x0800f5a5
 800f4e4:	0800f55f 	.word	0x0800f55f
 800f4e8:	0800f5a5 	.word	0x0800f5a5
 800f4ec:	0800f5a5 	.word	0x0800f5a5
 800f4f0:	0800f5a5 	.word	0x0800f5a5
 800f4f4:	0800f5a5 	.word	0x0800f5a5
 800f4f8:	0800f5a5 	.word	0x0800f5a5
 800f4fc:	0800f5a5 	.word	0x0800f5a5
 800f500:	0800f5a5 	.word	0x0800f5a5
 800f504:	0800f5a5 	.word	0x0800f5a5
 800f508:	0800f5a5 	.word	0x0800f5a5
 800f50c:	0800f5a5 	.word	0x0800f5a5
 800f510:	0800f5a5 	.word	0x0800f5a5
 800f514:	0800f5a5 	.word	0x0800f5a5
 800f518:	0800f5a5 	.word	0x0800f5a5
 800f51c:	0800f5a5 	.word	0x0800f5a5
 800f520:	0800f5a5 	.word	0x0800f5a5
 800f524:	0800f597 	.word	0x0800f597
 800f528:	2b40      	cmp	r3, #64	@ 0x40
 800f52a:	d037      	beq.n	800f59c <UART_SetConfig+0xc44>
 800f52c:	e03a      	b.n	800f5a4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f52e:	f7fa fc5f 	bl	8009df0 <HAL_RCC_GetPCLK1Freq>
 800f532:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f534:	e03c      	b.n	800f5b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f536:	f7fa fc71 	bl	8009e1c <HAL_RCC_GetPCLK2Freq>
 800f53a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800f53c:	e038      	b.n	800f5b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f53e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800f542:	4618      	mov	r0, r3
 800f544:	f7fc fb08 	bl	800bb58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f54a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f54c:	e030      	b.n	800f5b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f54e:	f107 0318 	add.w	r3, r7, #24
 800f552:	4618      	mov	r0, r3
 800f554:	f7fc fc54 	bl	800be00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f558:	69fb      	ldr	r3, [r7, #28]
 800f55a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f55c:	e028      	b.n	800f5b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f55e:	4b09      	ldr	r3, [pc, #36]	@ (800f584 <UART_SetConfig+0xc2c>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f003 0320 	and.w	r3, r3, #32
 800f566:	2b00      	cmp	r3, #0
 800f568:	d012      	beq.n	800f590 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f56a:	4b06      	ldr	r3, [pc, #24]	@ (800f584 <UART_SetConfig+0xc2c>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	08db      	lsrs	r3, r3, #3
 800f570:	f003 0303 	and.w	r3, r3, #3
 800f574:	4a04      	ldr	r2, [pc, #16]	@ (800f588 <UART_SetConfig+0xc30>)
 800f576:	fa22 f303 	lsr.w	r3, r2, r3
 800f57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f57c:	e018      	b.n	800f5b0 <UART_SetConfig+0xc58>
 800f57e:	bf00      	nop
 800f580:	08014930 	.word	0x08014930
 800f584:	58024400 	.word	0x58024400
 800f588:	03d09000 	.word	0x03d09000
 800f58c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800f590:	4b24      	ldr	r3, [pc, #144]	@ (800f624 <UART_SetConfig+0xccc>)
 800f592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f594:	e00c      	b.n	800f5b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f596:	4b24      	ldr	r3, [pc, #144]	@ (800f628 <UART_SetConfig+0xcd0>)
 800f598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f59a:	e009      	b.n	800f5b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f59c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800f5a2:	e005      	b.n	800f5b0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800f5ae:	bf00      	nop
    }

    if (pclk != 0U)
 800f5b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d021      	beq.n	800f5fa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5ba:	4a1c      	ldr	r2, [pc, #112]	@ (800f62c <UART_SetConfig+0xcd4>)
 800f5bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5c4:	fbb3 f2f2 	udiv	r2, r3, r2
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	685b      	ldr	r3, [r3, #4]
 800f5cc:	085b      	lsrs	r3, r3, #1
 800f5ce:	441a      	add	r2, r3
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	685b      	ldr	r3, [r3, #4]
 800f5d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5dc:	2b0f      	cmp	r3, #15
 800f5de:	d909      	bls.n	800f5f4 <UART_SetConfig+0xc9c>
 800f5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f5e6:	d205      	bcs.n	800f5f4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ea:	b29a      	uxth	r2, r3
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	60da      	str	r2, [r3, #12]
 800f5f2:	e002      	b.n	800f5fa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	2201      	movs	r2, #1
 800f5fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	2201      	movs	r2, #1
 800f606:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	2200      	movs	r2, #0
 800f60e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	2200      	movs	r2, #0
 800f614:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f616:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3748      	adds	r7, #72	@ 0x48
 800f61e:	46bd      	mov	sp, r7
 800f620:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f624:	03d09000 	.word	0x03d09000
 800f628:	003d0900 	.word	0x003d0900
 800f62c:	08014930 	.word	0x08014930

0800f630 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f630:	b480      	push	{r7}
 800f632:	b083      	sub	sp, #12
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f63c:	f003 0308 	and.w	r3, r3, #8
 800f640:	2b00      	cmp	r3, #0
 800f642:	d00a      	beq.n	800f65a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	685b      	ldr	r3, [r3, #4]
 800f64a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	430a      	orrs	r2, r1
 800f658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f65e:	f003 0301 	and.w	r3, r3, #1
 800f662:	2b00      	cmp	r3, #0
 800f664:	d00a      	beq.n	800f67c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	430a      	orrs	r2, r1
 800f67a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f680:	f003 0302 	and.w	r3, r3, #2
 800f684:	2b00      	cmp	r3, #0
 800f686:	d00a      	beq.n	800f69e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	685b      	ldr	r3, [r3, #4]
 800f68e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	430a      	orrs	r2, r1
 800f69c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6a2:	f003 0304 	and.w	r3, r3, #4
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d00a      	beq.n	800f6c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	685b      	ldr	r3, [r3, #4]
 800f6b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	430a      	orrs	r2, r1
 800f6be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6c4:	f003 0310 	and.w	r3, r3, #16
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d00a      	beq.n	800f6e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	689b      	ldr	r3, [r3, #8]
 800f6d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	430a      	orrs	r2, r1
 800f6e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6e6:	f003 0320 	and.w	r3, r3, #32
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d00a      	beq.n	800f704 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	430a      	orrs	r2, r1
 800f702:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d01a      	beq.n	800f746 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	685b      	ldr	r3, [r3, #4]
 800f716:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	430a      	orrs	r2, r1
 800f724:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f72a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f72e:	d10a      	bne.n	800f746 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	430a      	orrs	r2, r1
 800f744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f74a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d00a      	beq.n	800f768 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	685b      	ldr	r3, [r3, #4]
 800f758:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	430a      	orrs	r2, r1
 800f766:	605a      	str	r2, [r3, #4]
  }
}
 800f768:	bf00      	nop
 800f76a:	370c      	adds	r7, #12
 800f76c:	46bd      	mov	sp, r7
 800f76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f772:	4770      	bx	lr

0800f774 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b098      	sub	sp, #96	@ 0x60
 800f778:	af02      	add	r7, sp, #8
 800f77a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2200      	movs	r2, #0
 800f780:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f784:	f7f3 f9ae 	bl	8002ae4 <HAL_GetTick>
 800f788:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	f003 0308 	and.w	r3, r3, #8
 800f794:	2b08      	cmp	r3, #8
 800f796:	d12f      	bne.n	800f7f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f798:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f79c:	9300      	str	r3, [sp, #0]
 800f79e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f000 f88e 	bl	800f8c8 <UART_WaitOnFlagUntilTimeout>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d022      	beq.n	800f7f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ba:	e853 3f00 	ldrex	r3, [r3]
 800f7be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f7c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f7c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	461a      	mov	r2, r3
 800f7ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f7d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800f7d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f7d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f7d8:	e841 2300 	strex	r3, r2, [r1]
 800f7dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f7de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d1e6      	bne.n	800f7b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2220      	movs	r2, #32
 800f7e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f7f4:	2303      	movs	r3, #3
 800f7f6:	e063      	b.n	800f8c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	f003 0304 	and.w	r3, r3, #4
 800f802:	2b04      	cmp	r3, #4
 800f804:	d149      	bne.n	800f89a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f806:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f80a:	9300      	str	r3, [sp, #0]
 800f80c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f80e:	2200      	movs	r2, #0
 800f810:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f000 f857 	bl	800f8c8 <UART_WaitOnFlagUntilTimeout>
 800f81a:	4603      	mov	r3, r0
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d03c      	beq.n	800f89a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f828:	e853 3f00 	ldrex	r3, [r3]
 800f82c:	623b      	str	r3, [r7, #32]
   return(result);
 800f82e:	6a3b      	ldr	r3, [r7, #32]
 800f830:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f834:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	461a      	mov	r2, r3
 800f83c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f83e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f840:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f842:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f844:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f846:	e841 2300 	strex	r3, r2, [r1]
 800f84a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d1e6      	bne.n	800f820 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	3308      	adds	r3, #8
 800f858:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	e853 3f00 	ldrex	r3, [r3]
 800f860:	60fb      	str	r3, [r7, #12]
   return(result);
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	f023 0301 	bic.w	r3, r3, #1
 800f868:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	3308      	adds	r3, #8
 800f870:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f872:	61fa      	str	r2, [r7, #28]
 800f874:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f876:	69b9      	ldr	r1, [r7, #24]
 800f878:	69fa      	ldr	r2, [r7, #28]
 800f87a:	e841 2300 	strex	r3, r2, [r1]
 800f87e:	617b      	str	r3, [r7, #20]
   return(result);
 800f880:	697b      	ldr	r3, [r7, #20]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d1e5      	bne.n	800f852 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2220      	movs	r2, #32
 800f88a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2200      	movs	r2, #0
 800f892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f896:	2303      	movs	r3, #3
 800f898:	e012      	b.n	800f8c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2220      	movs	r2, #32
 800f89e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2220      	movs	r2, #32
 800f8a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f8be:	2300      	movs	r3, #0
}
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	3758      	adds	r7, #88	@ 0x58
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}

0800f8c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b084      	sub	sp, #16
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	60f8      	str	r0, [r7, #12]
 800f8d0:	60b9      	str	r1, [r7, #8]
 800f8d2:	603b      	str	r3, [r7, #0]
 800f8d4:	4613      	mov	r3, r2
 800f8d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f8d8:	e04f      	b.n	800f97a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f8da:	69bb      	ldr	r3, [r7, #24]
 800f8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8e0:	d04b      	beq.n	800f97a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f8e2:	f7f3 f8ff 	bl	8002ae4 <HAL_GetTick>
 800f8e6:	4602      	mov	r2, r0
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	1ad3      	subs	r3, r2, r3
 800f8ec:	69ba      	ldr	r2, [r7, #24]
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d302      	bcc.n	800f8f8 <UART_WaitOnFlagUntilTimeout+0x30>
 800f8f2:	69bb      	ldr	r3, [r7, #24]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d101      	bne.n	800f8fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f8f8:	2303      	movs	r3, #3
 800f8fa:	e04e      	b.n	800f99a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f003 0304 	and.w	r3, r3, #4
 800f906:	2b00      	cmp	r3, #0
 800f908:	d037      	beq.n	800f97a <UART_WaitOnFlagUntilTimeout+0xb2>
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	2b80      	cmp	r3, #128	@ 0x80
 800f90e:	d034      	beq.n	800f97a <UART_WaitOnFlagUntilTimeout+0xb2>
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	2b40      	cmp	r3, #64	@ 0x40
 800f914:	d031      	beq.n	800f97a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	69db      	ldr	r3, [r3, #28]
 800f91c:	f003 0308 	and.w	r3, r3, #8
 800f920:	2b08      	cmp	r3, #8
 800f922:	d110      	bne.n	800f946 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	2208      	movs	r2, #8
 800f92a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f92c:	68f8      	ldr	r0, [r7, #12]
 800f92e:	f000 f839 	bl	800f9a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	2208      	movs	r2, #8
 800f936:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	2200      	movs	r2, #0
 800f93e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f942:	2301      	movs	r3, #1
 800f944:	e029      	b.n	800f99a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	69db      	ldr	r3, [r3, #28]
 800f94c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f950:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f954:	d111      	bne.n	800f97a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f95e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f960:	68f8      	ldr	r0, [r7, #12]
 800f962:	f000 f81f 	bl	800f9a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	2220      	movs	r2, #32
 800f96a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2200      	movs	r2, #0
 800f972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f976:	2303      	movs	r3, #3
 800f978:	e00f      	b.n	800f99a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	69da      	ldr	r2, [r3, #28]
 800f980:	68bb      	ldr	r3, [r7, #8]
 800f982:	4013      	ands	r3, r2
 800f984:	68ba      	ldr	r2, [r7, #8]
 800f986:	429a      	cmp	r2, r3
 800f988:	bf0c      	ite	eq
 800f98a:	2301      	moveq	r3, #1
 800f98c:	2300      	movne	r3, #0
 800f98e:	b2db      	uxtb	r3, r3
 800f990:	461a      	mov	r2, r3
 800f992:	79fb      	ldrb	r3, [r7, #7]
 800f994:	429a      	cmp	r2, r3
 800f996:	d0a0      	beq.n	800f8da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f998:	2300      	movs	r3, #0
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	3710      	adds	r7, #16
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}
	...

0800f9a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	b095      	sub	sp, #84	@ 0x54
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9b4:	e853 3f00 	ldrex	r3, [r3]
 800f9b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f9ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f9c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800f9cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f9d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f9d2:	e841 2300 	strex	r3, r2, [r1]
 800f9d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d1e6      	bne.n	800f9ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	3308      	adds	r3, #8
 800f9e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9e6:	6a3b      	ldr	r3, [r7, #32]
 800f9e8:	e853 3f00 	ldrex	r3, [r3]
 800f9ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800f9ee:	69fa      	ldr	r2, [r7, #28]
 800f9f0:	4b1e      	ldr	r3, [pc, #120]	@ (800fa6c <UART_EndRxTransfer+0xc8>)
 800f9f2:	4013      	ands	r3, r2
 800f9f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	3308      	adds	r3, #8
 800f9fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f9fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fa00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fa04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fa06:	e841 2300 	strex	r3, r2, [r1]
 800fa0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fa0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d1e5      	bne.n	800f9de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	d118      	bne.n	800fa4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	e853 3f00 	ldrex	r3, [r3]
 800fa26:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	f023 0310 	bic.w	r3, r3, #16
 800fa2e:	647b      	str	r3, [r7, #68]	@ 0x44
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	461a      	mov	r2, r3
 800fa36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa38:	61bb      	str	r3, [r7, #24]
 800fa3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa3c:	6979      	ldr	r1, [r7, #20]
 800fa3e:	69ba      	ldr	r2, [r7, #24]
 800fa40:	e841 2300 	strex	r3, r2, [r1]
 800fa44:	613b      	str	r3, [r7, #16]
   return(result);
 800fa46:	693b      	ldr	r3, [r7, #16]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d1e6      	bne.n	800fa1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2220      	movs	r2, #32
 800fa50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2200      	movs	r2, #0
 800fa58:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fa60:	bf00      	nop
 800fa62:	3754      	adds	r7, #84	@ 0x54
 800fa64:	46bd      	mov	sp, r7
 800fa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6a:	4770      	bx	lr
 800fa6c:	effffffe 	.word	0xeffffffe

0800fa70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b084      	sub	sp, #16
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	2200      	movs	r2, #0
 800fa82:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fa86:	68f8      	ldr	r0, [r7, #12]
 800fa88:	f7fe ff50 	bl	800e92c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa8c:	bf00      	nop
 800fa8e:	3710      	adds	r7, #16
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}

0800fa94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b088      	sub	sp, #32
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	e853 3f00 	ldrex	r3, [r3]
 800faa8:	60bb      	str	r3, [r7, #8]
   return(result);
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fab0:	61fb      	str	r3, [r7, #28]
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	461a      	mov	r2, r3
 800fab8:	69fb      	ldr	r3, [r7, #28]
 800faba:	61bb      	str	r3, [r7, #24]
 800fabc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fabe:	6979      	ldr	r1, [r7, #20]
 800fac0:	69ba      	ldr	r2, [r7, #24]
 800fac2:	e841 2300 	strex	r3, r2, [r1]
 800fac6:	613b      	str	r3, [r7, #16]
   return(result);
 800fac8:	693b      	ldr	r3, [r7, #16]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d1e6      	bne.n	800fa9c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2220      	movs	r2, #32
 800fad2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2200      	movs	r2, #0
 800fada:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f7fe ff1b 	bl	800e918 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fae2:	bf00      	nop
 800fae4:	3720      	adds	r7, #32
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bd80      	pop	{r7, pc}

0800faea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800faea:	b480      	push	{r7}
 800faec:	b083      	sub	sp, #12
 800faee:	af00      	add	r7, sp, #0
 800faf0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800faf2:	bf00      	nop
 800faf4:	370c      	adds	r7, #12
 800faf6:	46bd      	mov	sp, r7
 800faf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafc:	4770      	bx	lr

0800fafe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fafe:	b480      	push	{r7}
 800fb00:	b083      	sub	sp, #12
 800fb02:	af00      	add	r7, sp, #0
 800fb04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fb06:	bf00      	nop
 800fb08:	370c      	adds	r7, #12
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb10:	4770      	bx	lr

0800fb12 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fb12:	b480      	push	{r7}
 800fb14:	b083      	sub	sp, #12
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fb1a:	bf00      	nop
 800fb1c:	370c      	adds	r7, #12
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb24:	4770      	bx	lr

0800fb26 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fb26:	b480      	push	{r7}
 800fb28:	b085      	sub	sp, #20
 800fb2a:	af00      	add	r7, sp, #0
 800fb2c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fb34:	2b01      	cmp	r3, #1
 800fb36:	d101      	bne.n	800fb3c <HAL_UARTEx_DisableFifoMode+0x16>
 800fb38:	2302      	movs	r3, #2
 800fb3a:	e027      	b.n	800fb8c <HAL_UARTEx_DisableFifoMode+0x66>
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2201      	movs	r2, #1
 800fb40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2224      	movs	r2, #36	@ 0x24
 800fb48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	681a      	ldr	r2, [r3, #0]
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	f022 0201 	bic.w	r2, r2, #1
 800fb62:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fb6a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	68fa      	ldr	r2, [r7, #12]
 800fb78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	2220      	movs	r2, #32
 800fb7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2200      	movs	r2, #0
 800fb86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fb8a:	2300      	movs	r3, #0
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3714      	adds	r7, #20
 800fb90:	46bd      	mov	sp, r7
 800fb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb96:	4770      	bx	lr

0800fb98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b084      	sub	sp, #16
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fba8:	2b01      	cmp	r3, #1
 800fbaa:	d101      	bne.n	800fbb0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fbac:	2302      	movs	r3, #2
 800fbae:	e02d      	b.n	800fc0c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2201      	movs	r2, #1
 800fbb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2224      	movs	r2, #36	@ 0x24
 800fbbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	681a      	ldr	r2, [r3, #0]
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	f022 0201 	bic.w	r2, r2, #1
 800fbd6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	689b      	ldr	r3, [r3, #8]
 800fbde:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	683a      	ldr	r2, [r7, #0]
 800fbe8:	430a      	orrs	r2, r1
 800fbea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f000 f84f 	bl	800fc90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	68fa      	ldr	r2, [r7, #12]
 800fbf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2220      	movs	r2, #32
 800fbfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2200      	movs	r2, #0
 800fc06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fc0a:	2300      	movs	r3, #0
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3710      	adds	r7, #16
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}

0800fc14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b084      	sub	sp, #16
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	d101      	bne.n	800fc2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fc28:	2302      	movs	r3, #2
 800fc2a:	e02d      	b.n	800fc88 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2201      	movs	r2, #1
 800fc30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2224      	movs	r2, #36	@ 0x24
 800fc38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	681a      	ldr	r2, [r3, #0]
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	f022 0201 	bic.w	r2, r2, #1
 800fc52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	689b      	ldr	r3, [r3, #8]
 800fc5a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	683a      	ldr	r2, [r7, #0]
 800fc64:	430a      	orrs	r2, r1
 800fc66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f000 f811 	bl	800fc90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	68fa      	ldr	r2, [r7, #12]
 800fc74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2220      	movs	r2, #32
 800fc7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2200      	movs	r2, #0
 800fc82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fc86:	2300      	movs	r3, #0
}
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3710      	adds	r7, #16
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fc90:	b480      	push	{r7}
 800fc92:	b085      	sub	sp, #20
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d108      	bne.n	800fcb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2201      	movs	r2, #1
 800fca4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2201      	movs	r2, #1
 800fcac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fcb0:	e031      	b.n	800fd16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fcb2:	2310      	movs	r3, #16
 800fcb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fcb6:	2310      	movs	r3, #16
 800fcb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	689b      	ldr	r3, [r3, #8]
 800fcc0:	0e5b      	lsrs	r3, r3, #25
 800fcc2:	b2db      	uxtb	r3, r3
 800fcc4:	f003 0307 	and.w	r3, r3, #7
 800fcc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	689b      	ldr	r3, [r3, #8]
 800fcd0:	0f5b      	lsrs	r3, r3, #29
 800fcd2:	b2db      	uxtb	r3, r3
 800fcd4:	f003 0307 	and.w	r3, r3, #7
 800fcd8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fcda:	7bbb      	ldrb	r3, [r7, #14]
 800fcdc:	7b3a      	ldrb	r2, [r7, #12]
 800fcde:	4911      	ldr	r1, [pc, #68]	@ (800fd24 <UARTEx_SetNbDataToProcess+0x94>)
 800fce0:	5c8a      	ldrb	r2, [r1, r2]
 800fce2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fce6:	7b3a      	ldrb	r2, [r7, #12]
 800fce8:	490f      	ldr	r1, [pc, #60]	@ (800fd28 <UARTEx_SetNbDataToProcess+0x98>)
 800fcea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fcec:	fb93 f3f2 	sdiv	r3, r3, r2
 800fcf0:	b29a      	uxth	r2, r3
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fcf8:	7bfb      	ldrb	r3, [r7, #15]
 800fcfa:	7b7a      	ldrb	r2, [r7, #13]
 800fcfc:	4909      	ldr	r1, [pc, #36]	@ (800fd24 <UARTEx_SetNbDataToProcess+0x94>)
 800fcfe:	5c8a      	ldrb	r2, [r1, r2]
 800fd00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fd04:	7b7a      	ldrb	r2, [r7, #13]
 800fd06:	4908      	ldr	r1, [pc, #32]	@ (800fd28 <UARTEx_SetNbDataToProcess+0x98>)
 800fd08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd0a:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd0e:	b29a      	uxth	r2, r3
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fd16:	bf00      	nop
 800fd18:	3714      	adds	r7, #20
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd20:	4770      	bx	lr
 800fd22:	bf00      	nop
 800fd24:	08014948 	.word	0x08014948
 800fd28:	08014950 	.word	0x08014950

0800fd2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fd2c:	b084      	sub	sp, #16
 800fd2e:	b580      	push	{r7, lr}
 800fd30:	b084      	sub	sp, #16
 800fd32:	af00      	add	r7, sp, #0
 800fd34:	6078      	str	r0, [r7, #4]
 800fd36:	f107 001c 	add.w	r0, r7, #28
 800fd3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fd3e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800fd42:	2b01      	cmp	r3, #1
 800fd44:	d121      	bne.n	800fd8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd4a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	68da      	ldr	r2, [r3, #12]
 800fd56:	4b2c      	ldr	r3, [pc, #176]	@ (800fe08 <USB_CoreInit+0xdc>)
 800fd58:	4013      	ands	r3, r2
 800fd5a:	687a      	ldr	r2, [r7, #4]
 800fd5c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	68db      	ldr	r3, [r3, #12]
 800fd62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fd6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fd6e:	2b01      	cmp	r3, #1
 800fd70:	d105      	bne.n	800fd7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	68db      	ldr	r3, [r3, #12]
 800fd76:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	f001 fafa 	bl	8011378 <USB_CoreReset>
 800fd84:	4603      	mov	r3, r0
 800fd86:	73fb      	strb	r3, [r7, #15]
 800fd88:	e01b      	b.n	800fdc2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	68db      	ldr	r3, [r3, #12]
 800fd8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f001 faee 	bl	8011378 <USB_CoreReset>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fda0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d106      	bne.n	800fdb6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	639a      	str	r2, [r3, #56]	@ 0x38
 800fdb4:	e005      	b.n	800fdc2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fdc2:	7fbb      	ldrb	r3, [r7, #30]
 800fdc4:	2b01      	cmp	r3, #1
 800fdc6:	d116      	bne.n	800fdf6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fdcc:	b29a      	uxth	r2, r3
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800fdd6:	4b0d      	ldr	r3, [pc, #52]	@ (800fe0c <USB_CoreInit+0xe0>)
 800fdd8:	4313      	orrs	r3, r2
 800fdda:	687a      	ldr	r2, [r7, #4]
 800fddc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	689b      	ldr	r3, [r3, #8]
 800fde2:	f043 0206 	orr.w	r2, r3, #6
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	689b      	ldr	r3, [r3, #8]
 800fdee:	f043 0220 	orr.w	r2, r3, #32
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fdf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3710      	adds	r7, #16
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fe02:	b004      	add	sp, #16
 800fe04:	4770      	bx	lr
 800fe06:	bf00      	nop
 800fe08:	ffbdffbf 	.word	0xffbdffbf
 800fe0c:	03ee0000 	.word	0x03ee0000

0800fe10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b087      	sub	sp, #28
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	60f8      	str	r0, [r7, #12]
 800fe18:	60b9      	str	r1, [r7, #8]
 800fe1a:	4613      	mov	r3, r2
 800fe1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800fe1e:	79fb      	ldrb	r3, [r7, #7]
 800fe20:	2b02      	cmp	r3, #2
 800fe22:	d165      	bne.n	800fef0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	4a41      	ldr	r2, [pc, #260]	@ (800ff2c <USB_SetTurnaroundTime+0x11c>)
 800fe28:	4293      	cmp	r3, r2
 800fe2a:	d906      	bls.n	800fe3a <USB_SetTurnaroundTime+0x2a>
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	4a40      	ldr	r2, [pc, #256]	@ (800ff30 <USB_SetTurnaroundTime+0x120>)
 800fe30:	4293      	cmp	r3, r2
 800fe32:	d202      	bcs.n	800fe3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800fe34:	230f      	movs	r3, #15
 800fe36:	617b      	str	r3, [r7, #20]
 800fe38:	e062      	b.n	800ff00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	4a3c      	ldr	r2, [pc, #240]	@ (800ff30 <USB_SetTurnaroundTime+0x120>)
 800fe3e:	4293      	cmp	r3, r2
 800fe40:	d306      	bcc.n	800fe50 <USB_SetTurnaroundTime+0x40>
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	4a3b      	ldr	r2, [pc, #236]	@ (800ff34 <USB_SetTurnaroundTime+0x124>)
 800fe46:	4293      	cmp	r3, r2
 800fe48:	d202      	bcs.n	800fe50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800fe4a:	230e      	movs	r3, #14
 800fe4c:	617b      	str	r3, [r7, #20]
 800fe4e:	e057      	b.n	800ff00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	4a38      	ldr	r2, [pc, #224]	@ (800ff34 <USB_SetTurnaroundTime+0x124>)
 800fe54:	4293      	cmp	r3, r2
 800fe56:	d306      	bcc.n	800fe66 <USB_SetTurnaroundTime+0x56>
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	4a37      	ldr	r2, [pc, #220]	@ (800ff38 <USB_SetTurnaroundTime+0x128>)
 800fe5c:	4293      	cmp	r3, r2
 800fe5e:	d202      	bcs.n	800fe66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800fe60:	230d      	movs	r3, #13
 800fe62:	617b      	str	r3, [r7, #20]
 800fe64:	e04c      	b.n	800ff00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	4a33      	ldr	r2, [pc, #204]	@ (800ff38 <USB_SetTurnaroundTime+0x128>)
 800fe6a:	4293      	cmp	r3, r2
 800fe6c:	d306      	bcc.n	800fe7c <USB_SetTurnaroundTime+0x6c>
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	4a32      	ldr	r2, [pc, #200]	@ (800ff3c <USB_SetTurnaroundTime+0x12c>)
 800fe72:	4293      	cmp	r3, r2
 800fe74:	d802      	bhi.n	800fe7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800fe76:	230c      	movs	r3, #12
 800fe78:	617b      	str	r3, [r7, #20]
 800fe7a:	e041      	b.n	800ff00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	4a2f      	ldr	r2, [pc, #188]	@ (800ff3c <USB_SetTurnaroundTime+0x12c>)
 800fe80:	4293      	cmp	r3, r2
 800fe82:	d906      	bls.n	800fe92 <USB_SetTurnaroundTime+0x82>
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	4a2e      	ldr	r2, [pc, #184]	@ (800ff40 <USB_SetTurnaroundTime+0x130>)
 800fe88:	4293      	cmp	r3, r2
 800fe8a:	d802      	bhi.n	800fe92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800fe8c:	230b      	movs	r3, #11
 800fe8e:	617b      	str	r3, [r7, #20]
 800fe90:	e036      	b.n	800ff00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	4a2a      	ldr	r2, [pc, #168]	@ (800ff40 <USB_SetTurnaroundTime+0x130>)
 800fe96:	4293      	cmp	r3, r2
 800fe98:	d906      	bls.n	800fea8 <USB_SetTurnaroundTime+0x98>
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	4a29      	ldr	r2, [pc, #164]	@ (800ff44 <USB_SetTurnaroundTime+0x134>)
 800fe9e:	4293      	cmp	r3, r2
 800fea0:	d802      	bhi.n	800fea8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800fea2:	230a      	movs	r3, #10
 800fea4:	617b      	str	r3, [r7, #20]
 800fea6:	e02b      	b.n	800ff00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	4a26      	ldr	r2, [pc, #152]	@ (800ff44 <USB_SetTurnaroundTime+0x134>)
 800feac:	4293      	cmp	r3, r2
 800feae:	d906      	bls.n	800febe <USB_SetTurnaroundTime+0xae>
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	4a25      	ldr	r2, [pc, #148]	@ (800ff48 <USB_SetTurnaroundTime+0x138>)
 800feb4:	4293      	cmp	r3, r2
 800feb6:	d202      	bcs.n	800febe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800feb8:	2309      	movs	r3, #9
 800feba:	617b      	str	r3, [r7, #20]
 800febc:	e020      	b.n	800ff00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	4a21      	ldr	r2, [pc, #132]	@ (800ff48 <USB_SetTurnaroundTime+0x138>)
 800fec2:	4293      	cmp	r3, r2
 800fec4:	d306      	bcc.n	800fed4 <USB_SetTurnaroundTime+0xc4>
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	4a20      	ldr	r2, [pc, #128]	@ (800ff4c <USB_SetTurnaroundTime+0x13c>)
 800feca:	4293      	cmp	r3, r2
 800fecc:	d802      	bhi.n	800fed4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800fece:	2308      	movs	r3, #8
 800fed0:	617b      	str	r3, [r7, #20]
 800fed2:	e015      	b.n	800ff00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	4a1d      	ldr	r2, [pc, #116]	@ (800ff4c <USB_SetTurnaroundTime+0x13c>)
 800fed8:	4293      	cmp	r3, r2
 800feda:	d906      	bls.n	800feea <USB_SetTurnaroundTime+0xda>
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	4a1c      	ldr	r2, [pc, #112]	@ (800ff50 <USB_SetTurnaroundTime+0x140>)
 800fee0:	4293      	cmp	r3, r2
 800fee2:	d202      	bcs.n	800feea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800fee4:	2307      	movs	r3, #7
 800fee6:	617b      	str	r3, [r7, #20]
 800fee8:	e00a      	b.n	800ff00 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800feea:	2306      	movs	r3, #6
 800feec:	617b      	str	r3, [r7, #20]
 800feee:	e007      	b.n	800ff00 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800fef0:	79fb      	ldrb	r3, [r7, #7]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d102      	bne.n	800fefc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800fef6:	2309      	movs	r3, #9
 800fef8:	617b      	str	r3, [r7, #20]
 800fefa:	e001      	b.n	800ff00 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800fefc:	2309      	movs	r3, #9
 800fefe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	68db      	ldr	r3, [r3, #12]
 800ff04:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	68da      	ldr	r2, [r3, #12]
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	029b      	lsls	r3, r3, #10
 800ff14:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800ff18:	431a      	orrs	r2, r3
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ff1e:	2300      	movs	r3, #0
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	371c      	adds	r7, #28
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr
 800ff2c:	00d8acbf 	.word	0x00d8acbf
 800ff30:	00e4e1c0 	.word	0x00e4e1c0
 800ff34:	00f42400 	.word	0x00f42400
 800ff38:	01067380 	.word	0x01067380
 800ff3c:	011a499f 	.word	0x011a499f
 800ff40:	01312cff 	.word	0x01312cff
 800ff44:	014ca43f 	.word	0x014ca43f
 800ff48:	016e3600 	.word	0x016e3600
 800ff4c:	01a6ab1f 	.word	0x01a6ab1f
 800ff50:	01e84800 	.word	0x01e84800

0800ff54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ff54:	b480      	push	{r7}
 800ff56:	b083      	sub	sp, #12
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	689b      	ldr	r3, [r3, #8]
 800ff60:	f043 0201 	orr.w	r2, r3, #1
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ff68:	2300      	movs	r3, #0
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	370c      	adds	r7, #12
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff74:	4770      	bx	lr

0800ff76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ff76:	b480      	push	{r7}
 800ff78:	b083      	sub	sp, #12
 800ff7a:	af00      	add	r7, sp, #0
 800ff7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	689b      	ldr	r3, [r3, #8]
 800ff82:	f023 0201 	bic.w	r2, r3, #1
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ff8a:	2300      	movs	r3, #0
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	370c      	adds	r7, #12
 800ff90:	46bd      	mov	sp, r7
 800ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff96:	4770      	bx	lr

0800ff98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b084      	sub	sp, #16
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	460b      	mov	r3, r1
 800ffa2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	68db      	ldr	r3, [r3, #12]
 800ffac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ffb4:	78fb      	ldrb	r3, [r7, #3]
 800ffb6:	2b01      	cmp	r3, #1
 800ffb8:	d115      	bne.n	800ffe6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ffc6:	200a      	movs	r0, #10
 800ffc8:	f7f2 fd98 	bl	8002afc <HAL_Delay>
      ms += 10U;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	330a      	adds	r3, #10
 800ffd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f001 f93f 	bl	8011256 <USB_GetMode>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	2b01      	cmp	r3, #1
 800ffdc:	d01e      	beq.n	801001c <USB_SetCurrentMode+0x84>
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	2bc7      	cmp	r3, #199	@ 0xc7
 800ffe2:	d9f0      	bls.n	800ffc6 <USB_SetCurrentMode+0x2e>
 800ffe4:	e01a      	b.n	801001c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ffe6:	78fb      	ldrb	r3, [r7, #3]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d115      	bne.n	8010018 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	68db      	ldr	r3, [r3, #12]
 800fff0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800fff8:	200a      	movs	r0, #10
 800fffa:	f7f2 fd7f 	bl	8002afc <HAL_Delay>
      ms += 10U;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	330a      	adds	r3, #10
 8010002:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f001 f926 	bl	8011256 <USB_GetMode>
 801000a:	4603      	mov	r3, r0
 801000c:	2b00      	cmp	r3, #0
 801000e:	d005      	beq.n	801001c <USB_SetCurrentMode+0x84>
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	2bc7      	cmp	r3, #199	@ 0xc7
 8010014:	d9f0      	bls.n	800fff8 <USB_SetCurrentMode+0x60>
 8010016:	e001      	b.n	801001c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010018:	2301      	movs	r3, #1
 801001a:	e005      	b.n	8010028 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	2bc8      	cmp	r3, #200	@ 0xc8
 8010020:	d101      	bne.n	8010026 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010022:	2301      	movs	r3, #1
 8010024:	e000      	b.n	8010028 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010026:	2300      	movs	r3, #0
}
 8010028:	4618      	mov	r0, r3
 801002a:	3710      	adds	r7, #16
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}

08010030 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010030:	b084      	sub	sp, #16
 8010032:	b580      	push	{r7, lr}
 8010034:	b086      	sub	sp, #24
 8010036:	af00      	add	r7, sp, #0
 8010038:	6078      	str	r0, [r7, #4]
 801003a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801003e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010042:	2300      	movs	r3, #0
 8010044:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801004a:	2300      	movs	r3, #0
 801004c:	613b      	str	r3, [r7, #16]
 801004e:	e009      	b.n	8010064 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	3340      	adds	r3, #64	@ 0x40
 8010056:	009b      	lsls	r3, r3, #2
 8010058:	4413      	add	r3, r2
 801005a:	2200      	movs	r2, #0
 801005c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	3301      	adds	r3, #1
 8010062:	613b      	str	r3, [r7, #16]
 8010064:	693b      	ldr	r3, [r7, #16]
 8010066:	2b0e      	cmp	r3, #14
 8010068:	d9f2      	bls.n	8010050 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801006a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801006e:	2b00      	cmp	r3, #0
 8010070:	d11c      	bne.n	80100ac <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010078:	685b      	ldr	r3, [r3, #4]
 801007a:	68fa      	ldr	r2, [r7, #12]
 801007c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010080:	f043 0302 	orr.w	r3, r3, #2
 8010084:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801008a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	601a      	str	r2, [r3, #0]
 80100aa:	e005      	b.n	80100b8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100b0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80100be:	461a      	mov	r2, r3
 80100c0:	2300      	movs	r3, #0
 80100c2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80100c4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80100c8:	2b01      	cmp	r3, #1
 80100ca:	d10d      	bne.n	80100e8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80100cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d104      	bne.n	80100de <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80100d4:	2100      	movs	r1, #0
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	f000 f968 	bl	80103ac <USB_SetDevSpeed>
 80100dc:	e008      	b.n	80100f0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80100de:	2101      	movs	r1, #1
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f000 f963 	bl	80103ac <USB_SetDevSpeed>
 80100e6:	e003      	b.n	80100f0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80100e8:	2103      	movs	r1, #3
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f000 f95e 	bl	80103ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80100f0:	2110      	movs	r1, #16
 80100f2:	6878      	ldr	r0, [r7, #4]
 80100f4:	f000 f8fa 	bl	80102ec <USB_FlushTxFifo>
 80100f8:	4603      	mov	r3, r0
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d001      	beq.n	8010102 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80100fe:	2301      	movs	r3, #1
 8010100:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f000 f924 	bl	8010350 <USB_FlushRxFifo>
 8010108:	4603      	mov	r3, r0
 801010a:	2b00      	cmp	r3, #0
 801010c:	d001      	beq.n	8010112 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801010e:	2301      	movs	r3, #1
 8010110:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010118:	461a      	mov	r2, r3
 801011a:	2300      	movs	r3, #0
 801011c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010124:	461a      	mov	r2, r3
 8010126:	2300      	movs	r3, #0
 8010128:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010130:	461a      	mov	r2, r3
 8010132:	2300      	movs	r3, #0
 8010134:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010136:	2300      	movs	r3, #0
 8010138:	613b      	str	r3, [r7, #16]
 801013a:	e043      	b.n	80101c4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801013c:	693b      	ldr	r3, [r7, #16]
 801013e:	015a      	lsls	r2, r3, #5
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	4413      	add	r3, r2
 8010144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801014e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010152:	d118      	bne.n	8010186 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d10a      	bne.n	8010170 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801015a:	693b      	ldr	r3, [r7, #16]
 801015c:	015a      	lsls	r2, r3, #5
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	4413      	add	r3, r2
 8010162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010166:	461a      	mov	r2, r3
 8010168:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801016c:	6013      	str	r3, [r2, #0]
 801016e:	e013      	b.n	8010198 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010170:	693b      	ldr	r3, [r7, #16]
 8010172:	015a      	lsls	r2, r3, #5
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	4413      	add	r3, r2
 8010178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801017c:	461a      	mov	r2, r3
 801017e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8010182:	6013      	str	r3, [r2, #0]
 8010184:	e008      	b.n	8010198 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010186:	693b      	ldr	r3, [r7, #16]
 8010188:	015a      	lsls	r2, r3, #5
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	4413      	add	r3, r2
 801018e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010192:	461a      	mov	r2, r3
 8010194:	2300      	movs	r3, #0
 8010196:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010198:	693b      	ldr	r3, [r7, #16]
 801019a:	015a      	lsls	r2, r3, #5
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	4413      	add	r3, r2
 80101a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80101a4:	461a      	mov	r2, r3
 80101a6:	2300      	movs	r3, #0
 80101a8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	015a      	lsls	r2, r3, #5
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	4413      	add	r3, r2
 80101b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80101b6:	461a      	mov	r2, r3
 80101b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80101bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80101be:	693b      	ldr	r3, [r7, #16]
 80101c0:	3301      	adds	r3, #1
 80101c2:	613b      	str	r3, [r7, #16]
 80101c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80101c8:	461a      	mov	r2, r3
 80101ca:	693b      	ldr	r3, [r7, #16]
 80101cc:	4293      	cmp	r3, r2
 80101ce:	d3b5      	bcc.n	801013c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80101d0:	2300      	movs	r3, #0
 80101d2:	613b      	str	r3, [r7, #16]
 80101d4:	e043      	b.n	801025e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80101d6:	693b      	ldr	r3, [r7, #16]
 80101d8:	015a      	lsls	r2, r3, #5
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	4413      	add	r3, r2
 80101de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80101e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80101ec:	d118      	bne.n	8010220 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80101ee:	693b      	ldr	r3, [r7, #16]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d10a      	bne.n	801020a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	015a      	lsls	r2, r3, #5
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	4413      	add	r3, r2
 80101fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010200:	461a      	mov	r2, r3
 8010202:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010206:	6013      	str	r3, [r2, #0]
 8010208:	e013      	b.n	8010232 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801020a:	693b      	ldr	r3, [r7, #16]
 801020c:	015a      	lsls	r2, r3, #5
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	4413      	add	r3, r2
 8010212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010216:	461a      	mov	r2, r3
 8010218:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801021c:	6013      	str	r3, [r2, #0]
 801021e:	e008      	b.n	8010232 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010220:	693b      	ldr	r3, [r7, #16]
 8010222:	015a      	lsls	r2, r3, #5
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	4413      	add	r3, r2
 8010228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801022c:	461a      	mov	r2, r3
 801022e:	2300      	movs	r3, #0
 8010230:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010232:	693b      	ldr	r3, [r7, #16]
 8010234:	015a      	lsls	r2, r3, #5
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	4413      	add	r3, r2
 801023a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801023e:	461a      	mov	r2, r3
 8010240:	2300      	movs	r3, #0
 8010242:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010244:	693b      	ldr	r3, [r7, #16]
 8010246:	015a      	lsls	r2, r3, #5
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	4413      	add	r3, r2
 801024c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010250:	461a      	mov	r2, r3
 8010252:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010256:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010258:	693b      	ldr	r3, [r7, #16]
 801025a:	3301      	adds	r3, #1
 801025c:	613b      	str	r3, [r7, #16]
 801025e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010262:	461a      	mov	r2, r3
 8010264:	693b      	ldr	r3, [r7, #16]
 8010266:	4293      	cmp	r3, r2
 8010268:	d3b5      	bcc.n	80101d6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010270:	691b      	ldr	r3, [r3, #16]
 8010272:	68fa      	ldr	r2, [r7, #12]
 8010274:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801027c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	2200      	movs	r2, #0
 8010282:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801028a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801028c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010290:	2b00      	cmp	r3, #0
 8010292:	d105      	bne.n	80102a0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	699b      	ldr	r3, [r3, #24]
 8010298:	f043 0210 	orr.w	r2, r3, #16
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	699a      	ldr	r2, [r3, #24]
 80102a4:	4b0f      	ldr	r3, [pc, #60]	@ (80102e4 <USB_DevInit+0x2b4>)
 80102a6:	4313      	orrs	r3, r2
 80102a8:	687a      	ldr	r2, [r7, #4]
 80102aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80102ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d005      	beq.n	80102c0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	699b      	ldr	r3, [r3, #24]
 80102b8:	f043 0208 	orr.w	r2, r3, #8
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80102c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80102c4:	2b01      	cmp	r3, #1
 80102c6:	d105      	bne.n	80102d4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	699a      	ldr	r2, [r3, #24]
 80102cc:	4b06      	ldr	r3, [pc, #24]	@ (80102e8 <USB_DevInit+0x2b8>)
 80102ce:	4313      	orrs	r3, r2
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80102d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	3718      	adds	r7, #24
 80102da:	46bd      	mov	sp, r7
 80102dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80102e0:	b004      	add	sp, #16
 80102e2:	4770      	bx	lr
 80102e4:	803c3800 	.word	0x803c3800
 80102e8:	40000004 	.word	0x40000004

080102ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80102ec:	b480      	push	{r7}
 80102ee:	b085      	sub	sp, #20
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80102f6:	2300      	movs	r3, #0
 80102f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	3301      	adds	r3, #1
 80102fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010306:	d901      	bls.n	801030c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010308:	2303      	movs	r3, #3
 801030a:	e01b      	b.n	8010344 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	691b      	ldr	r3, [r3, #16]
 8010310:	2b00      	cmp	r3, #0
 8010312:	daf2      	bge.n	80102fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010314:	2300      	movs	r3, #0
 8010316:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	019b      	lsls	r3, r3, #6
 801031c:	f043 0220 	orr.w	r2, r3, #32
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	3301      	adds	r3, #1
 8010328:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010330:	d901      	bls.n	8010336 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010332:	2303      	movs	r3, #3
 8010334:	e006      	b.n	8010344 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	691b      	ldr	r3, [r3, #16]
 801033a:	f003 0320 	and.w	r3, r3, #32
 801033e:	2b20      	cmp	r3, #32
 8010340:	d0f0      	beq.n	8010324 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010342:	2300      	movs	r3, #0
}
 8010344:	4618      	mov	r0, r3
 8010346:	3714      	adds	r7, #20
 8010348:	46bd      	mov	sp, r7
 801034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034e:	4770      	bx	lr

08010350 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010350:	b480      	push	{r7}
 8010352:	b085      	sub	sp, #20
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010358:	2300      	movs	r3, #0
 801035a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	3301      	adds	r3, #1
 8010360:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010368:	d901      	bls.n	801036e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801036a:	2303      	movs	r3, #3
 801036c:	e018      	b.n	80103a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	691b      	ldr	r3, [r3, #16]
 8010372:	2b00      	cmp	r3, #0
 8010374:	daf2      	bge.n	801035c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010376:	2300      	movs	r3, #0
 8010378:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	2210      	movs	r2, #16
 801037e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	3301      	adds	r3, #1
 8010384:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801038c:	d901      	bls.n	8010392 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801038e:	2303      	movs	r3, #3
 8010390:	e006      	b.n	80103a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	691b      	ldr	r3, [r3, #16]
 8010396:	f003 0310 	and.w	r3, r3, #16
 801039a:	2b10      	cmp	r3, #16
 801039c:	d0f0      	beq.n	8010380 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801039e:	2300      	movs	r3, #0
}
 80103a0:	4618      	mov	r0, r3
 80103a2:	3714      	adds	r7, #20
 80103a4:	46bd      	mov	sp, r7
 80103a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103aa:	4770      	bx	lr

080103ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80103ac:	b480      	push	{r7}
 80103ae:	b085      	sub	sp, #20
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
 80103b4:	460b      	mov	r3, r1
 80103b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80103c2:	681a      	ldr	r2, [r3, #0]
 80103c4:	78fb      	ldrb	r3, [r7, #3]
 80103c6:	68f9      	ldr	r1, [r7, #12]
 80103c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80103cc:	4313      	orrs	r3, r2
 80103ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80103d0:	2300      	movs	r3, #0
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	3714      	adds	r7, #20
 80103d6:	46bd      	mov	sp, r7
 80103d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103dc:	4770      	bx	lr

080103de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80103de:	b480      	push	{r7}
 80103e0:	b087      	sub	sp, #28
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80103f0:	689b      	ldr	r3, [r3, #8]
 80103f2:	f003 0306 	and.w	r3, r3, #6
 80103f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d102      	bne.n	8010404 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80103fe:	2300      	movs	r3, #0
 8010400:	75fb      	strb	r3, [r7, #23]
 8010402:	e00a      	b.n	801041a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2b02      	cmp	r3, #2
 8010408:	d002      	beq.n	8010410 <USB_GetDevSpeed+0x32>
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	2b06      	cmp	r3, #6
 801040e:	d102      	bne.n	8010416 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010410:	2302      	movs	r3, #2
 8010412:	75fb      	strb	r3, [r7, #23]
 8010414:	e001      	b.n	801041a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010416:	230f      	movs	r3, #15
 8010418:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801041a:	7dfb      	ldrb	r3, [r7, #23]
}
 801041c:	4618      	mov	r0, r3
 801041e:	371c      	adds	r7, #28
 8010420:	46bd      	mov	sp, r7
 8010422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010426:	4770      	bx	lr

08010428 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010428:	b480      	push	{r7}
 801042a:	b085      	sub	sp, #20
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	781b      	ldrb	r3, [r3, #0]
 801043a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	785b      	ldrb	r3, [r3, #1]
 8010440:	2b01      	cmp	r3, #1
 8010442:	d139      	bne.n	80104b8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801044a:	69da      	ldr	r2, [r3, #28]
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	781b      	ldrb	r3, [r3, #0]
 8010450:	f003 030f 	and.w	r3, r3, #15
 8010454:	2101      	movs	r1, #1
 8010456:	fa01 f303 	lsl.w	r3, r1, r3
 801045a:	b29b      	uxth	r3, r3
 801045c:	68f9      	ldr	r1, [r7, #12]
 801045e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010462:	4313      	orrs	r3, r2
 8010464:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	015a      	lsls	r2, r3, #5
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	4413      	add	r3, r2
 801046e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010478:	2b00      	cmp	r3, #0
 801047a:	d153      	bne.n	8010524 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	015a      	lsls	r2, r3, #5
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	4413      	add	r3, r2
 8010484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010488:	681a      	ldr	r2, [r3, #0]
 801048a:	683b      	ldr	r3, [r7, #0]
 801048c:	689b      	ldr	r3, [r3, #8]
 801048e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	791b      	ldrb	r3, [r3, #4]
 8010496:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010498:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	059b      	lsls	r3, r3, #22
 801049e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80104a0:	431a      	orrs	r2, r3
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	0159      	lsls	r1, r3, #5
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	440b      	add	r3, r1
 80104aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80104ae:	4619      	mov	r1, r3
 80104b0:	4b20      	ldr	r3, [pc, #128]	@ (8010534 <USB_ActivateEndpoint+0x10c>)
 80104b2:	4313      	orrs	r3, r2
 80104b4:	600b      	str	r3, [r1, #0]
 80104b6:	e035      	b.n	8010524 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80104be:	69da      	ldr	r2, [r3, #28]
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	781b      	ldrb	r3, [r3, #0]
 80104c4:	f003 030f 	and.w	r3, r3, #15
 80104c8:	2101      	movs	r1, #1
 80104ca:	fa01 f303 	lsl.w	r3, r1, r3
 80104ce:	041b      	lsls	r3, r3, #16
 80104d0:	68f9      	ldr	r1, [r7, #12]
 80104d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80104d6:	4313      	orrs	r3, r2
 80104d8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80104da:	68bb      	ldr	r3, [r7, #8]
 80104dc:	015a      	lsls	r2, r3, #5
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	4413      	add	r3, r2
 80104e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d119      	bne.n	8010524 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	015a      	lsls	r2, r3, #5
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	4413      	add	r3, r2
 80104f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80104fc:	681a      	ldr	r2, [r3, #0]
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	689b      	ldr	r3, [r3, #8]
 8010502:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	791b      	ldrb	r3, [r3, #4]
 801050a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801050c:	430b      	orrs	r3, r1
 801050e:	431a      	orrs	r2, r3
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	0159      	lsls	r1, r3, #5
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	440b      	add	r3, r1
 8010518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801051c:	4619      	mov	r1, r3
 801051e:	4b05      	ldr	r3, [pc, #20]	@ (8010534 <USB_ActivateEndpoint+0x10c>)
 8010520:	4313      	orrs	r3, r2
 8010522:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010524:	2300      	movs	r3, #0
}
 8010526:	4618      	mov	r0, r3
 8010528:	3714      	adds	r7, #20
 801052a:	46bd      	mov	sp, r7
 801052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010530:	4770      	bx	lr
 8010532:	bf00      	nop
 8010534:	10008000 	.word	0x10008000

08010538 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010538:	b480      	push	{r7}
 801053a:	b085      	sub	sp, #20
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	781b      	ldrb	r3, [r3, #0]
 801054a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	785b      	ldrb	r3, [r3, #1]
 8010550:	2b01      	cmp	r3, #1
 8010552:	d161      	bne.n	8010618 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	015a      	lsls	r2, r3, #5
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	4413      	add	r3, r2
 801055c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010566:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801056a:	d11f      	bne.n	80105ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	015a      	lsls	r2, r3, #5
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	4413      	add	r3, r2
 8010574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	68ba      	ldr	r2, [r7, #8]
 801057c:	0151      	lsls	r1, r2, #5
 801057e:	68fa      	ldr	r2, [r7, #12]
 8010580:	440a      	add	r2, r1
 8010582:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010586:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801058a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	015a      	lsls	r2, r3, #5
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	4413      	add	r3, r2
 8010594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	68ba      	ldr	r2, [r7, #8]
 801059c:	0151      	lsls	r1, r2, #5
 801059e:	68fa      	ldr	r2, [r7, #12]
 80105a0:	440a      	add	r2, r1
 80105a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80105a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80105aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80105b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	781b      	ldrb	r3, [r3, #0]
 80105b8:	f003 030f 	and.w	r3, r3, #15
 80105bc:	2101      	movs	r1, #1
 80105be:	fa01 f303 	lsl.w	r3, r1, r3
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	43db      	mvns	r3, r3
 80105c6:	68f9      	ldr	r1, [r7, #12]
 80105c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80105cc:	4013      	ands	r3, r2
 80105ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80105d6:	69da      	ldr	r2, [r3, #28]
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	781b      	ldrb	r3, [r3, #0]
 80105dc:	f003 030f 	and.w	r3, r3, #15
 80105e0:	2101      	movs	r1, #1
 80105e2:	fa01 f303 	lsl.w	r3, r1, r3
 80105e6:	b29b      	uxth	r3, r3
 80105e8:	43db      	mvns	r3, r3
 80105ea:	68f9      	ldr	r1, [r7, #12]
 80105ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80105f0:	4013      	ands	r3, r2
 80105f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	015a      	lsls	r2, r3, #5
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	4413      	add	r3, r2
 80105fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010600:	681a      	ldr	r2, [r3, #0]
 8010602:	68bb      	ldr	r3, [r7, #8]
 8010604:	0159      	lsls	r1, r3, #5
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	440b      	add	r3, r1
 801060a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801060e:	4619      	mov	r1, r3
 8010610:	4b35      	ldr	r3, [pc, #212]	@ (80106e8 <USB_DeactivateEndpoint+0x1b0>)
 8010612:	4013      	ands	r3, r2
 8010614:	600b      	str	r3, [r1, #0]
 8010616:	e060      	b.n	80106da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	015a      	lsls	r2, r3, #5
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	4413      	add	r3, r2
 8010620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801062a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801062e:	d11f      	bne.n	8010670 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	015a      	lsls	r2, r3, #5
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	4413      	add	r3, r2
 8010638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	68ba      	ldr	r2, [r7, #8]
 8010640:	0151      	lsls	r1, r2, #5
 8010642:	68fa      	ldr	r2, [r7, #12]
 8010644:	440a      	add	r2, r1
 8010646:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801064a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801064e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	015a      	lsls	r2, r3, #5
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	4413      	add	r3, r2
 8010658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	68ba      	ldr	r2, [r7, #8]
 8010660:	0151      	lsls	r1, r2, #5
 8010662:	68fa      	ldr	r2, [r7, #12]
 8010664:	440a      	add	r2, r1
 8010666:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801066a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801066e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010676:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	781b      	ldrb	r3, [r3, #0]
 801067c:	f003 030f 	and.w	r3, r3, #15
 8010680:	2101      	movs	r1, #1
 8010682:	fa01 f303 	lsl.w	r3, r1, r3
 8010686:	041b      	lsls	r3, r3, #16
 8010688:	43db      	mvns	r3, r3
 801068a:	68f9      	ldr	r1, [r7, #12]
 801068c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010690:	4013      	ands	r3, r2
 8010692:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801069a:	69da      	ldr	r2, [r3, #28]
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	f003 030f 	and.w	r3, r3, #15
 80106a4:	2101      	movs	r1, #1
 80106a6:	fa01 f303 	lsl.w	r3, r1, r3
 80106aa:	041b      	lsls	r3, r3, #16
 80106ac:	43db      	mvns	r3, r3
 80106ae:	68f9      	ldr	r1, [r7, #12]
 80106b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80106b4:	4013      	ands	r3, r2
 80106b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	015a      	lsls	r2, r3, #5
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	4413      	add	r3, r2
 80106c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80106c4:	681a      	ldr	r2, [r3, #0]
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	0159      	lsls	r1, r3, #5
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	440b      	add	r3, r1
 80106ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80106d2:	4619      	mov	r1, r3
 80106d4:	4b05      	ldr	r3, [pc, #20]	@ (80106ec <USB_DeactivateEndpoint+0x1b4>)
 80106d6:	4013      	ands	r3, r2
 80106d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80106da:	2300      	movs	r3, #0
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3714      	adds	r7, #20
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr
 80106e8:	ec337800 	.word	0xec337800
 80106ec:	eff37800 	.word	0xeff37800

080106f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b08a      	sub	sp, #40	@ 0x28
 80106f4:	af02      	add	r7, sp, #8
 80106f6:	60f8      	str	r0, [r7, #12]
 80106f8:	60b9      	str	r1, [r7, #8]
 80106fa:	4613      	mov	r3, r2
 80106fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010702:	68bb      	ldr	r3, [r7, #8]
 8010704:	781b      	ldrb	r3, [r3, #0]
 8010706:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	785b      	ldrb	r3, [r3, #1]
 801070c:	2b01      	cmp	r3, #1
 801070e:	f040 8185 	bne.w	8010a1c <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	691b      	ldr	r3, [r3, #16]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d132      	bne.n	8010780 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801071a:	69bb      	ldr	r3, [r7, #24]
 801071c:	015a      	lsls	r2, r3, #5
 801071e:	69fb      	ldr	r3, [r7, #28]
 8010720:	4413      	add	r3, r2
 8010722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010726:	691a      	ldr	r2, [r3, #16]
 8010728:	69bb      	ldr	r3, [r7, #24]
 801072a:	0159      	lsls	r1, r3, #5
 801072c:	69fb      	ldr	r3, [r7, #28]
 801072e:	440b      	add	r3, r1
 8010730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010734:	4619      	mov	r1, r3
 8010736:	4ba7      	ldr	r3, [pc, #668]	@ (80109d4 <USB_EPStartXfer+0x2e4>)
 8010738:	4013      	ands	r3, r2
 801073a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801073c:	69bb      	ldr	r3, [r7, #24]
 801073e:	015a      	lsls	r2, r3, #5
 8010740:	69fb      	ldr	r3, [r7, #28]
 8010742:	4413      	add	r3, r2
 8010744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010748:	691b      	ldr	r3, [r3, #16]
 801074a:	69ba      	ldr	r2, [r7, #24]
 801074c:	0151      	lsls	r1, r2, #5
 801074e:	69fa      	ldr	r2, [r7, #28]
 8010750:	440a      	add	r2, r1
 8010752:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010756:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801075a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801075c:	69bb      	ldr	r3, [r7, #24]
 801075e:	015a      	lsls	r2, r3, #5
 8010760:	69fb      	ldr	r3, [r7, #28]
 8010762:	4413      	add	r3, r2
 8010764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010768:	691a      	ldr	r2, [r3, #16]
 801076a:	69bb      	ldr	r3, [r7, #24]
 801076c:	0159      	lsls	r1, r3, #5
 801076e:	69fb      	ldr	r3, [r7, #28]
 8010770:	440b      	add	r3, r1
 8010772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010776:	4619      	mov	r1, r3
 8010778:	4b97      	ldr	r3, [pc, #604]	@ (80109d8 <USB_EPStartXfer+0x2e8>)
 801077a:	4013      	ands	r3, r2
 801077c:	610b      	str	r3, [r1, #16]
 801077e:	e097      	b.n	80108b0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010780:	69bb      	ldr	r3, [r7, #24]
 8010782:	015a      	lsls	r2, r3, #5
 8010784:	69fb      	ldr	r3, [r7, #28]
 8010786:	4413      	add	r3, r2
 8010788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801078c:	691a      	ldr	r2, [r3, #16]
 801078e:	69bb      	ldr	r3, [r7, #24]
 8010790:	0159      	lsls	r1, r3, #5
 8010792:	69fb      	ldr	r3, [r7, #28]
 8010794:	440b      	add	r3, r1
 8010796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801079a:	4619      	mov	r1, r3
 801079c:	4b8e      	ldr	r3, [pc, #568]	@ (80109d8 <USB_EPStartXfer+0x2e8>)
 801079e:	4013      	ands	r3, r2
 80107a0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80107a2:	69bb      	ldr	r3, [r7, #24]
 80107a4:	015a      	lsls	r2, r3, #5
 80107a6:	69fb      	ldr	r3, [r7, #28]
 80107a8:	4413      	add	r3, r2
 80107aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80107ae:	691a      	ldr	r2, [r3, #16]
 80107b0:	69bb      	ldr	r3, [r7, #24]
 80107b2:	0159      	lsls	r1, r3, #5
 80107b4:	69fb      	ldr	r3, [r7, #28]
 80107b6:	440b      	add	r3, r1
 80107b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80107bc:	4619      	mov	r1, r3
 80107be:	4b85      	ldr	r3, [pc, #532]	@ (80109d4 <USB_EPStartXfer+0x2e4>)
 80107c0:	4013      	ands	r3, r2
 80107c2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80107c4:	69bb      	ldr	r3, [r7, #24]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d11a      	bne.n	8010800 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	691a      	ldr	r2, [r3, #16]
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	689b      	ldr	r3, [r3, #8]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d903      	bls.n	80107de <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	689a      	ldr	r2, [r3, #8]
 80107da:	68bb      	ldr	r3, [r7, #8]
 80107dc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80107de:	69bb      	ldr	r3, [r7, #24]
 80107e0:	015a      	lsls	r2, r3, #5
 80107e2:	69fb      	ldr	r3, [r7, #28]
 80107e4:	4413      	add	r3, r2
 80107e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80107ea:	691b      	ldr	r3, [r3, #16]
 80107ec:	69ba      	ldr	r2, [r7, #24]
 80107ee:	0151      	lsls	r1, r2, #5
 80107f0:	69fa      	ldr	r2, [r7, #28]
 80107f2:	440a      	add	r2, r1
 80107f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80107f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80107fc:	6113      	str	r3, [r2, #16]
 80107fe:	e044      	b.n	801088a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	691a      	ldr	r2, [r3, #16]
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	689b      	ldr	r3, [r3, #8]
 8010808:	4413      	add	r3, r2
 801080a:	1e5a      	subs	r2, r3, #1
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	689b      	ldr	r3, [r3, #8]
 8010810:	fbb2 f3f3 	udiv	r3, r2, r3
 8010814:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8010816:	69bb      	ldr	r3, [r7, #24]
 8010818:	015a      	lsls	r2, r3, #5
 801081a:	69fb      	ldr	r3, [r7, #28]
 801081c:	4413      	add	r3, r2
 801081e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010822:	691a      	ldr	r2, [r3, #16]
 8010824:	8afb      	ldrh	r3, [r7, #22]
 8010826:	04d9      	lsls	r1, r3, #19
 8010828:	4b6c      	ldr	r3, [pc, #432]	@ (80109dc <USB_EPStartXfer+0x2ec>)
 801082a:	400b      	ands	r3, r1
 801082c:	69b9      	ldr	r1, [r7, #24]
 801082e:	0148      	lsls	r0, r1, #5
 8010830:	69f9      	ldr	r1, [r7, #28]
 8010832:	4401      	add	r1, r0
 8010834:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010838:	4313      	orrs	r3, r2
 801083a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	791b      	ldrb	r3, [r3, #4]
 8010840:	2b01      	cmp	r3, #1
 8010842:	d122      	bne.n	801088a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010844:	69bb      	ldr	r3, [r7, #24]
 8010846:	015a      	lsls	r2, r3, #5
 8010848:	69fb      	ldr	r3, [r7, #28]
 801084a:	4413      	add	r3, r2
 801084c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010850:	691b      	ldr	r3, [r3, #16]
 8010852:	69ba      	ldr	r2, [r7, #24]
 8010854:	0151      	lsls	r1, r2, #5
 8010856:	69fa      	ldr	r2, [r7, #28]
 8010858:	440a      	add	r2, r1
 801085a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801085e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8010862:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8010864:	69bb      	ldr	r3, [r7, #24]
 8010866:	015a      	lsls	r2, r3, #5
 8010868:	69fb      	ldr	r3, [r7, #28]
 801086a:	4413      	add	r3, r2
 801086c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010870:	691a      	ldr	r2, [r3, #16]
 8010872:	8afb      	ldrh	r3, [r7, #22]
 8010874:	075b      	lsls	r3, r3, #29
 8010876:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 801087a:	69b9      	ldr	r1, [r7, #24]
 801087c:	0148      	lsls	r0, r1, #5
 801087e:	69f9      	ldr	r1, [r7, #28]
 8010880:	4401      	add	r1, r0
 8010882:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010886:	4313      	orrs	r3, r2
 8010888:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801088a:	69bb      	ldr	r3, [r7, #24]
 801088c:	015a      	lsls	r2, r3, #5
 801088e:	69fb      	ldr	r3, [r7, #28]
 8010890:	4413      	add	r3, r2
 8010892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010896:	691a      	ldr	r2, [r3, #16]
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	691b      	ldr	r3, [r3, #16]
 801089c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80108a0:	69b9      	ldr	r1, [r7, #24]
 80108a2:	0148      	lsls	r0, r1, #5
 80108a4:	69f9      	ldr	r1, [r7, #28]
 80108a6:	4401      	add	r1, r0
 80108a8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80108ac:	4313      	orrs	r3, r2
 80108ae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80108b0:	79fb      	ldrb	r3, [r7, #7]
 80108b2:	2b01      	cmp	r3, #1
 80108b4:	d14b      	bne.n	801094e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	69db      	ldr	r3, [r3, #28]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d009      	beq.n	80108d2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80108be:	69bb      	ldr	r3, [r7, #24]
 80108c0:	015a      	lsls	r2, r3, #5
 80108c2:	69fb      	ldr	r3, [r7, #28]
 80108c4:	4413      	add	r3, r2
 80108c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108ca:	461a      	mov	r2, r3
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	69db      	ldr	r3, [r3, #28]
 80108d0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	791b      	ldrb	r3, [r3, #4]
 80108d6:	2b01      	cmp	r3, #1
 80108d8:	d128      	bne.n	801092c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80108da:	69fb      	ldr	r3, [r7, #28]
 80108dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80108e0:	689b      	ldr	r3, [r3, #8]
 80108e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d110      	bne.n	801090c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80108ea:	69bb      	ldr	r3, [r7, #24]
 80108ec:	015a      	lsls	r2, r3, #5
 80108ee:	69fb      	ldr	r3, [r7, #28]
 80108f0:	4413      	add	r3, r2
 80108f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	69ba      	ldr	r2, [r7, #24]
 80108fa:	0151      	lsls	r1, r2, #5
 80108fc:	69fa      	ldr	r2, [r7, #28]
 80108fe:	440a      	add	r2, r1
 8010900:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010904:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010908:	6013      	str	r3, [r2, #0]
 801090a:	e00f      	b.n	801092c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801090c:	69bb      	ldr	r3, [r7, #24]
 801090e:	015a      	lsls	r2, r3, #5
 8010910:	69fb      	ldr	r3, [r7, #28]
 8010912:	4413      	add	r3, r2
 8010914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	69ba      	ldr	r2, [r7, #24]
 801091c:	0151      	lsls	r1, r2, #5
 801091e:	69fa      	ldr	r2, [r7, #28]
 8010920:	440a      	add	r2, r1
 8010922:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801092a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801092c:	69bb      	ldr	r3, [r7, #24]
 801092e:	015a      	lsls	r2, r3, #5
 8010930:	69fb      	ldr	r3, [r7, #28]
 8010932:	4413      	add	r3, r2
 8010934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	69ba      	ldr	r2, [r7, #24]
 801093c:	0151      	lsls	r1, r2, #5
 801093e:	69fa      	ldr	r2, [r7, #28]
 8010940:	440a      	add	r2, r1
 8010942:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010946:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801094a:	6013      	str	r3, [r2, #0]
 801094c:	e169      	b.n	8010c22 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801094e:	69bb      	ldr	r3, [r7, #24]
 8010950:	015a      	lsls	r2, r3, #5
 8010952:	69fb      	ldr	r3, [r7, #28]
 8010954:	4413      	add	r3, r2
 8010956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	69ba      	ldr	r2, [r7, #24]
 801095e:	0151      	lsls	r1, r2, #5
 8010960:	69fa      	ldr	r2, [r7, #28]
 8010962:	440a      	add	r2, r1
 8010964:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010968:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801096c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	791b      	ldrb	r3, [r3, #4]
 8010972:	2b01      	cmp	r3, #1
 8010974:	d015      	beq.n	80109a2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	691b      	ldr	r3, [r3, #16]
 801097a:	2b00      	cmp	r3, #0
 801097c:	f000 8151 	beq.w	8010c22 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010980:	69fb      	ldr	r3, [r7, #28]
 8010982:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010986:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	781b      	ldrb	r3, [r3, #0]
 801098c:	f003 030f 	and.w	r3, r3, #15
 8010990:	2101      	movs	r1, #1
 8010992:	fa01 f303 	lsl.w	r3, r1, r3
 8010996:	69f9      	ldr	r1, [r7, #28]
 8010998:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801099c:	4313      	orrs	r3, r2
 801099e:	634b      	str	r3, [r1, #52]	@ 0x34
 80109a0:	e13f      	b.n	8010c22 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80109a2:	69fb      	ldr	r3, [r7, #28]
 80109a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80109a8:	689b      	ldr	r3, [r3, #8]
 80109aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d116      	bne.n	80109e0 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80109b2:	69bb      	ldr	r3, [r7, #24]
 80109b4:	015a      	lsls	r2, r3, #5
 80109b6:	69fb      	ldr	r3, [r7, #28]
 80109b8:	4413      	add	r3, r2
 80109ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	69ba      	ldr	r2, [r7, #24]
 80109c2:	0151      	lsls	r1, r2, #5
 80109c4:	69fa      	ldr	r2, [r7, #28]
 80109c6:	440a      	add	r2, r1
 80109c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80109cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80109d0:	6013      	str	r3, [r2, #0]
 80109d2:	e015      	b.n	8010a00 <USB_EPStartXfer+0x310>
 80109d4:	e007ffff 	.word	0xe007ffff
 80109d8:	fff80000 	.word	0xfff80000
 80109dc:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80109e0:	69bb      	ldr	r3, [r7, #24]
 80109e2:	015a      	lsls	r2, r3, #5
 80109e4:	69fb      	ldr	r3, [r7, #28]
 80109e6:	4413      	add	r3, r2
 80109e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	69ba      	ldr	r2, [r7, #24]
 80109f0:	0151      	lsls	r1, r2, #5
 80109f2:	69fa      	ldr	r2, [r7, #28]
 80109f4:	440a      	add	r2, r1
 80109f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80109fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80109fe:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010a00:	68bb      	ldr	r3, [r7, #8]
 8010a02:	68d9      	ldr	r1, [r3, #12]
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	781a      	ldrb	r2, [r3, #0]
 8010a08:	68bb      	ldr	r3, [r7, #8]
 8010a0a:	691b      	ldr	r3, [r3, #16]
 8010a0c:	b298      	uxth	r0, r3
 8010a0e:	79fb      	ldrb	r3, [r7, #7]
 8010a10:	9300      	str	r3, [sp, #0]
 8010a12:	4603      	mov	r3, r0
 8010a14:	68f8      	ldr	r0, [r7, #12]
 8010a16:	f000 f9b9 	bl	8010d8c <USB_WritePacket>
 8010a1a:	e102      	b.n	8010c22 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010a1c:	69bb      	ldr	r3, [r7, #24]
 8010a1e:	015a      	lsls	r2, r3, #5
 8010a20:	69fb      	ldr	r3, [r7, #28]
 8010a22:	4413      	add	r3, r2
 8010a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a28:	691a      	ldr	r2, [r3, #16]
 8010a2a:	69bb      	ldr	r3, [r7, #24]
 8010a2c:	0159      	lsls	r1, r3, #5
 8010a2e:	69fb      	ldr	r3, [r7, #28]
 8010a30:	440b      	add	r3, r1
 8010a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a36:	4619      	mov	r1, r3
 8010a38:	4b7c      	ldr	r3, [pc, #496]	@ (8010c2c <USB_EPStartXfer+0x53c>)
 8010a3a:	4013      	ands	r3, r2
 8010a3c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010a3e:	69bb      	ldr	r3, [r7, #24]
 8010a40:	015a      	lsls	r2, r3, #5
 8010a42:	69fb      	ldr	r3, [r7, #28]
 8010a44:	4413      	add	r3, r2
 8010a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a4a:	691a      	ldr	r2, [r3, #16]
 8010a4c:	69bb      	ldr	r3, [r7, #24]
 8010a4e:	0159      	lsls	r1, r3, #5
 8010a50:	69fb      	ldr	r3, [r7, #28]
 8010a52:	440b      	add	r3, r1
 8010a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a58:	4619      	mov	r1, r3
 8010a5a:	4b75      	ldr	r3, [pc, #468]	@ (8010c30 <USB_EPStartXfer+0x540>)
 8010a5c:	4013      	ands	r3, r2
 8010a5e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8010a60:	69bb      	ldr	r3, [r7, #24]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d12f      	bne.n	8010ac6 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	691b      	ldr	r3, [r3, #16]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d003      	beq.n	8010a76 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8010a6e:	68bb      	ldr	r3, [r7, #8]
 8010a70:	689a      	ldr	r2, [r3, #8]
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8010a76:	68bb      	ldr	r3, [r7, #8]
 8010a78:	689a      	ldr	r2, [r3, #8]
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8010a7e:	69bb      	ldr	r3, [r7, #24]
 8010a80:	015a      	lsls	r2, r3, #5
 8010a82:	69fb      	ldr	r3, [r7, #28]
 8010a84:	4413      	add	r3, r2
 8010a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010a8a:	691a      	ldr	r2, [r3, #16]
 8010a8c:	68bb      	ldr	r3, [r7, #8]
 8010a8e:	6a1b      	ldr	r3, [r3, #32]
 8010a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010a94:	69b9      	ldr	r1, [r7, #24]
 8010a96:	0148      	lsls	r0, r1, #5
 8010a98:	69f9      	ldr	r1, [r7, #28]
 8010a9a:	4401      	add	r1, r0
 8010a9c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010aa0:	4313      	orrs	r3, r2
 8010aa2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010aa4:	69bb      	ldr	r3, [r7, #24]
 8010aa6:	015a      	lsls	r2, r3, #5
 8010aa8:	69fb      	ldr	r3, [r7, #28]
 8010aaa:	4413      	add	r3, r2
 8010aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ab0:	691b      	ldr	r3, [r3, #16]
 8010ab2:	69ba      	ldr	r2, [r7, #24]
 8010ab4:	0151      	lsls	r1, r2, #5
 8010ab6:	69fa      	ldr	r2, [r7, #28]
 8010ab8:	440a      	add	r2, r1
 8010aba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010abe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010ac2:	6113      	str	r3, [r2, #16]
 8010ac4:	e05f      	b.n	8010b86 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8010ac6:	68bb      	ldr	r3, [r7, #8]
 8010ac8:	691b      	ldr	r3, [r3, #16]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d123      	bne.n	8010b16 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010ace:	69bb      	ldr	r3, [r7, #24]
 8010ad0:	015a      	lsls	r2, r3, #5
 8010ad2:	69fb      	ldr	r3, [r7, #28]
 8010ad4:	4413      	add	r3, r2
 8010ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ada:	691a      	ldr	r2, [r3, #16]
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	689b      	ldr	r3, [r3, #8]
 8010ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010ae4:	69b9      	ldr	r1, [r7, #24]
 8010ae6:	0148      	lsls	r0, r1, #5
 8010ae8:	69f9      	ldr	r1, [r7, #28]
 8010aea:	4401      	add	r1, r0
 8010aec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010af0:	4313      	orrs	r3, r2
 8010af2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010af4:	69bb      	ldr	r3, [r7, #24]
 8010af6:	015a      	lsls	r2, r3, #5
 8010af8:	69fb      	ldr	r3, [r7, #28]
 8010afa:	4413      	add	r3, r2
 8010afc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b00:	691b      	ldr	r3, [r3, #16]
 8010b02:	69ba      	ldr	r2, [r7, #24]
 8010b04:	0151      	lsls	r1, r2, #5
 8010b06:	69fa      	ldr	r2, [r7, #28]
 8010b08:	440a      	add	r2, r1
 8010b0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010b0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010b12:	6113      	str	r3, [r2, #16]
 8010b14:	e037      	b.n	8010b86 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	691a      	ldr	r2, [r3, #16]
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	689b      	ldr	r3, [r3, #8]
 8010b1e:	4413      	add	r3, r2
 8010b20:	1e5a      	subs	r2, r3, #1
 8010b22:	68bb      	ldr	r3, [r7, #8]
 8010b24:	689b      	ldr	r3, [r3, #8]
 8010b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b2a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	689b      	ldr	r3, [r3, #8]
 8010b30:	8afa      	ldrh	r2, [r7, #22]
 8010b32:	fb03 f202 	mul.w	r2, r3, r2
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010b3a:	69bb      	ldr	r3, [r7, #24]
 8010b3c:	015a      	lsls	r2, r3, #5
 8010b3e:	69fb      	ldr	r3, [r7, #28]
 8010b40:	4413      	add	r3, r2
 8010b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b46:	691a      	ldr	r2, [r3, #16]
 8010b48:	8afb      	ldrh	r3, [r7, #22]
 8010b4a:	04d9      	lsls	r1, r3, #19
 8010b4c:	4b39      	ldr	r3, [pc, #228]	@ (8010c34 <USB_EPStartXfer+0x544>)
 8010b4e:	400b      	ands	r3, r1
 8010b50:	69b9      	ldr	r1, [r7, #24]
 8010b52:	0148      	lsls	r0, r1, #5
 8010b54:	69f9      	ldr	r1, [r7, #28]
 8010b56:	4401      	add	r1, r0
 8010b58:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010b5c:	4313      	orrs	r3, r2
 8010b5e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8010b60:	69bb      	ldr	r3, [r7, #24]
 8010b62:	015a      	lsls	r2, r3, #5
 8010b64:	69fb      	ldr	r3, [r7, #28]
 8010b66:	4413      	add	r3, r2
 8010b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010b6c:	691a      	ldr	r2, [r3, #16]
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	6a1b      	ldr	r3, [r3, #32]
 8010b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010b76:	69b9      	ldr	r1, [r7, #24]
 8010b78:	0148      	lsls	r0, r1, #5
 8010b7a:	69f9      	ldr	r1, [r7, #28]
 8010b7c:	4401      	add	r1, r0
 8010b7e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010b82:	4313      	orrs	r3, r2
 8010b84:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8010b86:	79fb      	ldrb	r3, [r7, #7]
 8010b88:	2b01      	cmp	r3, #1
 8010b8a:	d10d      	bne.n	8010ba8 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	68db      	ldr	r3, [r3, #12]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d009      	beq.n	8010ba8 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	68d9      	ldr	r1, [r3, #12]
 8010b98:	69bb      	ldr	r3, [r7, #24]
 8010b9a:	015a      	lsls	r2, r3, #5
 8010b9c:	69fb      	ldr	r3, [r7, #28]
 8010b9e:	4413      	add	r3, r2
 8010ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ba4:	460a      	mov	r2, r1
 8010ba6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	791b      	ldrb	r3, [r3, #4]
 8010bac:	2b01      	cmp	r3, #1
 8010bae:	d128      	bne.n	8010c02 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010bb0:	69fb      	ldr	r3, [r7, #28]
 8010bb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010bb6:	689b      	ldr	r3, [r3, #8]
 8010bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d110      	bne.n	8010be2 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010bc0:	69bb      	ldr	r3, [r7, #24]
 8010bc2:	015a      	lsls	r2, r3, #5
 8010bc4:	69fb      	ldr	r3, [r7, #28]
 8010bc6:	4413      	add	r3, r2
 8010bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	69ba      	ldr	r2, [r7, #24]
 8010bd0:	0151      	lsls	r1, r2, #5
 8010bd2:	69fa      	ldr	r2, [r7, #28]
 8010bd4:	440a      	add	r2, r1
 8010bd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010bda:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010bde:	6013      	str	r3, [r2, #0]
 8010be0:	e00f      	b.n	8010c02 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010be2:	69bb      	ldr	r3, [r7, #24]
 8010be4:	015a      	lsls	r2, r3, #5
 8010be6:	69fb      	ldr	r3, [r7, #28]
 8010be8:	4413      	add	r3, r2
 8010bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	69ba      	ldr	r2, [r7, #24]
 8010bf2:	0151      	lsls	r1, r2, #5
 8010bf4:	69fa      	ldr	r2, [r7, #28]
 8010bf6:	440a      	add	r2, r1
 8010bf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010bfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010c00:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010c02:	69bb      	ldr	r3, [r7, #24]
 8010c04:	015a      	lsls	r2, r3, #5
 8010c06:	69fb      	ldr	r3, [r7, #28]
 8010c08:	4413      	add	r3, r2
 8010c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	69ba      	ldr	r2, [r7, #24]
 8010c12:	0151      	lsls	r1, r2, #5
 8010c14:	69fa      	ldr	r2, [r7, #28]
 8010c16:	440a      	add	r2, r1
 8010c18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010c1c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010c20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010c22:	2300      	movs	r3, #0
}
 8010c24:	4618      	mov	r0, r3
 8010c26:	3720      	adds	r7, #32
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}
 8010c2c:	fff80000 	.word	0xfff80000
 8010c30:	e007ffff 	.word	0xe007ffff
 8010c34:	1ff80000 	.word	0x1ff80000

08010c38 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010c38:	b480      	push	{r7}
 8010c3a:	b087      	sub	sp, #28
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
 8010c40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010c42:	2300      	movs	r3, #0
 8010c44:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010c46:	2300      	movs	r3, #0
 8010c48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010c4e:	683b      	ldr	r3, [r7, #0]
 8010c50:	785b      	ldrb	r3, [r3, #1]
 8010c52:	2b01      	cmp	r3, #1
 8010c54:	d14a      	bne.n	8010cec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	781b      	ldrb	r3, [r3, #0]
 8010c5a:	015a      	lsls	r2, r3, #5
 8010c5c:	693b      	ldr	r3, [r7, #16]
 8010c5e:	4413      	add	r3, r2
 8010c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010c6e:	f040 8086 	bne.w	8010d7e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	015a      	lsls	r2, r3, #5
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	4413      	add	r3, r2
 8010c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	683a      	ldr	r2, [r7, #0]
 8010c84:	7812      	ldrb	r2, [r2, #0]
 8010c86:	0151      	lsls	r1, r2, #5
 8010c88:	693a      	ldr	r2, [r7, #16]
 8010c8a:	440a      	add	r2, r1
 8010c8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010c90:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010c94:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	781b      	ldrb	r3, [r3, #0]
 8010c9a:	015a      	lsls	r2, r3, #5
 8010c9c:	693b      	ldr	r3, [r7, #16]
 8010c9e:	4413      	add	r3, r2
 8010ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	683a      	ldr	r2, [r7, #0]
 8010ca8:	7812      	ldrb	r2, [r2, #0]
 8010caa:	0151      	lsls	r1, r2, #5
 8010cac:	693a      	ldr	r2, [r7, #16]
 8010cae:	440a      	add	r2, r1
 8010cb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010cb4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010cb8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	3301      	adds	r3, #1
 8010cbe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8010cc6:	4293      	cmp	r3, r2
 8010cc8:	d902      	bls.n	8010cd0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8010cca:	2301      	movs	r3, #1
 8010ccc:	75fb      	strb	r3, [r7, #23]
          break;
 8010cce:	e056      	b.n	8010d7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	781b      	ldrb	r3, [r3, #0]
 8010cd4:	015a      	lsls	r2, r3, #5
 8010cd6:	693b      	ldr	r3, [r7, #16]
 8010cd8:	4413      	add	r3, r2
 8010cda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010ce4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010ce8:	d0e7      	beq.n	8010cba <USB_EPStopXfer+0x82>
 8010cea:	e048      	b.n	8010d7e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010cec:	683b      	ldr	r3, [r7, #0]
 8010cee:	781b      	ldrb	r3, [r3, #0]
 8010cf0:	015a      	lsls	r2, r3, #5
 8010cf2:	693b      	ldr	r3, [r7, #16]
 8010cf4:	4413      	add	r3, r2
 8010cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010d00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010d04:	d13b      	bne.n	8010d7e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	781b      	ldrb	r3, [r3, #0]
 8010d0a:	015a      	lsls	r2, r3, #5
 8010d0c:	693b      	ldr	r3, [r7, #16]
 8010d0e:	4413      	add	r3, r2
 8010d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	683a      	ldr	r2, [r7, #0]
 8010d18:	7812      	ldrb	r2, [r2, #0]
 8010d1a:	0151      	lsls	r1, r2, #5
 8010d1c:	693a      	ldr	r2, [r7, #16]
 8010d1e:	440a      	add	r2, r1
 8010d20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010d24:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010d28:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	781b      	ldrb	r3, [r3, #0]
 8010d2e:	015a      	lsls	r2, r3, #5
 8010d30:	693b      	ldr	r3, [r7, #16]
 8010d32:	4413      	add	r3, r2
 8010d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	683a      	ldr	r2, [r7, #0]
 8010d3c:	7812      	ldrb	r2, [r2, #0]
 8010d3e:	0151      	lsls	r1, r2, #5
 8010d40:	693a      	ldr	r2, [r7, #16]
 8010d42:	440a      	add	r2, r1
 8010d44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010d48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010d4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	3301      	adds	r3, #1
 8010d52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	f242 7210 	movw	r2, #10000	@ 0x2710
 8010d5a:	4293      	cmp	r3, r2
 8010d5c:	d902      	bls.n	8010d64 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8010d5e:	2301      	movs	r3, #1
 8010d60:	75fb      	strb	r3, [r7, #23]
          break;
 8010d62:	e00c      	b.n	8010d7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	781b      	ldrb	r3, [r3, #0]
 8010d68:	015a      	lsls	r2, r3, #5
 8010d6a:	693b      	ldr	r3, [r7, #16]
 8010d6c:	4413      	add	r3, r2
 8010d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010d78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010d7c:	d0e7      	beq.n	8010d4e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8010d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	371c      	adds	r7, #28
 8010d84:	46bd      	mov	sp, r7
 8010d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8a:	4770      	bx	lr

08010d8c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010d8c:	b480      	push	{r7}
 8010d8e:	b089      	sub	sp, #36	@ 0x24
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	60f8      	str	r0, [r7, #12]
 8010d94:	60b9      	str	r1, [r7, #8]
 8010d96:	4611      	mov	r1, r2
 8010d98:	461a      	mov	r2, r3
 8010d9a:	460b      	mov	r3, r1
 8010d9c:	71fb      	strb	r3, [r7, #7]
 8010d9e:	4613      	mov	r3, r2
 8010da0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8010daa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d123      	bne.n	8010dfa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010db2:	88bb      	ldrh	r3, [r7, #4]
 8010db4:	3303      	adds	r3, #3
 8010db6:	089b      	lsrs	r3, r3, #2
 8010db8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010dba:	2300      	movs	r3, #0
 8010dbc:	61bb      	str	r3, [r7, #24]
 8010dbe:	e018      	b.n	8010df2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010dc0:	79fb      	ldrb	r3, [r7, #7]
 8010dc2:	031a      	lsls	r2, r3, #12
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	4413      	add	r3, r2
 8010dc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010dcc:	461a      	mov	r2, r3
 8010dce:	69fb      	ldr	r3, [r7, #28]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010dd4:	69fb      	ldr	r3, [r7, #28]
 8010dd6:	3301      	adds	r3, #1
 8010dd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010dda:	69fb      	ldr	r3, [r7, #28]
 8010ddc:	3301      	adds	r3, #1
 8010dde:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010de0:	69fb      	ldr	r3, [r7, #28]
 8010de2:	3301      	adds	r3, #1
 8010de4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010de6:	69fb      	ldr	r3, [r7, #28]
 8010de8:	3301      	adds	r3, #1
 8010dea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010dec:	69bb      	ldr	r3, [r7, #24]
 8010dee:	3301      	adds	r3, #1
 8010df0:	61bb      	str	r3, [r7, #24]
 8010df2:	69ba      	ldr	r2, [r7, #24]
 8010df4:	693b      	ldr	r3, [r7, #16]
 8010df6:	429a      	cmp	r2, r3
 8010df8:	d3e2      	bcc.n	8010dc0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010dfa:	2300      	movs	r3, #0
}
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	3724      	adds	r7, #36	@ 0x24
 8010e00:	46bd      	mov	sp, r7
 8010e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e06:	4770      	bx	lr

08010e08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010e08:	b480      	push	{r7}
 8010e0a:	b08b      	sub	sp, #44	@ 0x2c
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	60f8      	str	r0, [r7, #12]
 8010e10:	60b9      	str	r1, [r7, #8]
 8010e12:	4613      	mov	r3, r2
 8010e14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010e1e:	88fb      	ldrh	r3, [r7, #6]
 8010e20:	089b      	lsrs	r3, r3, #2
 8010e22:	b29b      	uxth	r3, r3
 8010e24:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010e26:	88fb      	ldrh	r3, [r7, #6]
 8010e28:	f003 0303 	and.w	r3, r3, #3
 8010e2c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010e2e:	2300      	movs	r3, #0
 8010e30:	623b      	str	r3, [r7, #32]
 8010e32:	e014      	b.n	8010e5e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010e34:	69bb      	ldr	r3, [r7, #24]
 8010e36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010e3a:	681a      	ldr	r2, [r3, #0]
 8010e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e3e:	601a      	str	r2, [r3, #0]
    pDest++;
 8010e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e42:	3301      	adds	r3, #1
 8010e44:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e48:	3301      	adds	r3, #1
 8010e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e4e:	3301      	adds	r3, #1
 8010e50:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e54:	3301      	adds	r3, #1
 8010e56:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8010e58:	6a3b      	ldr	r3, [r7, #32]
 8010e5a:	3301      	adds	r3, #1
 8010e5c:	623b      	str	r3, [r7, #32]
 8010e5e:	6a3a      	ldr	r2, [r7, #32]
 8010e60:	697b      	ldr	r3, [r7, #20]
 8010e62:	429a      	cmp	r2, r3
 8010e64:	d3e6      	bcc.n	8010e34 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010e66:	8bfb      	ldrh	r3, [r7, #30]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d01e      	beq.n	8010eaa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010e70:	69bb      	ldr	r3, [r7, #24]
 8010e72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010e76:	461a      	mov	r2, r3
 8010e78:	f107 0310 	add.w	r3, r7, #16
 8010e7c:	6812      	ldr	r2, [r2, #0]
 8010e7e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010e80:	693a      	ldr	r2, [r7, #16]
 8010e82:	6a3b      	ldr	r3, [r7, #32]
 8010e84:	b2db      	uxtb	r3, r3
 8010e86:	00db      	lsls	r3, r3, #3
 8010e88:	fa22 f303 	lsr.w	r3, r2, r3
 8010e8c:	b2da      	uxtb	r2, r3
 8010e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e90:	701a      	strb	r2, [r3, #0]
      i++;
 8010e92:	6a3b      	ldr	r3, [r7, #32]
 8010e94:	3301      	adds	r3, #1
 8010e96:	623b      	str	r3, [r7, #32]
      pDest++;
 8010e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e9a:	3301      	adds	r3, #1
 8010e9c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8010e9e:	8bfb      	ldrh	r3, [r7, #30]
 8010ea0:	3b01      	subs	r3, #1
 8010ea2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010ea4:	8bfb      	ldrh	r3, [r7, #30]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d1ea      	bne.n	8010e80 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	372c      	adds	r7, #44	@ 0x2c
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb6:	4770      	bx	lr

08010eb8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	b085      	sub	sp, #20
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
 8010ec0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	781b      	ldrb	r3, [r3, #0]
 8010eca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	785b      	ldrb	r3, [r3, #1]
 8010ed0:	2b01      	cmp	r3, #1
 8010ed2:	d12c      	bne.n	8010f2e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010ed4:	68bb      	ldr	r3, [r7, #8]
 8010ed6:	015a      	lsls	r2, r3, #5
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	4413      	add	r3, r2
 8010edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	db12      	blt.n	8010f0c <USB_EPSetStall+0x54>
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d00f      	beq.n	8010f0c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	015a      	lsls	r2, r3, #5
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	4413      	add	r3, r2
 8010ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	68ba      	ldr	r2, [r7, #8]
 8010efc:	0151      	lsls	r1, r2, #5
 8010efe:	68fa      	ldr	r2, [r7, #12]
 8010f00:	440a      	add	r2, r1
 8010f02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010f06:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010f0a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	015a      	lsls	r2, r3, #5
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	4413      	add	r3, r2
 8010f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	68ba      	ldr	r2, [r7, #8]
 8010f1c:	0151      	lsls	r1, r2, #5
 8010f1e:	68fa      	ldr	r2, [r7, #12]
 8010f20:	440a      	add	r2, r1
 8010f22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010f26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010f2a:	6013      	str	r3, [r2, #0]
 8010f2c:	e02b      	b.n	8010f86 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	015a      	lsls	r2, r3, #5
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	4413      	add	r3, r2
 8010f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	db12      	blt.n	8010f66 <USB_EPSetStall+0xae>
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d00f      	beq.n	8010f66 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	015a      	lsls	r2, r3, #5
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	4413      	add	r3, r2
 8010f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	68ba      	ldr	r2, [r7, #8]
 8010f56:	0151      	lsls	r1, r2, #5
 8010f58:	68fa      	ldr	r2, [r7, #12]
 8010f5a:	440a      	add	r2, r1
 8010f5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010f60:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010f64:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	015a      	lsls	r2, r3, #5
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	4413      	add	r3, r2
 8010f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	68ba      	ldr	r2, [r7, #8]
 8010f76:	0151      	lsls	r1, r2, #5
 8010f78:	68fa      	ldr	r2, [r7, #12]
 8010f7a:	440a      	add	r2, r1
 8010f7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010f80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010f84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010f86:	2300      	movs	r3, #0
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	3714      	adds	r7, #20
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f92:	4770      	bx	lr

08010f94 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010f94:	b480      	push	{r7}
 8010f96:	b085      	sub	sp, #20
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
 8010f9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	781b      	ldrb	r3, [r3, #0]
 8010fa6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	785b      	ldrb	r3, [r3, #1]
 8010fac:	2b01      	cmp	r3, #1
 8010fae:	d128      	bne.n	8011002 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	015a      	lsls	r2, r3, #5
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	4413      	add	r3, r2
 8010fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	68ba      	ldr	r2, [r7, #8]
 8010fc0:	0151      	lsls	r1, r2, #5
 8010fc2:	68fa      	ldr	r2, [r7, #12]
 8010fc4:	440a      	add	r2, r1
 8010fc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010fca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010fce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	791b      	ldrb	r3, [r3, #4]
 8010fd4:	2b03      	cmp	r3, #3
 8010fd6:	d003      	beq.n	8010fe0 <USB_EPClearStall+0x4c>
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	791b      	ldrb	r3, [r3, #4]
 8010fdc:	2b02      	cmp	r3, #2
 8010fde:	d138      	bne.n	8011052 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	015a      	lsls	r2, r3, #5
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	4413      	add	r3, r2
 8010fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	68ba      	ldr	r2, [r7, #8]
 8010ff0:	0151      	lsls	r1, r2, #5
 8010ff2:	68fa      	ldr	r2, [r7, #12]
 8010ff4:	440a      	add	r2, r1
 8010ff6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010ffa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010ffe:	6013      	str	r3, [r2, #0]
 8011000:	e027      	b.n	8011052 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011002:	68bb      	ldr	r3, [r7, #8]
 8011004:	015a      	lsls	r2, r3, #5
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	4413      	add	r3, r2
 801100a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	68ba      	ldr	r2, [r7, #8]
 8011012:	0151      	lsls	r1, r2, #5
 8011014:	68fa      	ldr	r2, [r7, #12]
 8011016:	440a      	add	r2, r1
 8011018:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801101c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011020:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	791b      	ldrb	r3, [r3, #4]
 8011026:	2b03      	cmp	r3, #3
 8011028:	d003      	beq.n	8011032 <USB_EPClearStall+0x9e>
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	791b      	ldrb	r3, [r3, #4]
 801102e:	2b02      	cmp	r3, #2
 8011030:	d10f      	bne.n	8011052 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	015a      	lsls	r2, r3, #5
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	4413      	add	r3, r2
 801103a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	68ba      	ldr	r2, [r7, #8]
 8011042:	0151      	lsls	r1, r2, #5
 8011044:	68fa      	ldr	r2, [r7, #12]
 8011046:	440a      	add	r2, r1
 8011048:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801104c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011050:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011052:	2300      	movs	r3, #0
}
 8011054:	4618      	mov	r0, r3
 8011056:	3714      	adds	r7, #20
 8011058:	46bd      	mov	sp, r7
 801105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105e:	4770      	bx	lr

08011060 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011060:	b480      	push	{r7}
 8011062:	b085      	sub	sp, #20
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
 8011068:	460b      	mov	r3, r1
 801106a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	68fa      	ldr	r2, [r7, #12]
 801107a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801107e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8011082:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801108a:	681a      	ldr	r2, [r3, #0]
 801108c:	78fb      	ldrb	r3, [r7, #3]
 801108e:	011b      	lsls	r3, r3, #4
 8011090:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8011094:	68f9      	ldr	r1, [r7, #12]
 8011096:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801109a:	4313      	orrs	r3, r2
 801109c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801109e:	2300      	movs	r3, #0
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	3714      	adds	r7, #20
 80110a4:	46bd      	mov	sp, r7
 80110a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110aa:	4770      	bx	lr

080110ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80110ac:	b480      	push	{r7}
 80110ae:	b085      	sub	sp, #20
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	68fa      	ldr	r2, [r7, #12]
 80110c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80110c6:	f023 0303 	bic.w	r3, r3, #3
 80110ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80110d2:	685b      	ldr	r3, [r3, #4]
 80110d4:	68fa      	ldr	r2, [r7, #12]
 80110d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80110da:	f023 0302 	bic.w	r3, r3, #2
 80110de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80110e0:	2300      	movs	r3, #0
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3714      	adds	r7, #20
 80110e6:	46bd      	mov	sp, r7
 80110e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ec:	4770      	bx	lr

080110ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80110ee:	b480      	push	{r7}
 80110f0:	b085      	sub	sp, #20
 80110f2:	af00      	add	r7, sp, #0
 80110f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	68fa      	ldr	r2, [r7, #12]
 8011104:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011108:	f023 0303 	bic.w	r3, r3, #3
 801110c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011114:	685b      	ldr	r3, [r3, #4]
 8011116:	68fa      	ldr	r2, [r7, #12]
 8011118:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801111c:	f043 0302 	orr.w	r3, r3, #2
 8011120:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011122:	2300      	movs	r3, #0
}
 8011124:	4618      	mov	r0, r3
 8011126:	3714      	adds	r7, #20
 8011128:	46bd      	mov	sp, r7
 801112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112e:	4770      	bx	lr

08011130 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8011130:	b480      	push	{r7}
 8011132:	b085      	sub	sp, #20
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	695b      	ldr	r3, [r3, #20]
 801113c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	699b      	ldr	r3, [r3, #24]
 8011142:	68fa      	ldr	r2, [r7, #12]
 8011144:	4013      	ands	r3, r2
 8011146:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011148:	68fb      	ldr	r3, [r7, #12]
}
 801114a:	4618      	mov	r0, r3
 801114c:	3714      	adds	r7, #20
 801114e:	46bd      	mov	sp, r7
 8011150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011154:	4770      	bx	lr

08011156 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011156:	b480      	push	{r7}
 8011158:	b085      	sub	sp, #20
 801115a:	af00      	add	r7, sp, #0
 801115c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011168:	699b      	ldr	r3, [r3, #24]
 801116a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011172:	69db      	ldr	r3, [r3, #28]
 8011174:	68ba      	ldr	r2, [r7, #8]
 8011176:	4013      	ands	r3, r2
 8011178:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801117a:	68bb      	ldr	r3, [r7, #8]
 801117c:	0c1b      	lsrs	r3, r3, #16
}
 801117e:	4618      	mov	r0, r3
 8011180:	3714      	adds	r7, #20
 8011182:	46bd      	mov	sp, r7
 8011184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011188:	4770      	bx	lr

0801118a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801118a:	b480      	push	{r7}
 801118c:	b085      	sub	sp, #20
 801118e:	af00      	add	r7, sp, #0
 8011190:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801119c:	699b      	ldr	r3, [r3, #24]
 801119e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80111a6:	69db      	ldr	r3, [r3, #28]
 80111a8:	68ba      	ldr	r2, [r7, #8]
 80111aa:	4013      	ands	r3, r2
 80111ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80111ae:	68bb      	ldr	r3, [r7, #8]
 80111b0:	b29b      	uxth	r3, r3
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3714      	adds	r7, #20
 80111b6:	46bd      	mov	sp, r7
 80111b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111bc:	4770      	bx	lr

080111be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80111be:	b480      	push	{r7}
 80111c0:	b085      	sub	sp, #20
 80111c2:	af00      	add	r7, sp, #0
 80111c4:	6078      	str	r0, [r7, #4]
 80111c6:	460b      	mov	r3, r1
 80111c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80111ce:	78fb      	ldrb	r3, [r7, #3]
 80111d0:	015a      	lsls	r2, r3, #5
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	4413      	add	r3, r2
 80111d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111da:	689b      	ldr	r3, [r3, #8]
 80111dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80111e4:	695b      	ldr	r3, [r3, #20]
 80111e6:	68ba      	ldr	r2, [r7, #8]
 80111e8:	4013      	ands	r3, r2
 80111ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80111ec:	68bb      	ldr	r3, [r7, #8]
}
 80111ee:	4618      	mov	r0, r3
 80111f0:	3714      	adds	r7, #20
 80111f2:	46bd      	mov	sp, r7
 80111f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f8:	4770      	bx	lr

080111fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80111fa:	b480      	push	{r7}
 80111fc:	b087      	sub	sp, #28
 80111fe:	af00      	add	r7, sp, #0
 8011200:	6078      	str	r0, [r7, #4]
 8011202:	460b      	mov	r3, r1
 8011204:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011210:	691b      	ldr	r3, [r3, #16]
 8011212:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011214:	697b      	ldr	r3, [r7, #20]
 8011216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801121a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801121c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801121e:	78fb      	ldrb	r3, [r7, #3]
 8011220:	f003 030f 	and.w	r3, r3, #15
 8011224:	68fa      	ldr	r2, [r7, #12]
 8011226:	fa22 f303 	lsr.w	r3, r2, r3
 801122a:	01db      	lsls	r3, r3, #7
 801122c:	b2db      	uxtb	r3, r3
 801122e:	693a      	ldr	r2, [r7, #16]
 8011230:	4313      	orrs	r3, r2
 8011232:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011234:	78fb      	ldrb	r3, [r7, #3]
 8011236:	015a      	lsls	r2, r3, #5
 8011238:	697b      	ldr	r3, [r7, #20]
 801123a:	4413      	add	r3, r2
 801123c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011240:	689b      	ldr	r3, [r3, #8]
 8011242:	693a      	ldr	r2, [r7, #16]
 8011244:	4013      	ands	r3, r2
 8011246:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011248:	68bb      	ldr	r3, [r7, #8]
}
 801124a:	4618      	mov	r0, r3
 801124c:	371c      	adds	r7, #28
 801124e:	46bd      	mov	sp, r7
 8011250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011254:	4770      	bx	lr

08011256 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011256:	b480      	push	{r7}
 8011258:	b083      	sub	sp, #12
 801125a:	af00      	add	r7, sp, #0
 801125c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	695b      	ldr	r3, [r3, #20]
 8011262:	f003 0301 	and.w	r3, r3, #1
}
 8011266:	4618      	mov	r0, r3
 8011268:	370c      	adds	r7, #12
 801126a:	46bd      	mov	sp, r7
 801126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011270:	4770      	bx	lr
	...

08011274 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8011274:	b480      	push	{r7}
 8011276:	b085      	sub	sp, #20
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011286:	681a      	ldr	r2, [r3, #0]
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801128e:	4619      	mov	r1, r3
 8011290:	4b09      	ldr	r3, [pc, #36]	@ (80112b8 <USB_ActivateSetup+0x44>)
 8011292:	4013      	ands	r3, r2
 8011294:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801129c:	685b      	ldr	r3, [r3, #4]
 801129e:	68fa      	ldr	r2, [r7, #12]
 80112a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80112a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80112a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80112aa:	2300      	movs	r3, #0
}
 80112ac:	4618      	mov	r0, r3
 80112ae:	3714      	adds	r7, #20
 80112b0:	46bd      	mov	sp, r7
 80112b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b6:	4770      	bx	lr
 80112b8:	fffff800 	.word	0xfffff800

080112bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80112bc:	b480      	push	{r7}
 80112be:	b087      	sub	sp, #28
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	60f8      	str	r0, [r7, #12]
 80112c4:	460b      	mov	r3, r1
 80112c6:	607a      	str	r2, [r7, #4]
 80112c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	333c      	adds	r3, #60	@ 0x3c
 80112d2:	3304      	adds	r3, #4
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80112d8:	693b      	ldr	r3, [r7, #16]
 80112da:	4a26      	ldr	r2, [pc, #152]	@ (8011374 <USB_EP0_OutStart+0xb8>)
 80112dc:	4293      	cmp	r3, r2
 80112de:	d90a      	bls.n	80112f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80112ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80112f0:	d101      	bne.n	80112f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80112f2:	2300      	movs	r3, #0
 80112f4:	e037      	b.n	8011366 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112fc:	461a      	mov	r2, r3
 80112fe:	2300      	movs	r3, #0
 8011300:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011308:	691b      	ldr	r3, [r3, #16]
 801130a:	697a      	ldr	r2, [r7, #20]
 801130c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011310:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011314:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011316:	697b      	ldr	r3, [r7, #20]
 8011318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801131c:	691b      	ldr	r3, [r3, #16]
 801131e:	697a      	ldr	r2, [r7, #20]
 8011320:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011324:	f043 0318 	orr.w	r3, r3, #24
 8011328:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801132a:	697b      	ldr	r3, [r7, #20]
 801132c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011330:	691b      	ldr	r3, [r3, #16]
 8011332:	697a      	ldr	r2, [r7, #20]
 8011334:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011338:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 801133c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801133e:	7afb      	ldrb	r3, [r7, #11]
 8011340:	2b01      	cmp	r3, #1
 8011342:	d10f      	bne.n	8011364 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801134a:	461a      	mov	r2, r3
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8011350:	697b      	ldr	r3, [r7, #20]
 8011352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	697a      	ldr	r2, [r7, #20]
 801135a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801135e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8011362:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011364:	2300      	movs	r3, #0
}
 8011366:	4618      	mov	r0, r3
 8011368:	371c      	adds	r7, #28
 801136a:	46bd      	mov	sp, r7
 801136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011370:	4770      	bx	lr
 8011372:	bf00      	nop
 8011374:	4f54300a 	.word	0x4f54300a

08011378 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011378:	b480      	push	{r7}
 801137a:	b085      	sub	sp, #20
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011380:	2300      	movs	r3, #0
 8011382:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	3301      	adds	r3, #1
 8011388:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011390:	d901      	bls.n	8011396 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011392:	2303      	movs	r3, #3
 8011394:	e01b      	b.n	80113ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	691b      	ldr	r3, [r3, #16]
 801139a:	2b00      	cmp	r3, #0
 801139c:	daf2      	bge.n	8011384 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801139e:	2300      	movs	r3, #0
 80113a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	691b      	ldr	r3, [r3, #16]
 80113a6:	f043 0201 	orr.w	r2, r3, #1
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	3301      	adds	r3, #1
 80113b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80113ba:	d901      	bls.n	80113c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80113bc:	2303      	movs	r3, #3
 80113be:	e006      	b.n	80113ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	691b      	ldr	r3, [r3, #16]
 80113c4:	f003 0301 	and.w	r3, r3, #1
 80113c8:	2b01      	cmp	r3, #1
 80113ca:	d0f0      	beq.n	80113ae <USB_CoreReset+0x36>

  return HAL_OK;
 80113cc:	2300      	movs	r3, #0
}
 80113ce:	4618      	mov	r0, r3
 80113d0:	3714      	adds	r7, #20
 80113d2:	46bd      	mov	sp, r7
 80113d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d8:	4770      	bx	lr
	...

080113dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b084      	sub	sp, #16
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	460b      	mov	r3, r1
 80113e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80113e8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80113ec:	f002 fd12 	bl	8013e14 <USBD_static_malloc>
 80113f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d109      	bne.n	801140c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	32b0      	adds	r2, #176	@ 0xb0
 8011402:	2100      	movs	r1, #0
 8011404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011408:	2302      	movs	r3, #2
 801140a:	e0d4      	b.n	80115b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801140c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8011410:	2100      	movs	r1, #0
 8011412:	68f8      	ldr	r0, [r7, #12]
 8011414:	f002 fdd6 	bl	8013fc4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	32b0      	adds	r2, #176	@ 0xb0
 8011422:	68f9      	ldr	r1, [r7, #12]
 8011424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	32b0      	adds	r2, #176	@ 0xb0
 8011432:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	7c1b      	ldrb	r3, [r3, #16]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d138      	bne.n	80114b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011444:	4b5e      	ldr	r3, [pc, #376]	@ (80115c0 <USBD_CDC_Init+0x1e4>)
 8011446:	7819      	ldrb	r1, [r3, #0]
 8011448:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801144c:	2202      	movs	r2, #2
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f002 fbbd 	bl	8013bce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011454:	4b5a      	ldr	r3, [pc, #360]	@ (80115c0 <USBD_CDC_Init+0x1e4>)
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	f003 020f 	and.w	r2, r3, #15
 801145c:	6879      	ldr	r1, [r7, #4]
 801145e:	4613      	mov	r3, r2
 8011460:	009b      	lsls	r3, r3, #2
 8011462:	4413      	add	r3, r2
 8011464:	009b      	lsls	r3, r3, #2
 8011466:	440b      	add	r3, r1
 8011468:	3324      	adds	r3, #36	@ 0x24
 801146a:	2201      	movs	r2, #1
 801146c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801146e:	4b55      	ldr	r3, [pc, #340]	@ (80115c4 <USBD_CDC_Init+0x1e8>)
 8011470:	7819      	ldrb	r1, [r3, #0]
 8011472:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011476:	2202      	movs	r2, #2
 8011478:	6878      	ldr	r0, [r7, #4]
 801147a:	f002 fba8 	bl	8013bce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801147e:	4b51      	ldr	r3, [pc, #324]	@ (80115c4 <USBD_CDC_Init+0x1e8>)
 8011480:	781b      	ldrb	r3, [r3, #0]
 8011482:	f003 020f 	and.w	r2, r3, #15
 8011486:	6879      	ldr	r1, [r7, #4]
 8011488:	4613      	mov	r3, r2
 801148a:	009b      	lsls	r3, r3, #2
 801148c:	4413      	add	r3, r2
 801148e:	009b      	lsls	r3, r3, #2
 8011490:	440b      	add	r3, r1
 8011492:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011496:	2201      	movs	r2, #1
 8011498:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801149a:	4b4b      	ldr	r3, [pc, #300]	@ (80115c8 <USBD_CDC_Init+0x1ec>)
 801149c:	781b      	ldrb	r3, [r3, #0]
 801149e:	f003 020f 	and.w	r2, r3, #15
 80114a2:	6879      	ldr	r1, [r7, #4]
 80114a4:	4613      	mov	r3, r2
 80114a6:	009b      	lsls	r3, r3, #2
 80114a8:	4413      	add	r3, r2
 80114aa:	009b      	lsls	r3, r3, #2
 80114ac:	440b      	add	r3, r1
 80114ae:	3326      	adds	r3, #38	@ 0x26
 80114b0:	2210      	movs	r2, #16
 80114b2:	801a      	strh	r2, [r3, #0]
 80114b4:	e035      	b.n	8011522 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80114b6:	4b42      	ldr	r3, [pc, #264]	@ (80115c0 <USBD_CDC_Init+0x1e4>)
 80114b8:	7819      	ldrb	r1, [r3, #0]
 80114ba:	2340      	movs	r3, #64	@ 0x40
 80114bc:	2202      	movs	r2, #2
 80114be:	6878      	ldr	r0, [r7, #4]
 80114c0:	f002 fb85 	bl	8013bce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80114c4:	4b3e      	ldr	r3, [pc, #248]	@ (80115c0 <USBD_CDC_Init+0x1e4>)
 80114c6:	781b      	ldrb	r3, [r3, #0]
 80114c8:	f003 020f 	and.w	r2, r3, #15
 80114cc:	6879      	ldr	r1, [r7, #4]
 80114ce:	4613      	mov	r3, r2
 80114d0:	009b      	lsls	r3, r3, #2
 80114d2:	4413      	add	r3, r2
 80114d4:	009b      	lsls	r3, r3, #2
 80114d6:	440b      	add	r3, r1
 80114d8:	3324      	adds	r3, #36	@ 0x24
 80114da:	2201      	movs	r2, #1
 80114dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80114de:	4b39      	ldr	r3, [pc, #228]	@ (80115c4 <USBD_CDC_Init+0x1e8>)
 80114e0:	7819      	ldrb	r1, [r3, #0]
 80114e2:	2340      	movs	r3, #64	@ 0x40
 80114e4:	2202      	movs	r2, #2
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f002 fb71 	bl	8013bce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80114ec:	4b35      	ldr	r3, [pc, #212]	@ (80115c4 <USBD_CDC_Init+0x1e8>)
 80114ee:	781b      	ldrb	r3, [r3, #0]
 80114f0:	f003 020f 	and.w	r2, r3, #15
 80114f4:	6879      	ldr	r1, [r7, #4]
 80114f6:	4613      	mov	r3, r2
 80114f8:	009b      	lsls	r3, r3, #2
 80114fa:	4413      	add	r3, r2
 80114fc:	009b      	lsls	r3, r3, #2
 80114fe:	440b      	add	r3, r1
 8011500:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011504:	2201      	movs	r2, #1
 8011506:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011508:	4b2f      	ldr	r3, [pc, #188]	@ (80115c8 <USBD_CDC_Init+0x1ec>)
 801150a:	781b      	ldrb	r3, [r3, #0]
 801150c:	f003 020f 	and.w	r2, r3, #15
 8011510:	6879      	ldr	r1, [r7, #4]
 8011512:	4613      	mov	r3, r2
 8011514:	009b      	lsls	r3, r3, #2
 8011516:	4413      	add	r3, r2
 8011518:	009b      	lsls	r3, r3, #2
 801151a:	440b      	add	r3, r1
 801151c:	3326      	adds	r3, #38	@ 0x26
 801151e:	2210      	movs	r2, #16
 8011520:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011522:	4b29      	ldr	r3, [pc, #164]	@ (80115c8 <USBD_CDC_Init+0x1ec>)
 8011524:	7819      	ldrb	r1, [r3, #0]
 8011526:	2308      	movs	r3, #8
 8011528:	2203      	movs	r2, #3
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f002 fb4f 	bl	8013bce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8011530:	4b25      	ldr	r3, [pc, #148]	@ (80115c8 <USBD_CDC_Init+0x1ec>)
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	f003 020f 	and.w	r2, r3, #15
 8011538:	6879      	ldr	r1, [r7, #4]
 801153a:	4613      	mov	r3, r2
 801153c:	009b      	lsls	r3, r3, #2
 801153e:	4413      	add	r3, r2
 8011540:	009b      	lsls	r3, r3, #2
 8011542:	440b      	add	r3, r1
 8011544:	3324      	adds	r3, #36	@ 0x24
 8011546:	2201      	movs	r2, #1
 8011548:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	2200      	movs	r2, #0
 801154e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011558:	687a      	ldr	r2, [r7, #4]
 801155a:	33b0      	adds	r3, #176	@ 0xb0
 801155c:	009b      	lsls	r3, r3, #2
 801155e:	4413      	add	r3, r2
 8011560:	685b      	ldr	r3, [r3, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	2200      	movs	r2, #0
 801156a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	2200      	movs	r2, #0
 8011572:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 801157c:	2b00      	cmp	r3, #0
 801157e:	d101      	bne.n	8011584 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8011580:	2302      	movs	r3, #2
 8011582:	e018      	b.n	80115b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	7c1b      	ldrb	r3, [r3, #16]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d10a      	bne.n	80115a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801158c:	4b0d      	ldr	r3, [pc, #52]	@ (80115c4 <USBD_CDC_Init+0x1e8>)
 801158e:	7819      	ldrb	r1, [r3, #0]
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011596:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f002 fc06 	bl	8013dac <USBD_LL_PrepareReceive>
 80115a0:	e008      	b.n	80115b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80115a2:	4b08      	ldr	r3, [pc, #32]	@ (80115c4 <USBD_CDC_Init+0x1e8>)
 80115a4:	7819      	ldrb	r1, [r3, #0]
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80115ac:	2340      	movs	r3, #64	@ 0x40
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	f002 fbfc 	bl	8013dac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80115b4:	2300      	movs	r3, #0
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	3710      	adds	r7, #16
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}
 80115be:	bf00      	nop
 80115c0:	24000097 	.word	0x24000097
 80115c4:	24000098 	.word	0x24000098
 80115c8:	24000099 	.word	0x24000099

080115cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b082      	sub	sp, #8
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
 80115d4:	460b      	mov	r3, r1
 80115d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80115d8:	4b3a      	ldr	r3, [pc, #232]	@ (80116c4 <USBD_CDC_DeInit+0xf8>)
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	4619      	mov	r1, r3
 80115de:	6878      	ldr	r0, [r7, #4]
 80115e0:	f002 fb1b 	bl	8013c1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80115e4:	4b37      	ldr	r3, [pc, #220]	@ (80116c4 <USBD_CDC_DeInit+0xf8>)
 80115e6:	781b      	ldrb	r3, [r3, #0]
 80115e8:	f003 020f 	and.w	r2, r3, #15
 80115ec:	6879      	ldr	r1, [r7, #4]
 80115ee:	4613      	mov	r3, r2
 80115f0:	009b      	lsls	r3, r3, #2
 80115f2:	4413      	add	r3, r2
 80115f4:	009b      	lsls	r3, r3, #2
 80115f6:	440b      	add	r3, r1
 80115f8:	3324      	adds	r3, #36	@ 0x24
 80115fa:	2200      	movs	r2, #0
 80115fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80115fe:	4b32      	ldr	r3, [pc, #200]	@ (80116c8 <USBD_CDC_DeInit+0xfc>)
 8011600:	781b      	ldrb	r3, [r3, #0]
 8011602:	4619      	mov	r1, r3
 8011604:	6878      	ldr	r0, [r7, #4]
 8011606:	f002 fb08 	bl	8013c1a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801160a:	4b2f      	ldr	r3, [pc, #188]	@ (80116c8 <USBD_CDC_DeInit+0xfc>)
 801160c:	781b      	ldrb	r3, [r3, #0]
 801160e:	f003 020f 	and.w	r2, r3, #15
 8011612:	6879      	ldr	r1, [r7, #4]
 8011614:	4613      	mov	r3, r2
 8011616:	009b      	lsls	r3, r3, #2
 8011618:	4413      	add	r3, r2
 801161a:	009b      	lsls	r3, r3, #2
 801161c:	440b      	add	r3, r1
 801161e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011622:	2200      	movs	r2, #0
 8011624:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8011626:	4b29      	ldr	r3, [pc, #164]	@ (80116cc <USBD_CDC_DeInit+0x100>)
 8011628:	781b      	ldrb	r3, [r3, #0]
 801162a:	4619      	mov	r1, r3
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f002 faf4 	bl	8013c1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8011632:	4b26      	ldr	r3, [pc, #152]	@ (80116cc <USBD_CDC_DeInit+0x100>)
 8011634:	781b      	ldrb	r3, [r3, #0]
 8011636:	f003 020f 	and.w	r2, r3, #15
 801163a:	6879      	ldr	r1, [r7, #4]
 801163c:	4613      	mov	r3, r2
 801163e:	009b      	lsls	r3, r3, #2
 8011640:	4413      	add	r3, r2
 8011642:	009b      	lsls	r3, r3, #2
 8011644:	440b      	add	r3, r1
 8011646:	3324      	adds	r3, #36	@ 0x24
 8011648:	2200      	movs	r2, #0
 801164a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801164c:	4b1f      	ldr	r3, [pc, #124]	@ (80116cc <USBD_CDC_DeInit+0x100>)
 801164e:	781b      	ldrb	r3, [r3, #0]
 8011650:	f003 020f 	and.w	r2, r3, #15
 8011654:	6879      	ldr	r1, [r7, #4]
 8011656:	4613      	mov	r3, r2
 8011658:	009b      	lsls	r3, r3, #2
 801165a:	4413      	add	r3, r2
 801165c:	009b      	lsls	r3, r3, #2
 801165e:	440b      	add	r3, r1
 8011660:	3326      	adds	r3, #38	@ 0x26
 8011662:	2200      	movs	r2, #0
 8011664:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	32b0      	adds	r2, #176	@ 0xb0
 8011670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d01f      	beq.n	80116b8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801167e:	687a      	ldr	r2, [r7, #4]
 8011680:	33b0      	adds	r3, #176	@ 0xb0
 8011682:	009b      	lsls	r3, r3, #2
 8011684:	4413      	add	r3, r2
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	685b      	ldr	r3, [r3, #4]
 801168a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	32b0      	adds	r2, #176	@ 0xb0
 8011696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801169a:	4618      	mov	r0, r3
 801169c:	f002 fbc8 	bl	8013e30 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	32b0      	adds	r2, #176	@ 0xb0
 80116aa:	2100      	movs	r1, #0
 80116ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2200      	movs	r2, #0
 80116b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80116b8:	2300      	movs	r3, #0
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	3708      	adds	r7, #8
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}
 80116c2:	bf00      	nop
 80116c4:	24000097 	.word	0x24000097
 80116c8:	24000098 	.word	0x24000098
 80116cc:	24000099 	.word	0x24000099

080116d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b086      	sub	sp, #24
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	32b0      	adds	r2, #176	@ 0xb0
 80116e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80116ea:	2300      	movs	r3, #0
 80116ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80116ee:	2300      	movs	r3, #0
 80116f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80116f2:	2300      	movs	r3, #0
 80116f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80116f6:	693b      	ldr	r3, [r7, #16]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d101      	bne.n	8011700 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80116fc:	2303      	movs	r3, #3
 80116fe:	e0bf      	b.n	8011880 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	781b      	ldrb	r3, [r3, #0]
 8011704:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011708:	2b00      	cmp	r3, #0
 801170a:	d050      	beq.n	80117ae <USBD_CDC_Setup+0xde>
 801170c:	2b20      	cmp	r3, #32
 801170e:	f040 80af 	bne.w	8011870 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	88db      	ldrh	r3, [r3, #6]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d03a      	beq.n	8011790 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	781b      	ldrb	r3, [r3, #0]
 801171e:	b25b      	sxtb	r3, r3
 8011720:	2b00      	cmp	r3, #0
 8011722:	da1b      	bge.n	801175c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801172a:	687a      	ldr	r2, [r7, #4]
 801172c:	33b0      	adds	r3, #176	@ 0xb0
 801172e:	009b      	lsls	r3, r3, #2
 8011730:	4413      	add	r3, r2
 8011732:	685b      	ldr	r3, [r3, #4]
 8011734:	689b      	ldr	r3, [r3, #8]
 8011736:	683a      	ldr	r2, [r7, #0]
 8011738:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801173a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801173c:	683a      	ldr	r2, [r7, #0]
 801173e:	88d2      	ldrh	r2, [r2, #6]
 8011740:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	88db      	ldrh	r3, [r3, #6]
 8011746:	2b07      	cmp	r3, #7
 8011748:	bf28      	it	cs
 801174a:	2307      	movcs	r3, #7
 801174c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	89fa      	ldrh	r2, [r7, #14]
 8011752:	4619      	mov	r1, r3
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f001 fdbd 	bl	80132d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801175a:	e090      	b.n	801187e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	785a      	ldrb	r2, [r3, #1]
 8011760:	693b      	ldr	r3, [r7, #16]
 8011762:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8011766:	683b      	ldr	r3, [r7, #0]
 8011768:	88db      	ldrh	r3, [r3, #6]
 801176a:	2b3f      	cmp	r3, #63	@ 0x3f
 801176c:	d803      	bhi.n	8011776 <USBD_CDC_Setup+0xa6>
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	88db      	ldrh	r3, [r3, #6]
 8011772:	b2da      	uxtb	r2, r3
 8011774:	e000      	b.n	8011778 <USBD_CDC_Setup+0xa8>
 8011776:	2240      	movs	r2, #64	@ 0x40
 8011778:	693b      	ldr	r3, [r7, #16]
 801177a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801177e:	6939      	ldr	r1, [r7, #16]
 8011780:	693b      	ldr	r3, [r7, #16]
 8011782:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8011786:	461a      	mov	r2, r3
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	f001 fdcf 	bl	801332c <USBD_CtlPrepareRx>
      break;
 801178e:	e076      	b.n	801187e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011796:	687a      	ldr	r2, [r7, #4]
 8011798:	33b0      	adds	r3, #176	@ 0xb0
 801179a:	009b      	lsls	r3, r3, #2
 801179c:	4413      	add	r3, r2
 801179e:	685b      	ldr	r3, [r3, #4]
 80117a0:	689b      	ldr	r3, [r3, #8]
 80117a2:	683a      	ldr	r2, [r7, #0]
 80117a4:	7850      	ldrb	r0, [r2, #1]
 80117a6:	2200      	movs	r2, #0
 80117a8:	6839      	ldr	r1, [r7, #0]
 80117aa:	4798      	blx	r3
      break;
 80117ac:	e067      	b.n	801187e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	785b      	ldrb	r3, [r3, #1]
 80117b2:	2b0b      	cmp	r3, #11
 80117b4:	d851      	bhi.n	801185a <USBD_CDC_Setup+0x18a>
 80117b6:	a201      	add	r2, pc, #4	@ (adr r2, 80117bc <USBD_CDC_Setup+0xec>)
 80117b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117bc:	080117ed 	.word	0x080117ed
 80117c0:	08011869 	.word	0x08011869
 80117c4:	0801185b 	.word	0x0801185b
 80117c8:	0801185b 	.word	0x0801185b
 80117cc:	0801185b 	.word	0x0801185b
 80117d0:	0801185b 	.word	0x0801185b
 80117d4:	0801185b 	.word	0x0801185b
 80117d8:	0801185b 	.word	0x0801185b
 80117dc:	0801185b 	.word	0x0801185b
 80117e0:	0801185b 	.word	0x0801185b
 80117e4:	08011817 	.word	0x08011817
 80117e8:	08011841 	.word	0x08011841
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80117f2:	b2db      	uxtb	r3, r3
 80117f4:	2b03      	cmp	r3, #3
 80117f6:	d107      	bne.n	8011808 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80117f8:	f107 030a 	add.w	r3, r7, #10
 80117fc:	2202      	movs	r2, #2
 80117fe:	4619      	mov	r1, r3
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f001 fd67 	bl	80132d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011806:	e032      	b.n	801186e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011808:	6839      	ldr	r1, [r7, #0]
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f001 fce5 	bl	80131da <USBD_CtlError>
            ret = USBD_FAIL;
 8011810:	2303      	movs	r3, #3
 8011812:	75fb      	strb	r3, [r7, #23]
          break;
 8011814:	e02b      	b.n	801186e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801181c:	b2db      	uxtb	r3, r3
 801181e:	2b03      	cmp	r3, #3
 8011820:	d107      	bne.n	8011832 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011822:	f107 030d 	add.w	r3, r7, #13
 8011826:	2201      	movs	r2, #1
 8011828:	4619      	mov	r1, r3
 801182a:	6878      	ldr	r0, [r7, #4]
 801182c:	f001 fd52 	bl	80132d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011830:	e01d      	b.n	801186e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011832:	6839      	ldr	r1, [r7, #0]
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f001 fcd0 	bl	80131da <USBD_CtlError>
            ret = USBD_FAIL;
 801183a:	2303      	movs	r3, #3
 801183c:	75fb      	strb	r3, [r7, #23]
          break;
 801183e:	e016      	b.n	801186e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011846:	b2db      	uxtb	r3, r3
 8011848:	2b03      	cmp	r3, #3
 801184a:	d00f      	beq.n	801186c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801184c:	6839      	ldr	r1, [r7, #0]
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f001 fcc3 	bl	80131da <USBD_CtlError>
            ret = USBD_FAIL;
 8011854:	2303      	movs	r3, #3
 8011856:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011858:	e008      	b.n	801186c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801185a:	6839      	ldr	r1, [r7, #0]
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f001 fcbc 	bl	80131da <USBD_CtlError>
          ret = USBD_FAIL;
 8011862:	2303      	movs	r3, #3
 8011864:	75fb      	strb	r3, [r7, #23]
          break;
 8011866:	e002      	b.n	801186e <USBD_CDC_Setup+0x19e>
          break;
 8011868:	bf00      	nop
 801186a:	e008      	b.n	801187e <USBD_CDC_Setup+0x1ae>
          break;
 801186c:	bf00      	nop
      }
      break;
 801186e:	e006      	b.n	801187e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8011870:	6839      	ldr	r1, [r7, #0]
 8011872:	6878      	ldr	r0, [r7, #4]
 8011874:	f001 fcb1 	bl	80131da <USBD_CtlError>
      ret = USBD_FAIL;
 8011878:	2303      	movs	r3, #3
 801187a:	75fb      	strb	r3, [r7, #23]
      break;
 801187c:	bf00      	nop
  }

  return (uint8_t)ret;
 801187e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011880:	4618      	mov	r0, r3
 8011882:	3718      	adds	r7, #24
 8011884:	46bd      	mov	sp, r7
 8011886:	bd80      	pop	{r7, pc}

08011888 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b084      	sub	sp, #16
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
 8011890:	460b      	mov	r3, r1
 8011892:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801189a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	32b0      	adds	r2, #176	@ 0xb0
 80118a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d101      	bne.n	80118b2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80118ae:	2303      	movs	r3, #3
 80118b0:	e065      	b.n	801197e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	32b0      	adds	r2, #176	@ 0xb0
 80118bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80118c2:	78fb      	ldrb	r3, [r7, #3]
 80118c4:	f003 020f 	and.w	r2, r3, #15
 80118c8:	6879      	ldr	r1, [r7, #4]
 80118ca:	4613      	mov	r3, r2
 80118cc:	009b      	lsls	r3, r3, #2
 80118ce:	4413      	add	r3, r2
 80118d0:	009b      	lsls	r3, r3, #2
 80118d2:	440b      	add	r3, r1
 80118d4:	3318      	adds	r3, #24
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d02f      	beq.n	801193c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80118dc:	78fb      	ldrb	r3, [r7, #3]
 80118de:	f003 020f 	and.w	r2, r3, #15
 80118e2:	6879      	ldr	r1, [r7, #4]
 80118e4:	4613      	mov	r3, r2
 80118e6:	009b      	lsls	r3, r3, #2
 80118e8:	4413      	add	r3, r2
 80118ea:	009b      	lsls	r3, r3, #2
 80118ec:	440b      	add	r3, r1
 80118ee:	3318      	adds	r3, #24
 80118f0:	681a      	ldr	r2, [r3, #0]
 80118f2:	78fb      	ldrb	r3, [r7, #3]
 80118f4:	f003 010f 	and.w	r1, r3, #15
 80118f8:	68f8      	ldr	r0, [r7, #12]
 80118fa:	460b      	mov	r3, r1
 80118fc:	00db      	lsls	r3, r3, #3
 80118fe:	440b      	add	r3, r1
 8011900:	009b      	lsls	r3, r3, #2
 8011902:	4403      	add	r3, r0
 8011904:	331c      	adds	r3, #28
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	fbb2 f1f3 	udiv	r1, r2, r3
 801190c:	fb01 f303 	mul.w	r3, r1, r3
 8011910:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011912:	2b00      	cmp	r3, #0
 8011914:	d112      	bne.n	801193c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8011916:	78fb      	ldrb	r3, [r7, #3]
 8011918:	f003 020f 	and.w	r2, r3, #15
 801191c:	6879      	ldr	r1, [r7, #4]
 801191e:	4613      	mov	r3, r2
 8011920:	009b      	lsls	r3, r3, #2
 8011922:	4413      	add	r3, r2
 8011924:	009b      	lsls	r3, r3, #2
 8011926:	440b      	add	r3, r1
 8011928:	3318      	adds	r3, #24
 801192a:	2200      	movs	r2, #0
 801192c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801192e:	78f9      	ldrb	r1, [r7, #3]
 8011930:	2300      	movs	r3, #0
 8011932:	2200      	movs	r2, #0
 8011934:	6878      	ldr	r0, [r7, #4]
 8011936:	f002 fa18 	bl	8013d6a <USBD_LL_Transmit>
 801193a:	e01f      	b.n	801197c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801193c:	68bb      	ldr	r3, [r7, #8]
 801193e:	2200      	movs	r2, #0
 8011940:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801194a:	687a      	ldr	r2, [r7, #4]
 801194c:	33b0      	adds	r3, #176	@ 0xb0
 801194e:	009b      	lsls	r3, r3, #2
 8011950:	4413      	add	r3, r2
 8011952:	685b      	ldr	r3, [r3, #4]
 8011954:	691b      	ldr	r3, [r3, #16]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d010      	beq.n	801197c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011960:	687a      	ldr	r2, [r7, #4]
 8011962:	33b0      	adds	r3, #176	@ 0xb0
 8011964:	009b      	lsls	r3, r3, #2
 8011966:	4413      	add	r3, r2
 8011968:	685b      	ldr	r3, [r3, #4]
 801196a:	691b      	ldr	r3, [r3, #16]
 801196c:	68ba      	ldr	r2, [r7, #8]
 801196e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8011972:	68ba      	ldr	r2, [r7, #8]
 8011974:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8011978:	78fa      	ldrb	r2, [r7, #3]
 801197a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801197c:	2300      	movs	r3, #0
}
 801197e:	4618      	mov	r0, r3
 8011980:	3710      	adds	r7, #16
 8011982:	46bd      	mov	sp, r7
 8011984:	bd80      	pop	{r7, pc}

08011986 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011986:	b580      	push	{r7, lr}
 8011988:	b084      	sub	sp, #16
 801198a:	af00      	add	r7, sp, #0
 801198c:	6078      	str	r0, [r7, #4]
 801198e:	460b      	mov	r3, r1
 8011990:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	32b0      	adds	r2, #176	@ 0xb0
 801199c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	32b0      	adds	r2, #176	@ 0xb0
 80119ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d101      	bne.n	80119b8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80119b4:	2303      	movs	r3, #3
 80119b6:	e01a      	b.n	80119ee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80119b8:	78fb      	ldrb	r3, [r7, #3]
 80119ba:	4619      	mov	r1, r3
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f002 fa16 	bl	8013dee <USBD_LL_GetRxDataSize>
 80119c2:	4602      	mov	r2, r0
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80119d0:	687a      	ldr	r2, [r7, #4]
 80119d2:	33b0      	adds	r3, #176	@ 0xb0
 80119d4:	009b      	lsls	r3, r3, #2
 80119d6:	4413      	add	r3, r2
 80119d8:	685b      	ldr	r3, [r3, #4]
 80119da:	68db      	ldr	r3, [r3, #12]
 80119dc:	68fa      	ldr	r2, [r7, #12]
 80119de:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80119e2:	68fa      	ldr	r2, [r7, #12]
 80119e4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80119e8:	4611      	mov	r1, r2
 80119ea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80119ec:	2300      	movs	r3, #0
}
 80119ee:	4618      	mov	r0, r3
 80119f0:	3710      	adds	r7, #16
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}

080119f6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80119f6:	b580      	push	{r7, lr}
 80119f8:	b084      	sub	sp, #16
 80119fa:	af00      	add	r7, sp, #0
 80119fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	32b0      	adds	r2, #176	@ 0xb0
 8011a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d101      	bne.n	8011a18 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011a14:	2303      	movs	r3, #3
 8011a16:	e024      	b.n	8011a62 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011a1e:	687a      	ldr	r2, [r7, #4]
 8011a20:	33b0      	adds	r3, #176	@ 0xb0
 8011a22:	009b      	lsls	r3, r3, #2
 8011a24:	4413      	add	r3, r2
 8011a26:	685b      	ldr	r3, [r3, #4]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d019      	beq.n	8011a60 <USBD_CDC_EP0_RxReady+0x6a>
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8011a32:	2bff      	cmp	r3, #255	@ 0xff
 8011a34:	d014      	beq.n	8011a60 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011a3c:	687a      	ldr	r2, [r7, #4]
 8011a3e:	33b0      	adds	r3, #176	@ 0xb0
 8011a40:	009b      	lsls	r3, r3, #2
 8011a42:	4413      	add	r3, r2
 8011a44:	685b      	ldr	r3, [r3, #4]
 8011a46:	689b      	ldr	r3, [r3, #8]
 8011a48:	68fa      	ldr	r2, [r7, #12]
 8011a4a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8011a4e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8011a50:	68fa      	ldr	r2, [r7, #12]
 8011a52:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011a56:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	22ff      	movs	r2, #255	@ 0xff
 8011a5c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8011a60:	2300      	movs	r3, #0
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	3710      	adds	r7, #16
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}
	...

08011a6c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b086      	sub	sp, #24
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011a74:	2182      	movs	r1, #130	@ 0x82
 8011a76:	4818      	ldr	r0, [pc, #96]	@ (8011ad8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011a78:	f000 fd4f 	bl	801251a <USBD_GetEpDesc>
 8011a7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011a7e:	2101      	movs	r1, #1
 8011a80:	4815      	ldr	r0, [pc, #84]	@ (8011ad8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011a82:	f000 fd4a 	bl	801251a <USBD_GetEpDesc>
 8011a86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011a88:	2181      	movs	r1, #129	@ 0x81
 8011a8a:	4813      	ldr	r0, [pc, #76]	@ (8011ad8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011a8c:	f000 fd45 	bl	801251a <USBD_GetEpDesc>
 8011a90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011a92:	697b      	ldr	r3, [r7, #20]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d002      	beq.n	8011a9e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011a98:	697b      	ldr	r3, [r7, #20]
 8011a9a:	2210      	movs	r2, #16
 8011a9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011a9e:	693b      	ldr	r3, [r7, #16]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d006      	beq.n	8011ab2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011aac:	711a      	strb	r2, [r3, #4]
 8011aae:	2200      	movs	r2, #0
 8011ab0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d006      	beq.n	8011ac6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	2200      	movs	r2, #0
 8011abc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011ac0:	711a      	strb	r2, [r3, #4]
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	2243      	movs	r2, #67	@ 0x43
 8011aca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011acc:	4b02      	ldr	r3, [pc, #8]	@ (8011ad8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	3718      	adds	r7, #24
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}
 8011ad6:	bf00      	nop
 8011ad8:	24000054 	.word	0x24000054

08011adc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b086      	sub	sp, #24
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011ae4:	2182      	movs	r1, #130	@ 0x82
 8011ae6:	4818      	ldr	r0, [pc, #96]	@ (8011b48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011ae8:	f000 fd17 	bl	801251a <USBD_GetEpDesc>
 8011aec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011aee:	2101      	movs	r1, #1
 8011af0:	4815      	ldr	r0, [pc, #84]	@ (8011b48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011af2:	f000 fd12 	bl	801251a <USBD_GetEpDesc>
 8011af6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011af8:	2181      	movs	r1, #129	@ 0x81
 8011afa:	4813      	ldr	r0, [pc, #76]	@ (8011b48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011afc:	f000 fd0d 	bl	801251a <USBD_GetEpDesc>
 8011b00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011b02:	697b      	ldr	r3, [r7, #20]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d002      	beq.n	8011b0e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	2210      	movs	r2, #16
 8011b0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011b0e:	693b      	ldr	r3, [r7, #16]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d006      	beq.n	8011b22 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	2200      	movs	r2, #0
 8011b18:	711a      	strb	r2, [r3, #4]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	f042 0202 	orr.w	r2, r2, #2
 8011b20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d006      	beq.n	8011b36 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	711a      	strb	r2, [r3, #4]
 8011b2e:	2200      	movs	r2, #0
 8011b30:	f042 0202 	orr.w	r2, r2, #2
 8011b34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2243      	movs	r2, #67	@ 0x43
 8011b3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011b3c:	4b02      	ldr	r3, [pc, #8]	@ (8011b48 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	3718      	adds	r7, #24
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}
 8011b46:	bf00      	nop
 8011b48:	24000054 	.word	0x24000054

08011b4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b086      	sub	sp, #24
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011b54:	2182      	movs	r1, #130	@ 0x82
 8011b56:	4818      	ldr	r0, [pc, #96]	@ (8011bb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011b58:	f000 fcdf 	bl	801251a <USBD_GetEpDesc>
 8011b5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011b5e:	2101      	movs	r1, #1
 8011b60:	4815      	ldr	r0, [pc, #84]	@ (8011bb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011b62:	f000 fcda 	bl	801251a <USBD_GetEpDesc>
 8011b66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011b68:	2181      	movs	r1, #129	@ 0x81
 8011b6a:	4813      	ldr	r0, [pc, #76]	@ (8011bb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011b6c:	f000 fcd5 	bl	801251a <USBD_GetEpDesc>
 8011b70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011b72:	697b      	ldr	r3, [r7, #20]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d002      	beq.n	8011b7e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011b78:	697b      	ldr	r3, [r7, #20]
 8011b7a:	2210      	movs	r2, #16
 8011b7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011b7e:	693b      	ldr	r3, [r7, #16]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d006      	beq.n	8011b92 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011b84:	693b      	ldr	r3, [r7, #16]
 8011b86:	2200      	movs	r2, #0
 8011b88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011b8c:	711a      	strb	r2, [r3, #4]
 8011b8e:	2200      	movs	r2, #0
 8011b90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d006      	beq.n	8011ba6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011ba0:	711a      	strb	r2, [r3, #4]
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	2243      	movs	r2, #67	@ 0x43
 8011baa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011bac:	4b02      	ldr	r3, [pc, #8]	@ (8011bb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3718      	adds	r7, #24
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}
 8011bb6:	bf00      	nop
 8011bb8:	24000054 	.word	0x24000054

08011bbc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011bbc:	b480      	push	{r7}
 8011bbe:	b083      	sub	sp, #12
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	220a      	movs	r2, #10
 8011bc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011bca:	4b03      	ldr	r3, [pc, #12]	@ (8011bd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	370c      	adds	r7, #12
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd6:	4770      	bx	lr
 8011bd8:	24000010 	.word	0x24000010

08011bdc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011bdc:	b480      	push	{r7}
 8011bde:	b083      	sub	sp, #12
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
 8011be4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d101      	bne.n	8011bf0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011bec:	2303      	movs	r3, #3
 8011bee:	e009      	b.n	8011c04 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011bf6:	687a      	ldr	r2, [r7, #4]
 8011bf8:	33b0      	adds	r3, #176	@ 0xb0
 8011bfa:	009b      	lsls	r3, r3, #2
 8011bfc:	4413      	add	r3, r2
 8011bfe:	683a      	ldr	r2, [r7, #0]
 8011c00:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8011c02:	2300      	movs	r3, #0
}
 8011c04:	4618      	mov	r0, r3
 8011c06:	370c      	adds	r7, #12
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0e:	4770      	bx	lr

08011c10 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011c10:	b480      	push	{r7}
 8011c12:	b087      	sub	sp, #28
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	60f8      	str	r0, [r7, #12]
 8011c18:	60b9      	str	r1, [r7, #8]
 8011c1a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	32b0      	adds	r2, #176	@ 0xb0
 8011c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c2a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d101      	bne.n	8011c36 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011c32:	2303      	movs	r3, #3
 8011c34:	e008      	b.n	8011c48 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8011c36:	697b      	ldr	r3, [r7, #20]
 8011c38:	68ba      	ldr	r2, [r7, #8]
 8011c3a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8011c3e:	697b      	ldr	r3, [r7, #20]
 8011c40:	687a      	ldr	r2, [r7, #4]
 8011c42:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8011c46:	2300      	movs	r3, #0
}
 8011c48:	4618      	mov	r0, r3
 8011c4a:	371c      	adds	r7, #28
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c52:	4770      	bx	lr

08011c54 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011c54:	b480      	push	{r7}
 8011c56:	b085      	sub	sp, #20
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
 8011c5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	32b0      	adds	r2, #176	@ 0xb0
 8011c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c6c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d101      	bne.n	8011c78 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8011c74:	2303      	movs	r3, #3
 8011c76:	e004      	b.n	8011c82 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	683a      	ldr	r2, [r7, #0]
 8011c7c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8011c80:	2300      	movs	r3, #0
}
 8011c82:	4618      	mov	r0, r3
 8011c84:	3714      	adds	r7, #20
 8011c86:	46bd      	mov	sp, r7
 8011c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8c:	4770      	bx	lr
	...

08011c90 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b084      	sub	sp, #16
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	32b0      	adds	r2, #176	@ 0xb0
 8011ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ca6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8011ca8:	2301      	movs	r3, #1
 8011caa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d101      	bne.n	8011cb6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011cb2:	2303      	movs	r3, #3
 8011cb4:	e025      	b.n	8011d02 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d11f      	bne.n	8011d00 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	2201      	movs	r2, #1
 8011cc4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8011cc8:	4b10      	ldr	r3, [pc, #64]	@ (8011d0c <USBD_CDC_TransmitPacket+0x7c>)
 8011cca:	781b      	ldrb	r3, [r3, #0]
 8011ccc:	f003 020f 	and.w	r2, r3, #15
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8011cd6:	6878      	ldr	r0, [r7, #4]
 8011cd8:	4613      	mov	r3, r2
 8011cda:	009b      	lsls	r3, r3, #2
 8011cdc:	4413      	add	r3, r2
 8011cde:	009b      	lsls	r3, r3, #2
 8011ce0:	4403      	add	r3, r0
 8011ce2:	3318      	adds	r3, #24
 8011ce4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8011ce6:	4b09      	ldr	r3, [pc, #36]	@ (8011d0c <USBD_CDC_TransmitPacket+0x7c>)
 8011ce8:	7819      	ldrb	r1, [r3, #0]
 8011cea:	68bb      	ldr	r3, [r7, #8]
 8011cec:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8011cf6:	6878      	ldr	r0, [r7, #4]
 8011cf8:	f002 f837 	bl	8013d6a <USBD_LL_Transmit>

    ret = USBD_OK;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d02:	4618      	mov	r0, r3
 8011d04:	3710      	adds	r7, #16
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}
 8011d0a:	bf00      	nop
 8011d0c:	24000097 	.word	0x24000097

08011d10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b084      	sub	sp, #16
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	32b0      	adds	r2, #176	@ 0xb0
 8011d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d26:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	32b0      	adds	r2, #176	@ 0xb0
 8011d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d101      	bne.n	8011d3e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8011d3a:	2303      	movs	r3, #3
 8011d3c:	e018      	b.n	8011d70 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	7c1b      	ldrb	r3, [r3, #16]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d10a      	bne.n	8011d5c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011d46:	4b0c      	ldr	r3, [pc, #48]	@ (8011d78 <USBD_CDC_ReceivePacket+0x68>)
 8011d48:	7819      	ldrb	r1, [r3, #0]
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011d50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011d54:	6878      	ldr	r0, [r7, #4]
 8011d56:	f002 f829 	bl	8013dac <USBD_LL_PrepareReceive>
 8011d5a:	e008      	b.n	8011d6e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011d5c:	4b06      	ldr	r3, [pc, #24]	@ (8011d78 <USBD_CDC_ReceivePacket+0x68>)
 8011d5e:	7819      	ldrb	r1, [r3, #0]
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011d66:	2340      	movs	r3, #64	@ 0x40
 8011d68:	6878      	ldr	r0, [r7, #4]
 8011d6a:	f002 f81f 	bl	8013dac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011d6e:	2300      	movs	r3, #0
}
 8011d70:	4618      	mov	r0, r3
 8011d72:	3710      	adds	r7, #16
 8011d74:	46bd      	mov	sp, r7
 8011d76:	bd80      	pop	{r7, pc}
 8011d78:	24000098 	.word	0x24000098

08011d7c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b086      	sub	sp, #24
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	60f8      	str	r0, [r7, #12]
 8011d84:	60b9      	str	r1, [r7, #8]
 8011d86:	4613      	mov	r3, r2
 8011d88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d101      	bne.n	8011d94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011d90:	2303      	movs	r3, #3
 8011d92:	e01f      	b.n	8011dd4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	2200      	movs	r2, #0
 8011d98:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	2200      	movs	r2, #0
 8011da0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	2200      	movs	r2, #0
 8011da8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d003      	beq.n	8011dba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	68ba      	ldr	r2, [r7, #8]
 8011db6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	2201      	movs	r2, #1
 8011dbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	79fa      	ldrb	r2, [r7, #7]
 8011dc6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011dc8:	68f8      	ldr	r0, [r7, #12]
 8011dca:	f001 fe93 	bl	8013af4 <USBD_LL_Init>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	3718      	adds	r7, #24
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}

08011ddc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b084      	sub	sp, #16
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
 8011de4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011de6:	2300      	movs	r3, #0
 8011de8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011dea:	683b      	ldr	r3, [r7, #0]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d101      	bne.n	8011df4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011df0:	2303      	movs	r3, #3
 8011df2:	e025      	b.n	8011e40 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	683a      	ldr	r2, [r7, #0]
 8011df8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	32ae      	adds	r2, #174	@ 0xae
 8011e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d00f      	beq.n	8011e30 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	32ae      	adds	r2, #174	@ 0xae
 8011e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e20:	f107 020e 	add.w	r2, r7, #14
 8011e24:	4610      	mov	r0, r2
 8011e26:	4798      	blx	r3
 8011e28:	4602      	mov	r2, r0
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011e36:	1c5a      	adds	r2, r3, #1
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8011e3e:	2300      	movs	r3, #0
}
 8011e40:	4618      	mov	r0, r3
 8011e42:	3710      	adds	r7, #16
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}

08011e48 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b082      	sub	sp, #8
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011e50:	6878      	ldr	r0, [r7, #4]
 8011e52:	f001 fea1 	bl	8013b98 <USBD_LL_Start>
 8011e56:	4603      	mov	r3, r0
}
 8011e58:	4618      	mov	r0, r3
 8011e5a:	3708      	adds	r7, #8
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}

08011e60 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011e60:	b480      	push	{r7}
 8011e62:	b083      	sub	sp, #12
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011e68:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	370c      	adds	r7, #12
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e74:	4770      	bx	lr

08011e76 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011e76:	b580      	push	{r7, lr}
 8011e78:	b084      	sub	sp, #16
 8011e7a:	af00      	add	r7, sp, #0
 8011e7c:	6078      	str	r0, [r7, #4]
 8011e7e:	460b      	mov	r3, r1
 8011e80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e82:	2300      	movs	r3, #0
 8011e84:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d009      	beq.n	8011ea4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	78fa      	ldrb	r2, [r7, #3]
 8011e9a:	4611      	mov	r1, r2
 8011e9c:	6878      	ldr	r0, [r7, #4]
 8011e9e:	4798      	blx	r3
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	3710      	adds	r7, #16
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}

08011eae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011eae:	b580      	push	{r7, lr}
 8011eb0:	b084      	sub	sp, #16
 8011eb2:	af00      	add	r7, sp, #0
 8011eb4:	6078      	str	r0, [r7, #4]
 8011eb6:	460b      	mov	r3, r1
 8011eb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011eba:	2300      	movs	r3, #0
 8011ebc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011ec4:	685b      	ldr	r3, [r3, #4]
 8011ec6:	78fa      	ldrb	r2, [r7, #3]
 8011ec8:	4611      	mov	r1, r2
 8011eca:	6878      	ldr	r0, [r7, #4]
 8011ecc:	4798      	blx	r3
 8011ece:	4603      	mov	r3, r0
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d001      	beq.n	8011ed8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011ed4:	2303      	movs	r3, #3
 8011ed6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eda:	4618      	mov	r0, r3
 8011edc:	3710      	adds	r7, #16
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	bd80      	pop	{r7, pc}

08011ee2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011ee2:	b580      	push	{r7, lr}
 8011ee4:	b084      	sub	sp, #16
 8011ee6:	af00      	add	r7, sp, #0
 8011ee8:	6078      	str	r0, [r7, #4]
 8011eea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011ef2:	6839      	ldr	r1, [r7, #0]
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f001 f936 	bl	8013166 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	2201      	movs	r2, #1
 8011efe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8011f08:	461a      	mov	r2, r3
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011f16:	f003 031f 	and.w	r3, r3, #31
 8011f1a:	2b02      	cmp	r3, #2
 8011f1c:	d01a      	beq.n	8011f54 <USBD_LL_SetupStage+0x72>
 8011f1e:	2b02      	cmp	r3, #2
 8011f20:	d822      	bhi.n	8011f68 <USBD_LL_SetupStage+0x86>
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d002      	beq.n	8011f2c <USBD_LL_SetupStage+0x4a>
 8011f26:	2b01      	cmp	r3, #1
 8011f28:	d00a      	beq.n	8011f40 <USBD_LL_SetupStage+0x5e>
 8011f2a:	e01d      	b.n	8011f68 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011f32:	4619      	mov	r1, r3
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f000 fb63 	bl	8012600 <USBD_StdDevReq>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8011f3e:	e020      	b.n	8011f82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011f46:	4619      	mov	r1, r3
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f000 fbcb 	bl	80126e4 <USBD_StdItfReq>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	73fb      	strb	r3, [r7, #15]
      break;
 8011f52:	e016      	b.n	8011f82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011f5a:	4619      	mov	r1, r3
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f000 fc2d 	bl	80127bc <USBD_StdEPReq>
 8011f62:	4603      	mov	r3, r0
 8011f64:	73fb      	strb	r3, [r7, #15]
      break;
 8011f66:	e00c      	b.n	8011f82 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011f6e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011f72:	b2db      	uxtb	r3, r3
 8011f74:	4619      	mov	r1, r3
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f001 fe6e 	bl	8013c58 <USBD_LL_StallEP>
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8011f80:	bf00      	nop
  }

  return ret;
 8011f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f84:	4618      	mov	r0, r3
 8011f86:	3710      	adds	r7, #16
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bd80      	pop	{r7, pc}

08011f8c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b086      	sub	sp, #24
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	60f8      	str	r0, [r7, #12]
 8011f94:	460b      	mov	r3, r1
 8011f96:	607a      	str	r2, [r7, #4]
 8011f98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8011f9e:	7afb      	ldrb	r3, [r7, #11]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d16e      	bne.n	8012082 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8011faa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011fb2:	2b03      	cmp	r3, #3
 8011fb4:	f040 8098 	bne.w	80120e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011fb8:	693b      	ldr	r3, [r7, #16]
 8011fba:	689a      	ldr	r2, [r3, #8]
 8011fbc:	693b      	ldr	r3, [r7, #16]
 8011fbe:	68db      	ldr	r3, [r3, #12]
 8011fc0:	429a      	cmp	r2, r3
 8011fc2:	d913      	bls.n	8011fec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011fc4:	693b      	ldr	r3, [r7, #16]
 8011fc6:	689a      	ldr	r2, [r3, #8]
 8011fc8:	693b      	ldr	r3, [r7, #16]
 8011fca:	68db      	ldr	r3, [r3, #12]
 8011fcc:	1ad2      	subs	r2, r2, r3
 8011fce:	693b      	ldr	r3, [r7, #16]
 8011fd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011fd2:	693b      	ldr	r3, [r7, #16]
 8011fd4:	68da      	ldr	r2, [r3, #12]
 8011fd6:	693b      	ldr	r3, [r7, #16]
 8011fd8:	689b      	ldr	r3, [r3, #8]
 8011fda:	4293      	cmp	r3, r2
 8011fdc:	bf28      	it	cs
 8011fde:	4613      	movcs	r3, r2
 8011fe0:	461a      	mov	r2, r3
 8011fe2:	6879      	ldr	r1, [r7, #4]
 8011fe4:	68f8      	ldr	r0, [r7, #12]
 8011fe6:	f001 f9be 	bl	8013366 <USBD_CtlContinueRx>
 8011fea:	e07d      	b.n	80120e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011ff2:	f003 031f 	and.w	r3, r3, #31
 8011ff6:	2b02      	cmp	r3, #2
 8011ff8:	d014      	beq.n	8012024 <USBD_LL_DataOutStage+0x98>
 8011ffa:	2b02      	cmp	r3, #2
 8011ffc:	d81d      	bhi.n	801203a <USBD_LL_DataOutStage+0xae>
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d002      	beq.n	8012008 <USBD_LL_DataOutStage+0x7c>
 8012002:	2b01      	cmp	r3, #1
 8012004:	d003      	beq.n	801200e <USBD_LL_DataOutStage+0x82>
 8012006:	e018      	b.n	801203a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8012008:	2300      	movs	r3, #0
 801200a:	75bb      	strb	r3, [r7, #22]
            break;
 801200c:	e018      	b.n	8012040 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012014:	b2db      	uxtb	r3, r3
 8012016:	4619      	mov	r1, r3
 8012018:	68f8      	ldr	r0, [r7, #12]
 801201a:	f000 fa64 	bl	80124e6 <USBD_CoreFindIF>
 801201e:	4603      	mov	r3, r0
 8012020:	75bb      	strb	r3, [r7, #22]
            break;
 8012022:	e00d      	b.n	8012040 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801202a:	b2db      	uxtb	r3, r3
 801202c:	4619      	mov	r1, r3
 801202e:	68f8      	ldr	r0, [r7, #12]
 8012030:	f000 fa66 	bl	8012500 <USBD_CoreFindEP>
 8012034:	4603      	mov	r3, r0
 8012036:	75bb      	strb	r3, [r7, #22]
            break;
 8012038:	e002      	b.n	8012040 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801203a:	2300      	movs	r3, #0
 801203c:	75bb      	strb	r3, [r7, #22]
            break;
 801203e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8012040:	7dbb      	ldrb	r3, [r7, #22]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d119      	bne.n	801207a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801204c:	b2db      	uxtb	r3, r3
 801204e:	2b03      	cmp	r3, #3
 8012050:	d113      	bne.n	801207a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8012052:	7dba      	ldrb	r2, [r7, #22]
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	32ae      	adds	r2, #174	@ 0xae
 8012058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801205c:	691b      	ldr	r3, [r3, #16]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d00b      	beq.n	801207a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8012062:	7dba      	ldrb	r2, [r7, #22]
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801206a:	7dba      	ldrb	r2, [r7, #22]
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	32ae      	adds	r2, #174	@ 0xae
 8012070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012074:	691b      	ldr	r3, [r3, #16]
 8012076:	68f8      	ldr	r0, [r7, #12]
 8012078:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801207a:	68f8      	ldr	r0, [r7, #12]
 801207c:	f001 f984 	bl	8013388 <USBD_CtlSendStatus>
 8012080:	e032      	b.n	80120e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8012082:	7afb      	ldrb	r3, [r7, #11]
 8012084:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012088:	b2db      	uxtb	r3, r3
 801208a:	4619      	mov	r1, r3
 801208c:	68f8      	ldr	r0, [r7, #12]
 801208e:	f000 fa37 	bl	8012500 <USBD_CoreFindEP>
 8012092:	4603      	mov	r3, r0
 8012094:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012096:	7dbb      	ldrb	r3, [r7, #22]
 8012098:	2bff      	cmp	r3, #255	@ 0xff
 801209a:	d025      	beq.n	80120e8 <USBD_LL_DataOutStage+0x15c>
 801209c:	7dbb      	ldrb	r3, [r7, #22]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d122      	bne.n	80120e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80120a8:	b2db      	uxtb	r3, r3
 80120aa:	2b03      	cmp	r3, #3
 80120ac:	d117      	bne.n	80120de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80120ae:	7dba      	ldrb	r2, [r7, #22]
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	32ae      	adds	r2, #174	@ 0xae
 80120b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120b8:	699b      	ldr	r3, [r3, #24]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d00f      	beq.n	80120de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80120be:	7dba      	ldrb	r2, [r7, #22]
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80120c6:	7dba      	ldrb	r2, [r7, #22]
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	32ae      	adds	r2, #174	@ 0xae
 80120cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120d0:	699b      	ldr	r3, [r3, #24]
 80120d2:	7afa      	ldrb	r2, [r7, #11]
 80120d4:	4611      	mov	r1, r2
 80120d6:	68f8      	ldr	r0, [r7, #12]
 80120d8:	4798      	blx	r3
 80120da:	4603      	mov	r3, r0
 80120dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80120de:	7dfb      	ldrb	r3, [r7, #23]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d001      	beq.n	80120e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80120e4:	7dfb      	ldrb	r3, [r7, #23]
 80120e6:	e000      	b.n	80120ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80120e8:	2300      	movs	r3, #0
}
 80120ea:	4618      	mov	r0, r3
 80120ec:	3718      	adds	r7, #24
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}

080120f2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80120f2:	b580      	push	{r7, lr}
 80120f4:	b086      	sub	sp, #24
 80120f6:	af00      	add	r7, sp, #0
 80120f8:	60f8      	str	r0, [r7, #12]
 80120fa:	460b      	mov	r3, r1
 80120fc:	607a      	str	r2, [r7, #4]
 80120fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8012100:	7afb      	ldrb	r3, [r7, #11]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d16f      	bne.n	80121e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	3314      	adds	r3, #20
 801210a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012112:	2b02      	cmp	r3, #2
 8012114:	d15a      	bne.n	80121cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8012116:	693b      	ldr	r3, [r7, #16]
 8012118:	689a      	ldr	r2, [r3, #8]
 801211a:	693b      	ldr	r3, [r7, #16]
 801211c:	68db      	ldr	r3, [r3, #12]
 801211e:	429a      	cmp	r2, r3
 8012120:	d914      	bls.n	801214c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012122:	693b      	ldr	r3, [r7, #16]
 8012124:	689a      	ldr	r2, [r3, #8]
 8012126:	693b      	ldr	r3, [r7, #16]
 8012128:	68db      	ldr	r3, [r3, #12]
 801212a:	1ad2      	subs	r2, r2, r3
 801212c:	693b      	ldr	r3, [r7, #16]
 801212e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012130:	693b      	ldr	r3, [r7, #16]
 8012132:	689b      	ldr	r3, [r3, #8]
 8012134:	461a      	mov	r2, r3
 8012136:	6879      	ldr	r1, [r7, #4]
 8012138:	68f8      	ldr	r0, [r7, #12]
 801213a:	f001 f8e6 	bl	801330a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801213e:	2300      	movs	r3, #0
 8012140:	2200      	movs	r2, #0
 8012142:	2100      	movs	r1, #0
 8012144:	68f8      	ldr	r0, [r7, #12]
 8012146:	f001 fe31 	bl	8013dac <USBD_LL_PrepareReceive>
 801214a:	e03f      	b.n	80121cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801214c:	693b      	ldr	r3, [r7, #16]
 801214e:	68da      	ldr	r2, [r3, #12]
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	689b      	ldr	r3, [r3, #8]
 8012154:	429a      	cmp	r2, r3
 8012156:	d11c      	bne.n	8012192 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012158:	693b      	ldr	r3, [r7, #16]
 801215a:	685a      	ldr	r2, [r3, #4]
 801215c:	693b      	ldr	r3, [r7, #16]
 801215e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012160:	429a      	cmp	r2, r3
 8012162:	d316      	bcc.n	8012192 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012164:	693b      	ldr	r3, [r7, #16]
 8012166:	685a      	ldr	r2, [r3, #4]
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801216e:	429a      	cmp	r2, r3
 8012170:	d20f      	bcs.n	8012192 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012172:	2200      	movs	r2, #0
 8012174:	2100      	movs	r1, #0
 8012176:	68f8      	ldr	r0, [r7, #12]
 8012178:	f001 f8c7 	bl	801330a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	2200      	movs	r2, #0
 8012180:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012184:	2300      	movs	r3, #0
 8012186:	2200      	movs	r2, #0
 8012188:	2100      	movs	r1, #0
 801218a:	68f8      	ldr	r0, [r7, #12]
 801218c:	f001 fe0e 	bl	8013dac <USBD_LL_PrepareReceive>
 8012190:	e01c      	b.n	80121cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012198:	b2db      	uxtb	r3, r3
 801219a:	2b03      	cmp	r3, #3
 801219c:	d10f      	bne.n	80121be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80121a4:	68db      	ldr	r3, [r3, #12]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d009      	beq.n	80121be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	2200      	movs	r2, #0
 80121ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80121b8:	68db      	ldr	r3, [r3, #12]
 80121ba:	68f8      	ldr	r0, [r7, #12]
 80121bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80121be:	2180      	movs	r1, #128	@ 0x80
 80121c0:	68f8      	ldr	r0, [r7, #12]
 80121c2:	f001 fd49 	bl	8013c58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80121c6:	68f8      	ldr	r0, [r7, #12]
 80121c8:	f001 f8f1 	bl	80133ae <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d03a      	beq.n	801224c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80121d6:	68f8      	ldr	r0, [r7, #12]
 80121d8:	f7ff fe42 	bl	8011e60 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	2200      	movs	r2, #0
 80121e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80121e4:	e032      	b.n	801224c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80121e6:	7afb      	ldrb	r3, [r7, #11]
 80121e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80121ec:	b2db      	uxtb	r3, r3
 80121ee:	4619      	mov	r1, r3
 80121f0:	68f8      	ldr	r0, [r7, #12]
 80121f2:	f000 f985 	bl	8012500 <USBD_CoreFindEP>
 80121f6:	4603      	mov	r3, r0
 80121f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80121fa:	7dfb      	ldrb	r3, [r7, #23]
 80121fc:	2bff      	cmp	r3, #255	@ 0xff
 80121fe:	d025      	beq.n	801224c <USBD_LL_DataInStage+0x15a>
 8012200:	7dfb      	ldrb	r3, [r7, #23]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d122      	bne.n	801224c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801220c:	b2db      	uxtb	r3, r3
 801220e:	2b03      	cmp	r3, #3
 8012210:	d11c      	bne.n	801224c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8012212:	7dfa      	ldrb	r2, [r7, #23]
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	32ae      	adds	r2, #174	@ 0xae
 8012218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801221c:	695b      	ldr	r3, [r3, #20]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d014      	beq.n	801224c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8012222:	7dfa      	ldrb	r2, [r7, #23]
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801222a:	7dfa      	ldrb	r2, [r7, #23]
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	32ae      	adds	r2, #174	@ 0xae
 8012230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012234:	695b      	ldr	r3, [r3, #20]
 8012236:	7afa      	ldrb	r2, [r7, #11]
 8012238:	4611      	mov	r1, r2
 801223a:	68f8      	ldr	r0, [r7, #12]
 801223c:	4798      	blx	r3
 801223e:	4603      	mov	r3, r0
 8012240:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8012242:	7dbb      	ldrb	r3, [r7, #22]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d001      	beq.n	801224c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8012248:	7dbb      	ldrb	r3, [r7, #22]
 801224a:	e000      	b.n	801224e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801224c:	2300      	movs	r3, #0
}
 801224e:	4618      	mov	r0, r3
 8012250:	3718      	adds	r7, #24
 8012252:	46bd      	mov	sp, r7
 8012254:	bd80      	pop	{r7, pc}

08012256 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012256:	b580      	push	{r7, lr}
 8012258:	b084      	sub	sp, #16
 801225a:	af00      	add	r7, sp, #0
 801225c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801225e:	2300      	movs	r3, #0
 8012260:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	2201      	movs	r2, #1
 8012266:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	2200      	movs	r2, #0
 801226e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2200      	movs	r2, #0
 8012276:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	2200      	movs	r2, #0
 801227c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	2200      	movs	r2, #0
 8012284:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801228e:	2b00      	cmp	r3, #0
 8012290:	d014      	beq.n	80122bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012298:	685b      	ldr	r3, [r3, #4]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d00e      	beq.n	80122bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80122a4:	685b      	ldr	r3, [r3, #4]
 80122a6:	687a      	ldr	r2, [r7, #4]
 80122a8:	6852      	ldr	r2, [r2, #4]
 80122aa:	b2d2      	uxtb	r2, r2
 80122ac:	4611      	mov	r1, r2
 80122ae:	6878      	ldr	r0, [r7, #4]
 80122b0:	4798      	blx	r3
 80122b2:	4603      	mov	r3, r0
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d001      	beq.n	80122bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80122b8:	2303      	movs	r3, #3
 80122ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80122bc:	2340      	movs	r3, #64	@ 0x40
 80122be:	2200      	movs	r2, #0
 80122c0:	2100      	movs	r1, #0
 80122c2:	6878      	ldr	r0, [r7, #4]
 80122c4:	f001 fc83 	bl	8013bce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	2201      	movs	r2, #1
 80122cc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	2240      	movs	r2, #64	@ 0x40
 80122d4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80122d8:	2340      	movs	r3, #64	@ 0x40
 80122da:	2200      	movs	r2, #0
 80122dc:	2180      	movs	r1, #128	@ 0x80
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f001 fc75 	bl	8013bce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	2201      	movs	r2, #1
 80122e8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	2240      	movs	r2, #64	@ 0x40
 80122ee:	621a      	str	r2, [r3, #32]

  return ret;
 80122f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80122f2:	4618      	mov	r0, r3
 80122f4:	3710      	adds	r7, #16
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}

080122fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80122fa:	b480      	push	{r7}
 80122fc:	b083      	sub	sp, #12
 80122fe:	af00      	add	r7, sp, #0
 8012300:	6078      	str	r0, [r7, #4]
 8012302:	460b      	mov	r3, r1
 8012304:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	78fa      	ldrb	r2, [r7, #3]
 801230a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801230c:	2300      	movs	r3, #0
}
 801230e:	4618      	mov	r0, r3
 8012310:	370c      	adds	r7, #12
 8012312:	46bd      	mov	sp, r7
 8012314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012318:	4770      	bx	lr

0801231a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801231a:	b480      	push	{r7}
 801231c:	b083      	sub	sp, #12
 801231e:	af00      	add	r7, sp, #0
 8012320:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012328:	b2db      	uxtb	r3, r3
 801232a:	2b04      	cmp	r3, #4
 801232c:	d006      	beq.n	801233c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012334:	b2da      	uxtb	r2, r3
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	2204      	movs	r2, #4
 8012340:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8012344:	2300      	movs	r3, #0
}
 8012346:	4618      	mov	r0, r3
 8012348:	370c      	adds	r7, #12
 801234a:	46bd      	mov	sp, r7
 801234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012350:	4770      	bx	lr

08012352 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012352:	b480      	push	{r7}
 8012354:	b083      	sub	sp, #12
 8012356:	af00      	add	r7, sp, #0
 8012358:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012360:	b2db      	uxtb	r3, r3
 8012362:	2b04      	cmp	r3, #4
 8012364:	d106      	bne.n	8012374 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 801236c:	b2da      	uxtb	r2, r3
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8012374:	2300      	movs	r3, #0
}
 8012376:	4618      	mov	r0, r3
 8012378:	370c      	adds	r7, #12
 801237a:	46bd      	mov	sp, r7
 801237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012380:	4770      	bx	lr

08012382 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012382:	b580      	push	{r7, lr}
 8012384:	b082      	sub	sp, #8
 8012386:	af00      	add	r7, sp, #0
 8012388:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012390:	b2db      	uxtb	r3, r3
 8012392:	2b03      	cmp	r3, #3
 8012394:	d110      	bne.n	80123b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801239c:	2b00      	cmp	r3, #0
 801239e:	d00b      	beq.n	80123b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80123a6:	69db      	ldr	r3, [r3, #28]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d005      	beq.n	80123b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80123b2:	69db      	ldr	r3, [r3, #28]
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80123b8:	2300      	movs	r3, #0
}
 80123ba:	4618      	mov	r0, r3
 80123bc:	3708      	adds	r7, #8
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}

080123c2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80123c2:	b580      	push	{r7, lr}
 80123c4:	b082      	sub	sp, #8
 80123c6:	af00      	add	r7, sp, #0
 80123c8:	6078      	str	r0, [r7, #4]
 80123ca:	460b      	mov	r3, r1
 80123cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	32ae      	adds	r2, #174	@ 0xae
 80123d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d101      	bne.n	80123e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80123e0:	2303      	movs	r3, #3
 80123e2:	e01c      	b.n	801241e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80123ea:	b2db      	uxtb	r3, r3
 80123ec:	2b03      	cmp	r3, #3
 80123ee:	d115      	bne.n	801241c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	32ae      	adds	r2, #174	@ 0xae
 80123fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123fe:	6a1b      	ldr	r3, [r3, #32]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d00b      	beq.n	801241c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	32ae      	adds	r2, #174	@ 0xae
 801240e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012412:	6a1b      	ldr	r3, [r3, #32]
 8012414:	78fa      	ldrb	r2, [r7, #3]
 8012416:	4611      	mov	r1, r2
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801241c:	2300      	movs	r3, #0
}
 801241e:	4618      	mov	r0, r3
 8012420:	3708      	adds	r7, #8
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}

08012426 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012426:	b580      	push	{r7, lr}
 8012428:	b082      	sub	sp, #8
 801242a:	af00      	add	r7, sp, #0
 801242c:	6078      	str	r0, [r7, #4]
 801242e:	460b      	mov	r3, r1
 8012430:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	32ae      	adds	r2, #174	@ 0xae
 801243c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d101      	bne.n	8012448 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8012444:	2303      	movs	r3, #3
 8012446:	e01c      	b.n	8012482 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801244e:	b2db      	uxtb	r3, r3
 8012450:	2b03      	cmp	r3, #3
 8012452:	d115      	bne.n	8012480 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	32ae      	adds	r2, #174	@ 0xae
 801245e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012464:	2b00      	cmp	r3, #0
 8012466:	d00b      	beq.n	8012480 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	32ae      	adds	r2, #174	@ 0xae
 8012472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012478:	78fa      	ldrb	r2, [r7, #3]
 801247a:	4611      	mov	r1, r2
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012480:	2300      	movs	r3, #0
}
 8012482:	4618      	mov	r0, r3
 8012484:	3708      	adds	r7, #8
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}

0801248a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801248a:	b480      	push	{r7}
 801248c:	b083      	sub	sp, #12
 801248e:	af00      	add	r7, sp, #0
 8012490:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012492:	2300      	movs	r3, #0
}
 8012494:	4618      	mov	r0, r3
 8012496:	370c      	adds	r7, #12
 8012498:	46bd      	mov	sp, r7
 801249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249e:	4770      	bx	lr

080124a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b084      	sub	sp, #16
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80124a8:	2300      	movs	r3, #0
 80124aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	2201      	movs	r2, #1
 80124b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d00e      	beq.n	80124dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80124c4:	685b      	ldr	r3, [r3, #4]
 80124c6:	687a      	ldr	r2, [r7, #4]
 80124c8:	6852      	ldr	r2, [r2, #4]
 80124ca:	b2d2      	uxtb	r2, r2
 80124cc:	4611      	mov	r1, r2
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	4798      	blx	r3
 80124d2:	4603      	mov	r3, r0
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d001      	beq.n	80124dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80124d8:	2303      	movs	r3, #3
 80124da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80124dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80124de:	4618      	mov	r0, r3
 80124e0:	3710      	adds	r7, #16
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}

080124e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80124e6:	b480      	push	{r7}
 80124e8:	b083      	sub	sp, #12
 80124ea:	af00      	add	r7, sp, #0
 80124ec:	6078      	str	r0, [r7, #4]
 80124ee:	460b      	mov	r3, r1
 80124f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80124f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80124f4:	4618      	mov	r0, r3
 80124f6:	370c      	adds	r7, #12
 80124f8:	46bd      	mov	sp, r7
 80124fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fe:	4770      	bx	lr

08012500 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012500:	b480      	push	{r7}
 8012502:	b083      	sub	sp, #12
 8012504:	af00      	add	r7, sp, #0
 8012506:	6078      	str	r0, [r7, #4]
 8012508:	460b      	mov	r3, r1
 801250a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801250c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801250e:	4618      	mov	r0, r3
 8012510:	370c      	adds	r7, #12
 8012512:	46bd      	mov	sp, r7
 8012514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012518:	4770      	bx	lr

0801251a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801251a:	b580      	push	{r7, lr}
 801251c:	b086      	sub	sp, #24
 801251e:	af00      	add	r7, sp, #0
 8012520:	6078      	str	r0, [r7, #4]
 8012522:	460b      	mov	r3, r1
 8012524:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801252e:	2300      	movs	r3, #0
 8012530:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	885b      	ldrh	r3, [r3, #2]
 8012536:	b29b      	uxth	r3, r3
 8012538:	68fa      	ldr	r2, [r7, #12]
 801253a:	7812      	ldrb	r2, [r2, #0]
 801253c:	4293      	cmp	r3, r2
 801253e:	d91f      	bls.n	8012580 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	781b      	ldrb	r3, [r3, #0]
 8012544:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8012546:	e013      	b.n	8012570 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8012548:	f107 030a 	add.w	r3, r7, #10
 801254c:	4619      	mov	r1, r3
 801254e:	6978      	ldr	r0, [r7, #20]
 8012550:	f000 f81b 	bl	801258a <USBD_GetNextDesc>
 8012554:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8012556:	697b      	ldr	r3, [r7, #20]
 8012558:	785b      	ldrb	r3, [r3, #1]
 801255a:	2b05      	cmp	r3, #5
 801255c:	d108      	bne.n	8012570 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801255e:	697b      	ldr	r3, [r7, #20]
 8012560:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8012562:	693b      	ldr	r3, [r7, #16]
 8012564:	789b      	ldrb	r3, [r3, #2]
 8012566:	78fa      	ldrb	r2, [r7, #3]
 8012568:	429a      	cmp	r2, r3
 801256a:	d008      	beq.n	801257e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801256c:	2300      	movs	r3, #0
 801256e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	885b      	ldrh	r3, [r3, #2]
 8012574:	b29a      	uxth	r2, r3
 8012576:	897b      	ldrh	r3, [r7, #10]
 8012578:	429a      	cmp	r2, r3
 801257a:	d8e5      	bhi.n	8012548 <USBD_GetEpDesc+0x2e>
 801257c:	e000      	b.n	8012580 <USBD_GetEpDesc+0x66>
          break;
 801257e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8012580:	693b      	ldr	r3, [r7, #16]
}
 8012582:	4618      	mov	r0, r3
 8012584:	3718      	adds	r7, #24
 8012586:	46bd      	mov	sp, r7
 8012588:	bd80      	pop	{r7, pc}

0801258a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801258a:	b480      	push	{r7}
 801258c:	b085      	sub	sp, #20
 801258e:	af00      	add	r7, sp, #0
 8012590:	6078      	str	r0, [r7, #4]
 8012592:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8012598:	683b      	ldr	r3, [r7, #0]
 801259a:	881b      	ldrh	r3, [r3, #0]
 801259c:	68fa      	ldr	r2, [r7, #12]
 801259e:	7812      	ldrb	r2, [r2, #0]
 80125a0:	4413      	add	r3, r2
 80125a2:	b29a      	uxth	r2, r3
 80125a4:	683b      	ldr	r3, [r7, #0]
 80125a6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	781b      	ldrb	r3, [r3, #0]
 80125ac:	461a      	mov	r2, r3
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	4413      	add	r3, r2
 80125b2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80125b4:	68fb      	ldr	r3, [r7, #12]
}
 80125b6:	4618      	mov	r0, r3
 80125b8:	3714      	adds	r7, #20
 80125ba:	46bd      	mov	sp, r7
 80125bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c0:	4770      	bx	lr

080125c2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80125c2:	b480      	push	{r7}
 80125c4:	b087      	sub	sp, #28
 80125c6:	af00      	add	r7, sp, #0
 80125c8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	781b      	ldrb	r3, [r3, #0]
 80125d2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80125d4:	697b      	ldr	r3, [r7, #20]
 80125d6:	3301      	adds	r3, #1
 80125d8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80125da:	697b      	ldr	r3, [r7, #20]
 80125dc:	781b      	ldrb	r3, [r3, #0]
 80125de:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80125e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80125e4:	021b      	lsls	r3, r3, #8
 80125e6:	b21a      	sxth	r2, r3
 80125e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80125ec:	4313      	orrs	r3, r2
 80125ee:	b21b      	sxth	r3, r3
 80125f0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80125f2:	89fb      	ldrh	r3, [r7, #14]
}
 80125f4:	4618      	mov	r0, r3
 80125f6:	371c      	adds	r7, #28
 80125f8:	46bd      	mov	sp, r7
 80125fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fe:	4770      	bx	lr

08012600 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b084      	sub	sp, #16
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
 8012608:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801260a:	2300      	movs	r3, #0
 801260c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	781b      	ldrb	r3, [r3, #0]
 8012612:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012616:	2b40      	cmp	r3, #64	@ 0x40
 8012618:	d005      	beq.n	8012626 <USBD_StdDevReq+0x26>
 801261a:	2b40      	cmp	r3, #64	@ 0x40
 801261c:	d857      	bhi.n	80126ce <USBD_StdDevReq+0xce>
 801261e:	2b00      	cmp	r3, #0
 8012620:	d00f      	beq.n	8012642 <USBD_StdDevReq+0x42>
 8012622:	2b20      	cmp	r3, #32
 8012624:	d153      	bne.n	80126ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	32ae      	adds	r2, #174	@ 0xae
 8012630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012634:	689b      	ldr	r3, [r3, #8]
 8012636:	6839      	ldr	r1, [r7, #0]
 8012638:	6878      	ldr	r0, [r7, #4]
 801263a:	4798      	blx	r3
 801263c:	4603      	mov	r3, r0
 801263e:	73fb      	strb	r3, [r7, #15]
      break;
 8012640:	e04a      	b.n	80126d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	785b      	ldrb	r3, [r3, #1]
 8012646:	2b09      	cmp	r3, #9
 8012648:	d83b      	bhi.n	80126c2 <USBD_StdDevReq+0xc2>
 801264a:	a201      	add	r2, pc, #4	@ (adr r2, 8012650 <USBD_StdDevReq+0x50>)
 801264c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012650:	080126a5 	.word	0x080126a5
 8012654:	080126b9 	.word	0x080126b9
 8012658:	080126c3 	.word	0x080126c3
 801265c:	080126af 	.word	0x080126af
 8012660:	080126c3 	.word	0x080126c3
 8012664:	08012683 	.word	0x08012683
 8012668:	08012679 	.word	0x08012679
 801266c:	080126c3 	.word	0x080126c3
 8012670:	0801269b 	.word	0x0801269b
 8012674:	0801268d 	.word	0x0801268d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012678:	6839      	ldr	r1, [r7, #0]
 801267a:	6878      	ldr	r0, [r7, #4]
 801267c:	f000 fa3c 	bl	8012af8 <USBD_GetDescriptor>
          break;
 8012680:	e024      	b.n	80126cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012682:	6839      	ldr	r1, [r7, #0]
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f000 fbcb 	bl	8012e20 <USBD_SetAddress>
          break;
 801268a:	e01f      	b.n	80126cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801268c:	6839      	ldr	r1, [r7, #0]
 801268e:	6878      	ldr	r0, [r7, #4]
 8012690:	f000 fc0a 	bl	8012ea8 <USBD_SetConfig>
 8012694:	4603      	mov	r3, r0
 8012696:	73fb      	strb	r3, [r7, #15]
          break;
 8012698:	e018      	b.n	80126cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801269a:	6839      	ldr	r1, [r7, #0]
 801269c:	6878      	ldr	r0, [r7, #4]
 801269e:	f000 fcad 	bl	8012ffc <USBD_GetConfig>
          break;
 80126a2:	e013      	b.n	80126cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80126a4:	6839      	ldr	r1, [r7, #0]
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f000 fcde 	bl	8013068 <USBD_GetStatus>
          break;
 80126ac:	e00e      	b.n	80126cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80126ae:	6839      	ldr	r1, [r7, #0]
 80126b0:	6878      	ldr	r0, [r7, #4]
 80126b2:	f000 fd0d 	bl	80130d0 <USBD_SetFeature>
          break;
 80126b6:	e009      	b.n	80126cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80126b8:	6839      	ldr	r1, [r7, #0]
 80126ba:	6878      	ldr	r0, [r7, #4]
 80126bc:	f000 fd31 	bl	8013122 <USBD_ClrFeature>
          break;
 80126c0:	e004      	b.n	80126cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80126c2:	6839      	ldr	r1, [r7, #0]
 80126c4:	6878      	ldr	r0, [r7, #4]
 80126c6:	f000 fd88 	bl	80131da <USBD_CtlError>
          break;
 80126ca:	bf00      	nop
      }
      break;
 80126cc:	e004      	b.n	80126d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80126ce:	6839      	ldr	r1, [r7, #0]
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f000 fd82 	bl	80131da <USBD_CtlError>
      break;
 80126d6:	bf00      	nop
  }

  return ret;
 80126d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80126da:	4618      	mov	r0, r3
 80126dc:	3710      	adds	r7, #16
 80126de:	46bd      	mov	sp, r7
 80126e0:	bd80      	pop	{r7, pc}
 80126e2:	bf00      	nop

080126e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b084      	sub	sp, #16
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
 80126ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80126ee:	2300      	movs	r3, #0
 80126f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	781b      	ldrb	r3, [r3, #0]
 80126f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80126fa:	2b40      	cmp	r3, #64	@ 0x40
 80126fc:	d005      	beq.n	801270a <USBD_StdItfReq+0x26>
 80126fe:	2b40      	cmp	r3, #64	@ 0x40
 8012700:	d852      	bhi.n	80127a8 <USBD_StdItfReq+0xc4>
 8012702:	2b00      	cmp	r3, #0
 8012704:	d001      	beq.n	801270a <USBD_StdItfReq+0x26>
 8012706:	2b20      	cmp	r3, #32
 8012708:	d14e      	bne.n	80127a8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012710:	b2db      	uxtb	r3, r3
 8012712:	3b01      	subs	r3, #1
 8012714:	2b02      	cmp	r3, #2
 8012716:	d840      	bhi.n	801279a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	889b      	ldrh	r3, [r3, #4]
 801271c:	b2db      	uxtb	r3, r3
 801271e:	2b01      	cmp	r3, #1
 8012720:	d836      	bhi.n	8012790 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8012722:	683b      	ldr	r3, [r7, #0]
 8012724:	889b      	ldrh	r3, [r3, #4]
 8012726:	b2db      	uxtb	r3, r3
 8012728:	4619      	mov	r1, r3
 801272a:	6878      	ldr	r0, [r7, #4]
 801272c:	f7ff fedb 	bl	80124e6 <USBD_CoreFindIF>
 8012730:	4603      	mov	r3, r0
 8012732:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012734:	7bbb      	ldrb	r3, [r7, #14]
 8012736:	2bff      	cmp	r3, #255	@ 0xff
 8012738:	d01d      	beq.n	8012776 <USBD_StdItfReq+0x92>
 801273a:	7bbb      	ldrb	r3, [r7, #14]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d11a      	bne.n	8012776 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8012740:	7bba      	ldrb	r2, [r7, #14]
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	32ae      	adds	r2, #174	@ 0xae
 8012746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801274a:	689b      	ldr	r3, [r3, #8]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d00f      	beq.n	8012770 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8012750:	7bba      	ldrb	r2, [r7, #14]
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012758:	7bba      	ldrb	r2, [r7, #14]
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	32ae      	adds	r2, #174	@ 0xae
 801275e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012762:	689b      	ldr	r3, [r3, #8]
 8012764:	6839      	ldr	r1, [r7, #0]
 8012766:	6878      	ldr	r0, [r7, #4]
 8012768:	4798      	blx	r3
 801276a:	4603      	mov	r3, r0
 801276c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801276e:	e004      	b.n	801277a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8012770:	2303      	movs	r3, #3
 8012772:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012774:	e001      	b.n	801277a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8012776:	2303      	movs	r3, #3
 8012778:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801277a:	683b      	ldr	r3, [r7, #0]
 801277c:	88db      	ldrh	r3, [r3, #6]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d110      	bne.n	80127a4 <USBD_StdItfReq+0xc0>
 8012782:	7bfb      	ldrb	r3, [r7, #15]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d10d      	bne.n	80127a4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012788:	6878      	ldr	r0, [r7, #4]
 801278a:	f000 fdfd 	bl	8013388 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801278e:	e009      	b.n	80127a4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8012790:	6839      	ldr	r1, [r7, #0]
 8012792:	6878      	ldr	r0, [r7, #4]
 8012794:	f000 fd21 	bl	80131da <USBD_CtlError>
          break;
 8012798:	e004      	b.n	80127a4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801279a:	6839      	ldr	r1, [r7, #0]
 801279c:	6878      	ldr	r0, [r7, #4]
 801279e:	f000 fd1c 	bl	80131da <USBD_CtlError>
          break;
 80127a2:	e000      	b.n	80127a6 <USBD_StdItfReq+0xc2>
          break;
 80127a4:	bf00      	nop
      }
      break;
 80127a6:	e004      	b.n	80127b2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80127a8:	6839      	ldr	r1, [r7, #0]
 80127aa:	6878      	ldr	r0, [r7, #4]
 80127ac:	f000 fd15 	bl	80131da <USBD_CtlError>
      break;
 80127b0:	bf00      	nop
  }

  return ret;
 80127b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80127b4:	4618      	mov	r0, r3
 80127b6:	3710      	adds	r7, #16
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd80      	pop	{r7, pc}

080127bc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80127bc:	b580      	push	{r7, lr}
 80127be:	b084      	sub	sp, #16
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
 80127c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80127c6:	2300      	movs	r3, #0
 80127c8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80127ca:	683b      	ldr	r3, [r7, #0]
 80127cc:	889b      	ldrh	r3, [r3, #4]
 80127ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	781b      	ldrb	r3, [r3, #0]
 80127d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80127d8:	2b40      	cmp	r3, #64	@ 0x40
 80127da:	d007      	beq.n	80127ec <USBD_StdEPReq+0x30>
 80127dc:	2b40      	cmp	r3, #64	@ 0x40
 80127de:	f200 817f 	bhi.w	8012ae0 <USBD_StdEPReq+0x324>
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d02a      	beq.n	801283c <USBD_StdEPReq+0x80>
 80127e6:	2b20      	cmp	r3, #32
 80127e8:	f040 817a 	bne.w	8012ae0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80127ec:	7bbb      	ldrb	r3, [r7, #14]
 80127ee:	4619      	mov	r1, r3
 80127f0:	6878      	ldr	r0, [r7, #4]
 80127f2:	f7ff fe85 	bl	8012500 <USBD_CoreFindEP>
 80127f6:	4603      	mov	r3, r0
 80127f8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80127fa:	7b7b      	ldrb	r3, [r7, #13]
 80127fc:	2bff      	cmp	r3, #255	@ 0xff
 80127fe:	f000 8174 	beq.w	8012aea <USBD_StdEPReq+0x32e>
 8012802:	7b7b      	ldrb	r3, [r7, #13]
 8012804:	2b00      	cmp	r3, #0
 8012806:	f040 8170 	bne.w	8012aea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801280a:	7b7a      	ldrb	r2, [r7, #13]
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8012812:	7b7a      	ldrb	r2, [r7, #13]
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	32ae      	adds	r2, #174	@ 0xae
 8012818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801281c:	689b      	ldr	r3, [r3, #8]
 801281e:	2b00      	cmp	r3, #0
 8012820:	f000 8163 	beq.w	8012aea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8012824:	7b7a      	ldrb	r2, [r7, #13]
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	32ae      	adds	r2, #174	@ 0xae
 801282a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801282e:	689b      	ldr	r3, [r3, #8]
 8012830:	6839      	ldr	r1, [r7, #0]
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	4798      	blx	r3
 8012836:	4603      	mov	r3, r0
 8012838:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801283a:	e156      	b.n	8012aea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801283c:	683b      	ldr	r3, [r7, #0]
 801283e:	785b      	ldrb	r3, [r3, #1]
 8012840:	2b03      	cmp	r3, #3
 8012842:	d008      	beq.n	8012856 <USBD_StdEPReq+0x9a>
 8012844:	2b03      	cmp	r3, #3
 8012846:	f300 8145 	bgt.w	8012ad4 <USBD_StdEPReq+0x318>
 801284a:	2b00      	cmp	r3, #0
 801284c:	f000 809b 	beq.w	8012986 <USBD_StdEPReq+0x1ca>
 8012850:	2b01      	cmp	r3, #1
 8012852:	d03c      	beq.n	80128ce <USBD_StdEPReq+0x112>
 8012854:	e13e      	b.n	8012ad4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801285c:	b2db      	uxtb	r3, r3
 801285e:	2b02      	cmp	r3, #2
 8012860:	d002      	beq.n	8012868 <USBD_StdEPReq+0xac>
 8012862:	2b03      	cmp	r3, #3
 8012864:	d016      	beq.n	8012894 <USBD_StdEPReq+0xd8>
 8012866:	e02c      	b.n	80128c2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012868:	7bbb      	ldrb	r3, [r7, #14]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d00d      	beq.n	801288a <USBD_StdEPReq+0xce>
 801286e:	7bbb      	ldrb	r3, [r7, #14]
 8012870:	2b80      	cmp	r3, #128	@ 0x80
 8012872:	d00a      	beq.n	801288a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012874:	7bbb      	ldrb	r3, [r7, #14]
 8012876:	4619      	mov	r1, r3
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f001 f9ed 	bl	8013c58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801287e:	2180      	movs	r1, #128	@ 0x80
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	f001 f9e9 	bl	8013c58 <USBD_LL_StallEP>
 8012886:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012888:	e020      	b.n	80128cc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801288a:	6839      	ldr	r1, [r7, #0]
 801288c:	6878      	ldr	r0, [r7, #4]
 801288e:	f000 fca4 	bl	80131da <USBD_CtlError>
              break;
 8012892:	e01b      	b.n	80128cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	885b      	ldrh	r3, [r3, #2]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d10e      	bne.n	80128ba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801289c:	7bbb      	ldrb	r3, [r7, #14]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d00b      	beq.n	80128ba <USBD_StdEPReq+0xfe>
 80128a2:	7bbb      	ldrb	r3, [r7, #14]
 80128a4:	2b80      	cmp	r3, #128	@ 0x80
 80128a6:	d008      	beq.n	80128ba <USBD_StdEPReq+0xfe>
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	88db      	ldrh	r3, [r3, #6]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d104      	bne.n	80128ba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80128b0:	7bbb      	ldrb	r3, [r7, #14]
 80128b2:	4619      	mov	r1, r3
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f001 f9cf 	bl	8013c58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80128ba:	6878      	ldr	r0, [r7, #4]
 80128bc:	f000 fd64 	bl	8013388 <USBD_CtlSendStatus>

              break;
 80128c0:	e004      	b.n	80128cc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80128c2:	6839      	ldr	r1, [r7, #0]
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f000 fc88 	bl	80131da <USBD_CtlError>
              break;
 80128ca:	bf00      	nop
          }
          break;
 80128cc:	e107      	b.n	8012ade <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80128d4:	b2db      	uxtb	r3, r3
 80128d6:	2b02      	cmp	r3, #2
 80128d8:	d002      	beq.n	80128e0 <USBD_StdEPReq+0x124>
 80128da:	2b03      	cmp	r3, #3
 80128dc:	d016      	beq.n	801290c <USBD_StdEPReq+0x150>
 80128de:	e04b      	b.n	8012978 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80128e0:	7bbb      	ldrb	r3, [r7, #14]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d00d      	beq.n	8012902 <USBD_StdEPReq+0x146>
 80128e6:	7bbb      	ldrb	r3, [r7, #14]
 80128e8:	2b80      	cmp	r3, #128	@ 0x80
 80128ea:	d00a      	beq.n	8012902 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80128ec:	7bbb      	ldrb	r3, [r7, #14]
 80128ee:	4619      	mov	r1, r3
 80128f0:	6878      	ldr	r0, [r7, #4]
 80128f2:	f001 f9b1 	bl	8013c58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80128f6:	2180      	movs	r1, #128	@ 0x80
 80128f8:	6878      	ldr	r0, [r7, #4]
 80128fa:	f001 f9ad 	bl	8013c58 <USBD_LL_StallEP>
 80128fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012900:	e040      	b.n	8012984 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8012902:	6839      	ldr	r1, [r7, #0]
 8012904:	6878      	ldr	r0, [r7, #4]
 8012906:	f000 fc68 	bl	80131da <USBD_CtlError>
              break;
 801290a:	e03b      	b.n	8012984 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	885b      	ldrh	r3, [r3, #2]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d136      	bne.n	8012982 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012914:	7bbb      	ldrb	r3, [r7, #14]
 8012916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801291a:	2b00      	cmp	r3, #0
 801291c:	d004      	beq.n	8012928 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801291e:	7bbb      	ldrb	r3, [r7, #14]
 8012920:	4619      	mov	r1, r3
 8012922:	6878      	ldr	r0, [r7, #4]
 8012924:	f001 f9b7 	bl	8013c96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f000 fd2d 	bl	8013388 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801292e:	7bbb      	ldrb	r3, [r7, #14]
 8012930:	4619      	mov	r1, r3
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	f7ff fde4 	bl	8012500 <USBD_CoreFindEP>
 8012938:	4603      	mov	r3, r0
 801293a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801293c:	7b7b      	ldrb	r3, [r7, #13]
 801293e:	2bff      	cmp	r3, #255	@ 0xff
 8012940:	d01f      	beq.n	8012982 <USBD_StdEPReq+0x1c6>
 8012942:	7b7b      	ldrb	r3, [r7, #13]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d11c      	bne.n	8012982 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8012948:	7b7a      	ldrb	r2, [r7, #13]
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8012950:	7b7a      	ldrb	r2, [r7, #13]
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	32ae      	adds	r2, #174	@ 0xae
 8012956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801295a:	689b      	ldr	r3, [r3, #8]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d010      	beq.n	8012982 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012960:	7b7a      	ldrb	r2, [r7, #13]
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	32ae      	adds	r2, #174	@ 0xae
 8012966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801296a:	689b      	ldr	r3, [r3, #8]
 801296c:	6839      	ldr	r1, [r7, #0]
 801296e:	6878      	ldr	r0, [r7, #4]
 8012970:	4798      	blx	r3
 8012972:	4603      	mov	r3, r0
 8012974:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8012976:	e004      	b.n	8012982 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8012978:	6839      	ldr	r1, [r7, #0]
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f000 fc2d 	bl	80131da <USBD_CtlError>
              break;
 8012980:	e000      	b.n	8012984 <USBD_StdEPReq+0x1c8>
              break;
 8012982:	bf00      	nop
          }
          break;
 8012984:	e0ab      	b.n	8012ade <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801298c:	b2db      	uxtb	r3, r3
 801298e:	2b02      	cmp	r3, #2
 8012990:	d002      	beq.n	8012998 <USBD_StdEPReq+0x1dc>
 8012992:	2b03      	cmp	r3, #3
 8012994:	d032      	beq.n	80129fc <USBD_StdEPReq+0x240>
 8012996:	e097      	b.n	8012ac8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012998:	7bbb      	ldrb	r3, [r7, #14]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d007      	beq.n	80129ae <USBD_StdEPReq+0x1f2>
 801299e:	7bbb      	ldrb	r3, [r7, #14]
 80129a0:	2b80      	cmp	r3, #128	@ 0x80
 80129a2:	d004      	beq.n	80129ae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80129a4:	6839      	ldr	r1, [r7, #0]
 80129a6:	6878      	ldr	r0, [r7, #4]
 80129a8:	f000 fc17 	bl	80131da <USBD_CtlError>
                break;
 80129ac:	e091      	b.n	8012ad2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80129ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	da0b      	bge.n	80129ce <USBD_StdEPReq+0x212>
 80129b6:	7bbb      	ldrb	r3, [r7, #14]
 80129b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80129bc:	4613      	mov	r3, r2
 80129be:	009b      	lsls	r3, r3, #2
 80129c0:	4413      	add	r3, r2
 80129c2:	009b      	lsls	r3, r3, #2
 80129c4:	3310      	adds	r3, #16
 80129c6:	687a      	ldr	r2, [r7, #4]
 80129c8:	4413      	add	r3, r2
 80129ca:	3304      	adds	r3, #4
 80129cc:	e00b      	b.n	80129e6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80129ce:	7bbb      	ldrb	r3, [r7, #14]
 80129d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80129d4:	4613      	mov	r3, r2
 80129d6:	009b      	lsls	r3, r3, #2
 80129d8:	4413      	add	r3, r2
 80129da:	009b      	lsls	r3, r3, #2
 80129dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80129e0:	687a      	ldr	r2, [r7, #4]
 80129e2:	4413      	add	r3, r2
 80129e4:	3304      	adds	r3, #4
 80129e6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80129e8:	68bb      	ldr	r3, [r7, #8]
 80129ea:	2200      	movs	r2, #0
 80129ec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80129ee:	68bb      	ldr	r3, [r7, #8]
 80129f0:	2202      	movs	r2, #2
 80129f2:	4619      	mov	r1, r3
 80129f4:	6878      	ldr	r0, [r7, #4]
 80129f6:	f000 fc6d 	bl	80132d4 <USBD_CtlSendData>
              break;
 80129fa:	e06a      	b.n	8012ad2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80129fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	da11      	bge.n	8012a28 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012a04:	7bbb      	ldrb	r3, [r7, #14]
 8012a06:	f003 020f 	and.w	r2, r3, #15
 8012a0a:	6879      	ldr	r1, [r7, #4]
 8012a0c:	4613      	mov	r3, r2
 8012a0e:	009b      	lsls	r3, r3, #2
 8012a10:	4413      	add	r3, r2
 8012a12:	009b      	lsls	r3, r3, #2
 8012a14:	440b      	add	r3, r1
 8012a16:	3324      	adds	r3, #36	@ 0x24
 8012a18:	881b      	ldrh	r3, [r3, #0]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d117      	bne.n	8012a4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012a1e:	6839      	ldr	r1, [r7, #0]
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	f000 fbda 	bl	80131da <USBD_CtlError>
                  break;
 8012a26:	e054      	b.n	8012ad2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012a28:	7bbb      	ldrb	r3, [r7, #14]
 8012a2a:	f003 020f 	and.w	r2, r3, #15
 8012a2e:	6879      	ldr	r1, [r7, #4]
 8012a30:	4613      	mov	r3, r2
 8012a32:	009b      	lsls	r3, r3, #2
 8012a34:	4413      	add	r3, r2
 8012a36:	009b      	lsls	r3, r3, #2
 8012a38:	440b      	add	r3, r1
 8012a3a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012a3e:	881b      	ldrh	r3, [r3, #0]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d104      	bne.n	8012a4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012a44:	6839      	ldr	r1, [r7, #0]
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f000 fbc7 	bl	80131da <USBD_CtlError>
                  break;
 8012a4c:	e041      	b.n	8012ad2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012a4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	da0b      	bge.n	8012a6e <USBD_StdEPReq+0x2b2>
 8012a56:	7bbb      	ldrb	r3, [r7, #14]
 8012a58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012a5c:	4613      	mov	r3, r2
 8012a5e:	009b      	lsls	r3, r3, #2
 8012a60:	4413      	add	r3, r2
 8012a62:	009b      	lsls	r3, r3, #2
 8012a64:	3310      	adds	r3, #16
 8012a66:	687a      	ldr	r2, [r7, #4]
 8012a68:	4413      	add	r3, r2
 8012a6a:	3304      	adds	r3, #4
 8012a6c:	e00b      	b.n	8012a86 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012a6e:	7bbb      	ldrb	r3, [r7, #14]
 8012a70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012a74:	4613      	mov	r3, r2
 8012a76:	009b      	lsls	r3, r3, #2
 8012a78:	4413      	add	r3, r2
 8012a7a:	009b      	lsls	r3, r3, #2
 8012a7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012a80:	687a      	ldr	r2, [r7, #4]
 8012a82:	4413      	add	r3, r2
 8012a84:	3304      	adds	r3, #4
 8012a86:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012a88:	7bbb      	ldrb	r3, [r7, #14]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d002      	beq.n	8012a94 <USBD_StdEPReq+0x2d8>
 8012a8e:	7bbb      	ldrb	r3, [r7, #14]
 8012a90:	2b80      	cmp	r3, #128	@ 0x80
 8012a92:	d103      	bne.n	8012a9c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8012a94:	68bb      	ldr	r3, [r7, #8]
 8012a96:	2200      	movs	r2, #0
 8012a98:	601a      	str	r2, [r3, #0]
 8012a9a:	e00e      	b.n	8012aba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012a9c:	7bbb      	ldrb	r3, [r7, #14]
 8012a9e:	4619      	mov	r1, r3
 8012aa0:	6878      	ldr	r0, [r7, #4]
 8012aa2:	f001 f917 	bl	8013cd4 <USBD_LL_IsStallEP>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d003      	beq.n	8012ab4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8012aac:	68bb      	ldr	r3, [r7, #8]
 8012aae:	2201      	movs	r2, #1
 8012ab0:	601a      	str	r2, [r3, #0]
 8012ab2:	e002      	b.n	8012aba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	2202      	movs	r2, #2
 8012abe:	4619      	mov	r1, r3
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f000 fc07 	bl	80132d4 <USBD_CtlSendData>
              break;
 8012ac6:	e004      	b.n	8012ad2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8012ac8:	6839      	ldr	r1, [r7, #0]
 8012aca:	6878      	ldr	r0, [r7, #4]
 8012acc:	f000 fb85 	bl	80131da <USBD_CtlError>
              break;
 8012ad0:	bf00      	nop
          }
          break;
 8012ad2:	e004      	b.n	8012ade <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8012ad4:	6839      	ldr	r1, [r7, #0]
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f000 fb7f 	bl	80131da <USBD_CtlError>
          break;
 8012adc:	bf00      	nop
      }
      break;
 8012ade:	e005      	b.n	8012aec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8012ae0:	6839      	ldr	r1, [r7, #0]
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	f000 fb79 	bl	80131da <USBD_CtlError>
      break;
 8012ae8:	e000      	b.n	8012aec <USBD_StdEPReq+0x330>
      break;
 8012aea:	bf00      	nop
  }

  return ret;
 8012aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	3710      	adds	r7, #16
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}
	...

08012af8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b084      	sub	sp, #16
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
 8012b00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012b02:	2300      	movs	r3, #0
 8012b04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012b06:	2300      	movs	r3, #0
 8012b08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	885b      	ldrh	r3, [r3, #2]
 8012b12:	0a1b      	lsrs	r3, r3, #8
 8012b14:	b29b      	uxth	r3, r3
 8012b16:	3b01      	subs	r3, #1
 8012b18:	2b0e      	cmp	r3, #14
 8012b1a:	f200 8152 	bhi.w	8012dc2 <USBD_GetDescriptor+0x2ca>
 8012b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8012b24 <USBD_GetDescriptor+0x2c>)
 8012b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b24:	08012b95 	.word	0x08012b95
 8012b28:	08012bad 	.word	0x08012bad
 8012b2c:	08012bed 	.word	0x08012bed
 8012b30:	08012dc3 	.word	0x08012dc3
 8012b34:	08012dc3 	.word	0x08012dc3
 8012b38:	08012d63 	.word	0x08012d63
 8012b3c:	08012d8f 	.word	0x08012d8f
 8012b40:	08012dc3 	.word	0x08012dc3
 8012b44:	08012dc3 	.word	0x08012dc3
 8012b48:	08012dc3 	.word	0x08012dc3
 8012b4c:	08012dc3 	.word	0x08012dc3
 8012b50:	08012dc3 	.word	0x08012dc3
 8012b54:	08012dc3 	.word	0x08012dc3
 8012b58:	08012dc3 	.word	0x08012dc3
 8012b5c:	08012b61 	.word	0x08012b61
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b66:	69db      	ldr	r3, [r3, #28]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d00b      	beq.n	8012b84 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b72:	69db      	ldr	r3, [r3, #28]
 8012b74:	687a      	ldr	r2, [r7, #4]
 8012b76:	7c12      	ldrb	r2, [r2, #16]
 8012b78:	f107 0108 	add.w	r1, r7, #8
 8012b7c:	4610      	mov	r0, r2
 8012b7e:	4798      	blx	r3
 8012b80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012b82:	e126      	b.n	8012dd2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012b84:	6839      	ldr	r1, [r7, #0]
 8012b86:	6878      	ldr	r0, [r7, #4]
 8012b88:	f000 fb27 	bl	80131da <USBD_CtlError>
        err++;
 8012b8c:	7afb      	ldrb	r3, [r7, #11]
 8012b8e:	3301      	adds	r3, #1
 8012b90:	72fb      	strb	r3, [r7, #11]
      break;
 8012b92:	e11e      	b.n	8012dd2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	687a      	ldr	r2, [r7, #4]
 8012b9e:	7c12      	ldrb	r2, [r2, #16]
 8012ba0:	f107 0108 	add.w	r1, r7, #8
 8012ba4:	4610      	mov	r0, r2
 8012ba6:	4798      	blx	r3
 8012ba8:	60f8      	str	r0, [r7, #12]
      break;
 8012baa:	e112      	b.n	8012dd2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	7c1b      	ldrb	r3, [r3, #16]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d10d      	bne.n	8012bd0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012bbc:	f107 0208 	add.w	r2, r7, #8
 8012bc0:	4610      	mov	r0, r2
 8012bc2:	4798      	blx	r3
 8012bc4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	3301      	adds	r3, #1
 8012bca:	2202      	movs	r2, #2
 8012bcc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012bce:	e100      	b.n	8012dd2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bd8:	f107 0208 	add.w	r2, r7, #8
 8012bdc:	4610      	mov	r0, r2
 8012bde:	4798      	blx	r3
 8012be0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	3301      	adds	r3, #1
 8012be6:	2202      	movs	r2, #2
 8012be8:	701a      	strb	r2, [r3, #0]
      break;
 8012bea:	e0f2      	b.n	8012dd2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	885b      	ldrh	r3, [r3, #2]
 8012bf0:	b2db      	uxtb	r3, r3
 8012bf2:	2b05      	cmp	r3, #5
 8012bf4:	f200 80ac 	bhi.w	8012d50 <USBD_GetDescriptor+0x258>
 8012bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8012c00 <USBD_GetDescriptor+0x108>)
 8012bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bfe:	bf00      	nop
 8012c00:	08012c19 	.word	0x08012c19
 8012c04:	08012c4d 	.word	0x08012c4d
 8012c08:	08012c81 	.word	0x08012c81
 8012c0c:	08012cb5 	.word	0x08012cb5
 8012c10:	08012ce9 	.word	0x08012ce9
 8012c14:	08012d1d 	.word	0x08012d1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c1e:	685b      	ldr	r3, [r3, #4]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d00b      	beq.n	8012c3c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c2a:	685b      	ldr	r3, [r3, #4]
 8012c2c:	687a      	ldr	r2, [r7, #4]
 8012c2e:	7c12      	ldrb	r2, [r2, #16]
 8012c30:	f107 0108 	add.w	r1, r7, #8
 8012c34:	4610      	mov	r0, r2
 8012c36:	4798      	blx	r3
 8012c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c3a:	e091      	b.n	8012d60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c3c:	6839      	ldr	r1, [r7, #0]
 8012c3e:	6878      	ldr	r0, [r7, #4]
 8012c40:	f000 facb 	bl	80131da <USBD_CtlError>
            err++;
 8012c44:	7afb      	ldrb	r3, [r7, #11]
 8012c46:	3301      	adds	r3, #1
 8012c48:	72fb      	strb	r3, [r7, #11]
          break;
 8012c4a:	e089      	b.n	8012d60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c52:	689b      	ldr	r3, [r3, #8]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d00b      	beq.n	8012c70 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c5e:	689b      	ldr	r3, [r3, #8]
 8012c60:	687a      	ldr	r2, [r7, #4]
 8012c62:	7c12      	ldrb	r2, [r2, #16]
 8012c64:	f107 0108 	add.w	r1, r7, #8
 8012c68:	4610      	mov	r0, r2
 8012c6a:	4798      	blx	r3
 8012c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c6e:	e077      	b.n	8012d60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c70:	6839      	ldr	r1, [r7, #0]
 8012c72:	6878      	ldr	r0, [r7, #4]
 8012c74:	f000 fab1 	bl	80131da <USBD_CtlError>
            err++;
 8012c78:	7afb      	ldrb	r3, [r7, #11]
 8012c7a:	3301      	adds	r3, #1
 8012c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8012c7e:	e06f      	b.n	8012d60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c86:	68db      	ldr	r3, [r3, #12]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d00b      	beq.n	8012ca4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012c92:	68db      	ldr	r3, [r3, #12]
 8012c94:	687a      	ldr	r2, [r7, #4]
 8012c96:	7c12      	ldrb	r2, [r2, #16]
 8012c98:	f107 0108 	add.w	r1, r7, #8
 8012c9c:	4610      	mov	r0, r2
 8012c9e:	4798      	blx	r3
 8012ca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012ca2:	e05d      	b.n	8012d60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012ca4:	6839      	ldr	r1, [r7, #0]
 8012ca6:	6878      	ldr	r0, [r7, #4]
 8012ca8:	f000 fa97 	bl	80131da <USBD_CtlError>
            err++;
 8012cac:	7afb      	ldrb	r3, [r7, #11]
 8012cae:	3301      	adds	r3, #1
 8012cb0:	72fb      	strb	r3, [r7, #11]
          break;
 8012cb2:	e055      	b.n	8012d60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012cba:	691b      	ldr	r3, [r3, #16]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d00b      	beq.n	8012cd8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012cc6:	691b      	ldr	r3, [r3, #16]
 8012cc8:	687a      	ldr	r2, [r7, #4]
 8012cca:	7c12      	ldrb	r2, [r2, #16]
 8012ccc:	f107 0108 	add.w	r1, r7, #8
 8012cd0:	4610      	mov	r0, r2
 8012cd2:	4798      	blx	r3
 8012cd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012cd6:	e043      	b.n	8012d60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012cd8:	6839      	ldr	r1, [r7, #0]
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	f000 fa7d 	bl	80131da <USBD_CtlError>
            err++;
 8012ce0:	7afb      	ldrb	r3, [r7, #11]
 8012ce2:	3301      	adds	r3, #1
 8012ce4:	72fb      	strb	r3, [r7, #11]
          break;
 8012ce6:	e03b      	b.n	8012d60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012cee:	695b      	ldr	r3, [r3, #20]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d00b      	beq.n	8012d0c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012cfa:	695b      	ldr	r3, [r3, #20]
 8012cfc:	687a      	ldr	r2, [r7, #4]
 8012cfe:	7c12      	ldrb	r2, [r2, #16]
 8012d00:	f107 0108 	add.w	r1, r7, #8
 8012d04:	4610      	mov	r0, r2
 8012d06:	4798      	blx	r3
 8012d08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012d0a:	e029      	b.n	8012d60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012d0c:	6839      	ldr	r1, [r7, #0]
 8012d0e:	6878      	ldr	r0, [r7, #4]
 8012d10:	f000 fa63 	bl	80131da <USBD_CtlError>
            err++;
 8012d14:	7afb      	ldrb	r3, [r7, #11]
 8012d16:	3301      	adds	r3, #1
 8012d18:	72fb      	strb	r3, [r7, #11]
          break;
 8012d1a:	e021      	b.n	8012d60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012d22:	699b      	ldr	r3, [r3, #24]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d00b      	beq.n	8012d40 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012d2e:	699b      	ldr	r3, [r3, #24]
 8012d30:	687a      	ldr	r2, [r7, #4]
 8012d32:	7c12      	ldrb	r2, [r2, #16]
 8012d34:	f107 0108 	add.w	r1, r7, #8
 8012d38:	4610      	mov	r0, r2
 8012d3a:	4798      	blx	r3
 8012d3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012d3e:	e00f      	b.n	8012d60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012d40:	6839      	ldr	r1, [r7, #0]
 8012d42:	6878      	ldr	r0, [r7, #4]
 8012d44:	f000 fa49 	bl	80131da <USBD_CtlError>
            err++;
 8012d48:	7afb      	ldrb	r3, [r7, #11]
 8012d4a:	3301      	adds	r3, #1
 8012d4c:	72fb      	strb	r3, [r7, #11]
          break;
 8012d4e:	e007      	b.n	8012d60 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012d50:	6839      	ldr	r1, [r7, #0]
 8012d52:	6878      	ldr	r0, [r7, #4]
 8012d54:	f000 fa41 	bl	80131da <USBD_CtlError>
          err++;
 8012d58:	7afb      	ldrb	r3, [r7, #11]
 8012d5a:	3301      	adds	r3, #1
 8012d5c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012d5e:	bf00      	nop
      }
      break;
 8012d60:	e037      	b.n	8012dd2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	7c1b      	ldrb	r3, [r3, #16]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d109      	bne.n	8012d7e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012d72:	f107 0208 	add.w	r2, r7, #8
 8012d76:	4610      	mov	r0, r2
 8012d78:	4798      	blx	r3
 8012d7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012d7c:	e029      	b.n	8012dd2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012d7e:	6839      	ldr	r1, [r7, #0]
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f000 fa2a 	bl	80131da <USBD_CtlError>
        err++;
 8012d86:	7afb      	ldrb	r3, [r7, #11]
 8012d88:	3301      	adds	r3, #1
 8012d8a:	72fb      	strb	r3, [r7, #11]
      break;
 8012d8c:	e021      	b.n	8012dd2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	7c1b      	ldrb	r3, [r3, #16]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d10d      	bne.n	8012db2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012d9e:	f107 0208 	add.w	r2, r7, #8
 8012da2:	4610      	mov	r0, r2
 8012da4:	4798      	blx	r3
 8012da6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	3301      	adds	r3, #1
 8012dac:	2207      	movs	r2, #7
 8012dae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012db0:	e00f      	b.n	8012dd2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012db2:	6839      	ldr	r1, [r7, #0]
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f000 fa10 	bl	80131da <USBD_CtlError>
        err++;
 8012dba:	7afb      	ldrb	r3, [r7, #11]
 8012dbc:	3301      	adds	r3, #1
 8012dbe:	72fb      	strb	r3, [r7, #11]
      break;
 8012dc0:	e007      	b.n	8012dd2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8012dc2:	6839      	ldr	r1, [r7, #0]
 8012dc4:	6878      	ldr	r0, [r7, #4]
 8012dc6:	f000 fa08 	bl	80131da <USBD_CtlError>
      err++;
 8012dca:	7afb      	ldrb	r3, [r7, #11]
 8012dcc:	3301      	adds	r3, #1
 8012dce:	72fb      	strb	r3, [r7, #11]
      break;
 8012dd0:	bf00      	nop
  }

  if (err != 0U)
 8012dd2:	7afb      	ldrb	r3, [r7, #11]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d11e      	bne.n	8012e16 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012dd8:	683b      	ldr	r3, [r7, #0]
 8012dda:	88db      	ldrh	r3, [r3, #6]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d016      	beq.n	8012e0e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012de0:	893b      	ldrh	r3, [r7, #8]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d00e      	beq.n	8012e04 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	88da      	ldrh	r2, [r3, #6]
 8012dea:	893b      	ldrh	r3, [r7, #8]
 8012dec:	4293      	cmp	r3, r2
 8012dee:	bf28      	it	cs
 8012df0:	4613      	movcs	r3, r2
 8012df2:	b29b      	uxth	r3, r3
 8012df4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012df6:	893b      	ldrh	r3, [r7, #8]
 8012df8:	461a      	mov	r2, r3
 8012dfa:	68f9      	ldr	r1, [r7, #12]
 8012dfc:	6878      	ldr	r0, [r7, #4]
 8012dfe:	f000 fa69 	bl	80132d4 <USBD_CtlSendData>
 8012e02:	e009      	b.n	8012e18 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012e04:	6839      	ldr	r1, [r7, #0]
 8012e06:	6878      	ldr	r0, [r7, #4]
 8012e08:	f000 f9e7 	bl	80131da <USBD_CtlError>
 8012e0c:	e004      	b.n	8012e18 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	f000 faba 	bl	8013388 <USBD_CtlSendStatus>
 8012e14:	e000      	b.n	8012e18 <USBD_GetDescriptor+0x320>
    return;
 8012e16:	bf00      	nop
  }
}
 8012e18:	3710      	adds	r7, #16
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	bd80      	pop	{r7, pc}
 8012e1e:	bf00      	nop

08012e20 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b084      	sub	sp, #16
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
 8012e28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012e2a:	683b      	ldr	r3, [r7, #0]
 8012e2c:	889b      	ldrh	r3, [r3, #4]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d131      	bne.n	8012e96 <USBD_SetAddress+0x76>
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	88db      	ldrh	r3, [r3, #6]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d12d      	bne.n	8012e96 <USBD_SetAddress+0x76>
 8012e3a:	683b      	ldr	r3, [r7, #0]
 8012e3c:	885b      	ldrh	r3, [r3, #2]
 8012e3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8012e40:	d829      	bhi.n	8012e96 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012e42:	683b      	ldr	r3, [r7, #0]
 8012e44:	885b      	ldrh	r3, [r3, #2]
 8012e46:	b2db      	uxtb	r3, r3
 8012e48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012e4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012e54:	b2db      	uxtb	r3, r3
 8012e56:	2b03      	cmp	r3, #3
 8012e58:	d104      	bne.n	8012e64 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012e5a:	6839      	ldr	r1, [r7, #0]
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f000 f9bc 	bl	80131da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e62:	e01d      	b.n	8012ea0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	7bfa      	ldrb	r2, [r7, #15]
 8012e68:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012e6c:	7bfb      	ldrb	r3, [r7, #15]
 8012e6e:	4619      	mov	r1, r3
 8012e70:	6878      	ldr	r0, [r7, #4]
 8012e72:	f000 ff5b 	bl	8013d2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012e76:	6878      	ldr	r0, [r7, #4]
 8012e78:	f000 fa86 	bl	8013388 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012e7c:	7bfb      	ldrb	r3, [r7, #15]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d004      	beq.n	8012e8c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2202      	movs	r2, #2
 8012e86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e8a:	e009      	b.n	8012ea0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	2201      	movs	r2, #1
 8012e90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e94:	e004      	b.n	8012ea0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012e96:	6839      	ldr	r1, [r7, #0]
 8012e98:	6878      	ldr	r0, [r7, #4]
 8012e9a:	f000 f99e 	bl	80131da <USBD_CtlError>
  }
}
 8012e9e:	bf00      	nop
 8012ea0:	bf00      	nop
 8012ea2:	3710      	adds	r7, #16
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd80      	pop	{r7, pc}

08012ea8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b084      	sub	sp, #16
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
 8012eb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	885b      	ldrh	r3, [r3, #2]
 8012eba:	b2da      	uxtb	r2, r3
 8012ebc:	4b4e      	ldr	r3, [pc, #312]	@ (8012ff8 <USBD_SetConfig+0x150>)
 8012ebe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012ec0:	4b4d      	ldr	r3, [pc, #308]	@ (8012ff8 <USBD_SetConfig+0x150>)
 8012ec2:	781b      	ldrb	r3, [r3, #0]
 8012ec4:	2b01      	cmp	r3, #1
 8012ec6:	d905      	bls.n	8012ed4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012ec8:	6839      	ldr	r1, [r7, #0]
 8012eca:	6878      	ldr	r0, [r7, #4]
 8012ecc:	f000 f985 	bl	80131da <USBD_CtlError>
    return USBD_FAIL;
 8012ed0:	2303      	movs	r3, #3
 8012ed2:	e08c      	b.n	8012fee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012eda:	b2db      	uxtb	r3, r3
 8012edc:	2b02      	cmp	r3, #2
 8012ede:	d002      	beq.n	8012ee6 <USBD_SetConfig+0x3e>
 8012ee0:	2b03      	cmp	r3, #3
 8012ee2:	d029      	beq.n	8012f38 <USBD_SetConfig+0x90>
 8012ee4:	e075      	b.n	8012fd2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012ee6:	4b44      	ldr	r3, [pc, #272]	@ (8012ff8 <USBD_SetConfig+0x150>)
 8012ee8:	781b      	ldrb	r3, [r3, #0]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d020      	beq.n	8012f30 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012eee:	4b42      	ldr	r3, [pc, #264]	@ (8012ff8 <USBD_SetConfig+0x150>)
 8012ef0:	781b      	ldrb	r3, [r3, #0]
 8012ef2:	461a      	mov	r2, r3
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012ef8:	4b3f      	ldr	r3, [pc, #252]	@ (8012ff8 <USBD_SetConfig+0x150>)
 8012efa:	781b      	ldrb	r3, [r3, #0]
 8012efc:	4619      	mov	r1, r3
 8012efe:	6878      	ldr	r0, [r7, #4]
 8012f00:	f7fe ffb9 	bl	8011e76 <USBD_SetClassConfig>
 8012f04:	4603      	mov	r3, r0
 8012f06:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012f08:	7bfb      	ldrb	r3, [r7, #15]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d008      	beq.n	8012f20 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012f0e:	6839      	ldr	r1, [r7, #0]
 8012f10:	6878      	ldr	r0, [r7, #4]
 8012f12:	f000 f962 	bl	80131da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	2202      	movs	r2, #2
 8012f1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012f1e:	e065      	b.n	8012fec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012f20:	6878      	ldr	r0, [r7, #4]
 8012f22:	f000 fa31 	bl	8013388 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	2203      	movs	r2, #3
 8012f2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012f2e:	e05d      	b.n	8012fec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012f30:	6878      	ldr	r0, [r7, #4]
 8012f32:	f000 fa29 	bl	8013388 <USBD_CtlSendStatus>
      break;
 8012f36:	e059      	b.n	8012fec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012f38:	4b2f      	ldr	r3, [pc, #188]	@ (8012ff8 <USBD_SetConfig+0x150>)
 8012f3a:	781b      	ldrb	r3, [r3, #0]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d112      	bne.n	8012f66 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2202      	movs	r2, #2
 8012f44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8012f48:	4b2b      	ldr	r3, [pc, #172]	@ (8012ff8 <USBD_SetConfig+0x150>)
 8012f4a:	781b      	ldrb	r3, [r3, #0]
 8012f4c:	461a      	mov	r2, r3
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012f52:	4b29      	ldr	r3, [pc, #164]	@ (8012ff8 <USBD_SetConfig+0x150>)
 8012f54:	781b      	ldrb	r3, [r3, #0]
 8012f56:	4619      	mov	r1, r3
 8012f58:	6878      	ldr	r0, [r7, #4]
 8012f5a:	f7fe ffa8 	bl	8011eae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012f5e:	6878      	ldr	r0, [r7, #4]
 8012f60:	f000 fa12 	bl	8013388 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012f64:	e042      	b.n	8012fec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012f66:	4b24      	ldr	r3, [pc, #144]	@ (8012ff8 <USBD_SetConfig+0x150>)
 8012f68:	781b      	ldrb	r3, [r3, #0]
 8012f6a:	461a      	mov	r2, r3
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	685b      	ldr	r3, [r3, #4]
 8012f70:	429a      	cmp	r2, r3
 8012f72:	d02a      	beq.n	8012fca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	685b      	ldr	r3, [r3, #4]
 8012f78:	b2db      	uxtb	r3, r3
 8012f7a:	4619      	mov	r1, r3
 8012f7c:	6878      	ldr	r0, [r7, #4]
 8012f7e:	f7fe ff96 	bl	8011eae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012f82:	4b1d      	ldr	r3, [pc, #116]	@ (8012ff8 <USBD_SetConfig+0x150>)
 8012f84:	781b      	ldrb	r3, [r3, #0]
 8012f86:	461a      	mov	r2, r3
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8012ff8 <USBD_SetConfig+0x150>)
 8012f8e:	781b      	ldrb	r3, [r3, #0]
 8012f90:	4619      	mov	r1, r3
 8012f92:	6878      	ldr	r0, [r7, #4]
 8012f94:	f7fe ff6f 	bl	8011e76 <USBD_SetClassConfig>
 8012f98:	4603      	mov	r3, r0
 8012f9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012f9c:	7bfb      	ldrb	r3, [r7, #15]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d00f      	beq.n	8012fc2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8012fa2:	6839      	ldr	r1, [r7, #0]
 8012fa4:	6878      	ldr	r0, [r7, #4]
 8012fa6:	f000 f918 	bl	80131da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	685b      	ldr	r3, [r3, #4]
 8012fae:	b2db      	uxtb	r3, r3
 8012fb0:	4619      	mov	r1, r3
 8012fb2:	6878      	ldr	r0, [r7, #4]
 8012fb4:	f7fe ff7b 	bl	8011eae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	2202      	movs	r2, #2
 8012fbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012fc0:	e014      	b.n	8012fec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012fc2:	6878      	ldr	r0, [r7, #4]
 8012fc4:	f000 f9e0 	bl	8013388 <USBD_CtlSendStatus>
      break;
 8012fc8:	e010      	b.n	8012fec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012fca:	6878      	ldr	r0, [r7, #4]
 8012fcc:	f000 f9dc 	bl	8013388 <USBD_CtlSendStatus>
      break;
 8012fd0:	e00c      	b.n	8012fec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8012fd2:	6839      	ldr	r1, [r7, #0]
 8012fd4:	6878      	ldr	r0, [r7, #4]
 8012fd6:	f000 f900 	bl	80131da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012fda:	4b07      	ldr	r3, [pc, #28]	@ (8012ff8 <USBD_SetConfig+0x150>)
 8012fdc:	781b      	ldrb	r3, [r3, #0]
 8012fde:	4619      	mov	r1, r3
 8012fe0:	6878      	ldr	r0, [r7, #4]
 8012fe2:	f7fe ff64 	bl	8011eae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012fe6:	2303      	movs	r3, #3
 8012fe8:	73fb      	strb	r3, [r7, #15]
      break;
 8012fea:	bf00      	nop
  }

  return ret;
 8012fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3710      	adds	r7, #16
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}
 8012ff6:	bf00      	nop
 8012ff8:	24002d2c 	.word	0x24002d2c

08012ffc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b082      	sub	sp, #8
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
 8013004:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013006:	683b      	ldr	r3, [r7, #0]
 8013008:	88db      	ldrh	r3, [r3, #6]
 801300a:	2b01      	cmp	r3, #1
 801300c:	d004      	beq.n	8013018 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801300e:	6839      	ldr	r1, [r7, #0]
 8013010:	6878      	ldr	r0, [r7, #4]
 8013012:	f000 f8e2 	bl	80131da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013016:	e023      	b.n	8013060 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801301e:	b2db      	uxtb	r3, r3
 8013020:	2b02      	cmp	r3, #2
 8013022:	dc02      	bgt.n	801302a <USBD_GetConfig+0x2e>
 8013024:	2b00      	cmp	r3, #0
 8013026:	dc03      	bgt.n	8013030 <USBD_GetConfig+0x34>
 8013028:	e015      	b.n	8013056 <USBD_GetConfig+0x5a>
 801302a:	2b03      	cmp	r3, #3
 801302c:	d00b      	beq.n	8013046 <USBD_GetConfig+0x4a>
 801302e:	e012      	b.n	8013056 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	2200      	movs	r2, #0
 8013034:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	3308      	adds	r3, #8
 801303a:	2201      	movs	r2, #1
 801303c:	4619      	mov	r1, r3
 801303e:	6878      	ldr	r0, [r7, #4]
 8013040:	f000 f948 	bl	80132d4 <USBD_CtlSendData>
        break;
 8013044:	e00c      	b.n	8013060 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	3304      	adds	r3, #4
 801304a:	2201      	movs	r2, #1
 801304c:	4619      	mov	r1, r3
 801304e:	6878      	ldr	r0, [r7, #4]
 8013050:	f000 f940 	bl	80132d4 <USBD_CtlSendData>
        break;
 8013054:	e004      	b.n	8013060 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8013056:	6839      	ldr	r1, [r7, #0]
 8013058:	6878      	ldr	r0, [r7, #4]
 801305a:	f000 f8be 	bl	80131da <USBD_CtlError>
        break;
 801305e:	bf00      	nop
}
 8013060:	bf00      	nop
 8013062:	3708      	adds	r7, #8
 8013064:	46bd      	mov	sp, r7
 8013066:	bd80      	pop	{r7, pc}

08013068 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b082      	sub	sp, #8
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
 8013070:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013078:	b2db      	uxtb	r3, r3
 801307a:	3b01      	subs	r3, #1
 801307c:	2b02      	cmp	r3, #2
 801307e:	d81e      	bhi.n	80130be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013080:	683b      	ldr	r3, [r7, #0]
 8013082:	88db      	ldrh	r3, [r3, #6]
 8013084:	2b02      	cmp	r3, #2
 8013086:	d004      	beq.n	8013092 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013088:	6839      	ldr	r1, [r7, #0]
 801308a:	6878      	ldr	r0, [r7, #4]
 801308c:	f000 f8a5 	bl	80131da <USBD_CtlError>
        break;
 8013090:	e01a      	b.n	80130c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	2201      	movs	r2, #1
 8013096:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d005      	beq.n	80130ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	68db      	ldr	r3, [r3, #12]
 80130a6:	f043 0202 	orr.w	r2, r3, #2
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	330c      	adds	r3, #12
 80130b2:	2202      	movs	r2, #2
 80130b4:	4619      	mov	r1, r3
 80130b6:	6878      	ldr	r0, [r7, #4]
 80130b8:	f000 f90c 	bl	80132d4 <USBD_CtlSendData>
      break;
 80130bc:	e004      	b.n	80130c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80130be:	6839      	ldr	r1, [r7, #0]
 80130c0:	6878      	ldr	r0, [r7, #4]
 80130c2:	f000 f88a 	bl	80131da <USBD_CtlError>
      break;
 80130c6:	bf00      	nop
  }
}
 80130c8:	bf00      	nop
 80130ca:	3708      	adds	r7, #8
 80130cc:	46bd      	mov	sp, r7
 80130ce:	bd80      	pop	{r7, pc}

080130d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80130d0:	b580      	push	{r7, lr}
 80130d2:	b082      	sub	sp, #8
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	6078      	str	r0, [r7, #4]
 80130d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80130da:	683b      	ldr	r3, [r7, #0]
 80130dc:	885b      	ldrh	r3, [r3, #2]
 80130de:	2b01      	cmp	r3, #1
 80130e0:	d107      	bne.n	80130f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	2201      	movs	r2, #1
 80130e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80130ea:	6878      	ldr	r0, [r7, #4]
 80130ec:	f000 f94c 	bl	8013388 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80130f0:	e013      	b.n	801311a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80130f2:	683b      	ldr	r3, [r7, #0]
 80130f4:	885b      	ldrh	r3, [r3, #2]
 80130f6:	2b02      	cmp	r3, #2
 80130f8:	d10b      	bne.n	8013112 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80130fa:	683b      	ldr	r3, [r7, #0]
 80130fc:	889b      	ldrh	r3, [r3, #4]
 80130fe:	0a1b      	lsrs	r3, r3, #8
 8013100:	b29b      	uxth	r3, r3
 8013102:	b2da      	uxtb	r2, r3
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801310a:	6878      	ldr	r0, [r7, #4]
 801310c:	f000 f93c 	bl	8013388 <USBD_CtlSendStatus>
}
 8013110:	e003      	b.n	801311a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8013112:	6839      	ldr	r1, [r7, #0]
 8013114:	6878      	ldr	r0, [r7, #4]
 8013116:	f000 f860 	bl	80131da <USBD_CtlError>
}
 801311a:	bf00      	nop
 801311c:	3708      	adds	r7, #8
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}

08013122 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013122:	b580      	push	{r7, lr}
 8013124:	b082      	sub	sp, #8
 8013126:	af00      	add	r7, sp, #0
 8013128:	6078      	str	r0, [r7, #4]
 801312a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013132:	b2db      	uxtb	r3, r3
 8013134:	3b01      	subs	r3, #1
 8013136:	2b02      	cmp	r3, #2
 8013138:	d80b      	bhi.n	8013152 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801313a:	683b      	ldr	r3, [r7, #0]
 801313c:	885b      	ldrh	r3, [r3, #2]
 801313e:	2b01      	cmp	r3, #1
 8013140:	d10c      	bne.n	801315c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	2200      	movs	r2, #0
 8013146:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801314a:	6878      	ldr	r0, [r7, #4]
 801314c:	f000 f91c 	bl	8013388 <USBD_CtlSendStatus>
      }
      break;
 8013150:	e004      	b.n	801315c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013152:	6839      	ldr	r1, [r7, #0]
 8013154:	6878      	ldr	r0, [r7, #4]
 8013156:	f000 f840 	bl	80131da <USBD_CtlError>
      break;
 801315a:	e000      	b.n	801315e <USBD_ClrFeature+0x3c>
      break;
 801315c:	bf00      	nop
  }
}
 801315e:	bf00      	nop
 8013160:	3708      	adds	r7, #8
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}

08013166 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013166:	b580      	push	{r7, lr}
 8013168:	b084      	sub	sp, #16
 801316a:	af00      	add	r7, sp, #0
 801316c:	6078      	str	r0, [r7, #4]
 801316e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	781a      	ldrb	r2, [r3, #0]
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	3301      	adds	r3, #1
 8013180:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	781a      	ldrb	r2, [r3, #0]
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	3301      	adds	r3, #1
 801318e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013190:	68f8      	ldr	r0, [r7, #12]
 8013192:	f7ff fa16 	bl	80125c2 <SWAPBYTE>
 8013196:	4603      	mov	r3, r0
 8013198:	461a      	mov	r2, r3
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	3301      	adds	r3, #1
 80131a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	3301      	adds	r3, #1
 80131a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80131aa:	68f8      	ldr	r0, [r7, #12]
 80131ac:	f7ff fa09 	bl	80125c2 <SWAPBYTE>
 80131b0:	4603      	mov	r3, r0
 80131b2:	461a      	mov	r2, r3
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	3301      	adds	r3, #1
 80131bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	3301      	adds	r3, #1
 80131c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80131c4:	68f8      	ldr	r0, [r7, #12]
 80131c6:	f7ff f9fc 	bl	80125c2 <SWAPBYTE>
 80131ca:	4603      	mov	r3, r0
 80131cc:	461a      	mov	r2, r3
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	80da      	strh	r2, [r3, #6]
}
 80131d2:	bf00      	nop
 80131d4:	3710      	adds	r7, #16
 80131d6:	46bd      	mov	sp, r7
 80131d8:	bd80      	pop	{r7, pc}

080131da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80131da:	b580      	push	{r7, lr}
 80131dc:	b082      	sub	sp, #8
 80131de:	af00      	add	r7, sp, #0
 80131e0:	6078      	str	r0, [r7, #4]
 80131e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80131e4:	2180      	movs	r1, #128	@ 0x80
 80131e6:	6878      	ldr	r0, [r7, #4]
 80131e8:	f000 fd36 	bl	8013c58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80131ec:	2100      	movs	r1, #0
 80131ee:	6878      	ldr	r0, [r7, #4]
 80131f0:	f000 fd32 	bl	8013c58 <USBD_LL_StallEP>
}
 80131f4:	bf00      	nop
 80131f6:	3708      	adds	r7, #8
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bd80      	pop	{r7, pc}

080131fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b086      	sub	sp, #24
 8013200:	af00      	add	r7, sp, #0
 8013202:	60f8      	str	r0, [r7, #12]
 8013204:	60b9      	str	r1, [r7, #8]
 8013206:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013208:	2300      	movs	r3, #0
 801320a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d042      	beq.n	8013298 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8013216:	6938      	ldr	r0, [r7, #16]
 8013218:	f000 f842 	bl	80132a0 <USBD_GetLen>
 801321c:	4603      	mov	r3, r0
 801321e:	3301      	adds	r3, #1
 8013220:	005b      	lsls	r3, r3, #1
 8013222:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013226:	d808      	bhi.n	801323a <USBD_GetString+0x3e>
 8013228:	6938      	ldr	r0, [r7, #16]
 801322a:	f000 f839 	bl	80132a0 <USBD_GetLen>
 801322e:	4603      	mov	r3, r0
 8013230:	3301      	adds	r3, #1
 8013232:	b29b      	uxth	r3, r3
 8013234:	005b      	lsls	r3, r3, #1
 8013236:	b29a      	uxth	r2, r3
 8013238:	e001      	b.n	801323e <USBD_GetString+0x42>
 801323a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8013242:	7dfb      	ldrb	r3, [r7, #23]
 8013244:	68ba      	ldr	r2, [r7, #8]
 8013246:	4413      	add	r3, r2
 8013248:	687a      	ldr	r2, [r7, #4]
 801324a:	7812      	ldrb	r2, [r2, #0]
 801324c:	701a      	strb	r2, [r3, #0]
  idx++;
 801324e:	7dfb      	ldrb	r3, [r7, #23]
 8013250:	3301      	adds	r3, #1
 8013252:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8013254:	7dfb      	ldrb	r3, [r7, #23]
 8013256:	68ba      	ldr	r2, [r7, #8]
 8013258:	4413      	add	r3, r2
 801325a:	2203      	movs	r2, #3
 801325c:	701a      	strb	r2, [r3, #0]
  idx++;
 801325e:	7dfb      	ldrb	r3, [r7, #23]
 8013260:	3301      	adds	r3, #1
 8013262:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8013264:	e013      	b.n	801328e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8013266:	7dfb      	ldrb	r3, [r7, #23]
 8013268:	68ba      	ldr	r2, [r7, #8]
 801326a:	4413      	add	r3, r2
 801326c:	693a      	ldr	r2, [r7, #16]
 801326e:	7812      	ldrb	r2, [r2, #0]
 8013270:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013272:	693b      	ldr	r3, [r7, #16]
 8013274:	3301      	adds	r3, #1
 8013276:	613b      	str	r3, [r7, #16]
    idx++;
 8013278:	7dfb      	ldrb	r3, [r7, #23]
 801327a:	3301      	adds	r3, #1
 801327c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801327e:	7dfb      	ldrb	r3, [r7, #23]
 8013280:	68ba      	ldr	r2, [r7, #8]
 8013282:	4413      	add	r3, r2
 8013284:	2200      	movs	r2, #0
 8013286:	701a      	strb	r2, [r3, #0]
    idx++;
 8013288:	7dfb      	ldrb	r3, [r7, #23]
 801328a:	3301      	adds	r3, #1
 801328c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801328e:	693b      	ldr	r3, [r7, #16]
 8013290:	781b      	ldrb	r3, [r3, #0]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d1e7      	bne.n	8013266 <USBD_GetString+0x6a>
 8013296:	e000      	b.n	801329a <USBD_GetString+0x9e>
    return;
 8013298:	bf00      	nop
  }
}
 801329a:	3718      	adds	r7, #24
 801329c:	46bd      	mov	sp, r7
 801329e:	bd80      	pop	{r7, pc}

080132a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80132a0:	b480      	push	{r7}
 80132a2:	b085      	sub	sp, #20
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80132a8:	2300      	movs	r3, #0
 80132aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80132b0:	e005      	b.n	80132be <USBD_GetLen+0x1e>
  {
    len++;
 80132b2:	7bfb      	ldrb	r3, [r7, #15]
 80132b4:	3301      	adds	r3, #1
 80132b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80132b8:	68bb      	ldr	r3, [r7, #8]
 80132ba:	3301      	adds	r3, #1
 80132bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80132be:	68bb      	ldr	r3, [r7, #8]
 80132c0:	781b      	ldrb	r3, [r3, #0]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d1f5      	bne.n	80132b2 <USBD_GetLen+0x12>
  }

  return len;
 80132c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80132c8:	4618      	mov	r0, r3
 80132ca:	3714      	adds	r7, #20
 80132cc:	46bd      	mov	sp, r7
 80132ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d2:	4770      	bx	lr

080132d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b084      	sub	sp, #16
 80132d8:	af00      	add	r7, sp, #0
 80132da:	60f8      	str	r0, [r7, #12]
 80132dc:	60b9      	str	r1, [r7, #8]
 80132de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	2202      	movs	r2, #2
 80132e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	687a      	ldr	r2, [r7, #4]
 80132ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	687a      	ldr	r2, [r7, #4]
 80132f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	68ba      	ldr	r2, [r7, #8]
 80132f8:	2100      	movs	r1, #0
 80132fa:	68f8      	ldr	r0, [r7, #12]
 80132fc:	f000 fd35 	bl	8013d6a <USBD_LL_Transmit>

  return USBD_OK;
 8013300:	2300      	movs	r3, #0
}
 8013302:	4618      	mov	r0, r3
 8013304:	3710      	adds	r7, #16
 8013306:	46bd      	mov	sp, r7
 8013308:	bd80      	pop	{r7, pc}

0801330a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801330a:	b580      	push	{r7, lr}
 801330c:	b084      	sub	sp, #16
 801330e:	af00      	add	r7, sp, #0
 8013310:	60f8      	str	r0, [r7, #12]
 8013312:	60b9      	str	r1, [r7, #8]
 8013314:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	68ba      	ldr	r2, [r7, #8]
 801331a:	2100      	movs	r1, #0
 801331c:	68f8      	ldr	r0, [r7, #12]
 801331e:	f000 fd24 	bl	8013d6a <USBD_LL_Transmit>

  return USBD_OK;
 8013322:	2300      	movs	r3, #0
}
 8013324:	4618      	mov	r0, r3
 8013326:	3710      	adds	r7, #16
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}

0801332c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b084      	sub	sp, #16
 8013330:	af00      	add	r7, sp, #0
 8013332:	60f8      	str	r0, [r7, #12]
 8013334:	60b9      	str	r1, [r7, #8]
 8013336:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	2203      	movs	r2, #3
 801333c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	687a      	ldr	r2, [r7, #4]
 8013344:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	687a      	ldr	r2, [r7, #4]
 801334c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	68ba      	ldr	r2, [r7, #8]
 8013354:	2100      	movs	r1, #0
 8013356:	68f8      	ldr	r0, [r7, #12]
 8013358:	f000 fd28 	bl	8013dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 801335c:	2300      	movs	r3, #0
}
 801335e:	4618      	mov	r0, r3
 8013360:	3710      	adds	r7, #16
 8013362:	46bd      	mov	sp, r7
 8013364:	bd80      	pop	{r7, pc}

08013366 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8013366:	b580      	push	{r7, lr}
 8013368:	b084      	sub	sp, #16
 801336a:	af00      	add	r7, sp, #0
 801336c:	60f8      	str	r0, [r7, #12]
 801336e:	60b9      	str	r1, [r7, #8]
 8013370:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	68ba      	ldr	r2, [r7, #8]
 8013376:	2100      	movs	r1, #0
 8013378:	68f8      	ldr	r0, [r7, #12]
 801337a:	f000 fd17 	bl	8013dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 801337e:	2300      	movs	r3, #0
}
 8013380:	4618      	mov	r0, r3
 8013382:	3710      	adds	r7, #16
 8013384:	46bd      	mov	sp, r7
 8013386:	bd80      	pop	{r7, pc}

08013388 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b082      	sub	sp, #8
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	2204      	movs	r2, #4
 8013394:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013398:	2300      	movs	r3, #0
 801339a:	2200      	movs	r2, #0
 801339c:	2100      	movs	r1, #0
 801339e:	6878      	ldr	r0, [r7, #4]
 80133a0:	f000 fce3 	bl	8013d6a <USBD_LL_Transmit>

  return USBD_OK;
 80133a4:	2300      	movs	r3, #0
}
 80133a6:	4618      	mov	r0, r3
 80133a8:	3708      	adds	r7, #8
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd80      	pop	{r7, pc}

080133ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80133ae:	b580      	push	{r7, lr}
 80133b0:	b082      	sub	sp, #8
 80133b2:	af00      	add	r7, sp, #0
 80133b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	2205      	movs	r2, #5
 80133ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80133be:	2300      	movs	r3, #0
 80133c0:	2200      	movs	r2, #0
 80133c2:	2100      	movs	r1, #0
 80133c4:	6878      	ldr	r0, [r7, #4]
 80133c6:	f000 fcf1 	bl	8013dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 80133ca:	2300      	movs	r3, #0
}
 80133cc:	4618      	mov	r0, r3
 80133ce:	3708      	adds	r7, #8
 80133d0:	46bd      	mov	sp, r7
 80133d2:	bd80      	pop	{r7, pc}

080133d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80133d8:	2201      	movs	r2, #1
 80133da:	4913      	ldr	r1, [pc, #76]	@ (8013428 <MX_USB_DEVICE_Init+0x54>)
 80133dc:	4813      	ldr	r0, [pc, #76]	@ (801342c <MX_USB_DEVICE_Init+0x58>)
 80133de:	f7fe fccd 	bl	8011d7c <USBD_Init>
 80133e2:	4603      	mov	r3, r0
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d001      	beq.n	80133ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80133e8:	f7ed fef2 	bl	80011d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80133ec:	4910      	ldr	r1, [pc, #64]	@ (8013430 <MX_USB_DEVICE_Init+0x5c>)
 80133ee:	480f      	ldr	r0, [pc, #60]	@ (801342c <MX_USB_DEVICE_Init+0x58>)
 80133f0:	f7fe fcf4 	bl	8011ddc <USBD_RegisterClass>
 80133f4:	4603      	mov	r3, r0
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d001      	beq.n	80133fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80133fa:	f7ed fee9 	bl	80011d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80133fe:	490d      	ldr	r1, [pc, #52]	@ (8013434 <MX_USB_DEVICE_Init+0x60>)
 8013400:	480a      	ldr	r0, [pc, #40]	@ (801342c <MX_USB_DEVICE_Init+0x58>)
 8013402:	f7fe fbeb 	bl	8011bdc <USBD_CDC_RegisterInterface>
 8013406:	4603      	mov	r3, r0
 8013408:	2b00      	cmp	r3, #0
 801340a:	d001      	beq.n	8013410 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801340c:	f7ed fee0 	bl	80011d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8013410:	4806      	ldr	r0, [pc, #24]	@ (801342c <MX_USB_DEVICE_Init+0x58>)
 8013412:	f7fe fd19 	bl	8011e48 <USBD_Start>
 8013416:	4603      	mov	r3, r0
 8013418:	2b00      	cmp	r3, #0
 801341a:	d001      	beq.n	8013420 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801341c:	f7ed fed8 	bl	80011d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8013420:	f7f5 fd9c 	bl	8008f5c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013424:	bf00      	nop
 8013426:	bd80      	pop	{r7, pc}
 8013428:	240000b0 	.word	0x240000b0
 801342c:	24002d30 	.word	0x24002d30
 8013430:	2400001c 	.word	0x2400001c
 8013434:	2400009c 	.word	0x2400009c

08013438 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8013438:	b580      	push	{r7, lr}
 801343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801343c:	2200      	movs	r2, #0
 801343e:	4905      	ldr	r1, [pc, #20]	@ (8013454 <CDC_Init_HS+0x1c>)
 8013440:	4805      	ldr	r0, [pc, #20]	@ (8013458 <CDC_Init_HS+0x20>)
 8013442:	f7fe fbe5 	bl	8011c10 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8013446:	4905      	ldr	r1, [pc, #20]	@ (801345c <CDC_Init_HS+0x24>)
 8013448:	4803      	ldr	r0, [pc, #12]	@ (8013458 <CDC_Init_HS+0x20>)
 801344a:	f7fe fc03 	bl	8011c54 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801344e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8013450:	4618      	mov	r0, r3
 8013452:	bd80      	pop	{r7, pc}
 8013454:	24003810 	.word	0x24003810
 8013458:	24002d30 	.word	0x24002d30
 801345c:	24003010 	.word	0x24003010

08013460 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8013460:	b480      	push	{r7}
 8013462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8013464:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8013466:	4618      	mov	r0, r3
 8013468:	46bd      	mov	sp, r7
 801346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346e:	4770      	bx	lr

08013470 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013470:	b480      	push	{r7}
 8013472:	b083      	sub	sp, #12
 8013474:	af00      	add	r7, sp, #0
 8013476:	4603      	mov	r3, r0
 8013478:	6039      	str	r1, [r7, #0]
 801347a:	71fb      	strb	r3, [r7, #7]
 801347c:	4613      	mov	r3, r2
 801347e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8013480:	79fb      	ldrb	r3, [r7, #7]
 8013482:	2b23      	cmp	r3, #35	@ 0x23
 8013484:	d84a      	bhi.n	801351c <CDC_Control_HS+0xac>
 8013486:	a201      	add	r2, pc, #4	@ (adr r2, 801348c <CDC_Control_HS+0x1c>)
 8013488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801348c:	0801351d 	.word	0x0801351d
 8013490:	0801351d 	.word	0x0801351d
 8013494:	0801351d 	.word	0x0801351d
 8013498:	0801351d 	.word	0x0801351d
 801349c:	0801351d 	.word	0x0801351d
 80134a0:	0801351d 	.word	0x0801351d
 80134a4:	0801351d 	.word	0x0801351d
 80134a8:	0801351d 	.word	0x0801351d
 80134ac:	0801351d 	.word	0x0801351d
 80134b0:	0801351d 	.word	0x0801351d
 80134b4:	0801351d 	.word	0x0801351d
 80134b8:	0801351d 	.word	0x0801351d
 80134bc:	0801351d 	.word	0x0801351d
 80134c0:	0801351d 	.word	0x0801351d
 80134c4:	0801351d 	.word	0x0801351d
 80134c8:	0801351d 	.word	0x0801351d
 80134cc:	0801351d 	.word	0x0801351d
 80134d0:	0801351d 	.word	0x0801351d
 80134d4:	0801351d 	.word	0x0801351d
 80134d8:	0801351d 	.word	0x0801351d
 80134dc:	0801351d 	.word	0x0801351d
 80134e0:	0801351d 	.word	0x0801351d
 80134e4:	0801351d 	.word	0x0801351d
 80134e8:	0801351d 	.word	0x0801351d
 80134ec:	0801351d 	.word	0x0801351d
 80134f0:	0801351d 	.word	0x0801351d
 80134f4:	0801351d 	.word	0x0801351d
 80134f8:	0801351d 	.word	0x0801351d
 80134fc:	0801351d 	.word	0x0801351d
 8013500:	0801351d 	.word	0x0801351d
 8013504:	0801351d 	.word	0x0801351d
 8013508:	0801351d 	.word	0x0801351d
 801350c:	0801351d 	.word	0x0801351d
 8013510:	0801351d 	.word	0x0801351d
 8013514:	0801351d 	.word	0x0801351d
 8013518:	0801351d 	.word	0x0801351d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801351c:	bf00      	nop
  }

  return (USBD_OK);
 801351e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8013520:	4618      	mov	r0, r3
 8013522:	370c      	adds	r7, #12
 8013524:	46bd      	mov	sp, r7
 8013526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352a:	4770      	bx	lr

0801352c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b082      	sub	sp, #8
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
 8013534:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8013536:	6879      	ldr	r1, [r7, #4]
 8013538:	4808      	ldr	r0, [pc, #32]	@ (801355c <CDC_Receive_HS+0x30>)
 801353a:	f7fe fb8b 	bl	8011c54 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801353e:	4807      	ldr	r0, [pc, #28]	@ (801355c <CDC_Receive_HS+0x30>)
 8013540:	f7fe fbe6 	bl	8011d10 <USBD_CDC_ReceivePacket>

  usbReceivedFlag = true;
 8013544:	4b06      	ldr	r3, [pc, #24]	@ (8013560 <CDC_Receive_HS+0x34>)
 8013546:	2201      	movs	r2, #1
 8013548:	701a      	strb	r2, [r3, #0]
  receiveDataToBuffer(Buf,Len);
 801354a:	6839      	ldr	r1, [r7, #0]
 801354c:	6878      	ldr	r0, [r7, #4]
 801354e:	f000 f841 	bl	80135d4 <receiveDataToBuffer>

  return (USBD_OK);
 8013552:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8013554:	4618      	mov	r0, r3
 8013556:	3708      	adds	r7, #8
 8013558:	46bd      	mov	sp, r7
 801355a:	bd80      	pop	{r7, pc}
 801355c:	24002d30 	.word	0x24002d30
 8013560:	2400300c 	.word	0x2400300c

08013564 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b084      	sub	sp, #16
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
 801356c:	460b      	mov	r3, r1
 801356e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8013570:	2300      	movs	r3, #0
 8013572:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8013574:	4b0d      	ldr	r3, [pc, #52]	@ (80135ac <CDC_Transmit_HS+0x48>)
 8013576:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801357a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013582:	2b00      	cmp	r3, #0
 8013584:	d001      	beq.n	801358a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8013586:	2301      	movs	r3, #1
 8013588:	e00b      	b.n	80135a2 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801358a:	887b      	ldrh	r3, [r7, #2]
 801358c:	461a      	mov	r2, r3
 801358e:	6879      	ldr	r1, [r7, #4]
 8013590:	4806      	ldr	r0, [pc, #24]	@ (80135ac <CDC_Transmit_HS+0x48>)
 8013592:	f7fe fb3d 	bl	8011c10 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8013596:	4805      	ldr	r0, [pc, #20]	@ (80135ac <CDC_Transmit_HS+0x48>)
 8013598:	f7fe fb7a 	bl	8011c90 <USBD_CDC_TransmitPacket>
 801359c:	4603      	mov	r3, r0
 801359e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 80135a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80135a2:	4618      	mov	r0, r3
 80135a4:	3710      	adds	r7, #16
 80135a6:	46bd      	mov	sp, r7
 80135a8:	bd80      	pop	{r7, pc}
 80135aa:	bf00      	nop
 80135ac:	24002d30 	.word	0x24002d30

080135b0 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80135b0:	b480      	push	{r7}
 80135b2:	b087      	sub	sp, #28
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	60f8      	str	r0, [r7, #12]
 80135b8:	60b9      	str	r1, [r7, #8]
 80135ba:	4613      	mov	r3, r2
 80135bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80135be:	2300      	movs	r3, #0
 80135c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80135c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80135c6:	4618      	mov	r0, r3
 80135c8:	371c      	adds	r7, #28
 80135ca:	46bd      	mov	sp, r7
 80135cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d0:	4770      	bx	lr
	...

080135d4 <receiveDataToBuffer>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void receiveDataToBuffer(uint8_t* Buf, uint32_t *Len)
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b084      	sub	sp, #16
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]
 80135dc:	6039      	str	r1, [r7, #0]
  uint8_t len = (uint8_t)* Len;
 80135de:	683b      	ldr	r3, [r7, #0]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	73fb      	strb	r3, [r7, #15]
  memset(UsbRxDataBuffer, '\0', USB_RX_BUFF_SIZE);
 80135e4:	220f      	movs	r2, #15
 80135e6:	2100      	movs	r1, #0
 80135e8:	4809      	ldr	r0, [pc, #36]	@ (8013610 <receiveDataToBuffer+0x3c>)
 80135ea:	f000 fceb 	bl	8013fc4 <memset>
  memcpy(UsbRxDataBuffer, Buf, len);
 80135ee:	7bfb      	ldrb	r3, [r7, #15]
 80135f0:	461a      	mov	r2, r3
 80135f2:	6879      	ldr	r1, [r7, #4]
 80135f4:	4806      	ldr	r0, [pc, #24]	@ (8013610 <receiveDataToBuffer+0x3c>)
 80135f6:	f000 fd19 	bl	801402c <memcpy>
  memset(Buf, '\0', len);
 80135fa:	7bfb      	ldrb	r3, [r7, #15]
 80135fc:	461a      	mov	r2, r3
 80135fe:	2100      	movs	r1, #0
 8013600:	6878      	ldr	r0, [r7, #4]
 8013602:	f000 fcdf 	bl	8013fc4 <memset>

}
 8013606:	bf00      	nop
 8013608:	3710      	adds	r7, #16
 801360a:	46bd      	mov	sp, r7
 801360c:	bd80      	pop	{r7, pc}
 801360e:	bf00      	nop
 8013610:	24002d18 	.word	0x24002d18

08013614 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013614:	b480      	push	{r7}
 8013616:	b083      	sub	sp, #12
 8013618:	af00      	add	r7, sp, #0
 801361a:	4603      	mov	r3, r0
 801361c:	6039      	str	r1, [r7, #0]
 801361e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8013620:	683b      	ldr	r3, [r7, #0]
 8013622:	2212      	movs	r2, #18
 8013624:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8013626:	4b03      	ldr	r3, [pc, #12]	@ (8013634 <USBD_HS_DeviceDescriptor+0x20>)
}
 8013628:	4618      	mov	r0, r3
 801362a:	370c      	adds	r7, #12
 801362c:	46bd      	mov	sp, r7
 801362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013632:	4770      	bx	lr
 8013634:	240000d0 	.word	0x240000d0

08013638 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013638:	b480      	push	{r7}
 801363a:	b083      	sub	sp, #12
 801363c:	af00      	add	r7, sp, #0
 801363e:	4603      	mov	r3, r0
 8013640:	6039      	str	r1, [r7, #0]
 8013642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013644:	683b      	ldr	r3, [r7, #0]
 8013646:	2204      	movs	r2, #4
 8013648:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801364a:	4b03      	ldr	r3, [pc, #12]	@ (8013658 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801364c:	4618      	mov	r0, r3
 801364e:	370c      	adds	r7, #12
 8013650:	46bd      	mov	sp, r7
 8013652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013656:	4770      	bx	lr
 8013658:	240000e4 	.word	0x240000e4

0801365c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b082      	sub	sp, #8
 8013660:	af00      	add	r7, sp, #0
 8013662:	4603      	mov	r3, r0
 8013664:	6039      	str	r1, [r7, #0]
 8013666:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013668:	79fb      	ldrb	r3, [r7, #7]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d105      	bne.n	801367a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801366e:	683a      	ldr	r2, [r7, #0]
 8013670:	4907      	ldr	r1, [pc, #28]	@ (8013690 <USBD_HS_ProductStrDescriptor+0x34>)
 8013672:	4808      	ldr	r0, [pc, #32]	@ (8013694 <USBD_HS_ProductStrDescriptor+0x38>)
 8013674:	f7ff fdc2 	bl	80131fc <USBD_GetString>
 8013678:	e004      	b.n	8013684 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801367a:	683a      	ldr	r2, [r7, #0]
 801367c:	4904      	ldr	r1, [pc, #16]	@ (8013690 <USBD_HS_ProductStrDescriptor+0x34>)
 801367e:	4805      	ldr	r0, [pc, #20]	@ (8013694 <USBD_HS_ProductStrDescriptor+0x38>)
 8013680:	f7ff fdbc 	bl	80131fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8013684:	4b02      	ldr	r3, [pc, #8]	@ (8013690 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8013686:	4618      	mov	r0, r3
 8013688:	3708      	adds	r7, #8
 801368a:	46bd      	mov	sp, r7
 801368c:	bd80      	pop	{r7, pc}
 801368e:	bf00      	nop
 8013690:	24004010 	.word	0x24004010
 8013694:	080148d0 	.word	0x080148d0

08013698 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b082      	sub	sp, #8
 801369c:	af00      	add	r7, sp, #0
 801369e:	4603      	mov	r3, r0
 80136a0:	6039      	str	r1, [r7, #0]
 80136a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80136a4:	683a      	ldr	r2, [r7, #0]
 80136a6:	4904      	ldr	r1, [pc, #16]	@ (80136b8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80136a8:	4804      	ldr	r0, [pc, #16]	@ (80136bc <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80136aa:	f7ff fda7 	bl	80131fc <USBD_GetString>
  return USBD_StrDesc;
 80136ae:	4b02      	ldr	r3, [pc, #8]	@ (80136b8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80136b0:	4618      	mov	r0, r3
 80136b2:	3708      	adds	r7, #8
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bd80      	pop	{r7, pc}
 80136b8:	24004010 	.word	0x24004010
 80136bc:	080148e8 	.word	0x080148e8

080136c0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b082      	sub	sp, #8
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	4603      	mov	r3, r0
 80136c8:	6039      	str	r1, [r7, #0]
 80136ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80136cc:	683b      	ldr	r3, [r7, #0]
 80136ce:	221a      	movs	r2, #26
 80136d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80136d2:	f000 f843 	bl	801375c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80136d6:	4b02      	ldr	r3, [pc, #8]	@ (80136e0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 80136d8:	4618      	mov	r0, r3
 80136da:	3708      	adds	r7, #8
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}
 80136e0:	240000e8 	.word	0x240000e8

080136e4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b082      	sub	sp, #8
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	4603      	mov	r3, r0
 80136ec:	6039      	str	r1, [r7, #0]
 80136ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80136f0:	79fb      	ldrb	r3, [r7, #7]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d105      	bne.n	8013702 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80136f6:	683a      	ldr	r2, [r7, #0]
 80136f8:	4907      	ldr	r1, [pc, #28]	@ (8013718 <USBD_HS_ConfigStrDescriptor+0x34>)
 80136fa:	4808      	ldr	r0, [pc, #32]	@ (801371c <USBD_HS_ConfigStrDescriptor+0x38>)
 80136fc:	f7ff fd7e 	bl	80131fc <USBD_GetString>
 8013700:	e004      	b.n	801370c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8013702:	683a      	ldr	r2, [r7, #0]
 8013704:	4904      	ldr	r1, [pc, #16]	@ (8013718 <USBD_HS_ConfigStrDescriptor+0x34>)
 8013706:	4805      	ldr	r0, [pc, #20]	@ (801371c <USBD_HS_ConfigStrDescriptor+0x38>)
 8013708:	f7ff fd78 	bl	80131fc <USBD_GetString>
  }
  return USBD_StrDesc;
 801370c:	4b02      	ldr	r3, [pc, #8]	@ (8013718 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801370e:	4618      	mov	r0, r3
 8013710:	3708      	adds	r7, #8
 8013712:	46bd      	mov	sp, r7
 8013714:	bd80      	pop	{r7, pc}
 8013716:	bf00      	nop
 8013718:	24004010 	.word	0x24004010
 801371c:	080148fc 	.word	0x080148fc

08013720 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013720:	b580      	push	{r7, lr}
 8013722:	b082      	sub	sp, #8
 8013724:	af00      	add	r7, sp, #0
 8013726:	4603      	mov	r3, r0
 8013728:	6039      	str	r1, [r7, #0]
 801372a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801372c:	79fb      	ldrb	r3, [r7, #7]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d105      	bne.n	801373e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8013732:	683a      	ldr	r2, [r7, #0]
 8013734:	4907      	ldr	r1, [pc, #28]	@ (8013754 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8013736:	4808      	ldr	r0, [pc, #32]	@ (8013758 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8013738:	f7ff fd60 	bl	80131fc <USBD_GetString>
 801373c:	e004      	b.n	8013748 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801373e:	683a      	ldr	r2, [r7, #0]
 8013740:	4904      	ldr	r1, [pc, #16]	@ (8013754 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8013742:	4805      	ldr	r0, [pc, #20]	@ (8013758 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8013744:	f7ff fd5a 	bl	80131fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8013748:	4b02      	ldr	r3, [pc, #8]	@ (8013754 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801374a:	4618      	mov	r0, r3
 801374c:	3708      	adds	r7, #8
 801374e:	46bd      	mov	sp, r7
 8013750:	bd80      	pop	{r7, pc}
 8013752:	bf00      	nop
 8013754:	24004010 	.word	0x24004010
 8013758:	08014908 	.word	0x08014908

0801375c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801375c:	b580      	push	{r7, lr}
 801375e:	b084      	sub	sp, #16
 8013760:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013762:	4b0f      	ldr	r3, [pc, #60]	@ (80137a0 <Get_SerialNum+0x44>)
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013768:	4b0e      	ldr	r3, [pc, #56]	@ (80137a4 <Get_SerialNum+0x48>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801376e:	4b0e      	ldr	r3, [pc, #56]	@ (80137a8 <Get_SerialNum+0x4c>)
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013774:	68fa      	ldr	r2, [r7, #12]
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	4413      	add	r3, r2
 801377a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d009      	beq.n	8013796 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013782:	2208      	movs	r2, #8
 8013784:	4909      	ldr	r1, [pc, #36]	@ (80137ac <Get_SerialNum+0x50>)
 8013786:	68f8      	ldr	r0, [r7, #12]
 8013788:	f000 f814 	bl	80137b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801378c:	2204      	movs	r2, #4
 801378e:	4908      	ldr	r1, [pc, #32]	@ (80137b0 <Get_SerialNum+0x54>)
 8013790:	68b8      	ldr	r0, [r7, #8]
 8013792:	f000 f80f 	bl	80137b4 <IntToUnicode>
  }
}
 8013796:	bf00      	nop
 8013798:	3710      	adds	r7, #16
 801379a:	46bd      	mov	sp, r7
 801379c:	bd80      	pop	{r7, pc}
 801379e:	bf00      	nop
 80137a0:	1ff1e800 	.word	0x1ff1e800
 80137a4:	1ff1e804 	.word	0x1ff1e804
 80137a8:	1ff1e808 	.word	0x1ff1e808
 80137ac:	240000ea 	.word	0x240000ea
 80137b0:	240000fa 	.word	0x240000fa

080137b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80137b4:	b480      	push	{r7}
 80137b6:	b087      	sub	sp, #28
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	60f8      	str	r0, [r7, #12]
 80137bc:	60b9      	str	r1, [r7, #8]
 80137be:	4613      	mov	r3, r2
 80137c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80137c2:	2300      	movs	r3, #0
 80137c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80137c6:	2300      	movs	r3, #0
 80137c8:	75fb      	strb	r3, [r7, #23]
 80137ca:	e027      	b.n	801381c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	0f1b      	lsrs	r3, r3, #28
 80137d0:	2b09      	cmp	r3, #9
 80137d2:	d80b      	bhi.n	80137ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	0f1b      	lsrs	r3, r3, #28
 80137d8:	b2da      	uxtb	r2, r3
 80137da:	7dfb      	ldrb	r3, [r7, #23]
 80137dc:	005b      	lsls	r3, r3, #1
 80137de:	4619      	mov	r1, r3
 80137e0:	68bb      	ldr	r3, [r7, #8]
 80137e2:	440b      	add	r3, r1
 80137e4:	3230      	adds	r2, #48	@ 0x30
 80137e6:	b2d2      	uxtb	r2, r2
 80137e8:	701a      	strb	r2, [r3, #0]
 80137ea:	e00a      	b.n	8013802 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	0f1b      	lsrs	r3, r3, #28
 80137f0:	b2da      	uxtb	r2, r3
 80137f2:	7dfb      	ldrb	r3, [r7, #23]
 80137f4:	005b      	lsls	r3, r3, #1
 80137f6:	4619      	mov	r1, r3
 80137f8:	68bb      	ldr	r3, [r7, #8]
 80137fa:	440b      	add	r3, r1
 80137fc:	3237      	adds	r2, #55	@ 0x37
 80137fe:	b2d2      	uxtb	r2, r2
 8013800:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	011b      	lsls	r3, r3, #4
 8013806:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013808:	7dfb      	ldrb	r3, [r7, #23]
 801380a:	005b      	lsls	r3, r3, #1
 801380c:	3301      	adds	r3, #1
 801380e:	68ba      	ldr	r2, [r7, #8]
 8013810:	4413      	add	r3, r2
 8013812:	2200      	movs	r2, #0
 8013814:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013816:	7dfb      	ldrb	r3, [r7, #23]
 8013818:	3301      	adds	r3, #1
 801381a:	75fb      	strb	r3, [r7, #23]
 801381c:	7dfa      	ldrb	r2, [r7, #23]
 801381e:	79fb      	ldrb	r3, [r7, #7]
 8013820:	429a      	cmp	r2, r3
 8013822:	d3d3      	bcc.n	80137cc <IntToUnicode+0x18>
  }
}
 8013824:	bf00      	nop
 8013826:	bf00      	nop
 8013828:	371c      	adds	r7, #28
 801382a:	46bd      	mov	sp, r7
 801382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013830:	4770      	bx	lr
	...

08013834 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013834:	b580      	push	{r7, lr}
 8013836:	b0b8      	sub	sp, #224	@ 0xe0
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801383c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8013840:	2200      	movs	r2, #0
 8013842:	601a      	str	r2, [r3, #0]
 8013844:	605a      	str	r2, [r3, #4]
 8013846:	609a      	str	r2, [r3, #8]
 8013848:	60da      	str	r2, [r3, #12]
 801384a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801384c:	f107 0310 	add.w	r3, r7, #16
 8013850:	22b8      	movs	r2, #184	@ 0xb8
 8013852:	2100      	movs	r1, #0
 8013854:	4618      	mov	r0, r3
 8013856:	f000 fbb5 	bl	8013fc4 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	4a29      	ldr	r2, [pc, #164]	@ (8013904 <HAL_PCD_MspInit+0xd0>)
 8013860:	4293      	cmp	r3, r2
 8013862:	d14b      	bne.n	80138fc <HAL_PCD_MspInit+0xc8>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8013864:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8013868:	f04f 0300 	mov.w	r3, #0
 801386c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8013870:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8013874:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013878:	f107 0310 	add.w	r3, r7, #16
 801387c:	4618      	mov	r0, r3
 801387e:	f7f6 fae3 	bl	8009e48 <HAL_RCCEx_PeriphCLKConfig>
 8013882:	4603      	mov	r3, r0
 8013884:	2b00      	cmp	r3, #0
 8013886:	d001      	beq.n	801388c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8013888:	f7ed fca2 	bl	80011d0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801388c:	f7f5 fb66 	bl	8008f5c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013890:	4b1d      	ldr	r3, [pc, #116]	@ (8013908 <HAL_PCD_MspInit+0xd4>)
 8013892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8013896:	4a1c      	ldr	r2, [pc, #112]	@ (8013908 <HAL_PCD_MspInit+0xd4>)
 8013898:	f043 0301 	orr.w	r3, r3, #1
 801389c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80138a0:	4b19      	ldr	r3, [pc, #100]	@ (8013908 <HAL_PCD_MspInit+0xd4>)
 80138a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80138a6:	f003 0301 	and.w	r3, r3, #1
 80138aa:	60fb      	str	r3, [r7, #12]
 80138ac:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80138ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80138b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80138b6:	2300      	movs	r3, #0
 80138b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80138bc:	2300      	movs	r3, #0
 80138be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80138c2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80138c6:	4619      	mov	r1, r3
 80138c8:	4810      	ldr	r0, [pc, #64]	@ (801390c <HAL_PCD_MspInit+0xd8>)
 80138ca:	f7f3 fd41 	bl	8007350 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80138ce:	4b0e      	ldr	r3, [pc, #56]	@ (8013908 <HAL_PCD_MspInit+0xd4>)
 80138d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80138d4:	4a0c      	ldr	r2, [pc, #48]	@ (8013908 <HAL_PCD_MspInit+0xd4>)
 80138d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80138da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80138de:	4b0a      	ldr	r3, [pc, #40]	@ (8013908 <HAL_PCD_MspInit+0xd4>)
 80138e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80138e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80138e8:	60bb      	str	r3, [r7, #8]
 80138ea:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80138ec:	2200      	movs	r2, #0
 80138ee:	2100      	movs	r1, #0
 80138f0:	204d      	movs	r0, #77	@ 0x4d
 80138f2:	f7f1 f8f6 	bl	8004ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80138f6:	204d      	movs	r0, #77	@ 0x4d
 80138f8:	f7f1 f90d 	bl	8004b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80138fc:	bf00      	nop
 80138fe:	37e0      	adds	r7, #224	@ 0xe0
 8013900:	46bd      	mov	sp, r7
 8013902:	bd80      	pop	{r7, pc}
 8013904:	40040000 	.word	0x40040000
 8013908:	58024400 	.word	0x58024400
 801390c:	58020000 	.word	0x58020000

08013910 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b082      	sub	sp, #8
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8013924:	4619      	mov	r1, r3
 8013926:	4610      	mov	r0, r2
 8013928:	f7fe fadb 	bl	8011ee2 <USBD_LL_SetupStage>
}
 801392c:	bf00      	nop
 801392e:	3708      	adds	r7, #8
 8013930:	46bd      	mov	sp, r7
 8013932:	bd80      	pop	{r7, pc}

08013934 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b082      	sub	sp, #8
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]
 801393c:	460b      	mov	r3, r1
 801393e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8013946:	78fa      	ldrb	r2, [r7, #3]
 8013948:	6879      	ldr	r1, [r7, #4]
 801394a:	4613      	mov	r3, r2
 801394c:	00db      	lsls	r3, r3, #3
 801394e:	4413      	add	r3, r2
 8013950:	009b      	lsls	r3, r3, #2
 8013952:	440b      	add	r3, r1
 8013954:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013958:	681a      	ldr	r2, [r3, #0]
 801395a:	78fb      	ldrb	r3, [r7, #3]
 801395c:	4619      	mov	r1, r3
 801395e:	f7fe fb15 	bl	8011f8c <USBD_LL_DataOutStage>
}
 8013962:	bf00      	nop
 8013964:	3708      	adds	r7, #8
 8013966:	46bd      	mov	sp, r7
 8013968:	bd80      	pop	{r7, pc}

0801396a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801396a:	b580      	push	{r7, lr}
 801396c:	b082      	sub	sp, #8
 801396e:	af00      	add	r7, sp, #0
 8013970:	6078      	str	r0, [r7, #4]
 8013972:	460b      	mov	r3, r1
 8013974:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801397c:	78fa      	ldrb	r2, [r7, #3]
 801397e:	6879      	ldr	r1, [r7, #4]
 8013980:	4613      	mov	r3, r2
 8013982:	00db      	lsls	r3, r3, #3
 8013984:	4413      	add	r3, r2
 8013986:	009b      	lsls	r3, r3, #2
 8013988:	440b      	add	r3, r1
 801398a:	3320      	adds	r3, #32
 801398c:	681a      	ldr	r2, [r3, #0]
 801398e:	78fb      	ldrb	r3, [r7, #3]
 8013990:	4619      	mov	r1, r3
 8013992:	f7fe fbae 	bl	80120f2 <USBD_LL_DataInStage>
}
 8013996:	bf00      	nop
 8013998:	3708      	adds	r7, #8
 801399a:	46bd      	mov	sp, r7
 801399c:	bd80      	pop	{r7, pc}

0801399e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801399e:	b580      	push	{r7, lr}
 80139a0:	b082      	sub	sp, #8
 80139a2:	af00      	add	r7, sp, #0
 80139a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80139ac:	4618      	mov	r0, r3
 80139ae:	f7fe fce8 	bl	8012382 <USBD_LL_SOF>
}
 80139b2:	bf00      	nop
 80139b4:	3708      	adds	r7, #8
 80139b6:	46bd      	mov	sp, r7
 80139b8:	bd80      	pop	{r7, pc}

080139ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80139ba:	b580      	push	{r7, lr}
 80139bc:	b084      	sub	sp, #16
 80139be:	af00      	add	r7, sp, #0
 80139c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80139c2:	2301      	movs	r3, #1
 80139c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	79db      	ldrb	r3, [r3, #7]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d102      	bne.n	80139d4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80139ce:	2300      	movs	r3, #0
 80139d0:	73fb      	strb	r3, [r7, #15]
 80139d2:	e008      	b.n	80139e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	79db      	ldrb	r3, [r3, #7]
 80139d8:	2b02      	cmp	r3, #2
 80139da:	d102      	bne.n	80139e2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80139dc:	2301      	movs	r3, #1
 80139de:	73fb      	strb	r3, [r7, #15]
 80139e0:	e001      	b.n	80139e6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80139e2:	f7ed fbf5 	bl	80011d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80139ec:	7bfa      	ldrb	r2, [r7, #15]
 80139ee:	4611      	mov	r1, r2
 80139f0:	4618      	mov	r0, r3
 80139f2:	f7fe fc82 	bl	80122fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7fe fc2a 	bl	8012256 <USBD_LL_Reset>
}
 8013a02:	bf00      	nop
 8013a04:	3710      	adds	r7, #16
 8013a06:	46bd      	mov	sp, r7
 8013a08:	bd80      	pop	{r7, pc}
	...

08013a0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	b082      	sub	sp, #8
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f7fe fc7d 	bl	801231a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	687a      	ldr	r2, [r7, #4]
 8013a2c:	6812      	ldr	r2, [r2, #0]
 8013a2e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8013a32:	f043 0301 	orr.w	r3, r3, #1
 8013a36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	7adb      	ldrb	r3, [r3, #11]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d005      	beq.n	8013a4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013a40:	4b04      	ldr	r3, [pc, #16]	@ (8013a54 <HAL_PCD_SuspendCallback+0x48>)
 8013a42:	691b      	ldr	r3, [r3, #16]
 8013a44:	4a03      	ldr	r2, [pc, #12]	@ (8013a54 <HAL_PCD_SuspendCallback+0x48>)
 8013a46:	f043 0306 	orr.w	r3, r3, #6
 8013a4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013a4c:	bf00      	nop
 8013a4e:	3708      	adds	r7, #8
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd80      	pop	{r7, pc}
 8013a54:	e000ed00 	.word	0xe000ed00

08013a58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b082      	sub	sp, #8
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013a66:	4618      	mov	r0, r3
 8013a68:	f7fe fc73 	bl	8012352 <USBD_LL_Resume>
}
 8013a6c:	bf00      	nop
 8013a6e:	3708      	adds	r7, #8
 8013a70:	46bd      	mov	sp, r7
 8013a72:	bd80      	pop	{r7, pc}

08013a74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b082      	sub	sp, #8
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
 8013a7c:	460b      	mov	r3, r1
 8013a7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013a86:	78fa      	ldrb	r2, [r7, #3]
 8013a88:	4611      	mov	r1, r2
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	f7fe fccb 	bl	8012426 <USBD_LL_IsoOUTIncomplete>
}
 8013a90:	bf00      	nop
 8013a92:	3708      	adds	r7, #8
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd80      	pop	{r7, pc}

08013a98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b082      	sub	sp, #8
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
 8013aa0:	460b      	mov	r3, r1
 8013aa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013aaa:	78fa      	ldrb	r2, [r7, #3]
 8013aac:	4611      	mov	r1, r2
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f7fe fc87 	bl	80123c2 <USBD_LL_IsoINIncomplete>
}
 8013ab4:	bf00      	nop
 8013ab6:	3708      	adds	r7, #8
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	bd80      	pop	{r7, pc}

08013abc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b082      	sub	sp, #8
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013aca:	4618      	mov	r0, r3
 8013acc:	f7fe fcdd 	bl	801248a <USBD_LL_DevConnected>
}
 8013ad0:	bf00      	nop
 8013ad2:	3708      	adds	r7, #8
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	bd80      	pop	{r7, pc}

08013ad8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b082      	sub	sp, #8
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	f7fe fcda 	bl	80124a0 <USBD_LL_DevDisconnected>
}
 8013aec:	bf00      	nop
 8013aee:	3708      	adds	r7, #8
 8013af0:	46bd      	mov	sp, r7
 8013af2:	bd80      	pop	{r7, pc}

08013af4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b082      	sub	sp, #8
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	781b      	ldrb	r3, [r3, #0]
 8013b00:	2b01      	cmp	r3, #1
 8013b02:	d140      	bne.n	8013b86 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8013b04:	4a22      	ldr	r2, [pc, #136]	@ (8013b90 <USBD_LL_Init+0x9c>)
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	4a20      	ldr	r2, [pc, #128]	@ (8013b90 <USBD_LL_Init+0x9c>)
 8013b10:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8013b14:	4b1e      	ldr	r3, [pc, #120]	@ (8013b90 <USBD_LL_Init+0x9c>)
 8013b16:	4a1f      	ldr	r2, [pc, #124]	@ (8013b94 <USBD_LL_Init+0xa0>)
 8013b18:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8013b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8013b90 <USBD_LL_Init+0x9c>)
 8013b1c:	2209      	movs	r2, #9
 8013b1e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8013b20:	4b1b      	ldr	r3, [pc, #108]	@ (8013b90 <USBD_LL_Init+0x9c>)
 8013b22:	2202      	movs	r2, #2
 8013b24:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8013b26:	4b1a      	ldr	r3, [pc, #104]	@ (8013b90 <USBD_LL_Init+0x9c>)
 8013b28:	2200      	movs	r2, #0
 8013b2a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8013b2c:	4b18      	ldr	r3, [pc, #96]	@ (8013b90 <USBD_LL_Init+0x9c>)
 8013b2e:	2202      	movs	r2, #2
 8013b30:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8013b32:	4b17      	ldr	r3, [pc, #92]	@ (8013b90 <USBD_LL_Init+0x9c>)
 8013b34:	2200      	movs	r2, #0
 8013b36:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8013b38:	4b15      	ldr	r3, [pc, #84]	@ (8013b90 <USBD_LL_Init+0x9c>)
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8013b3e:	4b14      	ldr	r3, [pc, #80]	@ (8013b90 <USBD_LL_Init+0x9c>)
 8013b40:	2200      	movs	r2, #0
 8013b42:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8013b44:	4b12      	ldr	r3, [pc, #72]	@ (8013b90 <USBD_LL_Init+0x9c>)
 8013b46:	2201      	movs	r2, #1
 8013b48:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8013b4a:	4b11      	ldr	r3, [pc, #68]	@ (8013b90 <USBD_LL_Init+0x9c>)
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8013b50:	4b0f      	ldr	r3, [pc, #60]	@ (8013b90 <USBD_LL_Init+0x9c>)
 8013b52:	2200      	movs	r2, #0
 8013b54:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8013b56:	480e      	ldr	r0, [pc, #56]	@ (8013b90 <USBD_LL_Init+0x9c>)
 8013b58:	f7f3 ff26 	bl	80079a8 <HAL_PCD_Init>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d001      	beq.n	8013b66 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8013b62:	f7ed fb35 	bl	80011d0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8013b66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8013b6a:	4809      	ldr	r0, [pc, #36]	@ (8013b90 <USBD_LL_Init+0x9c>)
 8013b6c:	f7f5 f97b 	bl	8008e66 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8013b70:	2280      	movs	r2, #128	@ 0x80
 8013b72:	2100      	movs	r1, #0
 8013b74:	4806      	ldr	r0, [pc, #24]	@ (8013b90 <USBD_LL_Init+0x9c>)
 8013b76:	f7f5 f92f 	bl	8008dd8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8013b7a:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8013b7e:	2101      	movs	r1, #1
 8013b80:	4803      	ldr	r0, [pc, #12]	@ (8013b90 <USBD_LL_Init+0x9c>)
 8013b82:	f7f5 f929 	bl	8008dd8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8013b86:	2300      	movs	r3, #0
}
 8013b88:	4618      	mov	r0, r3
 8013b8a:	3708      	adds	r7, #8
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	bd80      	pop	{r7, pc}
 8013b90:	24004210 	.word	0x24004210
 8013b94:	40040000 	.word	0x40040000

08013b98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b084      	sub	sp, #16
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f7f4 f806 	bl	8007bc0 <HAL_PCD_Start>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013bb8:	7bfb      	ldrb	r3, [r7, #15]
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f000 f942 	bl	8013e44 <USBD_Get_USB_Status>
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013bc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	3710      	adds	r7, #16
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	bd80      	pop	{r7, pc}

08013bce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013bce:	b580      	push	{r7, lr}
 8013bd0:	b084      	sub	sp, #16
 8013bd2:	af00      	add	r7, sp, #0
 8013bd4:	6078      	str	r0, [r7, #4]
 8013bd6:	4608      	mov	r0, r1
 8013bd8:	4611      	mov	r1, r2
 8013bda:	461a      	mov	r2, r3
 8013bdc:	4603      	mov	r3, r0
 8013bde:	70fb      	strb	r3, [r7, #3]
 8013be0:	460b      	mov	r3, r1
 8013be2:	70bb      	strb	r3, [r7, #2]
 8013be4:	4613      	mov	r3, r2
 8013be6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013be8:	2300      	movs	r3, #0
 8013bea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013bec:	2300      	movs	r3, #0
 8013bee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013bf6:	78bb      	ldrb	r3, [r7, #2]
 8013bf8:	883a      	ldrh	r2, [r7, #0]
 8013bfa:	78f9      	ldrb	r1, [r7, #3]
 8013bfc:	f7f4 fd07 	bl	800860e <HAL_PCD_EP_Open>
 8013c00:	4603      	mov	r3, r0
 8013c02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c04:	7bfb      	ldrb	r3, [r7, #15]
 8013c06:	4618      	mov	r0, r3
 8013c08:	f000 f91c 	bl	8013e44 <USBD_Get_USB_Status>
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013c10:	7bbb      	ldrb	r3, [r7, #14]
}
 8013c12:	4618      	mov	r0, r3
 8013c14:	3710      	adds	r7, #16
 8013c16:	46bd      	mov	sp, r7
 8013c18:	bd80      	pop	{r7, pc}

08013c1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013c1a:	b580      	push	{r7, lr}
 8013c1c:	b084      	sub	sp, #16
 8013c1e:	af00      	add	r7, sp, #0
 8013c20:	6078      	str	r0, [r7, #4]
 8013c22:	460b      	mov	r3, r1
 8013c24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c26:	2300      	movs	r3, #0
 8013c28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013c34:	78fa      	ldrb	r2, [r7, #3]
 8013c36:	4611      	mov	r1, r2
 8013c38:	4618      	mov	r0, r3
 8013c3a:	f7f4 fd52 	bl	80086e2 <HAL_PCD_EP_Close>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c42:	7bfb      	ldrb	r3, [r7, #15]
 8013c44:	4618      	mov	r0, r3
 8013c46:	f000 f8fd 	bl	8013e44 <USBD_Get_USB_Status>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013c4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013c50:	4618      	mov	r0, r3
 8013c52:	3710      	adds	r7, #16
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd80      	pop	{r7, pc}

08013c58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b084      	sub	sp, #16
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
 8013c60:	460b      	mov	r3, r1
 8013c62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c64:	2300      	movs	r3, #0
 8013c66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c68:	2300      	movs	r3, #0
 8013c6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013c72:	78fa      	ldrb	r2, [r7, #3]
 8013c74:	4611      	mov	r1, r2
 8013c76:	4618      	mov	r0, r3
 8013c78:	f7f4 fe0a 	bl	8008890 <HAL_PCD_EP_SetStall>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c80:	7bfb      	ldrb	r3, [r7, #15]
 8013c82:	4618      	mov	r0, r3
 8013c84:	f000 f8de 	bl	8013e44 <USBD_Get_USB_Status>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013c8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8013c8e:	4618      	mov	r0, r3
 8013c90:	3710      	adds	r7, #16
 8013c92:	46bd      	mov	sp, r7
 8013c94:	bd80      	pop	{r7, pc}

08013c96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013c96:	b580      	push	{r7, lr}
 8013c98:	b084      	sub	sp, #16
 8013c9a:	af00      	add	r7, sp, #0
 8013c9c:	6078      	str	r0, [r7, #4]
 8013c9e:	460b      	mov	r3, r1
 8013ca0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013cb0:	78fa      	ldrb	r2, [r7, #3]
 8013cb2:	4611      	mov	r1, r2
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	f7f4 fe4e 	bl	8008956 <HAL_PCD_EP_ClrStall>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013cbe:	7bfb      	ldrb	r3, [r7, #15]
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f000 f8bf 	bl	8013e44 <USBD_Get_USB_Status>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013cca:	7bbb      	ldrb	r3, [r7, #14]
}
 8013ccc:	4618      	mov	r0, r3
 8013cce:	3710      	adds	r7, #16
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	bd80      	pop	{r7, pc}

08013cd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013cd4:	b480      	push	{r7}
 8013cd6:	b085      	sub	sp, #20
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
 8013cdc:	460b      	mov	r3, r1
 8013cde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013ce6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	da0b      	bge.n	8013d08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013cf0:	78fb      	ldrb	r3, [r7, #3]
 8013cf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013cf6:	68f9      	ldr	r1, [r7, #12]
 8013cf8:	4613      	mov	r3, r2
 8013cfa:	00db      	lsls	r3, r3, #3
 8013cfc:	4413      	add	r3, r2
 8013cfe:	009b      	lsls	r3, r3, #2
 8013d00:	440b      	add	r3, r1
 8013d02:	3316      	adds	r3, #22
 8013d04:	781b      	ldrb	r3, [r3, #0]
 8013d06:	e00b      	b.n	8013d20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013d08:	78fb      	ldrb	r3, [r7, #3]
 8013d0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013d0e:	68f9      	ldr	r1, [r7, #12]
 8013d10:	4613      	mov	r3, r2
 8013d12:	00db      	lsls	r3, r3, #3
 8013d14:	4413      	add	r3, r2
 8013d16:	009b      	lsls	r3, r3, #2
 8013d18:	440b      	add	r3, r1
 8013d1a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8013d1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013d20:	4618      	mov	r0, r3
 8013d22:	3714      	adds	r7, #20
 8013d24:	46bd      	mov	sp, r7
 8013d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2a:	4770      	bx	lr

08013d2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b084      	sub	sp, #16
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
 8013d34:	460b      	mov	r3, r1
 8013d36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d38:	2300      	movs	r3, #0
 8013d3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013d46:	78fa      	ldrb	r2, [r7, #3]
 8013d48:	4611      	mov	r1, r2
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f7f4 fc3b 	bl	80085c6 <HAL_PCD_SetAddress>
 8013d50:	4603      	mov	r3, r0
 8013d52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013d54:	7bfb      	ldrb	r3, [r7, #15]
 8013d56:	4618      	mov	r0, r3
 8013d58:	f000 f874 	bl	8013e44 <USBD_Get_USB_Status>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d60:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	3710      	adds	r7, #16
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}

08013d6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013d6a:	b580      	push	{r7, lr}
 8013d6c:	b086      	sub	sp, #24
 8013d6e:	af00      	add	r7, sp, #0
 8013d70:	60f8      	str	r0, [r7, #12]
 8013d72:	607a      	str	r2, [r7, #4]
 8013d74:	603b      	str	r3, [r7, #0]
 8013d76:	460b      	mov	r3, r1
 8013d78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d7e:	2300      	movs	r3, #0
 8013d80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013d88:	7af9      	ldrb	r1, [r7, #11]
 8013d8a:	683b      	ldr	r3, [r7, #0]
 8013d8c:	687a      	ldr	r2, [r7, #4]
 8013d8e:	f7f4 fd45 	bl	800881c <HAL_PCD_EP_Transmit>
 8013d92:	4603      	mov	r3, r0
 8013d94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013d96:	7dfb      	ldrb	r3, [r7, #23]
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f000 f853 	bl	8013e44 <USBD_Get_USB_Status>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013da2:	7dbb      	ldrb	r3, [r7, #22]
}
 8013da4:	4618      	mov	r0, r3
 8013da6:	3718      	adds	r7, #24
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd80      	pop	{r7, pc}

08013dac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b086      	sub	sp, #24
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	60f8      	str	r0, [r7, #12]
 8013db4:	607a      	str	r2, [r7, #4]
 8013db6:	603b      	str	r3, [r7, #0]
 8013db8:	460b      	mov	r3, r1
 8013dba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013dca:	7af9      	ldrb	r1, [r7, #11]
 8013dcc:	683b      	ldr	r3, [r7, #0]
 8013dce:	687a      	ldr	r2, [r7, #4]
 8013dd0:	f7f4 fcd1 	bl	8008776 <HAL_PCD_EP_Receive>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013dd8:	7dfb      	ldrb	r3, [r7, #23]
 8013dda:	4618      	mov	r0, r3
 8013ddc:	f000 f832 	bl	8013e44 <USBD_Get_USB_Status>
 8013de0:	4603      	mov	r3, r0
 8013de2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013de4:	7dbb      	ldrb	r3, [r7, #22]
}
 8013de6:	4618      	mov	r0, r3
 8013de8:	3718      	adds	r7, #24
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bd80      	pop	{r7, pc}

08013dee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013dee:	b580      	push	{r7, lr}
 8013df0:	b082      	sub	sp, #8
 8013df2:	af00      	add	r7, sp, #0
 8013df4:	6078      	str	r0, [r7, #4]
 8013df6:	460b      	mov	r3, r1
 8013df8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013e00:	78fa      	ldrb	r2, [r7, #3]
 8013e02:	4611      	mov	r1, r2
 8013e04:	4618      	mov	r0, r3
 8013e06:	f7f4 fcf1 	bl	80087ec <HAL_PCD_EP_GetRxCount>
 8013e0a:	4603      	mov	r3, r0
}
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	3708      	adds	r7, #8
 8013e10:	46bd      	mov	sp, r7
 8013e12:	bd80      	pop	{r7, pc}

08013e14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013e14:	b480      	push	{r7}
 8013e16:	b083      	sub	sp, #12
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013e1c:	4b03      	ldr	r3, [pc, #12]	@ (8013e2c <USBD_static_malloc+0x18>)
}
 8013e1e:	4618      	mov	r0, r3
 8013e20:	370c      	adds	r7, #12
 8013e22:	46bd      	mov	sp, r7
 8013e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e28:	4770      	bx	lr
 8013e2a:	bf00      	nop
 8013e2c:	240046f4 	.word	0x240046f4

08013e30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013e30:	b480      	push	{r7}
 8013e32:	b083      	sub	sp, #12
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8013e38:	bf00      	nop
 8013e3a:	370c      	adds	r7, #12
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e42:	4770      	bx	lr

08013e44 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013e44:	b480      	push	{r7}
 8013e46:	b085      	sub	sp, #20
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	4603      	mov	r3, r0
 8013e4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013e4e:	2300      	movs	r3, #0
 8013e50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013e52:	79fb      	ldrb	r3, [r7, #7]
 8013e54:	2b03      	cmp	r3, #3
 8013e56:	d817      	bhi.n	8013e88 <USBD_Get_USB_Status+0x44>
 8013e58:	a201      	add	r2, pc, #4	@ (adr r2, 8013e60 <USBD_Get_USB_Status+0x1c>)
 8013e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e5e:	bf00      	nop
 8013e60:	08013e71 	.word	0x08013e71
 8013e64:	08013e77 	.word	0x08013e77
 8013e68:	08013e7d 	.word	0x08013e7d
 8013e6c:	08013e83 	.word	0x08013e83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013e70:	2300      	movs	r3, #0
 8013e72:	73fb      	strb	r3, [r7, #15]
    break;
 8013e74:	e00b      	b.n	8013e8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013e76:	2303      	movs	r3, #3
 8013e78:	73fb      	strb	r3, [r7, #15]
    break;
 8013e7a:	e008      	b.n	8013e8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013e7c:	2301      	movs	r3, #1
 8013e7e:	73fb      	strb	r3, [r7, #15]
    break;
 8013e80:	e005      	b.n	8013e8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013e82:	2303      	movs	r3, #3
 8013e84:	73fb      	strb	r3, [r7, #15]
    break;
 8013e86:	e002      	b.n	8013e8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013e88:	2303      	movs	r3, #3
 8013e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8013e8c:	bf00      	nop
  }
  return usb_status;
 8013e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e90:	4618      	mov	r0, r3
 8013e92:	3714      	adds	r7, #20
 8013e94:	46bd      	mov	sp, r7
 8013e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9a:	4770      	bx	lr

08013e9c <arm_sin_f32>:
 8013e9c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013ea0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8013f18 <arm_sin_f32+0x7c>
 8013ea4:	ee20 7a07 	vmul.f32	s14, s0, s14
 8013ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eac:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8013eb0:	d42c      	bmi.n	8013f0c <arm_sin_f32+0x70>
 8013eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013eb6:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8013f1c <arm_sin_f32+0x80>
 8013eba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013ebe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013ec2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eca:	db01      	blt.n	8013ed0 <arm_sin_f32+0x34>
 8013ecc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013ed0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8013ed4:	4a12      	ldr	r2, [pc, #72]	@ (8013f20 <arm_sin_f32+0x84>)
 8013ed6:	ee17 3a10 	vmov	r3, s14
 8013eda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ee2:	ee06 3a90 	vmov	s13, r3
 8013ee6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8013eea:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8013eee:	ed91 0a00 	vldr	s0, [r1]
 8013ef2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013ef6:	edd1 6a01 	vldr	s13, [r1, #4]
 8013efa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013efe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013f02:	ee27 0a00 	vmul.f32	s0, s14, s0
 8013f06:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013f0a:	4770      	bx	lr
 8013f0c:	ee17 3a90 	vmov	r3, s15
 8013f10:	3b01      	subs	r3, #1
 8013f12:	ee07 3a90 	vmov	s15, r3
 8013f16:	e7cc      	b.n	8013eb2 <arm_sin_f32+0x16>
 8013f18:	3e22f983 	.word	0x3e22f983
 8013f1c:	44000000 	.word	0x44000000
 8013f20:	08014958 	.word	0x08014958

08013f24 <sniprintf>:
 8013f24:	b40c      	push	{r2, r3}
 8013f26:	b530      	push	{r4, r5, lr}
 8013f28:	4b18      	ldr	r3, [pc, #96]	@ (8013f8c <sniprintf+0x68>)
 8013f2a:	1e0c      	subs	r4, r1, #0
 8013f2c:	681d      	ldr	r5, [r3, #0]
 8013f2e:	b09d      	sub	sp, #116	@ 0x74
 8013f30:	da08      	bge.n	8013f44 <sniprintf+0x20>
 8013f32:	238b      	movs	r3, #139	@ 0x8b
 8013f34:	602b      	str	r3, [r5, #0]
 8013f36:	f04f 30ff 	mov.w	r0, #4294967295
 8013f3a:	b01d      	add	sp, #116	@ 0x74
 8013f3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013f40:	b002      	add	sp, #8
 8013f42:	4770      	bx	lr
 8013f44:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013f48:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013f4c:	f04f 0300 	mov.w	r3, #0
 8013f50:	931b      	str	r3, [sp, #108]	@ 0x6c
 8013f52:	bf14      	ite	ne
 8013f54:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013f58:	4623      	moveq	r3, r4
 8013f5a:	9304      	str	r3, [sp, #16]
 8013f5c:	9307      	str	r3, [sp, #28]
 8013f5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013f62:	9002      	str	r0, [sp, #8]
 8013f64:	9006      	str	r0, [sp, #24]
 8013f66:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013f6a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013f6c:	ab21      	add	r3, sp, #132	@ 0x84
 8013f6e:	a902      	add	r1, sp, #8
 8013f70:	4628      	mov	r0, r5
 8013f72:	9301      	str	r3, [sp, #4]
 8013f74:	f000 f9bc 	bl	80142f0 <_svfiprintf_r>
 8013f78:	1c43      	adds	r3, r0, #1
 8013f7a:	bfbc      	itt	lt
 8013f7c:	238b      	movlt	r3, #139	@ 0x8b
 8013f7e:	602b      	strlt	r3, [r5, #0]
 8013f80:	2c00      	cmp	r4, #0
 8013f82:	d0da      	beq.n	8013f3a <sniprintf+0x16>
 8013f84:	9b02      	ldr	r3, [sp, #8]
 8013f86:	2200      	movs	r2, #0
 8013f88:	701a      	strb	r2, [r3, #0]
 8013f8a:	e7d6      	b.n	8013f3a <sniprintf+0x16>
 8013f8c:	24000104 	.word	0x24000104

08013f90 <memmove>:
 8013f90:	4288      	cmp	r0, r1
 8013f92:	b510      	push	{r4, lr}
 8013f94:	eb01 0402 	add.w	r4, r1, r2
 8013f98:	d902      	bls.n	8013fa0 <memmove+0x10>
 8013f9a:	4284      	cmp	r4, r0
 8013f9c:	4623      	mov	r3, r4
 8013f9e:	d807      	bhi.n	8013fb0 <memmove+0x20>
 8013fa0:	1e43      	subs	r3, r0, #1
 8013fa2:	42a1      	cmp	r1, r4
 8013fa4:	d008      	beq.n	8013fb8 <memmove+0x28>
 8013fa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013faa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013fae:	e7f8      	b.n	8013fa2 <memmove+0x12>
 8013fb0:	4402      	add	r2, r0
 8013fb2:	4601      	mov	r1, r0
 8013fb4:	428a      	cmp	r2, r1
 8013fb6:	d100      	bne.n	8013fba <memmove+0x2a>
 8013fb8:	bd10      	pop	{r4, pc}
 8013fba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013fbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013fc2:	e7f7      	b.n	8013fb4 <memmove+0x24>

08013fc4 <memset>:
 8013fc4:	4402      	add	r2, r0
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	4293      	cmp	r3, r2
 8013fca:	d100      	bne.n	8013fce <memset+0xa>
 8013fcc:	4770      	bx	lr
 8013fce:	f803 1b01 	strb.w	r1, [r3], #1
 8013fd2:	e7f9      	b.n	8013fc8 <memset+0x4>

08013fd4 <__errno>:
 8013fd4:	4b01      	ldr	r3, [pc, #4]	@ (8013fdc <__errno+0x8>)
 8013fd6:	6818      	ldr	r0, [r3, #0]
 8013fd8:	4770      	bx	lr
 8013fda:	bf00      	nop
 8013fdc:	24000104 	.word	0x24000104

08013fe0 <__libc_init_array>:
 8013fe0:	b570      	push	{r4, r5, r6, lr}
 8013fe2:	4d0d      	ldr	r5, [pc, #52]	@ (8014018 <__libc_init_array+0x38>)
 8013fe4:	4c0d      	ldr	r4, [pc, #52]	@ (801401c <__libc_init_array+0x3c>)
 8013fe6:	1b64      	subs	r4, r4, r5
 8013fe8:	10a4      	asrs	r4, r4, #2
 8013fea:	2600      	movs	r6, #0
 8013fec:	42a6      	cmp	r6, r4
 8013fee:	d109      	bne.n	8014004 <__libc_init_array+0x24>
 8013ff0:	4d0b      	ldr	r5, [pc, #44]	@ (8014020 <__libc_init_array+0x40>)
 8013ff2:	4c0c      	ldr	r4, [pc, #48]	@ (8014024 <__libc_init_array+0x44>)
 8013ff4:	f000 fc4a 	bl	801488c <_init>
 8013ff8:	1b64      	subs	r4, r4, r5
 8013ffa:	10a4      	asrs	r4, r4, #2
 8013ffc:	2600      	movs	r6, #0
 8013ffe:	42a6      	cmp	r6, r4
 8014000:	d105      	bne.n	801400e <__libc_init_array+0x2e>
 8014002:	bd70      	pop	{r4, r5, r6, pc}
 8014004:	f855 3b04 	ldr.w	r3, [r5], #4
 8014008:	4798      	blx	r3
 801400a:	3601      	adds	r6, #1
 801400c:	e7ee      	b.n	8013fec <__libc_init_array+0xc>
 801400e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014012:	4798      	blx	r3
 8014014:	3601      	adds	r6, #1
 8014016:	e7f2      	b.n	8013ffe <__libc_init_array+0x1e>
 8014018:	08015198 	.word	0x08015198
 801401c:	08015198 	.word	0x08015198
 8014020:	08015198 	.word	0x08015198
 8014024:	080151a0 	.word	0x080151a0

08014028 <__retarget_lock_acquire_recursive>:
 8014028:	4770      	bx	lr

0801402a <__retarget_lock_release_recursive>:
 801402a:	4770      	bx	lr

0801402c <memcpy>:
 801402c:	440a      	add	r2, r1
 801402e:	4291      	cmp	r1, r2
 8014030:	f100 33ff 	add.w	r3, r0, #4294967295
 8014034:	d100      	bne.n	8014038 <memcpy+0xc>
 8014036:	4770      	bx	lr
 8014038:	b510      	push	{r4, lr}
 801403a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801403e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014042:	4291      	cmp	r1, r2
 8014044:	d1f9      	bne.n	801403a <memcpy+0xe>
 8014046:	bd10      	pop	{r4, pc}

08014048 <_free_r>:
 8014048:	b538      	push	{r3, r4, r5, lr}
 801404a:	4605      	mov	r5, r0
 801404c:	2900      	cmp	r1, #0
 801404e:	d041      	beq.n	80140d4 <_free_r+0x8c>
 8014050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014054:	1f0c      	subs	r4, r1, #4
 8014056:	2b00      	cmp	r3, #0
 8014058:	bfb8      	it	lt
 801405a:	18e4      	addlt	r4, r4, r3
 801405c:	f000 f8e0 	bl	8014220 <__malloc_lock>
 8014060:	4a1d      	ldr	r2, [pc, #116]	@ (80140d8 <_free_r+0x90>)
 8014062:	6813      	ldr	r3, [r2, #0]
 8014064:	b933      	cbnz	r3, 8014074 <_free_r+0x2c>
 8014066:	6063      	str	r3, [r4, #4]
 8014068:	6014      	str	r4, [r2, #0]
 801406a:	4628      	mov	r0, r5
 801406c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014070:	f000 b8dc 	b.w	801422c <__malloc_unlock>
 8014074:	42a3      	cmp	r3, r4
 8014076:	d908      	bls.n	801408a <_free_r+0x42>
 8014078:	6820      	ldr	r0, [r4, #0]
 801407a:	1821      	adds	r1, r4, r0
 801407c:	428b      	cmp	r3, r1
 801407e:	bf01      	itttt	eq
 8014080:	6819      	ldreq	r1, [r3, #0]
 8014082:	685b      	ldreq	r3, [r3, #4]
 8014084:	1809      	addeq	r1, r1, r0
 8014086:	6021      	streq	r1, [r4, #0]
 8014088:	e7ed      	b.n	8014066 <_free_r+0x1e>
 801408a:	461a      	mov	r2, r3
 801408c:	685b      	ldr	r3, [r3, #4]
 801408e:	b10b      	cbz	r3, 8014094 <_free_r+0x4c>
 8014090:	42a3      	cmp	r3, r4
 8014092:	d9fa      	bls.n	801408a <_free_r+0x42>
 8014094:	6811      	ldr	r1, [r2, #0]
 8014096:	1850      	adds	r0, r2, r1
 8014098:	42a0      	cmp	r0, r4
 801409a:	d10b      	bne.n	80140b4 <_free_r+0x6c>
 801409c:	6820      	ldr	r0, [r4, #0]
 801409e:	4401      	add	r1, r0
 80140a0:	1850      	adds	r0, r2, r1
 80140a2:	4283      	cmp	r3, r0
 80140a4:	6011      	str	r1, [r2, #0]
 80140a6:	d1e0      	bne.n	801406a <_free_r+0x22>
 80140a8:	6818      	ldr	r0, [r3, #0]
 80140aa:	685b      	ldr	r3, [r3, #4]
 80140ac:	6053      	str	r3, [r2, #4]
 80140ae:	4408      	add	r0, r1
 80140b0:	6010      	str	r0, [r2, #0]
 80140b2:	e7da      	b.n	801406a <_free_r+0x22>
 80140b4:	d902      	bls.n	80140bc <_free_r+0x74>
 80140b6:	230c      	movs	r3, #12
 80140b8:	602b      	str	r3, [r5, #0]
 80140ba:	e7d6      	b.n	801406a <_free_r+0x22>
 80140bc:	6820      	ldr	r0, [r4, #0]
 80140be:	1821      	adds	r1, r4, r0
 80140c0:	428b      	cmp	r3, r1
 80140c2:	bf04      	itt	eq
 80140c4:	6819      	ldreq	r1, [r3, #0]
 80140c6:	685b      	ldreq	r3, [r3, #4]
 80140c8:	6063      	str	r3, [r4, #4]
 80140ca:	bf04      	itt	eq
 80140cc:	1809      	addeq	r1, r1, r0
 80140ce:	6021      	streq	r1, [r4, #0]
 80140d0:	6054      	str	r4, [r2, #4]
 80140d2:	e7ca      	b.n	801406a <_free_r+0x22>
 80140d4:	bd38      	pop	{r3, r4, r5, pc}
 80140d6:	bf00      	nop
 80140d8:	24004a58 	.word	0x24004a58

080140dc <sbrk_aligned>:
 80140dc:	b570      	push	{r4, r5, r6, lr}
 80140de:	4e0f      	ldr	r6, [pc, #60]	@ (801411c <sbrk_aligned+0x40>)
 80140e0:	460c      	mov	r4, r1
 80140e2:	6831      	ldr	r1, [r6, #0]
 80140e4:	4605      	mov	r5, r0
 80140e6:	b911      	cbnz	r1, 80140ee <sbrk_aligned+0x12>
 80140e8:	f000 fb8a 	bl	8014800 <_sbrk_r>
 80140ec:	6030      	str	r0, [r6, #0]
 80140ee:	4621      	mov	r1, r4
 80140f0:	4628      	mov	r0, r5
 80140f2:	f000 fb85 	bl	8014800 <_sbrk_r>
 80140f6:	1c43      	adds	r3, r0, #1
 80140f8:	d103      	bne.n	8014102 <sbrk_aligned+0x26>
 80140fa:	f04f 34ff 	mov.w	r4, #4294967295
 80140fe:	4620      	mov	r0, r4
 8014100:	bd70      	pop	{r4, r5, r6, pc}
 8014102:	1cc4      	adds	r4, r0, #3
 8014104:	f024 0403 	bic.w	r4, r4, #3
 8014108:	42a0      	cmp	r0, r4
 801410a:	d0f8      	beq.n	80140fe <sbrk_aligned+0x22>
 801410c:	1a21      	subs	r1, r4, r0
 801410e:	4628      	mov	r0, r5
 8014110:	f000 fb76 	bl	8014800 <_sbrk_r>
 8014114:	3001      	adds	r0, #1
 8014116:	d1f2      	bne.n	80140fe <sbrk_aligned+0x22>
 8014118:	e7ef      	b.n	80140fa <sbrk_aligned+0x1e>
 801411a:	bf00      	nop
 801411c:	24004a54 	.word	0x24004a54

08014120 <_malloc_r>:
 8014120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014124:	1ccd      	adds	r5, r1, #3
 8014126:	f025 0503 	bic.w	r5, r5, #3
 801412a:	3508      	adds	r5, #8
 801412c:	2d0c      	cmp	r5, #12
 801412e:	bf38      	it	cc
 8014130:	250c      	movcc	r5, #12
 8014132:	2d00      	cmp	r5, #0
 8014134:	4606      	mov	r6, r0
 8014136:	db01      	blt.n	801413c <_malloc_r+0x1c>
 8014138:	42a9      	cmp	r1, r5
 801413a:	d904      	bls.n	8014146 <_malloc_r+0x26>
 801413c:	230c      	movs	r3, #12
 801413e:	6033      	str	r3, [r6, #0]
 8014140:	2000      	movs	r0, #0
 8014142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014146:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801421c <_malloc_r+0xfc>
 801414a:	f000 f869 	bl	8014220 <__malloc_lock>
 801414e:	f8d8 3000 	ldr.w	r3, [r8]
 8014152:	461c      	mov	r4, r3
 8014154:	bb44      	cbnz	r4, 80141a8 <_malloc_r+0x88>
 8014156:	4629      	mov	r1, r5
 8014158:	4630      	mov	r0, r6
 801415a:	f7ff ffbf 	bl	80140dc <sbrk_aligned>
 801415e:	1c43      	adds	r3, r0, #1
 8014160:	4604      	mov	r4, r0
 8014162:	d158      	bne.n	8014216 <_malloc_r+0xf6>
 8014164:	f8d8 4000 	ldr.w	r4, [r8]
 8014168:	4627      	mov	r7, r4
 801416a:	2f00      	cmp	r7, #0
 801416c:	d143      	bne.n	80141f6 <_malloc_r+0xd6>
 801416e:	2c00      	cmp	r4, #0
 8014170:	d04b      	beq.n	801420a <_malloc_r+0xea>
 8014172:	6823      	ldr	r3, [r4, #0]
 8014174:	4639      	mov	r1, r7
 8014176:	4630      	mov	r0, r6
 8014178:	eb04 0903 	add.w	r9, r4, r3
 801417c:	f000 fb40 	bl	8014800 <_sbrk_r>
 8014180:	4581      	cmp	r9, r0
 8014182:	d142      	bne.n	801420a <_malloc_r+0xea>
 8014184:	6821      	ldr	r1, [r4, #0]
 8014186:	1a6d      	subs	r5, r5, r1
 8014188:	4629      	mov	r1, r5
 801418a:	4630      	mov	r0, r6
 801418c:	f7ff ffa6 	bl	80140dc <sbrk_aligned>
 8014190:	3001      	adds	r0, #1
 8014192:	d03a      	beq.n	801420a <_malloc_r+0xea>
 8014194:	6823      	ldr	r3, [r4, #0]
 8014196:	442b      	add	r3, r5
 8014198:	6023      	str	r3, [r4, #0]
 801419a:	f8d8 3000 	ldr.w	r3, [r8]
 801419e:	685a      	ldr	r2, [r3, #4]
 80141a0:	bb62      	cbnz	r2, 80141fc <_malloc_r+0xdc>
 80141a2:	f8c8 7000 	str.w	r7, [r8]
 80141a6:	e00f      	b.n	80141c8 <_malloc_r+0xa8>
 80141a8:	6822      	ldr	r2, [r4, #0]
 80141aa:	1b52      	subs	r2, r2, r5
 80141ac:	d420      	bmi.n	80141f0 <_malloc_r+0xd0>
 80141ae:	2a0b      	cmp	r2, #11
 80141b0:	d917      	bls.n	80141e2 <_malloc_r+0xc2>
 80141b2:	1961      	adds	r1, r4, r5
 80141b4:	42a3      	cmp	r3, r4
 80141b6:	6025      	str	r5, [r4, #0]
 80141b8:	bf18      	it	ne
 80141ba:	6059      	strne	r1, [r3, #4]
 80141bc:	6863      	ldr	r3, [r4, #4]
 80141be:	bf08      	it	eq
 80141c0:	f8c8 1000 	streq.w	r1, [r8]
 80141c4:	5162      	str	r2, [r4, r5]
 80141c6:	604b      	str	r3, [r1, #4]
 80141c8:	4630      	mov	r0, r6
 80141ca:	f000 f82f 	bl	801422c <__malloc_unlock>
 80141ce:	f104 000b 	add.w	r0, r4, #11
 80141d2:	1d23      	adds	r3, r4, #4
 80141d4:	f020 0007 	bic.w	r0, r0, #7
 80141d8:	1ac2      	subs	r2, r0, r3
 80141da:	bf1c      	itt	ne
 80141dc:	1a1b      	subne	r3, r3, r0
 80141de:	50a3      	strne	r3, [r4, r2]
 80141e0:	e7af      	b.n	8014142 <_malloc_r+0x22>
 80141e2:	6862      	ldr	r2, [r4, #4]
 80141e4:	42a3      	cmp	r3, r4
 80141e6:	bf0c      	ite	eq
 80141e8:	f8c8 2000 	streq.w	r2, [r8]
 80141ec:	605a      	strne	r2, [r3, #4]
 80141ee:	e7eb      	b.n	80141c8 <_malloc_r+0xa8>
 80141f0:	4623      	mov	r3, r4
 80141f2:	6864      	ldr	r4, [r4, #4]
 80141f4:	e7ae      	b.n	8014154 <_malloc_r+0x34>
 80141f6:	463c      	mov	r4, r7
 80141f8:	687f      	ldr	r7, [r7, #4]
 80141fa:	e7b6      	b.n	801416a <_malloc_r+0x4a>
 80141fc:	461a      	mov	r2, r3
 80141fe:	685b      	ldr	r3, [r3, #4]
 8014200:	42a3      	cmp	r3, r4
 8014202:	d1fb      	bne.n	80141fc <_malloc_r+0xdc>
 8014204:	2300      	movs	r3, #0
 8014206:	6053      	str	r3, [r2, #4]
 8014208:	e7de      	b.n	80141c8 <_malloc_r+0xa8>
 801420a:	230c      	movs	r3, #12
 801420c:	6033      	str	r3, [r6, #0]
 801420e:	4630      	mov	r0, r6
 8014210:	f000 f80c 	bl	801422c <__malloc_unlock>
 8014214:	e794      	b.n	8014140 <_malloc_r+0x20>
 8014216:	6005      	str	r5, [r0, #0]
 8014218:	e7d6      	b.n	80141c8 <_malloc_r+0xa8>
 801421a:	bf00      	nop
 801421c:	24004a58 	.word	0x24004a58

08014220 <__malloc_lock>:
 8014220:	4801      	ldr	r0, [pc, #4]	@ (8014228 <__malloc_lock+0x8>)
 8014222:	f7ff bf01 	b.w	8014028 <__retarget_lock_acquire_recursive>
 8014226:	bf00      	nop
 8014228:	24004a50 	.word	0x24004a50

0801422c <__malloc_unlock>:
 801422c:	4801      	ldr	r0, [pc, #4]	@ (8014234 <__malloc_unlock+0x8>)
 801422e:	f7ff befc 	b.w	801402a <__retarget_lock_release_recursive>
 8014232:	bf00      	nop
 8014234:	24004a50 	.word	0x24004a50

08014238 <__ssputs_r>:
 8014238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801423c:	688e      	ldr	r6, [r1, #8]
 801423e:	461f      	mov	r7, r3
 8014240:	42be      	cmp	r6, r7
 8014242:	680b      	ldr	r3, [r1, #0]
 8014244:	4682      	mov	sl, r0
 8014246:	460c      	mov	r4, r1
 8014248:	4690      	mov	r8, r2
 801424a:	d82d      	bhi.n	80142a8 <__ssputs_r+0x70>
 801424c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014250:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014254:	d026      	beq.n	80142a4 <__ssputs_r+0x6c>
 8014256:	6965      	ldr	r5, [r4, #20]
 8014258:	6909      	ldr	r1, [r1, #16]
 801425a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801425e:	eba3 0901 	sub.w	r9, r3, r1
 8014262:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014266:	1c7b      	adds	r3, r7, #1
 8014268:	444b      	add	r3, r9
 801426a:	106d      	asrs	r5, r5, #1
 801426c:	429d      	cmp	r5, r3
 801426e:	bf38      	it	cc
 8014270:	461d      	movcc	r5, r3
 8014272:	0553      	lsls	r3, r2, #21
 8014274:	d527      	bpl.n	80142c6 <__ssputs_r+0x8e>
 8014276:	4629      	mov	r1, r5
 8014278:	f7ff ff52 	bl	8014120 <_malloc_r>
 801427c:	4606      	mov	r6, r0
 801427e:	b360      	cbz	r0, 80142da <__ssputs_r+0xa2>
 8014280:	6921      	ldr	r1, [r4, #16]
 8014282:	464a      	mov	r2, r9
 8014284:	f7ff fed2 	bl	801402c <memcpy>
 8014288:	89a3      	ldrh	r3, [r4, #12]
 801428a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801428e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014292:	81a3      	strh	r3, [r4, #12]
 8014294:	6126      	str	r6, [r4, #16]
 8014296:	6165      	str	r5, [r4, #20]
 8014298:	444e      	add	r6, r9
 801429a:	eba5 0509 	sub.w	r5, r5, r9
 801429e:	6026      	str	r6, [r4, #0]
 80142a0:	60a5      	str	r5, [r4, #8]
 80142a2:	463e      	mov	r6, r7
 80142a4:	42be      	cmp	r6, r7
 80142a6:	d900      	bls.n	80142aa <__ssputs_r+0x72>
 80142a8:	463e      	mov	r6, r7
 80142aa:	6820      	ldr	r0, [r4, #0]
 80142ac:	4632      	mov	r2, r6
 80142ae:	4641      	mov	r1, r8
 80142b0:	f7ff fe6e 	bl	8013f90 <memmove>
 80142b4:	68a3      	ldr	r3, [r4, #8]
 80142b6:	1b9b      	subs	r3, r3, r6
 80142b8:	60a3      	str	r3, [r4, #8]
 80142ba:	6823      	ldr	r3, [r4, #0]
 80142bc:	4433      	add	r3, r6
 80142be:	6023      	str	r3, [r4, #0]
 80142c0:	2000      	movs	r0, #0
 80142c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142c6:	462a      	mov	r2, r5
 80142c8:	f000 faaa 	bl	8014820 <_realloc_r>
 80142cc:	4606      	mov	r6, r0
 80142ce:	2800      	cmp	r0, #0
 80142d0:	d1e0      	bne.n	8014294 <__ssputs_r+0x5c>
 80142d2:	6921      	ldr	r1, [r4, #16]
 80142d4:	4650      	mov	r0, sl
 80142d6:	f7ff feb7 	bl	8014048 <_free_r>
 80142da:	230c      	movs	r3, #12
 80142dc:	f8ca 3000 	str.w	r3, [sl]
 80142e0:	89a3      	ldrh	r3, [r4, #12]
 80142e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80142e6:	81a3      	strh	r3, [r4, #12]
 80142e8:	f04f 30ff 	mov.w	r0, #4294967295
 80142ec:	e7e9      	b.n	80142c2 <__ssputs_r+0x8a>
	...

080142f0 <_svfiprintf_r>:
 80142f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142f4:	4698      	mov	r8, r3
 80142f6:	898b      	ldrh	r3, [r1, #12]
 80142f8:	061b      	lsls	r3, r3, #24
 80142fa:	b09d      	sub	sp, #116	@ 0x74
 80142fc:	4607      	mov	r7, r0
 80142fe:	460d      	mov	r5, r1
 8014300:	4614      	mov	r4, r2
 8014302:	d510      	bpl.n	8014326 <_svfiprintf_r+0x36>
 8014304:	690b      	ldr	r3, [r1, #16]
 8014306:	b973      	cbnz	r3, 8014326 <_svfiprintf_r+0x36>
 8014308:	2140      	movs	r1, #64	@ 0x40
 801430a:	f7ff ff09 	bl	8014120 <_malloc_r>
 801430e:	6028      	str	r0, [r5, #0]
 8014310:	6128      	str	r0, [r5, #16]
 8014312:	b930      	cbnz	r0, 8014322 <_svfiprintf_r+0x32>
 8014314:	230c      	movs	r3, #12
 8014316:	603b      	str	r3, [r7, #0]
 8014318:	f04f 30ff 	mov.w	r0, #4294967295
 801431c:	b01d      	add	sp, #116	@ 0x74
 801431e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014322:	2340      	movs	r3, #64	@ 0x40
 8014324:	616b      	str	r3, [r5, #20]
 8014326:	2300      	movs	r3, #0
 8014328:	9309      	str	r3, [sp, #36]	@ 0x24
 801432a:	2320      	movs	r3, #32
 801432c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014330:	f8cd 800c 	str.w	r8, [sp, #12]
 8014334:	2330      	movs	r3, #48	@ 0x30
 8014336:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80144d4 <_svfiprintf_r+0x1e4>
 801433a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801433e:	f04f 0901 	mov.w	r9, #1
 8014342:	4623      	mov	r3, r4
 8014344:	469a      	mov	sl, r3
 8014346:	f813 2b01 	ldrb.w	r2, [r3], #1
 801434a:	b10a      	cbz	r2, 8014350 <_svfiprintf_r+0x60>
 801434c:	2a25      	cmp	r2, #37	@ 0x25
 801434e:	d1f9      	bne.n	8014344 <_svfiprintf_r+0x54>
 8014350:	ebba 0b04 	subs.w	fp, sl, r4
 8014354:	d00b      	beq.n	801436e <_svfiprintf_r+0x7e>
 8014356:	465b      	mov	r3, fp
 8014358:	4622      	mov	r2, r4
 801435a:	4629      	mov	r1, r5
 801435c:	4638      	mov	r0, r7
 801435e:	f7ff ff6b 	bl	8014238 <__ssputs_r>
 8014362:	3001      	adds	r0, #1
 8014364:	f000 80a7 	beq.w	80144b6 <_svfiprintf_r+0x1c6>
 8014368:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801436a:	445a      	add	r2, fp
 801436c:	9209      	str	r2, [sp, #36]	@ 0x24
 801436e:	f89a 3000 	ldrb.w	r3, [sl]
 8014372:	2b00      	cmp	r3, #0
 8014374:	f000 809f 	beq.w	80144b6 <_svfiprintf_r+0x1c6>
 8014378:	2300      	movs	r3, #0
 801437a:	f04f 32ff 	mov.w	r2, #4294967295
 801437e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014382:	f10a 0a01 	add.w	sl, sl, #1
 8014386:	9304      	str	r3, [sp, #16]
 8014388:	9307      	str	r3, [sp, #28]
 801438a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801438e:	931a      	str	r3, [sp, #104]	@ 0x68
 8014390:	4654      	mov	r4, sl
 8014392:	2205      	movs	r2, #5
 8014394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014398:	484e      	ldr	r0, [pc, #312]	@ (80144d4 <_svfiprintf_r+0x1e4>)
 801439a:	f7eb ffc1 	bl	8000320 <memchr>
 801439e:	9a04      	ldr	r2, [sp, #16]
 80143a0:	b9d8      	cbnz	r0, 80143da <_svfiprintf_r+0xea>
 80143a2:	06d0      	lsls	r0, r2, #27
 80143a4:	bf44      	itt	mi
 80143a6:	2320      	movmi	r3, #32
 80143a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80143ac:	0711      	lsls	r1, r2, #28
 80143ae:	bf44      	itt	mi
 80143b0:	232b      	movmi	r3, #43	@ 0x2b
 80143b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80143b6:	f89a 3000 	ldrb.w	r3, [sl]
 80143ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80143bc:	d015      	beq.n	80143ea <_svfiprintf_r+0xfa>
 80143be:	9a07      	ldr	r2, [sp, #28]
 80143c0:	4654      	mov	r4, sl
 80143c2:	2000      	movs	r0, #0
 80143c4:	f04f 0c0a 	mov.w	ip, #10
 80143c8:	4621      	mov	r1, r4
 80143ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80143ce:	3b30      	subs	r3, #48	@ 0x30
 80143d0:	2b09      	cmp	r3, #9
 80143d2:	d94b      	bls.n	801446c <_svfiprintf_r+0x17c>
 80143d4:	b1b0      	cbz	r0, 8014404 <_svfiprintf_r+0x114>
 80143d6:	9207      	str	r2, [sp, #28]
 80143d8:	e014      	b.n	8014404 <_svfiprintf_r+0x114>
 80143da:	eba0 0308 	sub.w	r3, r0, r8
 80143de:	fa09 f303 	lsl.w	r3, r9, r3
 80143e2:	4313      	orrs	r3, r2
 80143e4:	9304      	str	r3, [sp, #16]
 80143e6:	46a2      	mov	sl, r4
 80143e8:	e7d2      	b.n	8014390 <_svfiprintf_r+0xa0>
 80143ea:	9b03      	ldr	r3, [sp, #12]
 80143ec:	1d19      	adds	r1, r3, #4
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	9103      	str	r1, [sp, #12]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	bfbb      	ittet	lt
 80143f6:	425b      	neglt	r3, r3
 80143f8:	f042 0202 	orrlt.w	r2, r2, #2
 80143fc:	9307      	strge	r3, [sp, #28]
 80143fe:	9307      	strlt	r3, [sp, #28]
 8014400:	bfb8      	it	lt
 8014402:	9204      	strlt	r2, [sp, #16]
 8014404:	7823      	ldrb	r3, [r4, #0]
 8014406:	2b2e      	cmp	r3, #46	@ 0x2e
 8014408:	d10a      	bne.n	8014420 <_svfiprintf_r+0x130>
 801440a:	7863      	ldrb	r3, [r4, #1]
 801440c:	2b2a      	cmp	r3, #42	@ 0x2a
 801440e:	d132      	bne.n	8014476 <_svfiprintf_r+0x186>
 8014410:	9b03      	ldr	r3, [sp, #12]
 8014412:	1d1a      	adds	r2, r3, #4
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	9203      	str	r2, [sp, #12]
 8014418:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801441c:	3402      	adds	r4, #2
 801441e:	9305      	str	r3, [sp, #20]
 8014420:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80144e4 <_svfiprintf_r+0x1f4>
 8014424:	7821      	ldrb	r1, [r4, #0]
 8014426:	2203      	movs	r2, #3
 8014428:	4650      	mov	r0, sl
 801442a:	f7eb ff79 	bl	8000320 <memchr>
 801442e:	b138      	cbz	r0, 8014440 <_svfiprintf_r+0x150>
 8014430:	9b04      	ldr	r3, [sp, #16]
 8014432:	eba0 000a 	sub.w	r0, r0, sl
 8014436:	2240      	movs	r2, #64	@ 0x40
 8014438:	4082      	lsls	r2, r0
 801443a:	4313      	orrs	r3, r2
 801443c:	3401      	adds	r4, #1
 801443e:	9304      	str	r3, [sp, #16]
 8014440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014444:	4824      	ldr	r0, [pc, #144]	@ (80144d8 <_svfiprintf_r+0x1e8>)
 8014446:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801444a:	2206      	movs	r2, #6
 801444c:	f7eb ff68 	bl	8000320 <memchr>
 8014450:	2800      	cmp	r0, #0
 8014452:	d036      	beq.n	80144c2 <_svfiprintf_r+0x1d2>
 8014454:	4b21      	ldr	r3, [pc, #132]	@ (80144dc <_svfiprintf_r+0x1ec>)
 8014456:	bb1b      	cbnz	r3, 80144a0 <_svfiprintf_r+0x1b0>
 8014458:	9b03      	ldr	r3, [sp, #12]
 801445a:	3307      	adds	r3, #7
 801445c:	f023 0307 	bic.w	r3, r3, #7
 8014460:	3308      	adds	r3, #8
 8014462:	9303      	str	r3, [sp, #12]
 8014464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014466:	4433      	add	r3, r6
 8014468:	9309      	str	r3, [sp, #36]	@ 0x24
 801446a:	e76a      	b.n	8014342 <_svfiprintf_r+0x52>
 801446c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014470:	460c      	mov	r4, r1
 8014472:	2001      	movs	r0, #1
 8014474:	e7a8      	b.n	80143c8 <_svfiprintf_r+0xd8>
 8014476:	2300      	movs	r3, #0
 8014478:	3401      	adds	r4, #1
 801447a:	9305      	str	r3, [sp, #20]
 801447c:	4619      	mov	r1, r3
 801447e:	f04f 0c0a 	mov.w	ip, #10
 8014482:	4620      	mov	r0, r4
 8014484:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014488:	3a30      	subs	r2, #48	@ 0x30
 801448a:	2a09      	cmp	r2, #9
 801448c:	d903      	bls.n	8014496 <_svfiprintf_r+0x1a6>
 801448e:	2b00      	cmp	r3, #0
 8014490:	d0c6      	beq.n	8014420 <_svfiprintf_r+0x130>
 8014492:	9105      	str	r1, [sp, #20]
 8014494:	e7c4      	b.n	8014420 <_svfiprintf_r+0x130>
 8014496:	fb0c 2101 	mla	r1, ip, r1, r2
 801449a:	4604      	mov	r4, r0
 801449c:	2301      	movs	r3, #1
 801449e:	e7f0      	b.n	8014482 <_svfiprintf_r+0x192>
 80144a0:	ab03      	add	r3, sp, #12
 80144a2:	9300      	str	r3, [sp, #0]
 80144a4:	462a      	mov	r2, r5
 80144a6:	4b0e      	ldr	r3, [pc, #56]	@ (80144e0 <_svfiprintf_r+0x1f0>)
 80144a8:	a904      	add	r1, sp, #16
 80144aa:	4638      	mov	r0, r7
 80144ac:	f3af 8000 	nop.w
 80144b0:	1c42      	adds	r2, r0, #1
 80144b2:	4606      	mov	r6, r0
 80144b4:	d1d6      	bne.n	8014464 <_svfiprintf_r+0x174>
 80144b6:	89ab      	ldrh	r3, [r5, #12]
 80144b8:	065b      	lsls	r3, r3, #25
 80144ba:	f53f af2d 	bmi.w	8014318 <_svfiprintf_r+0x28>
 80144be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80144c0:	e72c      	b.n	801431c <_svfiprintf_r+0x2c>
 80144c2:	ab03      	add	r3, sp, #12
 80144c4:	9300      	str	r3, [sp, #0]
 80144c6:	462a      	mov	r2, r5
 80144c8:	4b05      	ldr	r3, [pc, #20]	@ (80144e0 <_svfiprintf_r+0x1f0>)
 80144ca:	a904      	add	r1, sp, #16
 80144cc:	4638      	mov	r0, r7
 80144ce:	f000 f879 	bl	80145c4 <_printf_i>
 80144d2:	e7ed      	b.n	80144b0 <_svfiprintf_r+0x1c0>
 80144d4:	0801515c 	.word	0x0801515c
 80144d8:	08015166 	.word	0x08015166
 80144dc:	00000000 	.word	0x00000000
 80144e0:	08014239 	.word	0x08014239
 80144e4:	08015162 	.word	0x08015162

080144e8 <_printf_common>:
 80144e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144ec:	4616      	mov	r6, r2
 80144ee:	4698      	mov	r8, r3
 80144f0:	688a      	ldr	r2, [r1, #8]
 80144f2:	690b      	ldr	r3, [r1, #16]
 80144f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80144f8:	4293      	cmp	r3, r2
 80144fa:	bfb8      	it	lt
 80144fc:	4613      	movlt	r3, r2
 80144fe:	6033      	str	r3, [r6, #0]
 8014500:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014504:	4607      	mov	r7, r0
 8014506:	460c      	mov	r4, r1
 8014508:	b10a      	cbz	r2, 801450e <_printf_common+0x26>
 801450a:	3301      	adds	r3, #1
 801450c:	6033      	str	r3, [r6, #0]
 801450e:	6823      	ldr	r3, [r4, #0]
 8014510:	0699      	lsls	r1, r3, #26
 8014512:	bf42      	ittt	mi
 8014514:	6833      	ldrmi	r3, [r6, #0]
 8014516:	3302      	addmi	r3, #2
 8014518:	6033      	strmi	r3, [r6, #0]
 801451a:	6825      	ldr	r5, [r4, #0]
 801451c:	f015 0506 	ands.w	r5, r5, #6
 8014520:	d106      	bne.n	8014530 <_printf_common+0x48>
 8014522:	f104 0a19 	add.w	sl, r4, #25
 8014526:	68e3      	ldr	r3, [r4, #12]
 8014528:	6832      	ldr	r2, [r6, #0]
 801452a:	1a9b      	subs	r3, r3, r2
 801452c:	42ab      	cmp	r3, r5
 801452e:	dc26      	bgt.n	801457e <_printf_common+0x96>
 8014530:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014534:	6822      	ldr	r2, [r4, #0]
 8014536:	3b00      	subs	r3, #0
 8014538:	bf18      	it	ne
 801453a:	2301      	movne	r3, #1
 801453c:	0692      	lsls	r2, r2, #26
 801453e:	d42b      	bmi.n	8014598 <_printf_common+0xb0>
 8014540:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014544:	4641      	mov	r1, r8
 8014546:	4638      	mov	r0, r7
 8014548:	47c8      	blx	r9
 801454a:	3001      	adds	r0, #1
 801454c:	d01e      	beq.n	801458c <_printf_common+0xa4>
 801454e:	6823      	ldr	r3, [r4, #0]
 8014550:	6922      	ldr	r2, [r4, #16]
 8014552:	f003 0306 	and.w	r3, r3, #6
 8014556:	2b04      	cmp	r3, #4
 8014558:	bf02      	ittt	eq
 801455a:	68e5      	ldreq	r5, [r4, #12]
 801455c:	6833      	ldreq	r3, [r6, #0]
 801455e:	1aed      	subeq	r5, r5, r3
 8014560:	68a3      	ldr	r3, [r4, #8]
 8014562:	bf0c      	ite	eq
 8014564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014568:	2500      	movne	r5, #0
 801456a:	4293      	cmp	r3, r2
 801456c:	bfc4      	itt	gt
 801456e:	1a9b      	subgt	r3, r3, r2
 8014570:	18ed      	addgt	r5, r5, r3
 8014572:	2600      	movs	r6, #0
 8014574:	341a      	adds	r4, #26
 8014576:	42b5      	cmp	r5, r6
 8014578:	d11a      	bne.n	80145b0 <_printf_common+0xc8>
 801457a:	2000      	movs	r0, #0
 801457c:	e008      	b.n	8014590 <_printf_common+0xa8>
 801457e:	2301      	movs	r3, #1
 8014580:	4652      	mov	r2, sl
 8014582:	4641      	mov	r1, r8
 8014584:	4638      	mov	r0, r7
 8014586:	47c8      	blx	r9
 8014588:	3001      	adds	r0, #1
 801458a:	d103      	bne.n	8014594 <_printf_common+0xac>
 801458c:	f04f 30ff 	mov.w	r0, #4294967295
 8014590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014594:	3501      	adds	r5, #1
 8014596:	e7c6      	b.n	8014526 <_printf_common+0x3e>
 8014598:	18e1      	adds	r1, r4, r3
 801459a:	1c5a      	adds	r2, r3, #1
 801459c:	2030      	movs	r0, #48	@ 0x30
 801459e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80145a2:	4422      	add	r2, r4
 80145a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80145a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80145ac:	3302      	adds	r3, #2
 80145ae:	e7c7      	b.n	8014540 <_printf_common+0x58>
 80145b0:	2301      	movs	r3, #1
 80145b2:	4622      	mov	r2, r4
 80145b4:	4641      	mov	r1, r8
 80145b6:	4638      	mov	r0, r7
 80145b8:	47c8      	blx	r9
 80145ba:	3001      	adds	r0, #1
 80145bc:	d0e6      	beq.n	801458c <_printf_common+0xa4>
 80145be:	3601      	adds	r6, #1
 80145c0:	e7d9      	b.n	8014576 <_printf_common+0x8e>
	...

080145c4 <_printf_i>:
 80145c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80145c8:	7e0f      	ldrb	r7, [r1, #24]
 80145ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80145cc:	2f78      	cmp	r7, #120	@ 0x78
 80145ce:	4691      	mov	r9, r2
 80145d0:	4680      	mov	r8, r0
 80145d2:	460c      	mov	r4, r1
 80145d4:	469a      	mov	sl, r3
 80145d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80145da:	d807      	bhi.n	80145ec <_printf_i+0x28>
 80145dc:	2f62      	cmp	r7, #98	@ 0x62
 80145de:	d80a      	bhi.n	80145f6 <_printf_i+0x32>
 80145e0:	2f00      	cmp	r7, #0
 80145e2:	f000 80d1 	beq.w	8014788 <_printf_i+0x1c4>
 80145e6:	2f58      	cmp	r7, #88	@ 0x58
 80145e8:	f000 80b8 	beq.w	801475c <_printf_i+0x198>
 80145ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80145f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80145f4:	e03a      	b.n	801466c <_printf_i+0xa8>
 80145f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80145fa:	2b15      	cmp	r3, #21
 80145fc:	d8f6      	bhi.n	80145ec <_printf_i+0x28>
 80145fe:	a101      	add	r1, pc, #4	@ (adr r1, 8014604 <_printf_i+0x40>)
 8014600:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014604:	0801465d 	.word	0x0801465d
 8014608:	08014671 	.word	0x08014671
 801460c:	080145ed 	.word	0x080145ed
 8014610:	080145ed 	.word	0x080145ed
 8014614:	080145ed 	.word	0x080145ed
 8014618:	080145ed 	.word	0x080145ed
 801461c:	08014671 	.word	0x08014671
 8014620:	080145ed 	.word	0x080145ed
 8014624:	080145ed 	.word	0x080145ed
 8014628:	080145ed 	.word	0x080145ed
 801462c:	080145ed 	.word	0x080145ed
 8014630:	0801476f 	.word	0x0801476f
 8014634:	0801469b 	.word	0x0801469b
 8014638:	08014729 	.word	0x08014729
 801463c:	080145ed 	.word	0x080145ed
 8014640:	080145ed 	.word	0x080145ed
 8014644:	08014791 	.word	0x08014791
 8014648:	080145ed 	.word	0x080145ed
 801464c:	0801469b 	.word	0x0801469b
 8014650:	080145ed 	.word	0x080145ed
 8014654:	080145ed 	.word	0x080145ed
 8014658:	08014731 	.word	0x08014731
 801465c:	6833      	ldr	r3, [r6, #0]
 801465e:	1d1a      	adds	r2, r3, #4
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	6032      	str	r2, [r6, #0]
 8014664:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014668:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801466c:	2301      	movs	r3, #1
 801466e:	e09c      	b.n	80147aa <_printf_i+0x1e6>
 8014670:	6833      	ldr	r3, [r6, #0]
 8014672:	6820      	ldr	r0, [r4, #0]
 8014674:	1d19      	adds	r1, r3, #4
 8014676:	6031      	str	r1, [r6, #0]
 8014678:	0606      	lsls	r6, r0, #24
 801467a:	d501      	bpl.n	8014680 <_printf_i+0xbc>
 801467c:	681d      	ldr	r5, [r3, #0]
 801467e:	e003      	b.n	8014688 <_printf_i+0xc4>
 8014680:	0645      	lsls	r5, r0, #25
 8014682:	d5fb      	bpl.n	801467c <_printf_i+0xb8>
 8014684:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014688:	2d00      	cmp	r5, #0
 801468a:	da03      	bge.n	8014694 <_printf_i+0xd0>
 801468c:	232d      	movs	r3, #45	@ 0x2d
 801468e:	426d      	negs	r5, r5
 8014690:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014694:	4858      	ldr	r0, [pc, #352]	@ (80147f8 <_printf_i+0x234>)
 8014696:	230a      	movs	r3, #10
 8014698:	e011      	b.n	80146be <_printf_i+0xfa>
 801469a:	6821      	ldr	r1, [r4, #0]
 801469c:	6833      	ldr	r3, [r6, #0]
 801469e:	0608      	lsls	r0, r1, #24
 80146a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80146a4:	d402      	bmi.n	80146ac <_printf_i+0xe8>
 80146a6:	0649      	lsls	r1, r1, #25
 80146a8:	bf48      	it	mi
 80146aa:	b2ad      	uxthmi	r5, r5
 80146ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80146ae:	4852      	ldr	r0, [pc, #328]	@ (80147f8 <_printf_i+0x234>)
 80146b0:	6033      	str	r3, [r6, #0]
 80146b2:	bf14      	ite	ne
 80146b4:	230a      	movne	r3, #10
 80146b6:	2308      	moveq	r3, #8
 80146b8:	2100      	movs	r1, #0
 80146ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80146be:	6866      	ldr	r6, [r4, #4]
 80146c0:	60a6      	str	r6, [r4, #8]
 80146c2:	2e00      	cmp	r6, #0
 80146c4:	db05      	blt.n	80146d2 <_printf_i+0x10e>
 80146c6:	6821      	ldr	r1, [r4, #0]
 80146c8:	432e      	orrs	r6, r5
 80146ca:	f021 0104 	bic.w	r1, r1, #4
 80146ce:	6021      	str	r1, [r4, #0]
 80146d0:	d04b      	beq.n	801476a <_printf_i+0x1a6>
 80146d2:	4616      	mov	r6, r2
 80146d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80146d8:	fb03 5711 	mls	r7, r3, r1, r5
 80146dc:	5dc7      	ldrb	r7, [r0, r7]
 80146de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80146e2:	462f      	mov	r7, r5
 80146e4:	42bb      	cmp	r3, r7
 80146e6:	460d      	mov	r5, r1
 80146e8:	d9f4      	bls.n	80146d4 <_printf_i+0x110>
 80146ea:	2b08      	cmp	r3, #8
 80146ec:	d10b      	bne.n	8014706 <_printf_i+0x142>
 80146ee:	6823      	ldr	r3, [r4, #0]
 80146f0:	07df      	lsls	r7, r3, #31
 80146f2:	d508      	bpl.n	8014706 <_printf_i+0x142>
 80146f4:	6923      	ldr	r3, [r4, #16]
 80146f6:	6861      	ldr	r1, [r4, #4]
 80146f8:	4299      	cmp	r1, r3
 80146fa:	bfde      	ittt	le
 80146fc:	2330      	movle	r3, #48	@ 0x30
 80146fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014702:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014706:	1b92      	subs	r2, r2, r6
 8014708:	6122      	str	r2, [r4, #16]
 801470a:	f8cd a000 	str.w	sl, [sp]
 801470e:	464b      	mov	r3, r9
 8014710:	aa03      	add	r2, sp, #12
 8014712:	4621      	mov	r1, r4
 8014714:	4640      	mov	r0, r8
 8014716:	f7ff fee7 	bl	80144e8 <_printf_common>
 801471a:	3001      	adds	r0, #1
 801471c:	d14a      	bne.n	80147b4 <_printf_i+0x1f0>
 801471e:	f04f 30ff 	mov.w	r0, #4294967295
 8014722:	b004      	add	sp, #16
 8014724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014728:	6823      	ldr	r3, [r4, #0]
 801472a:	f043 0320 	orr.w	r3, r3, #32
 801472e:	6023      	str	r3, [r4, #0]
 8014730:	4832      	ldr	r0, [pc, #200]	@ (80147fc <_printf_i+0x238>)
 8014732:	2778      	movs	r7, #120	@ 0x78
 8014734:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014738:	6823      	ldr	r3, [r4, #0]
 801473a:	6831      	ldr	r1, [r6, #0]
 801473c:	061f      	lsls	r7, r3, #24
 801473e:	f851 5b04 	ldr.w	r5, [r1], #4
 8014742:	d402      	bmi.n	801474a <_printf_i+0x186>
 8014744:	065f      	lsls	r7, r3, #25
 8014746:	bf48      	it	mi
 8014748:	b2ad      	uxthmi	r5, r5
 801474a:	6031      	str	r1, [r6, #0]
 801474c:	07d9      	lsls	r1, r3, #31
 801474e:	bf44      	itt	mi
 8014750:	f043 0320 	orrmi.w	r3, r3, #32
 8014754:	6023      	strmi	r3, [r4, #0]
 8014756:	b11d      	cbz	r5, 8014760 <_printf_i+0x19c>
 8014758:	2310      	movs	r3, #16
 801475a:	e7ad      	b.n	80146b8 <_printf_i+0xf4>
 801475c:	4826      	ldr	r0, [pc, #152]	@ (80147f8 <_printf_i+0x234>)
 801475e:	e7e9      	b.n	8014734 <_printf_i+0x170>
 8014760:	6823      	ldr	r3, [r4, #0]
 8014762:	f023 0320 	bic.w	r3, r3, #32
 8014766:	6023      	str	r3, [r4, #0]
 8014768:	e7f6      	b.n	8014758 <_printf_i+0x194>
 801476a:	4616      	mov	r6, r2
 801476c:	e7bd      	b.n	80146ea <_printf_i+0x126>
 801476e:	6833      	ldr	r3, [r6, #0]
 8014770:	6825      	ldr	r5, [r4, #0]
 8014772:	6961      	ldr	r1, [r4, #20]
 8014774:	1d18      	adds	r0, r3, #4
 8014776:	6030      	str	r0, [r6, #0]
 8014778:	062e      	lsls	r6, r5, #24
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	d501      	bpl.n	8014782 <_printf_i+0x1be>
 801477e:	6019      	str	r1, [r3, #0]
 8014780:	e002      	b.n	8014788 <_printf_i+0x1c4>
 8014782:	0668      	lsls	r0, r5, #25
 8014784:	d5fb      	bpl.n	801477e <_printf_i+0x1ba>
 8014786:	8019      	strh	r1, [r3, #0]
 8014788:	2300      	movs	r3, #0
 801478a:	6123      	str	r3, [r4, #16]
 801478c:	4616      	mov	r6, r2
 801478e:	e7bc      	b.n	801470a <_printf_i+0x146>
 8014790:	6833      	ldr	r3, [r6, #0]
 8014792:	1d1a      	adds	r2, r3, #4
 8014794:	6032      	str	r2, [r6, #0]
 8014796:	681e      	ldr	r6, [r3, #0]
 8014798:	6862      	ldr	r2, [r4, #4]
 801479a:	2100      	movs	r1, #0
 801479c:	4630      	mov	r0, r6
 801479e:	f7eb fdbf 	bl	8000320 <memchr>
 80147a2:	b108      	cbz	r0, 80147a8 <_printf_i+0x1e4>
 80147a4:	1b80      	subs	r0, r0, r6
 80147a6:	6060      	str	r0, [r4, #4]
 80147a8:	6863      	ldr	r3, [r4, #4]
 80147aa:	6123      	str	r3, [r4, #16]
 80147ac:	2300      	movs	r3, #0
 80147ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80147b2:	e7aa      	b.n	801470a <_printf_i+0x146>
 80147b4:	6923      	ldr	r3, [r4, #16]
 80147b6:	4632      	mov	r2, r6
 80147b8:	4649      	mov	r1, r9
 80147ba:	4640      	mov	r0, r8
 80147bc:	47d0      	blx	sl
 80147be:	3001      	adds	r0, #1
 80147c0:	d0ad      	beq.n	801471e <_printf_i+0x15a>
 80147c2:	6823      	ldr	r3, [r4, #0]
 80147c4:	079b      	lsls	r3, r3, #30
 80147c6:	d413      	bmi.n	80147f0 <_printf_i+0x22c>
 80147c8:	68e0      	ldr	r0, [r4, #12]
 80147ca:	9b03      	ldr	r3, [sp, #12]
 80147cc:	4298      	cmp	r0, r3
 80147ce:	bfb8      	it	lt
 80147d0:	4618      	movlt	r0, r3
 80147d2:	e7a6      	b.n	8014722 <_printf_i+0x15e>
 80147d4:	2301      	movs	r3, #1
 80147d6:	4632      	mov	r2, r6
 80147d8:	4649      	mov	r1, r9
 80147da:	4640      	mov	r0, r8
 80147dc:	47d0      	blx	sl
 80147de:	3001      	adds	r0, #1
 80147e0:	d09d      	beq.n	801471e <_printf_i+0x15a>
 80147e2:	3501      	adds	r5, #1
 80147e4:	68e3      	ldr	r3, [r4, #12]
 80147e6:	9903      	ldr	r1, [sp, #12]
 80147e8:	1a5b      	subs	r3, r3, r1
 80147ea:	42ab      	cmp	r3, r5
 80147ec:	dcf2      	bgt.n	80147d4 <_printf_i+0x210>
 80147ee:	e7eb      	b.n	80147c8 <_printf_i+0x204>
 80147f0:	2500      	movs	r5, #0
 80147f2:	f104 0619 	add.w	r6, r4, #25
 80147f6:	e7f5      	b.n	80147e4 <_printf_i+0x220>
 80147f8:	0801516d 	.word	0x0801516d
 80147fc:	0801517e 	.word	0x0801517e

08014800 <_sbrk_r>:
 8014800:	b538      	push	{r3, r4, r5, lr}
 8014802:	4d06      	ldr	r5, [pc, #24]	@ (801481c <_sbrk_r+0x1c>)
 8014804:	2300      	movs	r3, #0
 8014806:	4604      	mov	r4, r0
 8014808:	4608      	mov	r0, r1
 801480a:	602b      	str	r3, [r5, #0]
 801480c:	f7ec ff18 	bl	8001640 <_sbrk>
 8014810:	1c43      	adds	r3, r0, #1
 8014812:	d102      	bne.n	801481a <_sbrk_r+0x1a>
 8014814:	682b      	ldr	r3, [r5, #0]
 8014816:	b103      	cbz	r3, 801481a <_sbrk_r+0x1a>
 8014818:	6023      	str	r3, [r4, #0]
 801481a:	bd38      	pop	{r3, r4, r5, pc}
 801481c:	24004a4c 	.word	0x24004a4c

08014820 <_realloc_r>:
 8014820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014824:	4607      	mov	r7, r0
 8014826:	4614      	mov	r4, r2
 8014828:	460d      	mov	r5, r1
 801482a:	b921      	cbnz	r1, 8014836 <_realloc_r+0x16>
 801482c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014830:	4611      	mov	r1, r2
 8014832:	f7ff bc75 	b.w	8014120 <_malloc_r>
 8014836:	b92a      	cbnz	r2, 8014844 <_realloc_r+0x24>
 8014838:	f7ff fc06 	bl	8014048 <_free_r>
 801483c:	4625      	mov	r5, r4
 801483e:	4628      	mov	r0, r5
 8014840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014844:	f000 f81a 	bl	801487c <_malloc_usable_size_r>
 8014848:	4284      	cmp	r4, r0
 801484a:	4606      	mov	r6, r0
 801484c:	d802      	bhi.n	8014854 <_realloc_r+0x34>
 801484e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014852:	d8f4      	bhi.n	801483e <_realloc_r+0x1e>
 8014854:	4621      	mov	r1, r4
 8014856:	4638      	mov	r0, r7
 8014858:	f7ff fc62 	bl	8014120 <_malloc_r>
 801485c:	4680      	mov	r8, r0
 801485e:	b908      	cbnz	r0, 8014864 <_realloc_r+0x44>
 8014860:	4645      	mov	r5, r8
 8014862:	e7ec      	b.n	801483e <_realloc_r+0x1e>
 8014864:	42b4      	cmp	r4, r6
 8014866:	4622      	mov	r2, r4
 8014868:	4629      	mov	r1, r5
 801486a:	bf28      	it	cs
 801486c:	4632      	movcs	r2, r6
 801486e:	f7ff fbdd 	bl	801402c <memcpy>
 8014872:	4629      	mov	r1, r5
 8014874:	4638      	mov	r0, r7
 8014876:	f7ff fbe7 	bl	8014048 <_free_r>
 801487a:	e7f1      	b.n	8014860 <_realloc_r+0x40>

0801487c <_malloc_usable_size_r>:
 801487c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014880:	1f18      	subs	r0, r3, #4
 8014882:	2b00      	cmp	r3, #0
 8014884:	bfbc      	itt	lt
 8014886:	580b      	ldrlt	r3, [r1, r0]
 8014888:	18c0      	addlt	r0, r0, r3
 801488a:	4770      	bx	lr

0801488c <_init>:
 801488c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801488e:	bf00      	nop
 8014890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014892:	bc08      	pop	{r3}
 8014894:	469e      	mov	lr, r3
 8014896:	4770      	bx	lr

08014898 <_fini>:
 8014898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801489a:	bf00      	nop
 801489c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801489e:	bc08      	pop	{r3}
 80148a0:	469e      	mov	lr, r3
 80148a2:	4770      	bx	lr
